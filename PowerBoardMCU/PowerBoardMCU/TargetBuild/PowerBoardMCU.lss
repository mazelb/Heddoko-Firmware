
PowerBoardMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000165cc  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004165cc  004165cc  0001e5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c14  20000000  004165d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00008dbc  20000c18  004171f0  00020c18  2**3
                  ALLOC
  4 .stack        00003004  200099d4  0041ffac  00020c18  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020c14  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00020c3e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00020c1e  00000000  00000000  00020c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000530e  00000000  00000000  000418b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000970c  00000000  00000000  00046bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001a98  00000000  00000000  000502d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000017e0  00000000  00000000  00051d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b6a0  00000000  00000000  00053549  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024439  00000000  00000000  0006ebe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00058deb  00000000  00000000  00093022  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006914  00000000  00000000  000ebe10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000c9d8 	.word	0x2000c9d8
  400004:	0040beed 	.word	0x0040beed
  400008:	0040bfb5 	.word	0x0040bfb5
  40000c:	0040c36d 	.word	0x0040c36d
  400010:	0040c375 	.word	0x0040c375
  400014:	0040c37d 	.word	0x0040c37d
  400018:	0040c385 	.word	0x0040c385
	...
  40002c:	00408431 	.word	0x00408431
  400030:	0040bfb5 	.word	0x0040bfb5
  400034:	00000000 	.word	0x00000000
  400038:	0040851d 	.word	0x0040851d
  40003c:	00408559 	.word	0x00408559
  400040:	0040bfb5 	.word	0x0040bfb5
  400044:	0040bfb5 	.word	0x0040bfb5
  400048:	0040bfb5 	.word	0x0040bfb5
  40004c:	0040bfb5 	.word	0x0040bfb5
  400050:	0040439d 	.word	0x0040439d
  400054:	0040bfb5 	.word	0x0040bfb5
  400058:	0040bfb5 	.word	0x0040bfb5
  40005c:	00000000 	.word	0x00000000
  400060:	00407ea9 	.word	0x00407ea9
  400064:	00407f0d 	.word	0x00407f0d
  400068:	00000000 	.word	0x00000000
  40006c:	0040b57d 	.word	0x0040b57d
  400070:	0040b595 	.word	0x0040b595
  400074:	00000000 	.word	0x00000000
  400078:	00407f75 	.word	0x00407f75
	...
  40008c:	0040044d 	.word	0x0040044d
  400090:	0040045d 	.word	0x0040045d
  400094:	0040bfb5 	.word	0x0040bfb5
  400098:	0040bfb5 	.word	0x0040bfb5
  40009c:	0040bfb5 	.word	0x0040bfb5
  4000a0:	0040bfb5 	.word	0x0040bfb5
  4000a4:	0040bfb5 	.word	0x0040bfb5
	...
  4000b4:	0040bfb5 	.word	0x0040bfb5
  4000b8:	00000000 	.word	0x00000000
  4000bc:	0040bfb5 	.word	0x0040bfb5
  4000c0:	0040bfb5 	.word	0x0040bfb5
  4000c4:	0040bfb5 	.word	0x0040bfb5
  4000c8:	00401f95 	.word	0x00401f95

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000c18 	.word	0x20000c18
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004165d4 	.word	0x004165d4

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	004165d4 	.word	0x004165d4
  400114:	20000c1c 	.word	0x20000c1c
  400118:	004165d4 	.word	0x004165d4
  40011c:	00000000 	.word	0x00000000

00400120 <local_twi_handler>:
/*
 * For internal use only.
 * A common TWI interrupt handler that is called for all TWI peripherals.
 */
static void local_twi_handler(const portBASE_TYPE twi_index)
{
  400120:	b590      	push	{r4, r7, lr}
  400122:	b08b      	sub	sp, #44	; 0x2c
  400124:	af00      	add	r7, sp, #0
  400126:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  400128:	2300      	movs	r3, #0
  40012a:	60bb      	str	r3, [r7, #8]
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  40012c:	2300      	movs	r3, #0
  40012e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	twi_port = all_twi_definitions[twi_index].peripheral_base_address;
  400132:	4a81      	ldr	r2, [pc, #516]	; (400338 <local_twi_handler+0x218>)
  400134:	687b      	ldr	r3, [r7, #4]
  400136:	011b      	lsls	r3, r3, #4
  400138:	4413      	add	r3, r2
  40013a:	681b      	ldr	r3, [r3, #0]
  40013c:	61bb      	str	r3, [r7, #24]

	twi_status = twi_get_interrupt_status(twi_port);
  40013e:	69b8      	ldr	r0, [r7, #24]
  400140:	4b7e      	ldr	r3, [pc, #504]	; (40033c <local_twi_handler+0x21c>)
  400142:	4798      	blx	r3
  400144:	6178      	str	r0, [r7, #20]
	twi_status &= twi_get_interrupt_mask(twi_port);
  400146:	69b8      	ldr	r0, [r7, #24]
  400148:	4b7d      	ldr	r3, [pc, #500]	; (400340 <local_twi_handler+0x220>)
  40014a:	4798      	blx	r3
  40014c:	4603      	mov	r3, r0
  40014e:	697a      	ldr	r2, [r7, #20]
  400150:	4013      	ands	r3, r2
  400152:	617b      	str	r3, [r7, #20]

	/* Has the PDC completed a transmission? */
	if ((twi_status & TWI_SR_ENDTX) != 0UL) {
  400154:	697b      	ldr	r3, [r7, #20]
  400156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40015a:	2b00      	cmp	r3, #0
  40015c:	d076      	beq.n	40024c <local_twi_handler+0x12c>
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS);
  40015e:	4a76      	ldr	r2, [pc, #472]	; (400338 <local_twi_handler+0x218>)
  400160:	687b      	ldr	r3, [r7, #4]
  400162:	011b      	lsls	r3, r3, #4
  400164:	4413      	add	r3, r2
  400166:	685b      	ldr	r3, [r3, #4]
  400168:	4618      	mov	r0, r3
  40016a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40016e:	4b75      	ldr	r3, [pc, #468]	; (400344 <local_twi_handler+0x224>)
  400170:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  400172:	69b8      	ldr	r0, [r7, #24]
  400174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400178:	4b73      	ldr	r3, [pc, #460]	; (400348 <local_twi_handler+0x228>)
  40017a:	4798      	blx	r3

		uint8_t status;
		uint32_t timeout_counter = 0;
  40017c:	2300      	movs	r3, #0
  40017e:	623b      	str	r3, [r7, #32]

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  400180:	69bb      	ldr	r3, [r7, #24]
  400182:	6a1b      	ldr	r3, [r3, #32]
  400184:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXRDY) {
  400186:	7cfb      	ldrb	r3, [r7, #19]
  400188:	f003 0304 	and.w	r3, r3, #4
  40018c:	2b00      	cmp	r3, #0
  40018e:	d000      	beq.n	400192 <local_twi_handler+0x72>
				break;
  400190:	e00b      	b.n	4001aa <local_twi_handler+0x8a>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  400192:	6a3b      	ldr	r3, [r7, #32]
  400194:	3301      	adds	r3, #1
  400196:	623b      	str	r3, [r7, #32]
  400198:	6a3b      	ldr	r3, [r7, #32]
  40019a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40019e:	d103      	bne.n	4001a8 <local_twi_handler+0x88>
				transfer_timeout = true;
  4001a0:	2301      	movs	r3, #1
  4001a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  4001a6:	e000      	b.n	4001aa <local_twi_handler+0x8a>
			}
		}
  4001a8:	e7ea      	b.n	400180 <local_twi_handler+0x60>
		/* Complete the transfer - stop and last byte */
		twi_port->TWI_CR = TWI_CR_STOP;
  4001aa:	69bb      	ldr	r3, [r7, #24]
  4001ac:	2202      	movs	r2, #2
  4001ae:	601a      	str	r2, [r3, #0]
		twi_port->TWI_THR = twis[twi_index].buffer[twis[twi_index].length-1];
  4001b0:	4b66      	ldr	r3, [pc, #408]	; (40034c <local_twi_handler+0x22c>)
  4001b2:	687a      	ldr	r2, [r7, #4]
  4001b4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4001b8:	4964      	ldr	r1, [pc, #400]	; (40034c <local_twi_handler+0x22c>)
  4001ba:	687b      	ldr	r3, [r7, #4]
  4001bc:	00db      	lsls	r3, r3, #3
  4001be:	440b      	add	r3, r1
  4001c0:	685b      	ldr	r3, [r3, #4]
  4001c2:	3b01      	subs	r3, #1
  4001c4:	4413      	add	r3, r2
  4001c6:	781b      	ldrb	r3, [r3, #0]
  4001c8:	461a      	mov	r2, r3
  4001ca:	69bb      	ldr	r3, [r7, #24]
  4001cc:	635a      	str	r2, [r3, #52]	; 0x34

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
  4001ce:	69bb      	ldr	r3, [r7, #24]
  4001d0:	6a1b      	ldr	r3, [r3, #32]
  4001d2:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXCOMP) {
  4001d4:	7cfb      	ldrb	r3, [r7, #19]
  4001d6:	f003 0301 	and.w	r3, r3, #1
  4001da:	2b00      	cmp	r3, #0
  4001dc:	d000      	beq.n	4001e0 <local_twi_handler+0xc0>
				break;
  4001de:	e00b      	b.n	4001f8 <local_twi_handler+0xd8>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4001e0:	6a3b      	ldr	r3, [r7, #32]
  4001e2:	3301      	adds	r3, #1
  4001e4:	623b      	str	r3, [r7, #32]
  4001e6:	6a3b      	ldr	r3, [r7, #32]
  4001e8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4001ec:	d103      	bne.n	4001f6 <local_twi_handler+0xd6>
				transfer_timeout = true;
  4001ee:	2301      	movs	r3, #1
  4001f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  4001f4:	e000      	b.n	4001f8 <local_twi_handler+0xd8>
			}
		}
  4001f6:	e7ea      	b.n	4001ce <local_twi_handler+0xae>
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  4001f8:	4a55      	ldr	r2, [pc, #340]	; (400350 <local_twi_handler+0x230>)
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	00db      	lsls	r3, r3, #3
  4001fe:	4413      	add	r3, r2
  400200:	685b      	ldr	r3, [r3, #4]
  400202:	2b00      	cmp	r3, #0
  400204:	d00c      	beq.n	400220 <local_twi_handler+0x100>
			xSemaphoreGiveFromISR(
  400206:	4a52      	ldr	r2, [pc, #328]	; (400350 <local_twi_handler+0x230>)
  400208:	687b      	ldr	r3, [r7, #4]
  40020a:	00db      	lsls	r3, r3, #3
  40020c:	4413      	add	r3, r2
  40020e:	685a      	ldr	r2, [r3, #4]
  400210:	f107 0308 	add.w	r3, r7, #8
  400214:	4610      	mov	r0, r2
  400216:	2100      	movs	r1, #0
  400218:	461a      	mov	r2, r3
  40021a:	2300      	movs	r3, #0
  40021c:	4c4d      	ldr	r4, [pc, #308]	; (400354 <local_twi_handler+0x234>)
  40021e:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  400220:	6a3b      	ldr	r3, [r7, #32]
  400222:	f1b3 3fff 	cmp.w	r3, #4294967295
  400226:	d011      	beq.n	40024c <local_twi_handler+0x12c>
			if (tx_dma_control[twi_index]. transaction_complete_notification_semaphore != NULL) {
  400228:	4b49      	ldr	r3, [pc, #292]	; (400350 <local_twi_handler+0x230>)
  40022a:	687a      	ldr	r2, [r7, #4]
  40022c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400230:	2b00      	cmp	r3, #0
  400232:	d00b      	beq.n	40024c <local_twi_handler+0x12c>
				xSemaphoreGiveFromISR(
  400234:	4b46      	ldr	r3, [pc, #280]	; (400350 <local_twi_handler+0x230>)
  400236:	687a      	ldr	r2, [r7, #4]
  400238:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  40023c:	f107 0308 	add.w	r3, r7, #8
  400240:	4610      	mov	r0, r2
  400242:	2100      	movs	r1, #0
  400244:	461a      	mov	r2, r3
  400246:	2300      	movs	r3, #0
  400248:	4c42      	ldr	r4, [pc, #264]	; (400354 <local_twi_handler+0x234>)
  40024a:	47a0      	blx	r4
			}
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
  40024c:	697b      	ldr	r3, [r7, #20]
  40024e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  400252:	2b00      	cmp	r3, #0
  400254:	f000 80aa 	beq.w	4003ac <local_twi_handler+0x28c>
		uint32_t timeout_counter = 0;
  400258:	2300      	movs	r3, #0
  40025a:	61fb      	str	r3, [r7, #28]
		uint32_t status;
		/* Must handle the two last bytes */
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_RXTDIS);
  40025c:	4a36      	ldr	r2, [pc, #216]	; (400338 <local_twi_handler+0x218>)
  40025e:	687b      	ldr	r3, [r7, #4]
  400260:	011b      	lsls	r3, r3, #4
  400262:	4413      	add	r3, r2
  400264:	685b      	ldr	r3, [r3, #4]
  400266:	4618      	mov	r0, r3
  400268:	2102      	movs	r1, #2
  40026a:	4b36      	ldr	r3, [pc, #216]	; (400344 <local_twi_handler+0x224>)
  40026c:	4798      	blx	r3

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  40026e:	69b8      	ldr	r0, [r7, #24]
  400270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400274:	4b34      	ldr	r3, [pc, #208]	; (400348 <local_twi_handler+0x228>)
  400276:	4798      	blx	r3

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  400278:	69bb      	ldr	r3, [r7, #24]
  40027a:	6a1b      	ldr	r3, [r3, #32]
  40027c:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  40027e:	68fb      	ldr	r3, [r7, #12]
  400280:	f003 0302 	and.w	r3, r3, #2
  400284:	2b00      	cmp	r3, #0
  400286:	d000      	beq.n	40028a <local_twi_handler+0x16a>
				break;
  400288:	e008      	b.n	40029c <local_twi_handler+0x17c>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  40028a:	69fb      	ldr	r3, [r7, #28]
  40028c:	3301      	adds	r3, #1
  40028e:	61fb      	str	r3, [r7, #28]
  400290:	69fb      	ldr	r3, [r7, #28]
  400292:	f1b3 3fff 	cmp.w	r3, #4294967295
  400296:	d100      	bne.n	40029a <local_twi_handler+0x17a>
				break;
  400298:	e000      	b.n	40029c <local_twi_handler+0x17c>
			}
		}
  40029a:	e7ed      	b.n	400278 <local_twi_handler+0x158>
		/* Complete the transfer. */
		twi_port->TWI_CR = TWI_CR_STOP;
  40029c:	69bb      	ldr	r3, [r7, #24]
  40029e:	2202      	movs	r2, #2
  4002a0:	601a      	str	r2, [r3, #0]
		/* Read second last data */
		twis[twi_index].buffer[(twis[twi_index].length)-2] = twi_port->TWI_RHR;
  4002a2:	4b2a      	ldr	r3, [pc, #168]	; (40034c <local_twi_handler+0x22c>)
  4002a4:	687a      	ldr	r2, [r7, #4]
  4002a6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4002aa:	4928      	ldr	r1, [pc, #160]	; (40034c <local_twi_handler+0x22c>)
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	00db      	lsls	r3, r3, #3
  4002b0:	440b      	add	r3, r1
  4002b2:	685b      	ldr	r3, [r3, #4]
  4002b4:	3b02      	subs	r3, #2
  4002b6:	4413      	add	r3, r2
  4002b8:	69ba      	ldr	r2, [r7, #24]
  4002ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4002bc:	b2d2      	uxtb	r2, r2
  4002be:	701a      	strb	r2, [r3, #0]

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  4002c0:	69bb      	ldr	r3, [r7, #24]
  4002c2:	6a1b      	ldr	r3, [r3, #32]
  4002c4:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	f003 0302 	and.w	r3, r3, #2
  4002cc:	2b00      	cmp	r3, #0
  4002ce:	d000      	beq.n	4002d2 <local_twi_handler+0x1b2>
				break;
  4002d0:	e008      	b.n	4002e4 <local_twi_handler+0x1c4>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4002d2:	69fb      	ldr	r3, [r7, #28]
  4002d4:	3301      	adds	r3, #1
  4002d6:	61fb      	str	r3, [r7, #28]
  4002d8:	69fb      	ldr	r3, [r7, #28]
  4002da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002de:	d100      	bne.n	4002e2 <local_twi_handler+0x1c2>
				break;
  4002e0:	e000      	b.n	4002e4 <local_twi_handler+0x1c4>
			}
		}
  4002e2:	e7ed      	b.n	4002c0 <local_twi_handler+0x1a0>

		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  4002e4:	69fb      	ldr	r3, [r7, #28]
  4002e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002ea:	d035      	beq.n	400358 <local_twi_handler+0x238>
			/* Read last data */
			twis[twi_index].buffer[(twis[twi_index].length)-1] = twi_port->TWI_RHR;
  4002ec:	4b17      	ldr	r3, [pc, #92]	; (40034c <local_twi_handler+0x22c>)
  4002ee:	687a      	ldr	r2, [r7, #4]
  4002f0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4002f4:	4915      	ldr	r1, [pc, #84]	; (40034c <local_twi_handler+0x22c>)
  4002f6:	687b      	ldr	r3, [r7, #4]
  4002f8:	00db      	lsls	r3, r3, #3
  4002fa:	440b      	add	r3, r1
  4002fc:	685b      	ldr	r3, [r3, #4]
  4002fe:	3b01      	subs	r3, #1
  400300:	4413      	add	r3, r2
  400302:	69ba      	ldr	r2, [r7, #24]
  400304:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400306:	b2d2      	uxtb	r2, r2
  400308:	701a      	strb	r2, [r3, #0]
			timeout_counter = 0;
  40030a:	2300      	movs	r3, #0
  40030c:	61fb      	str	r3, [r7, #28]
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
  40030e:	69bb      	ldr	r3, [r7, #24]
  400310:	6a1b      	ldr	r3, [r3, #32]
  400312:	60fb      	str	r3, [r7, #12]
				if (status & TWI_SR_TXCOMP) {
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	f003 0301 	and.w	r3, r3, #1
  40031a:	2b00      	cmp	r3, #0
  40031c:	d000      	beq.n	400320 <local_twi_handler+0x200>
					break;
  40031e:	e01b      	b.n	400358 <local_twi_handler+0x238>
				}
				/* Check timeout condition. */
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  400320:	69fb      	ldr	r3, [r7, #28]
  400322:	3301      	adds	r3, #1
  400324:	61fb      	str	r3, [r7, #28]
  400326:	69fb      	ldr	r3, [r7, #28]
  400328:	f1b3 3fff 	cmp.w	r3, #4294967295
  40032c:	d103      	bne.n	400336 <local_twi_handler+0x216>
					transfer_timeout = true;
  40032e:	2301      	movs	r3, #1
  400330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
  400334:	e010      	b.n	400358 <local_twi_handler+0x238>
				}
			}
  400336:	e7ea      	b.n	40030e <local_twi_handler+0x1ee>
  400338:	00415c4c 	.word	0x00415c4c
  40033c:	004067b5 	.word	0x004067b5
  400340:	004067cd 	.word	0x004067cd
  400344:	0040a435 	.word	0x0040a435
  400348:	00406795 	.word	0x00406795
  40034c:	20000c54 	.word	0x20000c54
  400350:	20000c34 	.word	0x20000c34
  400354:	00408b21 	.word	0x00408b21
		}

		/* If the driver is supporting multi-threading, then return the access
		mutex.  NOTE: As the peripheral is half duplex there is only one
		access mutex, and the reception uses the tx access muted. */
		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  400358:	4a35      	ldr	r2, [pc, #212]	; (400430 <local_twi_handler+0x310>)
  40035a:	687b      	ldr	r3, [r7, #4]
  40035c:	00db      	lsls	r3, r3, #3
  40035e:	4413      	add	r3, r2
  400360:	685b      	ldr	r3, [r3, #4]
  400362:	2b00      	cmp	r3, #0
  400364:	d00c      	beq.n	400380 <local_twi_handler+0x260>
			xSemaphoreGiveFromISR(
  400366:	4a32      	ldr	r2, [pc, #200]	; (400430 <local_twi_handler+0x310>)
  400368:	687b      	ldr	r3, [r7, #4]
  40036a:	00db      	lsls	r3, r3, #3
  40036c:	4413      	add	r3, r2
  40036e:	685a      	ldr	r2, [r3, #4]
  400370:	f107 0308 	add.w	r3, r7, #8
  400374:	4610      	mov	r0, r2
  400376:	2100      	movs	r1, #0
  400378:	461a      	mov	r2, r3
  40037a:	2300      	movs	r3, #0
  40037c:	4c2d      	ldr	r4, [pc, #180]	; (400434 <local_twi_handler+0x314>)
  40037e:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the receiving task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if  (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  400380:	69fb      	ldr	r3, [r7, #28]
  400382:	f1b3 3fff 	cmp.w	r3, #4294967295
  400386:	d011      	beq.n	4003ac <local_twi_handler+0x28c>
			if (rx_dma_control[twi_index].transaction_complete_notification_semaphore != NULL) {
  400388:	4b2b      	ldr	r3, [pc, #172]	; (400438 <local_twi_handler+0x318>)
  40038a:	687a      	ldr	r2, [r7, #4]
  40038c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400390:	2b00      	cmp	r3, #0
  400392:	d00b      	beq.n	4003ac <local_twi_handler+0x28c>
				xSemaphoreGiveFromISR(
  400394:	4b28      	ldr	r3, [pc, #160]	; (400438 <local_twi_handler+0x318>)
  400396:	687a      	ldr	r2, [r7, #4]
  400398:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  40039c:	f107 0308 	add.w	r3, r7, #8
  4003a0:	4610      	mov	r0, r2
  4003a2:	2100      	movs	r1, #0
  4003a4:	461a      	mov	r2, r3
  4003a6:	2300      	movs	r3, #0
  4003a8:	4c22      	ldr	r4, [pc, #136]	; (400434 <local_twi_handler+0x314>)
  4003aa:	47a0      	blx	r4
						&higher_priority_task_woken);
			}
		}
	}

	if (((twi_status & SR_ERROR_INTERRUPTS) != 0) || (transfer_timeout == true)) {
  4003ac:	697b      	ldr	r3, [r7, #20]
  4003ae:	f403 7350 	and.w	r3, r3, #832	; 0x340
  4003b2:	2b00      	cmp	r3, #0
  4003b4:	d103      	bne.n	4003be <local_twi_handler+0x29e>
  4003b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4003ba:	2b00      	cmp	r3, #0
  4003bc:	d02f      	beq.n	40041e <local_twi_handler+0x2fe>
		Stop the transmission, disable interrupts used by the peripheral, and
		ensure the peripheral access mutex is made available to tasks.  As this
		peripheral is half duplex, only the Tx peripheral access mutex exits.*/

		/* Stop the PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  4003be:	4a1f      	ldr	r2, [pc, #124]	; (40043c <local_twi_handler+0x31c>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	011b      	lsls	r3, r3, #4
  4003c4:	4413      	add	r3, r2
  4003c6:	685b      	ldr	r3, [r3, #4]
  4003c8:	4618      	mov	r0, r3
  4003ca:	f240 2102 	movw	r1, #514	; 0x202
  4003ce:	4b1c      	ldr	r3, [pc, #112]	; (400440 <local_twi_handler+0x320>)
  4003d0:	4798      	blx	r3

		if (!(twi_status & TWI_SR_NACK)) {
  4003d2:	697b      	ldr	r3, [r7, #20]
  4003d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4003d8:	2b00      	cmp	r3, #0
  4003da:	d102      	bne.n	4003e2 <local_twi_handler+0x2c2>
			/* Do not send stop if NACK received. Handled by hardware */
			twi_port->TWI_CR = TWI_CR_STOP;
  4003dc:	69bb      	ldr	r3, [r7, #24]
  4003de:	2202      	movs	r2, #2
  4003e0:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  4003e2:	69b8      	ldr	r0, [r7, #24]
  4003e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4003e8:	4b16      	ldr	r3, [pc, #88]	; (400444 <local_twi_handler+0x324>)
  4003ea:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  4003ec:	69b8      	ldr	r0, [r7, #24]
  4003ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4003f2:	4b14      	ldr	r3, [pc, #80]	; (400444 <local_twi_handler+0x324>)
  4003f4:	4798      	blx	r3

		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  4003f6:	4a0e      	ldr	r2, [pc, #56]	; (400430 <local_twi_handler+0x310>)
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	00db      	lsls	r3, r3, #3
  4003fc:	4413      	add	r3, r2
  4003fe:	685b      	ldr	r3, [r3, #4]
  400400:	2b00      	cmp	r3, #0
  400402:	d00c      	beq.n	40041e <local_twi_handler+0x2fe>
			xSemaphoreGiveFromISR(
  400404:	4a0a      	ldr	r2, [pc, #40]	; (400430 <local_twi_handler+0x310>)
  400406:	687b      	ldr	r3, [r7, #4]
  400408:	00db      	lsls	r3, r3, #3
  40040a:	4413      	add	r3, r2
  40040c:	685a      	ldr	r2, [r3, #4]
  40040e:	f107 0308 	add.w	r3, r7, #8
  400412:	4610      	mov	r0, r2
  400414:	2100      	movs	r1, #0
  400416:	461a      	mov	r2, r3
  400418:	2300      	movs	r3, #0
  40041a:	4c06      	ldr	r4, [pc, #24]	; (400434 <local_twi_handler+0x314>)
  40041c:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  40041e:	68bb      	ldr	r3, [r7, #8]
  400420:	2b00      	cmp	r3, #0
  400422:	d001      	beq.n	400428 <local_twi_handler+0x308>
  400424:	4b08      	ldr	r3, [pc, #32]	; (400448 <local_twi_handler+0x328>)
  400426:	4798      	blx	r3
}
  400428:	372c      	adds	r7, #44	; 0x2c
  40042a:	46bd      	mov	sp, r7
  40042c:	bd90      	pop	{r4, r7, pc}
  40042e:	bf00      	nop
  400430:	20000c34 	.word	0x20000c34
  400434:	00408b21 	.word	0x00408b21
  400438:	20000c44 	.word	0x20000c44
  40043c:	00415c4c 	.word	0x00415c4c
  400440:	0040a435 	.word	0x0040a435
  400444:	00406795 	.word	0x00406795
  400448:	004084a5 	.word	0x004084a5

0040044c <TWI0_Handler>:
#endif /* TWI */

#ifdef TWI0

void TWI0_Handler(void)
{
  40044c:	b580      	push	{r7, lr}
  40044e:	af00      	add	r7, sp, #0
	local_twi_handler(0);
  400450:	2000      	movs	r0, #0
  400452:	4b01      	ldr	r3, [pc, #4]	; (400458 <TWI0_Handler+0xc>)
  400454:	4798      	blx	r3
}
  400456:	bd80      	pop	{r7, pc}
  400458:	00400121 	.word	0x00400121

0040045c <TWI1_Handler>:
#endif

#ifdef TWI1

void TWI1_Handler(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	local_twi_handler(1);
  400460:	2001      	movs	r0, #1
  400462:	4b01      	ldr	r3, [pc, #4]	; (400468 <TWI1_Handler+0xc>)
  400464:	4798      	blx	r3
}
  400466:	bd80      	pop	{r7, pc}
  400468:	00400121 	.word	0x00400121

0040046c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  40046c:	b480      	push	{r7}
  40046e:	b083      	sub	sp, #12
  400470:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400472:	f3ef 8310 	mrs	r3, PRIMASK
  400476:	603b      	str	r3, [r7, #0]
  return(result);
  400478:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  40047a:	2b00      	cmp	r3, #0
  40047c:	bf14      	ite	ne
  40047e:	2300      	movne	r3, #0
  400480:	2301      	moveq	r3, #1
  400482:	b2db      	uxtb	r3, r3
  400484:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400486:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400488:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40048c:	4b04      	ldr	r3, [pc, #16]	; (4004a0 <cpu_irq_save+0x34>)
  40048e:	2200      	movs	r2, #0
  400490:	701a      	strb	r2, [r3, #0]
	return flags;
  400492:	687b      	ldr	r3, [r7, #4]
}
  400494:	4618      	mov	r0, r3
  400496:	370c      	adds	r7, #12
  400498:	46bd      	mov	sp, r7
  40049a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40049e:	4770      	bx	lr
  4004a0:	20000364 	.word	0x20000364

004004a4 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4004a4:	b480      	push	{r7}
  4004a6:	b083      	sub	sp, #12
  4004a8:	af00      	add	r7, sp, #0
  4004aa:	6078      	str	r0, [r7, #4]
	return (flags);
  4004ac:	687b      	ldr	r3, [r7, #4]
  4004ae:	2b00      	cmp	r3, #0
  4004b0:	bf0c      	ite	eq
  4004b2:	2300      	moveq	r3, #0
  4004b4:	2301      	movne	r3, #1
  4004b6:	b2db      	uxtb	r3, r3
}
  4004b8:	4618      	mov	r0, r3
  4004ba:	370c      	adds	r7, #12
  4004bc:	46bd      	mov	sp, r7
  4004be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004c2:	4770      	bx	lr

004004c4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4004c4:	b580      	push	{r7, lr}
  4004c6:	b082      	sub	sp, #8
  4004c8:	af00      	add	r7, sp, #0
  4004ca:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4004cc:	6878      	ldr	r0, [r7, #4]
  4004ce:	4b07      	ldr	r3, [pc, #28]	; (4004ec <cpu_irq_restore+0x28>)
  4004d0:	4798      	blx	r3
  4004d2:	4603      	mov	r3, r0
  4004d4:	2b00      	cmp	r3, #0
  4004d6:	d005      	beq.n	4004e4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4004d8:	4b05      	ldr	r3, [pc, #20]	; (4004f0 <cpu_irq_restore+0x2c>)
  4004da:	2201      	movs	r2, #1
  4004dc:	701a      	strb	r2, [r3, #0]
  4004de:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4004e2:	b662      	cpsie	i
}
  4004e4:	3708      	adds	r7, #8
  4004e6:	46bd      	mov	sp, r7
  4004e8:	bd80      	pop	{r7, pc}
  4004ea:	bf00      	nop
  4004ec:	004004a5 	.word	0x004004a5
  4004f0:	20000364 	.word	0x20000364

004004f4 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
  4004f4:	b480      	push	{r7}
  4004f6:	b083      	sub	sp, #12
  4004f8:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  4004fa:	2300      	movs	r3, #0
  4004fc:	71bb      	strb	r3, [r7, #6]
	udi_cdc_nb_comm_enabled = 0;
  4004fe:	4b41      	ldr	r3, [pc, #260]	; (400604 <udi_cdc_comm_enable+0x110>)
  400500:	2200      	movs	r2, #0
  400502:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  400504:	79ba      	ldrb	r2, [r7, #6]
  400506:	4b40      	ldr	r3, [pc, #256]	; (400608 <udi_cdc_comm_enable+0x114>)
  400508:	2100      	movs	r1, #0
  40050a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	uid_cdc_state_msg[port].header.bmRequestType =
  40050e:	79ba      	ldrb	r2, [r7, #6]
  400510:	493e      	ldr	r1, [pc, #248]	; (40060c <udi_cdc_comm_enable+0x118>)
  400512:	4613      	mov	r3, r2
  400514:	009b      	lsls	r3, r3, #2
  400516:	4413      	add	r3, r2
  400518:	005b      	lsls	r3, r3, #1
  40051a:	440b      	add	r3, r1
  40051c:	22a1      	movs	r2, #161	; 0xa1
  40051e:	701a      	strb	r2, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400520:	79ba      	ldrb	r2, [r7, #6]
  400522:	493a      	ldr	r1, [pc, #232]	; (40060c <udi_cdc_comm_enable+0x118>)
  400524:	4613      	mov	r3, r2
  400526:	009b      	lsls	r3, r3, #2
  400528:	4413      	add	r3, r2
  40052a:	005b      	lsls	r3, r3, #1
  40052c:	440b      	add	r3, r1
  40052e:	2220      	movs	r2, #32
  400530:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  400532:	79ba      	ldrb	r2, [r7, #6]
  400534:	4935      	ldr	r1, [pc, #212]	; (40060c <udi_cdc_comm_enable+0x118>)
  400536:	4613      	mov	r3, r2
  400538:	009b      	lsls	r3, r3, #2
  40053a:	4413      	add	r3, r2
  40053c:	005b      	lsls	r3, r3, #1
  40053e:	440b      	add	r3, r1
  400540:	2200      	movs	r2, #0
  400542:	805a      	strh	r2, [r3, #2]

	switch (port) {
  400544:	79bb      	ldrb	r3, [r7, #6]
  400546:	2b00      	cmp	r3, #0
  400548:	d102      	bne.n	400550 <udi_cdc_comm_enable+0x5c>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
  40054a:	2300      	movs	r3, #0
  40054c:	71fb      	strb	r3, [r7, #7]
  40054e:	e002      	b.n	400556 <udi_cdc_comm_enable+0x62>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
  400550:	2300      	movs	r3, #0
  400552:	71fb      	strb	r3, [r7, #7]
		break;
  400554:	bf00      	nop
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  400556:	79ba      	ldrb	r2, [r7, #6]
  400558:	79fb      	ldrb	r3, [r7, #7]
  40055a:	b299      	uxth	r1, r3
  40055c:	482b      	ldr	r0, [pc, #172]	; (40060c <udi_cdc_comm_enable+0x118>)
  40055e:	4613      	mov	r3, r2
  400560:	009b      	lsls	r3, r3, #2
  400562:	4413      	add	r3, r2
  400564:	005b      	lsls	r3, r3, #1
  400566:	4403      	add	r3, r0
  400568:	460a      	mov	r2, r1
  40056a:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  40056c:	79ba      	ldrb	r2, [r7, #6]
  40056e:	4927      	ldr	r1, [pc, #156]	; (40060c <udi_cdc_comm_enable+0x118>)
  400570:	4613      	mov	r3, r2
  400572:	009b      	lsls	r3, r3, #2
  400574:	4413      	add	r3, r2
  400576:	005b      	lsls	r3, r3, #1
  400578:	440b      	add	r3, r1
  40057a:	2202      	movs	r2, #2
  40057c:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  40057e:	79ba      	ldrb	r2, [r7, #6]
  400580:	4922      	ldr	r1, [pc, #136]	; (40060c <udi_cdc_comm_enable+0x118>)
  400582:	4613      	mov	r3, r2
  400584:	009b      	lsls	r3, r3, #2
  400586:	4413      	add	r3, r2
  400588:	005b      	lsls	r3, r3, #1
  40058a:	440b      	add	r3, r1
  40058c:	3308      	adds	r3, #8
  40058e:	2200      	movs	r2, #0
  400590:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400592:	79ba      	ldrb	r2, [r7, #6]
  400594:	491e      	ldr	r1, [pc, #120]	; (400610 <udi_cdc_comm_enable+0x11c>)
  400596:	4613      	mov	r3, r2
  400598:	00db      	lsls	r3, r3, #3
  40059a:	1a9b      	subs	r3, r3, r2
  40059c:	440b      	add	r3, r1
  40059e:	2200      	movs	r2, #0
  4005a0:	701a      	strb	r2, [r3, #0]
  4005a2:	2200      	movs	r2, #0
  4005a4:	f062 027b 	orn	r2, r2, #123	; 0x7b
  4005a8:	705a      	strb	r2, [r3, #1]
  4005aa:	2200      	movs	r2, #0
  4005ac:	f042 0203 	orr.w	r2, r2, #3
  4005b0:	709a      	strb	r2, [r3, #2]
  4005b2:	2200      	movs	r2, #0
  4005b4:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  4005b6:	79ba      	ldrb	r2, [r7, #6]
  4005b8:	4915      	ldr	r1, [pc, #84]	; (400610 <udi_cdc_comm_enable+0x11c>)
  4005ba:	4613      	mov	r3, r2
  4005bc:	00db      	lsls	r3, r3, #3
  4005be:	1a9b      	subs	r3, r3, r2
  4005c0:	440b      	add	r3, r1
  4005c2:	2200      	movs	r2, #0
  4005c4:	711a      	strb	r2, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  4005c6:	79ba      	ldrb	r2, [r7, #6]
  4005c8:	4911      	ldr	r1, [pc, #68]	; (400610 <udi_cdc_comm_enable+0x11c>)
  4005ca:	4613      	mov	r3, r2
  4005cc:	00db      	lsls	r3, r3, #3
  4005ce:	1a9b      	subs	r3, r3, r2
  4005d0:	440b      	add	r3, r1
  4005d2:	2200      	movs	r2, #0
  4005d4:	715a      	strb	r2, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  4005d6:	79ba      	ldrb	r2, [r7, #6]
  4005d8:	490d      	ldr	r1, [pc, #52]	; (400610 <udi_cdc_comm_enable+0x11c>)
  4005da:	4613      	mov	r3, r2
  4005dc:	00db      	lsls	r3, r3, #3
  4005de:	1a9b      	subs	r3, r3, r2
  4005e0:	440b      	add	r3, r1
  4005e2:	2208      	movs	r2, #8
  4005e4:	719a      	strb	r2, [r3, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  4005e6:	4b07      	ldr	r3, [pc, #28]	; (400604 <udi_cdc_comm_enable+0x110>)
  4005e8:	781b      	ldrb	r3, [r3, #0]
  4005ea:	b2db      	uxtb	r3, r3
  4005ec:	3301      	adds	r3, #1
  4005ee:	b2da      	uxtb	r2, r3
  4005f0:	4b04      	ldr	r3, [pc, #16]	; (400604 <udi_cdc_comm_enable+0x110>)
  4005f2:	701a      	strb	r2, [r3, #0]
	return true;
  4005f4:	2301      	movs	r3, #1
}
  4005f6:	4618      	mov	r0, r3
  4005f8:	370c      	adds	r7, #12
  4005fa:	46bd      	mov	sp, r7
  4005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400600:	4770      	bx	lr
  400602:	bf00      	nop
  400604:	20000c7c 	.word	0x20000c7c
  400608:	20000c6c 	.word	0x20000c6c
  40060c:	20000c70 	.word	0x20000c70
  400610:	20000c64 	.word	0x20000c64

00400614 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
  400614:	b580      	push	{r7, lr}
  400616:	b082      	sub	sp, #8
  400618:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  40061a:	2300      	movs	r3, #0
  40061c:	71fb      	strb	r3, [r7, #7]
	udi_cdc_nb_data_enabled = 0;
  40061e:	4b2a      	ldr	r3, [pc, #168]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  400620:	2200      	movs	r2, #0
  400622:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  400624:	79fb      	ldrb	r3, [r7, #7]
  400626:	4a29      	ldr	r2, [pc, #164]	; (4006cc <udi_cdc_data_enable+0xb8>)
  400628:	2100      	movs	r1, #0
  40062a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40062c:	79fb      	ldrb	r3, [r7, #7]
  40062e:	4a28      	ldr	r2, [pc, #160]	; (4006d0 <udi_cdc_data_enable+0xbc>)
  400630:	2100      	movs	r1, #0
  400632:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
  400634:	79fb      	ldrb	r3, [r7, #7]
  400636:	4a27      	ldr	r2, [pc, #156]	; (4006d4 <udi_cdc_data_enable+0xc0>)
  400638:	2100      	movs	r1, #0
  40063a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
  40063c:	79fa      	ldrb	r2, [r7, #7]
  40063e:	4b26      	ldr	r3, [pc, #152]	; (4006d8 <udi_cdc_data_enable+0xc4>)
  400640:	2100      	movs	r1, #0
  400642:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400646:	79fb      	ldrb	r3, [r7, #7]
  400648:	4a23      	ldr	r2, [pc, #140]	; (4006d8 <udi_cdc_data_enable+0xc4>)
  40064a:	009b      	lsls	r3, r3, #2
  40064c:	4413      	add	r3, r2
  40064e:	2200      	movs	r2, #0
  400650:	805a      	strh	r2, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  400652:	79fa      	ldrb	r2, [r7, #7]
  400654:	4b21      	ldr	r3, [pc, #132]	; (4006dc <udi_cdc_data_enable+0xc8>)
  400656:	2100      	movs	r1, #0
  400658:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_tx_send(port);
  40065c:	79fb      	ldrb	r3, [r7, #7]
  40065e:	4618      	mov	r0, r3
  400660:	4b1f      	ldr	r3, [pc, #124]	; (4006e0 <udi_cdc_data_enable+0xcc>)
  400662:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  400664:	79fb      	ldrb	r3, [r7, #7]
  400666:	4a1f      	ldr	r2, [pc, #124]	; (4006e4 <udi_cdc_data_enable+0xd0>)
  400668:	2100      	movs	r1, #0
  40066a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
  40066c:	79fb      	ldrb	r3, [r7, #7]
  40066e:	4a1e      	ldr	r2, [pc, #120]	; (4006e8 <udi_cdc_data_enable+0xd4>)
  400670:	2100      	movs	r1, #0
  400672:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
  400674:	79fa      	ldrb	r2, [r7, #7]
  400676:	4b1d      	ldr	r3, [pc, #116]	; (4006ec <udi_cdc_data_enable+0xd8>)
  400678:	2100      	movs	r1, #0
  40067a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	udi_cdc_rx_pos[port] = 0;
  40067e:	79fa      	ldrb	r2, [r7, #7]
  400680:	4b1b      	ldr	r3, [pc, #108]	; (4006f0 <udi_cdc_data_enable+0xdc>)
  400682:	2100      	movs	r1, #0
  400684:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if (!udi_cdc_rx_start(port)) {
  400688:	79fb      	ldrb	r3, [r7, #7]
  40068a:	4618      	mov	r0, r3
  40068c:	4b19      	ldr	r3, [pc, #100]	; (4006f4 <udi_cdc_data_enable+0xe0>)
  40068e:	4798      	blx	r3
  400690:	4603      	mov	r3, r0
  400692:	f083 0301 	eor.w	r3, r3, #1
  400696:	b2db      	uxtb	r3, r3
  400698:	2b00      	cmp	r3, #0
  40069a:	d001      	beq.n	4006a0 <udi_cdc_data_enable+0x8c>
		return false;
  40069c:	2300      	movs	r3, #0
  40069e:	e00f      	b.n	4006c0 <udi_cdc_data_enable+0xac>
	}
	udi_cdc_nb_data_enabled++;
  4006a0:	4b09      	ldr	r3, [pc, #36]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  4006a2:	781b      	ldrb	r3, [r3, #0]
  4006a4:	b2db      	uxtb	r3, r3
  4006a6:	3301      	adds	r3, #1
  4006a8:	b2da      	uxtb	r2, r3
  4006aa:	4b07      	ldr	r3, [pc, #28]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  4006ac:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  4006ae:	4b06      	ldr	r3, [pc, #24]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  4006b0:	781b      	ldrb	r3, [r3, #0]
  4006b2:	b2db      	uxtb	r3, r3
  4006b4:	2b01      	cmp	r3, #1
  4006b6:	d102      	bne.n	4006be <udi_cdc_data_enable+0xaa>
		udi_cdc_data_running = true;
  4006b8:	4b0f      	ldr	r3, [pc, #60]	; (4006f8 <udi_cdc_data_enable+0xe4>)
  4006ba:	2201      	movs	r2, #1
  4006bc:	701a      	strb	r2, [r3, #0]
	}
	return true;
  4006be:	2301      	movs	r3, #1
}
  4006c0:	4618      	mov	r0, r3
  4006c2:	3708      	adds	r7, #8
  4006c4:	46bd      	mov	sp, r7
  4006c6:	bd80      	pop	{r7, pc}
  4006c8:	20000c7d 	.word	0x20000c7d
  4006cc:	20000d9c 	.word	0x20000d9c
  4006d0:	20000da0 	.word	0x20000da0
  4006d4:	20000d94 	.word	0x20000d94
  4006d8:	20000d90 	.word	0x20000d90
  4006dc:	20000d98 	.word	0x20000d98
  4006e0:	00400aa9 	.word	0x00400aa9
  4006e4:	20000d0c 	.word	0x20000d0c
  4006e8:	20000d04 	.word	0x20000d04
  4006ec:	20000d00 	.word	0x20000d00
  4006f0:	20000d08 	.word	0x20000d08
  4006f4:	00400895 	.word	0x00400895
  4006f8:	20000c7e 	.word	0x20000c7e

004006fc <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
  4006fc:	b480      	push	{r7}
  4006fe:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400700:	4b05      	ldr	r3, [pc, #20]	; (400718 <udi_cdc_comm_disable+0x1c>)
  400702:	781b      	ldrb	r3, [r3, #0]
  400704:	b2db      	uxtb	r3, r3
  400706:	3b01      	subs	r3, #1
  400708:	b2da      	uxtb	r2, r3
  40070a:	4b03      	ldr	r3, [pc, #12]	; (400718 <udi_cdc_comm_disable+0x1c>)
  40070c:	701a      	strb	r2, [r3, #0]
}
  40070e:	46bd      	mov	sp, r7
  400710:	f85d 7b04 	ldr.w	r7, [sp], #4
  400714:	4770      	bx	lr
  400716:	bf00      	nop
  400718:	20000c7c 	.word	0x20000c7c

0040071c <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
  40071c:	b480      	push	{r7}
  40071e:	b083      	sub	sp, #12
  400720:	af00      	add	r7, sp, #0
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400722:	4b09      	ldr	r3, [pc, #36]	; (400748 <udi_cdc_data_disable+0x2c>)
  400724:	781b      	ldrb	r3, [r3, #0]
  400726:	b2db      	uxtb	r3, r3
  400728:	3b01      	subs	r3, #1
  40072a:	b2da      	uxtb	r2, r3
  40072c:	4b06      	ldr	r3, [pc, #24]	; (400748 <udi_cdc_data_disable+0x2c>)
  40072e:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  400730:	4b05      	ldr	r3, [pc, #20]	; (400748 <udi_cdc_data_disable+0x2c>)
  400732:	781b      	ldrb	r3, [r3, #0]
  400734:	71fb      	strb	r3, [r7, #7]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  400736:	4b05      	ldr	r3, [pc, #20]	; (40074c <udi_cdc_data_disable+0x30>)
  400738:	2200      	movs	r2, #0
  40073a:	701a      	strb	r2, [r3, #0]
}
  40073c:	370c      	adds	r7, #12
  40073e:	46bd      	mov	sp, r7
  400740:	f85d 7b04 	ldr.w	r7, [sp], #4
  400744:	4770      	bx	lr
  400746:	bf00      	nop
  400748:	20000c7d 	.word	0x20000c7d
  40074c:	20000c7e 	.word	0x20000c7e

00400750 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
  400750:	b580      	push	{r7, lr}
  400752:	b082      	sub	sp, #8
  400754:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
  400756:	4b2b      	ldr	r3, [pc, #172]	; (400804 <udi_cdc_comm_setup+0xb4>)
  400758:	4798      	blx	r3
  40075a:	4603      	mov	r3, r0
  40075c:	71fb      	strb	r3, [r7, #7]

	if (Udd_setup_is_in()) {
  40075e:	4b2a      	ldr	r3, [pc, #168]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400760:	781b      	ldrb	r3, [r3, #0]
  400762:	b2db      	uxtb	r3, r3
  400764:	b25b      	sxtb	r3, r3
  400766:	2b00      	cmp	r3, #0
  400768:	da1c      	bge.n	4007a4 <udi_cdc_comm_setup+0x54>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  40076a:	4b27      	ldr	r3, [pc, #156]	; (400808 <udi_cdc_comm_setup+0xb8>)
  40076c:	781b      	ldrb	r3, [r3, #0]
  40076e:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400772:	2b20      	cmp	r3, #32
  400774:	d116      	bne.n	4007a4 <udi_cdc_comm_setup+0x54>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  400776:	4b24      	ldr	r3, [pc, #144]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400778:	785b      	ldrb	r3, [r3, #1]
  40077a:	2b21      	cmp	r3, #33	; 0x21
  40077c:	d112      	bne.n	4007a4 <udi_cdc_comm_setup+0x54>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  40077e:	4b22      	ldr	r3, [pc, #136]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400780:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  400782:	2b07      	cmp	r3, #7
  400784:	d001      	beq.n	40078a <udi_cdc_comm_setup+0x3a>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  400786:	2300      	movs	r3, #0
  400788:	e038      	b.n	4007fc <udi_cdc_comm_setup+0xac>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
  40078a:	79fa      	ldrb	r2, [r7, #7]
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
  40078c:	4613      	mov	r3, r2
  40078e:	00db      	lsls	r3, r3, #3
  400790:	1a9b      	subs	r3, r3, r2
  400792:	4a1e      	ldr	r2, [pc, #120]	; (40080c <udi_cdc_comm_setup+0xbc>)
  400794:	441a      	add	r2, r3
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  400796:	4b1c      	ldr	r3, [pc, #112]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400798:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  40079a:	4b1b      	ldr	r3, [pc, #108]	; (400808 <udi_cdc_comm_setup+0xb8>)
  40079c:	2207      	movs	r2, #7
  40079e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4007a0:	2301      	movs	r3, #1
  4007a2:	e02b      	b.n	4007fc <udi_cdc_comm_setup+0xac>
			}
		}
	}
	if (Udd_setup_is_out()) {
  4007a4:	4b18      	ldr	r3, [pc, #96]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007a6:	781b      	ldrb	r3, [r3, #0]
  4007a8:	b2db      	uxtb	r3, r3
  4007aa:	b25b      	sxtb	r3, r3
  4007ac:	2b00      	cmp	r3, #0
  4007ae:	db24      	blt.n	4007fa <udi_cdc_comm_setup+0xaa>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4007b0:	4b15      	ldr	r3, [pc, #84]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007b2:	781b      	ldrb	r3, [r3, #0]
  4007b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4007b8:	2b20      	cmp	r3, #32
  4007ba:	d11e      	bne.n	4007fa <udi_cdc_comm_setup+0xaa>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  4007bc:	4b12      	ldr	r3, [pc, #72]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007be:	785b      	ldrb	r3, [r3, #1]
  4007c0:	2b20      	cmp	r3, #32
  4007c2:	d002      	beq.n	4007ca <udi_cdc_comm_setup+0x7a>
  4007c4:	2b22      	cmp	r3, #34	; 0x22
  4007c6:	d016      	beq.n	4007f6 <udi_cdc_comm_setup+0xa6>
  4007c8:	e017      	b.n	4007fa <udi_cdc_comm_setup+0xaa>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  4007ca:	4b0f      	ldr	r3, [pc, #60]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007cc:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  4007ce:	2b07      	cmp	r3, #7
  4007d0:	d001      	beq.n	4007d6 <udi_cdc_comm_setup+0x86>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4007d2:	2300      	movs	r3, #0
  4007d4:	e012      	b.n	4007fc <udi_cdc_comm_setup+0xac>
				udd_g_ctrlreq.callback =
  4007d6:	4b0c      	ldr	r3, [pc, #48]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007d8:	4a0d      	ldr	r2, [pc, #52]	; (400810 <udi_cdc_comm_setup+0xc0>)
  4007da:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
  4007dc:	79fa      	ldrb	r2, [r7, #7]
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
  4007de:	4613      	mov	r3, r2
  4007e0:	00db      	lsls	r3, r3, #3
  4007e2:	1a9b      	subs	r3, r3, r2
  4007e4:	4a09      	ldr	r2, [pc, #36]	; (40080c <udi_cdc_comm_setup+0xbc>)
  4007e6:	441a      	add	r2, r3
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  4007e8:	4b07      	ldr	r3, [pc, #28]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007ea:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  4007ec:	4b06      	ldr	r3, [pc, #24]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007ee:	2207      	movs	r2, #7
  4007f0:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4007f2:	2301      	movs	r3, #1
  4007f4:	e002      	b.n	4007fc <udi_cdc_comm_setup+0xac>
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
  4007f6:	2301      	movs	r3, #1
  4007f8:	e000      	b.n	4007fc <udi_cdc_comm_setup+0xac>
			}
		}
	}
	return false;  // request Not supported
  4007fa:	2300      	movs	r3, #0
}
  4007fc:	4618      	mov	r0, r3
  4007fe:	3708      	adds	r7, #8
  400800:	46bd      	mov	sp, r7
  400802:	bd80      	pop	{r7, pc}
  400804:	0040084d 	.word	0x0040084d
  400808:	20008954 	.word	0x20008954
  40080c:	20000c64 	.word	0x20000c64
  400810:	0040087d 	.word	0x0040087d

00400814 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
  400814:	b480      	push	{r7}
  400816:	af00      	add	r7, sp, #0
	return false;  // request Not supported
  400818:	2300      	movs	r3, #0
}
  40081a:	4618      	mov	r0, r3
  40081c:	46bd      	mov	sp, r7
  40081e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400822:	4770      	bx	lr

00400824 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
  400824:	b480      	push	{r7}
  400826:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
  400828:	2300      	movs	r3, #0
}
  40082a:	4618      	mov	r0, r3
  40082c:	46bd      	mov	sp, r7
  40082e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400832:	4770      	bx	lr

00400834 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
  400834:	b580      	push	{r7, lr}
  400836:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  400838:	4b02      	ldr	r3, [pc, #8]	; (400844 <udi_cdc_data_sof_notify+0x10>)
  40083a:	781b      	ldrb	r3, [r3, #0]
  40083c:	4618      	mov	r0, r3
  40083e:	4b02      	ldr	r3, [pc, #8]	; (400848 <udi_cdc_data_sof_notify+0x14>)
  400840:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
  400842:	bd80      	pop	{r7, pc}
  400844:	20000da4 	.word	0x20000da4
  400848:	00400aa9 	.word	0x00400aa9

0040084c <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
  40084c:	b480      	push	{r7}
  40084e:	b083      	sub	sp, #12
  400850:	af00      	add	r7, sp, #0
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
  400852:	4b09      	ldr	r3, [pc, #36]	; (400878 <udi_cdc_setup_to_port+0x2c>)
  400854:	889b      	ldrh	r3, [r3, #4]
  400856:	b2db      	uxtb	r3, r3
  400858:	2b00      	cmp	r3, #0
  40085a:	d102      	bne.n	400862 <udi_cdc_setup_to_port+0x16>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
  40085c:	2300      	movs	r3, #0
  40085e:	71fb      	strb	r3, [r7, #7]
  400860:	e002      	b.n	400868 <udi_cdc_setup_to_port+0x1c>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
  400862:	2300      	movs	r3, #0
  400864:	71fb      	strb	r3, [r7, #7]
		break;
  400866:	bf00      	nop
	}
	return port;
  400868:	79fb      	ldrb	r3, [r7, #7]
}
  40086a:	4618      	mov	r0, r3
  40086c:	370c      	adds	r7, #12
  40086e:	46bd      	mov	sp, r7
  400870:	f85d 7b04 	ldr.w	r7, [sp], #4
  400874:	4770      	bx	lr
  400876:	bf00      	nop
  400878:	20008954 	.word	0x20008954

0040087c <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
  40087c:	b580      	push	{r7, lr}
  40087e:	b082      	sub	sp, #8
  400880:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
  400882:	4b03      	ldr	r3, [pc, #12]	; (400890 <udi_cdc_line_coding_received+0x14>)
  400884:	4798      	blx	r3
  400886:	4603      	mov	r3, r0
  400888:	71fb      	strb	r3, [r7, #7]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
  40088a:	3708      	adds	r7, #8
  40088c:	46bd      	mov	sp, r7
  40088e:	bd80      	pop	{r7, pc}
  400890:	0040084d 	.word	0x0040084d

00400894 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  400894:	b590      	push	{r4, r7, lr}
  400896:	b089      	sub	sp, #36	; 0x24
  400898:	af02      	add	r7, sp, #8
  40089a:	4603      	mov	r3, r0
  40089c:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  40089e:	2300      	movs	r3, #0
  4008a0:	75bb      	strb	r3, [r7, #22]
#endif

	flags = cpu_irq_save();
  4008a2:	4b2c      	ldr	r3, [pc, #176]	; (400954 <udi_cdc_rx_start+0xc0>)
  4008a4:	4798      	blx	r3
  4008a6:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  4008a8:	7dbb      	ldrb	r3, [r7, #22]
  4008aa:	4a2b      	ldr	r2, [pc, #172]	; (400958 <udi_cdc_rx_start+0xc4>)
  4008ac:	5cd3      	ldrb	r3, [r2, r3]
  4008ae:	73fb      	strb	r3, [r7, #15]
	if (udi_cdc_rx_trans_ongoing[port] ||
  4008b0:	7dbb      	ldrb	r3, [r7, #22]
  4008b2:	4a2a      	ldr	r2, [pc, #168]	; (40095c <udi_cdc_rx_start+0xc8>)
  4008b4:	5cd3      	ldrb	r3, [r2, r3]
  4008b6:	b2db      	uxtb	r3, r3
  4008b8:	2b00      	cmp	r3, #0
  4008ba:	d10d      	bne.n	4008d8 <udi_cdc_rx_start+0x44>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  4008bc:	7dba      	ldrb	r2, [r7, #22]
  4008be:	4b28      	ldr	r3, [pc, #160]	; (400960 <udi_cdc_rx_start+0xcc>)
  4008c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  4008c4:	b29a      	uxth	r2, r3
  4008c6:	7db8      	ldrb	r0, [r7, #22]
  4008c8:	7bf9      	ldrb	r1, [r7, #15]
  4008ca:	4b26      	ldr	r3, [pc, #152]	; (400964 <udi_cdc_rx_start+0xd0>)
  4008cc:	0040      	lsls	r0, r0, #1
  4008ce:	4401      	add	r1, r0
  4008d0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  4008d4:	429a      	cmp	r2, r3
  4008d6:	d204      	bcs.n	4008e2 <udi_cdc_rx_start+0x4e>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
  4008d8:	6938      	ldr	r0, [r7, #16]
  4008da:	4b23      	ldr	r3, [pc, #140]	; (400968 <udi_cdc_rx_start+0xd4>)
  4008dc:	4798      	blx	r3
		return false;
  4008de:	2300      	movs	r3, #0
  4008e0:	e033      	b.n	40094a <udi_cdc_rx_start+0xb6>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  4008e2:	7dba      	ldrb	r2, [r7, #22]
  4008e4:	4b1e      	ldr	r3, [pc, #120]	; (400960 <udi_cdc_rx_start+0xcc>)
  4008e6:	2100      	movs	r1, #0
  4008e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4008ec:	7dbb      	ldrb	r3, [r7, #22]
  4008ee:	7bfa      	ldrb	r2, [r7, #15]
  4008f0:	2a00      	cmp	r2, #0
  4008f2:	bf14      	ite	ne
  4008f4:	2200      	movne	r2, #0
  4008f6:	2201      	moveq	r2, #1
  4008f8:	b2d2      	uxtb	r2, r2
  4008fa:	4611      	mov	r1, r2
  4008fc:	4a16      	ldr	r2, [pc, #88]	; (400958 <udi_cdc_rx_start+0xc4>)
  4008fe:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  400900:	7dbb      	ldrb	r3, [r7, #22]
  400902:	4a16      	ldr	r2, [pc, #88]	; (40095c <udi_cdc_rx_start+0xc8>)
  400904:	2101      	movs	r1, #1
  400906:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  400908:	6938      	ldr	r0, [r7, #16]
  40090a:	4b17      	ldr	r3, [pc, #92]	; (400968 <udi_cdc_rx_start+0xd4>)
  40090c:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
  40090e:	7dbb      	ldrb	r3, [r7, #22]
  400910:	4618      	mov	r0, r3
  400912:	4b16      	ldr	r3, [pc, #88]	; (40096c <udi_cdc_rx_start+0xd8>)
  400914:	4798      	blx	r3
		UDI_CDC_RX_NOTIFY(port);
	}
	// Send the buffer with enable of short packet
	switch (port) {
  400916:	7dbb      	ldrb	r3, [r7, #22]
  400918:	2b00      	cmp	r3, #0
  40091a:	d102      	bne.n	400922 <udi_cdc_rx_start+0x8e>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
  40091c:	2302      	movs	r3, #2
  40091e:	75fb      	strb	r3, [r7, #23]
  400920:	e002      	b.n	400928 <udi_cdc_rx_start+0x94>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
  400922:	2302      	movs	r3, #2
  400924:	75fb      	strb	r3, [r7, #23]
		break;
  400926:	bf00      	nop
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
  400928:	7dba      	ldrb	r2, [r7, #22]
  40092a:	7bfb      	ldrb	r3, [r7, #15]
  40092c:	0052      	lsls	r2, r2, #1
  40092e:	4413      	add	r3, r2
  400930:	019a      	lsls	r2, r3, #6
  400932:	4b0f      	ldr	r3, [pc, #60]	; (400970 <udi_cdc_rx_start+0xdc>)
  400934:	4413      	add	r3, r2
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  400936:	7dfa      	ldrb	r2, [r7, #23]
  400938:	490e      	ldr	r1, [pc, #56]	; (400974 <udi_cdc_rx_start+0xe0>)
  40093a:	9100      	str	r1, [sp, #0]
  40093c:	4610      	mov	r0, r2
  40093e:	2101      	movs	r1, #1
  400940:	461a      	mov	r2, r3
  400942:	2340      	movs	r3, #64	; 0x40
  400944:	4c0c      	ldr	r4, [pc, #48]	; (400978 <udi_cdc_rx_start+0xe4>)
  400946:	47a0      	blx	r4
  400948:	4603      	mov	r3, r0
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  40094a:	4618      	mov	r0, r3
  40094c:	371c      	adds	r7, #28
  40094e:	46bd      	mov	sp, r7
  400950:	bd90      	pop	{r4, r7, pc}
  400952:	bf00      	nop
  400954:	0040046d 	.word	0x0040046d
  400958:	20000d04 	.word	0x20000d04
  40095c:	20000d0c 	.word	0x20000d0c
  400960:	20000d08 	.word	0x20000d08
  400964:	20000d00 	.word	0x20000d00
  400968:	004004c5 	.word	0x004004c5
  40096c:	00400cd1 	.word	0x00400cd1
  400970:	20000c80 	.word	0x20000c80
  400974:	0040097d 	.word	0x0040097d
  400978:	00402789 	.word	0x00402789

0040097c <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  40097c:	b590      	push	{r4, r7, lr}
  40097e:	b087      	sub	sp, #28
  400980:	af02      	add	r7, sp, #8
  400982:	6039      	str	r1, [r7, #0]
  400984:	4613      	mov	r3, r2
  400986:	4602      	mov	r2, r0
  400988:	71fa      	strb	r2, [r7, #7]
  40098a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
  40098c:	79bb      	ldrb	r3, [r7, #6]
  40098e:	2b02      	cmp	r3, #2
  400990:	d102      	bne.n	400998 <udi_cdc_data_received+0x1c>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
  400992:	2300      	movs	r3, #0
  400994:	73fb      	strb	r3, [r7, #15]
  400996:	e002      	b.n	40099e <udi_cdc_data_received+0x22>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
  400998:	2300      	movs	r3, #0
  40099a:	73fb      	strb	r3, [r7, #15]
		break;
  40099c:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
  40099e:	79fb      	ldrb	r3, [r7, #7]
  4009a0:	2b00      	cmp	r3, #0
  4009a2:	d000      	beq.n	4009a6 <udi_cdc_data_received+0x2a>
		// Abort reception
		return;
  4009a4:	e02e      	b.n	400a04 <udi_cdc_data_received+0x88>
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  4009a6:	7bfb      	ldrb	r3, [r7, #15]
  4009a8:	4a18      	ldr	r2, [pc, #96]	; (400a0c <udi_cdc_data_received+0x90>)
  4009aa:	5cd3      	ldrb	r3, [r2, r3]
  4009ac:	b2db      	uxtb	r3, r3
  4009ae:	2b00      	cmp	r3, #0
  4009b0:	bf14      	ite	ne
  4009b2:	2300      	movne	r3, #0
  4009b4:	2301      	moveq	r3, #1
  4009b6:	b2db      	uxtb	r3, r3
  4009b8:	73bb      	strb	r3, [r7, #14]
	if (!n) {
  4009ba:	683b      	ldr	r3, [r7, #0]
  4009bc:	2b00      	cmp	r3, #0
  4009be:	d110      	bne.n	4009e2 <udi_cdc_data_received+0x66>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
  4009c0:	7bfa      	ldrb	r2, [r7, #15]
  4009c2:	7bbb      	ldrb	r3, [r7, #14]
  4009c4:	0052      	lsls	r2, r2, #1
  4009c6:	4413      	add	r3, r2
  4009c8:	019a      	lsls	r2, r3, #6
  4009ca:	4b11      	ldr	r3, [pc, #68]	; (400a10 <udi_cdc_data_received+0x94>)
  4009cc:	4413      	add	r3, r2
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
  4009ce:	79ba      	ldrb	r2, [r7, #6]
  4009d0:	4910      	ldr	r1, [pc, #64]	; (400a14 <udi_cdc_data_received+0x98>)
  4009d2:	9100      	str	r1, [sp, #0]
  4009d4:	4610      	mov	r0, r2
  4009d6:	2101      	movs	r1, #1
  4009d8:	461a      	mov	r2, r3
  4009da:	2340      	movs	r3, #64	; 0x40
  4009dc:	4c0e      	ldr	r4, [pc, #56]	; (400a18 <udi_cdc_data_received+0x9c>)
  4009de:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  4009e0:	e010      	b.n	400a04 <udi_cdc_data_received+0x88>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4009e2:	7bf8      	ldrb	r0, [r7, #15]
  4009e4:	7bba      	ldrb	r2, [r7, #14]
  4009e6:	683b      	ldr	r3, [r7, #0]
  4009e8:	b299      	uxth	r1, r3
  4009ea:	4b0c      	ldr	r3, [pc, #48]	; (400a1c <udi_cdc_data_received+0xa0>)
  4009ec:	0040      	lsls	r0, r0, #1
  4009ee:	4402      	add	r2, r0
  4009f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4009f4:	7bfb      	ldrb	r3, [r7, #15]
  4009f6:	4a0a      	ldr	r2, [pc, #40]	; (400a20 <udi_cdc_data_received+0xa4>)
  4009f8:	2100      	movs	r1, #0
  4009fa:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
  4009fc:	7bfb      	ldrb	r3, [r7, #15]
  4009fe:	4618      	mov	r0, r3
  400a00:	4b08      	ldr	r3, [pc, #32]	; (400a24 <udi_cdc_data_received+0xa8>)
  400a02:	4798      	blx	r3
}
  400a04:	3714      	adds	r7, #20
  400a06:	46bd      	mov	sp, r7
  400a08:	bd90      	pop	{r4, r7, pc}
  400a0a:	bf00      	nop
  400a0c:	20000d04 	.word	0x20000d04
  400a10:	20000c80 	.word	0x20000c80
  400a14:	0040097d 	.word	0x0040097d
  400a18:	00402789 	.word	0x00402789
  400a1c:	20000d00 	.word	0x20000d00
  400a20:	20000d0c 	.word	0x20000d0c
  400a24:	00400895 	.word	0x00400895

00400a28 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  400a28:	b580      	push	{r7, lr}
  400a2a:	b084      	sub	sp, #16
  400a2c:	af00      	add	r7, sp, #0
  400a2e:	6039      	str	r1, [r7, #0]
  400a30:	4613      	mov	r3, r2
  400a32:	4602      	mov	r2, r0
  400a34:	71fa      	strb	r2, [r7, #7]
  400a36:	71bb      	strb	r3, [r7, #6]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
  400a38:	79bb      	ldrb	r3, [r7, #6]
  400a3a:	2b81      	cmp	r3, #129	; 0x81
  400a3c:	d102      	bne.n	400a44 <udi_cdc_data_sent+0x1c>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
  400a3e:	2300      	movs	r3, #0
  400a40:	73fb      	strb	r3, [r7, #15]
  400a42:	e002      	b.n	400a4a <udi_cdc_data_sent+0x22>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
  400a44:	2300      	movs	r3, #0
  400a46:	73fb      	strb	r3, [r7, #15]
		break;
  400a48:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400a4a:	79fb      	ldrb	r3, [r7, #7]
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	d000      	beq.n	400a52 <udi_cdc_data_sent+0x2a>
		// Abort transfer
		return;
  400a50:	e01c      	b.n	400a8c <udi_cdc_data_sent+0x64>
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400a52:	7bf9      	ldrb	r1, [r7, #15]
  400a54:	7bfb      	ldrb	r3, [r7, #15]
  400a56:	4a0f      	ldr	r2, [pc, #60]	; (400a94 <udi_cdc_data_sent+0x6c>)
  400a58:	5cd3      	ldrb	r3, [r2, r3]
  400a5a:	b2db      	uxtb	r3, r3
  400a5c:	2b00      	cmp	r3, #0
  400a5e:	bf14      	ite	ne
  400a60:	2300      	movne	r3, #0
  400a62:	2301      	moveq	r3, #1
  400a64:	b2db      	uxtb	r3, r3
  400a66:	461a      	mov	r2, r3
  400a68:	4b0b      	ldr	r3, [pc, #44]	; (400a98 <udi_cdc_data_sent+0x70>)
  400a6a:	0049      	lsls	r1, r1, #1
  400a6c:	440a      	add	r2, r1
  400a6e:	2100      	movs	r1, #0
  400a70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400a74:	7bfb      	ldrb	r3, [r7, #15]
  400a76:	4a09      	ldr	r2, [pc, #36]	; (400a9c <udi_cdc_data_sent+0x74>)
  400a78:	2100      	movs	r1, #0
  400a7a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
  400a7c:	7bfb      	ldrb	r3, [r7, #15]
  400a7e:	4a08      	ldr	r2, [pc, #32]	; (400aa0 <udi_cdc_data_sent+0x78>)
  400a80:	2100      	movs	r1, #0
  400a82:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  400a84:	7bfb      	ldrb	r3, [r7, #15]
  400a86:	4618      	mov	r0, r3
  400a88:	4b06      	ldr	r3, [pc, #24]	; (400aa4 <udi_cdc_data_sent+0x7c>)
  400a8a:	4798      	blx	r3
}
  400a8c:	3710      	adds	r7, #16
  400a8e:	46bd      	mov	sp, r7
  400a90:	bd80      	pop	{r7, pc}
  400a92:	bf00      	nop
  400a94:	20000d94 	.word	0x20000d94
  400a98:	20000d90 	.word	0x20000d90
  400a9c:	20000da0 	.word	0x20000da0
  400aa0:	20000d9c 	.word	0x20000d9c
  400aa4:	00400aa9 	.word	0x00400aa9

00400aa8 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
  400aa8:	b590      	push	{r4, r7, lr}
  400aaa:	b089      	sub	sp, #36	; 0x24
  400aac:	af02      	add	r7, sp, #8
  400aae:	4603      	mov	r3, r0
  400ab0:	71fb      	strb	r3, [r7, #7]
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400ab2:	2300      	movs	r3, #0
  400ab4:	757b      	strb	r3, [r7, #21]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400ab6:	7d7b      	ldrb	r3, [r7, #21]
  400ab8:	4a5f      	ldr	r2, [pc, #380]	; (400c38 <udi_cdc_tx_send+0x190>)
  400aba:	5cd3      	ldrb	r3, [r2, r3]
  400abc:	b2db      	uxtb	r3, r3
  400abe:	2b00      	cmp	r3, #0
  400ac0:	d000      	beq.n	400ac4 <udi_cdc_tx_send+0x1c>
		return; // Already on going or wait next SOF to send next data
  400ac2:	e0b5      	b.n	400c30 <udi_cdc_tx_send+0x188>
	}
	if (udd_is_high_speed()) {
  400ac4:	4b5d      	ldr	r3, [pc, #372]	; (400c3c <udi_cdc_tx_send+0x194>)
  400ac6:	4798      	blx	r3
  400ac8:	4603      	mov	r3, r0
  400aca:	2b00      	cmp	r3, #0
  400acc:	d009      	beq.n	400ae2 <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400ace:	7d7a      	ldrb	r2, [r7, #21]
  400ad0:	4b5b      	ldr	r3, [pc, #364]	; (400c40 <udi_cdc_tx_send+0x198>)
  400ad2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
  400ad6:	4b5b      	ldr	r3, [pc, #364]	; (400c44 <udi_cdc_tx_send+0x19c>)
  400ad8:	4798      	blx	r3
  400ada:	4603      	mov	r3, r0
  400adc:	429c      	cmp	r4, r3
  400ade:	d10a      	bne.n	400af6 <udi_cdc_tx_send+0x4e>
			return; // Wait next SOF to send next data
  400ae0:	e0a6      	b.n	400c30 <udi_cdc_tx_send+0x188>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400ae2:	7d7a      	ldrb	r2, [r7, #21]
  400ae4:	4b56      	ldr	r3, [pc, #344]	; (400c40 <udi_cdc_tx_send+0x198>)
  400ae6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
  400aea:	4b57      	ldr	r3, [pc, #348]	; (400c48 <udi_cdc_tx_send+0x1a0>)
  400aec:	4798      	blx	r3
  400aee:	4603      	mov	r3, r0
  400af0:	429c      	cmp	r4, r3
  400af2:	d100      	bne.n	400af6 <udi_cdc_tx_send+0x4e>
			return; // Wait next SOF to send next data
  400af4:	e09c      	b.n	400c30 <udi_cdc_tx_send+0x188>
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
  400af6:	4b55      	ldr	r3, [pc, #340]	; (400c4c <udi_cdc_tx_send+0x1a4>)
  400af8:	4798      	blx	r3
  400afa:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400afc:	7d7b      	ldrb	r3, [r7, #21]
  400afe:	4a54      	ldr	r2, [pc, #336]	; (400c50 <udi_cdc_tx_send+0x1a8>)
  400b00:	5cd3      	ldrb	r3, [r2, r3]
  400b02:	75fb      	strb	r3, [r7, #23]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400b04:	7d79      	ldrb	r1, [r7, #21]
  400b06:	7dfa      	ldrb	r2, [r7, #23]
  400b08:	4b52      	ldr	r3, [pc, #328]	; (400c54 <udi_cdc_tx_send+0x1ac>)
  400b0a:	0049      	lsls	r1, r1, #1
  400b0c:	440a      	add	r2, r1
  400b0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400b12:	2b00      	cmp	r3, #0
  400b14:	d11f      	bne.n	400b56 <udi_cdc_tx_send+0xae>
		sof_zlp_counter++;
  400b16:	4b50      	ldr	r3, [pc, #320]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b18:	881b      	ldrh	r3, [r3, #0]
  400b1a:	3301      	adds	r3, #1
  400b1c:	b29a      	uxth	r2, r3
  400b1e:	4b4e      	ldr	r3, [pc, #312]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b20:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  400b22:	4b46      	ldr	r3, [pc, #280]	; (400c3c <udi_cdc_tx_send+0x194>)
  400b24:	4798      	blx	r3
  400b26:	4603      	mov	r3, r0
  400b28:	f083 0301 	eor.w	r3, r3, #1
  400b2c:	b2db      	uxtb	r3, r3
  400b2e:	2b00      	cmp	r3, #0
  400b30:	d003      	beq.n	400b3a <udi_cdc_tx_send+0x92>
  400b32:	4b49      	ldr	r3, [pc, #292]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b34:	881b      	ldrh	r3, [r3, #0]
  400b36:	2b63      	cmp	r3, #99	; 0x63
  400b38:	d909      	bls.n	400b4e <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  400b3a:	4b40      	ldr	r3, [pc, #256]	; (400c3c <udi_cdc_tx_send+0x194>)
  400b3c:	4798      	blx	r3
  400b3e:	4603      	mov	r3, r0
  400b40:	2b00      	cmp	r3, #0
  400b42:	d008      	beq.n	400b56 <udi_cdc_tx_send+0xae>
  400b44:	4b44      	ldr	r3, [pc, #272]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b46:	881b      	ldrh	r3, [r3, #0]
  400b48:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  400b4c:	d203      	bcs.n	400b56 <udi_cdc_tx_send+0xae>
			cpu_irq_restore(flags);
  400b4e:	6938      	ldr	r0, [r7, #16]
  400b50:	4b42      	ldr	r3, [pc, #264]	; (400c5c <udi_cdc_tx_send+0x1b4>)
  400b52:	4798      	blx	r3
			return;
  400b54:	e06c      	b.n	400c30 <udi_cdc_tx_send+0x188>
		}
	}
	sof_zlp_counter = 0;
  400b56:	4b40      	ldr	r3, [pc, #256]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b58:	2200      	movs	r2, #0
  400b5a:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400b5c:	7d7b      	ldrb	r3, [r7, #21]
  400b5e:	4a40      	ldr	r2, [pc, #256]	; (400c60 <udi_cdc_tx_send+0x1b8>)
  400b60:	5cd3      	ldrb	r3, [r2, r3]
  400b62:	b2db      	uxtb	r3, r3
  400b64:	f083 0301 	eor.w	r3, r3, #1
  400b68:	b2db      	uxtb	r3, r3
  400b6a:	2b00      	cmp	r3, #0
  400b6c:	d00a      	beq.n	400b84 <udi_cdc_tx_send+0xdc>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400b6e:	7d7b      	ldrb	r3, [r7, #21]
  400b70:	7dfa      	ldrb	r2, [r7, #23]
  400b72:	2a00      	cmp	r2, #0
  400b74:	bf14      	ite	ne
  400b76:	2200      	movne	r2, #0
  400b78:	2201      	moveq	r2, #1
  400b7a:	b2d2      	uxtb	r2, r2
  400b7c:	4611      	mov	r1, r2
  400b7e:	4a34      	ldr	r2, [pc, #208]	; (400c50 <udi_cdc_tx_send+0x1a8>)
  400b80:	54d1      	strb	r1, [r2, r3]
  400b82:	e006      	b.n	400b92 <udi_cdc_tx_send+0xea>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  400b84:	7dfb      	ldrb	r3, [r7, #23]
  400b86:	2b00      	cmp	r3, #0
  400b88:	bf14      	ite	ne
  400b8a:	2300      	movne	r3, #0
  400b8c:	2301      	moveq	r3, #1
  400b8e:	b2db      	uxtb	r3, r3
  400b90:	75fb      	strb	r3, [r7, #23]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  400b92:	7d7b      	ldrb	r3, [r7, #21]
  400b94:	4a28      	ldr	r2, [pc, #160]	; (400c38 <udi_cdc_tx_send+0x190>)
  400b96:	2101      	movs	r1, #1
  400b98:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  400b9a:	6938      	ldr	r0, [r7, #16]
  400b9c:	4b2f      	ldr	r3, [pc, #188]	; (400c5c <udi_cdc_tx_send+0x1b4>)
  400b9e:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  400ba0:	7d79      	ldrb	r1, [r7, #21]
  400ba2:	7dfa      	ldrb	r2, [r7, #23]
  400ba4:	4b2b      	ldr	r3, [pc, #172]	; (400c54 <udi_cdc_tx_send+0x1ac>)
  400ba6:	0049      	lsls	r1, r1, #1
  400ba8:	440a      	add	r2, r1
  400baa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400bae:	2b40      	cmp	r3, #64	; 0x40
  400bb0:	bf0c      	ite	eq
  400bb2:	2300      	moveq	r3, #0
  400bb4:	2301      	movne	r3, #1
  400bb6:	73fb      	strb	r3, [r7, #15]
	if (b_short_packet) {
  400bb8:	7bfb      	ldrb	r3, [r7, #15]
  400bba:	2b00      	cmp	r3, #0
  400bbc:	d016      	beq.n	400bec <udi_cdc_tx_send+0x144>
		if (udd_is_high_speed()) {
  400bbe:	4b1f      	ldr	r3, [pc, #124]	; (400c3c <udi_cdc_tx_send+0x194>)
  400bc0:	4798      	blx	r3
  400bc2:	4603      	mov	r3, r0
  400bc4:	2b00      	cmp	r3, #0
  400bc6:	d008      	beq.n	400bda <udi_cdc_tx_send+0x132>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  400bc8:	7d7c      	ldrb	r4, [r7, #21]
  400bca:	4b1e      	ldr	r3, [pc, #120]	; (400c44 <udi_cdc_tx_send+0x19c>)
  400bcc:	4798      	blx	r3
  400bce:	4603      	mov	r3, r0
  400bd0:	461a      	mov	r2, r3
  400bd2:	4b1b      	ldr	r3, [pc, #108]	; (400c40 <udi_cdc_tx_send+0x198>)
  400bd4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  400bd8:	e00d      	b.n	400bf6 <udi_cdc_tx_send+0x14e>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400bda:	7d7c      	ldrb	r4, [r7, #21]
  400bdc:	4b1a      	ldr	r3, [pc, #104]	; (400c48 <udi_cdc_tx_send+0x1a0>)
  400bde:	4798      	blx	r3
  400be0:	4603      	mov	r3, r0
  400be2:	461a      	mov	r2, r3
  400be4:	4b16      	ldr	r3, [pc, #88]	; (400c40 <udi_cdc_tx_send+0x198>)
  400be6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  400bea:	e004      	b.n	400bf6 <udi_cdc_tx_send+0x14e>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400bec:	7d7a      	ldrb	r2, [r7, #21]
  400bee:	4b14      	ldr	r3, [pc, #80]	; (400c40 <udi_cdc_tx_send+0x198>)
  400bf0:	2100      	movs	r1, #0
  400bf2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	}

	// Send the buffer with enable of short packet
	switch (port) {
  400bf6:	7d7b      	ldrb	r3, [r7, #21]
  400bf8:	2b00      	cmp	r3, #0
  400bfa:	d102      	bne.n	400c02 <udi_cdc_tx_send+0x15a>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
  400bfc:	2381      	movs	r3, #129	; 0x81
  400bfe:	75bb      	strb	r3, [r7, #22]
  400c00:	e002      	b.n	400c08 <udi_cdc_tx_send+0x160>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
  400c02:	2381      	movs	r3, #129	; 0x81
  400c04:	75bb      	strb	r3, [r7, #22]
		break;
  400c06:	bf00      	nop
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
  400c08:	7d7a      	ldrb	r2, [r7, #21]
  400c0a:	7dfb      	ldrb	r3, [r7, #23]
  400c0c:	0052      	lsls	r2, r2, #1
  400c0e:	4413      	add	r3, r2
  400c10:	019a      	lsls	r2, r3, #6
  400c12:	4b14      	ldr	r3, [pc, #80]	; (400c64 <udi_cdc_tx_send+0x1bc>)
  400c14:	441a      	add	r2, r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400c16:	7d78      	ldrb	r0, [r7, #21]
  400c18:	7df9      	ldrb	r1, [r7, #23]
  400c1a:	4b0e      	ldr	r3, [pc, #56]	; (400c54 <udi_cdc_tx_send+0x1ac>)
  400c1c:	0040      	lsls	r0, r0, #1
  400c1e:	4401      	add	r1, r0
  400c20:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  400c24:	7db8      	ldrb	r0, [r7, #22]
  400c26:	7bf9      	ldrb	r1, [r7, #15]
  400c28:	4c0f      	ldr	r4, [pc, #60]	; (400c68 <udi_cdc_tx_send+0x1c0>)
  400c2a:	9400      	str	r4, [sp, #0]
  400c2c:	4c0f      	ldr	r4, [pc, #60]	; (400c6c <udi_cdc_tx_send+0x1c4>)
  400c2e:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  400c30:	371c      	adds	r7, #28
  400c32:	46bd      	mov	sp, r7
  400c34:	bd90      	pop	{r4, r7, pc}
  400c36:	bf00      	nop
  400c38:	20000d9c 	.word	0x20000d9c
  400c3c:	00402245 	.word	0x00402245
  400c40:	20000d98 	.word	0x20000d98
  400c44:	00402309 	.word	0x00402309
  400c48:	004022e9 	.word	0x004022e9
  400c4c:	0040046d 	.word	0x0040046d
  400c50:	20000d94 	.word	0x20000d94
  400c54:	20000d90 	.word	0x20000d90
  400c58:	20000da6 	.word	0x20000da6
  400c5c:	004004c5 	.word	0x004004c5
  400c60:	20000da0 	.word	0x20000da0
  400c64:	20000d10 	.word	0x20000d10
  400c68:	00400a29 	.word	0x00400a29
  400c6c:	00402789 	.word	0x00402789

00400c70 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  400c70:	b580      	push	{r7, lr}
  400c72:	b086      	sub	sp, #24
  400c74:	af00      	add	r7, sp, #0
  400c76:	4603      	mov	r3, r0
  400c78:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400c7a:	2300      	movs	r3, #0
  400c7c:	75fb      	strb	r3, [r7, #23]
#endif
	flags = cpu_irq_save();
  400c7e:	4b0f      	ldr	r3, [pc, #60]	; (400cbc <udi_cdc_multi_get_nb_received_data+0x4c>)
  400c80:	4798      	blx	r3
  400c82:	6138      	str	r0, [r7, #16]
	pos = udi_cdc_rx_pos[port];
  400c84:	7dfa      	ldrb	r2, [r7, #23]
  400c86:	4b0e      	ldr	r3, [pc, #56]	; (400cc0 <udi_cdc_multi_get_nb_received_data+0x50>)
  400c88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400c8c:	81fb      	strh	r3, [r7, #14]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400c8e:	7df9      	ldrb	r1, [r7, #23]
  400c90:	7dfb      	ldrb	r3, [r7, #23]
  400c92:	4a0c      	ldr	r2, [pc, #48]	; (400cc4 <udi_cdc_multi_get_nb_received_data+0x54>)
  400c94:	5cd3      	ldrb	r3, [r2, r3]
  400c96:	b2db      	uxtb	r3, r3
  400c98:	461a      	mov	r2, r3
  400c9a:	4b0b      	ldr	r3, [pc, #44]	; (400cc8 <udi_cdc_multi_get_nb_received_data+0x58>)
  400c9c:	0049      	lsls	r1, r1, #1
  400c9e:	440a      	add	r2, r1
  400ca0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400ca4:	461a      	mov	r2, r3
  400ca6:	89fb      	ldrh	r3, [r7, #14]
  400ca8:	1ad3      	subs	r3, r2, r3
  400caa:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
  400cac:	6938      	ldr	r0, [r7, #16]
  400cae:	4b07      	ldr	r3, [pc, #28]	; (400ccc <udi_cdc_multi_get_nb_received_data+0x5c>)
  400cb0:	4798      	blx	r3
	return nb_received;
  400cb2:	68bb      	ldr	r3, [r7, #8]
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	3718      	adds	r7, #24
  400cb8:	46bd      	mov	sp, r7
  400cba:	bd80      	pop	{r7, pc}
  400cbc:	0040046d 	.word	0x0040046d
  400cc0:	20000d08 	.word	0x20000d08
  400cc4:	20000d04 	.word	0x20000d04
  400cc8:	20000d00 	.word	0x20000d00
  400ccc:	004004c5 	.word	0x004004c5

00400cd0 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400cd0:	b580      	push	{r7, lr}
  400cd2:	b082      	sub	sp, #8
  400cd4:	af00      	add	r7, sp, #0
  400cd6:	4603      	mov	r3, r0
  400cd8:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400cda:	79fb      	ldrb	r3, [r7, #7]
  400cdc:	4618      	mov	r0, r3
  400cde:	4b06      	ldr	r3, [pc, #24]	; (400cf8 <udi_cdc_multi_is_rx_ready+0x28>)
  400ce0:	4798      	blx	r3
  400ce2:	4603      	mov	r3, r0
  400ce4:	2b00      	cmp	r3, #0
  400ce6:	bf0c      	ite	eq
  400ce8:	2300      	moveq	r3, #0
  400cea:	2301      	movne	r3, #1
  400cec:	b2db      	uxtb	r3, r3
}
  400cee:	4618      	mov	r0, r3
  400cf0:	3708      	adds	r7, #8
  400cf2:	46bd      	mov	sp, r7
  400cf4:	bd80      	pop	{r7, pc}
  400cf6:	bf00      	nop
  400cf8:	00400c71 	.word	0x00400c71

00400cfc <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
  400cfc:	b580      	push	{r7, lr}
  400cfe:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_rx_ready(0);
  400d00:	2000      	movs	r0, #0
  400d02:	4b02      	ldr	r3, [pc, #8]	; (400d0c <udi_cdc_is_rx_ready+0x10>)
  400d04:	4798      	blx	r3
  400d06:	4603      	mov	r3, r0
}
  400d08:	4618      	mov	r0, r3
  400d0a:	bd80      	pop	{r7, pc}
  400d0c:	00400cd1 	.word	0x00400cd1

00400d10 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
  400d10:	b580      	push	{r7, lr}
  400d12:	b086      	sub	sp, #24
  400d14:	af00      	add	r7, sp, #0
  400d16:	4603      	mov	r3, r0
  400d18:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	int rx_data = 0;
  400d1a:	2300      	movs	r3, #0
  400d1c:	617b      	str	r3, [r7, #20]
	bool b_databit_9;
	uint16_t pos;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400d1e:	2300      	movs	r3, #0
  400d20:	74bb      	strb	r3, [r7, #18]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400d22:	7cba      	ldrb	r2, [r7, #18]
  400d24:	492a      	ldr	r1, [pc, #168]	; (400dd0 <udi_cdc_multi_getc+0xc0>)
  400d26:	4613      	mov	r3, r2
  400d28:	00db      	lsls	r3, r3, #3
  400d2a:	1a9b      	subs	r3, r3, r2
  400d2c:	440b      	add	r3, r1
  400d2e:	799b      	ldrb	r3, [r3, #6]
  400d30:	2b09      	cmp	r3, #9
  400d32:	bf14      	ite	ne
  400d34:	2300      	movne	r3, #0
  400d36:	2301      	moveq	r3, #1
  400d38:	74fb      	strb	r3, [r7, #19]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
  400d3a:	4b26      	ldr	r3, [pc, #152]	; (400dd4 <udi_cdc_multi_getc+0xc4>)
  400d3c:	4798      	blx	r3
  400d3e:	60f8      	str	r0, [r7, #12]
	pos = udi_cdc_rx_pos[port];
  400d40:	7cba      	ldrb	r2, [r7, #18]
  400d42:	4b25      	ldr	r3, [pc, #148]	; (400dd8 <udi_cdc_multi_getc+0xc8>)
  400d44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400d48:	817b      	strh	r3, [r7, #10]
	buf_sel = udi_cdc_rx_buf_sel[port];
  400d4a:	7cbb      	ldrb	r3, [r7, #18]
  400d4c:	4a23      	ldr	r2, [pc, #140]	; (400ddc <udi_cdc_multi_getc+0xcc>)
  400d4e:	5cd3      	ldrb	r3, [r2, r3]
  400d50:	727b      	strb	r3, [r7, #9]
	cpu_irq_restore(flags);
  400d52:	68f8      	ldr	r0, [r7, #12]
  400d54:	4b22      	ldr	r3, [pc, #136]	; (400de0 <udi_cdc_multi_getc+0xd0>)
  400d56:	4798      	blx	r3
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
  400d58:	bf00      	nop
  400d5a:	7cb9      	ldrb	r1, [r7, #18]
  400d5c:	7a7a      	ldrb	r2, [r7, #9]
  400d5e:	4b21      	ldr	r3, [pc, #132]	; (400de4 <udi_cdc_multi_getc+0xd4>)
  400d60:	0049      	lsls	r1, r1, #1
  400d62:	440a      	add	r2, r1
  400d64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400d68:	897a      	ldrh	r2, [r7, #10]
  400d6a:	429a      	cmp	r2, r3
  400d6c:	d30a      	bcc.n	400d84 <udi_cdc_multi_getc+0x74>
		if (!udi_cdc_data_running) {
  400d6e:	4b1e      	ldr	r3, [pc, #120]	; (400de8 <udi_cdc_multi_getc+0xd8>)
  400d70:	781b      	ldrb	r3, [r3, #0]
  400d72:	b2db      	uxtb	r3, r3
  400d74:	f083 0301 	eor.w	r3, r3, #1
  400d78:	b2db      	uxtb	r3, r3
  400d7a:	2b00      	cmp	r3, #0
  400d7c:	d001      	beq.n	400d82 <udi_cdc_multi_getc+0x72>
			return 0;
  400d7e:	2300      	movs	r3, #0
  400d80:	e022      	b.n	400dc8 <udi_cdc_multi_getc+0xb8>
		}
		goto udi_cdc_getc_process_one_byte;
  400d82:	e7da      	b.n	400d3a <udi_cdc_multi_getc+0x2a>
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400d84:	7cb8      	ldrb	r0, [r7, #18]
  400d86:	7a79      	ldrb	r1, [r7, #9]
  400d88:	897b      	ldrh	r3, [r7, #10]
  400d8a:	4a18      	ldr	r2, [pc, #96]	; (400dec <udi_cdc_multi_getc+0xdc>)
  400d8c:	0040      	lsls	r0, r0, #1
  400d8e:	4401      	add	r1, r0
  400d90:	0189      	lsls	r1, r1, #6
  400d92:	440b      	add	r3, r1
  400d94:	4413      	add	r3, r2
  400d96:	781b      	ldrb	r3, [r3, #0]
  400d98:	697a      	ldr	r2, [r7, #20]
  400d9a:	4313      	orrs	r3, r2
  400d9c:	617b      	str	r3, [r7, #20]
	udi_cdc_rx_pos[port] = pos+1;
  400d9e:	7cba      	ldrb	r2, [r7, #18]
  400da0:	897b      	ldrh	r3, [r7, #10]
  400da2:	3301      	adds	r3, #1
  400da4:	b299      	uxth	r1, r3
  400da6:	4b0c      	ldr	r3, [pc, #48]	; (400dd8 <udi_cdc_multi_getc+0xc8>)
  400da8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	udi_cdc_rx_start(port);
  400dac:	7cbb      	ldrb	r3, [r7, #18]
  400dae:	4618      	mov	r0, r3
  400db0:	4b0f      	ldr	r3, [pc, #60]	; (400df0 <udi_cdc_multi_getc+0xe0>)
  400db2:	4798      	blx	r3

	if (b_databit_9) {
  400db4:	7cfb      	ldrb	r3, [r7, #19]
  400db6:	2b00      	cmp	r3, #0
  400db8:	d005      	beq.n	400dc6 <udi_cdc_multi_getc+0xb6>
		// Receive MSB
		b_databit_9 = false;
  400dba:	2300      	movs	r3, #0
  400dbc:	74fb      	strb	r3, [r7, #19]
		rx_data = rx_data << 8;
  400dbe:	697b      	ldr	r3, [r7, #20]
  400dc0:	021b      	lsls	r3, r3, #8
  400dc2:	617b      	str	r3, [r7, #20]
		goto udi_cdc_getc_process_one_byte;
  400dc4:	e7b9      	b.n	400d3a <udi_cdc_multi_getc+0x2a>
	}
	return rx_data;
  400dc6:	697b      	ldr	r3, [r7, #20]
}
  400dc8:	4618      	mov	r0, r3
  400dca:	3718      	adds	r7, #24
  400dcc:	46bd      	mov	sp, r7
  400dce:	bd80      	pop	{r7, pc}
  400dd0:	20000c64 	.word	0x20000c64
  400dd4:	0040046d 	.word	0x0040046d
  400dd8:	20000d08 	.word	0x20000d08
  400ddc:	20000d04 	.word	0x20000d04
  400de0:	004004c5 	.word	0x004004c5
  400de4:	20000d00 	.word	0x20000d00
  400de8:	20000c7e 	.word	0x20000c7e
  400dec:	20000c80 	.word	0x20000c80
  400df0:	00400895 	.word	0x00400895

00400df4 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  400df4:	b580      	push	{r7, lr}
  400df6:	af00      	add	r7, sp, #0
	return udi_cdc_multi_getc(0);
  400df8:	2000      	movs	r0, #0
  400dfa:	4b02      	ldr	r3, [pc, #8]	; (400e04 <udi_cdc_getc+0x10>)
  400dfc:	4798      	blx	r3
  400dfe:	4603      	mov	r3, r0
}
  400e00:	4618      	mov	r0, r3
  400e02:	bd80      	pop	{r7, pc}
  400e04:	00400d11 	.word	0x00400d11

00400e08 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  400e08:	b580      	push	{r7, lr}
  400e0a:	b088      	sub	sp, #32
  400e0c:	af00      	add	r7, sp, #0
  400e0e:	4603      	mov	r3, r0
  400e10:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	iram_size_t buf_sel_nb, buf_nosel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400e12:	2300      	movs	r3, #0
  400e14:	76fb      	strb	r3, [r7, #27]
#endif

	flags = cpu_irq_save();
  400e16:	4b28      	ldr	r3, [pc, #160]	; (400eb8 <udi_cdc_multi_get_free_tx_buffer+0xb0>)
  400e18:	4798      	blx	r3
  400e1a:	6178      	str	r0, [r7, #20]
	buf_sel = udi_cdc_tx_buf_sel[port];
  400e1c:	7efb      	ldrb	r3, [r7, #27]
  400e1e:	4a27      	ldr	r2, [pc, #156]	; (400ebc <udi_cdc_multi_get_free_tx_buffer+0xb4>)
  400e20:	5cd3      	ldrb	r3, [r2, r3]
  400e22:	74fb      	strb	r3, [r7, #19]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400e24:	7ef9      	ldrb	r1, [r7, #27]
  400e26:	7cfa      	ldrb	r2, [r7, #19]
  400e28:	4b25      	ldr	r3, [pc, #148]	; (400ec0 <udi_cdc_multi_get_free_tx_buffer+0xb8>)
  400e2a:	0049      	lsls	r1, r1, #1
  400e2c:	440a      	add	r2, r1
  400e2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400e32:	61fb      	str	r3, [r7, #28]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
  400e34:	7ef9      	ldrb	r1, [r7, #27]
  400e36:	7cfb      	ldrb	r3, [r7, #19]
  400e38:	2b00      	cmp	r3, #0
  400e3a:	bf14      	ite	ne
  400e3c:	2300      	movne	r3, #0
  400e3e:	2301      	moveq	r3, #1
  400e40:	b2db      	uxtb	r3, r3
  400e42:	461a      	mov	r2, r3
  400e44:	4b1e      	ldr	r3, [pc, #120]	; (400ec0 <udi_cdc_multi_get_free_tx_buffer+0xb8>)
  400e46:	0049      	lsls	r1, r1, #1
  400e48:	440a      	add	r2, r1
  400e4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400e4e:	60fb      	str	r3, [r7, #12]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  400e50:	69fb      	ldr	r3, [r7, #28]
  400e52:	2b40      	cmp	r3, #64	; 0x40
  400e54:	d123      	bne.n	400e9e <udi_cdc_multi_get_free_tx_buffer+0x96>
		if ((!udi_cdc_tx_trans_ongoing[port])
  400e56:	7efb      	ldrb	r3, [r7, #27]
  400e58:	4a1a      	ldr	r2, [pc, #104]	; (400ec4 <udi_cdc_multi_get_free_tx_buffer+0xbc>)
  400e5a:	5cd3      	ldrb	r3, [r2, r3]
  400e5c:	b2db      	uxtb	r3, r3
  400e5e:	f083 0301 	eor.w	r3, r3, #1
  400e62:	b2db      	uxtb	r3, r3
  400e64:	2b00      	cmp	r3, #0
  400e66:	d01a      	beq.n	400e9e <udi_cdc_multi_get_free_tx_buffer+0x96>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  400e68:	7efb      	ldrb	r3, [r7, #27]
  400e6a:	4a17      	ldr	r2, [pc, #92]	; (400ec8 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
  400e6c:	5cd3      	ldrb	r3, [r2, r3]
  400e6e:	b2db      	uxtb	r3, r3
  400e70:	f083 0301 	eor.w	r3, r3, #1
  400e74:	b2db      	uxtb	r3, r3
  400e76:	2b00      	cmp	r3, #0
  400e78:	d011      	beq.n	400e9e <udi_cdc_multi_get_free_tx_buffer+0x96>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
  400e7a:	7efb      	ldrb	r3, [r7, #27]
  400e7c:	4a12      	ldr	r2, [pc, #72]	; (400ec8 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
  400e7e:	2101      	movs	r1, #1
  400e80:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400e82:	7efb      	ldrb	r3, [r7, #27]
  400e84:	7cfa      	ldrb	r2, [r7, #19]
  400e86:	2a00      	cmp	r2, #0
  400e88:	bf14      	ite	ne
  400e8a:	2200      	movne	r2, #0
  400e8c:	2201      	moveq	r2, #1
  400e8e:	b2d2      	uxtb	r2, r2
  400e90:	4611      	mov	r1, r2
  400e92:	4a0a      	ldr	r2, [pc, #40]	; (400ebc <udi_cdc_multi_get_free_tx_buffer+0xb4>)
  400e94:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
  400e96:	2300      	movs	r3, #0
  400e98:	61fb      	str	r3, [r7, #28]
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
  400e9a:	2340      	movs	r3, #64	; 0x40
  400e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  400e9e:	69fb      	ldr	r3, [r7, #28]
  400ea0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  400ea4:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
  400ea6:	6978      	ldr	r0, [r7, #20]
  400ea8:	4b08      	ldr	r3, [pc, #32]	; (400ecc <udi_cdc_multi_get_free_tx_buffer+0xc4>)
  400eaa:	4798      	blx	r3
	return retval;
  400eac:	68bb      	ldr	r3, [r7, #8]
}
  400eae:	4618      	mov	r0, r3
  400eb0:	3720      	adds	r7, #32
  400eb2:	46bd      	mov	sp, r7
  400eb4:	bd80      	pop	{r7, pc}
  400eb6:	bf00      	nop
  400eb8:	0040046d 	.word	0x0040046d
  400ebc:	20000d94 	.word	0x20000d94
  400ec0:	20000d90 	.word	0x20000d90
  400ec4:	20000d9c 	.word	0x20000d9c
  400ec8:	20000da0 	.word	0x20000da0
  400ecc:	004004c5 	.word	0x004004c5

00400ed0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  400ed0:	b580      	push	{r7, lr}
  400ed2:	b082      	sub	sp, #8
  400ed4:	af00      	add	r7, sp, #0
  400ed6:	4603      	mov	r3, r0
  400ed8:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  400eda:	79fb      	ldrb	r3, [r7, #7]
  400edc:	4618      	mov	r0, r3
  400ede:	4b06      	ldr	r3, [pc, #24]	; (400ef8 <udi_cdc_multi_is_tx_ready+0x28>)
  400ee0:	4798      	blx	r3
  400ee2:	4603      	mov	r3, r0
  400ee4:	2b00      	cmp	r3, #0
  400ee6:	bf0c      	ite	eq
  400ee8:	2300      	moveq	r3, #0
  400eea:	2301      	movne	r3, #1
  400eec:	b2db      	uxtb	r3, r3
}
  400eee:	4618      	mov	r0, r3
  400ef0:	3708      	adds	r7, #8
  400ef2:	46bd      	mov	sp, r7
  400ef4:	bd80      	pop	{r7, pc}
  400ef6:	bf00      	nop
  400ef8:	00400e09 	.word	0x00400e09

00400efc <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
  400efc:	b580      	push	{r7, lr}
  400efe:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_tx_ready(0);
  400f00:	2000      	movs	r0, #0
  400f02:	4b02      	ldr	r3, [pc, #8]	; (400f0c <udi_cdc_is_tx_ready+0x10>)
  400f04:	4798      	blx	r3
  400f06:	4603      	mov	r3, r0
}
  400f08:	4618      	mov	r0, r3
  400f0a:	bd80      	pop	{r7, pc}
  400f0c:	00400ed1 	.word	0x00400ed1

00400f10 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
  400f10:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f12:	b087      	sub	sp, #28
  400f14:	af00      	add	r7, sp, #0
  400f16:	4603      	mov	r3, r0
  400f18:	6039      	str	r1, [r7, #0]
  400f1a:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400f1c:	2300      	movs	r3, #0
  400f1e:	75bb      	strb	r3, [r7, #22]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400f20:	7dba      	ldrb	r2, [r7, #22]
  400f22:	4929      	ldr	r1, [pc, #164]	; (400fc8 <udi_cdc_multi_putc+0xb8>)
  400f24:	4613      	mov	r3, r2
  400f26:	00db      	lsls	r3, r3, #3
  400f28:	1a9b      	subs	r3, r3, r2
  400f2a:	440b      	add	r3, r1
  400f2c:	799b      	ldrb	r3, [r3, #6]
  400f2e:	2b09      	cmp	r3, #9
  400f30:	bf14      	ite	ne
  400f32:	2300      	movne	r3, #0
  400f34:	2301      	moveq	r3, #1
  400f36:	75fb      	strb	r3, [r7, #23]

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400f38:	7dbb      	ldrb	r3, [r7, #22]
  400f3a:	4618      	mov	r0, r3
  400f3c:	4b23      	ldr	r3, [pc, #140]	; (400fcc <udi_cdc_multi_putc+0xbc>)
  400f3e:	4798      	blx	r3
  400f40:	4603      	mov	r3, r0
  400f42:	f083 0301 	eor.w	r3, r3, #1
  400f46:	b2db      	uxtb	r3, r3
  400f48:	2b00      	cmp	r3, #0
  400f4a:	d00a      	beq.n	400f62 <udi_cdc_multi_putc+0x52>
		if (!udi_cdc_data_running) {
  400f4c:	4b20      	ldr	r3, [pc, #128]	; (400fd0 <udi_cdc_multi_putc+0xc0>)
  400f4e:	781b      	ldrb	r3, [r3, #0]
  400f50:	b2db      	uxtb	r3, r3
  400f52:	f083 0301 	eor.w	r3, r3, #1
  400f56:	b2db      	uxtb	r3, r3
  400f58:	2b00      	cmp	r3, #0
  400f5a:	d001      	beq.n	400f60 <udi_cdc_multi_putc+0x50>
			return false;
  400f5c:	2300      	movs	r3, #0
  400f5e:	e02e      	b.n	400fbe <udi_cdc_multi_putc+0xae>
		}
		goto udi_cdc_putc_process_one_byte;
  400f60:	e7ea      	b.n	400f38 <udi_cdc_multi_putc+0x28>
	}

	// Write value
	flags = cpu_irq_save();
  400f62:	4b1c      	ldr	r3, [pc, #112]	; (400fd4 <udi_cdc_multi_putc+0xc4>)
  400f64:	4798      	blx	r3
  400f66:	6138      	str	r0, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
  400f68:	7dbb      	ldrb	r3, [r7, #22]
  400f6a:	4a1b      	ldr	r2, [pc, #108]	; (400fd8 <udi_cdc_multi_putc+0xc8>)
  400f6c:	5cd3      	ldrb	r3, [r2, r3]
  400f6e:	73fb      	strb	r3, [r7, #15]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400f70:	7dbc      	ldrb	r4, [r7, #22]
  400f72:	7bf8      	ldrb	r0, [r7, #15]
  400f74:	7db9      	ldrb	r1, [r7, #22]
  400f76:	7bfa      	ldrb	r2, [r7, #15]
  400f78:	4b18      	ldr	r3, [pc, #96]	; (400fdc <udi_cdc_multi_putc+0xcc>)
  400f7a:	004d      	lsls	r5, r1, #1
  400f7c:	4415      	add	r5, r2
  400f7e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  400f82:	1c5d      	adds	r5, r3, #1
  400f84:	b2ae      	uxth	r6, r5
  400f86:	4d15      	ldr	r5, [pc, #84]	; (400fdc <udi_cdc_multi_putc+0xcc>)
  400f88:	0049      	lsls	r1, r1, #1
  400f8a:	440a      	add	r2, r1
  400f8c:	4631      	mov	r1, r6
  400f8e:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
  400f92:	683a      	ldr	r2, [r7, #0]
  400f94:	b2d2      	uxtb	r2, r2
  400f96:	4912      	ldr	r1, [pc, #72]	; (400fe0 <udi_cdc_multi_putc+0xd0>)
  400f98:	0064      	lsls	r4, r4, #1
  400f9a:	4420      	add	r0, r4
  400f9c:	0180      	lsls	r0, r0, #6
  400f9e:	4403      	add	r3, r0
  400fa0:	440b      	add	r3, r1
  400fa2:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
  400fa4:	6938      	ldr	r0, [r7, #16]
  400fa6:	4b0f      	ldr	r3, [pc, #60]	; (400fe4 <udi_cdc_multi_putc+0xd4>)
  400fa8:	4798      	blx	r3

	if (b_databit_9) {
  400faa:	7dfb      	ldrb	r3, [r7, #23]
  400fac:	2b00      	cmp	r3, #0
  400fae:	d005      	beq.n	400fbc <udi_cdc_multi_putc+0xac>
		// Send MSB
		b_databit_9 = false;
  400fb0:	2300      	movs	r3, #0
  400fb2:	75fb      	strb	r3, [r7, #23]
		value = value >> 8;
  400fb4:	683b      	ldr	r3, [r7, #0]
  400fb6:	121b      	asrs	r3, r3, #8
  400fb8:	603b      	str	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
  400fba:	e7bd      	b.n	400f38 <udi_cdc_multi_putc+0x28>
	}
	return true;
  400fbc:	2301      	movs	r3, #1
}
  400fbe:	4618      	mov	r0, r3
  400fc0:	371c      	adds	r7, #28
  400fc2:	46bd      	mov	sp, r7
  400fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400fc6:	bf00      	nop
  400fc8:	20000c64 	.word	0x20000c64
  400fcc:	00400ed1 	.word	0x00400ed1
  400fd0:	20000c7e 	.word	0x20000c7e
  400fd4:	0040046d 	.word	0x0040046d
  400fd8:	20000d94 	.word	0x20000d94
  400fdc:	20000d90 	.word	0x20000d90
  400fe0:	20000d10 	.word	0x20000d10
  400fe4:	004004c5 	.word	0x004004c5

00400fe8 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  400fe8:	b580      	push	{r7, lr}
  400fea:	b082      	sub	sp, #8
  400fec:	af00      	add	r7, sp, #0
  400fee:	6078      	str	r0, [r7, #4]
	return udi_cdc_multi_putc(0, value);
  400ff0:	2000      	movs	r0, #0
  400ff2:	6879      	ldr	r1, [r7, #4]
  400ff4:	4b03      	ldr	r3, [pc, #12]	; (401004 <udi_cdc_putc+0x1c>)
  400ff6:	4798      	blx	r3
  400ff8:	4603      	mov	r3, r0
}
  400ffa:	4618      	mov	r0, r3
  400ffc:	3708      	adds	r7, #8
  400ffe:	46bd      	mov	sp, r7
  401000:	bd80      	pop	{r7, pc}
  401002:	bf00      	nop
  401004:	00400f11 	.word	0x00400f11

00401008 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
  401008:	b580      	push	{r7, lr}
  40100a:	b08a      	sub	sp, #40	; 0x28
  40100c:	af00      	add	r7, sp, #0
  40100e:	4603      	mov	r3, r0
  401010:	60b9      	str	r1, [r7, #8]
  401012:	607a      	str	r2, [r7, #4]
  401014:	73fb      	strb	r3, [r7, #15]
	irqflags_t flags;
	uint8_t buf_sel;
	uint16_t buf_nb;
	iram_size_t copy_nb;
	uint8_t *ptr_buf = (uint8_t *)buf;
  401016:	68bb      	ldr	r3, [r7, #8]
  401018:	623b      	str	r3, [r7, #32]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  40101a:	2300      	movs	r3, #0
  40101c:	77fb      	strb	r3, [r7, #31]
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
  40101e:	7ffa      	ldrb	r2, [r7, #31]
  401020:	4933      	ldr	r1, [pc, #204]	; (4010f0 <udi_cdc_multi_write_buf+0xe8>)
  401022:	4613      	mov	r3, r2
  401024:	00db      	lsls	r3, r3, #3
  401026:	1a9b      	subs	r3, r3, r2
  401028:	440b      	add	r3, r1
  40102a:	799b      	ldrb	r3, [r3, #6]
  40102c:	2b09      	cmp	r3, #9
  40102e:	d102      	bne.n	401036 <udi_cdc_multi_write_buf+0x2e>
		size *=2;
  401030:	687b      	ldr	r3, [r7, #4]
  401032:	005b      	lsls	r3, r3, #1
  401034:	607b      	str	r3, [r7, #4]
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  401036:	7ffb      	ldrb	r3, [r7, #31]
  401038:	4618      	mov	r0, r3
  40103a:	4b2e      	ldr	r3, [pc, #184]	; (4010f4 <udi_cdc_multi_write_buf+0xec>)
  40103c:	4798      	blx	r3
  40103e:	4603      	mov	r3, r0
  401040:	f083 0301 	eor.w	r3, r3, #1
  401044:	b2db      	uxtb	r3, r3
  401046:	2b00      	cmp	r3, #0
  401048:	d00a      	beq.n	401060 <udi_cdc_multi_write_buf+0x58>
		if (!udi_cdc_data_running) {
  40104a:	4b2b      	ldr	r3, [pc, #172]	; (4010f8 <udi_cdc_multi_write_buf+0xf0>)
  40104c:	781b      	ldrb	r3, [r3, #0]
  40104e:	b2db      	uxtb	r3, r3
  401050:	f083 0301 	eor.w	r3, r3, #1
  401054:	b2db      	uxtb	r3, r3
  401056:	2b00      	cmp	r3, #0
  401058:	d001      	beq.n	40105e <udi_cdc_multi_write_buf+0x56>
			return size;
  40105a:	687b      	ldr	r3, [r7, #4]
  40105c:	e043      	b.n	4010e6 <udi_cdc_multi_write_buf+0xde>
		}
		goto udi_cdc_write_buf_loop_wait;
  40105e:	e7ea      	b.n	401036 <udi_cdc_multi_write_buf+0x2e>
	}

	// Write values
	flags = cpu_irq_save();
  401060:	4b26      	ldr	r3, [pc, #152]	; (4010fc <udi_cdc_multi_write_buf+0xf4>)
  401062:	4798      	blx	r3
  401064:	61b8      	str	r0, [r7, #24]
	buf_sel = udi_cdc_tx_buf_sel[port];
  401066:	7ffb      	ldrb	r3, [r7, #31]
  401068:	4a25      	ldr	r2, [pc, #148]	; (401100 <udi_cdc_multi_write_buf+0xf8>)
  40106a:	5cd3      	ldrb	r3, [r2, r3]
  40106c:	75fb      	strb	r3, [r7, #23]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  40106e:	7ff9      	ldrb	r1, [r7, #31]
  401070:	7dfa      	ldrb	r2, [r7, #23]
  401072:	4b24      	ldr	r3, [pc, #144]	; (401104 <udi_cdc_multi_write_buf+0xfc>)
  401074:	0049      	lsls	r1, r1, #1
  401076:	440a      	add	r2, r1
  401078:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40107c:	82bb      	strh	r3, [r7, #20]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
  40107e:	8abb      	ldrh	r3, [r7, #20]
  401080:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  401084:	627b      	str	r3, [r7, #36]	; 0x24
	if (copy_nb > size) {
  401086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  401088:	687b      	ldr	r3, [r7, #4]
  40108a:	429a      	cmp	r2, r3
  40108c:	d901      	bls.n	401092 <udi_cdc_multi_write_buf+0x8a>
		copy_nb = size;
  40108e:	687b      	ldr	r3, [r7, #4]
  401090:	627b      	str	r3, [r7, #36]	; 0x24
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
  401092:	7ff9      	ldrb	r1, [r7, #31]
  401094:	7dfa      	ldrb	r2, [r7, #23]
  401096:	8abb      	ldrh	r3, [r7, #20]
  401098:	0049      	lsls	r1, r1, #1
  40109a:	440a      	add	r2, r1
  40109c:	0192      	lsls	r2, r2, #6
  40109e:	441a      	add	r2, r3
  4010a0:	4b19      	ldr	r3, [pc, #100]	; (401108 <udi_cdc_multi_write_buf+0x100>)
  4010a2:	4413      	add	r3, r2
  4010a4:	4618      	mov	r0, r3
  4010a6:	6a39      	ldr	r1, [r7, #32]
  4010a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4010aa:	4b18      	ldr	r3, [pc, #96]	; (40110c <udi_cdc_multi_write_buf+0x104>)
  4010ac:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
  4010ae:	7ff8      	ldrb	r0, [r7, #31]
  4010b0:	7dfa      	ldrb	r2, [r7, #23]
  4010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010b4:	b299      	uxth	r1, r3
  4010b6:	8abb      	ldrh	r3, [r7, #20]
  4010b8:	440b      	add	r3, r1
  4010ba:	b299      	uxth	r1, r3
  4010bc:	4b11      	ldr	r3, [pc, #68]	; (401104 <udi_cdc_multi_write_buf+0xfc>)
  4010be:	0040      	lsls	r0, r0, #1
  4010c0:	4402      	add	r2, r0
  4010c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	cpu_irq_restore(flags);
  4010c6:	69b8      	ldr	r0, [r7, #24]
  4010c8:	4b11      	ldr	r3, [pc, #68]	; (401110 <udi_cdc_multi_write_buf+0x108>)
  4010ca:	4798      	blx	r3

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
  4010cc:	6a3a      	ldr	r2, [r7, #32]
  4010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010d0:	4413      	add	r3, r2
  4010d2:	623b      	str	r3, [r7, #32]
	size -= copy_nb;
  4010d4:	687a      	ldr	r2, [r7, #4]
  4010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4010d8:	1ad3      	subs	r3, r2, r3
  4010da:	607b      	str	r3, [r7, #4]

	if (size) {
  4010dc:	687b      	ldr	r3, [r7, #4]
  4010de:	2b00      	cmp	r3, #0
  4010e0:	d000      	beq.n	4010e4 <udi_cdc_multi_write_buf+0xdc>
		goto udi_cdc_write_buf_loop_wait;
  4010e2:	e7a8      	b.n	401036 <udi_cdc_multi_write_buf+0x2e>
	}

	return 0;
  4010e4:	2300      	movs	r3, #0
}
  4010e6:	4618      	mov	r0, r3
  4010e8:	3728      	adds	r7, #40	; 0x28
  4010ea:	46bd      	mov	sp, r7
  4010ec:	bd80      	pop	{r7, pc}
  4010ee:	bf00      	nop
  4010f0:	20000c64 	.word	0x20000c64
  4010f4:	00400ed1 	.word	0x00400ed1
  4010f8:	20000c7e 	.word	0x20000c7e
  4010fc:	0040046d 	.word	0x0040046d
  401100:	20000d94 	.word	0x20000d94
  401104:	20000d90 	.word	0x20000d90
  401108:	20000d10 	.word	0x20000d10
  40110c:	0040ca61 	.word	0x0040ca61
  401110:	004004c5 	.word	0x004004c5

00401114 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
  401114:	b580      	push	{r7, lr}
  401116:	b082      	sub	sp, #8
  401118:	af00      	add	r7, sp, #0
  40111a:	6078      	str	r0, [r7, #4]
  40111c:	6039      	str	r1, [r7, #0]
	return udi_cdc_multi_write_buf(0, buf, size);
  40111e:	2000      	movs	r0, #0
  401120:	6879      	ldr	r1, [r7, #4]
  401122:	683a      	ldr	r2, [r7, #0]
  401124:	4b03      	ldr	r3, [pc, #12]	; (401134 <udi_cdc_write_buf+0x20>)
  401126:	4798      	blx	r3
  401128:	4603      	mov	r3, r0
}
  40112a:	4618      	mov	r0, r3
  40112c:	3708      	adds	r7, #8
  40112e:	46bd      	mov	sp, r7
  401130:	bd80      	pop	{r7, pc}
  401132:	bf00      	nop
  401134:	00401009 	.word	0x00401009

00401138 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
  401138:	b480      	push	{r7}
  40113a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  40113c:	4b06      	ldr	r3, [pc, #24]	; (401158 <udc_get_eof_conf+0x20>)
  40113e:	681b      	ldr	r3, [r3, #0]
  401140:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  401142:	4b05      	ldr	r3, [pc, #20]	; (401158 <udc_get_eof_conf+0x20>)
  401144:	681b      	ldr	r3, [r3, #0]
  401146:	681b      	ldr	r3, [r3, #0]
  401148:	885b      	ldrh	r3, [r3, #2]
  40114a:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  40114c:	4413      	add	r3, r2
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
  40114e:	4618      	mov	r0, r3
  401150:	46bd      	mov	sp, r7
  401152:	f85d 7b04 	ldr.w	r7, [sp], #4
  401156:	4770      	bx	lr
  401158:	20000db4 	.word	0x20000db4

0040115c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
  40115c:	b580      	push	{r7, lr}
  40115e:	b084      	sub	sp, #16
  401160:	af00      	add	r7, sp, #0
  401162:	6078      	str	r0, [r7, #4]
  401164:	460b      	mov	r3, r1
  401166:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
  401168:	4b11      	ldr	r3, [pc, #68]	; (4011b0 <udc_next_desc_in_iface+0x54>)
  40116a:	4798      	blx	r3
  40116c:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  40116e:	687b      	ldr	r3, [r7, #4]
  401170:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401172:	687a      	ldr	r2, [r7, #4]
  401174:	4413      	add	r3, r2
  401176:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  401178:	e010      	b.n	40119c <udc_next_desc_in_iface+0x40>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40117a:	687b      	ldr	r3, [r7, #4]
  40117c:	785b      	ldrb	r3, [r3, #1]
  40117e:	2b04      	cmp	r3, #4
  401180:	d100      	bne.n	401184 <udc_next_desc_in_iface+0x28>
			break; // End of global interface descriptor
  401182:	e00f      	b.n	4011a4 <udc_next_desc_in_iface+0x48>
		}
		if (desc_id == desc->bDescriptorType) {
  401184:	687b      	ldr	r3, [r7, #4]
  401186:	785b      	ldrb	r3, [r3, #1]
  401188:	78fa      	ldrb	r2, [r7, #3]
  40118a:	429a      	cmp	r2, r3
  40118c:	d101      	bne.n	401192 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
  40118e:	687b      	ldr	r3, [r7, #4]
  401190:	e009      	b.n	4011a6 <udc_next_desc_in_iface+0x4a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  401192:	687b      	ldr	r3, [r7, #4]
  401194:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401196:	687a      	ldr	r2, [r7, #4]
  401198:	4413      	add	r3, r2
  40119a:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  40119c:	68fa      	ldr	r2, [r7, #12]
  40119e:	687b      	ldr	r3, [r7, #4]
  4011a0:	429a      	cmp	r2, r3
  4011a2:	d8ea      	bhi.n	40117a <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  4011a4:	2300      	movs	r3, #0
}
  4011a6:	4618      	mov	r0, r3
  4011a8:	3710      	adds	r7, #16
  4011aa:	46bd      	mov	sp, r7
  4011ac:	bd80      	pop	{r7, pc}
  4011ae:	bf00      	nop
  4011b0:	00401139 	.word	0x00401139

004011b4 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  4011b4:	b580      	push	{r7, lr}
  4011b6:	b084      	sub	sp, #16
  4011b8:	af00      	add	r7, sp, #0
  4011ba:	4602      	mov	r2, r0
  4011bc:	460b      	mov	r3, r1
  4011be:	71fa      	strb	r2, [r7, #7]
  4011c0:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  4011c2:	4b1e      	ldr	r3, [pc, #120]	; (40123c <udc_update_iface_desc+0x88>)
  4011c4:	781b      	ldrb	r3, [r3, #0]
  4011c6:	2b00      	cmp	r3, #0
  4011c8:	d101      	bne.n	4011ce <udc_update_iface_desc+0x1a>
		return false;
  4011ca:	2300      	movs	r3, #0
  4011cc:	e032      	b.n	401234 <udc_update_iface_desc+0x80>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4011ce:	4b1c      	ldr	r3, [pc, #112]	; (401240 <udc_update_iface_desc+0x8c>)
  4011d0:	681b      	ldr	r3, [r3, #0]
  4011d2:	681b      	ldr	r3, [r3, #0]
  4011d4:	791b      	ldrb	r3, [r3, #4]
  4011d6:	79fa      	ldrb	r2, [r7, #7]
  4011d8:	429a      	cmp	r2, r3
  4011da:	d301      	bcc.n	4011e0 <udc_update_iface_desc+0x2c>
		return false;
  4011dc:	2300      	movs	r3, #0
  4011de:	e029      	b.n	401234 <udc_update_iface_desc+0x80>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
  4011e0:	4b17      	ldr	r3, [pc, #92]	; (401240 <udc_update_iface_desc+0x8c>)
  4011e2:	681b      	ldr	r3, [r3, #0]
  4011e4:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  4011e6:	4b17      	ldr	r3, [pc, #92]	; (401244 <udc_update_iface_desc+0x90>)
  4011e8:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
  4011ea:	4b17      	ldr	r3, [pc, #92]	; (401248 <udc_update_iface_desc+0x94>)
  4011ec:	4798      	blx	r3
  4011ee:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
  4011f0:	e01a      	b.n	401228 <udc_update_iface_desc+0x74>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  4011f2:	4b14      	ldr	r3, [pc, #80]	; (401244 <udc_update_iface_desc+0x90>)
  4011f4:	681b      	ldr	r3, [r3, #0]
  4011f6:	785b      	ldrb	r3, [r3, #1]
  4011f8:	2b04      	cmp	r3, #4
  4011fa:	d10d      	bne.n	401218 <udc_update_iface_desc+0x64>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4011fc:	4b11      	ldr	r3, [pc, #68]	; (401244 <udc_update_iface_desc+0x90>)
  4011fe:	681b      	ldr	r3, [r3, #0]
  401200:	789b      	ldrb	r3, [r3, #2]
  401202:	79fa      	ldrb	r2, [r7, #7]
  401204:	429a      	cmp	r2, r3
  401206:	d107      	bne.n	401218 <udc_update_iface_desc+0x64>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
  401208:	4b0e      	ldr	r3, [pc, #56]	; (401244 <udc_update_iface_desc+0x90>)
  40120a:	681b      	ldr	r3, [r3, #0]
  40120c:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  40120e:	79ba      	ldrb	r2, [r7, #6]
  401210:	429a      	cmp	r2, r3
  401212:	d101      	bne.n	401218 <udc_update_iface_desc+0x64>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  401214:	2301      	movs	r3, #1
  401216:	e00d      	b.n	401234 <udc_update_iface_desc+0x80>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  401218:	4b0a      	ldr	r3, [pc, #40]	; (401244 <udc_update_iface_desc+0x90>)
  40121a:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
  40121c:	4b09      	ldr	r3, [pc, #36]	; (401244 <udc_update_iface_desc+0x90>)
  40121e:	681b      	ldr	r3, [r3, #0]
  401220:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  401222:	441a      	add	r2, r3
  401224:	4b07      	ldr	r3, [pc, #28]	; (401244 <udc_update_iface_desc+0x90>)
  401226:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
  401228:	4b06      	ldr	r3, [pc, #24]	; (401244 <udc_update_iface_desc+0x90>)
  40122a:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  40122c:	68fa      	ldr	r2, [r7, #12]
  40122e:	429a      	cmp	r2, r3
  401230:	d8df      	bhi.n	4011f2 <udc_update_iface_desc+0x3e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  401232:	2300      	movs	r3, #0
}
  401234:	4618      	mov	r0, r3
  401236:	3710      	adds	r7, #16
  401238:	46bd      	mov	sp, r7
  40123a:	bd80      	pop	{r7, pc}
  40123c:	20000db0 	.word	0x20000db0
  401240:	20000db4 	.word	0x20000db4
  401244:	20000db8 	.word	0x20000db8
  401248:	00401139 	.word	0x00401139

0040124c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  40124c:	b580      	push	{r7, lr}
  40124e:	b084      	sub	sp, #16
  401250:	af00      	add	r7, sp, #0
  401252:	4603      	mov	r3, r0
  401254:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401256:	79fb      	ldrb	r3, [r7, #7]
  401258:	4618      	mov	r0, r3
  40125a:	2100      	movs	r1, #0
  40125c:	4b1e      	ldr	r3, [pc, #120]	; (4012d8 <udc_iface_disable+0x8c>)
  40125e:	4798      	blx	r3
  401260:	4603      	mov	r3, r0
  401262:	f083 0301 	eor.w	r3, r3, #1
  401266:	b2db      	uxtb	r3, r3
  401268:	2b00      	cmp	r3, #0
  40126a:	d001      	beq.n	401270 <udc_iface_disable+0x24>
		return false;
  40126c:	2300      	movs	r3, #0
  40126e:	e02f      	b.n	4012d0 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401270:	4b1a      	ldr	r3, [pc, #104]	; (4012dc <udc_iface_disable+0x90>)
  401272:	681b      	ldr	r3, [r3, #0]
  401274:	685a      	ldr	r2, [r3, #4]
  401276:	79fb      	ldrb	r3, [r7, #7]
  401278:	009b      	lsls	r3, r3, #2
  40127a:	4413      	add	r3, r2
  40127c:	681b      	ldr	r3, [r3, #0]
  40127e:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401280:	68bb      	ldr	r3, [r7, #8]
  401282:	68db      	ldr	r3, [r3, #12]
  401284:	4798      	blx	r3
  401286:	4603      	mov	r3, r0
  401288:	79fa      	ldrb	r2, [r7, #7]
  40128a:	4610      	mov	r0, r2
  40128c:	4619      	mov	r1, r3
  40128e:	4b12      	ldr	r3, [pc, #72]	; (4012d8 <udc_iface_disable+0x8c>)
  401290:	4798      	blx	r3
  401292:	4603      	mov	r3, r0
  401294:	f083 0301 	eor.w	r3, r3, #1
  401298:	b2db      	uxtb	r3, r3
  40129a:	2b00      	cmp	r3, #0
  40129c:	d001      	beq.n	4012a2 <udc_iface_disable+0x56>
		return false;
  40129e:	2300      	movs	r3, #0
  4012a0:	e016      	b.n	4012d0 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4012a2:	4b0f      	ldr	r3, [pc, #60]	; (4012e0 <udc_iface_disable+0x94>)
  4012a4:	681b      	ldr	r3, [r3, #0]
  4012a6:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4012a8:	68f8      	ldr	r0, [r7, #12]
  4012aa:	2105      	movs	r1, #5
  4012ac:	4b0d      	ldr	r3, [pc, #52]	; (4012e4 <udc_iface_disable+0x98>)
  4012ae:	4798      	blx	r3
  4012b0:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  4012b2:	68fb      	ldr	r3, [r7, #12]
  4012b4:	2b00      	cmp	r3, #0
  4012b6:	d105      	bne.n	4012c4 <udc_iface_disable+0x78>
				break;
  4012b8:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
  4012ba:	68bb      	ldr	r3, [r7, #8]
  4012bc:	685b      	ldr	r3, [r3, #4]
  4012be:	4798      	blx	r3
	return true;
  4012c0:	2301      	movs	r3, #1
  4012c2:	e005      	b.n	4012d0 <udc_iface_disable+0x84>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  4012c4:	68fb      	ldr	r3, [r7, #12]
  4012c6:	789b      	ldrb	r3, [r3, #2]
  4012c8:	4618      	mov	r0, r3
  4012ca:	4b07      	ldr	r3, [pc, #28]	; (4012e8 <udc_iface_disable+0x9c>)
  4012cc:	4798      	blx	r3
		}
  4012ce:	e7eb      	b.n	4012a8 <udc_iface_disable+0x5c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
  4012d0:	4618      	mov	r0, r3
  4012d2:	3710      	adds	r7, #16
  4012d4:	46bd      	mov	sp, r7
  4012d6:	bd80      	pop	{r7, pc}
  4012d8:	004011b5 	.word	0x004011b5
  4012dc:	20000db4 	.word	0x20000db4
  4012e0:	20000db8 	.word	0x20000db8
  4012e4:	0040115d 	.word	0x0040115d
  4012e8:	004024c1 	.word	0x004024c1

004012ec <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  4012ec:	b580      	push	{r7, lr}
  4012ee:	b084      	sub	sp, #16
  4012f0:	af00      	add	r7, sp, #0
  4012f2:	4602      	mov	r2, r0
  4012f4:	460b      	mov	r3, r1
  4012f6:	71fa      	strb	r2, [r7, #7]
  4012f8:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4012fa:	79fa      	ldrb	r2, [r7, #7]
  4012fc:	79bb      	ldrb	r3, [r7, #6]
  4012fe:	4610      	mov	r0, r2
  401300:	4619      	mov	r1, r3
  401302:	4b1d      	ldr	r3, [pc, #116]	; (401378 <udc_iface_enable+0x8c>)
  401304:	4798      	blx	r3
  401306:	4603      	mov	r3, r0
  401308:	f083 0301 	eor.w	r3, r3, #1
  40130c:	b2db      	uxtb	r3, r3
  40130e:	2b00      	cmp	r3, #0
  401310:	d001      	beq.n	401316 <udc_iface_enable+0x2a>
		return false;
  401312:	2300      	movs	r3, #0
  401314:	e02b      	b.n	40136e <udc_iface_enable+0x82>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  401316:	4b19      	ldr	r3, [pc, #100]	; (40137c <udc_iface_enable+0x90>)
  401318:	681b      	ldr	r3, [r3, #0]
  40131a:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40131c:	68f8      	ldr	r0, [r7, #12]
  40131e:	2105      	movs	r1, #5
  401320:	4b17      	ldr	r3, [pc, #92]	; (401380 <udc_iface_enable+0x94>)
  401322:	4798      	blx	r3
  401324:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  401326:	68fb      	ldr	r3, [r7, #12]
  401328:	2b00      	cmp	r3, #0
  40132a:	d10b      	bne.n	401344 <udc_iface_enable+0x58>
			break;
  40132c:	bf00      	nop
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40132e:	4b15      	ldr	r3, [pc, #84]	; (401384 <udc_iface_enable+0x98>)
  401330:	681b      	ldr	r3, [r3, #0]
  401332:	685a      	ldr	r2, [r3, #4]
  401334:	79fb      	ldrb	r3, [r7, #7]
  401336:	009b      	lsls	r3, r3, #2
  401338:	4413      	add	r3, r2
  40133a:	681b      	ldr	r3, [r3, #0]
  40133c:	681b      	ldr	r3, [r3, #0]
  40133e:	4798      	blx	r3
  401340:	4603      	mov	r3, r0
  401342:	e014      	b.n	40136e <udc_iface_enable+0x82>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  401344:	68fb      	ldr	r3, [r7, #12]
  401346:	7899      	ldrb	r1, [r3, #2]
  401348:	68fb      	ldr	r3, [r7, #12]
  40134a:	78da      	ldrb	r2, [r3, #3]
  40134c:	68fb      	ldr	r3, [r7, #12]
  40134e:	889b      	ldrh	r3, [r3, #4]
  401350:	b29b      	uxth	r3, r3
  401352:	4608      	mov	r0, r1
  401354:	4611      	mov	r1, r2
  401356:	461a      	mov	r2, r3
  401358:	4b0b      	ldr	r3, [pc, #44]	; (401388 <udc_iface_enable+0x9c>)
  40135a:	4798      	blx	r3
  40135c:	4603      	mov	r3, r0
  40135e:	f083 0301 	eor.w	r3, r3, #1
  401362:	b2db      	uxtb	r3, r3
  401364:	2b00      	cmp	r3, #0
  401366:	d001      	beq.n	40136c <udc_iface_enable+0x80>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
  401368:	2300      	movs	r3, #0
  40136a:	e000      	b.n	40136e <udc_iface_enable+0x82>
		}
	}
  40136c:	e7d6      	b.n	40131c <udc_iface_enable+0x30>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
  40136e:	4618      	mov	r0, r3
  401370:	3710      	adds	r7, #16
  401372:	46bd      	mov	sp, r7
  401374:	bd80      	pop	{r7, pc}
  401376:	bf00      	nop
  401378:	004011b5 	.word	0x004011b5
  40137c:	20000db8 	.word	0x20000db8
  401380:	0040115d 	.word	0x0040115d
  401384:	20000db4 	.word	0x20000db4
  401388:	00402341 	.word	0x00402341

0040138c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  40138c:	b580      	push	{r7, lr}
  40138e:	af00      	add	r7, sp, #0
	udd_enable();
  401390:	4b01      	ldr	r3, [pc, #4]	; (401398 <udc_start+0xc>)
  401392:	4798      	blx	r3
}
  401394:	bd80      	pop	{r7, pc}
  401396:	bf00      	nop
  401398:	00402155 	.word	0x00402155

0040139c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  40139c:	b580      	push	{r7, lr}
  40139e:	b082      	sub	sp, #8
  4013a0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  4013a2:	4b0f      	ldr	r3, [pc, #60]	; (4013e0 <udc_reset+0x44>)
  4013a4:	781b      	ldrb	r3, [r3, #0]
  4013a6:	2b00      	cmp	r3, #0
  4013a8:	d010      	beq.n	4013cc <udc_reset+0x30>
		for (iface_num = 0;
  4013aa:	2300      	movs	r3, #0
  4013ac:	71fb      	strb	r3, [r7, #7]
  4013ae:	e006      	b.n	4013be <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  4013b0:	79fb      	ldrb	r3, [r7, #7]
  4013b2:	4618      	mov	r0, r3
  4013b4:	4b0b      	ldr	r3, [pc, #44]	; (4013e4 <udc_reset+0x48>)
  4013b6:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  4013b8:	79fb      	ldrb	r3, [r7, #7]
  4013ba:	3301      	adds	r3, #1
  4013bc:	71fb      	strb	r3, [r7, #7]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4013be:	4b0a      	ldr	r3, [pc, #40]	; (4013e8 <udc_reset+0x4c>)
  4013c0:	681b      	ldr	r3, [r3, #0]
  4013c2:	681b      	ldr	r3, [r3, #0]
  4013c4:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4013c6:	79fa      	ldrb	r2, [r7, #7]
  4013c8:	429a      	cmp	r2, r3
  4013ca:	d3f1      	bcc.n	4013b0 <udc_reset+0x14>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  4013cc:	4b04      	ldr	r3, [pc, #16]	; (4013e0 <udc_reset+0x44>)
  4013ce:	2200      	movs	r2, #0
  4013d0:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  4013d2:	4b06      	ldr	r3, [pc, #24]	; (4013ec <udc_reset+0x50>)
  4013d4:	2201      	movs	r2, #1
  4013d6:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
  4013d8:	3708      	adds	r7, #8
  4013da:	46bd      	mov	sp, r7
  4013dc:	bd80      	pop	{r7, pc}
  4013de:	bf00      	nop
  4013e0:	20000db0 	.word	0x20000db0
  4013e4:	0040124d 	.word	0x0040124d
  4013e8:	20000db4 	.word	0x20000db4
  4013ec:	20000da8 	.word	0x20000da8

004013f0 <udc_sof_notify>:

void udc_sof_notify(void)
{
  4013f0:	b580      	push	{r7, lr}
  4013f2:	b082      	sub	sp, #8
  4013f4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  4013f6:	4b13      	ldr	r3, [pc, #76]	; (401444 <udc_sof_notify+0x54>)
  4013f8:	781b      	ldrb	r3, [r3, #0]
  4013fa:	2b00      	cmp	r3, #0
  4013fc:	d01f      	beq.n	40143e <udc_sof_notify+0x4e>
		for (iface_num = 0;
  4013fe:	2300      	movs	r3, #0
  401400:	71fb      	strb	r3, [r7, #7]
  401402:	e015      	b.n	401430 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  401404:	4b10      	ldr	r3, [pc, #64]	; (401448 <udc_sof_notify+0x58>)
  401406:	681b      	ldr	r3, [r3, #0]
  401408:	685a      	ldr	r2, [r3, #4]
  40140a:	79fb      	ldrb	r3, [r7, #7]
  40140c:	009b      	lsls	r3, r3, #2
  40140e:	4413      	add	r3, r2
  401410:	681b      	ldr	r3, [r3, #0]
  401412:	691b      	ldr	r3, [r3, #16]
  401414:	2b00      	cmp	r3, #0
  401416:	d008      	beq.n	40142a <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  401418:	4b0b      	ldr	r3, [pc, #44]	; (401448 <udc_sof_notify+0x58>)
  40141a:	681b      	ldr	r3, [r3, #0]
  40141c:	685a      	ldr	r2, [r3, #4]
  40141e:	79fb      	ldrb	r3, [r7, #7]
  401420:	009b      	lsls	r3, r3, #2
  401422:	4413      	add	r3, r2
  401424:	681b      	ldr	r3, [r3, #0]
  401426:	691b      	ldr	r3, [r3, #16]
  401428:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  40142a:	79fb      	ldrb	r3, [r7, #7]
  40142c:	3301      	adds	r3, #1
  40142e:	71fb      	strb	r3, [r7, #7]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401430:	4b05      	ldr	r3, [pc, #20]	; (401448 <udc_sof_notify+0x58>)
  401432:	681b      	ldr	r3, [r3, #0]
  401434:	681b      	ldr	r3, [r3, #0]
  401436:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401438:	79fa      	ldrb	r2, [r7, #7]
  40143a:	429a      	cmp	r2, r3
  40143c:	d3e2      	bcc.n	401404 <udc_sof_notify+0x14>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
  40143e:	3708      	adds	r7, #8
  401440:	46bd      	mov	sp, r7
  401442:	bd80      	pop	{r7, pc}
  401444:	20000db0 	.word	0x20000db0
  401448:	20000db4 	.word	0x20000db4

0040144c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
  40144c:	b580      	push	{r7, lr}
  40144e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  401450:	4b06      	ldr	r3, [pc, #24]	; (40146c <udc_req_std_dev_get_status+0x20>)
  401452:	88db      	ldrh	r3, [r3, #6]
  401454:	2b02      	cmp	r3, #2
  401456:	d001      	beq.n	40145c <udc_req_std_dev_get_status+0x10>
		return false;
  401458:	2300      	movs	r3, #0
  40145a:	e004      	b.n	401466 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  40145c:	4804      	ldr	r0, [pc, #16]	; (401470 <udc_req_std_dev_get_status+0x24>)
  40145e:	2102      	movs	r1, #2
  401460:	4b04      	ldr	r3, [pc, #16]	; (401474 <udc_req_std_dev_get_status+0x28>)
  401462:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  401464:	2301      	movs	r3, #1
}
  401466:	4618      	mov	r0, r3
  401468:	bd80      	pop	{r7, pc}
  40146a:	bf00      	nop
  40146c:	20008954 	.word	0x20008954
  401470:	20000da8 	.word	0x20000da8
  401474:	00402319 	.word	0x00402319

00401478 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
  401478:	b580      	push	{r7, lr}
  40147a:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  40147c:	4b0b      	ldr	r3, [pc, #44]	; (4014ac <udc_req_std_ep_get_status+0x34>)
  40147e:	88db      	ldrh	r3, [r3, #6]
  401480:	2b02      	cmp	r3, #2
  401482:	d001      	beq.n	401488 <udc_req_std_ep_get_status+0x10>
		return false;
  401484:	2300      	movs	r3, #0
  401486:	e00e      	b.n	4014a6 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  401488:	4b08      	ldr	r3, [pc, #32]	; (4014ac <udc_req_std_ep_get_status+0x34>)
  40148a:	889b      	ldrh	r3, [r3, #4]
  40148c:	b2db      	uxtb	r3, r3
  40148e:	4618      	mov	r0, r3
  401490:	4b07      	ldr	r3, [pc, #28]	; (4014b0 <udc_req_std_ep_get_status+0x38>)
  401492:	4798      	blx	r3
  401494:	4603      	mov	r3, r0
  401496:	461a      	mov	r2, r3
  401498:	4b06      	ldr	r3, [pc, #24]	; (4014b4 <udc_req_std_ep_get_status+0x3c>)
  40149a:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  40149c:	4805      	ldr	r0, [pc, #20]	; (4014b4 <udc_req_std_ep_get_status+0x3c>)
  40149e:	2102      	movs	r1, #2
  4014a0:	4b05      	ldr	r3, [pc, #20]	; (4014b8 <udc_req_std_ep_get_status+0x40>)
  4014a2:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  4014a4:	2301      	movs	r3, #1
}
  4014a6:	4618      	mov	r0, r3
  4014a8:	bd80      	pop	{r7, pc}
  4014aa:	bf00      	nop
  4014ac:	20008954 	.word	0x20008954
  4014b0:	00402509 	.word	0x00402509
  4014b4:	20000dbc 	.word	0x20000dbc
  4014b8:	00402319 	.word	0x00402319

004014bc <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
  4014bc:	b480      	push	{r7}
  4014be:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  4014c0:	4b0c      	ldr	r3, [pc, #48]	; (4014f4 <udc_req_std_dev_clear_feature+0x38>)
  4014c2:	88db      	ldrh	r3, [r3, #6]
  4014c4:	2b00      	cmp	r3, #0
  4014c6:	d001      	beq.n	4014cc <udc_req_std_dev_clear_feature+0x10>
		return false;
  4014c8:	2300      	movs	r3, #0
  4014ca:	e00d      	b.n	4014e8 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  4014cc:	4b09      	ldr	r3, [pc, #36]	; (4014f4 <udc_req_std_dev_clear_feature+0x38>)
  4014ce:	885b      	ldrh	r3, [r3, #2]
  4014d0:	2b01      	cmp	r3, #1
  4014d2:	d108      	bne.n	4014e6 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  4014d4:	4b08      	ldr	r3, [pc, #32]	; (4014f8 <udc_req_std_dev_clear_feature+0x3c>)
  4014d6:	881b      	ldrh	r3, [r3, #0]
  4014d8:	f023 0302 	bic.w	r3, r3, #2
  4014dc:	b29a      	uxth	r2, r3
  4014de:	4b06      	ldr	r3, [pc, #24]	; (4014f8 <udc_req_std_dev_clear_feature+0x3c>)
  4014e0:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  4014e2:	2301      	movs	r3, #1
  4014e4:	e000      	b.n	4014e8 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
  4014e6:	2300      	movs	r3, #0
}
  4014e8:	4618      	mov	r0, r3
  4014ea:	46bd      	mov	sp, r7
  4014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014f0:	4770      	bx	lr
  4014f2:	bf00      	nop
  4014f4:	20008954 	.word	0x20008954
  4014f8:	20000da8 	.word	0x20000da8

004014fc <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
  4014fc:	b580      	push	{r7, lr}
  4014fe:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401500:	4b0a      	ldr	r3, [pc, #40]	; (40152c <udc_req_std_ep_clear_feature+0x30>)
  401502:	88db      	ldrh	r3, [r3, #6]
  401504:	2b00      	cmp	r3, #0
  401506:	d001      	beq.n	40150c <udc_req_std_ep_clear_feature+0x10>
		return false;
  401508:	2300      	movs	r3, #0
  40150a:	e00c      	b.n	401526 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  40150c:	4b07      	ldr	r3, [pc, #28]	; (40152c <udc_req_std_ep_clear_feature+0x30>)
  40150e:	885b      	ldrh	r3, [r3, #2]
  401510:	2b00      	cmp	r3, #0
  401512:	d107      	bne.n	401524 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401514:	4b05      	ldr	r3, [pc, #20]	; (40152c <udc_req_std_ep_clear_feature+0x30>)
  401516:	889b      	ldrh	r3, [r3, #4]
  401518:	b2db      	uxtb	r3, r3
  40151a:	4618      	mov	r0, r3
  40151c:	4b04      	ldr	r3, [pc, #16]	; (401530 <udc_req_std_ep_clear_feature+0x34>)
  40151e:	4798      	blx	r3
  401520:	4603      	mov	r3, r0
  401522:	e000      	b.n	401526 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
  401524:	2300      	movs	r3, #0
}
  401526:	4618      	mov	r0, r3
  401528:	bd80      	pop	{r7, pc}
  40152a:	bf00      	nop
  40152c:	20008954 	.word	0x20008954
  401530:	00402671 	.word	0x00402671

00401534 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
  401534:	b480      	push	{r7}
  401536:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401538:	4b09      	ldr	r3, [pc, #36]	; (401560 <udc_req_std_dev_set_feature+0x2c>)
  40153a:	88db      	ldrh	r3, [r3, #6]
  40153c:	2b00      	cmp	r3, #0
  40153e:	d001      	beq.n	401544 <udc_req_std_dev_set_feature+0x10>
		return false;
  401540:	2300      	movs	r3, #0
  401542:	e007      	b.n	401554 <udc_req_std_dev_set_feature+0x20>
	}

	switch (udd_g_ctrlreq.req.wValue) {
  401544:	4b06      	ldr	r3, [pc, #24]	; (401560 <udc_req_std_dev_set_feature+0x2c>)
  401546:	885b      	ldrh	r3, [r3, #2]
  401548:	2b01      	cmp	r3, #1
  40154a:	d002      	beq.n	401552 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
  40154c:	bf00      	nop
	}
	return false;
  40154e:	2300      	movs	r3, #0
  401550:	e000      	b.n	401554 <udc_req_std_dev_set_feature+0x20>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
  401552:	2300      	movs	r3, #0
#endif
	default:
		break;
	}
	return false;
}
  401554:	4618      	mov	r0, r3
  401556:	46bd      	mov	sp, r7
  401558:	f85d 7b04 	ldr.w	r7, [sp], #4
  40155c:	4770      	bx	lr
  40155e:	bf00      	nop
  401560:	20008954 	.word	0x20008954

00401564 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
  401564:	b580      	push	{r7, lr}
  401566:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401568:	4b0d      	ldr	r3, [pc, #52]	; (4015a0 <udc_req_std_ep_set_feature+0x3c>)
  40156a:	88db      	ldrh	r3, [r3, #6]
  40156c:	2b00      	cmp	r3, #0
  40156e:	d001      	beq.n	401574 <udc_req_std_ep_set_feature+0x10>
		return false;
  401570:	2300      	movs	r3, #0
  401572:	e012      	b.n	40159a <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401574:	4b0a      	ldr	r3, [pc, #40]	; (4015a0 <udc_req_std_ep_set_feature+0x3c>)
  401576:	885b      	ldrh	r3, [r3, #2]
  401578:	2b00      	cmp	r3, #0
  40157a:	d10d      	bne.n	401598 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  40157c:	4b08      	ldr	r3, [pc, #32]	; (4015a0 <udc_req_std_ep_set_feature+0x3c>)
  40157e:	889b      	ldrh	r3, [r3, #4]
  401580:	b2db      	uxtb	r3, r3
  401582:	4618      	mov	r0, r3
  401584:	4b07      	ldr	r3, [pc, #28]	; (4015a4 <udc_req_std_ep_set_feature+0x40>)
  401586:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401588:	4b05      	ldr	r3, [pc, #20]	; (4015a0 <udc_req_std_ep_set_feature+0x3c>)
  40158a:	889b      	ldrh	r3, [r3, #4]
  40158c:	b2db      	uxtb	r3, r3
  40158e:	4618      	mov	r0, r3
  401590:	4b05      	ldr	r3, [pc, #20]	; (4015a8 <udc_req_std_ep_set_feature+0x44>)
  401592:	4798      	blx	r3
  401594:	4603      	mov	r3, r0
  401596:	e000      	b.n	40159a <udc_req_std_ep_set_feature+0x36>
	}
	return false;
  401598:	2300      	movs	r3, #0
}
  40159a:	4618      	mov	r0, r3
  40159c:	bd80      	pop	{r7, pc}
  40159e:	bf00      	nop
  4015a0:	20008954 	.word	0x20008954
  4015a4:	004028e1 	.word	0x004028e1
  4015a8:	0040257d 	.word	0x0040257d

004015ac <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  4015ac:	b580      	push	{r7, lr}
  4015ae:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  4015b0:	4b04      	ldr	r3, [pc, #16]	; (4015c4 <udc_valid_address+0x18>)
  4015b2:	885b      	ldrh	r3, [r3, #2]
  4015b4:	b2db      	uxtb	r3, r3
  4015b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4015ba:	b2db      	uxtb	r3, r3
  4015bc:	4618      	mov	r0, r3
  4015be:	4b02      	ldr	r3, [pc, #8]	; (4015c8 <udc_valid_address+0x1c>)
  4015c0:	4798      	blx	r3
}
  4015c2:	bd80      	pop	{r7, pc}
  4015c4:	20008954 	.word	0x20008954
  4015c8:	00402255 	.word	0x00402255

004015cc <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
  4015cc:	b480      	push	{r7}
  4015ce:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  4015d0:	4b07      	ldr	r3, [pc, #28]	; (4015f0 <udc_req_std_dev_set_address+0x24>)
  4015d2:	88db      	ldrh	r3, [r3, #6]
  4015d4:	2b00      	cmp	r3, #0
  4015d6:	d001      	beq.n	4015dc <udc_req_std_dev_set_address+0x10>
		return false;
  4015d8:	2300      	movs	r3, #0
  4015da:	e003      	b.n	4015e4 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  4015dc:	4b04      	ldr	r3, [pc, #16]	; (4015f0 <udc_req_std_dev_set_address+0x24>)
  4015de:	4a05      	ldr	r2, [pc, #20]	; (4015f4 <udc_req_std_dev_set_address+0x28>)
  4015e0:	611a      	str	r2, [r3, #16]
	return true;
  4015e2:	2301      	movs	r3, #1
}
  4015e4:	4618      	mov	r0, r3
  4015e6:	46bd      	mov	sp, r7
  4015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015ec:	4770      	bx	lr
  4015ee:	bf00      	nop
  4015f0:	20008954 	.word	0x20008954
  4015f4:	004015ad 	.word	0x004015ad

004015f8 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
  4015f8:	b580      	push	{r7, lr}
  4015fa:	b084      	sub	sp, #16
  4015fc:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
  4015fe:	2300      	movs	r3, #0
  401600:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  401602:	4b21      	ldr	r3, [pc, #132]	; (401688 <udc_req_std_dev_get_str_desc+0x90>)
  401604:	885b      	ldrh	r3, [r3, #2]
  401606:	b2db      	uxtb	r3, r3
  401608:	2b01      	cmp	r3, #1
  40160a:	d008      	beq.n	40161e <udc_req_std_dev_get_str_desc+0x26>
  40160c:	2b02      	cmp	r3, #2
  40160e:	d00b      	beq.n	401628 <udc_req_std_dev_get_str_desc+0x30>
  401610:	2b00      	cmp	r3, #0
  401612:	d10e      	bne.n	401632 <udc_req_std_dev_get_str_desc+0x3a>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  401614:	481d      	ldr	r0, [pc, #116]	; (40168c <udc_req_std_dev_get_str_desc+0x94>)
  401616:	2104      	movs	r1, #4
  401618:	4b1d      	ldr	r3, [pc, #116]	; (401690 <udc_req_std_dev_get_str_desc+0x98>)
  40161a:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
  40161c:	e00b      	b.n	401636 <udc_req_std_dev_get_str_desc+0x3e>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  40161e:	2307      	movs	r3, #7
  401620:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
  401622:	4b1c      	ldr	r3, [pc, #112]	; (401694 <udc_req_std_dev_get_str_desc+0x9c>)
  401624:	60bb      	str	r3, [r7, #8]
		break;
  401626:	e006      	b.n	401636 <udc_req_std_dev_get_str_desc+0x3e>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  401628:	230a      	movs	r3, #10
  40162a:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
  40162c:	4b1a      	ldr	r3, [pc, #104]	; (401698 <udc_req_std_dev_get_str_desc+0xa0>)
  40162e:	60bb      	str	r3, [r7, #8]
		break;
  401630:	e001      	b.n	401636 <udc_req_std_dev_get_str_desc+0x3e>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
  401632:	2300      	movs	r3, #0
  401634:	e023      	b.n	40167e <udc_req_std_dev_get_str_desc+0x86>
	}

	if (str_length) {
  401636:	79fb      	ldrb	r3, [r7, #7]
  401638:	2b00      	cmp	r3, #0
  40163a:	d01f      	beq.n	40167c <udc_req_std_dev_get_str_desc+0x84>
		for(i = 0; i < str_length; i++) {
  40163c:	2300      	movs	r3, #0
  40163e:	73fb      	strb	r3, [r7, #15]
  401640:	e00b      	b.n	40165a <udc_req_std_dev_get_str_desc+0x62>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  401642:	7bfb      	ldrb	r3, [r7, #15]
  401644:	7bfa      	ldrb	r2, [r7, #15]
  401646:	68b9      	ldr	r1, [r7, #8]
  401648:	440a      	add	r2, r1
  40164a:	7812      	ldrb	r2, [r2, #0]
  40164c:	4913      	ldr	r1, [pc, #76]	; (40169c <udc_req_std_dev_get_str_desc+0xa4>)
  40164e:	005b      	lsls	r3, r3, #1
  401650:	440b      	add	r3, r1
  401652:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
  401654:	7bfb      	ldrb	r3, [r7, #15]
  401656:	3301      	adds	r3, #1
  401658:	73fb      	strb	r3, [r7, #15]
  40165a:	7bfa      	ldrb	r2, [r7, #15]
  40165c:	79fb      	ldrb	r3, [r7, #7]
  40165e:	429a      	cmp	r2, r3
  401660:	d3ef      	bcc.n	401642 <udc_req_std_dev_get_str_desc+0x4a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  401662:	79fb      	ldrb	r3, [r7, #7]
  401664:	3301      	adds	r3, #1
  401666:	b2db      	uxtb	r3, r3
  401668:	005b      	lsls	r3, r3, #1
  40166a:	b2da      	uxtb	r2, r3
  40166c:	4b0b      	ldr	r3, [pc, #44]	; (40169c <udc_req_std_dev_get_str_desc+0xa4>)
  40166e:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
  401670:	4b0a      	ldr	r3, [pc, #40]	; (40169c <udc_req_std_dev_get_str_desc+0xa4>)
  401672:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
  401674:	4809      	ldr	r0, [pc, #36]	; (40169c <udc_req_std_dev_get_str_desc+0xa4>)
  401676:	4619      	mov	r1, r3
  401678:	4b05      	ldr	r3, [pc, #20]	; (401690 <udc_req_std_dev_get_str_desc+0x98>)
  40167a:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
  40167c:	2301      	movs	r3, #1
}
  40167e:	4618      	mov	r0, r3
  401680:	3710      	adds	r7, #16
  401682:	46bd      	mov	sp, r7
  401684:	bd80      	pop	{r7, pc}
  401686:	bf00      	nop
  401688:	20008954 	.word	0x20008954
  40168c:	20000138 	.word	0x20000138
  401690:	00402319 	.word	0x00402319
  401694:	2000013c 	.word	0x2000013c
  401698:	20000144 	.word	0x20000144
  40169c:	20000150 	.word	0x20000150

004016a0 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
  4016a0:	b580      	push	{r7, lr}
  4016a2:	b082      	sub	sp, #8
  4016a4:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4016a6:	4b41      	ldr	r3, [pc, #260]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  4016a8:	885b      	ldrh	r3, [r3, #2]
  4016aa:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4016ac:	4b3f      	ldr	r3, [pc, #252]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  4016ae:	885b      	ldrh	r3, [r3, #2]
  4016b0:	0a1b      	lsrs	r3, r3, #8
  4016b2:	b29b      	uxth	r3, r3
  4016b4:	b2db      	uxtb	r3, r3
  4016b6:	3b01      	subs	r3, #1
  4016b8:	2b0e      	cmp	r3, #14
  4016ba:	d866      	bhi.n	40178a <udc_req_std_dev_get_descriptor+0xea>
  4016bc:	a201      	add	r2, pc, #4	; (adr r2, 4016c4 <udc_req_std_dev_get_descriptor+0x24>)
  4016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4016c2:	bf00      	nop
  4016c4:	00401701 	.word	0x00401701
  4016c8:	00401715 	.word	0x00401715
  4016cc:	00401775 	.word	0x00401775
  4016d0:	0040178b 	.word	0x0040178b
  4016d4:	0040178b 	.word	0x0040178b
  4016d8:	0040178b 	.word	0x0040178b
  4016dc:	0040178b 	.word	0x0040178b
  4016e0:	0040178b 	.word	0x0040178b
  4016e4:	0040178b 	.word	0x0040178b
  4016e8:	0040178b 	.word	0x0040178b
  4016ec:	0040178b 	.word	0x0040178b
  4016f0:	0040178b 	.word	0x0040178b
  4016f4:	0040178b 	.word	0x0040178b
  4016f8:	0040178b 	.word	0x0040178b
  4016fc:	00401753 	.word	0x00401753
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
  401700:	4b2b      	ldr	r3, [pc, #172]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401702:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
  401704:	4b2a      	ldr	r3, [pc, #168]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401706:	681b      	ldr	r3, [r3, #0]
  401708:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  40170a:	4610      	mov	r0, r2
  40170c:	4619      	mov	r1, r3
  40170e:	4b29      	ldr	r3, [pc, #164]	; (4017b4 <udc_req_std_dev_get_descriptor+0x114>)
  401710:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
  401712:	e03c      	b.n	40178e <udc_req_std_dev_get_descriptor+0xee>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  401714:	4b26      	ldr	r3, [pc, #152]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401716:	681b      	ldr	r3, [r3, #0]
  401718:	7c5b      	ldrb	r3, [r3, #17]
  40171a:	79fa      	ldrb	r2, [r7, #7]
  40171c:	429a      	cmp	r2, r3
  40171e:	d301      	bcc.n	401724 <udc_req_std_dev_get_descriptor+0x84>
					bNumConfigurations) {
				return false;
  401720:	2300      	movs	r3, #0
  401722:	e03f      	b.n	4017a4 <udc_req_std_dev_get_descriptor+0x104>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  401724:	4b22      	ldr	r3, [pc, #136]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401726:	685a      	ldr	r2, [r3, #4]
  401728:	79fb      	ldrb	r3, [r7, #7]
  40172a:	00db      	lsls	r3, r3, #3
  40172c:	4413      	add	r3, r2
  40172e:	681a      	ldr	r2, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  401730:	4b1f      	ldr	r3, [pc, #124]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401732:	6859      	ldr	r1, [r3, #4]
  401734:	79fb      	ldrb	r3, [r7, #7]
  401736:	00db      	lsls	r3, r3, #3
  401738:	440b      	add	r3, r1
  40173a:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  40173c:	885b      	ldrh	r3, [r3, #2]
  40173e:	b29b      	uxth	r3, r3
  401740:	4610      	mov	r0, r2
  401742:	4619      	mov	r1, r3
  401744:	4b1b      	ldr	r3, [pc, #108]	; (4017b4 <udc_req_std_dev_get_descriptor+0x114>)
  401746:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  401748:	4b18      	ldr	r3, [pc, #96]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  40174a:	689b      	ldr	r3, [r3, #8]
  40174c:	2202      	movs	r2, #2
  40174e:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
  401750:	e01d      	b.n	40178e <udc_req_std_dev_get_descriptor+0xee>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  401752:	4b17      	ldr	r3, [pc, #92]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401754:	689b      	ldr	r3, [r3, #8]
  401756:	2b00      	cmp	r3, #0
  401758:	d101      	bne.n	40175e <udc_req_std_dev_get_descriptor+0xbe>
			return false;
  40175a:	2300      	movs	r3, #0
  40175c:	e022      	b.n	4017a4 <udc_req_std_dev_get_descriptor+0x104>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  40175e:	4b14      	ldr	r3, [pc, #80]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401760:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
  401762:	4b13      	ldr	r3, [pc, #76]	; (4017b0 <udc_req_std_dev_get_descriptor+0x110>)
  401764:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  401766:	885b      	ldrh	r3, [r3, #2]
  401768:	b29b      	uxth	r3, r3
  40176a:	4610      	mov	r0, r2
  40176c:	4619      	mov	r1, r3
  40176e:	4b11      	ldr	r3, [pc, #68]	; (4017b4 <udc_req_std_dev_get_descriptor+0x114>)
  401770:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
  401772:	e00c      	b.n	40178e <udc_req_std_dev_get_descriptor+0xee>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
  401774:	4b10      	ldr	r3, [pc, #64]	; (4017b8 <udc_req_std_dev_get_descriptor+0x118>)
  401776:	4798      	blx	r3
  401778:	4603      	mov	r3, r0
  40177a:	f083 0301 	eor.w	r3, r3, #1
  40177e:	b2db      	uxtb	r3, r3
  401780:	2b00      	cmp	r3, #0
  401782:	d001      	beq.n	401788 <udc_req_std_dev_get_descriptor+0xe8>
			return false;
  401784:	2300      	movs	r3, #0
  401786:	e00d      	b.n	4017a4 <udc_req_std_dev_get_descriptor+0x104>
		}
		break;
  401788:	e001      	b.n	40178e <udc_req_std_dev_get_descriptor+0xee>

	default:
		// Unknown descriptor requested
		return false;
  40178a:	2300      	movs	r3, #0
  40178c:	e00a      	b.n	4017a4 <udc_req_std_dev_get_descriptor+0x104>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  40178e:	4b07      	ldr	r3, [pc, #28]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  401790:	88da      	ldrh	r2, [r3, #6]
  401792:	4b06      	ldr	r3, [pc, #24]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  401794:	899b      	ldrh	r3, [r3, #12]
  401796:	429a      	cmp	r2, r3
  401798:	d203      	bcs.n	4017a2 <udc_req_std_dev_get_descriptor+0x102>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  40179a:	4b04      	ldr	r3, [pc, #16]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  40179c:	88da      	ldrh	r2, [r3, #6]
  40179e:	4b03      	ldr	r3, [pc, #12]	; (4017ac <udc_req_std_dev_get_descriptor+0x10c>)
  4017a0:	819a      	strh	r2, [r3, #12]
	}
	return true;
  4017a2:	2301      	movs	r3, #1
}
  4017a4:	4618      	mov	r0, r3
  4017a6:	3708      	adds	r7, #8
  4017a8:	46bd      	mov	sp, r7
  4017aa:	bd80      	pop	{r7, pc}
  4017ac:	20008954 	.word	0x20008954
  4017b0:	2000034c 	.word	0x2000034c
  4017b4:	00402319 	.word	0x00402319
  4017b8:	004015f9 	.word	0x004015f9

004017bc <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
  4017bc:	b580      	push	{r7, lr}
  4017be:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
  4017c0:	4b06      	ldr	r3, [pc, #24]	; (4017dc <udc_req_std_dev_get_configuration+0x20>)
  4017c2:	88db      	ldrh	r3, [r3, #6]
  4017c4:	2b01      	cmp	r3, #1
  4017c6:	d001      	beq.n	4017cc <udc_req_std_dev_get_configuration+0x10>
		return false;
  4017c8:	2300      	movs	r3, #0
  4017ca:	e004      	b.n	4017d6 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  4017cc:	4804      	ldr	r0, [pc, #16]	; (4017e0 <udc_req_std_dev_get_configuration+0x24>)
  4017ce:	2101      	movs	r1, #1
  4017d0:	4b04      	ldr	r3, [pc, #16]	; (4017e4 <udc_req_std_dev_get_configuration+0x28>)
  4017d2:	4798      	blx	r3
	return true;
  4017d4:	2301      	movs	r3, #1
}
  4017d6:	4618      	mov	r0, r3
  4017d8:	bd80      	pop	{r7, pc}
  4017da:	bf00      	nop
  4017dc:	20008954 	.word	0x20008954
  4017e0:	20000db0 	.word	0x20000db0
  4017e4:	00402319 	.word	0x00402319

004017e8 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
  4017e8:	b580      	push	{r7, lr}
  4017ea:	b082      	sub	sp, #8
  4017ec:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  4017ee:	4b27      	ldr	r3, [pc, #156]	; (40188c <udc_req_std_dev_set_configuration+0xa4>)
  4017f0:	88db      	ldrh	r3, [r3, #6]
  4017f2:	2b00      	cmp	r3, #0
  4017f4:	d001      	beq.n	4017fa <udc_req_std_dev_set_configuration+0x12>
		return false;
  4017f6:	2300      	movs	r3, #0
  4017f8:	e043      	b.n	401882 <udc_req_std_dev_set_configuration+0x9a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  4017fa:	4b25      	ldr	r3, [pc, #148]	; (401890 <udc_req_std_dev_set_configuration+0xa8>)
  4017fc:	4798      	blx	r3
  4017fe:	4603      	mov	r3, r0
  401800:	2b00      	cmp	r3, #0
  401802:	d101      	bne.n	401808 <udc_req_std_dev_set_configuration+0x20>
		return false;
  401804:	2300      	movs	r3, #0
  401806:	e03c      	b.n	401882 <udc_req_std_dev_set_configuration+0x9a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401808:	4b20      	ldr	r3, [pc, #128]	; (40188c <udc_req_std_dev_set_configuration+0xa4>)
  40180a:	885b      	ldrh	r3, [r3, #2]
  40180c:	b2da      	uxtb	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
  40180e:	4b21      	ldr	r3, [pc, #132]	; (401894 <udc_req_std_dev_set_configuration+0xac>)
  401810:	681b      	ldr	r3, [r3, #0]
  401812:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401814:	429a      	cmp	r2, r3
  401816:	dd01      	ble.n	40181c <udc_req_std_dev_set_configuration+0x34>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
  401818:	2300      	movs	r3, #0
  40181a:	e032      	b.n	401882 <udc_req_std_dev_set_configuration+0x9a>
		}
	}

	// Reset current configuration
	udc_reset();
  40181c:	4b1e      	ldr	r3, [pc, #120]	; (401898 <udc_req_std_dev_set_configuration+0xb0>)
  40181e:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  401820:	4b1a      	ldr	r3, [pc, #104]	; (40188c <udc_req_std_dev_set_configuration+0xa4>)
  401822:	885b      	ldrh	r3, [r3, #2]
  401824:	b2da      	uxtb	r2, r3
  401826:	4b1d      	ldr	r3, [pc, #116]	; (40189c <udc_req_std_dev_set_configuration+0xb4>)
  401828:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  40182a:	4b1c      	ldr	r3, [pc, #112]	; (40189c <udc_req_std_dev_set_configuration+0xb4>)
  40182c:	781b      	ldrb	r3, [r3, #0]
  40182e:	2b00      	cmp	r3, #0
  401830:	d101      	bne.n	401836 <udc_req_std_dev_set_configuration+0x4e>
		return true; // Default empty configuration requested
  401832:	2301      	movs	r3, #1
  401834:	e025      	b.n	401882 <udc_req_std_dev_set_configuration+0x9a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  401836:	4b17      	ldr	r3, [pc, #92]	; (401894 <udc_req_std_dev_set_configuration+0xac>)
  401838:	685a      	ldr	r2, [r3, #4]
  40183a:	4b18      	ldr	r3, [pc, #96]	; (40189c <udc_req_std_dev_set_configuration+0xb4>)
  40183c:	781b      	ldrb	r3, [r3, #0]
  40183e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  401842:	3b01      	subs	r3, #1
  401844:	00db      	lsls	r3, r3, #3
  401846:	441a      	add	r2, r3
  401848:	4b15      	ldr	r3, [pc, #84]	; (4018a0 <udc_req_std_dev_set_configuration+0xb8>)
  40184a:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40184c:	2300      	movs	r3, #0
  40184e:	71fb      	strb	r3, [r7, #7]
  401850:	e00f      	b.n	401872 <udc_req_std_dev_set_configuration+0x8a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  401852:	79fb      	ldrb	r3, [r7, #7]
  401854:	4618      	mov	r0, r3
  401856:	2100      	movs	r1, #0
  401858:	4b12      	ldr	r3, [pc, #72]	; (4018a4 <udc_req_std_dev_set_configuration+0xbc>)
  40185a:	4798      	blx	r3
  40185c:	4603      	mov	r3, r0
  40185e:	f083 0301 	eor.w	r3, r3, #1
  401862:	b2db      	uxtb	r3, r3
  401864:	2b00      	cmp	r3, #0
  401866:	d001      	beq.n	40186c <udc_req_std_dev_set_configuration+0x84>
			return false;
  401868:	2300      	movs	r3, #0
  40186a:	e00a      	b.n	401882 <udc_req_std_dev_set_configuration+0x9a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  40186c:	79fb      	ldrb	r3, [r7, #7]
  40186e:	3301      	adds	r3, #1
  401870:	71fb      	strb	r3, [r7, #7]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401872:	4b0b      	ldr	r3, [pc, #44]	; (4018a0 <udc_req_std_dev_set_configuration+0xb8>)
  401874:	681b      	ldr	r3, [r3, #0]
  401876:	681b      	ldr	r3, [r3, #0]
  401878:	791b      	ldrb	r3, [r3, #4]
  40187a:	79fa      	ldrb	r2, [r7, #7]
  40187c:	429a      	cmp	r2, r3
  40187e:	d3e8      	bcc.n	401852 <udc_req_std_dev_set_configuration+0x6a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
  401880:	2301      	movs	r3, #1
}
  401882:	4618      	mov	r0, r3
  401884:	3708      	adds	r7, #8
  401886:	46bd      	mov	sp, r7
  401888:	bd80      	pop	{r7, pc}
  40188a:	bf00      	nop
  40188c:	20008954 	.word	0x20008954
  401890:	004022b9 	.word	0x004022b9
  401894:	2000034c 	.word	0x2000034c
  401898:	0040139d 	.word	0x0040139d
  40189c:	20000db0 	.word	0x20000db0
  4018a0:	20000db4 	.word	0x20000db4
  4018a4:	004012ed 	.word	0x004012ed

004018a8 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
  4018a8:	b580      	push	{r7, lr}
  4018aa:	b082      	sub	sp, #8
  4018ac:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  4018ae:	4b1e      	ldr	r3, [pc, #120]	; (401928 <udc_req_std_iface_get_setting+0x80>)
  4018b0:	88db      	ldrh	r3, [r3, #6]
  4018b2:	2b01      	cmp	r3, #1
  4018b4:	d001      	beq.n	4018ba <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
  4018b6:	2300      	movs	r3, #0
  4018b8:	e032      	b.n	401920 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
  4018ba:	4b1c      	ldr	r3, [pc, #112]	; (40192c <udc_req_std_iface_get_setting+0x84>)
  4018bc:	781b      	ldrb	r3, [r3, #0]
  4018be:	2b00      	cmp	r3, #0
  4018c0:	d101      	bne.n	4018c6 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
  4018c2:	2300      	movs	r3, #0
  4018c4:	e02c      	b.n	401920 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4018c6:	4b18      	ldr	r3, [pc, #96]	; (401928 <udc_req_std_iface_get_setting+0x80>)
  4018c8:	889b      	ldrh	r3, [r3, #4]
  4018ca:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4018cc:	4b18      	ldr	r3, [pc, #96]	; (401930 <udc_req_std_iface_get_setting+0x88>)
  4018ce:	681b      	ldr	r3, [r3, #0]
  4018d0:	681b      	ldr	r3, [r3, #0]
  4018d2:	791b      	ldrb	r3, [r3, #4]
  4018d4:	79fa      	ldrb	r2, [r7, #7]
  4018d6:	429a      	cmp	r2, r3
  4018d8:	d301      	bcc.n	4018de <udc_req_std_iface_get_setting+0x36>
		return false;
  4018da:	2300      	movs	r3, #0
  4018dc:	e020      	b.n	401920 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  4018de:	79fb      	ldrb	r3, [r7, #7]
  4018e0:	4618      	mov	r0, r3
  4018e2:	2100      	movs	r1, #0
  4018e4:	4b13      	ldr	r3, [pc, #76]	; (401934 <udc_req_std_iface_get_setting+0x8c>)
  4018e6:	4798      	blx	r3
  4018e8:	4603      	mov	r3, r0
  4018ea:	f083 0301 	eor.w	r3, r3, #1
  4018ee:	b2db      	uxtb	r3, r3
  4018f0:	2b00      	cmp	r3, #0
  4018f2:	d001      	beq.n	4018f8 <udc_req_std_iface_get_setting+0x50>
		return false;
  4018f4:	2300      	movs	r3, #0
  4018f6:	e013      	b.n	401920 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4018f8:	4b0d      	ldr	r3, [pc, #52]	; (401930 <udc_req_std_iface_get_setting+0x88>)
  4018fa:	681b      	ldr	r3, [r3, #0]
  4018fc:	685a      	ldr	r2, [r3, #4]
  4018fe:	79fb      	ldrb	r3, [r7, #7]
  401900:	009b      	lsls	r3, r3, #2
  401902:	4413      	add	r3, r2
  401904:	681b      	ldr	r3, [r3, #0]
  401906:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
  401908:	683b      	ldr	r3, [r7, #0]
  40190a:	68db      	ldr	r3, [r3, #12]
  40190c:	4798      	blx	r3
  40190e:	4603      	mov	r3, r0
  401910:	461a      	mov	r2, r3
  401912:	4b09      	ldr	r3, [pc, #36]	; (401938 <udc_req_std_iface_get_setting+0x90>)
  401914:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  401916:	4808      	ldr	r0, [pc, #32]	; (401938 <udc_req_std_iface_get_setting+0x90>)
  401918:	2101      	movs	r1, #1
  40191a:	4b08      	ldr	r3, [pc, #32]	; (40193c <udc_req_std_iface_get_setting+0x94>)
  40191c:	4798      	blx	r3
	return true;
  40191e:	2301      	movs	r3, #1
}
  401920:	4618      	mov	r0, r3
  401922:	3708      	adds	r7, #8
  401924:	46bd      	mov	sp, r7
  401926:	bd80      	pop	{r7, pc}
  401928:	20008954 	.word	0x20008954
  40192c:	20000db0 	.word	0x20000db0
  401930:	20000db4 	.word	0x20000db4
  401934:	004011b5 	.word	0x004011b5
  401938:	20000dac 	.word	0x20000dac
  40193c:	00402319 	.word	0x00402319

00401940 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
  401940:	b580      	push	{r7, lr}
  401942:	b082      	sub	sp, #8
  401944:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  401946:	4b14      	ldr	r3, [pc, #80]	; (401998 <udc_req_std_iface_set_setting+0x58>)
  401948:	88db      	ldrh	r3, [r3, #6]
  40194a:	2b00      	cmp	r3, #0
  40194c:	d001      	beq.n	401952 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
  40194e:	2300      	movs	r3, #0
  401950:	e01e      	b.n	401990 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
  401952:	4b12      	ldr	r3, [pc, #72]	; (40199c <udc_req_std_iface_set_setting+0x5c>)
  401954:	781b      	ldrb	r3, [r3, #0]
  401956:	2b00      	cmp	r3, #0
  401958:	d101      	bne.n	40195e <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
  40195a:	2300      	movs	r3, #0
  40195c:	e018      	b.n	401990 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40195e:	4b0e      	ldr	r3, [pc, #56]	; (401998 <udc_req_std_iface_set_setting+0x58>)
  401960:	889b      	ldrh	r3, [r3, #4]
  401962:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  401964:	4b0c      	ldr	r3, [pc, #48]	; (401998 <udc_req_std_iface_set_setting+0x58>)
  401966:	885b      	ldrh	r3, [r3, #2]
  401968:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  40196a:	79fb      	ldrb	r3, [r7, #7]
  40196c:	4618      	mov	r0, r3
  40196e:	4b0c      	ldr	r3, [pc, #48]	; (4019a0 <udc_req_std_iface_set_setting+0x60>)
  401970:	4798      	blx	r3
  401972:	4603      	mov	r3, r0
  401974:	f083 0301 	eor.w	r3, r3, #1
  401978:	b2db      	uxtb	r3, r3
  40197a:	2b00      	cmp	r3, #0
  40197c:	d001      	beq.n	401982 <udc_req_std_iface_set_setting+0x42>
		return false;
  40197e:	2300      	movs	r3, #0
  401980:	e006      	b.n	401990 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  401982:	79fa      	ldrb	r2, [r7, #7]
  401984:	79bb      	ldrb	r3, [r7, #6]
  401986:	4610      	mov	r0, r2
  401988:	4619      	mov	r1, r3
  40198a:	4b06      	ldr	r3, [pc, #24]	; (4019a4 <udc_req_std_iface_set_setting+0x64>)
  40198c:	4798      	blx	r3
  40198e:	4603      	mov	r3, r0
}
  401990:	4618      	mov	r0, r3
  401992:	3708      	adds	r7, #8
  401994:	46bd      	mov	sp, r7
  401996:	bd80      	pop	{r7, pc}
  401998:	20008954 	.word	0x20008954
  40199c:	20000db0 	.word	0x20000db0
  4019a0:	0040124d 	.word	0x0040124d
  4019a4:	004012ed 	.word	0x004012ed

004019a8 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
  4019a8:	b580      	push	{r7, lr}
  4019aa:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
  4019ac:	4b4e      	ldr	r3, [pc, #312]	; (401ae8 <udc_reqstd+0x140>)
  4019ae:	781b      	ldrb	r3, [r3, #0]
  4019b0:	b2db      	uxtb	r3, r3
  4019b2:	b25b      	sxtb	r3, r3
  4019b4:	2b00      	cmp	r3, #0
  4019b6:	da3f      	bge.n	401a38 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
  4019b8:	4b4b      	ldr	r3, [pc, #300]	; (401ae8 <udc_reqstd+0x140>)
  4019ba:	88db      	ldrh	r3, [r3, #6]
  4019bc:	2b00      	cmp	r3, #0
  4019be:	d101      	bne.n	4019c4 <udc_reqstd+0x1c>
			return false; // Error for USB host
  4019c0:	2300      	movs	r3, #0
  4019c2:	e08f      	b.n	401ae4 <udc_reqstd+0x13c>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4019c4:	4b48      	ldr	r3, [pc, #288]	; (401ae8 <udc_reqstd+0x140>)
  4019c6:	781b      	ldrb	r3, [r3, #0]
  4019c8:	f003 031f 	and.w	r3, r3, #31
  4019cc:	2b00      	cmp	r3, #0
  4019ce:	d114      	bne.n	4019fa <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  4019d0:	4b45      	ldr	r3, [pc, #276]	; (401ae8 <udc_reqstd+0x140>)
  4019d2:	785b      	ldrb	r3, [r3, #1]
  4019d4:	2b06      	cmp	r3, #6
  4019d6:	d008      	beq.n	4019ea <udc_reqstd+0x42>
  4019d8:	2b08      	cmp	r3, #8
  4019da:	d00a      	beq.n	4019f2 <udc_reqstd+0x4a>
  4019dc:	2b00      	cmp	r3, #0
  4019de:	d000      	beq.n	4019e2 <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
  4019e0:	e00b      	b.n	4019fa <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
  4019e2:	4b42      	ldr	r3, [pc, #264]	; (401aec <udc_reqstd+0x144>)
  4019e4:	4798      	blx	r3
  4019e6:	4603      	mov	r3, r0
  4019e8:	e07c      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
  4019ea:	4b41      	ldr	r3, [pc, #260]	; (401af0 <udc_reqstd+0x148>)
  4019ec:	4798      	blx	r3
  4019ee:	4603      	mov	r3, r0
  4019f0:	e078      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
  4019f2:	4b40      	ldr	r3, [pc, #256]	; (401af4 <udc_reqstd+0x14c>)
  4019f4:	4798      	blx	r3
  4019f6:	4603      	mov	r3, r0
  4019f8:	e074      	b.n	401ae4 <udc_reqstd+0x13c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4019fa:	4b3b      	ldr	r3, [pc, #236]	; (401ae8 <udc_reqstd+0x140>)
  4019fc:	781b      	ldrb	r3, [r3, #0]
  4019fe:	f003 031f 	and.w	r3, r3, #31
  401a02:	2b01      	cmp	r3, #1
  401a04:	d108      	bne.n	401a18 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  401a06:	4b38      	ldr	r3, [pc, #224]	; (401ae8 <udc_reqstd+0x140>)
  401a08:	785b      	ldrb	r3, [r3, #1]
  401a0a:	2b0a      	cmp	r3, #10
  401a0c:	d000      	beq.n	401a10 <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
  401a0e:	e003      	b.n	401a18 <udc_reqstd+0x70>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
  401a10:	4b39      	ldr	r3, [pc, #228]	; (401af8 <udc_reqstd+0x150>)
  401a12:	4798      	blx	r3
  401a14:	4603      	mov	r3, r0
  401a16:	e065      	b.n	401ae4 <udc_reqstd+0x13c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  401a18:	4b33      	ldr	r3, [pc, #204]	; (401ae8 <udc_reqstd+0x140>)
  401a1a:	781b      	ldrb	r3, [r3, #0]
  401a1c:	f003 031f 	and.w	r3, r3, #31
  401a20:	2b02      	cmp	r3, #2
  401a22:	d15e      	bne.n	401ae2 <udc_reqstd+0x13a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  401a24:	4b30      	ldr	r3, [pc, #192]	; (401ae8 <udc_reqstd+0x140>)
  401a26:	785b      	ldrb	r3, [r3, #1]
  401a28:	2b00      	cmp	r3, #0
  401a2a:	d001      	beq.n	401a30 <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
  401a2c:	bf00      	nop
  401a2e:	e058      	b.n	401ae2 <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
  401a30:	4b32      	ldr	r3, [pc, #200]	; (401afc <udc_reqstd+0x154>)
  401a32:	4798      	blx	r3
  401a34:	4603      	mov	r3, r0
  401a36:	e055      	b.n	401ae4 <udc_reqstd+0x13c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  401a38:	4b2b      	ldr	r3, [pc, #172]	; (401ae8 <udc_reqstd+0x140>)
  401a3a:	781b      	ldrb	r3, [r3, #0]
  401a3c:	f003 031f 	and.w	r3, r3, #31
  401a40:	2b00      	cmp	r3, #0
  401a42:	d12a      	bne.n	401a9a <udc_reqstd+0xf2>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  401a44:	4b28      	ldr	r3, [pc, #160]	; (401ae8 <udc_reqstd+0x140>)
  401a46:	785b      	ldrb	r3, [r3, #1]
  401a48:	3b01      	subs	r3, #1
  401a4a:	2b08      	cmp	r3, #8
  401a4c:	d824      	bhi.n	401a98 <udc_reqstd+0xf0>
  401a4e:	a201      	add	r2, pc, #4	; (adr r2, 401a54 <udc_reqstd+0xac>)
  401a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a54:	00401a81 	.word	0x00401a81
  401a58:	00401a99 	.word	0x00401a99
  401a5c:	00401a89 	.word	0x00401a89
  401a60:	00401a99 	.word	0x00401a99
  401a64:	00401a79 	.word	0x00401a79
  401a68:	00401a99 	.word	0x00401a99
  401a6c:	00401a99 	.word	0x00401a99
  401a70:	00401a99 	.word	0x00401a99
  401a74:	00401a91 	.word	0x00401a91
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
  401a78:	4b21      	ldr	r3, [pc, #132]	; (401b00 <udc_reqstd+0x158>)
  401a7a:	4798      	blx	r3
  401a7c:	4603      	mov	r3, r0
  401a7e:	e031      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
  401a80:	4b20      	ldr	r3, [pc, #128]	; (401b04 <udc_reqstd+0x15c>)
  401a82:	4798      	blx	r3
  401a84:	4603      	mov	r3, r0
  401a86:	e02d      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  401a88:	4b1f      	ldr	r3, [pc, #124]	; (401b08 <udc_reqstd+0x160>)
  401a8a:	4798      	blx	r3
  401a8c:	4603      	mov	r3, r0
  401a8e:	e029      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
  401a90:	4b1e      	ldr	r3, [pc, #120]	; (401b0c <udc_reqstd+0x164>)
  401a92:	4798      	blx	r3
  401a94:	4603      	mov	r3, r0
  401a96:	e025      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
  401a98:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  401a9a:	4b13      	ldr	r3, [pc, #76]	; (401ae8 <udc_reqstd+0x140>)
  401a9c:	781b      	ldrb	r3, [r3, #0]
  401a9e:	f003 031f 	and.w	r3, r3, #31
  401aa2:	2b01      	cmp	r3, #1
  401aa4:	d108      	bne.n	401ab8 <udc_reqstd+0x110>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  401aa6:	4b10      	ldr	r3, [pc, #64]	; (401ae8 <udc_reqstd+0x140>)
  401aa8:	785b      	ldrb	r3, [r3, #1]
  401aaa:	2b0b      	cmp	r3, #11
  401aac:	d000      	beq.n	401ab0 <udc_reqstd+0x108>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
  401aae:	e003      	b.n	401ab8 <udc_reqstd+0x110>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
  401ab0:	4b17      	ldr	r3, [pc, #92]	; (401b10 <udc_reqstd+0x168>)
  401ab2:	4798      	blx	r3
  401ab4:	4603      	mov	r3, r0
  401ab6:	e015      	b.n	401ae4 <udc_reqstd+0x13c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  401ab8:	4b0b      	ldr	r3, [pc, #44]	; (401ae8 <udc_reqstd+0x140>)
  401aba:	781b      	ldrb	r3, [r3, #0]
  401abc:	f003 031f 	and.w	r3, r3, #31
  401ac0:	2b02      	cmp	r3, #2
  401ac2:	d10e      	bne.n	401ae2 <udc_reqstd+0x13a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  401ac4:	4b08      	ldr	r3, [pc, #32]	; (401ae8 <udc_reqstd+0x140>)
  401ac6:	785b      	ldrb	r3, [r3, #1]
  401ac8:	2b01      	cmp	r3, #1
  401aca:	d002      	beq.n	401ad2 <udc_reqstd+0x12a>
  401acc:	2b03      	cmp	r3, #3
  401ace:	d004      	beq.n	401ada <udc_reqstd+0x132>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
  401ad0:	e007      	b.n	401ae2 <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
  401ad2:	4b10      	ldr	r3, [pc, #64]	; (401b14 <udc_reqstd+0x16c>)
  401ad4:	4798      	blx	r3
  401ad6:	4603      	mov	r3, r0
  401ad8:	e004      	b.n	401ae4 <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
  401ada:	4b0f      	ldr	r3, [pc, #60]	; (401b18 <udc_reqstd+0x170>)
  401adc:	4798      	blx	r3
  401ade:	4603      	mov	r3, r0
  401ae0:	e000      	b.n	401ae4 <udc_reqstd+0x13c>
				break;
			}
		}
#endif
	}
	return false;
  401ae2:	2300      	movs	r3, #0
}
  401ae4:	4618      	mov	r0, r3
  401ae6:	bd80      	pop	{r7, pc}
  401ae8:	20008954 	.word	0x20008954
  401aec:	0040144d 	.word	0x0040144d
  401af0:	004016a1 	.word	0x004016a1
  401af4:	004017bd 	.word	0x004017bd
  401af8:	004018a9 	.word	0x004018a9
  401afc:	00401479 	.word	0x00401479
  401b00:	004015cd 	.word	0x004015cd
  401b04:	004014bd 	.word	0x004014bd
  401b08:	00401535 	.word	0x00401535
  401b0c:	004017e9 	.word	0x004017e9
  401b10:	00401941 	.word	0x00401941
  401b14:	004014fd 	.word	0x004014fd
  401b18:	00401565 	.word	0x00401565

00401b1c <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
  401b1c:	b580      	push	{r7, lr}
  401b1e:	b082      	sub	sp, #8
  401b20:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  401b22:	4b20      	ldr	r3, [pc, #128]	; (401ba4 <udc_req_iface+0x88>)
  401b24:	781b      	ldrb	r3, [r3, #0]
  401b26:	2b00      	cmp	r3, #0
  401b28:	d101      	bne.n	401b2e <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
  401b2a:	2300      	movs	r3, #0
  401b2c:	e035      	b.n	401b9a <udc_req_iface+0x7e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401b2e:	4b1e      	ldr	r3, [pc, #120]	; (401ba8 <udc_req_iface+0x8c>)
  401b30:	889b      	ldrh	r3, [r3, #4]
  401b32:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401b34:	4b1d      	ldr	r3, [pc, #116]	; (401bac <udc_req_iface+0x90>)
  401b36:	681b      	ldr	r3, [r3, #0]
  401b38:	681b      	ldr	r3, [r3, #0]
  401b3a:	791b      	ldrb	r3, [r3, #4]
  401b3c:	79fa      	ldrb	r2, [r7, #7]
  401b3e:	429a      	cmp	r2, r3
  401b40:	d301      	bcc.n	401b46 <udc_req_iface+0x2a>
		return false;
  401b42:	2300      	movs	r3, #0
  401b44:	e029      	b.n	401b9a <udc_req_iface+0x7e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401b46:	79fb      	ldrb	r3, [r7, #7]
  401b48:	4618      	mov	r0, r3
  401b4a:	2100      	movs	r1, #0
  401b4c:	4b18      	ldr	r3, [pc, #96]	; (401bb0 <udc_req_iface+0x94>)
  401b4e:	4798      	blx	r3
  401b50:	4603      	mov	r3, r0
  401b52:	f083 0301 	eor.w	r3, r3, #1
  401b56:	b2db      	uxtb	r3, r3
  401b58:	2b00      	cmp	r3, #0
  401b5a:	d001      	beq.n	401b60 <udc_req_iface+0x44>
		return false;
  401b5c:	2300      	movs	r3, #0
  401b5e:	e01c      	b.n	401b9a <udc_req_iface+0x7e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401b60:	4b12      	ldr	r3, [pc, #72]	; (401bac <udc_req_iface+0x90>)
  401b62:	681b      	ldr	r3, [r3, #0]
  401b64:	685a      	ldr	r2, [r3, #4]
  401b66:	79fb      	ldrb	r3, [r7, #7]
  401b68:	009b      	lsls	r3, r3, #2
  401b6a:	4413      	add	r3, r2
  401b6c:	681b      	ldr	r3, [r3, #0]
  401b6e:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401b70:	683b      	ldr	r3, [r7, #0]
  401b72:	68db      	ldr	r3, [r3, #12]
  401b74:	4798      	blx	r3
  401b76:	4603      	mov	r3, r0
  401b78:	79fa      	ldrb	r2, [r7, #7]
  401b7a:	4610      	mov	r0, r2
  401b7c:	4619      	mov	r1, r3
  401b7e:	4b0c      	ldr	r3, [pc, #48]	; (401bb0 <udc_req_iface+0x94>)
  401b80:	4798      	blx	r3
  401b82:	4603      	mov	r3, r0
  401b84:	f083 0301 	eor.w	r3, r3, #1
  401b88:	b2db      	uxtb	r3, r3
  401b8a:	2b00      	cmp	r3, #0
  401b8c:	d001      	beq.n	401b92 <udc_req_iface+0x76>
		return false;
  401b8e:	2300      	movs	r3, #0
  401b90:	e003      	b.n	401b9a <udc_req_iface+0x7e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  401b92:	683b      	ldr	r3, [r7, #0]
  401b94:	689b      	ldr	r3, [r3, #8]
  401b96:	4798      	blx	r3
  401b98:	4603      	mov	r3, r0
}
  401b9a:	4618      	mov	r0, r3
  401b9c:	3708      	adds	r7, #8
  401b9e:	46bd      	mov	sp, r7
  401ba0:	bd80      	pop	{r7, pc}
  401ba2:	bf00      	nop
  401ba4:	20000db0 	.word	0x20000db0
  401ba8:	20008954 	.word	0x20008954
  401bac:	20000db4 	.word	0x20000db4
  401bb0:	004011b5 	.word	0x004011b5

00401bb4 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
  401bb4:	b580      	push	{r7, lr}
  401bb6:	b082      	sub	sp, #8
  401bb8:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  401bba:	4b1e      	ldr	r3, [pc, #120]	; (401c34 <udc_req_ep+0x80>)
  401bbc:	781b      	ldrb	r3, [r3, #0]
  401bbe:	2b00      	cmp	r3, #0
  401bc0:	d101      	bne.n	401bc6 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
  401bc2:	2300      	movs	r3, #0
  401bc4:	e031      	b.n	401c2a <udc_req_ep+0x76>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401bc6:	4b1c      	ldr	r3, [pc, #112]	; (401c38 <udc_req_ep+0x84>)
  401bc8:	889b      	ldrh	r3, [r3, #4]
  401bca:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401bcc:	2300      	movs	r3, #0
  401bce:	71fb      	strb	r3, [r7, #7]
  401bd0:	e023      	b.n	401c1a <udc_req_ep+0x66>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  401bd2:	4b1a      	ldr	r3, [pc, #104]	; (401c3c <udc_req_ep+0x88>)
  401bd4:	681b      	ldr	r3, [r3, #0]
  401bd6:	685a      	ldr	r2, [r3, #4]
  401bd8:	79fb      	ldrb	r3, [r7, #7]
  401bda:	009b      	lsls	r3, r3, #2
  401bdc:	4413      	add	r3, r2
  401bde:	681b      	ldr	r3, [r3, #0]
  401be0:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401be2:	683b      	ldr	r3, [r7, #0]
  401be4:	68db      	ldr	r3, [r3, #12]
  401be6:	4798      	blx	r3
  401be8:	4603      	mov	r3, r0
  401bea:	79fa      	ldrb	r2, [r7, #7]
  401bec:	4610      	mov	r0, r2
  401bee:	4619      	mov	r1, r3
  401bf0:	4b13      	ldr	r3, [pc, #76]	; (401c40 <udc_req_ep+0x8c>)
  401bf2:	4798      	blx	r3
  401bf4:	4603      	mov	r3, r0
  401bf6:	f083 0301 	eor.w	r3, r3, #1
  401bfa:	b2db      	uxtb	r3, r3
  401bfc:	2b00      	cmp	r3, #0
  401bfe:	d001      	beq.n	401c04 <udc_req_ep+0x50>
			return false;
  401c00:	2300      	movs	r3, #0
  401c02:	e012      	b.n	401c2a <udc_req_ep+0x76>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  401c04:	683b      	ldr	r3, [r7, #0]
  401c06:	689b      	ldr	r3, [r3, #8]
  401c08:	4798      	blx	r3
  401c0a:	4603      	mov	r3, r0
  401c0c:	2b00      	cmp	r3, #0
  401c0e:	d001      	beq.n	401c14 <udc_req_ep+0x60>
			return true;
  401c10:	2301      	movs	r3, #1
  401c12:	e00a      	b.n	401c2a <udc_req_ep+0x76>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  401c14:	79fb      	ldrb	r3, [r7, #7]
  401c16:	3301      	adds	r3, #1
  401c18:	71fb      	strb	r3, [r7, #7]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401c1a:	4b08      	ldr	r3, [pc, #32]	; (401c3c <udc_req_ep+0x88>)
  401c1c:	681b      	ldr	r3, [r3, #0]
  401c1e:	681b      	ldr	r3, [r3, #0]
  401c20:	791b      	ldrb	r3, [r3, #4]
  401c22:	79fa      	ldrb	r2, [r7, #7]
  401c24:	429a      	cmp	r2, r3
  401c26:	d3d4      	bcc.n	401bd2 <udc_req_ep+0x1e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  401c28:	2300      	movs	r3, #0
}
  401c2a:	4618      	mov	r0, r3
  401c2c:	3708      	adds	r7, #8
  401c2e:	46bd      	mov	sp, r7
  401c30:	bd80      	pop	{r7, pc}
  401c32:	bf00      	nop
  401c34:	20000db0 	.word	0x20000db0
  401c38:	20008954 	.word	0x20008954
  401c3c:	20000db4 	.word	0x20000db4
  401c40:	004011b5 	.word	0x004011b5

00401c44 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  401c44:	b580      	push	{r7, lr}
  401c46:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  401c48:	4b1f      	ldr	r3, [pc, #124]	; (401cc8 <udc_process_setup+0x84>)
  401c4a:	2200      	movs	r2, #0
  401c4c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  401c4e:	4b1e      	ldr	r3, [pc, #120]	; (401cc8 <udc_process_setup+0x84>)
  401c50:	2200      	movs	r2, #0
  401c52:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401c54:	4b1c      	ldr	r3, [pc, #112]	; (401cc8 <udc_process_setup+0x84>)
  401c56:	2200      	movs	r2, #0
  401c58:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  401c5a:	4b1b      	ldr	r3, [pc, #108]	; (401cc8 <udc_process_setup+0x84>)
  401c5c:	781b      	ldrb	r3, [r3, #0]
  401c5e:	b2db      	uxtb	r3, r3
  401c60:	b25b      	sxtb	r3, r3
  401c62:	2b00      	cmp	r3, #0
  401c64:	da05      	bge.n	401c72 <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
  401c66:	4b18      	ldr	r3, [pc, #96]	; (401cc8 <udc_process_setup+0x84>)
  401c68:	88db      	ldrh	r3, [r3, #6]
  401c6a:	2b00      	cmp	r3, #0
  401c6c:	d101      	bne.n	401c72 <udc_process_setup+0x2e>
			return false; // Error from USB host
  401c6e:	2300      	movs	r3, #0
  401c70:	e027      	b.n	401cc2 <udc_process_setup+0x7e>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  401c72:	4b15      	ldr	r3, [pc, #84]	; (401cc8 <udc_process_setup+0x84>)
  401c74:	781b      	ldrb	r3, [r3, #0]
  401c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
  401c7a:	2b00      	cmp	r3, #0
  401c7c:	d106      	bne.n	401c8c <udc_process_setup+0x48>
		if (udc_reqstd()) {
  401c7e:	4b13      	ldr	r3, [pc, #76]	; (401ccc <udc_process_setup+0x88>)
  401c80:	4798      	blx	r3
  401c82:	4603      	mov	r3, r0
  401c84:	2b00      	cmp	r3, #0
  401c86:	d001      	beq.n	401c8c <udc_process_setup+0x48>
			return true;
  401c88:	2301      	movs	r3, #1
  401c8a:	e01a      	b.n	401cc2 <udc_process_setup+0x7e>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  401c8c:	4b0e      	ldr	r3, [pc, #56]	; (401cc8 <udc_process_setup+0x84>)
  401c8e:	781b      	ldrb	r3, [r3, #0]
  401c90:	f003 031f 	and.w	r3, r3, #31
  401c94:	2b01      	cmp	r3, #1
  401c96:	d106      	bne.n	401ca6 <udc_process_setup+0x62>
		if (udc_req_iface()) {
  401c98:	4b0d      	ldr	r3, [pc, #52]	; (401cd0 <udc_process_setup+0x8c>)
  401c9a:	4798      	blx	r3
  401c9c:	4603      	mov	r3, r0
  401c9e:	2b00      	cmp	r3, #0
  401ca0:	d001      	beq.n	401ca6 <udc_process_setup+0x62>
			return true;
  401ca2:	2301      	movs	r3, #1
  401ca4:	e00d      	b.n	401cc2 <udc_process_setup+0x7e>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  401ca6:	4b08      	ldr	r3, [pc, #32]	; (401cc8 <udc_process_setup+0x84>)
  401ca8:	781b      	ldrb	r3, [r3, #0]
  401caa:	f003 031f 	and.w	r3, r3, #31
  401cae:	2b02      	cmp	r3, #2
  401cb0:	d106      	bne.n	401cc0 <udc_process_setup+0x7c>
		if (udc_req_ep()) {
  401cb2:	4b08      	ldr	r3, [pc, #32]	; (401cd4 <udc_process_setup+0x90>)
  401cb4:	4798      	blx	r3
  401cb6:	4603      	mov	r3, r0
  401cb8:	2b00      	cmp	r3, #0
  401cba:	d001      	beq.n	401cc0 <udc_process_setup+0x7c>
			return true;
  401cbc:	2301      	movs	r3, #1
  401cbe:	e000      	b.n	401cc2 <udc_process_setup+0x7e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  401cc0:	2300      	movs	r3, #0
#endif
}
  401cc2:	4618      	mov	r0, r3
  401cc4:	bd80      	pop	{r7, pc}
  401cc6:	bf00      	nop
  401cc8:	20008954 	.word	0x20008954
  401ccc:	004019a9 	.word	0x004019a9
  401cd0:	00401b1d 	.word	0x00401b1d
  401cd4:	00401bb5 	.word	0x00401bb5

00401cd8 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401cd8:	b480      	push	{r7}
  401cda:	b083      	sub	sp, #12
  401cdc:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401cde:	f3ef 8310 	mrs	r3, PRIMASK
  401ce2:	603b      	str	r3, [r7, #0]
  return(result);
  401ce4:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  401ce6:	2b00      	cmp	r3, #0
  401ce8:	bf14      	ite	ne
  401cea:	2300      	movne	r3, #0
  401cec:	2301      	moveq	r3, #1
  401cee:	b2db      	uxtb	r3, r3
  401cf0:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401cf2:	b672      	cpsid	i
  401cf4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401cf8:	4b04      	ldr	r3, [pc, #16]	; (401d0c <cpu_irq_save+0x34>)
  401cfa:	2200      	movs	r2, #0
  401cfc:	701a      	strb	r2, [r3, #0]
	return flags;
  401cfe:	687b      	ldr	r3, [r7, #4]
}
  401d00:	4618      	mov	r0, r3
  401d02:	370c      	adds	r7, #12
  401d04:	46bd      	mov	sp, r7
  401d06:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d0a:	4770      	bx	lr
  401d0c:	20000364 	.word	0x20000364

00401d10 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401d10:	b480      	push	{r7}
  401d12:	b083      	sub	sp, #12
  401d14:	af00      	add	r7, sp, #0
  401d16:	6078      	str	r0, [r7, #4]
	return (flags);
  401d18:	687b      	ldr	r3, [r7, #4]
  401d1a:	2b00      	cmp	r3, #0
  401d1c:	bf0c      	ite	eq
  401d1e:	2300      	moveq	r3, #0
  401d20:	2301      	movne	r3, #1
  401d22:	b2db      	uxtb	r3, r3
}
  401d24:	4618      	mov	r0, r3
  401d26:	370c      	adds	r7, #12
  401d28:	46bd      	mov	sp, r7
  401d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d2e:	4770      	bx	lr

00401d30 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401d30:	b580      	push	{r7, lr}
  401d32:	b082      	sub	sp, #8
  401d34:	af00      	add	r7, sp, #0
  401d36:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401d38:	6878      	ldr	r0, [r7, #4]
  401d3a:	4b07      	ldr	r3, [pc, #28]	; (401d58 <cpu_irq_restore+0x28>)
  401d3c:	4798      	blx	r3
  401d3e:	4603      	mov	r3, r0
  401d40:	2b00      	cmp	r3, #0
  401d42:	d005      	beq.n	401d50 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401d44:	4b05      	ldr	r3, [pc, #20]	; (401d5c <cpu_irq_restore+0x2c>)
  401d46:	2201      	movs	r2, #1
  401d48:	701a      	strb	r2, [r3, #0]
  401d4a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401d4e:	b662      	cpsie	i
}
  401d50:	3708      	adds	r7, #8
  401d52:	46bd      	mov	sp, r7
  401d54:	bd80      	pop	{r7, pc}
  401d56:	bf00      	nop
  401d58:	00401d11 	.word	0x00401d11
  401d5c:	20000364 	.word	0x20000364

00401d60 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
  401d60:	b580      	push	{r7, lr}
  401d62:	b086      	sub	sp, #24
  401d64:	af00      	add	r7, sp, #0
  401d66:	60f8      	str	r0, [r7, #12]
  401d68:	60b9      	str	r1, [r7, #8]
  401d6a:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  401d6c:	68bb      	ldr	r3, [r7, #8]
  401d6e:	2b0e      	cmp	r3, #14
  401d70:	d002      	beq.n	401d78 <efc_perform_command+0x18>
  401d72:	68bb      	ldr	r3, [r7, #8]
  401d74:	2b0f      	cmp	r3, #15
  401d76:	d102      	bne.n	401d7e <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
  401d78:	f04f 33ff 	mov.w	r3, #4294967295
  401d7c:	e016      	b.n	401dac <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
  401d7e:	4b0d      	ldr	r3, [pc, #52]	; (401db4 <efc_perform_command+0x54>)
  401d80:	4798      	blx	r3
  401d82:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  401d84:	687b      	ldr	r3, [r7, #4]
  401d86:	021b      	lsls	r3, r3, #8
  401d88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401d8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
  401d90:	68ba      	ldr	r2, [r7, #8]
  401d92:	b2d2      	uxtb	r2, r2
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  401d94:	4313      	orrs	r3, r2
		return EFC_RC_NOT_SUPPORT;
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
  401d96:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  401d9a:	68f8      	ldr	r0, [r7, #12]
  401d9c:	4619      	mov	r1, r3
  401d9e:	4b06      	ldr	r3, [pc, #24]	; (401db8 <efc_perform_command+0x58>)
  401da0:	4798      	blx	r3
  401da2:	6138      	str	r0, [r7, #16]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
  401da4:	6978      	ldr	r0, [r7, #20]
  401da6:	4b05      	ldr	r3, [pc, #20]	; (401dbc <efc_perform_command+0x5c>)
  401da8:	4798      	blx	r3
	return result;
  401daa:	693b      	ldr	r3, [r7, #16]
}
  401dac:	4618      	mov	r0, r3
  401dae:	3718      	adds	r7, #24
  401db0:	46bd      	mov	sp, r7
  401db2:	bd80      	pop	{r7, pc}
  401db4:	00401cd9 	.word	0x00401cd9
  401db8:	200000dd 	.word	0x200000dd
  401dbc:	00401d31 	.word	0x00401d31

00401dc0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401dc0:	b480      	push	{r7}
  401dc2:	b083      	sub	sp, #12
  401dc4:	af00      	add	r7, sp, #0
  401dc6:	4603      	mov	r3, r0
  401dc8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401dca:	4b08      	ldr	r3, [pc, #32]	; (401dec <NVIC_EnableIRQ+0x2c>)
  401dcc:	f997 2007 	ldrsb.w	r2, [r7, #7]
  401dd0:	0952      	lsrs	r2, r2, #5
  401dd2:	79f9      	ldrb	r1, [r7, #7]
  401dd4:	f001 011f 	and.w	r1, r1, #31
  401dd8:	2001      	movs	r0, #1
  401dda:	fa00 f101 	lsl.w	r1, r0, r1
  401dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401de2:	370c      	adds	r7, #12
  401de4:	46bd      	mov	sp, r7
  401de6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dea:	4770      	bx	lr
  401dec:	e000e100 	.word	0xe000e100

00401df0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401df0:	b480      	push	{r7}
  401df2:	b083      	sub	sp, #12
  401df4:	af00      	add	r7, sp, #0
  401df6:	4603      	mov	r3, r0
  401df8:	6039      	str	r1, [r7, #0]
  401dfa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e00:	2b00      	cmp	r3, #0
  401e02:	da0b      	bge.n	401e1c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401e04:	490d      	ldr	r1, [pc, #52]	; (401e3c <NVIC_SetPriority+0x4c>)
  401e06:	79fb      	ldrb	r3, [r7, #7]
  401e08:	f003 030f 	and.w	r3, r3, #15
  401e0c:	3b04      	subs	r3, #4
  401e0e:	683a      	ldr	r2, [r7, #0]
  401e10:	b2d2      	uxtb	r2, r2
  401e12:	0112      	lsls	r2, r2, #4
  401e14:	b2d2      	uxtb	r2, r2
  401e16:	440b      	add	r3, r1
  401e18:	761a      	strb	r2, [r3, #24]
  401e1a:	e009      	b.n	401e30 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401e1c:	4908      	ldr	r1, [pc, #32]	; (401e40 <NVIC_SetPriority+0x50>)
  401e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e22:	683a      	ldr	r2, [r7, #0]
  401e24:	b2d2      	uxtb	r2, r2
  401e26:	0112      	lsls	r2, r2, #4
  401e28:	b2d2      	uxtb	r2, r2
  401e2a:	440b      	add	r3, r1
  401e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401e30:	370c      	adds	r7, #12
  401e32:	46bd      	mov	sp, r7
  401e34:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e38:	4770      	bx	lr
  401e3a:	bf00      	nop
  401e3c:	e000ed00 	.word	0xe000ed00
  401e40:	e000e100 	.word	0xe000e100

00401e44 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401e44:	b480      	push	{r7}
  401e46:	b083      	sub	sp, #12
  401e48:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401e4a:	f3ef 8310 	mrs	r3, PRIMASK
  401e4e:	603b      	str	r3, [r7, #0]
  return(result);
  401e50:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  401e52:	2b00      	cmp	r3, #0
  401e54:	bf14      	ite	ne
  401e56:	2300      	movne	r3, #0
  401e58:	2301      	moveq	r3, #1
  401e5a:	b2db      	uxtb	r3, r3
  401e5c:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401e5e:	b672      	cpsid	i
  401e60:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401e64:	4b04      	ldr	r3, [pc, #16]	; (401e78 <cpu_irq_save+0x34>)
  401e66:	2200      	movs	r2, #0
  401e68:	701a      	strb	r2, [r3, #0]
	return flags;
  401e6a:	687b      	ldr	r3, [r7, #4]
}
  401e6c:	4618      	mov	r0, r3
  401e6e:	370c      	adds	r7, #12
  401e70:	46bd      	mov	sp, r7
  401e72:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e76:	4770      	bx	lr
  401e78:	20000364 	.word	0x20000364

00401e7c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401e7c:	b480      	push	{r7}
  401e7e:	b083      	sub	sp, #12
  401e80:	af00      	add	r7, sp, #0
  401e82:	6078      	str	r0, [r7, #4]
	return (flags);
  401e84:	687b      	ldr	r3, [r7, #4]
  401e86:	2b00      	cmp	r3, #0
  401e88:	bf0c      	ite	eq
  401e8a:	2300      	moveq	r3, #0
  401e8c:	2301      	movne	r3, #1
  401e8e:	b2db      	uxtb	r3, r3
}
  401e90:	4618      	mov	r0, r3
  401e92:	370c      	adds	r7, #12
  401e94:	46bd      	mov	sp, r7
  401e96:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e9a:	4770      	bx	lr

00401e9c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401e9c:	b580      	push	{r7, lr}
  401e9e:	b082      	sub	sp, #8
  401ea0:	af00      	add	r7, sp, #0
  401ea2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401ea4:	6878      	ldr	r0, [r7, #4]
  401ea6:	4b07      	ldr	r3, [pc, #28]	; (401ec4 <cpu_irq_restore+0x28>)
  401ea8:	4798      	blx	r3
  401eaa:	4603      	mov	r3, r0
  401eac:	2b00      	cmp	r3, #0
  401eae:	d005      	beq.n	401ebc <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401eb0:	4b05      	ldr	r3, [pc, #20]	; (401ec8 <cpu_irq_restore+0x2c>)
  401eb2:	2201      	movs	r2, #1
  401eb4:	701a      	strb	r2, [r3, #0]
  401eb6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401eba:	b662      	cpsie	i
}
  401ebc:	3708      	adds	r7, #8
  401ebe:	46bd      	mov	sp, r7
  401ec0:	bd80      	pop	{r7, pc}
  401ec2:	bf00      	nop
  401ec4:	00401e7d 	.word	0x00401e7d
  401ec8:	20000364 	.word	0x20000364

00401ecc <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  401ecc:	b580      	push	{r7, lr}
  401ece:	b084      	sub	sp, #16
  401ed0:	af00      	add	r7, sp, #0
  401ed2:	4603      	mov	r3, r0
  401ed4:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
  401ed6:	4b08      	ldr	r3, [pc, #32]	; (401ef8 <sleepmgr_lock_mode+0x2c>)
  401ed8:	4798      	blx	r3
  401eda:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  401edc:	79fb      	ldrb	r3, [r7, #7]
  401ede:	4a07      	ldr	r2, [pc, #28]	; (401efc <sleepmgr_lock_mode+0x30>)
  401ee0:	5cd2      	ldrb	r2, [r2, r3]
  401ee2:	3201      	adds	r2, #1
  401ee4:	b2d1      	uxtb	r1, r2
  401ee6:	4a05      	ldr	r2, [pc, #20]	; (401efc <sleepmgr_lock_mode+0x30>)
  401ee8:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  401eea:	68f8      	ldr	r0, [r7, #12]
  401eec:	4b04      	ldr	r3, [pc, #16]	; (401f00 <sleepmgr_lock_mode+0x34>)
  401eee:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  401ef0:	3710      	adds	r7, #16
  401ef2:	46bd      	mov	sp, r7
  401ef4:	bd80      	pop	{r7, pc}
  401ef6:	bf00      	nop
  401ef8:	00401e45 	.word	0x00401e45
  401efc:	2000894c 	.word	0x2000894c
  401f00:	00401e9d 	.word	0x00401e9d

00401f04 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
  401f04:	b580      	push	{r7, lr}
  401f06:	b084      	sub	sp, #16
  401f08:	af00      	add	r7, sp, #0
  401f0a:	4603      	mov	r3, r0
  401f0c:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
  401f0e:	4b08      	ldr	r3, [pc, #32]	; (401f30 <sleepmgr_unlock_mode+0x2c>)
  401f10:	4798      	blx	r3
  401f12:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
  401f14:	79fb      	ldrb	r3, [r7, #7]
  401f16:	4a07      	ldr	r2, [pc, #28]	; (401f34 <sleepmgr_unlock_mode+0x30>)
  401f18:	5cd2      	ldrb	r2, [r2, r3]
  401f1a:	3a01      	subs	r2, #1
  401f1c:	b2d1      	uxtb	r1, r2
  401f1e:	4a05      	ldr	r2, [pc, #20]	; (401f34 <sleepmgr_unlock_mode+0x30>)
  401f20:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  401f22:	68f8      	ldr	r0, [r7, #12]
  401f24:	4b04      	ldr	r3, [pc, #16]	; (401f38 <sleepmgr_unlock_mode+0x34>)
  401f26:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  401f28:	3710      	adds	r7, #16
  401f2a:	46bd      	mov	sp, r7
  401f2c:	bd80      	pop	{r7, pc}
  401f2e:	bf00      	nop
  401f30:	00401e45 	.word	0x00401e45
  401f34:	2000894c 	.word	0x2000894c
  401f38:	00401e9d 	.word	0x00401e9d

00401f3c <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  401f3c:	b580      	push	{r7, lr}
  401f3e:	b082      	sub	sp, #8
  401f40:	af00      	add	r7, sp, #0
  401f42:	4603      	mov	r3, r0
  401f44:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
  401f46:	79fb      	ldrb	r3, [r7, #7]
  401f48:	f083 0301 	eor.w	r3, r3, #1
  401f4c:	b2db      	uxtb	r3, r3
  401f4e:	2b00      	cmp	r3, #0
  401f50:	d006      	beq.n	401f60 <udd_sleep_mode+0x24>
  401f52:	4b0d      	ldr	r3, [pc, #52]	; (401f88 <udd_sleep_mode+0x4c>)
  401f54:	781b      	ldrb	r3, [r3, #0]
  401f56:	2b00      	cmp	r3, #0
  401f58:	d002      	beq.n	401f60 <udd_sleep_mode+0x24>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
  401f5a:	2002      	movs	r0, #2
  401f5c:	4b0b      	ldr	r3, [pc, #44]	; (401f8c <udd_sleep_mode+0x50>)
  401f5e:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
  401f60:	79fb      	ldrb	r3, [r7, #7]
  401f62:	2b00      	cmp	r3, #0
  401f64:	d009      	beq.n	401f7a <udd_sleep_mode+0x3e>
  401f66:	4b08      	ldr	r3, [pc, #32]	; (401f88 <udd_sleep_mode+0x4c>)
  401f68:	781b      	ldrb	r3, [r3, #0]
  401f6a:	f083 0301 	eor.w	r3, r3, #1
  401f6e:	b2db      	uxtb	r3, r3
  401f70:	2b00      	cmp	r3, #0
  401f72:	d002      	beq.n	401f7a <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
  401f74:	2002      	movs	r0, #2
  401f76:	4b06      	ldr	r3, [pc, #24]	; (401f90 <udd_sleep_mode+0x54>)
  401f78:	4798      	blx	r3
	}
	udd_b_idle = b_idle;
  401f7a:	4b03      	ldr	r3, [pc, #12]	; (401f88 <udd_sleep_mode+0x4c>)
  401f7c:	79fa      	ldrb	r2, [r7, #7]
  401f7e:	701a      	strb	r2, [r3, #0]
}
  401f80:	3708      	adds	r7, #8
  401f82:	46bd      	mov	sp, r7
  401f84:	bd80      	pop	{r7, pc}
  401f86:	bf00      	nop
  401f88:	20000dbe 	.word	0x20000dbe
  401f8c:	00401f05 	.word	0x00401f05
  401f90:	00401ecd 	.word	0x00401ecd

00401f94 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  401f94:	b580      	push	{r7, lr}
  401f96:	af00      	add	r7, sp, #0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401f98:	4b61      	ldr	r3, [pc, #388]	; (402120 <UDP_Handler+0x18c>)
  401f9a:	4798      	blx	r3
  401f9c:	4603      	mov	r3, r0
  401f9e:	f083 0301 	eor.w	r3, r3, #1
  401fa2:	b2db      	uxtb	r3, r3
  401fa4:	2b00      	cmp	r3, #0
  401fa6:	d00c      	beq.n	401fc2 <UDP_Handler+0x2e>
  401fa8:	4b5e      	ldr	r3, [pc, #376]	; (402124 <UDP_Handler+0x190>)
  401faa:	69db      	ldr	r3, [r3, #28]
  401fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401fb0:	2b00      	cmp	r3, #0
  401fb2:	d106      	bne.n	401fc2 <UDP_Handler+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401fb4:	b672      	cpsid	i
  401fb6:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401fba:	4b5b      	ldr	r3, [pc, #364]	; (402128 <UDP_Handler+0x194>)
  401fbc:	2200      	movs	r2, #0
  401fbe:	701a      	strb	r2, [r3, #0]
		return;
  401fc0:	e0ac      	b.n	40211c <UDP_Handler+0x188>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  401fc2:	2022      	movs	r0, #34	; 0x22
  401fc4:	4b59      	ldr	r3, [pc, #356]	; (40212c <UDP_Handler+0x198>)
  401fc6:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401fc8:	4b56      	ldr	r3, [pc, #344]	; (402124 <UDP_Handler+0x190>)
  401fca:	699b      	ldr	r3, [r3, #24]
  401fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  401fd0:	2b00      	cmp	r3, #0
  401fd2:	d00c      	beq.n	401fee <UDP_Handler+0x5a>
  401fd4:	4b53      	ldr	r3, [pc, #332]	; (402124 <UDP_Handler+0x190>)
  401fd6:	69db      	ldr	r3, [r3, #28]
  401fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  401fdc:	2b00      	cmp	r3, #0
  401fde:	d006      	beq.n	401fee <UDP_Handler+0x5a>
		udd_ack_sof();
  401fe0:	4b50      	ldr	r3, [pc, #320]	; (402124 <UDP_Handler+0x190>)
  401fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401fe6:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401fe8:	4b51      	ldr	r3, [pc, #324]	; (402130 <UDP_Handler+0x19c>)
  401fea:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  401fec:	e095      	b.n	40211a <UDP_Handler+0x186>
	}

	if (udd_ctrl_interrupt()) {
  401fee:	4b51      	ldr	r3, [pc, #324]	; (402134 <UDP_Handler+0x1a0>)
  401ff0:	4798      	blx	r3
  401ff2:	4603      	mov	r3, r0
  401ff4:	2b00      	cmp	r3, #0
  401ff6:	d000      	beq.n	401ffa <UDP_Handler+0x66>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
  401ff8:	e08f      	b.n	40211a <UDP_Handler+0x186>
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
  401ffa:	4b4f      	ldr	r3, [pc, #316]	; (402138 <UDP_Handler+0x1a4>)
  401ffc:	4798      	blx	r3
  401ffe:	4603      	mov	r3, r0
  402000:	2b00      	cmp	r3, #0
  402002:	d000      	beq.n	402006 <UDP_Handler+0x72>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
  402004:	e089      	b.n	40211a <UDP_Handler+0x186>
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402006:	4b47      	ldr	r3, [pc, #284]	; (402124 <UDP_Handler+0x190>)
  402008:	699b      	ldr	r3, [r3, #24]
  40200a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40200e:	2b00      	cmp	r3, #0
  402010:	d005      	beq.n	40201e <UDP_Handler+0x8a>
  402012:	4b44      	ldr	r3, [pc, #272]	; (402124 <UDP_Handler+0x190>)
  402014:	69db      	ldr	r3, [r3, #28]
  402016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40201a:	2b00      	cmp	r3, #0
  40201c:	d117      	bne.n	40204e <UDP_Handler+0xba>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40201e:	4b41      	ldr	r3, [pc, #260]	; (402124 <UDP_Handler+0x190>)
  402020:	699b      	ldr	r3, [r3, #24]
  402022:	f403 7300 	and.w	r3, r3, #512	; 0x200
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402026:	2b00      	cmp	r3, #0
  402028:	d005      	beq.n	402036 <UDP_Handler+0xa2>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40202a:	4b3e      	ldr	r3, [pc, #248]	; (402124 <UDP_Handler+0x190>)
  40202c:	69db      	ldr	r3, [r3, #28]
  40202e:	f403 7300 	and.w	r3, r3, #512	; 0x200
  402032:	2b00      	cmp	r3, #0
  402034:	d10b      	bne.n	40204e <UDP_Handler+0xba>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402036:	4b3b      	ldr	r3, [pc, #236]	; (402124 <UDP_Handler+0x190>)
  402038:	699b      	ldr	r3, [r3, #24]
  40203a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40203e:	2b00      	cmp	r3, #0
  402040:	d01d      	beq.n	40207e <UDP_Handler+0xea>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402042:	4b38      	ldr	r3, [pc, #224]	; (402124 <UDP_Handler+0x190>)
  402044:	69db      	ldr	r3, [r3, #28]
  402046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  40204a:	2b00      	cmp	r3, #0
  40204c:	d017      	beq.n	40207e <UDP_Handler+0xea>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  40204e:	4b35      	ldr	r3, [pc, #212]	; (402124 <UDP_Handler+0x190>)
  402050:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  402054:	621a      	str	r2, [r3, #32]
		// Do resume operations
		udd_disable_wakeups();
  402056:	4b33      	ldr	r3, [pc, #204]	; (402124 <UDP_Handler+0x190>)
  402058:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  40205c:	615a      	str	r2, [r3, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  40205e:	2001      	movs	r0, #1
  402060:	4b36      	ldr	r3, [pc, #216]	; (40213c <UDP_Handler+0x1a8>)
  402062:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  402064:	4b2f      	ldr	r3, [pc, #188]	; (402124 <UDP_Handler+0x190>)
  402066:	f44f 7280 	mov.w	r2, #256	; 0x100
  40206a:	621a      	str	r2, [r3, #32]
		udd_enable_suspend_interrupt();
  40206c:	4b2d      	ldr	r3, [pc, #180]	; (402124 <UDP_Handler+0x190>)
  40206e:	f44f 7280 	mov.w	r2, #256	; 0x100
  402072:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  402074:	4b2b      	ldr	r3, [pc, #172]	; (402124 <UDP_Handler+0x190>)
  402076:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40207a:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  40207c:	e04d      	b.n	40211a <UDP_Handler+0x186>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  40207e:	4b29      	ldr	r3, [pc, #164]	; (402124 <UDP_Handler+0x190>)
  402080:	699b      	ldr	r3, [r3, #24]
  402082:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402086:	2b00      	cmp	r3, #0
  402088:	d020      	beq.n	4020cc <UDP_Handler+0x138>
  40208a:	4b26      	ldr	r3, [pc, #152]	; (402124 <UDP_Handler+0x190>)
  40208c:	69db      	ldr	r3, [r3, #28]
  40208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402092:	2b00      	cmp	r3, #0
  402094:	d01a      	beq.n	4020cc <UDP_Handler+0x138>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  402096:	4b23      	ldr	r3, [pc, #140]	; (402124 <UDP_Handler+0x190>)
  402098:	f44f 7280 	mov.w	r2, #256	; 0x100
  40209c:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  40209e:	4b21      	ldr	r3, [pc, #132]	; (402124 <UDP_Handler+0x190>)
  4020a0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4020a4:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  4020a6:	4b1f      	ldr	r3, [pc, #124]	; (402124 <UDP_Handler+0x190>)
  4020a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4020ac:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  4020ae:	4b1d      	ldr	r3, [pc, #116]	; (402124 <UDP_Handler+0x190>)
  4020b0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4020b4:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  4020b6:	4b1b      	ldr	r3, [pc, #108]	; (402124 <UDP_Handler+0x190>)
  4020b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4020bc:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  4020be:	2022      	movs	r0, #34	; 0x22
  4020c0:	4b1f      	ldr	r3, [pc, #124]	; (402140 <UDP_Handler+0x1ac>)
  4020c2:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  4020c4:	2000      	movs	r0, #0
  4020c6:	4b1d      	ldr	r3, [pc, #116]	; (40213c <UDP_Handler+0x1a8>)
  4020c8:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  4020ca:	e026      	b.n	40211a <UDP_Handler+0x186>
	}
	if (Is_udd_reset()) {
  4020cc:	4b15      	ldr	r3, [pc, #84]	; (402124 <UDP_Handler+0x190>)
  4020ce:	69db      	ldr	r3, [r3, #28]
  4020d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4020d4:	2b00      	cmp	r3, #0
  4020d6:	d020      	beq.n	40211a <UDP_Handler+0x186>
		// USB bus reset detection
		udd_ack_reset();
  4020d8:	4b12      	ldr	r3, [pc, #72]	; (402124 <UDP_Handler+0x190>)
  4020da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4020de:	621a      	str	r2, [r3, #32]

		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
  4020e0:	4b18      	ldr	r3, [pc, #96]	; (402144 <UDP_Handler+0x1b0>)
  4020e2:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
  4020e4:	4b18      	ldr	r3, [pc, #96]	; (402148 <UDP_Handler+0x1b4>)
  4020e6:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  4020e8:	4b0e      	ldr	r3, [pc, #56]	; (402124 <UDP_Handler+0x190>)
  4020ea:	4a0e      	ldr	r2, [pc, #56]	; (402124 <UDP_Handler+0x190>)
  4020ec:	6852      	ldr	r2, [r2, #4]
  4020ee:	f022 0201 	bic.w	r2, r2, #1
  4020f2:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  4020f4:	4b0b      	ldr	r3, [pc, #44]	; (402124 <UDP_Handler+0x190>)
  4020f6:	4a0b      	ldr	r2, [pc, #44]	; (402124 <UDP_Handler+0x190>)
  4020f8:	6852      	ldr	r2, [r2, #4]
  4020fa:	f022 0202 	bic.w	r2, r2, #2
  4020fe:	605a      	str	r2, [r3, #4]
		// Reset endpoint control
		udd_reset_ep_ctrl();
  402100:	4b12      	ldr	r3, [pc, #72]	; (40214c <UDP_Handler+0x1b8>)
  402102:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
  402104:	4b12      	ldr	r3, [pc, #72]	; (402150 <UDP_Handler+0x1bc>)
  402106:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  402108:	4b06      	ldr	r3, [pc, #24]	; (402124 <UDP_Handler+0x190>)
  40210a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40210e:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  402110:	4b04      	ldr	r3, [pc, #16]	; (402124 <UDP_Handler+0x190>)
  402112:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402116:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  402118:	bf00      	nop
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
  40211a:	bf00      	nop
}
  40211c:	bd80      	pop	{r7, pc}
  40211e:	bf00      	nop
  402120:	0040bdf5 	.word	0x0040bdf5
  402124:	40034000 	.word	0x40034000
  402128:	20000364 	.word	0x20000364
  40212c:	0040b809 	.word	0x0040b809
  402130:	004013f1 	.word	0x004013f1
  402134:	004032d9 	.word	0x004032d9
  402138:	004039b9 	.word	0x004039b9
  40213c:	00401f3d 	.word	0x00401f3d
  402140:	0040b88d 	.word	0x0040b88d
  402144:	0040342d 	.word	0x0040342d
  402148:	0040139d 	.word	0x0040139d
  40214c:	00402aa1 	.word	0x00402aa1
  402150:	00402b51 	.word	0x00402b51

00402154 <udd_enable>:
#endif
}


void udd_enable(void)
{
  402154:	b580      	push	{r7, lr}
  402156:	b082      	sub	sp, #8
  402158:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
  40215a:	4b11      	ldr	r3, [pc, #68]	; (4021a0 <udd_enable+0x4c>)
  40215c:	4798      	blx	r3
  40215e:	6078      	str	r0, [r7, #4]
#if SAMG55
	matrix_set_usb_device();
#endif

	// Enable USB hardware
	udd_enable_periph_ck();
  402160:	2022      	movs	r0, #34	; 0x22
  402162:	4b10      	ldr	r3, [pc, #64]	; (4021a4 <udd_enable+0x50>)
  402164:	4798      	blx	r3
	sysclk_enable_usb();
  402166:	4b10      	ldr	r3, [pc, #64]	; (4021a8 <udd_enable+0x54>)
  402168:	4798      	blx	r3
	// Cortex, uses NVIC, no need to register IRQ handler
	NVIC_SetPriority((IRQn_Type) ID_UDP, UDD_USB_INT_LEVEL);
  40216a:	2022      	movs	r0, #34	; 0x22
  40216c:	2105      	movs	r1, #5
  40216e:	4b0f      	ldr	r3, [pc, #60]	; (4021ac <udd_enable+0x58>)
  402170:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDP);
  402172:	2022      	movs	r0, #34	; 0x22
  402174:	4b0e      	ldr	r3, [pc, #56]	; (4021b0 <udd_enable+0x5c>)
  402176:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
  402178:	4b0e      	ldr	r3, [pc, #56]	; (4021b4 <udd_enable+0x60>)
  40217a:	4798      	blx	r3
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  40217c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  402180:	4b0d      	ldr	r3, [pc, #52]	; (4021b8 <udd_enable+0x64>)
  402182:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  402184:	4b0d      	ldr	r3, [pc, #52]	; (4021bc <udd_enable+0x68>)
  402186:	2200      	movs	r2, #0
  402188:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_SUSPEND);
  40218a:	2000      	movs	r0, #0
  40218c:	4b0c      	ldr	r3, [pc, #48]	; (4021c0 <udd_enable+0x6c>)
  40218e:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  402190:	4b0c      	ldr	r3, [pc, #48]	; (4021c4 <udd_enable+0x70>)
  402192:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
  402194:	6878      	ldr	r0, [r7, #4]
  402196:	4b0c      	ldr	r3, [pc, #48]	; (4021c8 <udd_enable+0x74>)
  402198:	4798      	blx	r3
}
  40219a:	3708      	adds	r7, #8
  40219c:	46bd      	mov	sp, r7
  40219e:	bd80      	pop	{r7, pc}
  4021a0:	00401e45 	.word	0x00401e45
  4021a4:	0040b809 	.word	0x0040b809
  4021a8:	0040acbd 	.word	0x0040acbd
  4021ac:	00401df1 	.word	0x00401df1
  4021b0:	00401dc1 	.word	0x00401dc1
  4021b4:	00403385 	.word	0x00403385
  4021b8:	0040b951 	.word	0x0040b951
  4021bc:	20000dbe 	.word	0x20000dbe
  4021c0:	00401ecd 	.word	0x00401ecd
  4021c4:	004021cd 	.word	0x004021cd
  4021c8:	00401e9d 	.word	0x00401e9d

004021cc <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  4021cc:	b580      	push	{r7, lr}
  4021ce:	b082      	sub	sp, #8
  4021d0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
  4021d2:	4b17      	ldr	r3, [pc, #92]	; (402230 <udd_attach+0x64>)
  4021d4:	4798      	blx	r3
  4021d6:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  4021d8:	2001      	movs	r0, #1
  4021da:	4b16      	ldr	r3, [pc, #88]	; (402234 <udd_attach+0x68>)
  4021dc:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  4021de:	2022      	movs	r0, #34	; 0x22
  4021e0:	4b15      	ldr	r3, [pc, #84]	; (402238 <udd_attach+0x6c>)
  4021e2:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  4021e4:	4b15      	ldr	r3, [pc, #84]	; (40223c <udd_attach+0x70>)
  4021e6:	4a15      	ldr	r2, [pc, #84]	; (40223c <udd_attach+0x70>)
  4021e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
  4021ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4021ee:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  4021f0:	4b12      	ldr	r3, [pc, #72]	; (40223c <udd_attach+0x70>)
  4021f2:	4a12      	ldr	r2, [pc, #72]	; (40223c <udd_attach+0x70>)
  4021f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
  4021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  4021fa:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  4021fc:	4b0f      	ldr	r3, [pc, #60]	; (40223c <udd_attach+0x70>)
  4021fe:	f44f 7280 	mov.w	r2, #256	; 0x100
  402202:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  402204:	4b0d      	ldr	r3, [pc, #52]	; (40223c <udd_attach+0x70>)
  402206:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40220a:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  40220c:	4b0b      	ldr	r3, [pc, #44]	; (40223c <udd_attach+0x70>)
  40220e:	f44f 7200 	mov.w	r2, #512	; 0x200
  402212:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  402214:	4b09      	ldr	r3, [pc, #36]	; (40223c <udd_attach+0x70>)
  402216:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40221a:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  40221c:	4b07      	ldr	r3, [pc, #28]	; (40223c <udd_attach+0x70>)
  40221e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402222:	611a      	str	r2, [r3, #16]

	cpu_irq_restore(flags);
  402224:	6878      	ldr	r0, [r7, #4]
  402226:	4b06      	ldr	r3, [pc, #24]	; (402240 <udd_attach+0x74>)
  402228:	4798      	blx	r3
}
  40222a:	3708      	adds	r7, #8
  40222c:	46bd      	mov	sp, r7
  40222e:	bd80      	pop	{r7, pc}
  402230:	00401e45 	.word	0x00401e45
  402234:	00401f3d 	.word	0x00401f3d
  402238:	0040b809 	.word	0x0040b809
  40223c:	40034000 	.word	0x40034000
  402240:	00401e9d 	.word	0x00401e9d

00402244 <udd_is_high_speed>:
	udd_sleep_mode(false);
}


bool udd_is_high_speed(void)
{
  402244:	b480      	push	{r7}
  402246:	af00      	add	r7, sp, #0
	return false;
  402248:	2300      	movs	r3, #0
}
  40224a:	4618      	mov	r0, r3
  40224c:	46bd      	mov	sp, r7
  40224e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402252:	4770      	bx	lr

00402254 <udd_set_address>:


void udd_set_address(uint8_t address)
{
  402254:	b480      	push	{r7}
  402256:	b083      	sub	sp, #12
  402258:	af00      	add	r7, sp, #0
  40225a:	4603      	mov	r3, r0
  40225c:	71fb      	strb	r3, [r7, #7]
	udd_disable_address_state();
  40225e:	4b15      	ldr	r3, [pc, #84]	; (4022b4 <udd_set_address+0x60>)
  402260:	4a14      	ldr	r2, [pc, #80]	; (4022b4 <udd_set_address+0x60>)
  402262:	6852      	ldr	r2, [r2, #4]
  402264:	f022 0201 	bic.w	r2, r2, #1
  402268:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  40226a:	4b12      	ldr	r3, [pc, #72]	; (4022b4 <udd_set_address+0x60>)
  40226c:	4a11      	ldr	r2, [pc, #68]	; (4022b4 <udd_set_address+0x60>)
  40226e:	6892      	ldr	r2, [r2, #8]
  402270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402274:	609a      	str	r2, [r3, #8]
	if (address) {
  402276:	79fb      	ldrb	r3, [r7, #7]
  402278:	2b00      	cmp	r3, #0
  40227a:	d015      	beq.n	4022a8 <udd_set_address+0x54>
		udd_configure_address(address);
  40227c:	4b0d      	ldr	r3, [pc, #52]	; (4022b4 <udd_set_address+0x60>)
  40227e:	4a0d      	ldr	r2, [pc, #52]	; (4022b4 <udd_set_address+0x60>)
  402280:	6892      	ldr	r2, [r2, #8]
  402282:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
  402286:	79fa      	ldrb	r2, [r7, #7]
  402288:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  40228c:	430a      	orrs	r2, r1
  40228e:	609a      	str	r2, [r3, #8]
		udd_enable_address();
  402290:	4b08      	ldr	r3, [pc, #32]	; (4022b4 <udd_set_address+0x60>)
  402292:	4a08      	ldr	r2, [pc, #32]	; (4022b4 <udd_set_address+0x60>)
  402294:	6892      	ldr	r2, [r2, #8]
  402296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40229a:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  40229c:	4b05      	ldr	r3, [pc, #20]	; (4022b4 <udd_set_address+0x60>)
  40229e:	4a05      	ldr	r2, [pc, #20]	; (4022b4 <udd_set_address+0x60>)
  4022a0:	6852      	ldr	r2, [r2, #4]
  4022a2:	f042 0201 	orr.w	r2, r2, #1
  4022a6:	605a      	str	r2, [r3, #4]
	}
}
  4022a8:	370c      	adds	r7, #12
  4022aa:	46bd      	mov	sp, r7
  4022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022b0:	4770      	bx	lr
  4022b2:	bf00      	nop
  4022b4:	40034000 	.word	0x40034000

004022b8 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
  4022b8:	b480      	push	{r7}
  4022ba:	af00      	add	r7, sp, #0
	if (Is_udd_address_state_enabled())
  4022bc:	4b09      	ldr	r3, [pc, #36]	; (4022e4 <udd_getaddress+0x2c>)
  4022be:	685b      	ldr	r3, [r3, #4]
  4022c0:	f003 0301 	and.w	r3, r3, #1
  4022c4:	2b00      	cmp	r3, #0
  4022c6:	d006      	beq.n	4022d6 <udd_getaddress+0x1e>
		return udd_get_configured_address();
  4022c8:	4b06      	ldr	r3, [pc, #24]	; (4022e4 <udd_getaddress+0x2c>)
  4022ca:	689b      	ldr	r3, [r3, #8]
  4022cc:	b2db      	uxtb	r3, r3
  4022ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4022d2:	b2db      	uxtb	r3, r3
  4022d4:	e000      	b.n	4022d8 <udd_getaddress+0x20>
	return 0;
  4022d6:	2300      	movs	r3, #0
}
  4022d8:	4618      	mov	r0, r3
  4022da:	46bd      	mov	sp, r7
  4022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022e0:	4770      	bx	lr
  4022e2:	bf00      	nop
  4022e4:	40034000 	.word	0x40034000

004022e8 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
  4022e8:	b480      	push	{r7}
  4022ea:	af00      	add	r7, sp, #0
	return udd_frame_number();
  4022ec:	4b05      	ldr	r3, [pc, #20]	; (402304 <udd_get_frame_number+0x1c>)
  4022ee:	681b      	ldr	r3, [r3, #0]
  4022f0:	b29b      	uxth	r3, r3
  4022f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4022f6:	b29b      	uxth	r3, r3
}
  4022f8:	4618      	mov	r0, r3
  4022fa:	46bd      	mov	sp, r7
  4022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  402300:	4770      	bx	lr
  402302:	bf00      	nop
  402304:	40034000 	.word	0x40034000

00402308 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
  402308:	b480      	push	{r7}
  40230a:	af00      	add	r7, sp, #0
	return 0;
  40230c:	2300      	movs	r3, #0
}
  40230e:	4618      	mov	r0, r3
  402310:	46bd      	mov	sp, r7
  402312:	f85d 7b04 	ldr.w	r7, [sp], #4
  402316:	4770      	bx	lr

00402318 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
  402318:	b480      	push	{r7}
  40231a:	b083      	sub	sp, #12
  40231c:	af00      	add	r7, sp, #0
  40231e:	6078      	str	r0, [r7, #4]
  402320:	460b      	mov	r3, r1
  402322:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
  402324:	4b05      	ldr	r3, [pc, #20]	; (40233c <udd_set_setup_payload+0x24>)
  402326:	687a      	ldr	r2, [r7, #4]
  402328:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  40232a:	4b04      	ldr	r3, [pc, #16]	; (40233c <udd_set_setup_payload+0x24>)
  40232c:	887a      	ldrh	r2, [r7, #2]
  40232e:	819a      	strh	r2, [r3, #12]
}
  402330:	370c      	adds	r7, #12
  402332:	46bd      	mov	sp, r7
  402334:	f85d 7b04 	ldr.w	r7, [sp], #4
  402338:	4770      	bx	lr
  40233a:	bf00      	nop
  40233c:	20008954 	.word	0x20008954

00402340 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  402340:	b480      	push	{r7}
  402342:	b087      	sub	sp, #28
  402344:	af00      	add	r7, sp, #0
  402346:	4613      	mov	r3, r2
  402348:	4602      	mov	r2, r0
  40234a:	71fa      	strb	r2, [r7, #7]
  40234c:	460a      	mov	r2, r1
  40234e:	71ba      	strb	r2, [r7, #6]
  402350:	80bb      	strh	r3, [r7, #4]
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
  402352:	79fb      	ldrb	r3, [r7, #7]
  402354:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402358:	2b00      	cmp	r3, #0
  40235a:	bf0c      	ite	eq
  40235c:	2300      	moveq	r3, #0
  40235e:	2301      	movne	r3, #1
  402360:	75fb      	strb	r3, [r7, #23]
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
  402362:	79bb      	ldrb	r3, [r7, #6]
  402364:	f003 0303 	and.w	r3, r3, #3
  402368:	2b01      	cmp	r3, #1
  40236a:	bf14      	ite	ne
  40236c:	2300      	movne	r3, #0
  40236e:	2301      	moveq	r3, #1
  402370:	75bb      	strb	r3, [r7, #22]
	ep = ep & USB_EP_ADDR_MASK;
  402372:	79fb      	ldrb	r3, [r7, #7]
  402374:	f003 030f 	and.w	r3, r3, #15
  402378:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
  40237a:	79fb      	ldrb	r3, [r7, #7]
  40237c:	2b03      	cmp	r3, #3
  40237e:	d901      	bls.n	402384 <udd_ep_alloc+0x44>
		return false;
  402380:	2300      	movs	r3, #0
  402382:	e092      	b.n	4024aa <udd_ep_alloc+0x16a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
  402384:	4b4c      	ldr	r3, [pc, #304]	; (4024b8 <udd_ep_alloc+0x178>)
  402386:	79fa      	ldrb	r2, [r7, #7]
  402388:	320c      	adds	r2, #12
  40238a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40238e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  402392:	2b00      	cmp	r3, #0
  402394:	d001      	beq.n	40239a <udd_ep_alloc+0x5a>
		return false;
  402396:	2300      	movs	r3, #0
  402398:	e087      	b.n	4024aa <udd_ep_alloc+0x16a>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  40239a:	7dbb      	ldrb	r3, [r7, #22]
  40239c:	2b00      	cmp	r3, #0
  40239e:	d007      	beq.n	4023b0 <udd_ep_alloc+0x70>
  4023a0:	79fb      	ldrb	r3, [r7, #7]
  4023a2:	2b00      	cmp	r3, #0
  4023a4:	d002      	beq.n	4023ac <udd_ep_alloc+0x6c>
  4023a6:	79fb      	ldrb	r3, [r7, #7]
  4023a8:	2b03      	cmp	r3, #3
  4023aa:	d101      	bne.n	4023b0 <udd_ep_alloc+0x70>
		return false;
  4023ac:	2300      	movs	r3, #0
  4023ae:	e07c      	b.n	4024aa <udd_ep_alloc+0x16a>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  4023b0:	88ba      	ldrh	r2, [r7, #4]
  4023b2:	79fb      	ldrb	r3, [r7, #7]
  4023b4:	2b04      	cmp	r3, #4
  4023b6:	d002      	beq.n	4023be <udd_ep_alloc+0x7e>
  4023b8:	79fb      	ldrb	r3, [r7, #7]
  4023ba:	2b05      	cmp	r3, #5
  4023bc:	d102      	bne.n	4023c4 <udd_ep_alloc+0x84>
  4023be:	f44f 7300 	mov.w	r3, #512	; 0x200
  4023c2:	e000      	b.n	4023c6 <udd_ep_alloc+0x86>
  4023c4:	2340      	movs	r3, #64	; 0x40
  4023c6:	429a      	cmp	r2, r3
  4023c8:	dd01      	ble.n	4023ce <udd_ep_alloc+0x8e>
		return false;
  4023ca:	2300      	movs	r3, #0
  4023cc:	e06d      	b.n	4024aa <udd_ep_alloc+0x16a>
	}
	ptr_job = &udd_ep_job[ep - 1];
  4023ce:	79fb      	ldrb	r3, [r7, #7]
  4023d0:	1e5a      	subs	r2, r3, #1
  4023d2:	4613      	mov	r3, r2
  4023d4:	009b      	lsls	r3, r3, #2
  4023d6:	4413      	add	r3, r2
  4023d8:	009b      	lsls	r3, r3, #2
  4023da:	4a38      	ldr	r2, [pc, #224]	; (4024bc <udd_ep_alloc+0x17c>)
  4023dc:	4413      	add	r3, r2
  4023de:	613b      	str	r3, [r7, #16]

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  4023e0:	88bb      	ldrh	r3, [r7, #4]
  4023e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4023e6:	b299      	uxth	r1, r3
  4023e8:	693a      	ldr	r2, [r7, #16]
  4023ea:	8a13      	ldrh	r3, [r2, #16]
  4023ec:	f361 0309 	bfi	r3, r1, #0, #10
  4023f0:	8213      	strh	r3, [r2, #16]
	ptr_job->b_buf_end = false;
  4023f2:	693a      	ldr	r2, [r7, #16]
  4023f4:	7c53      	ldrb	r3, [r2, #17]
  4023f6:	f36f 13c7 	bfc	r3, #7, #1
  4023fa:	7453      	strb	r3, [r2, #17]
	ptr_job->b_stall_requested = false;
  4023fc:	693a      	ldr	r2, [r7, #16]
  4023fe:	7c53      	ldrb	r3, [r2, #17]
  402400:	f36f 1345 	bfc	r3, #5, #1
  402404:	7453      	strb	r3, [r2, #17]
	if (b_dir_in) {
  402406:	7dfb      	ldrb	r3, [r7, #23]
  402408:	2b00      	cmp	r3, #0
  40240a:	d004      	beq.n	402416 <udd_ep_alloc+0xd6>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  40240c:	693a      	ldr	r2, [r7, #16]
  40240e:	7c53      	ldrb	r3, [r2, #17]
  402410:	f36f 0383 	bfc	r3, #2, #2
  402414:	7453      	strb	r3, [r2, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  402416:	4b28      	ldr	r3, [pc, #160]	; (4024b8 <udd_ep_alloc+0x178>)
  402418:	4a27      	ldr	r2, [pc, #156]	; (4024b8 <udd_ep_alloc+0x178>)
  40241a:	6a91      	ldr	r1, [r2, #40]	; 0x28
  40241c:	79fa      	ldrb	r2, [r7, #7]
  40241e:	2001      	movs	r0, #1
  402420:	fa00 f202 	lsl.w	r2, r0, r2
  402424:	430a      	orrs	r2, r1
  402426:	629a      	str	r2, [r3, #40]	; 0x28
  402428:	4b23      	ldr	r3, [pc, #140]	; (4024b8 <udd_ep_alloc+0x178>)
  40242a:	4a23      	ldr	r2, [pc, #140]	; (4024b8 <udd_ep_alloc+0x178>)
  40242c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  40242e:	79fa      	ldrb	r2, [r7, #7]
  402430:	2001      	movs	r0, #1
  402432:	fa00 f202 	lsl.w	r2, r0, r2
  402436:	43d2      	mvns	r2, r2
  402438:	400a      	ands	r2, r1
  40243a:	629a      	str	r2, [r3, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  40243c:	4b1e      	ldr	r3, [pc, #120]	; (4024b8 <udd_ep_alloc+0x178>)
  40243e:	79fa      	ldrb	r2, [r7, #7]
  402440:	320c      	adds	r2, #12
  402442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402446:	60fb      	str	r3, [r7, #12]
  402448:	68fb      	ldr	r3, [r7, #12]
  40244a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40244e:	60fb      	str	r3, [r7, #12]
  402450:	68fb      	ldr	r3, [r7, #12]
  402452:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  402456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40245a:	60fb      	str	r3, [r7, #12]
  40245c:	7dfb      	ldrb	r3, [r7, #23]
  40245e:	2b00      	cmp	r3, #0
  402460:	d009      	beq.n	402476 <udd_ep_alloc+0x136>
  402462:	79bb      	ldrb	r3, [r7, #6]
  402464:	f043 0304 	orr.w	r3, r3, #4
  402468:	b2db      	uxtb	r3, r3
  40246a:	021b      	lsls	r3, r3, #8
  40246c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402474:	e005      	b.n	402482 <udd_ep_alloc+0x142>
  402476:	79bb      	ldrb	r3, [r7, #6]
  402478:	021b      	lsls	r3, r3, #8
  40247a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40247e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402482:	68fa      	ldr	r2, [r7, #12]
  402484:	4313      	orrs	r3, r2
  402486:	60fb      	str	r3, [r7, #12]
  402488:	4b0b      	ldr	r3, [pc, #44]	; (4024b8 <udd_ep_alloc+0x178>)
  40248a:	79fa      	ldrb	r2, [r7, #7]
  40248c:	68f9      	ldr	r1, [r7, #12]
  40248e:	320c      	adds	r2, #12
  402490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402494:	2300      	movs	r3, #0
  402496:	60bb      	str	r3, [r7, #8]
  402498:	e003      	b.n	4024a2 <udd_ep_alloc+0x162>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40249a:	bf00      	nop
  40249c:	68bb      	ldr	r3, [r7, #8]
  40249e:	3301      	adds	r3, #1
  4024a0:	60bb      	str	r3, [r7, #8]
  4024a2:	68bb      	ldr	r3, [r7, #8]
  4024a4:	2b13      	cmp	r3, #19
  4024a6:	d9f8      	bls.n	40249a <udd_ep_alloc+0x15a>
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  4024a8:	2301      	movs	r3, #1
}
  4024aa:	4618      	mov	r0, r3
  4024ac:	371c      	adds	r7, #28
  4024ae:	46bd      	mov	sp, r7
  4024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024b4:	4770      	bx	lr
  4024b6:	bf00      	nop
  4024b8:	40034000 	.word	0x40034000
  4024bc:	20000dc4 	.word	0x20000dc4

004024c0 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  4024c0:	b580      	push	{r7, lr}
  4024c2:	b084      	sub	sp, #16
  4024c4:	af00      	add	r7, sp, #0
  4024c6:	4603      	mov	r3, r0
  4024c8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4024ca:	79fb      	ldrb	r3, [r7, #7]
  4024cc:	f003 030f 	and.w	r3, r3, #15
  4024d0:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep_index) {
  4024d2:	7bfb      	ldrb	r3, [r7, #15]
  4024d4:	2b03      	cmp	r3, #3
  4024d6:	d900      	bls.n	4024da <udd_ep_free+0x1a>
		return;
  4024d8:	e00f      	b.n	4024fa <udd_ep_free+0x3a>
	}
	udd_disable_endpoint(ep_index);
  4024da:	4b09      	ldr	r3, [pc, #36]	; (402500 <udd_ep_free+0x40>)
  4024dc:	7bfa      	ldrb	r2, [r7, #15]
  4024de:	4908      	ldr	r1, [pc, #32]	; (402500 <udd_ep_free+0x40>)
  4024e0:	7bf8      	ldrb	r0, [r7, #15]
  4024e2:	300c      	adds	r0, #12
  4024e4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4024e8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  4024ec:	320c      	adds	r2, #12
  4024ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	udd_ep_abort_job(ep);
  4024f2:	79fb      	ldrb	r3, [r7, #7]
  4024f4:	4618      	mov	r0, r3
  4024f6:	4b03      	ldr	r3, [pc, #12]	; (402504 <udd_ep_free+0x44>)
  4024f8:	4798      	blx	r3
}
  4024fa:	3710      	adds	r7, #16
  4024fc:	46bd      	mov	sp, r7
  4024fe:	bd80      	pop	{r7, pc}
  402500:	40034000 	.word	0x40034000
  402504:	00403471 	.word	0x00403471

00402508 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
  402508:	b480      	push	{r7}
  40250a:	b085      	sub	sp, #20
  40250c:	af00      	add	r7, sp, #0
  40250e:	4603      	mov	r3, r0
  402510:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402512:	79fb      	ldrb	r3, [r7, #7]
  402514:	f003 030f 	and.w	r3, r3, #15
  402518:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40251a:	7bfb      	ldrb	r3, [r7, #15]
  40251c:	1e5a      	subs	r2, r3, #1
  40251e:	4613      	mov	r3, r2
  402520:	009b      	lsls	r3, r3, #2
  402522:	4413      	add	r3, r2
  402524:	009b      	lsls	r3, r3, #2
  402526:	4a13      	ldr	r2, [pc, #76]	; (402574 <udd_ep_is_halted+0x6c>)
  402528:	4413      	add	r3, r2
  40252a:	60bb      	str	r3, [r7, #8]
	if (USB_DEVICE_MAX_EP < ep_index) {
  40252c:	7bfb      	ldrb	r3, [r7, #15]
  40252e:	2b03      	cmp	r3, #3
  402530:	d901      	bls.n	402536 <udd_ep_is_halted+0x2e>
		return false;
  402532:	2300      	movs	r3, #0
  402534:	e017      	b.n	402566 <udd_ep_is_halted+0x5e>
	}
	return ptr_job->b_stall_requested ||
  402536:	68bb      	ldr	r3, [r7, #8]
  402538:	7c5b      	ldrb	r3, [r3, #17]
  40253a:	f3c3 1340 	ubfx	r3, r3, #5, #1
  40253e:	b2db      	uxtb	r3, r3
  402540:	2b00      	cmp	r3, #0
  402542:	d10a      	bne.n	40255a <udd_ep_is_halted+0x52>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402544:	4b0c      	ldr	r3, [pc, #48]	; (402578 <udd_ep_is_halted+0x70>)
  402546:	79fa      	ldrb	r2, [r7, #7]
  402548:	f002 020f 	and.w	r2, r2, #15
  40254c:	320c      	adds	r2, #12
  40254e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402552:	f003 0328 	and.w	r3, r3, #40	; 0x28
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402556:	2b00      	cmp	r3, #0
  402558:	d001      	beq.n	40255e <udd_ep_is_halted+0x56>
  40255a:	2301      	movs	r3, #1
  40255c:	e000      	b.n	402560 <udd_ep_is_halted+0x58>
  40255e:	2300      	movs	r3, #0
  402560:	f003 0301 	and.w	r3, r3, #1
  402564:	b2db      	uxtb	r3, r3
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  402566:	4618      	mov	r0, r3
  402568:	3714      	adds	r7, #20
  40256a:	46bd      	mov	sp, r7
  40256c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402570:	4770      	bx	lr
  402572:	bf00      	nop
  402574:	20000dc4 	.word	0x20000dc4
  402578:	40034000 	.word	0x40034000

0040257c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  40257c:	b580      	push	{r7, lr}
  40257e:	b088      	sub	sp, #32
  402580:	af00      	add	r7, sp, #0
  402582:	4603      	mov	r3, r0
  402584:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  402586:	79fb      	ldrb	r3, [r7, #7]
  402588:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40258c:	2b00      	cmp	r3, #0
  40258e:	bf0c      	ite	eq
  402590:	2300      	moveq	r3, #0
  402592:	2301      	movne	r3, #1
  402594:	77fb      	strb	r3, [r7, #31]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402596:	79fb      	ldrb	r3, [r7, #7]
  402598:	f003 030f 	and.w	r3, r3, #15
  40259c:	77bb      	strb	r3, [r7, #30]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40259e:	7fbb      	ldrb	r3, [r7, #30]
  4025a0:	1e5a      	subs	r2, r3, #1
  4025a2:	4613      	mov	r3, r2
  4025a4:	009b      	lsls	r3, r3, #2
  4025a6:	4413      	add	r3, r2
  4025a8:	009b      	lsls	r3, r3, #2
  4025aa:	4a2d      	ldr	r2, [pc, #180]	; (402660 <udd_ep_set_halt+0xe4>)
  4025ac:	4413      	add	r3, r2
  4025ae:	61bb      	str	r3, [r7, #24]
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  4025b0:	7fbb      	ldrb	r3, [r7, #30]
  4025b2:	2b03      	cmp	r3, #3
  4025b4:	d901      	bls.n	4025ba <udd_ep_set_halt+0x3e>
		return false;
  4025b6:	2300      	movs	r3, #0
  4025b8:	e04d      	b.n	402656 <udd_ep_set_halt+0xda>
	}
	flags = cpu_irq_save();
  4025ba:	4b2a      	ldr	r3, [pc, #168]	; (402664 <udd_ep_set_halt+0xe8>)
  4025bc:	4798      	blx	r3
  4025be:	6178      	str	r0, [r7, #20]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4025c0:	7ffb      	ldrb	r3, [r7, #31]
  4025c2:	2b00      	cmp	r3, #0
  4025c4:	d01f      	beq.n	402606 <udd_ep_set_halt+0x8a>
  4025c6:	4b28      	ldr	r3, [pc, #160]	; (402668 <udd_ep_set_halt+0xec>)
  4025c8:	7fba      	ldrb	r2, [r7, #30]
  4025ca:	320c      	adds	r2, #12
  4025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4025d0:	f003 0310 	and.w	r3, r3, #16
  4025d4:	2b00      	cmp	r3, #0
  4025d6:	d106      	bne.n	4025e6 <udd_ep_set_halt+0x6a>
				|| ptr_job->bank > 1)) {
  4025d8:	69bb      	ldr	r3, [r7, #24]
  4025da:	7c5b      	ldrb	r3, [r3, #17]
  4025dc:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4025e0:	b2db      	uxtb	r3, r3
  4025e2:	2b01      	cmp	r3, #1
  4025e4:	dd0f      	ble.n	402606 <udd_ep_set_halt+0x8a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  4025e6:	69ba      	ldr	r2, [r7, #24]
  4025e8:	7c53      	ldrb	r3, [r2, #17]
  4025ea:	f043 0320 	orr.w	r3, r3, #32
  4025ee:	7453      	strb	r3, [r2, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4025f0:	4b1d      	ldr	r3, [pc, #116]	; (402668 <udd_ep_set_halt+0xec>)
  4025f2:	7fba      	ldrb	r2, [r7, #30]
  4025f4:	2101      	movs	r1, #1
  4025f6:	fa01 f202 	lsl.w	r2, r1, r2
  4025fa:	611a      	str	r2, [r3, #16]
		cpu_irq_restore(flags);
  4025fc:	6978      	ldr	r0, [r7, #20]
  4025fe:	4b1b      	ldr	r3, [pc, #108]	; (40266c <udd_ep_set_halt+0xf0>)
  402600:	4798      	blx	r3
		return true;
  402602:	2301      	movs	r3, #1
  402604:	e027      	b.n	402656 <udd_ep_set_halt+0xda>
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  402606:	4b18      	ldr	r3, [pc, #96]	; (402668 <udd_ep_set_halt+0xec>)
  402608:	7fba      	ldrb	r2, [r7, #30]
  40260a:	320c      	adds	r2, #12
  40260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402610:	613b      	str	r3, [r7, #16]
  402612:	693b      	ldr	r3, [r7, #16]
  402614:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402618:	613b      	str	r3, [r7, #16]
  40261a:	693b      	ldr	r3, [r7, #16]
  40261c:	f043 0320 	orr.w	r3, r3, #32
  402620:	613b      	str	r3, [r7, #16]
  402622:	4b11      	ldr	r3, [pc, #68]	; (402668 <udd_ep_set_halt+0xec>)
  402624:	7fba      	ldrb	r2, [r7, #30]
  402626:	6939      	ldr	r1, [r7, #16]
  402628:	320c      	adds	r2, #12
  40262a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40262e:	2300      	movs	r3, #0
  402630:	60fb      	str	r3, [r7, #12]
  402632:	e003      	b.n	40263c <udd_ep_set_halt+0xc0>
  402634:	bf00      	nop
  402636:	68fb      	ldr	r3, [r7, #12]
  402638:	3301      	adds	r3, #1
  40263a:	60fb      	str	r3, [r7, #12]
  40263c:	68fb      	ldr	r3, [r7, #12]
  40263e:	2b13      	cmp	r3, #19
  402640:	d9f8      	bls.n	402634 <udd_ep_set_halt+0xb8>
		udd_enable_endpoint_interrupt(ep_index);
  402642:	4b09      	ldr	r3, [pc, #36]	; (402668 <udd_ep_set_halt+0xec>)
  402644:	7fba      	ldrb	r2, [r7, #30]
  402646:	2101      	movs	r1, #1
  402648:	fa01 f202 	lsl.w	r2, r1, r2
  40264c:	611a      	str	r2, [r3, #16]
		cpu_irq_restore(flags);
  40264e:	6978      	ldr	r0, [r7, #20]
  402650:	4b06      	ldr	r3, [pc, #24]	; (40266c <udd_ep_set_halt+0xf0>)
  402652:	4798      	blx	r3
	}
	return true;
  402654:	2301      	movs	r3, #1
}
  402656:	4618      	mov	r0, r3
  402658:	3720      	adds	r7, #32
  40265a:	46bd      	mov	sp, r7
  40265c:	bd80      	pop	{r7, pc}
  40265e:	bf00      	nop
  402660:	20000dc4 	.word	0x20000dc4
  402664:	00401e45 	.word	0x00401e45
  402668:	40034000 	.word	0x40034000
  40266c:	00401e9d 	.word	0x00401e9d

00402670 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  402670:	b580      	push	{r7, lr}
  402672:	b088      	sub	sp, #32
  402674:	af00      	add	r7, sp, #0
  402676:	4603      	mov	r3, r0
  402678:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  40267a:	79fb      	ldrb	r3, [r7, #7]
  40267c:	f003 030f 	and.w	r3, r3, #15
  402680:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  402682:	79fb      	ldrb	r3, [r7, #7]
  402684:	2b03      	cmp	r3, #3
  402686:	d901      	bls.n	40268c <udd_ep_clear_halt+0x1c>
		return false;
  402688:	2300      	movs	r3, #0
  40268a:	e075      	b.n	402778 <udd_ep_clear_halt+0x108>
	ptr_job = &udd_ep_job[ep - 1];
  40268c:	79fb      	ldrb	r3, [r7, #7]
  40268e:	1e5a      	subs	r2, r3, #1
  402690:	4613      	mov	r3, r2
  402692:	009b      	lsls	r3, r3, #2
  402694:	4413      	add	r3, r2
  402696:	009b      	lsls	r3, r3, #2
  402698:	4a39      	ldr	r2, [pc, #228]	; (402780 <udd_ep_clear_halt+0x110>)
  40269a:	4413      	add	r3, r2
  40269c:	61fb      	str	r3, [r7, #28]

	ptr_job->b_stall_requested = false;
  40269e:	69fa      	ldr	r2, [r7, #28]
  4026a0:	7c53      	ldrb	r3, [r2, #17]
  4026a2:	f36f 1345 	bfc	r3, #5, #1
  4026a6:	7453      	strb	r3, [r2, #17]
	if (Is_udd_endpoint_stall_requested(ep)) {
  4026a8:	4b36      	ldr	r3, [pc, #216]	; (402784 <udd_ep_clear_halt+0x114>)
  4026aa:	79fa      	ldrb	r2, [r7, #7]
  4026ac:	320c      	adds	r2, #12
  4026ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4026b2:	f003 0320 	and.w	r3, r3, #32
  4026b6:	2b00      	cmp	r3, #0
  4026b8:	d05d      	beq.n	402776 <udd_ep_clear_halt+0x106>
		// Remove stall
		udd_disable_stall_handshake(ep);
  4026ba:	4b32      	ldr	r3, [pc, #200]	; (402784 <udd_ep_clear_halt+0x114>)
  4026bc:	79fa      	ldrb	r2, [r7, #7]
  4026be:	320c      	adds	r2, #12
  4026c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4026c4:	61bb      	str	r3, [r7, #24]
  4026c6:	69bb      	ldr	r3, [r7, #24]
  4026c8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4026cc:	61bb      	str	r3, [r7, #24]
  4026ce:	69bb      	ldr	r3, [r7, #24]
  4026d0:	f023 0320 	bic.w	r3, r3, #32
  4026d4:	61bb      	str	r3, [r7, #24]
  4026d6:	4b2b      	ldr	r3, [pc, #172]	; (402784 <udd_ep_clear_halt+0x114>)
  4026d8:	79fa      	ldrb	r2, [r7, #7]
  4026da:	69b9      	ldr	r1, [r7, #24]
  4026dc:	320c      	adds	r2, #12
  4026de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4026e2:	2300      	movs	r3, #0
  4026e4:	617b      	str	r3, [r7, #20]
  4026e6:	e003      	b.n	4026f0 <udd_ep_clear_halt+0x80>
  4026e8:	bf00      	nop
  4026ea:	697b      	ldr	r3, [r7, #20]
  4026ec:	3301      	adds	r3, #1
  4026ee:	617b      	str	r3, [r7, #20]
  4026f0:	697b      	ldr	r3, [r7, #20]
  4026f2:	2b13      	cmp	r3, #19
  4026f4:	d9f8      	bls.n	4026e8 <udd_ep_clear_halt+0x78>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  4026f6:	4b23      	ldr	r3, [pc, #140]	; (402784 <udd_ep_clear_halt+0x114>)
  4026f8:	4a22      	ldr	r2, [pc, #136]	; (402784 <udd_ep_clear_halt+0x114>)
  4026fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
  4026fc:	79fa      	ldrb	r2, [r7, #7]
  4026fe:	2001      	movs	r0, #1
  402700:	fa00 f202 	lsl.w	r2, r0, r2
  402704:	430a      	orrs	r2, r1
  402706:	629a      	str	r2, [r3, #40]	; 0x28
  402708:	4b1e      	ldr	r3, [pc, #120]	; (402784 <udd_ep_clear_halt+0x114>)
  40270a:	4a1e      	ldr	r2, [pc, #120]	; (402784 <udd_ep_clear_halt+0x114>)
  40270c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  40270e:	79fa      	ldrb	r2, [r7, #7]
  402710:	2001      	movs	r0, #1
  402712:	fa00 f202 	lsl.w	r2, r0, r2
  402716:	43d2      	mvns	r2, r2
  402718:	400a      	ands	r2, r1
  40271a:	629a      	str	r2, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  40271c:	4b19      	ldr	r3, [pc, #100]	; (402784 <udd_ep_clear_halt+0x114>)
  40271e:	79fa      	ldrb	r2, [r7, #7]
  402720:	320c      	adds	r2, #12
  402722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402726:	613b      	str	r3, [r7, #16]
  402728:	693b      	ldr	r3, [r7, #16]
  40272a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40272e:	613b      	str	r3, [r7, #16]
  402730:	693b      	ldr	r3, [r7, #16]
  402732:	f023 0308 	bic.w	r3, r3, #8
  402736:	613b      	str	r3, [r7, #16]
  402738:	4b12      	ldr	r3, [pc, #72]	; (402784 <udd_ep_clear_halt+0x114>)
  40273a:	79fa      	ldrb	r2, [r7, #7]
  40273c:	6939      	ldr	r1, [r7, #16]
  40273e:	320c      	adds	r2, #12
  402740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402744:	2300      	movs	r3, #0
  402746:	60fb      	str	r3, [r7, #12]
  402748:	e003      	b.n	402752 <udd_ep_clear_halt+0xe2>
  40274a:	bf00      	nop
  40274c:	68fb      	ldr	r3, [r7, #12]
  40274e:	3301      	adds	r3, #1
  402750:	60fb      	str	r3, [r7, #12]
  402752:	68fb      	ldr	r3, [r7, #12]
  402754:	2b13      	cmp	r3, #19
  402756:	d9f8      	bls.n	40274a <udd_ep_clear_halt+0xda>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  402758:	69fb      	ldr	r3, [r7, #28]
  40275a:	7c5b      	ldrb	r3, [r3, #17]
  40275c:	f3c3 1300 	ubfx	r3, r3, #4, #1
  402760:	b2db      	uxtb	r3, r3
  402762:	2b01      	cmp	r3, #1
  402764:	d107      	bne.n	402776 <udd_ep_clear_halt+0x106>
			ptr_job->busy = false;
  402766:	69fa      	ldr	r2, [r7, #28]
  402768:	7c53      	ldrb	r3, [r2, #17]
  40276a:	f36f 1304 	bfc	r3, #4, #1
  40276e:	7453      	strb	r3, [r2, #17]
			ptr_job->call_nohalt();
  402770:	69fb      	ldr	r3, [r7, #28]
  402772:	681b      	ldr	r3, [r3, #0]
  402774:	4798      	blx	r3
		}
	}
	return true;
  402776:	2301      	movs	r3, #1
}
  402778:	4618      	mov	r0, r3
  40277a:	3720      	adds	r7, #32
  40277c:	46bd      	mov	sp, r7
  40277e:	bd80      	pop	{r7, pc}
  402780:	20000dc4 	.word	0x20000dc4
  402784:	40034000 	.word	0x40034000

00402788 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402788:	b580      	push	{r7, lr}
  40278a:	b088      	sub	sp, #32
  40278c:	af00      	add	r7, sp, #0
  40278e:	60ba      	str	r2, [r7, #8]
  402790:	607b      	str	r3, [r7, #4]
  402792:	4603      	mov	r3, r0
  402794:	73fb      	strb	r3, [r7, #15]
  402796:	460b      	mov	r3, r1
  402798:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;
  40279a:	7bfb      	ldrb	r3, [r7, #15]
  40279c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4027a0:	2b00      	cmp	r3, #0
  4027a2:	bf0c      	ite	eq
  4027a4:	2300      	moveq	r3, #0
  4027a6:	2301      	movne	r3, #1
  4027a8:	77fb      	strb	r3, [r7, #31]

	ep &= USB_EP_ADDR_MASK;
  4027aa:	7bfb      	ldrb	r3, [r7, #15]
  4027ac:	f003 030f 	and.w	r3, r3, #15
  4027b0:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
  4027b2:	7bfb      	ldrb	r3, [r7, #15]
  4027b4:	2b03      	cmp	r3, #3
  4027b6:	d901      	bls.n	4027bc <udd_ep_run+0x34>
		return false;
  4027b8:	2300      	movs	r3, #0
  4027ba:	e083      	b.n	4028c4 <udd_ep_run+0x13c>
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  4027bc:	7bfb      	ldrb	r3, [r7, #15]
  4027be:	1e5a      	subs	r2, r3, #1
  4027c0:	4613      	mov	r3, r2
  4027c2:	009b      	lsls	r3, r3, #2
  4027c4:	4413      	add	r3, r2
  4027c6:	009b      	lsls	r3, r3, #2
  4027c8:	4a40      	ldr	r2, [pc, #256]	; (4028cc <udd_ep_run+0x144>)
  4027ca:	4413      	add	r3, r2
  4027cc:	61bb      	str	r3, [r7, #24]

	if ((!Is_udd_endpoint_enabled(ep))
  4027ce:	4b40      	ldr	r3, [pc, #256]	; (4028d0 <udd_ep_run+0x148>)
  4027d0:	7bfa      	ldrb	r2, [r7, #15]
  4027d2:	320c      	adds	r2, #12
  4027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4027d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  4027dc:	2b00      	cmp	r3, #0
  4027de:	d00f      	beq.n	402800 <udd_ep_run+0x78>
			|| ptr_job->b_stall_requested
  4027e0:	69bb      	ldr	r3, [r7, #24]
  4027e2:	7c5b      	ldrb	r3, [r3, #17]
  4027e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4027e8:	b2db      	uxtb	r3, r3
  4027ea:	2b00      	cmp	r3, #0
  4027ec:	d108      	bne.n	402800 <udd_ep_run+0x78>
			|| Is_udd_endpoint_stall_requested(ep)) {
  4027ee:	4b38      	ldr	r3, [pc, #224]	; (4028d0 <udd_ep_run+0x148>)
  4027f0:	7bfa      	ldrb	r2, [r7, #15]
  4027f2:	320c      	adds	r2, #12
  4027f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4027f8:	f003 0320 	and.w	r3, r3, #32
  4027fc:	2b00      	cmp	r3, #0
  4027fe:	d001      	beq.n	402804 <udd_ep_run+0x7c>
		return false; // Endpoint is halted
  402800:	2300      	movs	r3, #0
  402802:	e05f      	b.n	4028c4 <udd_ep_run+0x13c>
	}

	flags = cpu_irq_save();
  402804:	4b33      	ldr	r3, [pc, #204]	; (4028d4 <udd_ep_run+0x14c>)
  402806:	4798      	blx	r3
  402808:	6178      	str	r0, [r7, #20]
	if (ptr_job->busy == true) {
  40280a:	69bb      	ldr	r3, [r7, #24]
  40280c:	7c5b      	ldrb	r3, [r3, #17]
  40280e:	f3c3 1300 	ubfx	r3, r3, #4, #1
  402812:	b2db      	uxtb	r3, r3
  402814:	2b01      	cmp	r3, #1
  402816:	d104      	bne.n	402822 <udd_ep_run+0x9a>
		cpu_irq_restore(flags);
  402818:	6978      	ldr	r0, [r7, #20]
  40281a:	4b2f      	ldr	r3, [pc, #188]	; (4028d8 <udd_ep_run+0x150>)
  40281c:	4798      	blx	r3
		return false; // Job already on going
  40281e:	2300      	movs	r3, #0
  402820:	e050      	b.n	4028c4 <udd_ep_run+0x13c>
	}
	ptr_job->busy = true;
  402822:	69ba      	ldr	r2, [r7, #24]
  402824:	7c53      	ldrb	r3, [r2, #17]
  402826:	f043 0310 	orr.w	r3, r3, #16
  40282a:	7453      	strb	r3, [r2, #17]
	cpu_irq_restore(flags);
  40282c:	6978      	ldr	r0, [r7, #20]
  40282e:	4b2a      	ldr	r3, [pc, #168]	; (4028d8 <udd_ep_run+0x150>)
  402830:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  402832:	69bb      	ldr	r3, [r7, #24]
  402834:	68ba      	ldr	r2, [r7, #8]
  402836:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
  402838:	69bb      	ldr	r3, [r7, #24]
  40283a:	687a      	ldr	r2, [r7, #4]
  40283c:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
  40283e:	69bb      	ldr	r3, [r7, #24]
  402840:	2200      	movs	r2, #0
  402842:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
  402844:	69bb      	ldr	r3, [r7, #24]
  402846:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402848:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  40284a:	7bbb      	ldrb	r3, [r7, #14]
  40284c:	2b00      	cmp	r3, #0
  40284e:	d102      	bne.n	402856 <udd_ep_run+0xce>
  402850:	687b      	ldr	r3, [r7, #4]
  402852:	2b00      	cmp	r3, #0
  402854:	d101      	bne.n	40285a <udd_ep_run+0xd2>
  402856:	2301      	movs	r3, #1
  402858:	e000      	b.n	40285c <udd_ep_run+0xd4>
  40285a:	2300      	movs	r3, #0
  40285c:	b2db      	uxtb	r3, r3
  40285e:	f003 0301 	and.w	r3, r3, #1
  402862:	b2d9      	uxtb	r1, r3
  402864:	69ba      	ldr	r2, [r7, #24]
  402866:	7c53      	ldrb	r3, [r2, #17]
  402868:	f361 1386 	bfi	r3, r1, #6, #1
  40286c:	7453      	strb	r3, [r2, #17]
	ptr_job->b_buf_end = false;
  40286e:	69ba      	ldr	r2, [r7, #24]
  402870:	7c53      	ldrb	r3, [r2, #17]
  402872:	f36f 13c7 	bfc	r3, #7, #1
  402876:	7453      	strb	r3, [r2, #17]

	flags = cpu_irq_save();
  402878:	4b16      	ldr	r3, [pc, #88]	; (4028d4 <udd_ep_run+0x14c>)
  40287a:	4798      	blx	r3
  40287c:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(ep);
  40287e:	4b14      	ldr	r3, [pc, #80]	; (4028d0 <udd_ep_run+0x148>)
  402880:	7bfa      	ldrb	r2, [r7, #15]
  402882:	2101      	movs	r1, #1
  402884:	fa01 f202 	lsl.w	r2, r1, r2
  402888:	611a      	str	r2, [r3, #16]
	// Request first transfer
	if (b_dir_in) {
  40288a:	7ffb      	ldrb	r3, [r7, #31]
  40288c:	2b00      	cmp	r3, #0
  40288e:	d015      	beq.n	4028bc <udd_ep_run+0x134>
		if (Is_udd_in_pending(ep)) {
  402890:	4b0f      	ldr	r3, [pc, #60]	; (4028d0 <udd_ep_run+0x148>)
  402892:	7bfa      	ldrb	r2, [r7, #15]
  402894:	320c      	adds	r2, #12
  402896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40289a:	f003 0311 	and.w	r3, r3, #17
  40289e:	2b00      	cmp	r3, #0
  4028a0:	d10c      	bne.n	4028bc <udd_ep_run+0x134>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  4028a2:	7bfb      	ldrb	r3, [r7, #15]
  4028a4:	4618      	mov	r0, r3
  4028a6:	2101      	movs	r1, #1
  4028a8:	4b0c      	ldr	r3, [pc, #48]	; (4028dc <udd_ep_run+0x154>)
  4028aa:	4798      	blx	r3
  4028ac:	4603      	mov	r3, r0
  4028ae:	2b00      	cmp	r3, #0
  4028b0:	d004      	beq.n	4028bc <udd_ep_run+0x134>
				// Over one bank
				udd_ep_in_sent(ep, false);
  4028b2:	7bfb      	ldrb	r3, [r7, #15]
  4028b4:	4618      	mov	r0, r3
  4028b6:	2100      	movs	r1, #0
  4028b8:	4b08      	ldr	r3, [pc, #32]	; (4028dc <udd_ep_run+0x154>)
  4028ba:	4798      	blx	r3
			}
		}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);
  4028bc:	6978      	ldr	r0, [r7, #20]
  4028be:	4b06      	ldr	r3, [pc, #24]	; (4028d8 <udd_ep_run+0x150>)
  4028c0:	4798      	blx	r3

	return true;
  4028c2:	2301      	movs	r3, #1
}
  4028c4:	4618      	mov	r0, r3
  4028c6:	3720      	adds	r7, #32
  4028c8:	46bd      	mov	sp, r7
  4028ca:	bd80      	pop	{r7, pc}
  4028cc:	20000dc4 	.word	0x20000dc4
  4028d0:	40034000 	.word	0x40034000
  4028d4:	00401e45 	.word	0x00401e45
  4028d8:	00401e9d 	.word	0x00401e9d
  4028dc:	004037a5 	.word	0x004037a5

004028e0 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  4028e0:	b580      	push	{r7, lr}
  4028e2:	b088      	sub	sp, #32
  4028e4:	af00      	add	r7, sp, #0
  4028e6:	4603      	mov	r3, r0
  4028e8:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  4028ea:	79fb      	ldrb	r3, [r7, #7]
  4028ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4028f0:	2b00      	cmp	r3, #0
  4028f2:	bf0c      	ite	eq
  4028f4:	2300      	moveq	r3, #0
  4028f6:	2301      	movne	r3, #1
  4028f8:	77fb      	strb	r3, [r7, #31]
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  4028fa:	79fb      	ldrb	r3, [r7, #7]
  4028fc:	f003 030f 	and.w	r3, r3, #15
  402900:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  402902:	79fb      	ldrb	r3, [r7, #7]
  402904:	2b03      	cmp	r3, #3
  402906:	d900      	bls.n	40290a <udd_ep_abort+0x2a>
		return;
  402908:	e0ba      	b.n	402a80 <udd_ep_abort+0x1a0>

	// Disable interrupts
	flags = cpu_irq_save();
  40290a:	4b5f      	ldr	r3, [pc, #380]	; (402a88 <udd_ep_abort+0x1a8>)
  40290c:	4798      	blx	r3
  40290e:	61b8      	str	r0, [r7, #24]
	udd_disable_endpoint_interrupt(ep);
  402910:	4b5e      	ldr	r3, [pc, #376]	; (402a8c <udd_ep_abort+0x1ac>)
  402912:	79fa      	ldrb	r2, [r7, #7]
  402914:	2101      	movs	r1, #1
  402916:	fa01 f202 	lsl.w	r2, r1, r2
  40291a:	615a      	str	r2, [r3, #20]
	cpu_irq_restore(flags);
  40291c:	69b8      	ldr	r0, [r7, #24]
  40291e:	4b5c      	ldr	r3, [pc, #368]	; (402a90 <udd_ep_abort+0x1b0>)
  402920:	4798      	blx	r3
	// Clear pending statuses
	if (b_dir_in) {
  402922:	7ffb      	ldrb	r3, [r7, #31]
  402924:	2b00      	cmp	r3, #0
  402926:	f000 8086 	beq.w	402a36 <udd_ep_abort+0x156>
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  40292a:	4b58      	ldr	r3, [pc, #352]	; (402a8c <udd_ep_abort+0x1ac>)
  40292c:	79fa      	ldrb	r2, [r7, #7]
  40292e:	320c      	adds	r2, #12
  402930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402934:	f003 0310 	and.w	r3, r3, #16
  402938:	2b00      	cmp	r3, #0
  40293a:	d04f      	beq.n	4029dc <udd_ep_abort+0xfc>
			udd_kill_data_in_fifo(ep,
  40293c:	79fb      	ldrb	r3, [r7, #7]
  40293e:	2b00      	cmp	r3, #0
  402940:	d02e      	beq.n	4029a0 <udd_ep_abort+0xc0>
  402942:	79fb      	ldrb	r3, [r7, #7]
  402944:	2b03      	cmp	r3, #3
  402946:	d02b      	beq.n	4029a0 <udd_ep_abort+0xc0>
  402948:	4b50      	ldr	r3, [pc, #320]	; (402a8c <udd_ep_abort+0x1ac>)
  40294a:	79fa      	ldrb	r2, [r7, #7]
  40294c:	494f      	ldr	r1, [pc, #316]	; (402a8c <udd_ep_abort+0x1ac>)
  40294e:	79f8      	ldrb	r0, [r7, #7]
  402950:	300c      	adds	r0, #12
  402952:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  402956:	f021 0110 	bic.w	r1, r1, #16
  40295a:	320c      	adds	r2, #12
  40295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402960:	bf00      	nop
  402962:	4b4a      	ldr	r3, [pc, #296]	; (402a8c <udd_ep_abort+0x1ac>)
  402964:	79fa      	ldrb	r2, [r7, #7]
  402966:	320c      	adds	r2, #12
  402968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40296c:	f003 0310 	and.w	r3, r3, #16
  402970:	2b00      	cmp	r3, #0
  402972:	d1f6      	bne.n	402962 <udd_ep_abort+0x82>
  402974:	4b45      	ldr	r3, [pc, #276]	; (402a8c <udd_ep_abort+0x1ac>)
  402976:	79fa      	ldrb	r2, [r7, #7]
  402978:	4944      	ldr	r1, [pc, #272]	; (402a8c <udd_ep_abort+0x1ac>)
  40297a:	79f8      	ldrb	r0, [r7, #7]
  40297c:	300c      	adds	r0, #12
  40297e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  402982:	f041 0110 	orr.w	r1, r1, #16
  402986:	320c      	adds	r2, #12
  402988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40298c:	bf00      	nop
  40298e:	4b3f      	ldr	r3, [pc, #252]	; (402a8c <udd_ep_abort+0x1ac>)
  402990:	79fa      	ldrb	r2, [r7, #7]
  402992:	320c      	adds	r2, #12
  402994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402998:	f003 0310 	and.w	r3, r3, #16
  40299c:	2b00      	cmp	r3, #0
  40299e:	d0f6      	beq.n	40298e <udd_ep_abort+0xae>
  4029a0:	4b3a      	ldr	r3, [pc, #232]	; (402a8c <udd_ep_abort+0x1ac>)
  4029a2:	79fa      	ldrb	r2, [r7, #7]
  4029a4:	320c      	adds	r2, #12
  4029a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4029aa:	617b      	str	r3, [r7, #20]
  4029ac:	697b      	ldr	r3, [r7, #20]
  4029ae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4029b2:	617b      	str	r3, [r7, #20]
  4029b4:	697b      	ldr	r3, [r7, #20]
  4029b6:	f023 0310 	bic.w	r3, r3, #16
  4029ba:	617b      	str	r3, [r7, #20]
  4029bc:	4b33      	ldr	r3, [pc, #204]	; (402a8c <udd_ep_abort+0x1ac>)
  4029be:	79fa      	ldrb	r2, [r7, #7]
  4029c0:	6979      	ldr	r1, [r7, #20]
  4029c2:	320c      	adds	r2, #12
  4029c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4029c8:	2300      	movs	r3, #0
  4029ca:	613b      	str	r3, [r7, #16]
  4029cc:	e003      	b.n	4029d6 <udd_ep_abort+0xf6>
  4029ce:	bf00      	nop
  4029d0:	693b      	ldr	r3, [r7, #16]
  4029d2:	3301      	adds	r3, #1
  4029d4:	613b      	str	r3, [r7, #16]
  4029d6:	693b      	ldr	r3, [r7, #16]
  4029d8:	2b13      	cmp	r3, #19
  4029da:	d9f8      	bls.n	4029ce <udd_ep_abort+0xee>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  4029dc:	4b2b      	ldr	r3, [pc, #172]	; (402a8c <udd_ep_abort+0x1ac>)
  4029de:	79fa      	ldrb	r2, [r7, #7]
  4029e0:	320c      	adds	r2, #12
  4029e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4029e6:	60fb      	str	r3, [r7, #12]
  4029e8:	68fb      	ldr	r3, [r7, #12]
  4029ea:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4029ee:	60fb      	str	r3, [r7, #12]
  4029f0:	68fb      	ldr	r3, [r7, #12]
  4029f2:	f023 0301 	bic.w	r3, r3, #1
  4029f6:	60fb      	str	r3, [r7, #12]
  4029f8:	4b24      	ldr	r3, [pc, #144]	; (402a8c <udd_ep_abort+0x1ac>)
  4029fa:	79fa      	ldrb	r2, [r7, #7]
  4029fc:	68f9      	ldr	r1, [r7, #12]
  4029fe:	320c      	adds	r2, #12
  402a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402a04:	2300      	movs	r3, #0
  402a06:	60bb      	str	r3, [r7, #8]
  402a08:	e003      	b.n	402a12 <udd_ep_abort+0x132>
  402a0a:	bf00      	nop
  402a0c:	68bb      	ldr	r3, [r7, #8]
  402a0e:	3301      	adds	r3, #1
  402a10:	60bb      	str	r3, [r7, #8]
  402a12:	68bb      	ldr	r3, [r7, #8]
  402a14:	2b13      	cmp	r3, #19
  402a16:	d9f8      	bls.n	402a0a <udd_ep_abort+0x12a>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  402a18:	79fb      	ldrb	r3, [r7, #7]
  402a1a:	1e5a      	subs	r2, r3, #1
  402a1c:	491d      	ldr	r1, [pc, #116]	; (402a94 <udd_ep_abort+0x1b4>)
  402a1e:	4613      	mov	r3, r2
  402a20:	009b      	lsls	r3, r3, #2
  402a22:	4413      	add	r3, r2
  402a24:	009b      	lsls	r3, r3, #2
  402a26:	440b      	add	r3, r1
  402a28:	f103 0210 	add.w	r2, r3, #16
  402a2c:	7853      	ldrb	r3, [r2, #1]
  402a2e:	f36f 0383 	bfc	r3, #2, #2
  402a32:	7053      	strb	r3, [r2, #1]
  402a34:	e00d      	b.n	402a52 <udd_ep_abort+0x172>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  402a36:	e003      	b.n	402a40 <udd_ep_abort+0x160>
			udd_ep_ack_out_received(ep);
  402a38:	79fb      	ldrb	r3, [r7, #7]
  402a3a:	4618      	mov	r0, r3
  402a3c:	4b16      	ldr	r3, [pc, #88]	; (402a98 <udd_ep_abort+0x1b8>)
  402a3e:	4798      	blx	r3
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  402a40:	4b12      	ldr	r3, [pc, #72]	; (402a8c <udd_ep_abort+0x1ac>)
  402a42:	79fa      	ldrb	r2, [r7, #7]
  402a44:	320c      	adds	r2, #12
  402a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402a4a:	f003 0342 	and.w	r3, r3, #66	; 0x42
  402a4e:	2b00      	cmp	r3, #0
  402a50:	d1f2      	bne.n	402a38 <udd_ep_abort+0x158>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  402a52:	4b0e      	ldr	r3, [pc, #56]	; (402a8c <udd_ep_abort+0x1ac>)
  402a54:	4a0d      	ldr	r2, [pc, #52]	; (402a8c <udd_ep_abort+0x1ac>)
  402a56:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402a58:	79fa      	ldrb	r2, [r7, #7]
  402a5a:	2001      	movs	r0, #1
  402a5c:	fa00 f202 	lsl.w	r2, r0, r2
  402a60:	430a      	orrs	r2, r1
  402a62:	629a      	str	r2, [r3, #40]	; 0x28
  402a64:	4b09      	ldr	r3, [pc, #36]	; (402a8c <udd_ep_abort+0x1ac>)
  402a66:	4a09      	ldr	r2, [pc, #36]	; (402a8c <udd_ep_abort+0x1ac>)
  402a68:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402a6a:	79fa      	ldrb	r2, [r7, #7]
  402a6c:	2001      	movs	r0, #1
  402a6e:	fa00 f202 	lsl.w	r2, r0, r2
  402a72:	43d2      	mvns	r2, r2
  402a74:	400a      	ands	r2, r1
  402a76:	629a      	str	r2, [r3, #40]	; 0x28
	// Abort job
	udd_ep_abort_job(ep);
  402a78:	79fb      	ldrb	r3, [r7, #7]
  402a7a:	4618      	mov	r0, r3
  402a7c:	4b07      	ldr	r3, [pc, #28]	; (402a9c <udd_ep_abort+0x1bc>)
  402a7e:	4798      	blx	r3
}
  402a80:	3720      	adds	r7, #32
  402a82:	46bd      	mov	sp, r7
  402a84:	bd80      	pop	{r7, pc}
  402a86:	bf00      	nop
  402a88:	00401e45 	.word	0x00401e45
  402a8c:	40034000 	.word	0x40034000
  402a90:	00401e9d 	.word	0x00401e9d
  402a94:	20000dc4 	.word	0x20000dc4
  402a98:	0040351d 	.word	0x0040351d
  402a9c:	00403471 	.word	0x00403471

00402aa0 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
  402aa0:	b580      	push	{r7, lr}
  402aa2:	b086      	sub	sp, #24
  402aa4:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  402aa6:	4b27      	ldr	r3, [pc, #156]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402aa8:	4a26      	ldr	r2, [pc, #152]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402aaa:	6892      	ldr	r2, [r2, #8]
  402aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402ab0:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  402ab2:	4b24      	ldr	r3, [pc, #144]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402ab4:	4a23      	ldr	r2, [pc, #140]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402ab6:	6892      	ldr	r2, [r2, #8]
  402ab8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  402abc:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  402abe:	4b21      	ldr	r3, [pc, #132]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ac2:	613b      	str	r3, [r7, #16]
  402ac4:	693b      	ldr	r3, [r7, #16]
  402ac6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402aca:	613b      	str	r3, [r7, #16]
  402acc:	693b      	ldr	r3, [r7, #16]
  402ace:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  402ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402ad6:	613b      	str	r3, [r7, #16]
  402ad8:	693b      	ldr	r3, [r7, #16]
  402ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402ade:	613b      	str	r3, [r7, #16]
  402ae0:	4b18      	ldr	r3, [pc, #96]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402ae2:	693a      	ldr	r2, [r7, #16]
  402ae4:	631a      	str	r2, [r3, #48]	; 0x30
  402ae6:	2300      	movs	r3, #0
  402ae8:	60fb      	str	r3, [r7, #12]
  402aea:	e003      	b.n	402af4 <udd_reset_ep_ctrl+0x54>
  402aec:	bf00      	nop
  402aee:	68fb      	ldr	r3, [r7, #12]
  402af0:	3301      	adds	r3, #1
  402af2:	60fb      	str	r3, [r7, #12]
  402af4:	68fb      	ldr	r3, [r7, #12]
  402af6:	2b13      	cmp	r3, #19
  402af8:	d9f8      	bls.n	402aec <udd_reset_ep_ctrl+0x4c>
	udd_enable_endpoint(0);
  402afa:	4b12      	ldr	r3, [pc, #72]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402afe:	60bb      	str	r3, [r7, #8]
  402b00:	68bb      	ldr	r3, [r7, #8]
  402b02:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402b06:	60bb      	str	r3, [r7, #8]
  402b08:	68bb      	ldr	r3, [r7, #8]
  402b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402b0e:	60bb      	str	r3, [r7, #8]
  402b10:	4b0c      	ldr	r3, [pc, #48]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402b12:	68ba      	ldr	r2, [r7, #8]
  402b14:	631a      	str	r2, [r3, #48]	; 0x30
  402b16:	2300      	movs	r3, #0
  402b18:	607b      	str	r3, [r7, #4]
  402b1a:	e003      	b.n	402b24 <udd_reset_ep_ctrl+0x84>
  402b1c:	bf00      	nop
  402b1e:	687b      	ldr	r3, [r7, #4]
  402b20:	3301      	adds	r3, #1
  402b22:	607b      	str	r3, [r7, #4]
  402b24:	687b      	ldr	r3, [r7, #4]
  402b26:	2b13      	cmp	r3, #19
  402b28:	d9f8      	bls.n	402b1c <udd_reset_ep_ctrl+0x7c>

	flags = cpu_irq_save();
  402b2a:	4b07      	ldr	r3, [pc, #28]	; (402b48 <udd_reset_ep_ctrl+0xa8>)
  402b2c:	4798      	blx	r3
  402b2e:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(0);
  402b30:	4b04      	ldr	r3, [pc, #16]	; (402b44 <udd_reset_ep_ctrl+0xa4>)
  402b32:	2201      	movs	r2, #1
  402b34:	611a      	str	r2, [r3, #16]
	cpu_irq_restore(flags);
  402b36:	6978      	ldr	r0, [r7, #20]
  402b38:	4b04      	ldr	r3, [pc, #16]	; (402b4c <udd_reset_ep_ctrl+0xac>)
  402b3a:	4798      	blx	r3
}
  402b3c:	3718      	adds	r7, #24
  402b3e:	46bd      	mov	sp, r7
  402b40:	bd80      	pop	{r7, pc}
  402b42:	bf00      	nop
  402b44:	40034000 	.word	0x40034000
  402b48:	00401e45 	.word	0x00401e45
  402b4c:	00401e9d 	.word	0x00401e9d

00402b50 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
  402b50:	b480      	push	{r7}
  402b52:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.callback = NULL;
  402b54:	4b07      	ldr	r3, [pc, #28]	; (402b74 <udd_ctrl_init+0x24>)
  402b56:	2200      	movs	r2, #0
  402b58:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  402b5a:	4b06      	ldr	r3, [pc, #24]	; (402b74 <udd_ctrl_init+0x24>)
  402b5c:	2200      	movs	r2, #0
  402b5e:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
  402b60:	4b04      	ldr	r3, [pc, #16]	; (402b74 <udd_ctrl_init+0x24>)
  402b62:	2200      	movs	r2, #0
  402b64:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  402b66:	4b04      	ldr	r3, [pc, #16]	; (402b78 <udd_ctrl_init+0x28>)
  402b68:	2200      	movs	r2, #0
  402b6a:	701a      	strb	r2, [r3, #0]
}
  402b6c:	46bd      	mov	sp, r7
  402b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b72:	4770      	bx	lr
  402b74:	20008954 	.word	0x20008954
  402b78:	20000dbf 	.word	0x20000dbf

00402b7c <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
  402b7c:	b580      	push	{r7, lr}
  402b7e:	b08c      	sub	sp, #48	; 0x30
  402b80:	af00      	add	r7, sp, #0
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  402b82:	4b6d      	ldr	r3, [pc, #436]	; (402d38 <udd_ctrl_setup_received+0x1bc>)
  402b84:	781b      	ldrb	r3, [r3, #0]
  402b86:	2b00      	cmp	r3, #0
  402b88:	d003      	beq.n	402b92 <udd_ctrl_setup_received+0x16>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  402b8a:	4b6c      	ldr	r3, [pc, #432]	; (402d3c <udd_ctrl_setup_received+0x1c0>)
  402b8c:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  402b8e:	4b6c      	ldr	r3, [pc, #432]	; (402d40 <udd_ctrl_setup_received+0x1c4>)
  402b90:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  402b92:	4b6c      	ldr	r3, [pc, #432]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b96:	4b6c      	ldr	r3, [pc, #432]	; (402d48 <udd_ctrl_setup_received+0x1cc>)
  402b98:	4013      	ands	r3, r2
  402b9a:	0c1b      	lsrs	r3, r3, #16
  402b9c:	2b08      	cmp	r3, #8
  402b9e:	d01a      	beq.n	402bd6 <udd_ctrl_setup_received+0x5a>
		udd_ack_setup_received(0);
  402ba0:	4b68      	ldr	r3, [pc, #416]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  402ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402ba8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402bac:	62bb      	str	r3, [r7, #40]	; 0x28
  402bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402bb0:	f023 0304 	bic.w	r3, r3, #4
  402bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  402bb6:	4b63      	ldr	r3, [pc, #396]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402bba:	631a      	str	r2, [r3, #48]	; 0x30
  402bbc:	2300      	movs	r3, #0
  402bbe:	627b      	str	r3, [r7, #36]	; 0x24
  402bc0:	e003      	b.n	402bca <udd_ctrl_setup_received+0x4e>
  402bc2:	bf00      	nop
  402bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402bc6:	3301      	adds	r3, #1
  402bc8:	627b      	str	r3, [r7, #36]	; 0x24
  402bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402bcc:	2b13      	cmp	r3, #19
  402bce:	d9f8      	bls.n	402bc2 <udd_ctrl_setup_received+0x46>
		udd_ctrl_stall_data();
  402bd0:	4b5e      	ldr	r3, [pc, #376]	; (402d4c <udd_ctrl_setup_received+0x1d0>)
  402bd2:	4798      	blx	r3
		return; // Error data number doesn't correspond to SETUP packet
  402bd4:	e0ad      	b.n	402d32 <udd_ctrl_setup_received+0x1b6>
	}
	for (i = 0; i < 8; i++) {
  402bd6:	2300      	movs	r3, #0
  402bd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  402bdc:	e00c      	b.n	402bf8 <udd_ctrl_setup_received+0x7c>
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  402bde:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  402be2:	4b5b      	ldr	r3, [pc, #364]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402be4:	4413      	add	r3, r2
			udd_endpoint_fifo_read(0);
  402be6:	4a57      	ldr	r2, [pc, #348]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402be8:	6d12      	ldr	r2, [r2, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  402bea:	b2d2      	uxtb	r2, r2
  402bec:	701a      	strb	r2, [r3, #0]
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  402bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  402bf2:	3301      	adds	r3, #1
  402bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  402bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  402bfc:	2b07      	cmp	r3, #7
  402bfe:	d9ee      	bls.n	402bde <udd_ctrl_setup_received+0x62>
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
  402c00:	4b53      	ldr	r3, [pc, #332]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c02:	885a      	ldrh	r2, [r3, #2]
  402c04:	4b52      	ldr	r3, [pc, #328]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c06:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
  402c08:	4b51      	ldr	r3, [pc, #324]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c0a:	889a      	ldrh	r2, [r3, #4]
  402c0c:	4b50      	ldr	r3, [pc, #320]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c0e:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
  402c10:	4b4f      	ldr	r3, [pc, #316]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c12:	88da      	ldrh	r2, [r3, #6]
  402c14:	4b4e      	ldr	r3, [pc, #312]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c16:	80da      	strh	r2, [r3, #6]

	// Decode setup request
	if (udc_process_setup() == false) {
  402c18:	4b4e      	ldr	r3, [pc, #312]	; (402d54 <udd_ctrl_setup_received+0x1d8>)
  402c1a:	4798      	blx	r3
  402c1c:	4603      	mov	r3, r0
  402c1e:	f083 0301 	eor.w	r3, r3, #1
  402c22:	b2db      	uxtb	r3, r3
  402c24:	2b00      	cmp	r3, #0
  402c26:	d01a      	beq.n	402c5e <udd_ctrl_setup_received+0xe2>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  402c28:	4b46      	ldr	r3, [pc, #280]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c2c:	623b      	str	r3, [r7, #32]
  402c2e:	6a3b      	ldr	r3, [r7, #32]
  402c30:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c34:	623b      	str	r3, [r7, #32]
  402c36:	6a3b      	ldr	r3, [r7, #32]
  402c38:	f023 0304 	bic.w	r3, r3, #4
  402c3c:	623b      	str	r3, [r7, #32]
  402c3e:	4b41      	ldr	r3, [pc, #260]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402c40:	6a3a      	ldr	r2, [r7, #32]
  402c42:	631a      	str	r2, [r3, #48]	; 0x30
  402c44:	2300      	movs	r3, #0
  402c46:	61fb      	str	r3, [r7, #28]
  402c48:	e003      	b.n	402c52 <udd_ctrl_setup_received+0xd6>
  402c4a:	bf00      	nop
  402c4c:	69fb      	ldr	r3, [r7, #28]
  402c4e:	3301      	adds	r3, #1
  402c50:	61fb      	str	r3, [r7, #28]
  402c52:	69fb      	ldr	r3, [r7, #28]
  402c54:	2b13      	cmp	r3, #19
  402c56:	d9f8      	bls.n	402c4a <udd_ctrl_setup_received+0xce>
		udd_ctrl_stall_data();
  402c58:	4b3c      	ldr	r3, [pc, #240]	; (402d4c <udd_ctrl_setup_received+0x1d0>)
  402c5a:	4798      	blx	r3
		return;
  402c5c:	e069      	b.n	402d32 <udd_ctrl_setup_received+0x1b6>
	}

	if (Udd_setup_is_in()) {
  402c5e:	4b3c      	ldr	r3, [pc, #240]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402c60:	781b      	ldrb	r3, [r3, #0]
  402c62:	b2db      	uxtb	r3, r3
  402c64:	b25b      	sxtb	r3, r3
  402c66:	2b00      	cmp	r3, #0
  402c68:	da3b      	bge.n	402ce2 <udd_ctrl_setup_received+0x166>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  402c6a:	4b36      	ldr	r3, [pc, #216]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c6e:	61bb      	str	r3, [r7, #24]
  402c70:	69bb      	ldr	r3, [r7, #24]
  402c72:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c76:	61bb      	str	r3, [r7, #24]
  402c78:	69bb      	ldr	r3, [r7, #24]
  402c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402c7e:	61bb      	str	r3, [r7, #24]
  402c80:	4b30      	ldr	r3, [pc, #192]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402c82:	69ba      	ldr	r2, [r7, #24]
  402c84:	631a      	str	r2, [r3, #48]	; 0x30
  402c86:	2300      	movs	r3, #0
  402c88:	617b      	str	r3, [r7, #20]
  402c8a:	e003      	b.n	402c94 <udd_ctrl_setup_received+0x118>
  402c8c:	bf00      	nop
  402c8e:	697b      	ldr	r3, [r7, #20]
  402c90:	3301      	adds	r3, #1
  402c92:	617b      	str	r3, [r7, #20]
  402c94:	697b      	ldr	r3, [r7, #20]
  402c96:	2b13      	cmp	r3, #19
  402c98:	d9f8      	bls.n	402c8c <udd_ctrl_setup_received+0x110>
		udd_ack_setup_received(0);
  402c9a:	4b2a      	ldr	r3, [pc, #168]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c9e:	613b      	str	r3, [r7, #16]
  402ca0:	693b      	ldr	r3, [r7, #16]
  402ca2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402ca6:	613b      	str	r3, [r7, #16]
  402ca8:	693b      	ldr	r3, [r7, #16]
  402caa:	f023 0304 	bic.w	r3, r3, #4
  402cae:	613b      	str	r3, [r7, #16]
  402cb0:	4b24      	ldr	r3, [pc, #144]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402cb2:	693a      	ldr	r2, [r7, #16]
  402cb4:	631a      	str	r2, [r3, #48]	; 0x30
  402cb6:	2300      	movs	r3, #0
  402cb8:	60fb      	str	r3, [r7, #12]
  402cba:	e003      	b.n	402cc4 <udd_ctrl_setup_received+0x148>
  402cbc:	bf00      	nop
  402cbe:	68fb      	ldr	r3, [r7, #12]
  402cc0:	3301      	adds	r3, #1
  402cc2:	60fb      	str	r3, [r7, #12]
  402cc4:	68fb      	ldr	r3, [r7, #12]
  402cc6:	2b13      	cmp	r3, #19
  402cc8:	d9f8      	bls.n	402cbc <udd_ctrl_setup_received+0x140>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  402cca:	4b23      	ldr	r3, [pc, #140]	; (402d58 <udd_ctrl_setup_received+0x1dc>)
  402ccc:	2200      	movs	r2, #0
  402cce:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  402cd0:	4b22      	ldr	r3, [pc, #136]	; (402d5c <udd_ctrl_setup_received+0x1e0>)
  402cd2:	2200      	movs	r2, #0
  402cd4:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  402cd6:	4b18      	ldr	r3, [pc, #96]	; (402d38 <udd_ctrl_setup_received+0x1bc>)
  402cd8:	2202      	movs	r2, #2
  402cda:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  402cdc:	4b20      	ldr	r3, [pc, #128]	; (402d60 <udd_ctrl_setup_received+0x1e4>)
  402cde:	4798      	blx	r3
  402ce0:	e027      	b.n	402d32 <udd_ctrl_setup_received+0x1b6>
	} else {
		udd_ack_setup_received(0);
  402ce2:	4b18      	ldr	r3, [pc, #96]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ce6:	60bb      	str	r3, [r7, #8]
  402ce8:	68bb      	ldr	r3, [r7, #8]
  402cea:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402cee:	60bb      	str	r3, [r7, #8]
  402cf0:	68bb      	ldr	r3, [r7, #8]
  402cf2:	f023 0304 	bic.w	r3, r3, #4
  402cf6:	60bb      	str	r3, [r7, #8]
  402cf8:	4b12      	ldr	r3, [pc, #72]	; (402d44 <udd_ctrl_setup_received+0x1c8>)
  402cfa:	68ba      	ldr	r2, [r7, #8]
  402cfc:	631a      	str	r2, [r3, #48]	; 0x30
  402cfe:	2300      	movs	r3, #0
  402d00:	607b      	str	r3, [r7, #4]
  402d02:	e003      	b.n	402d0c <udd_ctrl_setup_received+0x190>
  402d04:	bf00      	nop
  402d06:	687b      	ldr	r3, [r7, #4]
  402d08:	3301      	adds	r3, #1
  402d0a:	607b      	str	r3, [r7, #4]
  402d0c:	687b      	ldr	r3, [r7, #4]
  402d0e:	2b13      	cmp	r3, #19
  402d10:	d9f8      	bls.n	402d04 <udd_ctrl_setup_received+0x188>
		if (0 == udd_g_ctrlreq.req.wLength) {
  402d12:	4b0f      	ldr	r3, [pc, #60]	; (402d50 <udd_ctrl_setup_received+0x1d4>)
  402d14:	88db      	ldrh	r3, [r3, #6]
  402d16:	2b00      	cmp	r3, #0
  402d18:	d102      	bne.n	402d20 <udd_ctrl_setup_received+0x1a4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  402d1a:	4b12      	ldr	r3, [pc, #72]	; (402d64 <udd_ctrl_setup_received+0x1e8>)
  402d1c:	4798      	blx	r3
			return;
  402d1e:	e008      	b.n	402d32 <udd_ctrl_setup_received+0x1b6>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  402d20:	4b0d      	ldr	r3, [pc, #52]	; (402d58 <udd_ctrl_setup_received+0x1dc>)
  402d22:	2200      	movs	r2, #0
  402d24:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  402d26:	4b0d      	ldr	r3, [pc, #52]	; (402d5c <udd_ctrl_setup_received+0x1e0>)
  402d28:	2200      	movs	r2, #0
  402d2a:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  402d2c:	4b02      	ldr	r3, [pc, #8]	; (402d38 <udd_ctrl_setup_received+0x1bc>)
  402d2e:	2201      	movs	r2, #1
  402d30:	701a      	strb	r2, [r3, #0]
	}
}
  402d32:	3730      	adds	r7, #48	; 0x30
  402d34:	46bd      	mov	sp, r7
  402d36:	bd80      	pop	{r7, pc}
  402d38:	20000dbf 	.word	0x20000dbf
  402d3c:	004032c1 	.word	0x004032c1
  402d40:	00402b51 	.word	0x00402b51
  402d44:	40034000 	.word	0x40034000
  402d48:	07ff0000 	.word	0x07ff0000
  402d4c:	00403209 	.word	0x00403209
  402d50:	20008954 	.word	0x20008954
  402d54:	00401c45 	.word	0x00401c45
  402d58:	20000dc0 	.word	0x20000dc0
  402d5c:	20000dc2 	.word	0x20000dc2
  402d60:	00402d69 	.word	0x00402d69
  402d64:	00403259 	.word	0x00403259

00402d68 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
  402d68:	b580      	push	{r7, lr}
  402d6a:	b08e      	sub	sp, #56	; 0x38
  402d6c:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  402d6e:	4b7b      	ldr	r3, [pc, #492]	; (402f5c <udd_ctrl_in_sent+0x1f4>)
  402d70:	781b      	ldrb	r3, [r3, #0]
  402d72:	2b03      	cmp	r3, #3
  402d74:	d11c      	bne.n	402db0 <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  402d76:	4b7a      	ldr	r3, [pc, #488]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  402d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402d7e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402d82:	62bb      	str	r3, [r7, #40]	; 0x28
  402d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402d86:	f023 0301 	bic.w	r3, r3, #1
  402d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  402d8c:	4b74      	ldr	r3, [pc, #464]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402d90:	631a      	str	r2, [r3, #48]	; 0x30
  402d92:	2300      	movs	r3, #0
  402d94:	627b      	str	r3, [r7, #36]	; 0x24
  402d96:	e003      	b.n	402da0 <udd_ctrl_in_sent+0x38>
  402d98:	bf00      	nop
  402d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402d9c:	3301      	adds	r3, #1
  402d9e:	627b      	str	r3, [r7, #36]	; 0x24
  402da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402da2:	2b13      	cmp	r3, #19
  402da4:	d9f8      	bls.n	402d98 <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  402da6:	4b6f      	ldr	r3, [pc, #444]	; (402f64 <udd_ctrl_in_sent+0x1fc>)
  402da8:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  402daa:	4b6f      	ldr	r3, [pc, #444]	; (402f68 <udd_ctrl_in_sent+0x200>)
  402dac:	4798      	blx	r3
		return;
  402dae:	e0d1      	b.n	402f54 <udd_ctrl_in_sent+0x1ec>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  402db0:	4b6e      	ldr	r3, [pc, #440]	; (402f6c <udd_ctrl_in_sent+0x204>)
  402db2:	899a      	ldrh	r2, [r3, #12]
  402db4:	4b6e      	ldr	r3, [pc, #440]	; (402f70 <udd_ctrl_in_sent+0x208>)
  402db6:	881b      	ldrh	r3, [r3, #0]
  402db8:	1ad3      	subs	r3, r2, r3
  402dba:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (0 == nb_remain) {
  402dbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402dbe:	2b00      	cmp	r3, #0
  402dc0:	d13f      	bne.n	402e42 <udd_ctrl_in_sent+0xda>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  402dc2:	4b6c      	ldr	r3, [pc, #432]	; (402f74 <udd_ctrl_in_sent+0x20c>)
  402dc4:	881a      	ldrh	r2, [r3, #0]
  402dc6:	4b6a      	ldr	r3, [pc, #424]	; (402f70 <udd_ctrl_in_sent+0x208>)
  402dc8:	881b      	ldrh	r3, [r3, #0]
  402dca:	4413      	add	r3, r2
  402dcc:	b29a      	uxth	r2, r3
  402dce:	4b69      	ldr	r3, [pc, #420]	; (402f74 <udd_ctrl_in_sent+0x20c>)
  402dd0:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  402dd2:	4b66      	ldr	r3, [pc, #408]	; (402f6c <udd_ctrl_in_sent+0x204>)
  402dd4:	88da      	ldrh	r2, [r3, #6]
  402dd6:	4b67      	ldr	r3, [pc, #412]	; (402f74 <udd_ctrl_in_sent+0x20c>)
  402dd8:	881b      	ldrh	r3, [r3, #0]
  402dda:	429a      	cmp	r2, r3
  402ddc:	d003      	beq.n	402de6 <udd_ctrl_in_sent+0x7e>
				|| b_shortpacket) {
  402dde:	4b66      	ldr	r3, [pc, #408]	; (402f78 <udd_ctrl_in_sent+0x210>)
  402de0:	781b      	ldrb	r3, [r3, #0]
  402de2:	2b00      	cmp	r3, #0
  402de4:	d01a      	beq.n	402e1c <udd_ctrl_in_sent+0xb4>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
  402de6:	4b65      	ldr	r3, [pc, #404]	; (402f7c <udd_ctrl_in_sent+0x214>)
  402de8:	4798      	blx	r3
			udd_ack_in_sent(0);
  402dea:	4b5d      	ldr	r3, [pc, #372]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402dee:	623b      	str	r3, [r7, #32]
  402df0:	6a3b      	ldr	r3, [r7, #32]
  402df2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402df6:	623b      	str	r3, [r7, #32]
  402df8:	6a3b      	ldr	r3, [r7, #32]
  402dfa:	f023 0301 	bic.w	r3, r3, #1
  402dfe:	623b      	str	r3, [r7, #32]
  402e00:	4b57      	ldr	r3, [pc, #348]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402e02:	6a3a      	ldr	r2, [r7, #32]
  402e04:	631a      	str	r2, [r3, #48]	; 0x30
  402e06:	2300      	movs	r3, #0
  402e08:	61fb      	str	r3, [r7, #28]
  402e0a:	e003      	b.n	402e14 <udd_ctrl_in_sent+0xac>
  402e0c:	bf00      	nop
  402e0e:	69fb      	ldr	r3, [r7, #28]
  402e10:	3301      	adds	r3, #1
  402e12:	61fb      	str	r3, [r7, #28]
  402e14:	69fb      	ldr	r3, [r7, #28]
  402e16:	2b13      	cmp	r3, #19
  402e18:	d9f8      	bls.n	402e0c <udd_ctrl_in_sent+0xa4>
			return;
  402e1a:	e09b      	b.n	402f54 <udd_ctrl_in_sent+0x1ec>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  402e1c:	4b53      	ldr	r3, [pc, #332]	; (402f6c <udd_ctrl_in_sent+0x204>)
  402e1e:	695b      	ldr	r3, [r3, #20]
  402e20:	2b00      	cmp	r3, #0
  402e22:	d00e      	beq.n	402e42 <udd_ctrl_in_sent+0xda>
				|| (!udd_g_ctrlreq.over_under_run())) {
  402e24:	4b51      	ldr	r3, [pc, #324]	; (402f6c <udd_ctrl_in_sent+0x204>)
  402e26:	695b      	ldr	r3, [r3, #20]
  402e28:	4798      	blx	r3
  402e2a:	4603      	mov	r3, r0
  402e2c:	f083 0301 	eor.w	r3, r3, #1
  402e30:	b2db      	uxtb	r3, r3
  402e32:	2b00      	cmp	r3, #0
  402e34:	d105      	bne.n	402e42 <udd_ctrl_in_sent+0xda>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  402e36:	4b4e      	ldr	r3, [pc, #312]	; (402f70 <udd_ctrl_in_sent+0x208>)
  402e38:	2200      	movs	r2, #0
  402e3a:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  402e3c:	4b4b      	ldr	r3, [pc, #300]	; (402f6c <udd_ctrl_in_sent+0x204>)
  402e3e:	899b      	ldrh	r3, [r3, #12]
  402e40:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  402e42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402e44:	2b3f      	cmp	r3, #63	; 0x3f
  402e46:	d905      	bls.n	402e54 <udd_ctrl_in_sent+0xec>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  402e48:	2340      	movs	r3, #64	; 0x40
  402e4a:	86fb      	strh	r3, [r7, #54]	; 0x36
		b_shortpacket = false;
  402e4c:	4b4a      	ldr	r3, [pc, #296]	; (402f78 <udd_ctrl_in_sent+0x210>)
  402e4e:	2200      	movs	r2, #0
  402e50:	701a      	strb	r2, [r3, #0]
  402e52:	e002      	b.n	402e5a <udd_ctrl_in_sent+0xf2>
	} else {
		b_shortpacket = true;
  402e54:	4b48      	ldr	r3, [pc, #288]	; (402f78 <udd_ctrl_in_sent+0x210>)
  402e56:	2201      	movs	r2, #1
  402e58:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  402e5a:	4b44      	ldr	r3, [pc, #272]	; (402f6c <udd_ctrl_in_sent+0x204>)
  402e5c:	689a      	ldr	r2, [r3, #8]
  402e5e:	4b44      	ldr	r3, [pc, #272]	; (402f70 <udd_ctrl_in_sent+0x208>)
  402e60:	881b      	ldrh	r3, [r3, #0]
  402e62:	4413      	add	r3, r2
  402e64:	633b      	str	r3, [r7, #48]	; 0x30
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
  402e66:	4b46      	ldr	r3, [pc, #280]	; (402f80 <udd_ctrl_in_sent+0x218>)
  402e68:	4798      	blx	r3
  402e6a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (Is_udd_bank0_received(0)) {
  402e6c:	4b3c      	ldr	r3, [pc, #240]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e70:	f003 0302 	and.w	r3, r3, #2
  402e74:	2b00      	cmp	r3, #0
  402e76:	d01e      	beq.n	402eb6 <udd_ctrl_in_sent+0x14e>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
  402e78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402e7a:	4b42      	ldr	r3, [pc, #264]	; (402f84 <udd_ctrl_in_sent+0x21c>)
  402e7c:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  402e7e:	4b37      	ldr	r3, [pc, #220]	; (402f5c <udd_ctrl_in_sent+0x1f4>)
  402e80:	2204      	movs	r2, #4
  402e82:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  402e84:	4b36      	ldr	r3, [pc, #216]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e88:	61bb      	str	r3, [r7, #24]
  402e8a:	69bb      	ldr	r3, [r7, #24]
  402e8c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402e90:	61bb      	str	r3, [r7, #24]
  402e92:	69bb      	ldr	r3, [r7, #24]
  402e94:	f023 0301 	bic.w	r3, r3, #1
  402e98:	61bb      	str	r3, [r7, #24]
  402e9a:	4b31      	ldr	r3, [pc, #196]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402e9c:	69ba      	ldr	r2, [r7, #24]
  402e9e:	631a      	str	r2, [r3, #48]	; 0x30
  402ea0:	2300      	movs	r3, #0
  402ea2:	617b      	str	r3, [r7, #20]
  402ea4:	e003      	b.n	402eae <udd_ctrl_in_sent+0x146>
  402ea6:	bf00      	nop
  402ea8:	697b      	ldr	r3, [r7, #20]
  402eaa:	3301      	adds	r3, #1
  402eac:	617b      	str	r3, [r7, #20]
  402eae:	697b      	ldr	r3, [r7, #20]
  402eb0:	2b13      	cmp	r3, #19
  402eb2:	d9f8      	bls.n	402ea6 <udd_ctrl_in_sent+0x13e>
		return; // Exit of IN DATA phase
  402eb4:	e04e      	b.n	402f54 <udd_ctrl_in_sent+0x1ec>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  402eb6:	2300      	movs	r3, #0
  402eb8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  402ebc:	e00a      	b.n	402ed4 <udd_ctrl_in_sent+0x16c>
		udd_endpoint_fifo_write(0, *ptr_src++);
  402ebe:	4a28      	ldr	r2, [pc, #160]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402ec2:	1c59      	adds	r1, r3, #1
  402ec4:	6339      	str	r1, [r7, #48]	; 0x30
  402ec6:	781b      	ldrb	r3, [r3, #0]
  402ec8:	6513      	str	r3, [r2, #80]	; 0x50
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  402eca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  402ece:	3301      	adds	r3, #1
  402ed0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  402ed4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  402ed8:	b29b      	uxth	r3, r3
  402eda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
  402edc:	429a      	cmp	r2, r3
  402ede:	d8ee      	bhi.n	402ebe <udd_ctrl_in_sent+0x156>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  402ee0:	4b23      	ldr	r3, [pc, #140]	; (402f70 <udd_ctrl_in_sent+0x208>)
  402ee2:	881a      	ldrh	r2, [r3, #0]
  402ee4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402ee6:	4413      	add	r3, r2
  402ee8:	b29a      	uxth	r2, r3
  402eea:	4b21      	ldr	r3, [pc, #132]	; (402f70 <udd_ctrl_in_sent+0x208>)
  402eec:	801a      	strh	r2, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  402eee:	4b1c      	ldr	r3, [pc, #112]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ef2:	613b      	str	r3, [r7, #16]
  402ef4:	693b      	ldr	r3, [r7, #16]
  402ef6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402efa:	613b      	str	r3, [r7, #16]
  402efc:	693b      	ldr	r3, [r7, #16]
  402efe:	f043 0310 	orr.w	r3, r3, #16
  402f02:	613b      	str	r3, [r7, #16]
  402f04:	4b16      	ldr	r3, [pc, #88]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402f06:	693a      	ldr	r2, [r7, #16]
  402f08:	631a      	str	r2, [r3, #48]	; 0x30
  402f0a:	2300      	movs	r3, #0
  402f0c:	60fb      	str	r3, [r7, #12]
  402f0e:	e003      	b.n	402f18 <udd_ctrl_in_sent+0x1b0>
  402f10:	bf00      	nop
  402f12:	68fb      	ldr	r3, [r7, #12]
  402f14:	3301      	adds	r3, #1
  402f16:	60fb      	str	r3, [r7, #12]
  402f18:	68fb      	ldr	r3, [r7, #12]
  402f1a:	2b13      	cmp	r3, #19
  402f1c:	d9f8      	bls.n	402f10 <udd_ctrl_in_sent+0x1a8>
	udd_ack_in_sent(0);
  402f1e:	4b10      	ldr	r3, [pc, #64]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f22:	60bb      	str	r3, [r7, #8]
  402f24:	68bb      	ldr	r3, [r7, #8]
  402f26:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402f2a:	60bb      	str	r3, [r7, #8]
  402f2c:	68bb      	ldr	r3, [r7, #8]
  402f2e:	f023 0301 	bic.w	r3, r3, #1
  402f32:	60bb      	str	r3, [r7, #8]
  402f34:	4b0a      	ldr	r3, [pc, #40]	; (402f60 <udd_ctrl_in_sent+0x1f8>)
  402f36:	68ba      	ldr	r2, [r7, #8]
  402f38:	631a      	str	r2, [r3, #48]	; 0x30
  402f3a:	2300      	movs	r3, #0
  402f3c:	607b      	str	r3, [r7, #4]
  402f3e:	e003      	b.n	402f48 <udd_ctrl_in_sent+0x1e0>
  402f40:	bf00      	nop
  402f42:	687b      	ldr	r3, [r7, #4]
  402f44:	3301      	adds	r3, #1
  402f46:	607b      	str	r3, [r7, #4]
  402f48:	687b      	ldr	r3, [r7, #4]
  402f4a:	2b13      	cmp	r3, #19
  402f4c:	d9f8      	bls.n	402f40 <udd_ctrl_in_sent+0x1d8>

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
  402f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402f50:	4b0c      	ldr	r3, [pc, #48]	; (402f84 <udd_ctrl_in_sent+0x21c>)
  402f52:	4798      	blx	r3
}
  402f54:	3738      	adds	r7, #56	; 0x38
  402f56:	46bd      	mov	sp, r7
  402f58:	bd80      	pop	{r7, pc}
  402f5a:	bf00      	nop
  402f5c:	20000dbf 	.word	0x20000dbf
  402f60:	40034000 	.word	0x40034000
  402f64:	004032c1 	.word	0x004032c1
  402f68:	00402b51 	.word	0x00402b51
  402f6c:	20008954 	.word	0x20008954
  402f70:	20000dc2 	.word	0x20000dc2
  402f74:	20000dc0 	.word	0x20000dc0
  402f78:	20000e00 	.word	0x20000e00
  402f7c:	004032a9 	.word	0x004032a9
  402f80:	00401e45 	.word	0x00401e45
  402f84:	00401e9d 	.word	0x00401e9d

00402f88 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
  402f88:	b580      	push	{r7, lr}
  402f8a:	b08e      	sub	sp, #56	; 0x38
  402f8c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  402f8e:	4b8f      	ldr	r3, [pc, #572]	; (4031cc <udd_ctrl_out_received+0x244>)
  402f90:	781b      	ldrb	r3, [r3, #0]
  402f92:	2b01      	cmp	r3, #1
  402f94:	d027      	beq.n	402fe6 <udd_ctrl_out_received+0x5e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  402f96:	4b8d      	ldr	r3, [pc, #564]	; (4031cc <udd_ctrl_out_received+0x244>)
  402f98:	781b      	ldrb	r3, [r3, #0]
  402f9a:	2b02      	cmp	r3, #2
  402f9c:	d003      	beq.n	402fa6 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  402f9e:	4b8b      	ldr	r3, [pc, #556]	; (4031cc <udd_ctrl_out_received+0x244>)
  402fa0:	781b      	ldrb	r3, [r3, #0]
  402fa2:	2b04      	cmp	r3, #4
  402fa4:	d102      	bne.n	402fac <udd_ctrl_out_received+0x24>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  402fa6:	4b8a      	ldr	r3, [pc, #552]	; (4031d0 <udd_ctrl_out_received+0x248>)
  402fa8:	4798      	blx	r3
  402faa:	e001      	b.n	402fb0 <udd_ctrl_out_received+0x28>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  402fac:	4b89      	ldr	r3, [pc, #548]	; (4031d4 <udd_ctrl_out_received+0x24c>)
  402fae:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  402fb0:	4b89      	ldr	r3, [pc, #548]	; (4031d8 <udd_ctrl_out_received+0x250>)
  402fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  402fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402fb8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  402fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402fc0:	f023 0302 	bic.w	r3, r3, #2
  402fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  402fc6:	4b84      	ldr	r3, [pc, #528]	; (4031d8 <udd_ctrl_out_received+0x250>)
  402fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  402fca:	631a      	str	r2, [r3, #48]	; 0x30
  402fcc:	2300      	movs	r3, #0
  402fce:	62bb      	str	r3, [r7, #40]	; 0x28
  402fd0:	e003      	b.n	402fda <udd_ctrl_out_received+0x52>
  402fd2:	bf00      	nop
  402fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402fd6:	3301      	adds	r3, #1
  402fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  402fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402fdc:	2b13      	cmp	r3, #19
  402fde:	d9f8      	bls.n	402fd2 <udd_ctrl_out_received+0x4a>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  402fe0:	4b7e      	ldr	r3, [pc, #504]	; (4031dc <udd_ctrl_out_received+0x254>)
  402fe2:	4798      	blx	r3
		return;
  402fe4:	e10d      	b.n	403202 <udd_ctrl_out_received+0x27a>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  402fe6:	4b7c      	ldr	r3, [pc, #496]	; (4031d8 <udd_ctrl_out_received+0x250>)
  402fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402fea:	4b7d      	ldr	r3, [pc, #500]	; (4031e0 <udd_ctrl_out_received+0x258>)
  402fec:	4013      	ands	r3, r2
  402fee:	0c1b      	lsrs	r3, r3, #16
  402ff0:	86bb      	strh	r3, [r7, #52]	; 0x34
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  402ff2:	4b7c      	ldr	r3, [pc, #496]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  402ff4:	899b      	ldrh	r3, [r3, #12]
  402ff6:	461a      	mov	r2, r3
  402ff8:	4b7b      	ldr	r3, [pc, #492]	; (4031e8 <udd_ctrl_out_received+0x260>)
  402ffa:	881b      	ldrh	r3, [r3, #0]
  402ffc:	4619      	mov	r1, r3
  402ffe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  403000:	440b      	add	r3, r1
  403002:	429a      	cmp	r2, r3
  403004:	da05      	bge.n	403012 <udd_ctrl_out_received+0x8a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  403006:	4b77      	ldr	r3, [pc, #476]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  403008:	899a      	ldrh	r2, [r3, #12]
  40300a:	4b77      	ldr	r3, [pc, #476]	; (4031e8 <udd_ctrl_out_received+0x260>)
  40300c:	881b      	ldrh	r3, [r3, #0]
  40300e:	1ad3      	subs	r3, r2, r3
  403010:	86bb      	strh	r3, [r7, #52]	; 0x34
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  403012:	4b74      	ldr	r3, [pc, #464]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  403014:	689a      	ldr	r2, [r3, #8]
  403016:	4b74      	ldr	r3, [pc, #464]	; (4031e8 <udd_ctrl_out_received+0x260>)
  403018:	881b      	ldrh	r3, [r3, #0]
  40301a:	4413      	add	r3, r2
  40301c:	633b      	str	r3, [r7, #48]	; 0x30
	for (i = 0; i < nb_data; i++) {
  40301e:	2300      	movs	r3, #0
  403020:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  403024:	e00b      	b.n	40303e <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  403026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  403028:	1c5a      	adds	r2, r3, #1
  40302a:	633a      	str	r2, [r7, #48]	; 0x30
  40302c:	4a6a      	ldr	r2, [pc, #424]	; (4031d8 <udd_ctrl_out_received+0x250>)
  40302e:	6d12      	ldr	r2, [r2, #80]	; 0x50
  403030:	b2d2      	uxtb	r2, r2
  403032:	701a      	strb	r2, [r3, #0]
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  403034:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  403038:	3301      	adds	r3, #1
  40303a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  40303e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  403042:	b29b      	uxth	r3, r3
  403044:	8eba      	ldrh	r2, [r7, #52]	; 0x34
  403046:	429a      	cmp	r2, r3
  403048:	d8ed      	bhi.n	403026 <udd_ctrl_out_received+0x9e>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  40304a:	4b67      	ldr	r3, [pc, #412]	; (4031e8 <udd_ctrl_out_received+0x260>)
  40304c:	881a      	ldrh	r2, [r3, #0]
  40304e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  403050:	4413      	add	r3, r2
  403052:	b29a      	uxth	r2, r3
  403054:	4b64      	ldr	r3, [pc, #400]	; (4031e8 <udd_ctrl_out_received+0x260>)
  403056:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  403058:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  40305a:	2b40      	cmp	r3, #64	; 0x40
  40305c:	d10a      	bne.n	403074 <udd_ctrl_out_received+0xec>
			|| (udd_g_ctrlreq.req.wLength <=
  40305e:	4b61      	ldr	r3, [pc, #388]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  403060:	88db      	ldrh	r3, [r3, #6]
  403062:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_nb_trans +
  403064:	4b61      	ldr	r3, [pc, #388]	; (4031ec <udd_ctrl_out_received+0x264>)
  403066:	881b      	ldrh	r3, [r3, #0]
  403068:	4619      	mov	r1, r3
  40306a:	4b5f      	ldr	r3, [pc, #380]	; (4031e8 <udd_ctrl_out_received+0x260>)
  40306c:	881b      	ldrh	r3, [r3, #0]
  40306e:	440b      	add	r3, r1
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  403070:	429a      	cmp	r2, r3
  403072:	dc46      	bgt.n	403102 <udd_ctrl_out_received+0x17a>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  403074:	4b5c      	ldr	r3, [pc, #368]	; (4031e8 <udd_ctrl_out_received+0x260>)
  403076:	881a      	ldrh	r2, [r3, #0]
  403078:	4b5a      	ldr	r3, [pc, #360]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  40307a:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  40307c:	4b59      	ldr	r3, [pc, #356]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  40307e:	695b      	ldr	r3, [r3, #20]
  403080:	2b00      	cmp	r3, #0
  403082:	d023      	beq.n	4030cc <udd_ctrl_out_received+0x144>
			if (!udd_g_ctrlreq.over_under_run()) {
  403084:	4b57      	ldr	r3, [pc, #348]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  403086:	695b      	ldr	r3, [r3, #20]
  403088:	4798      	blx	r3
  40308a:	4603      	mov	r3, r0
  40308c:	f083 0301 	eor.w	r3, r3, #1
  403090:	b2db      	uxtb	r3, r3
  403092:	2b00      	cmp	r3, #0
  403094:	d01a      	beq.n	4030cc <udd_ctrl_out_received+0x144>
				// Stall ZLP
				udd_ctrl_stall_data();
  403096:	4b4f      	ldr	r3, [pc, #316]	; (4031d4 <udd_ctrl_out_received+0x24c>)
  403098:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  40309a:	4b4f      	ldr	r3, [pc, #316]	; (4031d8 <udd_ctrl_out_received+0x250>)
  40309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40309e:	627b      	str	r3, [r7, #36]	; 0x24
  4030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4030a2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4030a6:	627b      	str	r3, [r7, #36]	; 0x24
  4030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4030aa:	f023 0302 	bic.w	r3, r3, #2
  4030ae:	627b      	str	r3, [r7, #36]	; 0x24
  4030b0:	4b49      	ldr	r3, [pc, #292]	; (4031d8 <udd_ctrl_out_received+0x250>)
  4030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4030b4:	631a      	str	r2, [r3, #48]	; 0x30
  4030b6:	2300      	movs	r3, #0
  4030b8:	623b      	str	r3, [r7, #32]
  4030ba:	e003      	b.n	4030c4 <udd_ctrl_out_received+0x13c>
  4030bc:	bf00      	nop
  4030be:	6a3b      	ldr	r3, [r7, #32]
  4030c0:	3301      	adds	r3, #1
  4030c2:	623b      	str	r3, [r7, #32]
  4030c4:	6a3b      	ldr	r3, [r7, #32]
  4030c6:	2b13      	cmp	r3, #19
  4030c8:	d9f8      	bls.n	4030bc <udd_ctrl_out_received+0x134>
				return;
  4030ca:	e09a      	b.n	403202 <udd_ctrl_out_received+0x27a>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  4030cc:	4b42      	ldr	r3, [pc, #264]	; (4031d8 <udd_ctrl_out_received+0x250>)
  4030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4030d0:	61fb      	str	r3, [r7, #28]
  4030d2:	69fb      	ldr	r3, [r7, #28]
  4030d4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4030d8:	61fb      	str	r3, [r7, #28]
  4030da:	69fb      	ldr	r3, [r7, #28]
  4030dc:	f023 0302 	bic.w	r3, r3, #2
  4030e0:	61fb      	str	r3, [r7, #28]
  4030e2:	4b3d      	ldr	r3, [pc, #244]	; (4031d8 <udd_ctrl_out_received+0x250>)
  4030e4:	69fa      	ldr	r2, [r7, #28]
  4030e6:	631a      	str	r2, [r3, #48]	; 0x30
  4030e8:	2300      	movs	r3, #0
  4030ea:	61bb      	str	r3, [r7, #24]
  4030ec:	e003      	b.n	4030f6 <udd_ctrl_out_received+0x16e>
  4030ee:	bf00      	nop
  4030f0:	69bb      	ldr	r3, [r7, #24]
  4030f2:	3301      	adds	r3, #1
  4030f4:	61bb      	str	r3, [r7, #24]
  4030f6:	69bb      	ldr	r3, [r7, #24]
  4030f8:	2b13      	cmp	r3, #19
  4030fa:	d9f8      	bls.n	4030ee <udd_ctrl_out_received+0x166>
		udd_ctrl_send_zlp_in();
  4030fc:	4b3c      	ldr	r3, [pc, #240]	; (4031f0 <udd_ctrl_out_received+0x268>)
  4030fe:	4798      	blx	r3
		return;
  403100:	e07f      	b.n	403202 <udd_ctrl_out_received+0x27a>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  403102:	4b38      	ldr	r3, [pc, #224]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  403104:	899a      	ldrh	r2, [r3, #12]
  403106:	4b38      	ldr	r3, [pc, #224]	; (4031e8 <udd_ctrl_out_received+0x260>)
  403108:	881b      	ldrh	r3, [r3, #0]
  40310a:	429a      	cmp	r2, r3
  40310c:	d14d      	bne.n	4031aa <udd_ctrl_out_received+0x222>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  40310e:	4b35      	ldr	r3, [pc, #212]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  403110:	695b      	ldr	r3, [r3, #20]
  403112:	2b00      	cmp	r3, #0
  403114:	d11a      	bne.n	40314c <udd_ctrl_out_received+0x1c4>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  403116:	4b2f      	ldr	r3, [pc, #188]	; (4031d4 <udd_ctrl_out_received+0x24c>)
  403118:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  40311a:	4b2f      	ldr	r3, [pc, #188]	; (4031d8 <udd_ctrl_out_received+0x250>)
  40311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40311e:	617b      	str	r3, [r7, #20]
  403120:	697b      	ldr	r3, [r7, #20]
  403122:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403126:	617b      	str	r3, [r7, #20]
  403128:	697b      	ldr	r3, [r7, #20]
  40312a:	f023 0302 	bic.w	r3, r3, #2
  40312e:	617b      	str	r3, [r7, #20]
  403130:	4b29      	ldr	r3, [pc, #164]	; (4031d8 <udd_ctrl_out_received+0x250>)
  403132:	697a      	ldr	r2, [r7, #20]
  403134:	631a      	str	r2, [r3, #48]	; 0x30
  403136:	2300      	movs	r3, #0
  403138:	613b      	str	r3, [r7, #16]
  40313a:	e003      	b.n	403144 <udd_ctrl_out_received+0x1bc>
  40313c:	bf00      	nop
  40313e:	693b      	ldr	r3, [r7, #16]
  403140:	3301      	adds	r3, #1
  403142:	613b      	str	r3, [r7, #16]
  403144:	693b      	ldr	r3, [r7, #16]
  403146:	2b13      	cmp	r3, #19
  403148:	d9f8      	bls.n	40313c <udd_ctrl_out_received+0x1b4>
			return;
  40314a:	e05a      	b.n	403202 <udd_ctrl_out_received+0x27a>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  40314c:	4b25      	ldr	r3, [pc, #148]	; (4031e4 <udd_ctrl_out_received+0x25c>)
  40314e:	695b      	ldr	r3, [r3, #20]
  403150:	4798      	blx	r3
  403152:	4603      	mov	r3, r0
  403154:	f083 0301 	eor.w	r3, r3, #1
  403158:	b2db      	uxtb	r3, r3
  40315a:	2b00      	cmp	r3, #0
  40315c:	d01a      	beq.n	403194 <udd_ctrl_out_received+0x20c>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  40315e:	4b1d      	ldr	r3, [pc, #116]	; (4031d4 <udd_ctrl_out_received+0x24c>)
  403160:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  403162:	4b1d      	ldr	r3, [pc, #116]	; (4031d8 <udd_ctrl_out_received+0x250>)
  403164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403166:	60fb      	str	r3, [r7, #12]
  403168:	68fb      	ldr	r3, [r7, #12]
  40316a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40316e:	60fb      	str	r3, [r7, #12]
  403170:	68fb      	ldr	r3, [r7, #12]
  403172:	f023 0302 	bic.w	r3, r3, #2
  403176:	60fb      	str	r3, [r7, #12]
  403178:	4b17      	ldr	r3, [pc, #92]	; (4031d8 <udd_ctrl_out_received+0x250>)
  40317a:	68fa      	ldr	r2, [r7, #12]
  40317c:	631a      	str	r2, [r3, #48]	; 0x30
  40317e:	2300      	movs	r3, #0
  403180:	60bb      	str	r3, [r7, #8]
  403182:	e003      	b.n	40318c <udd_ctrl_out_received+0x204>
  403184:	bf00      	nop
  403186:	68bb      	ldr	r3, [r7, #8]
  403188:	3301      	adds	r3, #1
  40318a:	60bb      	str	r3, [r7, #8]
  40318c:	68bb      	ldr	r3, [r7, #8]
  40318e:	2b13      	cmp	r3, #19
  403190:	d9f8      	bls.n	403184 <udd_ctrl_out_received+0x1fc>
			return;
  403192:	e036      	b.n	403202 <udd_ctrl_out_received+0x27a>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  403194:	4b15      	ldr	r3, [pc, #84]	; (4031ec <udd_ctrl_out_received+0x264>)
  403196:	881a      	ldrh	r2, [r3, #0]
  403198:	4b13      	ldr	r3, [pc, #76]	; (4031e8 <udd_ctrl_out_received+0x260>)
  40319a:	881b      	ldrh	r3, [r3, #0]
  40319c:	4413      	add	r3, r2
  40319e:	b29a      	uxth	r2, r3
  4031a0:	4b12      	ldr	r3, [pc, #72]	; (4031ec <udd_ctrl_out_received+0x264>)
  4031a2:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  4031a4:	4b10      	ldr	r3, [pc, #64]	; (4031e8 <udd_ctrl_out_received+0x260>)
  4031a6:	2200      	movs	r2, #0
  4031a8:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  4031aa:	4b0b      	ldr	r3, [pc, #44]	; (4031d8 <udd_ctrl_out_received+0x250>)
  4031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031ae:	607b      	str	r3, [r7, #4]
  4031b0:	687b      	ldr	r3, [r7, #4]
  4031b2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4031b6:	607b      	str	r3, [r7, #4]
  4031b8:	687b      	ldr	r3, [r7, #4]
  4031ba:	f023 0302 	bic.w	r3, r3, #2
  4031be:	607b      	str	r3, [r7, #4]
  4031c0:	4b05      	ldr	r3, [pc, #20]	; (4031d8 <udd_ctrl_out_received+0x250>)
  4031c2:	687a      	ldr	r2, [r7, #4]
  4031c4:	631a      	str	r2, [r3, #48]	; 0x30
  4031c6:	2300      	movs	r3, #0
  4031c8:	603b      	str	r3, [r7, #0]
  4031ca:	e017      	b.n	4031fc <udd_ctrl_out_received+0x274>
  4031cc:	20000dbf 	.word	0x20000dbf
  4031d0:	004032c1 	.word	0x004032c1
  4031d4:	00403209 	.word	0x00403209
  4031d8:	40034000 	.word	0x40034000
  4031dc:	00402b51 	.word	0x00402b51
  4031e0:	07ff0000 	.word	0x07ff0000
  4031e4:	20008954 	.word	0x20008954
  4031e8:	20000dc2 	.word	0x20000dc2
  4031ec:	20000dc0 	.word	0x20000dc0
  4031f0:	00403259 	.word	0x00403259
  4031f4:	bf00      	nop
  4031f6:	683b      	ldr	r3, [r7, #0]
  4031f8:	3301      	adds	r3, #1
  4031fa:	603b      	str	r3, [r7, #0]
  4031fc:	683b      	ldr	r3, [r7, #0]
  4031fe:	2b13      	cmp	r3, #19
  403200:	d9f8      	bls.n	4031f4 <udd_ctrl_out_received+0x26c>
}
  403202:	3738      	adds	r7, #56	; 0x38
  403204:	46bd      	mov	sp, r7
  403206:	bd80      	pop	{r7, pc}

00403208 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
  403208:	b480      	push	{r7}
  40320a:	b083      	sub	sp, #12
  40320c:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  40320e:	4b10      	ldr	r3, [pc, #64]	; (403250 <udd_ctrl_stall_data+0x48>)
  403210:	2205      	movs	r2, #5
  403212:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  403214:	4b0f      	ldr	r3, [pc, #60]	; (403254 <udd_ctrl_stall_data+0x4c>)
  403216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403218:	607b      	str	r3, [r7, #4]
  40321a:	687b      	ldr	r3, [r7, #4]
  40321c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403220:	607b      	str	r3, [r7, #4]
  403222:	687b      	ldr	r3, [r7, #4]
  403224:	f043 0320 	orr.w	r3, r3, #32
  403228:	607b      	str	r3, [r7, #4]
  40322a:	4b0a      	ldr	r3, [pc, #40]	; (403254 <udd_ctrl_stall_data+0x4c>)
  40322c:	687a      	ldr	r2, [r7, #4]
  40322e:	631a      	str	r2, [r3, #48]	; 0x30
  403230:	2300      	movs	r3, #0
  403232:	603b      	str	r3, [r7, #0]
  403234:	e003      	b.n	40323e <udd_ctrl_stall_data+0x36>
  403236:	bf00      	nop
  403238:	683b      	ldr	r3, [r7, #0]
  40323a:	3301      	adds	r3, #1
  40323c:	603b      	str	r3, [r7, #0]
  40323e:	683b      	ldr	r3, [r7, #0]
  403240:	2b13      	cmp	r3, #19
  403242:	d9f8      	bls.n	403236 <udd_ctrl_stall_data+0x2e>
}
  403244:	370c      	adds	r7, #12
  403246:	46bd      	mov	sp, r7
  403248:	f85d 7b04 	ldr.w	r7, [sp], #4
  40324c:	4770      	bx	lr
  40324e:	bf00      	nop
  403250:	20000dbf 	.word	0x20000dbf
  403254:	40034000 	.word	0x40034000

00403258 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  403258:	b480      	push	{r7}
  40325a:	b083      	sub	sp, #12
  40325c:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  40325e:	4b10      	ldr	r3, [pc, #64]	; (4032a0 <udd_ctrl_send_zlp_in+0x48>)
  403260:	2203      	movs	r2, #3
  403262:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  403264:	4b0f      	ldr	r3, [pc, #60]	; (4032a4 <udd_ctrl_send_zlp_in+0x4c>)
  403266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403268:	607b      	str	r3, [r7, #4]
  40326a:	687b      	ldr	r3, [r7, #4]
  40326c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403270:	607b      	str	r3, [r7, #4]
  403272:	687b      	ldr	r3, [r7, #4]
  403274:	f043 0310 	orr.w	r3, r3, #16
  403278:	607b      	str	r3, [r7, #4]
  40327a:	4b0a      	ldr	r3, [pc, #40]	; (4032a4 <udd_ctrl_send_zlp_in+0x4c>)
  40327c:	687a      	ldr	r2, [r7, #4]
  40327e:	631a      	str	r2, [r3, #48]	; 0x30
  403280:	2300      	movs	r3, #0
  403282:	603b      	str	r3, [r7, #0]
  403284:	e003      	b.n	40328e <udd_ctrl_send_zlp_in+0x36>
  403286:	bf00      	nop
  403288:	683b      	ldr	r3, [r7, #0]
  40328a:	3301      	adds	r3, #1
  40328c:	603b      	str	r3, [r7, #0]
  40328e:	683b      	ldr	r3, [r7, #0]
  403290:	2b13      	cmp	r3, #19
  403292:	d9f8      	bls.n	403286 <udd_ctrl_send_zlp_in+0x2e>
}
  403294:	370c      	adds	r7, #12
  403296:	46bd      	mov	sp, r7
  403298:	f85d 7b04 	ldr.w	r7, [sp], #4
  40329c:	4770      	bx	lr
  40329e:	bf00      	nop
  4032a0:	20000dbf 	.word	0x20000dbf
  4032a4:	40034000 	.word	0x40034000

004032a8 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
  4032a8:	b480      	push	{r7}
  4032aa:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4032ac:	4b03      	ldr	r3, [pc, #12]	; (4032bc <udd_ctrl_send_zlp_out+0x14>)
  4032ae:	2204      	movs	r2, #4
  4032b0:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free
}
  4032b2:	46bd      	mov	sp, r7
  4032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4032b8:	4770      	bx	lr
  4032ba:	bf00      	nop
  4032bc:	20000dbf 	.word	0x20000dbf

004032c0 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
  4032c0:	b580      	push	{r7, lr}
  4032c2:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  4032c4:	4b03      	ldr	r3, [pc, #12]	; (4032d4 <udd_ctrl_endofrequest+0x14>)
  4032c6:	691b      	ldr	r3, [r3, #16]
  4032c8:	2b00      	cmp	r3, #0
  4032ca:	d002      	beq.n	4032d2 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
  4032cc:	4b01      	ldr	r3, [pc, #4]	; (4032d4 <udd_ctrl_endofrequest+0x14>)
  4032ce:	691b      	ldr	r3, [r3, #16]
  4032d0:	4798      	blx	r3
	}
}
  4032d2:	bd80      	pop	{r7, pc}
  4032d4:	20008954 	.word	0x20008954

004032d8 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
  4032d8:	b580      	push	{r7, lr}
  4032da:	b082      	sub	sp, #8
  4032dc:	af00      	add	r7, sp, #0
	if (!Is_udd_endpoint_interrupt(0))
  4032de:	4b25      	ldr	r3, [pc, #148]	; (403374 <udd_ctrl_interrupt+0x9c>)
  4032e0:	69db      	ldr	r3, [r3, #28]
  4032e2:	f003 0301 	and.w	r3, r3, #1
  4032e6:	2b00      	cmp	r3, #0
  4032e8:	d101      	bne.n	4032ee <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
  4032ea:	2300      	movs	r3, #0
  4032ec:	e03e      	b.n	40336c <udd_ctrl_interrupt+0x94>

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  4032ee:	4b21      	ldr	r3, [pc, #132]	; (403374 <udd_ctrl_interrupt+0x9c>)
  4032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4032f2:	f003 0304 	and.w	r3, r3, #4
  4032f6:	2b00      	cmp	r3, #0
  4032f8:	d003      	beq.n	403302 <udd_ctrl_interrupt+0x2a>
		// SETUP packet received
		udd_ctrl_setup_received();
  4032fa:	4b1f      	ldr	r3, [pc, #124]	; (403378 <udd_ctrl_interrupt+0xa0>)
  4032fc:	4798      	blx	r3
		return true;
  4032fe:	2301      	movs	r3, #1
  403300:	e034      	b.n	40336c <udd_ctrl_interrupt+0x94>
	}
	if (Is_udd_in_sent(0)) {
  403302:	4b1c      	ldr	r3, [pc, #112]	; (403374 <udd_ctrl_interrupt+0x9c>)
  403304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403306:	f003 0301 	and.w	r3, r3, #1
  40330a:	2b00      	cmp	r3, #0
  40330c:	d003      	beq.n	403316 <udd_ctrl_interrupt+0x3e>
		// IN packet sent
		udd_ctrl_in_sent();
  40330e:	4b1b      	ldr	r3, [pc, #108]	; (40337c <udd_ctrl_interrupt+0xa4>)
  403310:	4798      	blx	r3
		return true;
  403312:	2301      	movs	r3, #1
  403314:	e02a      	b.n	40336c <udd_ctrl_interrupt+0x94>
	}
	if (Is_udd_bank0_received(0)) {
  403316:	4b17      	ldr	r3, [pc, #92]	; (403374 <udd_ctrl_interrupt+0x9c>)
  403318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40331a:	f003 0302 	and.w	r3, r3, #2
  40331e:	2b00      	cmp	r3, #0
  403320:	d003      	beq.n	40332a <udd_ctrl_interrupt+0x52>
		// OUT packet received
		udd_ctrl_out_received();
  403322:	4b17      	ldr	r3, [pc, #92]	; (403380 <udd_ctrl_interrupt+0xa8>)
  403324:	4798      	blx	r3
		return true;
  403326:	2301      	movs	r3, #1
  403328:	e020      	b.n	40336c <udd_ctrl_interrupt+0x94>
	}
	if (Is_udd_stall(0)) {
  40332a:	4b12      	ldr	r3, [pc, #72]	; (403374 <udd_ctrl_interrupt+0x9c>)
  40332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40332e:	f003 0308 	and.w	r3, r3, #8
  403332:	2b00      	cmp	r3, #0
  403334:	d019      	beq.n	40336a <udd_ctrl_interrupt+0x92>
		// STALLed
		udd_ack_stall(0);
  403336:	4b0f      	ldr	r3, [pc, #60]	; (403374 <udd_ctrl_interrupt+0x9c>)
  403338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40333a:	607b      	str	r3, [r7, #4]
  40333c:	687b      	ldr	r3, [r7, #4]
  40333e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403342:	607b      	str	r3, [r7, #4]
  403344:	687b      	ldr	r3, [r7, #4]
  403346:	f023 0308 	bic.w	r3, r3, #8
  40334a:	607b      	str	r3, [r7, #4]
  40334c:	4b09      	ldr	r3, [pc, #36]	; (403374 <udd_ctrl_interrupt+0x9c>)
  40334e:	687a      	ldr	r2, [r7, #4]
  403350:	631a      	str	r2, [r3, #48]	; 0x30
  403352:	2300      	movs	r3, #0
  403354:	603b      	str	r3, [r7, #0]
  403356:	e003      	b.n	403360 <udd_ctrl_interrupt+0x88>
  403358:	bf00      	nop
  40335a:	683b      	ldr	r3, [r7, #0]
  40335c:	3301      	adds	r3, #1
  40335e:	603b      	str	r3, [r7, #0]
  403360:	683b      	ldr	r3, [r7, #0]
  403362:	2b13      	cmp	r3, #19
  403364:	d9f8      	bls.n	403358 <udd_ctrl_interrupt+0x80>
		return true;
  403366:	2301      	movs	r3, #1
  403368:	e000      	b.n	40336c <udd_ctrl_interrupt+0x94>
	}
	return false;
  40336a:	2300      	movs	r3, #0
}
  40336c:	4618      	mov	r0, r3
  40336e:	3708      	adds	r7, #8
  403370:	46bd      	mov	sp, r7
  403372:	bd80      	pop	{r7, pc}
  403374:	40034000 	.word	0x40034000
  403378:	00402b7d 	.word	0x00402b7d
  40337c:	00402d69 	.word	0x00402d69
  403380:	00402f89 	.word	0x00402f89

00403384 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
  403384:	b480      	push	{r7}
  403386:	b083      	sub	sp, #12
  403388:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40338a:	2300      	movs	r3, #0
  40338c:	71fb      	strb	r3, [r7, #7]
  40338e:	e043      	b.n	403418 <udd_ep_job_table_reset+0x94>
		udd_ep_job[i].bank = 0;
  403390:	79fa      	ldrb	r2, [r7, #7]
  403392:	4925      	ldr	r1, [pc, #148]	; (403428 <udd_ep_job_table_reset+0xa4>)
  403394:	4613      	mov	r3, r2
  403396:	009b      	lsls	r3, r3, #2
  403398:	4413      	add	r3, r2
  40339a:	009b      	lsls	r3, r3, #2
  40339c:	440b      	add	r3, r1
  40339e:	f103 0210 	add.w	r2, r3, #16
  4033a2:	7853      	ldrb	r3, [r2, #1]
  4033a4:	f36f 0383 	bfc	r3, #2, #2
  4033a8:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].busy = false;
  4033aa:	79fa      	ldrb	r2, [r7, #7]
  4033ac:	491e      	ldr	r1, [pc, #120]	; (403428 <udd_ep_job_table_reset+0xa4>)
  4033ae:	4613      	mov	r3, r2
  4033b0:	009b      	lsls	r3, r3, #2
  4033b2:	4413      	add	r3, r2
  4033b4:	009b      	lsls	r3, r3, #2
  4033b6:	440b      	add	r3, r1
  4033b8:	f103 0210 	add.w	r2, r3, #16
  4033bc:	7853      	ldrb	r3, [r2, #1]
  4033be:	f36f 1304 	bfc	r3, #4, #1
  4033c2:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_stall_requested = false;
  4033c4:	79fa      	ldrb	r2, [r7, #7]
  4033c6:	4918      	ldr	r1, [pc, #96]	; (403428 <udd_ep_job_table_reset+0xa4>)
  4033c8:	4613      	mov	r3, r2
  4033ca:	009b      	lsls	r3, r3, #2
  4033cc:	4413      	add	r3, r2
  4033ce:	009b      	lsls	r3, r3, #2
  4033d0:	440b      	add	r3, r1
  4033d2:	f103 0210 	add.w	r2, r3, #16
  4033d6:	7853      	ldrb	r3, [r2, #1]
  4033d8:	f36f 1345 	bfc	r3, #5, #1
  4033dc:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_shortpacket = false;
  4033de:	79fa      	ldrb	r2, [r7, #7]
  4033e0:	4911      	ldr	r1, [pc, #68]	; (403428 <udd_ep_job_table_reset+0xa4>)
  4033e2:	4613      	mov	r3, r2
  4033e4:	009b      	lsls	r3, r3, #2
  4033e6:	4413      	add	r3, r2
  4033e8:	009b      	lsls	r3, r3, #2
  4033ea:	440b      	add	r3, r1
  4033ec:	f103 0210 	add.w	r2, r3, #16
  4033f0:	7853      	ldrb	r3, [r2, #1]
  4033f2:	f36f 1386 	bfc	r3, #6, #1
  4033f6:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_buf_end = false;
  4033f8:	79fa      	ldrb	r2, [r7, #7]
  4033fa:	490b      	ldr	r1, [pc, #44]	; (403428 <udd_ep_job_table_reset+0xa4>)
  4033fc:	4613      	mov	r3, r2
  4033fe:	009b      	lsls	r3, r3, #2
  403400:	4413      	add	r3, r2
  403402:	009b      	lsls	r3, r3, #2
  403404:	440b      	add	r3, r1
  403406:	f103 0210 	add.w	r2, r3, #16
  40340a:	7853      	ldrb	r3, [r2, #1]
  40340c:	f36f 13c7 	bfc	r3, #7, #1
  403410:	7053      	strb	r3, [r2, #1]
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  403412:	79fb      	ldrb	r3, [r7, #7]
  403414:	3301      	adds	r3, #1
  403416:	71fb      	strb	r3, [r7, #7]
  403418:	79fb      	ldrb	r3, [r7, #7]
  40341a:	2b02      	cmp	r3, #2
  40341c:	d9b8      	bls.n	403390 <udd_ep_job_table_reset+0xc>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
	}
}
  40341e:	370c      	adds	r7, #12
  403420:	46bd      	mov	sp, r7
  403422:	f85d 7b04 	ldr.w	r7, [sp], #4
  403426:	4770      	bx	lr
  403428:	20000dc4 	.word	0x20000dc4

0040342c <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
  40342c:	b580      	push	{r7, lr}
  40342e:	b082      	sub	sp, #8
  403430:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  403432:	2300      	movs	r3, #0
  403434:	71fb      	strb	r3, [r7, #7]
  403436:	e011      	b.n	40345c <udd_ep_job_table_kill+0x30>
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  403438:	79fa      	ldrb	r2, [r7, #7]
  40343a:	4613      	mov	r3, r2
  40343c:	009b      	lsls	r3, r3, #2
  40343e:	4413      	add	r3, r2
  403440:	009b      	lsls	r3, r3, #2
  403442:	4a09      	ldr	r2, [pc, #36]	; (403468 <udd_ep_job_table_kill+0x3c>)
  403444:	441a      	add	r2, r3
  403446:	79fb      	ldrb	r3, [r7, #7]
  403448:	3301      	adds	r3, #1
  40344a:	b2db      	uxtb	r3, r3
  40344c:	4610      	mov	r0, r2
  40344e:	2101      	movs	r1, #1
  403450:	461a      	mov	r2, r3
  403452:	4b06      	ldr	r3, [pc, #24]	; (40346c <udd_ep_job_table_kill+0x40>)
  403454:	4798      	blx	r3
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  403456:	79fb      	ldrb	r3, [r7, #7]
  403458:	3301      	adds	r3, #1
  40345a:	71fb      	strb	r3, [r7, #7]
  40345c:	79fb      	ldrb	r3, [r7, #7]
  40345e:	2b02      	cmp	r3, #2
  403460:	d9ea      	bls.n	403438 <udd_ep_job_table_kill+0xc>
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
	}
}
  403462:	3708      	adds	r7, #8
  403464:	46bd      	mov	sp, r7
  403466:	bd80      	pop	{r7, pc}
  403468:	20000dc4 	.word	0x20000dc4
  40346c:	004034ad 	.word	0x004034ad

00403470 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
  403470:	b580      	push	{r7, lr}
  403472:	b082      	sub	sp, #8
  403474:	af00      	add	r7, sp, #0
  403476:	4603      	mov	r3, r0
  403478:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
  40347a:	79fb      	ldrb	r3, [r7, #7]
  40347c:	f003 030f 	and.w	r3, r3, #15
  403480:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  403482:	79fb      	ldrb	r3, [r7, #7]
  403484:	1e5a      	subs	r2, r3, #1
  403486:	4613      	mov	r3, r2
  403488:	009b      	lsls	r3, r3, #2
  40348a:	4413      	add	r3, r2
  40348c:	009b      	lsls	r3, r3, #2
  40348e:	4a05      	ldr	r2, [pc, #20]	; (4034a4 <udd_ep_abort_job+0x34>)
  403490:	441a      	add	r2, r3
  403492:	79fb      	ldrb	r3, [r7, #7]
  403494:	4610      	mov	r0, r2
  403496:	2101      	movs	r1, #1
  403498:	461a      	mov	r2, r3
  40349a:	4b03      	ldr	r3, [pc, #12]	; (4034a8 <udd_ep_abort_job+0x38>)
  40349c:	4798      	blx	r3
}
  40349e:	3708      	adds	r7, #8
  4034a0:	46bd      	mov	sp, r7
  4034a2:	bd80      	pop	{r7, pc}
  4034a4:	20000dc4 	.word	0x20000dc4
  4034a8:	004034ad 	.word	0x004034ad

004034ac <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  4034ac:	b580      	push	{r7, lr}
  4034ae:	b084      	sub	sp, #16
  4034b0:	af00      	add	r7, sp, #0
  4034b2:	60f8      	str	r0, [r7, #12]
  4034b4:	60b9      	str	r1, [r7, #8]
  4034b6:	4613      	mov	r3, r2
  4034b8:	71fb      	strb	r3, [r7, #7]
	if (ptr_job->busy == false) {
  4034ba:	68fb      	ldr	r3, [r7, #12]
  4034bc:	7c5b      	ldrb	r3, [r3, #17]
  4034be:	f3c3 1300 	ubfx	r3, r3, #4, #1
  4034c2:	b2db      	uxtb	r3, r3
  4034c4:	2b00      	cmp	r3, #0
  4034c6:	d100      	bne.n	4034ca <udd_ep_finish_job+0x1e>
		return; // No on-going job
  4034c8:	e023      	b.n	403512 <udd_ep_finish_job+0x66>
	}
	ptr_job->busy = false;
  4034ca:	68fa      	ldr	r2, [r7, #12]
  4034cc:	7c53      	ldrb	r3, [r2, #17]
  4034ce:	f36f 1304 	bfc	r3, #4, #1
  4034d2:	7453      	strb	r3, [r2, #17]
	if (NULL == ptr_job->call_trans) {
  4034d4:	68fb      	ldr	r3, [r7, #12]
  4034d6:	681b      	ldr	r3, [r3, #0]
  4034d8:	2b00      	cmp	r3, #0
  4034da:	d100      	bne.n	4034de <udd_ep_finish_job+0x32>
		return; // No callback linked to job
  4034dc:	e019      	b.n	403512 <udd_ep_finish_job+0x66>
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  4034de:	4b0e      	ldr	r3, [pc, #56]	; (403518 <udd_ep_finish_job+0x6c>)
  4034e0:	79fa      	ldrb	r2, [r7, #7]
  4034e2:	320c      	adds	r2, #12
  4034e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4034e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  4034ec:	2b00      	cmp	r3, #0
  4034ee:	d003      	beq.n	4034f8 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
  4034f0:	79fb      	ldrb	r3, [r7, #7]
  4034f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4034f6:	71fb      	strb	r3, [r7, #7]
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  4034f8:	68fb      	ldr	r3, [r7, #12]
  4034fa:	681b      	ldr	r3, [r3, #0]
  4034fc:	68ba      	ldr	r2, [r7, #8]
  4034fe:	2a01      	cmp	r2, #1
  403500:	bf14      	ite	ne
  403502:	2200      	movne	r2, #0
  403504:	2201      	moveq	r2, #1
  403506:	b2d2      	uxtb	r2, r2
  403508:	4610      	mov	r0, r2
  40350a:	68fa      	ldr	r2, [r7, #12]
  40350c:	6891      	ldr	r1, [r2, #8]
  40350e:	79fa      	ldrb	r2, [r7, #7]
  403510:	4798      	blx	r3
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
  403512:	3710      	adds	r7, #16
  403514:	46bd      	mov	sp, r7
  403516:	bd80      	pop	{r7, pc}
  403518:	40034000 	.word	0x40034000

0040351c <udd_ep_ack_out_received>:


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  40351c:	b480      	push	{r7}
  40351e:	b089      	sub	sp, #36	; 0x24
  403520:	af00      	add	r7, sp, #0
  403522:	4603      	mov	r3, r0
  403524:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  403526:	79fb      	ldrb	r3, [r7, #7]
  403528:	1e5a      	subs	r2, r3, #1
  40352a:	4613      	mov	r3, r2
  40352c:	009b      	lsls	r3, r3, #2
  40352e:	4413      	add	r3, r2
  403530:	009b      	lsls	r3, r3, #2
  403532:	4a3d      	ldr	r2, [pc, #244]	; (403628 <udd_ep_ack_out_received+0x10c>)
  403534:	4413      	add	r3, r2
  403536:	61fb      	str	r3, [r7, #28]
	if (Is_udd_all_banks_received(ep)) {
  403538:	4b3c      	ldr	r3, [pc, #240]	; (40362c <udd_ep_ack_out_received+0x110>)
  40353a:	79fa      	ldrb	r2, [r7, #7]
  40353c:	320c      	adds	r2, #12
  40353e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403542:	f003 0342 	and.w	r3, r3, #66	; 0x42
  403546:	2b42      	cmp	r3, #66	; 0x42
  403548:	d014      	beq.n	403574 <udd_ep_ack_out_received+0x58>
		// The only way is to use ptr_job->bank
	} else if (Is_udd_bank0_received(ep)) {
  40354a:	4b38      	ldr	r3, [pc, #224]	; (40362c <udd_ep_ack_out_received+0x110>)
  40354c:	79fa      	ldrb	r2, [r7, #7]
  40354e:	320c      	adds	r2, #12
  403550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403554:	f003 0302 	and.w	r3, r3, #2
  403558:	2b00      	cmp	r3, #0
  40355a:	d005      	beq.n	403568 <udd_ep_ack_out_received+0x4c>
		// Must be bank0
		ptr_job->bank = 0;
  40355c:	69fa      	ldr	r2, [r7, #28]
  40355e:	7c53      	ldrb	r3, [r2, #17]
  403560:	f36f 0383 	bfc	r3, #2, #2
  403564:	7453      	strb	r3, [r2, #17]
  403566:	e005      	b.n	403574 <udd_ep_ack_out_received+0x58>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  403568:	69fa      	ldr	r2, [r7, #28]
  40356a:	7c53      	ldrb	r3, [r2, #17]
  40356c:	2101      	movs	r1, #1
  40356e:	f361 0383 	bfi	r3, r1, #2, #2
  403572:	7453      	strb	r3, [r2, #17]
	}
	if (ptr_job->bank == 0) {
  403574:	69fb      	ldr	r3, [r7, #28]
  403576:	7c5b      	ldrb	r3, [r3, #17]
  403578:	f3c3 0381 	ubfx	r3, r3, #2, #2
  40357c:	b2db      	uxtb	r3, r3
  40357e:	2b00      	cmp	r3, #0
  403580:	d12a      	bne.n	4035d8 <udd_ep_ack_out_received+0xbc>
		udd_ack_bank0_received(ep);
  403582:	4b2a      	ldr	r3, [pc, #168]	; (40362c <udd_ep_ack_out_received+0x110>)
  403584:	79fa      	ldrb	r2, [r7, #7]
  403586:	320c      	adds	r2, #12
  403588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40358c:	61bb      	str	r3, [r7, #24]
  40358e:	69bb      	ldr	r3, [r7, #24]
  403590:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403594:	61bb      	str	r3, [r7, #24]
  403596:	69bb      	ldr	r3, [r7, #24]
  403598:	f023 0302 	bic.w	r3, r3, #2
  40359c:	61bb      	str	r3, [r7, #24]
  40359e:	4b23      	ldr	r3, [pc, #140]	; (40362c <udd_ep_ack_out_received+0x110>)
  4035a0:	79fa      	ldrb	r2, [r7, #7]
  4035a2:	69b9      	ldr	r1, [r7, #24]
  4035a4:	320c      	adds	r2, #12
  4035a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4035aa:	2300      	movs	r3, #0
  4035ac:	617b      	str	r3, [r7, #20]
  4035ae:	e003      	b.n	4035b8 <udd_ep_ack_out_received+0x9c>
  4035b0:	bf00      	nop
  4035b2:	697b      	ldr	r3, [r7, #20]
  4035b4:	3301      	adds	r3, #1
  4035b6:	617b      	str	r3, [r7, #20]
  4035b8:	697b      	ldr	r3, [r7, #20]
  4035ba:	2b13      	cmp	r3, #19
  4035bc:	d9f8      	bls.n	4035b0 <udd_ep_ack_out_received+0x94>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  4035be:	79fb      	ldrb	r3, [r7, #7]
  4035c0:	2b00      	cmp	r3, #0
  4035c2:	d02c      	beq.n	40361e <udd_ep_ack_out_received+0x102>
  4035c4:	79fb      	ldrb	r3, [r7, #7]
  4035c6:	2b03      	cmp	r3, #3
  4035c8:	d029      	beq.n	40361e <udd_ep_ack_out_received+0x102>
			ptr_job->bank = 1;
  4035ca:	69fa      	ldr	r2, [r7, #28]
  4035cc:	7c53      	ldrb	r3, [r2, #17]
  4035ce:	2101      	movs	r1, #1
  4035d0:	f361 0383 	bfi	r3, r1, #2, #2
  4035d4:	7453      	strb	r3, [r2, #17]
  4035d6:	e022      	b.n	40361e <udd_ep_ack_out_received+0x102>
		}
	} else {
		udd_ack_bank1_received(ep);
  4035d8:	4b14      	ldr	r3, [pc, #80]	; (40362c <udd_ep_ack_out_received+0x110>)
  4035da:	79fa      	ldrb	r2, [r7, #7]
  4035dc:	320c      	adds	r2, #12
  4035de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4035e2:	613b      	str	r3, [r7, #16]
  4035e4:	693b      	ldr	r3, [r7, #16]
  4035e6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4035ea:	613b      	str	r3, [r7, #16]
  4035ec:	693b      	ldr	r3, [r7, #16]
  4035ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4035f2:	613b      	str	r3, [r7, #16]
  4035f4:	4b0d      	ldr	r3, [pc, #52]	; (40362c <udd_ep_ack_out_received+0x110>)
  4035f6:	79fa      	ldrb	r2, [r7, #7]
  4035f8:	6939      	ldr	r1, [r7, #16]
  4035fa:	320c      	adds	r2, #12
  4035fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403600:	2300      	movs	r3, #0
  403602:	60fb      	str	r3, [r7, #12]
  403604:	e003      	b.n	40360e <udd_ep_ack_out_received+0xf2>
  403606:	bf00      	nop
  403608:	68fb      	ldr	r3, [r7, #12]
  40360a:	3301      	adds	r3, #1
  40360c:	60fb      	str	r3, [r7, #12]
  40360e:	68fb      	ldr	r3, [r7, #12]
  403610:	2b13      	cmp	r3, #19
  403612:	d9f8      	bls.n	403606 <udd_ep_ack_out_received+0xea>
		ptr_job->bank = 0;
  403614:	69fa      	ldr	r2, [r7, #28]
  403616:	7c53      	ldrb	r3, [r2, #17]
  403618:	f36f 0383 	bfc	r3, #2, #2
  40361c:	7453      	strb	r3, [r2, #17]
	}
}
  40361e:	3724      	adds	r7, #36	; 0x24
  403620:	46bd      	mov	sp, r7
  403622:	f85d 7b04 	ldr.w	r7, [sp], #4
  403626:	4770      	bx	lr
  403628:	20000dc4 	.word	0x20000dc4
  40362c:	40034000 	.word	0x40034000

00403630 <udd_ep_write_fifo>:


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
  403630:	b480      	push	{r7}
  403632:	b089      	sub	sp, #36	; 0x24
  403634:	af00      	add	r7, sp, #0
  403636:	4603      	mov	r3, r0
  403638:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40363a:	79fb      	ldrb	r3, [r7, #7]
  40363c:	1e5a      	subs	r2, r3, #1
  40363e:	4613      	mov	r3, r2
  403640:	009b      	lsls	r3, r3, #2
  403642:	4413      	add	r3, r2
  403644:	009b      	lsls	r3, r3, #2
  403646:	4a55      	ldr	r2, [pc, #340]	; (40379c <udd_ep_write_fifo+0x16c>)
  403648:	4413      	add	r3, r2
  40364a:	613b      	str	r3, [r7, #16]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  40364c:	693b      	ldr	r3, [r7, #16]
  40364e:	685a      	ldr	r2, [r3, #4]
  403650:	693b      	ldr	r3, [r7, #16]
  403652:	68db      	ldr	r3, [r3, #12]
  403654:	4413      	add	r3, r2
  403656:	61fb      	str	r3, [r7, #28]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  403658:	693b      	ldr	r3, [r7, #16]
  40365a:	689a      	ldr	r2, [r3, #8]
  40365c:	693b      	ldr	r3, [r7, #16]
  40365e:	68db      	ldr	r3, [r3, #12]
  403660:	1ad3      	subs	r3, r2, r3
  403662:	60fb      	str	r3, [r7, #12]
	uint32_t pkt_size = ptr_job->size;
  403664:	693b      	ldr	r3, [r7, #16]
  403666:	8a1b      	ldrh	r3, [r3, #16]
  403668:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40366c:	b29b      	uxth	r3, r3
  40366e:	61bb      	str	r3, [r7, #24]
	bool is_short_pkt = false;
  403670:	2300      	movs	r3, #0
  403672:	75fb      	strb	r3, [r7, #23]

	// Packet size
	if (nb_remain < pkt_size) {
  403674:	68fa      	ldr	r2, [r7, #12]
  403676:	69bb      	ldr	r3, [r7, #24]
  403678:	429a      	cmp	r2, r3
  40367a:	d203      	bcs.n	403684 <udd_ep_write_fifo+0x54>
		pkt_size = nb_remain;
  40367c:	68fb      	ldr	r3, [r7, #12]
  40367e:	61bb      	str	r3, [r7, #24]
		is_short_pkt = true;
  403680:	2301      	movs	r3, #1
  403682:	75fb      	strb	r3, [r7, #23]
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  403684:	693b      	ldr	r3, [r7, #16]
  403686:	68da      	ldr	r2, [r3, #12]
  403688:	69bb      	ldr	r3, [r7, #24]
  40368a:	441a      	add	r2, r3
  40368c:	693b      	ldr	r3, [r7, #16]
  40368e:	60da      	str	r2, [r3, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  403690:	e05a      	b.n	403748 <udd_ep_write_fifo+0x118>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403692:	4a43      	ldr	r2, [pc, #268]	; (4037a0 <udd_ep_write_fifo+0x170>)
  403694:	79f8      	ldrb	r0, [r7, #7]
  403696:	69fb      	ldr	r3, [r7, #28]
  403698:	1c59      	adds	r1, r3, #1
  40369a:	61f9      	str	r1, [r7, #28]
  40369c:	781b      	ldrb	r3, [r3, #0]
  40369e:	4619      	mov	r1, r3
  4036a0:	f100 0314 	add.w	r3, r0, #20
  4036a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4036a8:	4a3d      	ldr	r2, [pc, #244]	; (4037a0 <udd_ep_write_fifo+0x170>)
  4036aa:	79f8      	ldrb	r0, [r7, #7]
  4036ac:	69fb      	ldr	r3, [r7, #28]
  4036ae:	1c59      	adds	r1, r3, #1
  4036b0:	61f9      	str	r1, [r7, #28]
  4036b2:	781b      	ldrb	r3, [r3, #0]
  4036b4:	4619      	mov	r1, r3
  4036b6:	f100 0314 	add.w	r3, r0, #20
  4036ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4036be:	4a38      	ldr	r2, [pc, #224]	; (4037a0 <udd_ep_write_fifo+0x170>)
  4036c0:	79f8      	ldrb	r0, [r7, #7]
  4036c2:	69fb      	ldr	r3, [r7, #28]
  4036c4:	1c59      	adds	r1, r3, #1
  4036c6:	61f9      	str	r1, [r7, #28]
  4036c8:	781b      	ldrb	r3, [r3, #0]
  4036ca:	4619      	mov	r1, r3
  4036cc:	f100 0314 	add.w	r3, r0, #20
  4036d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4036d4:	4a32      	ldr	r2, [pc, #200]	; (4037a0 <udd_ep_write_fifo+0x170>)
  4036d6:	79f8      	ldrb	r0, [r7, #7]
  4036d8:	69fb      	ldr	r3, [r7, #28]
  4036da:	1c59      	adds	r1, r3, #1
  4036dc:	61f9      	str	r1, [r7, #28]
  4036de:	781b      	ldrb	r3, [r3, #0]
  4036e0:	4619      	mov	r1, r3
  4036e2:	f100 0314 	add.w	r3, r0, #20
  4036e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4036ea:	4a2d      	ldr	r2, [pc, #180]	; (4037a0 <udd_ep_write_fifo+0x170>)
  4036ec:	79f8      	ldrb	r0, [r7, #7]
  4036ee:	69fb      	ldr	r3, [r7, #28]
  4036f0:	1c59      	adds	r1, r3, #1
  4036f2:	61f9      	str	r1, [r7, #28]
  4036f4:	781b      	ldrb	r3, [r3, #0]
  4036f6:	4619      	mov	r1, r3
  4036f8:	f100 0314 	add.w	r3, r0, #20
  4036fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403700:	4a27      	ldr	r2, [pc, #156]	; (4037a0 <udd_ep_write_fifo+0x170>)
  403702:	79f8      	ldrb	r0, [r7, #7]
  403704:	69fb      	ldr	r3, [r7, #28]
  403706:	1c59      	adds	r1, r3, #1
  403708:	61f9      	str	r1, [r7, #28]
  40370a:	781b      	ldrb	r3, [r3, #0]
  40370c:	4619      	mov	r1, r3
  40370e:	f100 0314 	add.w	r3, r0, #20
  403712:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403716:	4a22      	ldr	r2, [pc, #136]	; (4037a0 <udd_ep_write_fifo+0x170>)
  403718:	79f8      	ldrb	r0, [r7, #7]
  40371a:	69fb      	ldr	r3, [r7, #28]
  40371c:	1c59      	adds	r1, r3, #1
  40371e:	61f9      	str	r1, [r7, #28]
  403720:	781b      	ldrb	r3, [r3, #0]
  403722:	4619      	mov	r1, r3
  403724:	f100 0314 	add.w	r3, r0, #20
  403728:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40372c:	4a1c      	ldr	r2, [pc, #112]	; (4037a0 <udd_ep_write_fifo+0x170>)
  40372e:	79f8      	ldrb	r0, [r7, #7]
  403730:	69fb      	ldr	r3, [r7, #28]
  403732:	1c59      	adds	r1, r3, #1
  403734:	61f9      	str	r1, [r7, #28]
  403736:	781b      	ldrb	r3, [r3, #0]
  403738:	4619      	mov	r1, r3
  40373a:	f100 0314 	add.w	r3, r0, #20
  40373e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  403742:	69bb      	ldr	r3, [r7, #24]
  403744:	3b08      	subs	r3, #8
  403746:	61bb      	str	r3, [r7, #24]
  403748:	69bb      	ldr	r3, [r7, #24]
  40374a:	2b07      	cmp	r3, #7
  40374c:	d8a1      	bhi.n	403692 <udd_ep_write_fifo+0x62>
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  40374e:	e00d      	b.n	40376c <udd_ep_write_fifo+0x13c>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403750:	4a13      	ldr	r2, [pc, #76]	; (4037a0 <udd_ep_write_fifo+0x170>)
  403752:	79f8      	ldrb	r0, [r7, #7]
  403754:	69fb      	ldr	r3, [r7, #28]
  403756:	1c59      	adds	r1, r3, #1
  403758:	61f9      	str	r1, [r7, #28]
  40375a:	781b      	ldrb	r3, [r3, #0]
  40375c:	4619      	mov	r1, r3
  40375e:	f100 0314 	add.w	r3, r0, #20
  403762:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  403766:	69bb      	ldr	r3, [r7, #24]
  403768:	3b01      	subs	r3, #1
  40376a:	61bb      	str	r3, [r7, #24]
  40376c:	69bb      	ldr	r3, [r7, #24]
  40376e:	2b00      	cmp	r3, #0
  403770:	d1ee      	bne.n	403750 <udd_ep_write_fifo+0x120>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  403772:	693b      	ldr	r3, [r7, #16]
  403774:	7c5b      	ldrb	r3, [r3, #17]
  403776:	f3c3 0381 	ubfx	r3, r3, #2, #2
  40377a:	b2db      	uxtb	r3, r3
  40377c:	3301      	adds	r3, #1
  40377e:	f003 0303 	and.w	r3, r3, #3
  403782:	b2d9      	uxtb	r1, r3
  403784:	693a      	ldr	r2, [r7, #16]
  403786:	7c53      	ldrb	r3, [r2, #17]
  403788:	f361 0383 	bfi	r3, r1, #2, #2
  40378c:	7453      	strb	r3, [r2, #17]
	return is_short_pkt;
  40378e:	7dfb      	ldrb	r3, [r7, #23]
}
  403790:	4618      	mov	r0, r3
  403792:	3724      	adds	r7, #36	; 0x24
  403794:	46bd      	mov	sp, r7
  403796:	f85d 7b04 	ldr.w	r7, [sp], #4
  40379a:	4770      	bx	lr
  40379c:	20000dc4 	.word	0x20000dc4
  4037a0:	40034000 	.word	0x40034000

004037a4 <udd_ep_in_sent>:


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  4037a4:	b580      	push	{r7, lr}
  4037a6:	b086      	sub	sp, #24
  4037a8:	af00      	add	r7, sp, #0
  4037aa:	4602      	mov	r2, r0
  4037ac:	460b      	mov	r3, r1
  4037ae:	71fa      	strb	r2, [r7, #7]
  4037b0:	71bb      	strb	r3, [r7, #6]
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4037b2:	79fb      	ldrb	r3, [r7, #7]
  4037b4:	1e5a      	subs	r2, r3, #1
  4037b6:	4613      	mov	r3, r2
  4037b8:	009b      	lsls	r3, r3, #2
  4037ba:	4413      	add	r3, r2
  4037bc:	009b      	lsls	r3, r3, #2
  4037be:	4a36      	ldr	r2, [pc, #216]	; (403898 <udd_ep_in_sent+0xf4>)
  4037c0:	4413      	add	r3, r2
  4037c2:	617b      	str	r3, [r7, #20]

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4037c4:	697b      	ldr	r3, [r7, #20]
  4037c6:	7c5b      	ldrb	r3, [r3, #17]
  4037c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4037cc:	b2db      	uxtb	r3, r3
  4037ce:	461a      	mov	r2, r3
  4037d0:	79fb      	ldrb	r3, [r7, #7]
  4037d2:	2b00      	cmp	r3, #0
  4037d4:	d002      	beq.n	4037dc <udd_ep_in_sent+0x38>
  4037d6:	79fb      	ldrb	r3, [r7, #7]
  4037d8:	2b03      	cmp	r3, #3
  4037da:	d101      	bne.n	4037e0 <udd_ep_in_sent+0x3c>
  4037dc:	2301      	movs	r3, #1
  4037de:	e000      	b.n	4037e2 <udd_ep_in_sent+0x3e>
  4037e0:	2302      	movs	r3, #2
  4037e2:	429a      	cmp	r2, r3
  4037e4:	db01      	blt.n	4037ea <udd_ep_in_sent+0x46>
		return true; // Data pending
  4037e6:	2301      	movs	r3, #1
  4037e8:	e052      	b.n	403890 <udd_ep_in_sent+0xec>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  4037ea:	697b      	ldr	r3, [r7, #20]
  4037ec:	68da      	ldr	r2, [r3, #12]
  4037ee:	697b      	ldr	r3, [r7, #20]
  4037f0:	689b      	ldr	r3, [r3, #8]
  4037f2:	429a      	cmp	r2, r3
  4037f4:	d308      	bcc.n	403808 <udd_ep_in_sent+0x64>
  4037f6:	697b      	ldr	r3, [r7, #20]
  4037f8:	7c5b      	ldrb	r3, [r3, #17]
  4037fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
  4037fe:	b2db      	uxtb	r3, r3
  403800:	2b00      	cmp	r3, #0
  403802:	d101      	bne.n	403808 <udd_ep_in_sent+0x64>
		return false;
  403804:	2300      	movs	r3, #0
  403806:	e043      	b.n	403890 <udd_ep_in_sent+0xec>
	}

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);
  403808:	79fb      	ldrb	r3, [r7, #7]
  40380a:	4618      	mov	r0, r3
  40380c:	4b23      	ldr	r3, [pc, #140]	; (40389c <udd_ep_in_sent+0xf8>)
  40380e:	4798      	blx	r3
  403810:	4603      	mov	r3, r0
  403812:	74fb      	strb	r3, [r7, #19]

	// Data is ready to send
	if (b_tx) {
  403814:	79bb      	ldrb	r3, [r7, #6]
  403816:	2b00      	cmp	r3, #0
  403818:	d01d      	beq.n	403856 <udd_ep_in_sent+0xb2>
		udd_set_transmit_ready(ep);
  40381a:	4b21      	ldr	r3, [pc, #132]	; (4038a0 <udd_ep_in_sent+0xfc>)
  40381c:	79fa      	ldrb	r2, [r7, #7]
  40381e:	320c      	adds	r2, #12
  403820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403824:	60fb      	str	r3, [r7, #12]
  403826:	68fb      	ldr	r3, [r7, #12]
  403828:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40382c:	60fb      	str	r3, [r7, #12]
  40382e:	68fb      	ldr	r3, [r7, #12]
  403830:	f043 0310 	orr.w	r3, r3, #16
  403834:	60fb      	str	r3, [r7, #12]
  403836:	4b1a      	ldr	r3, [pc, #104]	; (4038a0 <udd_ep_in_sent+0xfc>)
  403838:	79fa      	ldrb	r2, [r7, #7]
  40383a:	68f9      	ldr	r1, [r7, #12]
  40383c:	320c      	adds	r2, #12
  40383e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403842:	2300      	movs	r3, #0
  403844:	60bb      	str	r3, [r7, #8]
  403846:	e003      	b.n	403850 <udd_ep_in_sent+0xac>
  403848:	bf00      	nop
  40384a:	68bb      	ldr	r3, [r7, #8]
  40384c:	3301      	adds	r3, #1
  40384e:	60bb      	str	r3, [r7, #8]
  403850:	68bb      	ldr	r3, [r7, #8]
  403852:	2b13      	cmp	r3, #19
  403854:	d9f8      	bls.n	403848 <udd_ep_in_sent+0xa4>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  403856:	7cfb      	ldrb	r3, [r7, #19]
  403858:	2b00      	cmp	r3, #0
  40385a:	d004      	beq.n	403866 <udd_ep_in_sent+0xc2>
		ptr_job->b_shortpacket = false;
  40385c:	697a      	ldr	r2, [r7, #20]
  40385e:	7c53      	ldrb	r3, [r2, #17]
  403860:	f36f 1386 	bfc	r3, #6, #1
  403864:	7453      	strb	r3, [r2, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  403866:	697b      	ldr	r3, [r7, #20]
  403868:	68da      	ldr	r2, [r3, #12]
  40386a:	697b      	ldr	r3, [r7, #20]
  40386c:	689b      	ldr	r3, [r3, #8]
  40386e:	429a      	cmp	r2, r3
  403870:	d30d      	bcc.n	40388e <udd_ep_in_sent+0xea>
			&& (!ptr_job->b_shortpacket)) {
  403872:	697b      	ldr	r3, [r7, #20]
  403874:	7c5b      	ldrb	r3, [r3, #17]
  403876:	f3c3 1380 	ubfx	r3, r3, #6, #1
  40387a:	b2db      	uxtb	r3, r3
  40387c:	2b00      	cmp	r3, #0
  40387e:	d106      	bne.n	40388e <udd_ep_in_sent+0xea>
		ptr_job->b_buf_end = true;
  403880:	697a      	ldr	r2, [r7, #20]
  403882:	7c53      	ldrb	r3, [r2, #17]
  403884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403888:	7453      	strb	r3, [r2, #17]
		return false;
  40388a:	2300      	movs	r3, #0
  40388c:	e000      	b.n	403890 <udd_ep_in_sent+0xec>
	}
	return true; // Pending
  40388e:	2301      	movs	r3, #1
}
  403890:	4618      	mov	r0, r3
  403892:	3718      	adds	r7, #24
  403894:	46bd      	mov	sp, r7
  403896:	bd80      	pop	{r7, pc}
  403898:	20000dc4 	.word	0x20000dc4
  40389c:	00403631 	.word	0x00403631
  4038a0:	40034000 	.word	0x40034000

004038a4 <udd_ep_out_received>:


static void udd_ep_out_received(udd_ep_id_t ep)
{
  4038a4:	b580      	push	{r7, lr}
  4038a6:	b08a      	sub	sp, #40	; 0x28
  4038a8:	af00      	add	r7, sp, #0
  4038aa:	4603      	mov	r3, r0
  4038ac:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4038ae:	79fb      	ldrb	r3, [r7, #7]
  4038b0:	1e5a      	subs	r2, r3, #1
  4038b2:	4613      	mov	r3, r2
  4038b4:	009b      	lsls	r3, r3, #2
  4038b6:	4413      	add	r3, r2
  4038b8:	009b      	lsls	r3, r3, #2
  4038ba:	4a3a      	ldr	r2, [pc, #232]	; (4039a4 <udd_ep_out_received+0x100>)
  4038bc:	4413      	add	r3, r2
  4038be:	617b      	str	r3, [r7, #20]
	uint32_t nb_data = 0, i;
  4038c0:	2300      	movs	r3, #0
  4038c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4038c4:	697b      	ldr	r3, [r7, #20]
  4038c6:	689a      	ldr	r2, [r3, #8]
  4038c8:	697b      	ldr	r3, [r7, #20]
  4038ca:	68db      	ldr	r3, [r3, #12]
  4038cc:	1ad3      	subs	r3, r2, r3
  4038ce:	613b      	str	r3, [r7, #16]
	uint32_t pkt_size = ptr_job->size;
  4038d0:	697b      	ldr	r3, [r7, #20]
  4038d2:	8a1b      	ldrh	r3, [r3, #16]
  4038d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4038d8:	b29b      	uxth	r3, r3
  4038da:	60fb      	str	r3, [r7, #12]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4038dc:	697b      	ldr	r3, [r7, #20]
  4038de:	685a      	ldr	r2, [r3, #4]
  4038e0:	697b      	ldr	r3, [r7, #20]
  4038e2:	68db      	ldr	r3, [r3, #12]
  4038e4:	4413      	add	r3, r2
  4038e6:	61fb      	str	r3, [r7, #28]
	bool b_full = false, b_short;
  4038e8:	2300      	movs	r3, #0
  4038ea:	76fb      	strb	r3, [r7, #27]

	// Read byte count
	nb_data = udd_byte_count(ep);
  4038ec:	4b2e      	ldr	r3, [pc, #184]	; (4039a8 <udd_ep_out_received+0x104>)
  4038ee:	79fa      	ldrb	r2, [r7, #7]
  4038f0:	320c      	adds	r2, #12
  4038f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4038f6:	4b2d      	ldr	r3, [pc, #180]	; (4039ac <udd_ep_out_received+0x108>)
  4038f8:	4013      	ands	r3, r2
  4038fa:	0c1b      	lsrs	r3, r3, #16
  4038fc:	627b      	str	r3, [r7, #36]	; 0x24
	b_short = (nb_data < pkt_size);
  4038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  403900:	68fb      	ldr	r3, [r7, #12]
  403902:	429a      	cmp	r2, r3
  403904:	bf2c      	ite	cs
  403906:	2300      	movcs	r3, #0
  403908:	2301      	movcc	r3, #1
  40390a:	72fb      	strb	r3, [r7, #11]

	// Copy data if there is
	if (nb_data > 0) {
  40390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40390e:	2b00      	cmp	r3, #0
  403910:	d021      	beq.n	403956 <udd_ep_out_received+0xb2>
		if (nb_data >= nb_remain) {
  403912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  403914:	693b      	ldr	r3, [r7, #16]
  403916:	429a      	cmp	r2, r3
  403918:	d303      	bcc.n	403922 <udd_ep_out_received+0x7e>
			nb_data = nb_remain;
  40391a:	693b      	ldr	r3, [r7, #16]
  40391c:	627b      	str	r3, [r7, #36]	; 0x24
			b_full = true;
  40391e:	2301      	movs	r3, #1
  403920:	76fb      	strb	r3, [r7, #27]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  403922:	697b      	ldr	r3, [r7, #20]
  403924:	68da      	ldr	r2, [r3, #12]
  403926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403928:	441a      	add	r2, r3
  40392a:	697b      	ldr	r3, [r7, #20]
  40392c:	60da      	str	r2, [r3, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  40392e:	2300      	movs	r3, #0
  403930:	623b      	str	r3, [r7, #32]
  403932:	e00c      	b.n	40394e <udd_ep_out_received+0xaa>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  403934:	69fb      	ldr	r3, [r7, #28]
  403936:	1c5a      	adds	r2, r3, #1
  403938:	61fa      	str	r2, [r7, #28]
  40393a:	4a1b      	ldr	r2, [pc, #108]	; (4039a8 <udd_ep_out_received+0x104>)
  40393c:	79f9      	ldrb	r1, [r7, #7]
  40393e:	3114      	adds	r1, #20
  403940:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403944:	b2d2      	uxtb	r2, r2
  403946:	701a      	strb	r2, [r3, #0]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  403948:	6a3b      	ldr	r3, [r7, #32]
  40394a:	3301      	adds	r3, #1
  40394c:	623b      	str	r3, [r7, #32]
  40394e:	6a3a      	ldr	r2, [r7, #32]
  403950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403952:	429a      	cmp	r2, r3
  403954:	d3ee      	bcc.n	403934 <udd_ep_out_received+0x90>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  403956:	79fb      	ldrb	r3, [r7, #7]
  403958:	4618      	mov	r0, r3
  40395a:	4b15      	ldr	r3, [pc, #84]	; (4039b0 <udd_ep_out_received+0x10c>)
  40395c:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  40395e:	7efb      	ldrb	r3, [r7, #27]
  403960:	2b00      	cmp	r3, #0
  403962:	d102      	bne.n	40396a <udd_ep_out_received+0xc6>
  403964:	7afb      	ldrb	r3, [r7, #11]
  403966:	2b00      	cmp	r3, #0
  403968:	d018      	beq.n	40399c <udd_ep_out_received+0xf8>
			!Is_udd_endpoint_stall_requested(ep)) {
  40396a:	4b0f      	ldr	r3, [pc, #60]	; (4039a8 <udd_ep_out_received+0x104>)
  40396c:	79fa      	ldrb	r2, [r7, #7]
  40396e:	320c      	adds	r2, #12
  403970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403974:	f003 0320 	and.w	r3, r3, #32
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  403978:	2b00      	cmp	r3, #0
  40397a:	d10f      	bne.n	40399c <udd_ep_out_received+0xf8>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  40397c:	4b0a      	ldr	r3, [pc, #40]	; (4039a8 <udd_ep_out_received+0x104>)
  40397e:	79fa      	ldrb	r2, [r7, #7]
  403980:	2101      	movs	r1, #1
  403982:	fa01 f202 	lsl.w	r2, r1, r2
  403986:	615a      	str	r2, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403988:	697b      	ldr	r3, [r7, #20]
  40398a:	68da      	ldr	r2, [r3, #12]
  40398c:	697b      	ldr	r3, [r7, #20]
  40398e:	609a      	str	r2, [r3, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403990:	79fb      	ldrb	r3, [r7, #7]
  403992:	6978      	ldr	r0, [r7, #20]
  403994:	2100      	movs	r1, #0
  403996:	461a      	mov	r2, r3
  403998:	4b06      	ldr	r3, [pc, #24]	; (4039b4 <udd_ep_out_received+0x110>)
  40399a:	4798      	blx	r3
	}
}
  40399c:	3728      	adds	r7, #40	; 0x28
  40399e:	46bd      	mov	sp, r7
  4039a0:	bd80      	pop	{r7, pc}
  4039a2:	bf00      	nop
  4039a4:	20000dc4 	.word	0x20000dc4
  4039a8:	40034000 	.word	0x40034000
  4039ac:	07ff0000 	.word	0x07ff0000
  4039b0:	0040351d 	.word	0x0040351d
  4039b4:	004034ad 	.word	0x004034ad

004039b8 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
  4039b8:	b580      	push	{r7, lr}
  4039ba:	b098      	sub	sp, #96	; 0x60
  4039bc:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4039be:	2301      	movs	r3, #1
  4039c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  4039c4:	e247      	b.n	403e56 <udd_ep_interrupt+0x49e>
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4039c6:	4bac      	ldr	r3, [pc, #688]	; (403c78 <udd_ep_interrupt+0x2c0>)
  4039c8:	699a      	ldr	r2, [r3, #24]
  4039ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4039ce:	2101      	movs	r1, #1
  4039d0:	fa01 f303 	lsl.w	r3, r1, r3
  4039d4:	4013      	ands	r3, r2
  4039d6:	2b00      	cmp	r3, #0
  4039d8:	d100      	bne.n	4039dc <udd_ep_interrupt+0x24>
			continue;
  4039da:	e237      	b.n	403e4c <udd_ep_interrupt+0x494>
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  4039dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4039e0:	1e5a      	subs	r2, r3, #1
  4039e2:	4613      	mov	r3, r2
  4039e4:	009b      	lsls	r3, r3, #2
  4039e6:	4413      	add	r3, r2
  4039e8:	009b      	lsls	r3, r3, #2
  4039ea:	4aa4      	ldr	r2, [pc, #656]	; (403c7c <udd_ep_interrupt+0x2c4>)
  4039ec:	4413      	add	r3, r2
  4039ee:	65bb      	str	r3, [r7, #88]	; 0x58

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  4039f0:	4ba1      	ldr	r3, [pc, #644]	; (403c78 <udd_ep_interrupt+0x2c0>)
  4039f2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4039f6:	320c      	adds	r2, #12
  4039f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4039fc:	f003 0342 	and.w	r3, r3, #66	; 0x42
  403a00:	2b00      	cmp	r3, #0
  403a02:	d006      	beq.n	403a12 <udd_ep_interrupt+0x5a>
			udd_ep_out_received(ep);
  403a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403a08:	4618      	mov	r0, r3
  403a0a:	4b9d      	ldr	r3, [pc, #628]	; (403c80 <udd_ep_interrupt+0x2c8>)
  403a0c:	4798      	blx	r3
			return true;
  403a0e:	2301      	movs	r3, #1
  403a10:	e227      	b.n	403e62 <udd_ep_interrupt+0x4aa>
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  403a12:	4b99      	ldr	r3, [pc, #612]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403a14:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403a18:	320c      	adds	r2, #12
  403a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403a1e:	f003 0301 	and.w	r3, r3, #1
  403a22:	2b00      	cmp	r3, #0
  403a24:	f000 81d5 	beq.w	403dd2 <udd_ep_interrupt+0x41a>

			ptr_job->bank--;
  403a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403a2a:	7c5b      	ldrb	r3, [r3, #17]
  403a2c:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403a30:	b2db      	uxtb	r3, r3
  403a32:	3303      	adds	r3, #3
  403a34:	f003 0303 	and.w	r3, r3, #3
  403a38:	b2d9      	uxtb	r1, r3
  403a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
  403a3c:	7c53      	ldrb	r3, [r2, #17]
  403a3e:	f361 0383 	bfi	r3, r1, #2, #2
  403a42:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  403a44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403a46:	7c5b      	ldrb	r3, [r3, #17]
  403a48:	f3c3 1340 	ubfx	r3, r3, #5, #1
  403a4c:	b2db      	uxtb	r3, r3
  403a4e:	2b00      	cmp	r3, #0
  403a50:	f000 808f 	beq.w	403b72 <udd_ep_interrupt+0x1ba>
				if (ptr_job->bank) {
  403a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403a56:	7c5b      	ldrb	r3, [r3, #17]
  403a58:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403a5c:	b2db      	uxtb	r3, r3
  403a5e:	2b00      	cmp	r3, #0
  403a60:	d040      	beq.n	403ae4 <udd_ep_interrupt+0x12c>
					// Send remaining
					udd_set_transmit_ready(ep);
  403a62:	4b85      	ldr	r3, [pc, #532]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403a64:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403a68:	320c      	adds	r2, #12
  403a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403a6e:	653b      	str	r3, [r7, #80]	; 0x50
  403a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  403a72:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403a76:	653b      	str	r3, [r7, #80]	; 0x50
  403a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  403a7a:	f043 0310 	orr.w	r3, r3, #16
  403a7e:	653b      	str	r3, [r7, #80]	; 0x50
  403a80:	4b7d      	ldr	r3, [pc, #500]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403a82:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403a86:	6d39      	ldr	r1, [r7, #80]	; 0x50
  403a88:	320c      	adds	r2, #12
  403a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403a8e:	2300      	movs	r3, #0
  403a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  403a92:	e003      	b.n	403a9c <udd_ep_interrupt+0xe4>
  403a94:	bf00      	nop
  403a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  403a98:	3301      	adds	r3, #1
  403a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  403a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  403a9e:	2b13      	cmp	r3, #19
  403aa0:	d9f8      	bls.n	403a94 <udd_ep_interrupt+0xdc>
					udd_ack_in_sent(ep);
  403aa2:	4b75      	ldr	r3, [pc, #468]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403aa4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403aa8:	320c      	adds	r2, #12
  403aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403aae:	64bb      	str	r3, [r7, #72]	; 0x48
  403ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  403ab2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  403ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  403aba:	f023 0301 	bic.w	r3, r3, #1
  403abe:	64bb      	str	r3, [r7, #72]	; 0x48
  403ac0:	4b6d      	ldr	r3, [pc, #436]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403ac2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403ac6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
  403ac8:	320c      	adds	r2, #12
  403aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403ace:	2300      	movs	r3, #0
  403ad0:	647b      	str	r3, [r7, #68]	; 0x44
  403ad2:	e003      	b.n	403adc <udd_ep_interrupt+0x124>
  403ad4:	bf00      	nop
  403ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  403ad8:	3301      	adds	r3, #1
  403ada:	647b      	str	r3, [r7, #68]	; 0x44
  403adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  403ade:	2b13      	cmp	r3, #19
  403ae0:	d9f8      	bls.n	403ad4 <udd_ep_interrupt+0x11c>
  403ae2:	e044      	b.n	403b6e <udd_ep_interrupt+0x1b6>
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  403ae4:	4b64      	ldr	r3, [pc, #400]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403ae6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403aea:	320c      	adds	r2, #12
  403aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403af0:	643b      	str	r3, [r7, #64]	; 0x40
  403af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  403af4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403af8:	643b      	str	r3, [r7, #64]	; 0x40
  403afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  403afc:	f023 0301 	bic.w	r3, r3, #1
  403b00:	643b      	str	r3, [r7, #64]	; 0x40
  403b02:	4b5d      	ldr	r3, [pc, #372]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403b04:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b08:	6c39      	ldr	r1, [r7, #64]	; 0x40
  403b0a:	320c      	adds	r2, #12
  403b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403b10:	2300      	movs	r3, #0
  403b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  403b14:	e003      	b.n	403b1e <udd_ep_interrupt+0x166>
  403b16:	bf00      	nop
  403b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403b1a:	3301      	adds	r3, #1
  403b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  403b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403b20:	2b13      	cmp	r3, #19
  403b22:	d9f8      	bls.n	403b16 <udd_ep_interrupt+0x15e>
					// Enable stall
					udd_enable_stall_handshake(ep);
  403b24:	4b54      	ldr	r3, [pc, #336]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403b26:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b2a:	320c      	adds	r2, #12
  403b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403b30:	63bb      	str	r3, [r7, #56]	; 0x38
  403b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403b34:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403b38:	63bb      	str	r3, [r7, #56]	; 0x38
  403b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403b3c:	f043 0320 	orr.w	r3, r3, #32
  403b40:	63bb      	str	r3, [r7, #56]	; 0x38
  403b42:	4b4d      	ldr	r3, [pc, #308]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403b44:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  403b4a:	320c      	adds	r2, #12
  403b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403b50:	2300      	movs	r3, #0
  403b52:	637b      	str	r3, [r7, #52]	; 0x34
  403b54:	e003      	b.n	403b5e <udd_ep_interrupt+0x1a6>
  403b56:	bf00      	nop
  403b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403b5a:	3301      	adds	r3, #1
  403b5c:	637b      	str	r3, [r7, #52]	; 0x34
  403b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403b60:	2b13      	cmp	r3, #19
  403b62:	d9f8      	bls.n	403b56 <udd_ep_interrupt+0x19e>
					// Halt executed
					ptr_job->b_stall_requested = false;
  403b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
  403b66:	7c53      	ldrb	r3, [r2, #17]
  403b68:	f36f 1345 	bfc	r3, #5, #1
  403b6c:	7453      	strb	r3, [r2, #17]
				}
				return true;
  403b6e:	2301      	movs	r3, #1
  403b70:	e177      	b.n	403e62 <udd_ep_interrupt+0x4aa>
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  403b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403b74:	7c5b      	ldrb	r3, [r3, #17]
  403b76:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  403b7a:	b2db      	uxtb	r3, r3
  403b7c:	2b00      	cmp	r3, #0
  403b7e:	d00f      	beq.n	403ba0 <udd_ep_interrupt+0x1e8>
				ptr_job->b_buf_end = false;
  403b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
  403b82:	7c53      	ldrb	r3, [r2, #17]
  403b84:	f36f 13c7 	bfc	r3, #7, #1
  403b88:	7453      	strb	r3, [r2, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403b8c:	68da      	ldr	r2, [r3, #12]
  403b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403b90:	609a      	str	r2, [r3, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403b92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403b96:	6db8      	ldr	r0, [r7, #88]	; 0x58
  403b98:	2100      	movs	r1, #0
  403b9a:	461a      	mov	r2, r3
  403b9c:	4b39      	ldr	r3, [pc, #228]	; (403c84 <udd_ep_interrupt+0x2cc>)
  403b9e:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  403ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403ba2:	68da      	ldr	r2, [r3, #12]
  403ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403ba6:	689b      	ldr	r3, [r3, #8]
  403ba8:	429a      	cmp	r2, r3
  403baa:	d33c      	bcc.n	403c26 <udd_ep_interrupt+0x26e>
					!ptr_job->b_shortpacket &&
  403bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403bae:	7c5b      	ldrb	r3, [r3, #17]
  403bb0:	f3c3 1380 	ubfx	r3, r3, #6, #1
  403bb4:	b2db      	uxtb	r3, r3
			if (ptr_job->b_buf_end) {
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  403bb6:	2b00      	cmp	r3, #0
  403bb8:	d135      	bne.n	403c26 <udd_ep_interrupt+0x26e>
					!ptr_job->b_shortpacket &&
					ptr_job->bank == 0) {
  403bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403bbc:	7c5b      	ldrb	r3, [r3, #17]
  403bbe:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403bc2:	b2db      	uxtb	r3, r3
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
					!ptr_job->b_shortpacket &&
  403bc4:	2b00      	cmp	r3, #0
  403bc6:	d12e      	bne.n	403c26 <udd_ep_interrupt+0x26e>
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
  403bc8:	4b2f      	ldr	r3, [pc, #188]	; (403c88 <udd_ep_interrupt+0x2d0>)
  403bca:	4798      	blx	r3
  403bcc:	6578      	str	r0, [r7, #84]	; 0x54
				udd_disable_endpoint_interrupt(ep);
  403bce:	4b2a      	ldr	r3, [pc, #168]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403bd0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403bd4:	2101      	movs	r1, #1
  403bd6:	fa01 f202 	lsl.w	r2, r1, r2
  403bda:	615a      	str	r2, [r3, #20]
				cpu_irq_restore(flags);
  403bdc:	6d78      	ldr	r0, [r7, #84]	; 0x54
  403bde:	4b2b      	ldr	r3, [pc, #172]	; (403c8c <udd_ep_interrupt+0x2d4>)
  403be0:	4798      	blx	r3
				// Ack last packet
				udd_ack_in_sent(ep);
  403be2:	4b25      	ldr	r3, [pc, #148]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403be4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403be8:	320c      	adds	r2, #12
  403bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403bee:	633b      	str	r3, [r7, #48]	; 0x30
  403bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  403bf2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403bf6:	633b      	str	r3, [r7, #48]	; 0x30
  403bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  403bfa:	f023 0301 	bic.w	r3, r3, #1
  403bfe:	633b      	str	r3, [r7, #48]	; 0x30
  403c00:	4b1d      	ldr	r3, [pc, #116]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403c02:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
  403c08:	320c      	adds	r2, #12
  403c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403c0e:	2300      	movs	r3, #0
  403c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  403c12:	e003      	b.n	403c1c <udd_ep_interrupt+0x264>
  403c14:	bf00      	nop
  403c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403c18:	3301      	adds	r3, #1
  403c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  403c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403c1e:	2b13      	cmp	r3, #19
  403c20:	d9f8      	bls.n	403c14 <udd_ep_interrupt+0x25c>
				return true;
  403c22:	2301      	movs	r3, #1
  403c24:	e11d      	b.n	403e62 <udd_ep_interrupt+0x4aa>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  403c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403c2a:	2b00      	cmp	r3, #0
  403c2c:	d05e      	beq.n	403cec <udd_ep_interrupt+0x334>
  403c2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403c32:	2b03      	cmp	r3, #3
  403c34:	d05a      	beq.n	403cec <udd_ep_interrupt+0x334>
					&& ptr_job->bank > 0) {
  403c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403c38:	7c5b      	ldrb	r3, [r3, #17]
  403c3a:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403c3e:	b2db      	uxtb	r3, r3
  403c40:	2b00      	cmp	r3, #0
  403c42:	dd53      	ble.n	403cec <udd_ep_interrupt+0x334>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  403c44:	4b0c      	ldr	r3, [pc, #48]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403c46:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403c4a:	320c      	adds	r2, #12
  403c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403c50:	62bb      	str	r3, [r7, #40]	; 0x28
  403c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403c54:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403c58:	62bb      	str	r3, [r7, #40]	; 0x28
  403c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403c5c:	f043 0310 	orr.w	r3, r3, #16
  403c60:	62bb      	str	r3, [r7, #40]	; 0x28
  403c62:	4b05      	ldr	r3, [pc, #20]	; (403c78 <udd_ep_interrupt+0x2c0>)
  403c64:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  403c6a:	320c      	adds	r2, #12
  403c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403c70:	2300      	movs	r3, #0
  403c72:	627b      	str	r3, [r7, #36]	; 0x24
  403c74:	e010      	b.n	403c98 <udd_ep_interrupt+0x2e0>
  403c76:	bf00      	nop
  403c78:	40034000 	.word	0x40034000
  403c7c:	20000dc4 	.word	0x20000dc4
  403c80:	004038a5 	.word	0x004038a5
  403c84:	004034ad 	.word	0x004034ad
  403c88:	00401e45 	.word	0x00401e45
  403c8c:	00401e9d 	.word	0x00401e9d
  403c90:	bf00      	nop
  403c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403c94:	3301      	adds	r3, #1
  403c96:	627b      	str	r3, [r7, #36]	; 0x24
  403c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403c9a:	2b13      	cmp	r3, #19
  403c9c:	d9f8      	bls.n	403c90 <udd_ep_interrupt+0x2d8>
				udd_ack_in_sent(ep);
  403c9e:	4b73      	ldr	r3, [pc, #460]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403ca0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403ca4:	320c      	adds	r2, #12
  403ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403caa:	623b      	str	r3, [r7, #32]
  403cac:	6a3b      	ldr	r3, [r7, #32]
  403cae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403cb2:	623b      	str	r3, [r7, #32]
  403cb4:	6a3b      	ldr	r3, [r7, #32]
  403cb6:	f023 0301 	bic.w	r3, r3, #1
  403cba:	623b      	str	r3, [r7, #32]
  403cbc:	4b6b      	ldr	r3, [pc, #428]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403cbe:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403cc2:	6a39      	ldr	r1, [r7, #32]
  403cc4:	320c      	adds	r2, #12
  403cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403cca:	2300      	movs	r3, #0
  403ccc:	61fb      	str	r3, [r7, #28]
  403cce:	e003      	b.n	403cd8 <udd_ep_interrupt+0x320>
  403cd0:	bf00      	nop
  403cd2:	69fb      	ldr	r3, [r7, #28]
  403cd4:	3301      	adds	r3, #1
  403cd6:	61fb      	str	r3, [r7, #28]
  403cd8:	69fb      	ldr	r3, [r7, #28]
  403cda:	2b13      	cmp	r3, #19
  403cdc:	d9f8      	bls.n	403cd0 <udd_ep_interrupt+0x318>
				udd_ep_in_sent(ep, false);
  403cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403ce2:	4618      	mov	r0, r3
  403ce4:	2100      	movs	r1, #0
  403ce6:	4b62      	ldr	r3, [pc, #392]	; (403e70 <udd_ep_interrupt+0x4b8>)
  403ce8:	4798      	blx	r3
  403cea:	e070      	b.n	403dce <udd_ep_interrupt+0x416>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  403cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403cf0:	2b00      	cmp	r3, #0
  403cf2:	d046      	beq.n	403d82 <udd_ep_interrupt+0x3ca>
  403cf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403cf8:	2b03      	cmp	r3, #3
  403cfa:	d042      	beq.n	403d82 <udd_ep_interrupt+0x3ca>
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  403cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403d00:	4618      	mov	r0, r3
  403d02:	2101      	movs	r1, #1
  403d04:	4b5a      	ldr	r3, [pc, #360]	; (403e70 <udd_ep_interrupt+0x4b8>)
  403d06:	4798      	blx	r3
  403d08:	4603      	mov	r3, r0
  403d0a:	f083 0301 	eor.w	r3, r3, #1
  403d0e:	b2db      	uxtb	r3, r3
  403d10:	2b00      	cmp	r3, #0
  403d12:	d00f      	beq.n	403d34 <udd_ep_interrupt+0x37c>
					ptr_job->b_buf_end = false;
  403d14:	6dba      	ldr	r2, [r7, #88]	; 0x58
  403d16:	7c53      	ldrb	r3, [r2, #17]
  403d18:	f36f 13c7 	bfc	r3, #7, #1
  403d1c:	7453      	strb	r3, [r2, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403d20:	68da      	ldr	r2, [r3, #12]
  403d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403d24:	609a      	str	r2, [r3, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403d26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403d2a:	6db8      	ldr	r0, [r7, #88]	; 0x58
  403d2c:	2100      	movs	r1, #0
  403d2e:	461a      	mov	r2, r3
  403d30:	4b50      	ldr	r3, [pc, #320]	; (403e74 <udd_ep_interrupt+0x4bc>)
  403d32:	4798      	blx	r3
				}
				udd_ack_in_sent(ep);
  403d34:	4b4d      	ldr	r3, [pc, #308]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403d36:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403d3a:	320c      	adds	r2, #12
  403d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403d40:	61bb      	str	r3, [r7, #24]
  403d42:	69bb      	ldr	r3, [r7, #24]
  403d44:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403d48:	61bb      	str	r3, [r7, #24]
  403d4a:	69bb      	ldr	r3, [r7, #24]
  403d4c:	f023 0301 	bic.w	r3, r3, #1
  403d50:	61bb      	str	r3, [r7, #24]
  403d52:	4b46      	ldr	r3, [pc, #280]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403d54:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403d58:	69b9      	ldr	r1, [r7, #24]
  403d5a:	320c      	adds	r2, #12
  403d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403d60:	2300      	movs	r3, #0
  403d62:	617b      	str	r3, [r7, #20]
  403d64:	e003      	b.n	403d6e <udd_ep_interrupt+0x3b6>
  403d66:	bf00      	nop
  403d68:	697b      	ldr	r3, [r7, #20]
  403d6a:	3301      	adds	r3, #1
  403d6c:	617b      	str	r3, [r7, #20]
  403d6e:	697b      	ldr	r3, [r7, #20]
  403d70:	2b13      	cmp	r3, #19
  403d72:	d9f8      	bls.n	403d66 <udd_ep_interrupt+0x3ae>
				udd_ep_in_sent(ep, false);
  403d74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403d78:	4618      	mov	r0, r3
  403d7a:	2100      	movs	r1, #0
  403d7c:	4b3c      	ldr	r3, [pc, #240]	; (403e70 <udd_ep_interrupt+0x4b8>)
  403d7e:	4798      	blx	r3
  403d80:	e025      	b.n	403dce <udd_ep_interrupt+0x416>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  403d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403d86:	4618      	mov	r0, r3
  403d88:	2101      	movs	r1, #1
  403d8a:	4b39      	ldr	r3, [pc, #228]	; (403e70 <udd_ep_interrupt+0x4b8>)
  403d8c:	4798      	blx	r3
				udd_ack_in_sent(ep);
  403d8e:	4b37      	ldr	r3, [pc, #220]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403d90:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403d94:	320c      	adds	r2, #12
  403d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403d9a:	613b      	str	r3, [r7, #16]
  403d9c:	693b      	ldr	r3, [r7, #16]
  403d9e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403da2:	613b      	str	r3, [r7, #16]
  403da4:	693b      	ldr	r3, [r7, #16]
  403da6:	f023 0301 	bic.w	r3, r3, #1
  403daa:	613b      	str	r3, [r7, #16]
  403dac:	4b2f      	ldr	r3, [pc, #188]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403dae:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403db2:	6939      	ldr	r1, [r7, #16]
  403db4:	320c      	adds	r2, #12
  403db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403dba:	2300      	movs	r3, #0
  403dbc:	60fb      	str	r3, [r7, #12]
  403dbe:	e003      	b.n	403dc8 <udd_ep_interrupt+0x410>
  403dc0:	bf00      	nop
  403dc2:	68fb      	ldr	r3, [r7, #12]
  403dc4:	3301      	adds	r3, #1
  403dc6:	60fb      	str	r3, [r7, #12]
  403dc8:	68fb      	ldr	r3, [r7, #12]
  403dca:	2b13      	cmp	r3, #19
  403dcc:	d9f8      	bls.n	403dc0 <udd_ep_interrupt+0x408>
			}
			return true;
  403dce:	2301      	movs	r3, #1
  403dd0:	e047      	b.n	403e62 <udd_ep_interrupt+0x4aa>
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  403dd2:	4b26      	ldr	r3, [pc, #152]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403dd4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403dd8:	320c      	adds	r2, #12
  403dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403dde:	f003 0308 	and.w	r3, r3, #8
  403de2:	2b00      	cmp	r3, #0
  403de4:	d032      	beq.n	403e4c <udd_ep_interrupt+0x494>
			udd_ack_stall(ep);
  403de6:	4b21      	ldr	r3, [pc, #132]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403de8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403dec:	320c      	adds	r2, #12
  403dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403df2:	60bb      	str	r3, [r7, #8]
  403df4:	68bb      	ldr	r3, [r7, #8]
  403df6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403dfa:	60bb      	str	r3, [r7, #8]
  403dfc:	68bb      	ldr	r3, [r7, #8]
  403dfe:	f023 0308 	bic.w	r3, r3, #8
  403e02:	60bb      	str	r3, [r7, #8]
  403e04:	4b19      	ldr	r3, [pc, #100]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403e06:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403e0a:	68b9      	ldr	r1, [r7, #8]
  403e0c:	320c      	adds	r2, #12
  403e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403e12:	2300      	movs	r3, #0
  403e14:	607b      	str	r3, [r7, #4]
  403e16:	e003      	b.n	403e20 <udd_ep_interrupt+0x468>
  403e18:	bf00      	nop
  403e1a:	687b      	ldr	r3, [r7, #4]
  403e1c:	3301      	adds	r3, #1
  403e1e:	607b      	str	r3, [r7, #4]
  403e20:	687b      	ldr	r3, [r7, #4]
  403e22:	2b13      	cmp	r3, #19
  403e24:	d9f8      	bls.n	403e18 <udd_ep_interrupt+0x460>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  403e26:	4b11      	ldr	r3, [pc, #68]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403e28:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403e2c:	320c      	adds	r2, #12
  403e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403e32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  403e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  403e3a:	d005      	beq.n	403e48 <udd_ep_interrupt+0x490>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  403e3c:	4b0b      	ldr	r3, [pc, #44]	; (403e6c <udd_ep_interrupt+0x4b4>)
  403e3e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403e42:	320c      	adds	r2, #12
  403e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			}
			return true;
  403e48:	2301      	movs	r3, #1
  403e4a:	e00a      	b.n	403e62 <udd_ep_interrupt+0x4aa>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  403e4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403e50:	3301      	adds	r3, #1
  403e52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  403e56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403e5a:	2b03      	cmp	r3, #3
  403e5c:	f67f adb3 	bls.w	4039c6 <udd_ep_interrupt+0xe>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
			}
			return true;
		}
	}
	return false;
  403e60:	2300      	movs	r3, #0
}
  403e62:	4618      	mov	r0, r3
  403e64:	3760      	adds	r7, #96	; 0x60
  403e66:	46bd      	mov	sp, r7
  403e68:	bd80      	pop	{r7, pc}
  403e6a:	bf00      	nop
  403e6c:	40034000 	.word	0x40034000
  403e70:	004037a5 	.word	0x004037a5
  403e74:	004034ad 	.word	0x004034ad

00403e78 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  403e78:	b480      	push	{r7}
  403e7a:	b083      	sub	sp, #12
  403e7c:	af00      	add	r7, sp, #0
  403e7e:	4603      	mov	r3, r0
  403e80:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403e82:	4b08      	ldr	r3, [pc, #32]	; (403ea4 <NVIC_EnableIRQ+0x2c>)
  403e84:	f997 2007 	ldrsb.w	r2, [r7, #7]
  403e88:	0952      	lsrs	r2, r2, #5
  403e8a:	79f9      	ldrb	r1, [r7, #7]
  403e8c:	f001 011f 	and.w	r1, r1, #31
  403e90:	2001      	movs	r0, #1
  403e92:	fa00 f101 	lsl.w	r1, r0, r1
  403e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  403e9a:	370c      	adds	r7, #12
  403e9c:	46bd      	mov	sp, r7
  403e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ea2:	4770      	bx	lr
  403ea4:	e000e100 	.word	0xe000e100

00403ea8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  403ea8:	b480      	push	{r7}
  403eaa:	b083      	sub	sp, #12
  403eac:	af00      	add	r7, sp, #0
  403eae:	4603      	mov	r3, r0
  403eb0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403eb2:	4b09      	ldr	r3, [pc, #36]	; (403ed8 <NVIC_DisableIRQ+0x30>)
  403eb4:	f997 2007 	ldrsb.w	r2, [r7, #7]
  403eb8:	0952      	lsrs	r2, r2, #5
  403eba:	79f9      	ldrb	r1, [r7, #7]
  403ebc:	f001 011f 	and.w	r1, r1, #31
  403ec0:	2001      	movs	r0, #1
  403ec2:	fa00 f101 	lsl.w	r1, r0, r1
  403ec6:	3220      	adds	r2, #32
  403ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  403ecc:	370c      	adds	r7, #12
  403ece:	46bd      	mov	sp, r7
  403ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ed4:	4770      	bx	lr
  403ed6:	bf00      	nop
  403ed8:	e000e100 	.word	0xe000e100

00403edc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  403edc:	b480      	push	{r7}
  403ede:	b083      	sub	sp, #12
  403ee0:	af00      	add	r7, sp, #0
  403ee2:	4603      	mov	r3, r0
  403ee4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403ee6:	4b09      	ldr	r3, [pc, #36]	; (403f0c <NVIC_ClearPendingIRQ+0x30>)
  403ee8:	f997 2007 	ldrsb.w	r2, [r7, #7]
  403eec:	0952      	lsrs	r2, r2, #5
  403eee:	79f9      	ldrb	r1, [r7, #7]
  403ef0:	f001 011f 	and.w	r1, r1, #31
  403ef4:	2001      	movs	r0, #1
  403ef6:	fa00 f101 	lsl.w	r1, r0, r1
  403efa:	3260      	adds	r2, #96	; 0x60
  403efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  403f00:	370c      	adds	r7, #12
  403f02:	46bd      	mov	sp, r7
  403f04:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f08:	4770      	bx	lr
  403f0a:	bf00      	nop
  403f0c:	e000e100 	.word	0xe000e100

00403f10 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  403f10:	b480      	push	{r7}
  403f12:	b083      	sub	sp, #12
  403f14:	af00      	add	r7, sp, #0
  403f16:	4603      	mov	r3, r0
  403f18:	6039      	str	r1, [r7, #0]
  403f1a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  403f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f20:	2b00      	cmp	r3, #0
  403f22:	da0b      	bge.n	403f3c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403f24:	490d      	ldr	r1, [pc, #52]	; (403f5c <NVIC_SetPriority+0x4c>)
  403f26:	79fb      	ldrb	r3, [r7, #7]
  403f28:	f003 030f 	and.w	r3, r3, #15
  403f2c:	3b04      	subs	r3, #4
  403f2e:	683a      	ldr	r2, [r7, #0]
  403f30:	b2d2      	uxtb	r2, r2
  403f32:	0112      	lsls	r2, r2, #4
  403f34:	b2d2      	uxtb	r2, r2
  403f36:	440b      	add	r3, r1
  403f38:	761a      	strb	r2, [r3, #24]
  403f3a:	e009      	b.n	403f50 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  403f3c:	4908      	ldr	r1, [pc, #32]	; (403f60 <NVIC_SetPriority+0x50>)
  403f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f42:	683a      	ldr	r2, [r7, #0]
  403f44:	b2d2      	uxtb	r2, r2
  403f46:	0112      	lsls	r2, r2, #4
  403f48:	b2d2      	uxtb	r2, r2
  403f4a:	440b      	add	r3, r1
  403f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  403f50:	370c      	adds	r7, #12
  403f52:	46bd      	mov	sp, r7
  403f54:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f58:	4770      	bx	lr
  403f5a:	bf00      	nop
  403f5c:	e000ed00 	.word	0xe000ed00
  403f60:	e000e100 	.word	0xe000e100

00403f64 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  403f64:	b480      	push	{r7}
  403f66:	b083      	sub	sp, #12
  403f68:	af00      	add	r7, sp, #0
  403f6a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403f6c:	687b      	ldr	r3, [r7, #4]
  403f6e:	2b07      	cmp	r3, #7
  403f70:	d825      	bhi.n	403fbe <osc_get_rate+0x5a>
  403f72:	a201      	add	r2, pc, #4	; (adr r2, 403f78 <osc_get_rate+0x14>)
  403f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403f78:	00403f99 	.word	0x00403f99
  403f7c:	00403f9f 	.word	0x00403f9f
  403f80:	00403fa5 	.word	0x00403fa5
  403f84:	00403fab 	.word	0x00403fab
  403f88:	00403faf 	.word	0x00403faf
  403f8c:	00403fb3 	.word	0x00403fb3
  403f90:	00403fb7 	.word	0x00403fb7
  403f94:	00403fbb 	.word	0x00403fbb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  403f98:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403f9c:	e010      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  403f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403fa2:	e00d      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  403fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403fa8:	e00a      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  403faa:	4b08      	ldr	r3, [pc, #32]	; (403fcc <osc_get_rate+0x68>)
  403fac:	e008      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  403fae:	4b08      	ldr	r3, [pc, #32]	; (403fd0 <osc_get_rate+0x6c>)
  403fb0:	e006      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  403fb2:	4b08      	ldr	r3, [pc, #32]	; (403fd4 <osc_get_rate+0x70>)
  403fb4:	e004      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  403fb6:	4b08      	ldr	r3, [pc, #32]	; (403fd8 <osc_get_rate+0x74>)
  403fb8:	e002      	b.n	403fc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  403fba:	4b07      	ldr	r3, [pc, #28]	; (403fd8 <osc_get_rate+0x74>)
  403fbc:	e000      	b.n	403fc0 <osc_get_rate+0x5c>
	}

	return 0;
  403fbe:	2300      	movs	r3, #0
}
  403fc0:	4618      	mov	r0, r3
  403fc2:	370c      	adds	r7, #12
  403fc4:	46bd      	mov	sp, r7
  403fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fca:	4770      	bx	lr
  403fcc:	003d0900 	.word	0x003d0900
  403fd0:	007a1200 	.word	0x007a1200
  403fd4:	00b71b00 	.word	0x00b71b00
  403fd8:	00f42400 	.word	0x00f42400

00403fdc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  403fdc:	b580      	push	{r7, lr}
  403fde:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  403fe0:	2006      	movs	r0, #6
  403fe2:	4b04      	ldr	r3, [pc, #16]	; (403ff4 <sysclk_get_main_hz+0x18>)
  403fe4:	4798      	blx	r3
  403fe6:	4602      	mov	r2, r0
  403fe8:	4613      	mov	r3, r2
  403fea:	011b      	lsls	r3, r3, #4
  403fec:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  403fee:	4618      	mov	r0, r3
  403ff0:	bd80      	pop	{r7, pc}
  403ff2:	bf00      	nop
  403ff4:	00403f65 	.word	0x00403f65

00403ff8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  403ff8:	b580      	push	{r7, lr}
  403ffa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  403ffc:	4b02      	ldr	r3, [pc, #8]	; (404008 <sysclk_get_peripheral_hz+0x10>)
  403ffe:	4798      	blx	r3
  404000:	4603      	mov	r3, r0
  404002:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  404004:	4618      	mov	r0, r3
  404006:	bd80      	pop	{r7, pc}
  404008:	00403fdd 	.word	0x00403fdd

0040400c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40400c:	b580      	push	{r7, lr}
  40400e:	b082      	sub	sp, #8
  404010:	af00      	add	r7, sp, #0
  404012:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  404014:	6878      	ldr	r0, [r7, #4]
  404016:	4b02      	ldr	r3, [pc, #8]	; (404020 <sysclk_enable_peripheral_clock+0x14>)
  404018:	4798      	blx	r3
}
  40401a:	3708      	adds	r7, #8
  40401c:	46bd      	mov	sp, r7
  40401e:	bd80      	pop	{r7, pc}
  404020:	0040b809 	.word	0x0040b809

00404024 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  404024:	b580      	push	{r7, lr}
  404026:	b08c      	sub	sp, #48	; 0x30
  404028:	af00      	add	r7, sp, #0
  40402a:	6078      	str	r0, [r7, #4]
  40402c:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();	// 120000000
  40402e:	4b26      	ldr	r3, [pc, #152]	; (4040c8 <usart_serial_init+0xa4>)
  404030:	4798      	blx	r3
  404032:	4603      	mov	r3, r0
  404034:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  404036:	683b      	ldr	r3, [r7, #0]
  404038:	681b      	ldr	r3, [r3, #0]
  40403a:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  40403c:	683b      	ldr	r3, [r7, #0]
  40403e:	689b      	ldr	r3, [r3, #8]
  404040:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  404042:	683b      	ldr	r3, [r7, #0]
  404044:	681b      	ldr	r3, [r3, #0]
  404046:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  404048:	683b      	ldr	r3, [r7, #0]
  40404a:	685b      	ldr	r3, [r3, #4]
  40404c:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40404e:	683b      	ldr	r3, [r7, #0]
  404050:	689b      	ldr	r3, [r3, #8]
  404052:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  404054:	683b      	ldr	r3, [r7, #0]
  404056:	7b1b      	ldrb	r3, [r3, #12]
  404058:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40405a:	2300      	movs	r3, #0
  40405c:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40405e:	687a      	ldr	r2, [r7, #4]
  404060:	4b1a      	ldr	r3, [pc, #104]	; (4040cc <usart_serial_init+0xa8>)
  404062:	429a      	cmp	r2, r3
  404064:	d108      	bne.n	404078 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  404066:	2008      	movs	r0, #8
  404068:	4b19      	ldr	r3, [pc, #100]	; (4040d0 <usart_serial_init+0xac>)
  40406a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40406c:	f107 0324 	add.w	r3, r7, #36	; 0x24
  404070:	6878      	ldr	r0, [r7, #4]
  404072:	4619      	mov	r1, r3
  404074:	4b17      	ldr	r3, [pc, #92]	; (4040d4 <usart_serial_init+0xb0>)
  404076:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404078:	687a      	ldr	r2, [r7, #4]
  40407a:	4b17      	ldr	r3, [pc, #92]	; (4040d8 <usart_serial_init+0xb4>)
  40407c:	429a      	cmp	r2, r3
  40407e:	d108      	bne.n	404092 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  404080:	2009      	movs	r0, #9
  404082:	4b13      	ldr	r3, [pc, #76]	; (4040d0 <usart_serial_init+0xac>)
  404084:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  404086:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40408a:	6878      	ldr	r0, [r7, #4]
  40408c:	4619      	mov	r1, r3
  40408e:	4b11      	ldr	r3, [pc, #68]	; (4040d4 <usart_serial_init+0xb0>)
  404090:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404092:	687a      	ldr	r2, [r7, #4]
  404094:	4b11      	ldr	r3, [pc, #68]	; (4040dc <usart_serial_init+0xb8>)
  404096:	429a      	cmp	r2, r3
  404098:	d112      	bne.n	4040c0 <usart_serial_init+0x9c>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40409a:	200e      	movs	r0, #14
  40409c:	4b0c      	ldr	r3, [pc, #48]	; (4040d0 <usart_serial_init+0xac>)
  40409e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4040a0:	4b09      	ldr	r3, [pc, #36]	; (4040c8 <usart_serial_init+0xa4>)
  4040a2:	4798      	blx	r3
  4040a4:	4603      	mov	r3, r0
  4040a6:	f107 020c 	add.w	r2, r7, #12
  4040aa:	6878      	ldr	r0, [r7, #4]
  4040ac:	4611      	mov	r1, r2
  4040ae:	461a      	mov	r2, r3
  4040b0:	4b0b      	ldr	r3, [pc, #44]	; (4040e0 <usart_serial_init+0xbc>)
  4040b2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4040b4:	6878      	ldr	r0, [r7, #4]
  4040b6:	4b0b      	ldr	r3, [pc, #44]	; (4040e4 <usart_serial_init+0xc0>)
  4040b8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4040ba:	6878      	ldr	r0, [r7, #4]
  4040bc:	4b0a      	ldr	r3, [pc, #40]	; (4040e8 <usart_serial_init+0xc4>)
  4040be:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4040c0:	3730      	adds	r7, #48	; 0x30
  4040c2:	46bd      	mov	sp, r7
  4040c4:	bd80      	pop	{r7, pc}
  4040c6:	bf00      	nop
  4040c8:	00403ff9 	.word	0x00403ff9
  4040cc:	400e0600 	.word	0x400e0600
  4040d0:	0040400d 	.word	0x0040400d
  4040d4:	0040a8ad 	.word	0x0040a8ad
  4040d8:	400e0800 	.word	0x400e0800
  4040dc:	40024000 	.word	0x40024000
  4040e0:	004068e9 	.word	0x004068e9
  4040e4:	0040696d 	.word	0x0040696d
  4040e8:	0040699d 	.word	0x0040699d

004040ec <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4040ec:	b580      	push	{r7, lr}
  4040ee:	b082      	sub	sp, #8
  4040f0:	af00      	add	r7, sp, #0
  4040f2:	6078      	str	r0, [r7, #4]
  4040f4:	460b      	mov	r3, r1
  4040f6:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4040f8:	687a      	ldr	r2, [r7, #4]
  4040fa:	4b18      	ldr	r3, [pc, #96]	; (40415c <usart_serial_putchar+0x70>)
  4040fc:	429a      	cmp	r2, r3
  4040fe:	d10a      	bne.n	404116 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  404100:	bf00      	nop
  404102:	78fb      	ldrb	r3, [r7, #3]
  404104:	6878      	ldr	r0, [r7, #4]
  404106:	4619      	mov	r1, r3
  404108:	4b15      	ldr	r3, [pc, #84]	; (404160 <usart_serial_putchar+0x74>)
  40410a:	4798      	blx	r3
  40410c:	4603      	mov	r3, r0
  40410e:	2b00      	cmp	r3, #0
  404110:	d1f7      	bne.n	404102 <usart_serial_putchar+0x16>
		return 1;
  404112:	2301      	movs	r3, #1
  404114:	e01e      	b.n	404154 <usart_serial_putchar+0x68>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404116:	687a      	ldr	r2, [r7, #4]
  404118:	4b12      	ldr	r3, [pc, #72]	; (404164 <usart_serial_putchar+0x78>)
  40411a:	429a      	cmp	r2, r3
  40411c:	d10a      	bne.n	404134 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40411e:	bf00      	nop
  404120:	78fb      	ldrb	r3, [r7, #3]
  404122:	6878      	ldr	r0, [r7, #4]
  404124:	4619      	mov	r1, r3
  404126:	4b0e      	ldr	r3, [pc, #56]	; (404160 <usart_serial_putchar+0x74>)
  404128:	4798      	blx	r3
  40412a:	4603      	mov	r3, r0
  40412c:	2b00      	cmp	r3, #0
  40412e:	d1f7      	bne.n	404120 <usart_serial_putchar+0x34>
		return 1;
  404130:	2301      	movs	r3, #1
  404132:	e00f      	b.n	404154 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404134:	687a      	ldr	r2, [r7, #4]
  404136:	4b0c      	ldr	r3, [pc, #48]	; (404168 <usart_serial_putchar+0x7c>)
  404138:	429a      	cmp	r2, r3
  40413a:	d10a      	bne.n	404152 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  40413c:	bf00      	nop
  40413e:	78fb      	ldrb	r3, [r7, #3]
  404140:	6878      	ldr	r0, [r7, #4]
  404142:	4619      	mov	r1, r3
  404144:	4b09      	ldr	r3, [pc, #36]	; (40416c <usart_serial_putchar+0x80>)
  404146:	4798      	blx	r3
  404148:	4603      	mov	r3, r0
  40414a:	2b00      	cmp	r3, #0
  40414c:	d1f7      	bne.n	40413e <usart_serial_putchar+0x52>
		return 1;
  40414e:	2301      	movs	r3, #1
  404150:	e000      	b.n	404154 <usart_serial_putchar+0x68>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  404152:	2300      	movs	r3, #0
}
  404154:	4618      	mov	r0, r3
  404156:	3708      	adds	r7, #8
  404158:	46bd      	mov	sp, r7
  40415a:	bd80      	pop	{r7, pc}
  40415c:	400e0600 	.word	0x400e0600
  404160:	0040a95d 	.word	0x0040a95d
  404164:	400e0800 	.word	0x400e0800
  404168:	40024000 	.word	0x40024000
  40416c:	00406a59 	.word	0x00406a59

00404170 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  404170:	b580      	push	{r7, lr}
  404172:	b084      	sub	sp, #16
  404174:	af00      	add	r7, sp, #0
  404176:	6078      	str	r0, [r7, #4]
  404178:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40417a:	2300      	movs	r3, #0
  40417c:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40417e:	687a      	ldr	r2, [r7, #4]
  404180:	4b15      	ldr	r3, [pc, #84]	; (4041d8 <usart_serial_getchar+0x68>)
  404182:	429a      	cmp	r2, r3
  404184:	d107      	bne.n	404196 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  404186:	bf00      	nop
  404188:	6878      	ldr	r0, [r7, #4]
  40418a:	6839      	ldr	r1, [r7, #0]
  40418c:	4b13      	ldr	r3, [pc, #76]	; (4041dc <usart_serial_getchar+0x6c>)
  40418e:	4798      	blx	r3
  404190:	4603      	mov	r3, r0
  404192:	2b00      	cmp	r3, #0
  404194:	d1f8      	bne.n	404188 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404196:	687a      	ldr	r2, [r7, #4]
  404198:	4b11      	ldr	r3, [pc, #68]	; (4041e0 <usart_serial_getchar+0x70>)
  40419a:	429a      	cmp	r2, r3
  40419c:	d107      	bne.n	4041ae <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40419e:	bf00      	nop
  4041a0:	6878      	ldr	r0, [r7, #4]
  4041a2:	6839      	ldr	r1, [r7, #0]
  4041a4:	4b0d      	ldr	r3, [pc, #52]	; (4041dc <usart_serial_getchar+0x6c>)
  4041a6:	4798      	blx	r3
  4041a8:	4603      	mov	r3, r0
  4041aa:	2b00      	cmp	r3, #0
  4041ac:	d1f8      	bne.n	4041a0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4041ae:	687a      	ldr	r2, [r7, #4]
  4041b0:	4b0c      	ldr	r3, [pc, #48]	; (4041e4 <usart_serial_getchar+0x74>)
  4041b2:	429a      	cmp	r2, r3
  4041b4:	d10d      	bne.n	4041d2 <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  4041b6:	bf00      	nop
  4041b8:	f107 030c 	add.w	r3, r7, #12
  4041bc:	6878      	ldr	r0, [r7, #4]
  4041be:	4619      	mov	r1, r3
  4041c0:	4b09      	ldr	r3, [pc, #36]	; (4041e8 <usart_serial_getchar+0x78>)
  4041c2:	4798      	blx	r3
  4041c4:	4603      	mov	r3, r0
  4041c6:	2b00      	cmp	r3, #0
  4041c8:	d1f6      	bne.n	4041b8 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  4041ca:	68fb      	ldr	r3, [r7, #12]
  4041cc:	b2da      	uxtb	r2, r3
  4041ce:	683b      	ldr	r3, [r7, #0]
  4041d0:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4041d2:	3710      	adds	r7, #16
  4041d4:	46bd      	mov	sp, r7
  4041d6:	bd80      	pop	{r7, pc}
  4041d8:	400e0600 	.word	0x400e0600
  4041dc:	0040a98d 	.word	0x0040a98d
  4041e0:	400e0800 	.word	0x400e0800
  4041e4:	40024000 	.word	0x40024000
  4041e8:	00406a8d 	.word	0x00406a8d

004041ec <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  4041ec:	b580      	push	{r7, lr}
  4041ee:	b082      	sub	sp, #8
  4041f0:	af00      	add	r7, sp, #0
  4041f2:	6078      	str	r0, [r7, #4]
  4041f4:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  4041f6:	4b0f      	ldr	r3, [pc, #60]	; (404234 <stdio_serial_init+0x48>)
  4041f8:	687a      	ldr	r2, [r7, #4]
  4041fa:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4041fc:	4b0e      	ldr	r3, [pc, #56]	; (404238 <stdio_serial_init+0x4c>)
  4041fe:	4a0f      	ldr	r2, [pc, #60]	; (40423c <stdio_serial_init+0x50>)
  404200:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404202:	4b0f      	ldr	r3, [pc, #60]	; (404240 <stdio_serial_init+0x54>)
  404204:	4a0f      	ldr	r2, [pc, #60]	; (404244 <stdio_serial_init+0x58>)
  404206:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  404208:	6878      	ldr	r0, [r7, #4]
  40420a:	6839      	ldr	r1, [r7, #0]
  40420c:	4b0e      	ldr	r3, [pc, #56]	; (404248 <stdio_serial_init+0x5c>)
  40420e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404210:	4b0e      	ldr	r3, [pc, #56]	; (40424c <stdio_serial_init+0x60>)
  404212:	681b      	ldr	r3, [r3, #0]
  404214:	689b      	ldr	r3, [r3, #8]
  404216:	4618      	mov	r0, r3
  404218:	2100      	movs	r1, #0
  40421a:	4b0d      	ldr	r3, [pc, #52]	; (404250 <stdio_serial_init+0x64>)
  40421c:	4798      	blx	r3
	setbuf(stdin, NULL);
  40421e:	4b0b      	ldr	r3, [pc, #44]	; (40424c <stdio_serial_init+0x60>)
  404220:	681b      	ldr	r3, [r3, #0]
  404222:	685b      	ldr	r3, [r3, #4]
  404224:	4618      	mov	r0, r3
  404226:	2100      	movs	r1, #0
  404228:	4b09      	ldr	r3, [pc, #36]	; (404250 <stdio_serial_init+0x64>)
  40422a:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  40422c:	3708      	adds	r7, #8
  40422e:	46bd      	mov	sp, r7
  404230:	bd80      	pop	{r7, pc}
  404232:	bf00      	nop
  404234:	200099c8 	.word	0x200099c8
  404238:	200099c4 	.word	0x200099c4
  40423c:	004040ed 	.word	0x004040ed
  404240:	20008970 	.word	0x20008970
  404244:	00404171 	.word	0x00404171
  404248:	00404025 	.word	0x00404025
  40424c:	20000798 	.word	0x20000798
  404250:	0040cc95 	.word	0x0040cc95

00404254 <configure_console>:

/**
 * \brief Configure the console UART for using printf.
 */
static void configure_console(void)
{
  404254:	b590      	push	{r4, r7, lr}
  404256:	b085      	sub	sp, #20
  404258:	af00      	add	r7, sp, #0
	const usart_serial_options_t usart_serial_options = 
  40425a:	4b0a      	ldr	r3, [pc, #40]	; (404284 <configure_console+0x30>)
  40425c:	463c      	mov	r4, r7
  40425e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_TEST_PARITY,
		.stopbits   = CONF_TEST_STOPBITS,
	};

	/* Configure console UART. */
	stdio_serial_init(UART0, &usart_serial_options);
  404264:	463b      	mov	r3, r7
  404266:	4808      	ldr	r0, [pc, #32]	; (404288 <configure_console+0x34>)
  404268:	4619      	mov	r1, r3
  40426a:	4b08      	ldr	r3, [pc, #32]	; (40428c <configure_console+0x38>)
  40426c:	4798      	blx	r3
	/* Specify that stdout should not be buffered. */
	#if defined(__GNUC__)
		setbuf(stdout, NULL);
  40426e:	4b08      	ldr	r3, [pc, #32]	; (404290 <configure_console+0x3c>)
  404270:	681b      	ldr	r3, [r3, #0]
  404272:	689b      	ldr	r3, [r3, #8]
  404274:	4618      	mov	r0, r3
  404276:	2100      	movs	r1, #0
  404278:	4b06      	ldr	r3, [pc, #24]	; (404294 <configure_console+0x40>)
  40427a:	4798      	blx	r3
	#else
	/* Already the case in IAR's Normal DLIB default configuration: printf()
	 * emits one character at a time.
	 */
	#endif
}
  40427c:	3714      	adds	r7, #20
  40427e:	46bd      	mov	sp, r7
  404280:	bd90      	pop	{r4, r7, pc}
  404282:	bf00      	nop
  404284:	00415c6c 	.word	0x00415c6c
  404288:	400e0600 	.word	0x400e0600
  40428c:	004041ed 	.word	0x004041ed
  404290:	20000798 	.word	0x20000798
  404294:	0040cc95 	.word	0x0040cc95

00404298 <brd_board_init>:

void brd_board_init()
{
  404298:	b580      	push	{r7, lr}
  40429a:	af00      	add	r7, sp, #0
	//configure the interrupt handlers first. 
	brd_enableWatchdog();
  40429c:	4b18      	ldr	r3, [pc, #96]	; (404300 <brd_board_init+0x68>)
  40429e:	4798      	blx	r3
	//configure the gpio
	drv_gpio_initializeAll();
  4042a0:	4b18      	ldr	r3, [pc, #96]	; (404304 <brd_board_init+0x6c>)
  4042a2:	4798      	blx	r3
	//configure LED driver
	drv_led_init(&ledConfiguration);
  4042a4:	4818      	ldr	r0, [pc, #96]	; (404308 <brd_board_init+0x70>)
  4042a6:	4b19      	ldr	r3, [pc, #100]	; (40430c <brd_board_init+0x74>)
  4042a8:	4798      	blx	r3
	//Set LED white to indicate power on
	drv_led_set(DRV_LED_WHITE,DRV_LED_SOLID);
  4042aa:	2004      	movs	r0, #4
  4042ac:	2101      	movs	r1, #1
  4042ae:	4b18      	ldr	r3, [pc, #96]	; (404310 <brd_board_init+0x78>)
  4042b0:	4798      	blx	r3
	vTaskDelay(200);
  4042b2:	20c8      	movs	r0, #200	; 0xc8
  4042b4:	4b17      	ldr	r3, [pc, #92]	; (404314 <brd_board_init+0x7c>)
  4042b6:	4798      	blx	r3
	pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4042b8:	2000      	movs	r0, #0
  4042ba:	4b17      	ldr	r3, [pc, #92]	; (404318 <brd_board_init+0x80>)
  4042bc:	4798      	blx	r3
	while (!pmc_osc_is_ready_32kxtal());
  4042be:	bf00      	nop
  4042c0:	4b16      	ldr	r3, [pc, #88]	; (40431c <brd_board_init+0x84>)
  4042c2:	4798      	blx	r3
  4042c4:	4603      	mov	r3, r0
  4042c6:	2b00      	cmp	r3, #0
  4042c8:	d0fa      	beq.n	4042c0 <brd_board_init+0x28>
	rtc_set_hour_mode(RTC, 0);
  4042ca:	4815      	ldr	r0, [pc, #84]	; (404320 <brd_board_init+0x88>)
  4042cc:	2100      	movs	r1, #0
  4042ce:	4b15      	ldr	r3, [pc, #84]	; (404324 <brd_board_init+0x8c>)
  4042d0:	4798      	blx	r3
	rtc_clear_date_alarm(RTC);
  4042d2:	4813      	ldr	r0, [pc, #76]	; (404320 <brd_board_init+0x88>)
  4042d4:	4b14      	ldr	r3, [pc, #80]	; (404328 <brd_board_init+0x90>)
  4042d6:	4798      	blx	r3
	rtc_clear_time_alarm(RTC);
  4042d8:	4811      	ldr	r0, [pc, #68]	; (404320 <brd_board_init+0x88>)
  4042da:	4b14      	ldr	r3, [pc, #80]	; (40432c <brd_board_init+0x94>)
  4042dc:	4798      	blx	r3
	drv_led_set(DRV_LED_OFF,DRV_LED_SOLID);	
  4042de:	2007      	movs	r0, #7
  4042e0:	2101      	movs	r1, #1
  4042e2:	4b0b      	ldr	r3, [pc, #44]	; (404310 <brd_board_init+0x78>)
  4042e4:	4798      	blx	r3
	brd_initAllUarts();
  4042e6:	4b12      	ldr	r3, [pc, #72]	; (404330 <brd_board_init+0x98>)
  4042e8:	4798      	blx	r3
	configure_console();
  4042ea:	4b12      	ldr	r3, [pc, #72]	; (404334 <brd_board_init+0x9c>)
  4042ec:	4798      	blx	r3
	//try to configure the USB
	udc_start(); 
  4042ee:	4b12      	ldr	r3, [pc, #72]	; (404338 <brd_board_init+0xa0>)
  4042f0:	4798      	blx	r3
	drv_i2c_init(&twiConfig[0]);
  4042f2:	4812      	ldr	r0, [pc, #72]	; (40433c <brd_board_init+0xa4>)
  4042f4:	4b12      	ldr	r3, [pc, #72]	; (404340 <brd_board_init+0xa8>)
  4042f6:	4798      	blx	r3
	ltc2941Init(&ltc2941Config);
  4042f8:	4812      	ldr	r0, [pc, #72]	; (404344 <brd_board_init+0xac>)
  4042fa:	4b13      	ldr	r3, [pc, #76]	; (404348 <brd_board_init+0xb0>)
  4042fc:	4798      	blx	r3
}
  4042fe:	bd80      	pop	{r7, pc}
  404300:	004043c1 	.word	0x004043c1
  404304:	00405351 	.word	0x00405351
  404308:	20000198 	.word	0x20000198
  40430c:	0040737d 	.word	0x0040737d
  404310:	004073e5 	.word	0x004073e5
  404314:	00409239 	.word	0x00409239
  404318:	0040b631 	.word	0x0040b631
  40431c:	0040b669 	.word	0x0040b669
  404320:	400e1460 	.word	0x400e1460
  404324:	0040a455 	.word	0x0040a455
  404328:	0040a891 	.word	0x0040a891
  40432c:	0040a879 	.word	0x0040a879
  404330:	0040434d 	.word	0x0040434d
  404334:	00404255 	.word	0x00404255
  404338:	0040138d 	.word	0x0040138d
  40433c:	2000019c 	.word	0x2000019c
  404340:	00406bbd 	.word	0x00406bbd
  404344:	200001d4 	.word	0x200001d4
  404348:	00405aa9 	.word	0x00405aa9

0040434c <brd_initAllUarts>:


void brd_initAllUarts()
{
  40434c:	b580      	push	{r7, lr}
  40434e:	af00      	add	r7, sp, #0
	if(drv_uart_init(&uart0Config) != STATUS_PASS)
  404350:	4807      	ldr	r0, [pc, #28]	; (404370 <brd_initAllUarts+0x24>)
  404352:	4b08      	ldr	r3, [pc, #32]	; (404374 <brd_initAllUarts+0x28>)
  404354:	4798      	blx	r3
  404356:	4603      	mov	r3, r0
  404358:	2b00      	cmp	r3, #0
  40435a:	d000      	beq.n	40435e <brd_initAllUarts+0x12>
	{
		while(1); //spin here
  40435c:	e7fe      	b.n	40435c <brd_initAllUarts+0x10>
	}
	if(drv_uart_init(&uart1Config) != STATUS_PASS)
  40435e:	4806      	ldr	r0, [pc, #24]	; (404378 <brd_initAllUarts+0x2c>)
  404360:	4b04      	ldr	r3, [pc, #16]	; (404374 <brd_initAllUarts+0x28>)
  404362:	4798      	blx	r3
  404364:	4603      	mov	r3, r0
  404366:	2b00      	cmp	r3, #0
  404368:	d000      	beq.n	40436c <brd_initAllUarts+0x20>
	{
		while(1); //spin here
  40436a:	e7fe      	b.n	40436a <brd_initAllUarts+0x1e>
	}
}
  40436c:	bd80      	pop	{r7, pc}
  40436e:	bf00      	nop
  404370:	20000168 	.word	0x20000168
  404374:	00407835 	.word	0x00407835
  404378:	20000180 	.word	0x20000180

0040437c <brd_deInitAllUarts>:

void brd_deInitAllUarts()
{
  40437c:	b580      	push	{r7, lr}
  40437e:	af00      	add	r7, sp, #0
	drv_uart_deInit(&uart0Config);
  404380:	4803      	ldr	r0, [pc, #12]	; (404390 <brd_deInitAllUarts+0x14>)
  404382:	4b04      	ldr	r3, [pc, #16]	; (404394 <brd_deInitAllUarts+0x18>)
  404384:	4798      	blx	r3
	drv_uart_deInit(&uart1Config);
  404386:	4804      	ldr	r0, [pc, #16]	; (404398 <brd_deInitAllUarts+0x1c>)
  404388:	4b02      	ldr	r3, [pc, #8]	; (404394 <brd_deInitAllUarts+0x18>)
  40438a:	4798      	blx	r3
}
  40438c:	bd80      	pop	{r7, pc}
  40438e:	bf00      	nop
  404390:	20000168 	.word	0x20000168
  404394:	00407ccd 	.word	0x00407ccd
  404398:	20000180 	.word	0x20000180

0040439c <WDT_Handler>:

/**
 *  \brief Handler for watchdog interrupt.
 */
void WDT_Handler(void)
{
  40439c:	b580      	push	{r7, lr}
  40439e:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
  4043a0:	4803      	ldr	r0, [pc, #12]	; (4043b0 <WDT_Handler+0x14>)
  4043a2:	4b04      	ldr	r3, [pc, #16]	; (4043b4 <WDT_Handler+0x18>)
  4043a4:	4798      	blx	r3

	//debugPrintString("Restarting system!!!\r");
	rstc_start_software_reset(RSTC);	
  4043a6:	4804      	ldr	r0, [pc, #16]	; (4043b8 <WDT_Handler+0x1c>)
  4043a8:	4b04      	ldr	r3, [pc, #16]	; (4043bc <WDT_Handler+0x20>)
  4043aa:	4798      	blx	r3
}
  4043ac:	bd80      	pop	{r7, pc}
  4043ae:	bf00      	nop
  4043b0:	400e1450 	.word	0x400e1450
  4043b4:	0040bed5 	.word	0x0040bed5
  4043b8:	400e1400 	.word	0x400e1400
  4043bc:	0040a9c1 	.word	0x0040a9c1

004043c0 <brd_enableWatchdog>:
/**
 * configureWatchDog(void)
 * @brief Initialize the watchdog timer, only done once on power up. 
 */
void brd_enableWatchdog()
{
  4043c0:	b590      	push	{r4, r7, lr}
  4043c2:	b083      	sub	sp, #12
  4043c4:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_WDT);
  4043c6:	2004      	movs	r0, #4
  4043c8:	4b13      	ldr	r3, [pc, #76]	; (404418 <brd_enableWatchdog+0x58>)
  4043ca:	4798      	blx	r3
	/* Get timeout value. */
	uint32_t timeout_value = wdt_get_timeout_value(WDT_PERIOD * 1000,
  4043cc:	4813      	ldr	r0, [pc, #76]	; (40441c <brd_enableWatchdog+0x5c>)
  4043ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4043d2:	4b13      	ldr	r3, [pc, #76]	; (404420 <brd_enableWatchdog+0x60>)
  4043d4:	4798      	blx	r3
  4043d6:	6078      	str	r0, [r7, #4]
			BOARD_FREQ_SLCK_XTAL);
	if (timeout_value == WDT_INVALID_ARGUMENT) {
  4043d8:	687a      	ldr	r2, [r7, #4]
  4043da:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4043de:	429a      	cmp	r2, r3
  4043e0:	d100      	bne.n	4043e4 <brd_enableWatchdog+0x24>
		while (1) {
			/* Invalid timeout value, error. */
		}
  4043e2:	e7fe      	b.n	4043e2 <brd_enableWatchdog+0x22>
	}
	/* Configure WDT to trigger an interrupt (or reset). */
	//WDT_MR_WDFIEN |  /* Enable WDT fault interrupt. */
	uint32_t wdt_mode = WDT_MR_WDRSTEN | 			
  4043e4:	4b0f      	ldr	r3, [pc, #60]	; (404424 <brd_enableWatchdog+0x64>)
  4043e6:	603b      	str	r3, [r7, #0]
			WDT_MR_WDDBGHLT  |  /* WDT stops in debug state. */
			WDT_MR_WDIDLEHLT;   /* WDT stops in idle state. */
	
	/* Initialize WDT with the given parameters. */
	wdt_init(WDT, wdt_mode, timeout_value, timeout_value);
  4043e8:	687b      	ldr	r3, [r7, #4]
  4043ea:	b29a      	uxth	r2, r3
  4043ec:	687b      	ldr	r3, [r7, #4]
  4043ee:	b29b      	uxth	r3, r3
  4043f0:	480d      	ldr	r0, [pc, #52]	; (404428 <brd_enableWatchdog+0x68>)
  4043f2:	6839      	ldr	r1, [r7, #0]
  4043f4:	4c0d      	ldr	r4, [pc, #52]	; (40442c <brd_enableWatchdog+0x6c>)
  4043f6:	47a0      	blx	r4
			
	/* Configure and enable WDT interrupt. */
	NVIC_DisableIRQ(WDT_IRQn);
  4043f8:	2004      	movs	r0, #4
  4043fa:	4b0d      	ldr	r3, [pc, #52]	; (404430 <brd_enableWatchdog+0x70>)
  4043fc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(WDT_IRQn);
  4043fe:	2004      	movs	r0, #4
  404400:	4b0c      	ldr	r3, [pc, #48]	; (404434 <brd_enableWatchdog+0x74>)
  404402:	4798      	blx	r3
	NVIC_SetPriority(WDT_IRQn, 0);
  404404:	2004      	movs	r0, #4
  404406:	2100      	movs	r1, #0
  404408:	4b0b      	ldr	r3, [pc, #44]	; (404438 <brd_enableWatchdog+0x78>)
  40440a:	4798      	blx	r3
	NVIC_EnableIRQ(WDT_IRQn);
  40440c:	2004      	movs	r0, #4
  40440e:	4b0b      	ldr	r3, [pc, #44]	; (40443c <brd_enableWatchdog+0x7c>)
  404410:	4798      	blx	r3
				
  404412:	370c      	adds	r7, #12
  404414:	46bd      	mov	sp, r7
  404416:	bd90      	pop	{r4, r7, pc}
  404418:	0040b809 	.word	0x0040b809
  40441c:	00989680 	.word	0x00989680
  404420:	0040be25 	.word	0x0040be25
  404424:	30002000 	.word	0x30002000
  404428:	400e1450 	.word	0x400e1450
  40442c:	0040be75 	.word	0x0040be75
  404430:	00403ea9 	.word	0x00403ea9
  404434:	00403edd 	.word	0x00403edd
  404438:	00403f11 	.word	0x00403f11
  40443c:	00403e79 	.word	0x00403e79

00404440 <chrg_task_chargeMonitor>:
 * @brief This task will monitor the current charger status and battery charge level.  
 * @param pvParameters, void pointer to structure containing data router configuration. 
 * @return void
 ***********************************************************************************************/
void chrg_task_chargeMonitor(void *pvParameters)
{
  404440:	b590      	push	{r4, r7, lr}
  404442:	b0a3      	sub	sp, #140	; 0x8c
  404444:	af00      	add	r7, sp, #0
  404446:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  404448:	2300      	movs	r3, #0
  40444a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
	chrg_chargeMonitorConfig_t* chargeMonitorConfig = (chrg_chargeMonitorConfig_t*)pvParameters;  	
  40444e:	687b      	ldr	r3, [r7, #4]
  404450:	67fb      	str	r3, [r7, #124]	; 0x7c
	chrg_chargerState_t newChargerState = CHRG_CHARGER_STATE_INVALID_CODE; 
  404452:	2305      	movs	r3, #5
  404454:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	mgr_eventMessage_t eventMessage; 
	uint16_t chargeLevel = 0, newChargeLevel = 0, batteryCharge = 0;
  404458:	2300      	movs	r3, #0
  40445a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  40445e:	2300      	movs	r3, #0
  404460:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
  404464:	2300      	movs	r3, #0
  404466:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	drv_gpio_pin_state_t usbConnectedState = DRV_GPIO_PIN_STATE_PULLED_HIGH,
  40446a:	2302      	movs	r3, #2
  40446c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		 newUsbConnectedState = DRV_GPIO_PIN_STATE_LOW; 
  404470:	2300      	movs	r3, #0
  404472:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	drv_gpio_pin_state_t pwrButtonState = DRV_GPIO_PIN_STATE_PULLED_HIGH,
  404476:	2302      	movs	r3, #2
  404478:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		 newPwrButtonState = DRV_GPIO_PIN_STATE_LOW; 
  40447c:	2300      	movs	r3, #0
  40447e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	drv_gpio_pin_state_t dbGpioPinState = DRV_GPIO_PIN_STATE_PULLED_LOW,
  404482:	2303      	movs	r3, #3
  404484:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		 newDbGpioPinState = DRV_GPIO_PIN_STATE_PULLED_LOW;
  404488:	2303      	movs	r3, #3
  40448a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	
	char tempString[100] = {0}; 	 
  40448e:	f107 0208 	add.w	r2, r7, #8
  404492:	2364      	movs	r3, #100	; 0x64
  404494:	4610      	mov	r0, r2
  404496:	2100      	movs	r1, #0
  404498:	461a      	mov	r2, r3
  40449a:	4bac      	ldr	r3, [pc, #688]	; (40474c <chrg_task_chargeMonitor+0x30c>)
  40449c:	4798      	blx	r3
	while(1)
	{
		newChargerState = getChargerState(chargeMonitorConfig); 	
  40449e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
  4044a0:	4bab      	ldr	r3, [pc, #684]	; (404750 <chrg_task_chargeMonitor+0x310>)
  4044a2:	4798      	blx	r3
  4044a4:	4603      	mov	r3, r0
  4044a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		getCalculatedPercentage(&ltc2941Config, &newChargeLevel);	
  4044aa:	f107 0372 	add.w	r3, r7, #114	; 0x72
  4044ae:	48a9      	ldr	r0, [pc, #676]	; (404754 <chrg_task_chargeMonitor+0x314>)
  4044b0:	4619      	mov	r1, r3
  4044b2:	4ba9      	ldr	r3, [pc, #676]	; (404758 <chrg_task_chargeMonitor+0x318>)
  4044b4:	4798      	blx	r3
		drv_gpio_getPinState(DRV_GPIO_PIN_USB_DET, &newUsbConnectedState);
  4044b6:	f107 036f 	add.w	r3, r7, #111	; 0x6f
  4044ba:	200b      	movs	r0, #11
  4044bc:	4619      	mov	r1, r3
  4044be:	4ba7      	ldr	r3, [pc, #668]	; (40475c <chrg_task_chargeMonitor+0x31c>)
  4044c0:	4798      	blx	r3
		if(newUsbConnectedState != usbConnectedState)
  4044c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  4044c6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
  4044ca:	429a      	cmp	r2, r3
  4044cc:	d01c      	beq.n	404508 <chrg_task_chargeMonitor+0xc8>
		{
			if(newUsbConnectedState == DRV_GPIO_PIN_STATE_HIGH)
  4044ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  4044d2:	2b01      	cmp	r3, #1
  4044d4:	d103      	bne.n	4044de <chrg_task_chargeMonitor+0x9e>
			{
				//send GPIO connected state
				eventMessage.sysEvent = SYS_EVENT_USB_CONNECTED;
  4044d6:	2304      	movs	r3, #4
  4044d8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  4044dc:	e002      	b.n	4044e4 <chrg_task_chargeMonitor+0xa4>
			}
			else
			{
				eventMessage.sysEvent = SYS_EVENT_USB_DISCONNECTED;
  4044de:	2305      	movs	r3, #5
  4044e0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			}
			if(mgr_eventQueue != NULL)
  4044e4:	4b9e      	ldr	r3, [pc, #632]	; (404760 <chrg_task_chargeMonitor+0x320>)
  4044e6:	681b      	ldr	r3, [r3, #0]
  4044e8:	2b00      	cmp	r3, #0
  4044ea:	d009      	beq.n	404500 <chrg_task_chargeMonitor+0xc0>
			{
				if(xQueueSendToBack(mgr_eventQueue,( void * ) &eventMessage,5) != TRUE)
  4044ec:	4b9c      	ldr	r3, [pc, #624]	; (404760 <chrg_task_chargeMonitor+0x320>)
  4044ee:	681a      	ldr	r2, [r3, #0]
  4044f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
  4044f4:	4610      	mov	r0, r2
  4044f6:	4619      	mov	r1, r3
  4044f8:	2205      	movs	r2, #5
  4044fa:	2300      	movs	r3, #0
  4044fc:	4c99      	ldr	r4, [pc, #612]	; (404764 <chrg_task_chargeMonitor+0x324>)
  4044fe:	47a0      	blx	r4
				{
					//this is an error, we should log it.
				}
			}
			usbConnectedState = newUsbConnectedState; 			
  404500:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  404504:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		}
		drv_gpio_getPinState(DRV_GPIO_PIN_PWR_BTN, &newPwrButtonState);
  404508:	f107 036e 	add.w	r3, r7, #110	; 0x6e
  40450c:	200a      	movs	r0, #10
  40450e:	4619      	mov	r1, r3
  404510:	4b92      	ldr	r3, [pc, #584]	; (40475c <chrg_task_chargeMonitor+0x31c>)
  404512:	4798      	blx	r3
		if(newPwrButtonState != pwrButtonState)
  404514:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
  404518:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
  40451c:	429a      	cmp	r2, r3
  40451e:	d011      	beq.n	404544 <chrg_task_chargeMonitor+0x104>
		{
			if(newPwrButtonState == DRV_GPIO_PIN_STATE_HIGH)
  404520:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
  404524:	2b01      	cmp	r3, #1
  404526:	d106      	bne.n	404536 <chrg_task_chargeMonitor+0xf6>
			{
				powerButtonLowCount = 0;
  404528:	4b8f      	ldr	r3, [pc, #572]	; (404768 <chrg_task_chargeMonitor+0x328>)
  40452a:	2200      	movs	r2, #0
  40452c:	601a      	str	r2, [r3, #0]
				dat_sendDebugMsgToDataBoard("PwrBrdMsg:pwr Button high\r\n");
  40452e:	488f      	ldr	r0, [pc, #572]	; (40476c <chrg_task_chargeMonitor+0x32c>)
  404530:	4b8f      	ldr	r3, [pc, #572]	; (404770 <chrg_task_chargeMonitor+0x330>)
  404532:	4798      	blx	r3
  404534:	e002      	b.n	40453c <chrg_task_chargeMonitor+0xfc>
			}
			else
			{
				dat_sendDebugMsgToDataBoard("PwrBrdMsg:pwr Button low\r\n");
  404536:	488f      	ldr	r0, [pc, #572]	; (404774 <chrg_task_chargeMonitor+0x334>)
  404538:	4b8d      	ldr	r3, [pc, #564]	; (404770 <chrg_task_chargeMonitor+0x330>)
  40453a:	4798      	blx	r3
			}
			pwrButtonState = newPwrButtonState;
  40453c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
  404540:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		}
		if(pwrButtonState == DRV_GPIO_PIN_STATE_LOW)
  404544:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
  404548:	2b00      	cmp	r3, #0
  40454a:	d104      	bne.n	404556 <chrg_task_chargeMonitor+0x116>
		{
			powerButtonLowCount++;
  40454c:	4b86      	ldr	r3, [pc, #536]	; (404768 <chrg_task_chargeMonitor+0x328>)
  40454e:	681b      	ldr	r3, [r3, #0]
  404550:	1c5a      	adds	r2, r3, #1
  404552:	4b85      	ldr	r3, [pc, #532]	; (404768 <chrg_task_chargeMonitor+0x328>)
  404554:	601a      	str	r2, [r3, #0]
		}
		if(powerButtonLowCount == 10) //approximately 3.5 seconds
  404556:	4b84      	ldr	r3, [pc, #528]	; (404768 <chrg_task_chargeMonitor+0x328>)
  404558:	681b      	ldr	r3, [r3, #0]
  40455a:	2b0a      	cmp	r3, #10
  40455c:	d110      	bne.n	404580 <chrg_task_chargeMonitor+0x140>
		{			
			//should be we reset the power board? or just power off
			eventMessage.sysEvent = SYS_EVENT_POWER_SWITCH;
  40455e:	2300      	movs	r3, #0
  404560:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			if(mgr_eventQueue != NULL)
  404564:	4b7e      	ldr	r3, [pc, #504]	; (404760 <chrg_task_chargeMonitor+0x320>)
  404566:	681b      	ldr	r3, [r3, #0]
  404568:	2b00      	cmp	r3, #0
  40456a:	d009      	beq.n	404580 <chrg_task_chargeMonitor+0x140>
			{
				if(xQueueSendToBack(mgr_eventQueue,( void * ) &eventMessage,5) != TRUE)
  40456c:	4b7c      	ldr	r3, [pc, #496]	; (404760 <chrg_task_chargeMonitor+0x320>)
  40456e:	681a      	ldr	r2, [r3, #0]
  404570:	f107 0374 	add.w	r3, r7, #116	; 0x74
  404574:	4610      	mov	r0, r2
  404576:	4619      	mov	r1, r3
  404578:	2205      	movs	r2, #5
  40457a:	2300      	movs	r3, #0
  40457c:	4c79      	ldr	r4, [pc, #484]	; (404764 <chrg_task_chargeMonitor+0x324>)
  40457e:	47a0      	blx	r4
				}
			}				
		}
		
		// check if the data board is ready to auto shutdown
		drv_gpio_getPinState(DRV_GPIO_PIN_GPIO, &newDbGpioPinState);		// TODO: needs rigorous testing
  404580:	f107 036d 	add.w	r3, r7, #109	; 0x6d
  404584:	2009      	movs	r0, #9
  404586:	4619      	mov	r1, r3
  404588:	4b74      	ldr	r3, [pc, #464]	; (40475c <chrg_task_chargeMonitor+0x31c>)
  40458a:	4798      	blx	r3
		if (newDbGpioPinState != dbGpioPinState)
  40458c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
  404590:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
  404594:	429a      	cmp	r2, r3
  404596:	d018      	beq.n	4045ca <chrg_task_chargeMonitor+0x18a>
		{
			dbGpioPinState = newDbGpioPinState;
  404598:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
  40459c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			if (newDbGpioPinState == DRV_GPIO_PIN_STATE_LOW)
  4045a0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
  4045a4:	2b00      	cmp	r3, #0
  4045a6:	d110      	bne.n	4045ca <chrg_task_chargeMonitor+0x18a>
			{
				// the brain pack is ready to shutdown
				eventMessage.sysEvent = SYS_EVENT_POWER_SWITCH;
  4045a8:	2300      	movs	r3, #0
  4045aa:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
				if(mgr_eventQueue != NULL)
  4045ae:	4b6c      	ldr	r3, [pc, #432]	; (404760 <chrg_task_chargeMonitor+0x320>)
  4045b0:	681b      	ldr	r3, [r3, #0]
  4045b2:	2b00      	cmp	r3, #0
  4045b4:	d009      	beq.n	4045ca <chrg_task_chargeMonitor+0x18a>
				{
					if(xQueueSendToBack(mgr_eventQueue,( void * ) &eventMessage,5) != TRUE)
  4045b6:	4b6a      	ldr	r3, [pc, #424]	; (404760 <chrg_task_chargeMonitor+0x320>)
  4045b8:	681a      	ldr	r2, [r3, #0]
  4045ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
  4045be:	4610      	mov	r0, r2
  4045c0:	4619      	mov	r1, r3
  4045c2:	2205      	movs	r2, #5
  4045c4:	2300      	movs	r3, #0
  4045c6:	4c67      	ldr	r4, [pc, #412]	; (404764 <chrg_task_chargeMonitor+0x324>)
  4045c8:	47a0      	blx	r4
				}
			}
		}
				
		//check if the state is new
		if(newChargerState != chrg_currentChargerState)
  4045ca:	4b6b      	ldr	r3, [pc, #428]	; (404778 <chrg_task_chargeMonitor+0x338>)
  4045cc:	781b      	ldrb	r3, [r3, #0]
  4045ce:	b2db      	uxtb	r3, r3
  4045d0:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
  4045d4:	429a      	cmp	r2, r3
  4045d6:	f000 8084 	beq.w	4046e2 <chrg_task_chargeMonitor+0x2a2>
		{
			switch(newChargerState)
  4045da:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
  4045de:	3b01      	subs	r3, #1
  4045e0:	2b06      	cmp	r3, #6
  4045e2:	d872      	bhi.n	4046ca <chrg_task_chargeMonitor+0x28a>
  4045e4:	a201      	add	r2, pc, #4	; (adr r2, 4045ec <chrg_task_chargeMonitor+0x1ac>)
  4045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4045ea:	bf00      	nop
  4045ec:	004046bb 	.word	0x004046bb
  4045f0:	0040461b 	.word	0x0040461b
  4045f4:	0040465d 	.word	0x0040465d
  4045f8:	00404625 	.word	0x00404625
  4045fc:	004046cb 	.word	0x004046cb
  404600:	00404611 	.word	0x00404611
  404604:	00404609 	.word	0x00404609
			{
				case CHRG_CHARGER_STATE_SHUTDOWN_VBAT:
					//the charger is shutdown, this means that we're running on battery							
					chargeLevel = 0; //set the current charge level to zero so we update the LED color below. 				
  404608:	2300      	movs	r3, #0
  40460a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
				break;
  40460e:	e064      	b.n	4046da <chrg_task_chargeMonitor+0x29a>
				case CHRG_CHARGER_STATE_SHUTDOWN_VIN:
					drv_led_set(DRV_LED_YELLOW,DRV_LED_SOLID); //TODO: maybe change this... since it's not actually charging. 
  404610:	2003      	movs	r0, #3
  404612:	2101      	movs	r1, #1
  404614:	4b59      	ldr	r3, [pc, #356]	; (40477c <chrg_task_chargeMonitor+0x33c>)
  404616:	4798      	blx	r3
				break;
  404618:	e05f      	b.n	4046da <chrg_task_chargeMonitor+0x29a>
				case CHRG_CHARGER_STATE_CHARGING:
				{					
					drv_led_set(DRV_LED_YELLOW,DRV_LED_SOLID);	
  40461a:	2003      	movs	r0, #3
  40461c:	2101      	movs	r1, #1
  40461e:	4b57      	ldr	r3, [pc, #348]	; (40477c <chrg_task_chargeMonitor+0x33c>)
  404620:	4798      	blx	r3
				}				
				break;
  404622:	e05a      	b.n	4046da <chrg_task_chargeMonitor+0x29a>
				case CHRG_CHARGER_STATE_CHARGE_COMPLETE:
				{	
					ltc2941GetCharge(&ltc2941Config, &batteryCharge);
  404624:	f107 0370 	add.w	r3, r7, #112	; 0x70
  404628:	484a      	ldr	r0, [pc, #296]	; (404754 <chrg_task_chargeMonitor+0x314>)
  40462a:	4619      	mov	r1, r3
  40462c:	4b54      	ldr	r3, [pc, #336]	; (404780 <chrg_task_chargeMonitor+0x340>)
  40462e:	4798      	blx	r3
					sprintf(tempString,"PwrBrdMsg:Receive Battery Full indication at %d level\r\n", batteryCharge);
  404630:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
  404634:	f107 0208 	add.w	r2, r7, #8
  404638:	4610      	mov	r0, r2
  40463a:	4952      	ldr	r1, [pc, #328]	; (404784 <chrg_task_chargeMonitor+0x344>)
  40463c:	461a      	mov	r2, r3
  40463e:	4b52      	ldr	r3, [pc, #328]	; (404788 <chrg_task_chargeMonitor+0x348>)
  404640:	4798      	blx	r3
					dat_sendDebugMsgToDataBoard(tempString);
  404642:	f107 0308 	add.w	r3, r7, #8
  404646:	4618      	mov	r0, r3
  404648:	4b49      	ldr	r3, [pc, #292]	; (404770 <chrg_task_chargeMonitor+0x330>)
  40464a:	4798      	blx	r3
					ltc2941SetChargeComplete(&ltc2941Config);									
  40464c:	4841      	ldr	r0, [pc, #260]	; (404754 <chrg_task_chargeMonitor+0x314>)
  40464e:	4b4f      	ldr	r3, [pc, #316]	; (40478c <chrg_task_chargeMonitor+0x34c>)
  404650:	4798      	blx	r3
					drv_led_set(DRV_LED_GREEN,DRV_LED_SOLID);
  404652:	2002      	movs	r0, #2
  404654:	2101      	movs	r1, #1
  404656:	4b49      	ldr	r3, [pc, #292]	; (40477c <chrg_task_chargeMonitor+0x33c>)
  404658:	4798      	blx	r3
				}
				break;
  40465a:	e03e      	b.n	4046da <chrg_task_chargeMonitor+0x29a>
				case CHRG_CHARGER_STATE_LOW_BATTERY:
				{
					eventMessage.sysEvent = SYS_EVENT_LOW_BATTERY; 
  40465c:	2302      	movs	r3, #2
  40465e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
					if(mgr_eventQueue != NULL)
  404662:	4b3f      	ldr	r3, [pc, #252]	; (404760 <chrg_task_chargeMonitor+0x320>)
  404664:	681b      	ldr	r3, [r3, #0]
  404666:	2b00      	cmp	r3, #0
  404668:	d022      	beq.n	4046b0 <chrg_task_chargeMonitor+0x270>
					{
						ltc2941GetCharge(&ltc2941Config, &batteryCharge);
  40466a:	f107 0370 	add.w	r3, r7, #112	; 0x70
  40466e:	4839      	ldr	r0, [pc, #228]	; (404754 <chrg_task_chargeMonitor+0x314>)
  404670:	4619      	mov	r1, r3
  404672:	4b43      	ldr	r3, [pc, #268]	; (404780 <chrg_task_chargeMonitor+0x340>)
  404674:	4798      	blx	r3
						sprintf(tempString,"PwrBrdMsg:Receive Low Battery indication at %d level\r\n", batteryCharge);
  404676:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
  40467a:	f107 0208 	add.w	r2, r7, #8
  40467e:	4610      	mov	r0, r2
  404680:	4943      	ldr	r1, [pc, #268]	; (404790 <chrg_task_chargeMonitor+0x350>)
  404682:	461a      	mov	r2, r3
  404684:	4b40      	ldr	r3, [pc, #256]	; (404788 <chrg_task_chargeMonitor+0x348>)
  404686:	4798      	blx	r3
						dat_sendDebugMsgToDataBoard(tempString);
  404688:	f107 0308 	add.w	r3, r7, #8
  40468c:	4618      	mov	r0, r3
  40468e:	4b38      	ldr	r3, [pc, #224]	; (404770 <chrg_task_chargeMonitor+0x330>)
  404690:	4798      	blx	r3
						ltc2941SetCharge(&ltc2941Config, CHARGE_EMPTY_VALUE); //set the gas gauge to zero. 						
  404692:	4830      	ldr	r0, [pc, #192]	; (404754 <chrg_task_chargeMonitor+0x314>)
  404694:	f644 0198 	movw	r1, #18584	; 0x4898
  404698:	4b3e      	ldr	r3, [pc, #248]	; (404794 <chrg_task_chargeMonitor+0x354>)
  40469a:	4798      	blx	r3
						if(xQueueSendToBack(mgr_eventQueue,( void * ) &eventMessage,5) != TRUE)
  40469c:	4b30      	ldr	r3, [pc, #192]	; (404760 <chrg_task_chargeMonitor+0x320>)
  40469e:	681a      	ldr	r2, [r3, #0]
  4046a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
  4046a4:	4610      	mov	r0, r2
  4046a6:	4619      	mov	r1, r3
  4046a8:	2205      	movs	r2, #5
  4046aa:	2300      	movs	r3, #0
  4046ac:	4c2d      	ldr	r4, [pc, #180]	; (404764 <chrg_task_chargeMonitor+0x324>)
  4046ae:	47a0      	blx	r4
						{
							//this is an error, we should log it.
						}				
					}
					drv_led_set(DRV_LED_RED,DRV_LED_SOLID);
  4046b0:	2000      	movs	r0, #0
  4046b2:	2101      	movs	r1, #1
  4046b4:	4b31      	ldr	r3, [pc, #196]	; (40477c <chrg_task_chargeMonitor+0x33c>)
  4046b6:	4798      	blx	r3
				}
				break;
  4046b8:	e00f      	b.n	4046da <chrg_task_chargeMonitor+0x29a>
				case CHRG_CHARGER_STATE_NO_BATTERY:
				{				
					drv_led_set(DRV_LED_PURPLE,DRV_LED_SOLID);
  4046ba:	2006      	movs	r0, #6
  4046bc:	2101      	movs	r1, #1
  4046be:	4b2f      	ldr	r3, [pc, #188]	; (40477c <chrg_task_chargeMonitor+0x33c>)
  4046c0:	4798      	blx	r3
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:No Battery\r\n");
  4046c2:	4835      	ldr	r0, [pc, #212]	; (404798 <chrg_task_chargeMonitor+0x358>)
  4046c4:	4b2a      	ldr	r3, [pc, #168]	; (404770 <chrg_task_chargeMonitor+0x330>)
  4046c6:	4798      	blx	r3
				}
				break;
  4046c8:	e007      	b.n	4046da <chrg_task_chargeMonitor+0x29a>
				case CHRG_CHARGER_STATE_INVALID_CODE:
				default:
				{
					//drv_led_set(DRV_LED_TURQUOISE,DRV_LED_FLASH);	
					//turn off LED for now, figure out what to do with this state later
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:Battery Fault\r\n");
  4046ca:	4834      	ldr	r0, [pc, #208]	; (40479c <chrg_task_chargeMonitor+0x35c>)
  4046cc:	4b28      	ldr	r3, [pc, #160]	; (404770 <chrg_task_chargeMonitor+0x330>)
  4046ce:	4798      	blx	r3
					drv_led_set(DRV_LED_OFF,DRV_LED_SOLID);
  4046d0:	2007      	movs	r0, #7
  4046d2:	2101      	movs	r1, #1
  4046d4:	4b29      	ldr	r3, [pc, #164]	; (40477c <chrg_task_chargeMonitor+0x33c>)
  4046d6:	4798      	blx	r3
				}				
				break;				
  4046d8:	bf00      	nop
			}		
			chrg_currentChargerState = newChargerState; 		
  4046da:	4b27      	ldr	r3, [pc, #156]	; (404778 <chrg_task_chargeMonitor+0x338>)
  4046dc:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
  4046e0:	701a      	strb	r2, [r3, #0]
		}
		if(newChargeLevel != chargeLevel)
  4046e2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
  4046e6:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
  4046ea:	429a      	cmp	r2, r3
  4046ec:	d062      	beq.n	4047b4 <chrg_task_chargeMonitor+0x374>
		{			
			chargeLevel = newChargeLevel; 
  4046ee:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
  4046f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			if(chrg_currentChargerState == CHRG_CHARGER_STATE_SHUTDOWN_VBAT)
  4046f6:	4b20      	ldr	r3, [pc, #128]	; (404778 <chrg_task_chargeMonitor+0x338>)
  4046f8:	781b      	ldrb	r3, [r3, #0]
  4046fa:	b2db      	uxtb	r3, r3
  4046fc:	2b07      	cmp	r3, #7
  4046fe:	d159      	bne.n	4047b4 <chrg_task_chargeMonitor+0x374>
			{
				//we are being powered by VBAT, determine what the battery level is. 
				if(chargeLevel <= BATTERY_PERCENT_FAULT)
  404700:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
  404704:	2b05      	cmp	r3, #5
  404706:	d80e      	bhi.n	404726 <chrg_task_chargeMonitor+0x2e6>
				{
					//the battery is pretty much dead
					drv_led_set(DRV_LED_RED, DRV_LED_FLASH); 
  404708:	2000      	movs	r0, #0
  40470a:	2100      	movs	r1, #0
  40470c:	4b1b      	ldr	r3, [pc, #108]	; (40477c <chrg_task_chargeMonitor+0x33c>)
  40470e:	4798      	blx	r3
					eventMessage.sysEvent = SYS_EVENT_LOW_BATTERY;
  404710:	2302      	movs	r3, #2
  404712:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
					if(mgr_eventQueue != NULL)
  404716:	4b12      	ldr	r3, [pc, #72]	; (404760 <chrg_task_chargeMonitor+0x320>)
  404718:	681b      	ldr	r3, [r3, #0]
  40471a:	2b00      	cmp	r3, #0
  40471c:	d04a      	beq.n	4047b4 <chrg_task_chargeMonitor+0x374>
					{
						dat_sendDebugMsgToDataBoard("PwrBrdMsg:Battery Level Empty\r\n");
  40471e:	4820      	ldr	r0, [pc, #128]	; (4047a0 <chrg_task_chargeMonitor+0x360>)
  404720:	4b13      	ldr	r3, [pc, #76]	; (404770 <chrg_task_chargeMonitor+0x330>)
  404722:	4798      	blx	r3
  404724:	e046      	b.n	4047b4 <chrg_task_chargeMonitor+0x374>
						//{
							////this is an error, we should log it.
						//}
					}					
				}
				else if(chargeLevel <= BATTERY_PERCENT_CRITICAL)
  404726:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
  40472a:	2b08      	cmp	r3, #8
  40472c:	d804      	bhi.n	404738 <chrg_task_chargeMonitor+0x2f8>
				{
					drv_led_set(DRV_LED_RED, DRV_LED_FLASH); 
  40472e:	2000      	movs	r0, #0
  404730:	2100      	movs	r1, #0
  404732:	4b12      	ldr	r3, [pc, #72]	; (40477c <chrg_task_chargeMonitor+0x33c>)
  404734:	4798      	blx	r3
  404736:	e03d      	b.n	4047b4 <chrg_task_chargeMonitor+0x374>
				}				
				else if(chargeLevel <= BATTERY_PERCENT_LOW)
  404738:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
  40473c:	2b0f      	cmp	r3, #15
  40473e:	d831      	bhi.n	4047a4 <chrg_task_chargeMonitor+0x364>
				{
					//battery is low, we need to indicate that to the user
					
					drv_led_set(DRV_LED_RED, DRV_LED_SOLID);
  404740:	2000      	movs	r0, #0
  404742:	2101      	movs	r1, #1
  404744:	4b0d      	ldr	r3, [pc, #52]	; (40477c <chrg_task_chargeMonitor+0x33c>)
  404746:	4798      	blx	r3
  404748:	e034      	b.n	4047b4 <chrg_task_chargeMonitor+0x374>
  40474a:	bf00      	nop
  40474c:	0040cb95 	.word	0x0040cb95
  404750:	004047c5 	.word	0x004047c5
  404754:	200001d4 	.word	0x200001d4
  404758:	00405be1 	.word	0x00405be1
  40475c:	0040564d 	.word	0x0040564d
  404760:	20000f70 	.word	0x20000f70
  404764:	004089b1 	.word	0x004089b1
  404768:	20000e04 	.word	0x20000e04
  40476c:	00415c7c 	.word	0x00415c7c
  404770:	00405215 	.word	0x00405215
  404774:	00415c98 	.word	0x00415c98
  404778:	200001e0 	.word	0x200001e0
  40477c:	004073e5 	.word	0x004073e5
  404780:	00405b91 	.word	0x00405b91
  404784:	00415cb4 	.word	0x00415cb4
  404788:	0040cda5 	.word	0x0040cda5
  40478c:	00405c69 	.word	0x00405c69
  404790:	00415cec 	.word	0x00415cec
  404794:	00405b39 	.word	0x00405b39
  404798:	00415d24 	.word	0x00415d24
  40479c:	00415d3c 	.word	0x00415d3c
  4047a0:	00415d58 	.word	0x00415d58
				}
				else if(chargeLevel > BATTERY_PERCENT_LOW)
  4047a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
  4047a8:	2b0f      	cmp	r3, #15
  4047aa:	d903      	bls.n	4047b4 <chrg_task_chargeMonitor+0x374>
				{
					//battery level is good. no need to indicate anything. 
					//drv_led_set(DRV_LED_BLUE,DRV_LED_SOLID);					
					drv_led_set(DRV_LED_OFF,DRV_LED_SOLID);
  4047ac:	2007      	movs	r0, #7
  4047ae:	2101      	movs	r1, #1
  4047b0:	4b02      	ldr	r3, [pc, #8]	; (4047bc <chrg_task_chargeMonitor+0x37c>)
  4047b2:	4798      	blx	r3
				}				
			}
		}			
		vTaskDelay(250); 
  4047b4:	20fa      	movs	r0, #250	; 0xfa
  4047b6:	4b02      	ldr	r3, [pc, #8]	; (4047c0 <chrg_task_chargeMonitor+0x380>)
  4047b8:	4798      	blx	r3
	}	
  4047ba:	e670      	b.n	40449e <chrg_task_chargeMonitor+0x5e>
  4047bc:	004073e5 	.word	0x004073e5
  4047c0:	00409239 	.word	0x00409239

004047c4 <getChargerState>:

//static functions

//get charge status
chrg_chargerState_t getChargerState(chrg_chargeMonitorConfig_t* chargerConfig)
{
  4047c4:	b580      	push	{r7, lr}
  4047c6:	b084      	sub	sp, #16
  4047c8:	af00      	add	r7, sp, #0
  4047ca:	6078      	str	r0, [r7, #4]
	chrg_chargerState_t chargerState = 0x00; 
  4047cc:	2300      	movs	r3, #0
  4047ce:	73fb      	strb	r3, [r7, #15]
	drv_gpio_pin_state_t tempPinState = DRV_GPIO_PIN_STATE_LOW; 
  4047d0:	2300      	movs	r3, #0
  4047d2:	73bb      	strb	r3, [r7, #14]
	drv_gpio_getPinState(chargerConfig->pin_pg, &tempPinState); 
  4047d4:	687b      	ldr	r3, [r7, #4]
  4047d6:	789a      	ldrb	r2, [r3, #2]
  4047d8:	f107 030e 	add.w	r3, r7, #14
  4047dc:	4610      	mov	r0, r2
  4047de:	4619      	mov	r1, r3
  4047e0:	4b19      	ldr	r3, [pc, #100]	; (404848 <getChargerState+0x84>)
  4047e2:	4798      	blx	r3
	chargerState |= (tempPinState & 0x01); 
  4047e4:	7bbb      	ldrb	r3, [r7, #14]
  4047e6:	b2db      	uxtb	r3, r3
  4047e8:	f003 0301 	and.w	r3, r3, #1
  4047ec:	b2da      	uxtb	r2, r3
  4047ee:	7bfb      	ldrb	r3, [r7, #15]
  4047f0:	4313      	orrs	r3, r2
  4047f2:	b2db      	uxtb	r3, r3
  4047f4:	73fb      	strb	r3, [r7, #15]
	drv_gpio_getPinState(chargerConfig->pin_stat2, &tempPinState);
  4047f6:	687b      	ldr	r3, [r7, #4]
  4047f8:	785a      	ldrb	r2, [r3, #1]
  4047fa:	f107 030e 	add.w	r3, r7, #14
  4047fe:	4610      	mov	r0, r2
  404800:	4619      	mov	r1, r3
  404802:	4b11      	ldr	r3, [pc, #68]	; (404848 <getChargerState+0x84>)
  404804:	4798      	blx	r3
	chargerState |= ((tempPinState<<1) & 0x02);
  404806:	7bbb      	ldrb	r3, [r7, #14]
  404808:	005b      	lsls	r3, r3, #1
  40480a:	b2db      	uxtb	r3, r3
  40480c:	f003 0302 	and.w	r3, r3, #2
  404810:	b2da      	uxtb	r2, r3
  404812:	7bfb      	ldrb	r3, [r7, #15]
  404814:	4313      	orrs	r3, r2
  404816:	b2db      	uxtb	r3, r3
  404818:	73fb      	strb	r3, [r7, #15]
	drv_gpio_getPinState(chargerConfig->pin_stat1, &tempPinState);
  40481a:	687b      	ldr	r3, [r7, #4]
  40481c:	781a      	ldrb	r2, [r3, #0]
  40481e:	f107 030e 	add.w	r3, r7, #14
  404822:	4610      	mov	r0, r2
  404824:	4619      	mov	r1, r3
  404826:	4b08      	ldr	r3, [pc, #32]	; (404848 <getChargerState+0x84>)
  404828:	4798      	blx	r3
	chargerState |= ((tempPinState<<2) & 0x04);		
  40482a:	7bbb      	ldrb	r3, [r7, #14]
  40482c:	009b      	lsls	r3, r3, #2
  40482e:	b2db      	uxtb	r3, r3
  404830:	f003 0304 	and.w	r3, r3, #4
  404834:	b2da      	uxtb	r2, r3
  404836:	7bfb      	ldrb	r3, [r7, #15]
  404838:	4313      	orrs	r3, r2
  40483a:	b2db      	uxtb	r3, r3
  40483c:	73fb      	strb	r3, [r7, #15]
	return chargerState; 		
  40483e:	7bfb      	ldrb	r3, [r7, #15]
  404840:	4618      	mov	r0, r3
  404842:	3710      	adds	r7, #16
  404844:	46bd      	mov	sp, r7
  404846:	bd80      	pop	{r7, pc}
  404848:	0040564d 	.word	0x0040564d

0040484c <cmd_task_commandProcesor>:
 * @brief This task receives all incoming commands to the brain pack, and responds to the ones it needs to.   
 * @param pvParameters, void pointer to structure containing configuration
 * @return void
 ***********************************************************************************************/
void cmd_task_commandProcesor(void *pvParameters)
{
  40484c:	b590      	push	{r4, r7, lr}
  40484e:	b0a1      	sub	sp, #132	; 0x84
  404850:	af00      	add	r7, sp, #0
  404852:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  404854:	2300      	movs	r3, #0
  404856:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	cmd_queue_commandQueue = xQueueCreate( 10, sizeof(cmd_commandPacket_t));
  40485a:	200a      	movs	r0, #10
  40485c:	2168      	movs	r1, #104	; 0x68
  40485e:	2200      	movs	r2, #0
  404860:	4b96      	ldr	r3, [pc, #600]	; (404abc <cmd_task_commandProcesor+0x270>)
  404862:	4798      	blx	r3
  404864:	4602      	mov	r2, r0
  404866:	4b96      	ldr	r3, [pc, #600]	; (404ac0 <cmd_task_commandProcesor+0x274>)
  404868:	601a      	str	r2, [r3, #0]
	cmd_commandPacket_t packet; 
	cmd_initPacketStructure(&packet);
  40486a:	f107 0310 	add.w	r3, r7, #16
  40486e:	4618      	mov	r0, r3
  404870:	4b94      	ldr	r3, [pc, #592]	; (404ac4 <cmd_task_commandProcesor+0x278>)
  404872:	4798      	blx	r3
	uint16_t chargeLevel = 0; 
  404874:	2300      	movs	r3, #0
  404876:	81fb      	strh	r3, [r7, #14]
	uint32_t chargeRegValue = 0, chargePercent = 0; 
  404878:	2300      	movs	r3, #0
  40487a:	67bb      	str	r3, [r7, #120]	; 0x78
  40487c:	2300      	movs	r3, #0
  40487e:	60bb      	str	r3, [r7, #8]
	bool forwardCommand = true; 
  404880:	2301      	movs	r3, #1
  404882:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if(cmd_queue_commandQueue == 0)
  404886:	4b8e      	ldr	r3, [pc, #568]	; (404ac0 <cmd_task_commandProcesor+0x274>)
  404888:	681b      	ldr	r3, [r3, #0]
  40488a:	2b00      	cmp	r3, #0
  40488c:	d100      	bne.n	404890 <cmd_task_commandProcesor+0x44>
	{
		// Queue was not created this is an error!		
		return;
  40488e:	e280      	b.n	404d92 <cmd_task_commandProcesor+0x546>
	}
	while(1)
	{	
		if(xQueueReceive( cmd_queue_commandQueue, &(packet), 250) == TRUE)
  404890:	4b8b      	ldr	r3, [pc, #556]	; (404ac0 <cmd_task_commandProcesor+0x274>)
  404892:	681a      	ldr	r2, [r3, #0]
  404894:	f107 0310 	add.w	r3, r7, #16
  404898:	4610      	mov	r0, r2
  40489a:	4619      	mov	r1, r3
  40489c:	22fa      	movs	r2, #250	; 0xfa
  40489e:	2300      	movs	r3, #0
  4048a0:	4c89      	ldr	r4, [pc, #548]	; (404ac8 <cmd_task_commandProcesor+0x27c>)
  4048a2:	47a0      	blx	r4
  4048a4:	4603      	mov	r3, r0
  4048a6:	2b01      	cmp	r3, #1
  4048a8:	f040 8272 	bne.w	404d90 <cmd_task_commandProcesor+0x544>
		{
			//only a small subset of commands are handled on the power board
			//send the rest to the data board for processing.
			if(packet.packetSize > 0)
  4048ac:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
  4048b0:	2b00      	cmp	r3, #0
  4048b2:	f000 826d 	beq.w	404d90 <cmd_task_commandProcesor+0x544>
			{		
				forwardCommand = true; //by default always forward the command to the databoard
  4048b6:	2301      	movs	r3, #1
  4048b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if(strncmp(packet.packetData,"setTime",7)==0)
  4048bc:	f107 0310 	add.w	r3, r7, #16
  4048c0:	3301      	adds	r3, #1
  4048c2:	4618      	mov	r0, r3
  4048c4:	4981      	ldr	r1, [pc, #516]	; (404acc <cmd_task_commandProcesor+0x280>)
  4048c6:	2207      	movs	r2, #7
  4048c8:	4b81      	ldr	r3, [pc, #516]	; (404ad0 <cmd_task_commandProcesor+0x284>)
  4048ca:	4798      	blx	r3
  4048cc:	4603      	mov	r3, r0
  4048ce:	2b00      	cmp	r3, #0
  4048d0:	d114      	bne.n	4048fc <cmd_task_commandProcesor+0xb0>
				{
					//handle the set time command. 
					if(packet.packetSource != CMD_COMMAND_SOURCE_LOCAL)
  4048d2:	7c3b      	ldrb	r3, [r7, #16]
  4048d4:	2b02      	cmp	r3, #2
  4048d6:	f000 8251 	beq.w	404d7c <cmd_task_commandProcesor+0x530>
					{					
						if(strlen(packet.packetData) >= 24)
  4048da:	f107 0310 	add.w	r3, r7, #16
  4048de:	3301      	adds	r3, #1
  4048e0:	4618      	mov	r0, r3
  4048e2:	4b7c      	ldr	r3, [pc, #496]	; (404ad4 <cmd_task_commandProcesor+0x288>)
  4048e4:	4798      	blx	r3
  4048e6:	4603      	mov	r3, r0
  4048e8:	2b17      	cmp	r3, #23
  4048ea:	f240 8247 	bls.w	404d7c <cmd_task_commandProcesor+0x530>
						{
							setTimeFromString(packet.packetData+7);
  4048ee:	f107 0310 	add.w	r3, r7, #16
  4048f2:	3308      	adds	r3, #8
  4048f4:	4618      	mov	r0, r3
  4048f6:	4b78      	ldr	r3, [pc, #480]	; (404ad8 <cmd_task_commandProcesor+0x28c>)
  4048f8:	4798      	blx	r3
  4048fa:	e23f      	b.n	404d7c <cmd_task_commandProcesor+0x530>
						}
					}
				}
				else if(strncmp(packet.packetData,"pbGetTime",9)==0)
  4048fc:	f107 0310 	add.w	r3, r7, #16
  404900:	3301      	adds	r3, #1
  404902:	4618      	mov	r0, r3
  404904:	4975      	ldr	r1, [pc, #468]	; (404adc <cmd_task_commandProcesor+0x290>)
  404906:	2209      	movs	r2, #9
  404908:	4b71      	ldr	r3, [pc, #452]	; (404ad0 <cmd_task_commandProcesor+0x284>)
  40490a:	4798      	blx	r3
  40490c:	4603      	mov	r3, r0
  40490e:	2b00      	cmp	r3, #0
  404910:	d11c      	bne.n	40494c <cmd_task_commandProcesor+0x100>
				{
					forwardCommand = false; 
  404912:	2300      	movs	r3, #0
  404914:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					cmd_sendDateTimeCommand();
  404918:	4b71      	ldr	r3, [pc, #452]	; (404ae0 <cmd_task_commandProcesor+0x294>)
  40491a:	4798      	blx	r3
					if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  40491c:	7c3b      	ldrb	r3, [r7, #16]
  40491e:	2b00      	cmp	r3, #0
  404920:	d109      	bne.n	404936 <cmd_task_commandProcesor+0xea>
					{
						drv_uart_putString(dataRouterConfiguration.daughterBoard, getTimeString());
  404922:	4b70      	ldr	r3, [pc, #448]	; (404ae4 <cmd_task_commandProcesor+0x298>)
  404924:	685c      	ldr	r4, [r3, #4]
  404926:	4b70      	ldr	r3, [pc, #448]	; (404ae8 <cmd_task_commandProcesor+0x29c>)
  404928:	4798      	blx	r3
  40492a:	4603      	mov	r3, r0
  40492c:	4620      	mov	r0, r4
  40492e:	4619      	mov	r1, r3
  404930:	4b6e      	ldr	r3, [pc, #440]	; (404aec <cmd_task_commandProcesor+0x2a0>)
  404932:	4798      	blx	r3
  404934:	e222      	b.n	404d7c <cmd_task_commandProcesor+0x530>
					}
					else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  404936:	7c3b      	ldrb	r3, [r7, #16]
  404938:	2b01      	cmp	r3, #1
  40493a:	f040 821f 	bne.w	404d7c <cmd_task_commandProcesor+0x530>
					{
						dat_sendStringToUsb(getTimeString());
  40493e:	4b6a      	ldr	r3, [pc, #424]	; (404ae8 <cmd_task_commandProcesor+0x29c>)
  404940:	4798      	blx	r3
  404942:	4603      	mov	r3, r0
  404944:	4618      	mov	r0, r3
  404946:	4b6a      	ldr	r3, [pc, #424]	; (404af0 <cmd_task_commandProcesor+0x2a4>)
  404948:	4798      	blx	r3
  40494a:	e217      	b.n	404d7c <cmd_task_commandProcesor+0x530>
					}
				}
				else if(strncmp(packet.packetData,"getRawCharge",12)==0)
  40494c:	f107 0310 	add.w	r3, r7, #16
  404950:	3301      	adds	r3, #1
  404952:	4618      	mov	r0, r3
  404954:	4967      	ldr	r1, [pc, #412]	; (404af4 <cmd_task_commandProcesor+0x2a8>)
  404956:	220c      	movs	r2, #12
  404958:	4b5d      	ldr	r3, [pc, #372]	; (404ad0 <cmd_task_commandProcesor+0x284>)
  40495a:	4798      	blx	r3
  40495c:	4603      	mov	r3, r0
  40495e:	2b00      	cmp	r3, #0
  404960:	d137      	bne.n	4049d2 <cmd_task_commandProcesor+0x186>
				{
					//handle the set time command. 
					status = ltc2941GetCharge(&ltc2941Config, &chargeLevel);	
  404962:	f107 030e 	add.w	r3, r7, #14
  404966:	4864      	ldr	r0, [pc, #400]	; (404af8 <cmd_task_commandProcesor+0x2ac>)
  404968:	4619      	mov	r1, r3
  40496a:	4b64      	ldr	r3, [pc, #400]	; (404afc <cmd_task_commandProcesor+0x2b0>)
  40496c:	4798      	blx	r3
  40496e:	4603      	mov	r3, r0
  404970:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					if (status == STATUS_PASS)
  404974:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
  404978:	2b00      	cmp	r3, #0
  40497a:	d116      	bne.n	4049aa <cmd_task_commandProcesor+0x15e>
					{
						sprintf(tempString,"raw charge Level: %d\r\n",chargeLevel);
  40497c:	89fb      	ldrh	r3, [r7, #14]
  40497e:	4860      	ldr	r0, [pc, #384]	; (404b00 <cmd_task_commandProcesor+0x2b4>)
  404980:	4960      	ldr	r1, [pc, #384]	; (404b04 <cmd_task_commandProcesor+0x2b8>)
  404982:	461a      	mov	r2, r3
  404984:	4b60      	ldr	r3, [pc, #384]	; (404b08 <cmd_task_commandProcesor+0x2bc>)
  404986:	4798      	blx	r3
						if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  404988:	7c3b      	ldrb	r3, [r7, #16]
  40498a:	2b00      	cmp	r3, #0
  40498c:	d106      	bne.n	40499c <cmd_task_commandProcesor+0x150>
						{
							drv_uart_putString(dataRouterConfiguration.daughterBoard, tempString);
  40498e:	4b55      	ldr	r3, [pc, #340]	; (404ae4 <cmd_task_commandProcesor+0x298>)
  404990:	685b      	ldr	r3, [r3, #4]
  404992:	4618      	mov	r0, r3
  404994:	495a      	ldr	r1, [pc, #360]	; (404b00 <cmd_task_commandProcesor+0x2b4>)
  404996:	4b55      	ldr	r3, [pc, #340]	; (404aec <cmd_task_commandProcesor+0x2a0>)
  404998:	4798      	blx	r3
  40499a:	e016      	b.n	4049ca <cmd_task_commandProcesor+0x17e>
						}
						else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  40499c:	7c3b      	ldrb	r3, [r7, #16]
  40499e:	2b01      	cmp	r3, #1
  4049a0:	d113      	bne.n	4049ca <cmd_task_commandProcesor+0x17e>
						{
							dat_sendStringToUsb(tempString);
  4049a2:	4857      	ldr	r0, [pc, #348]	; (404b00 <cmd_task_commandProcesor+0x2b4>)
  4049a4:	4b52      	ldr	r3, [pc, #328]	; (404af0 <cmd_task_commandProcesor+0x2a4>)
  4049a6:	4798      	blx	r3
  4049a8:	e00f      	b.n	4049ca <cmd_task_commandProcesor+0x17e>
						}
					}	
					else
					{
						if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  4049aa:	7c3b      	ldrb	r3, [r7, #16]
  4049ac:	2b00      	cmp	r3, #0
  4049ae:	d106      	bne.n	4049be <cmd_task_commandProcesor+0x172>
						{
							drv_uart_putString(dataRouterConfiguration.daughterBoard, "Failed to read charge\r\n");
  4049b0:	4b4c      	ldr	r3, [pc, #304]	; (404ae4 <cmd_task_commandProcesor+0x298>)
  4049b2:	685b      	ldr	r3, [r3, #4]
  4049b4:	4618      	mov	r0, r3
  4049b6:	4955      	ldr	r1, [pc, #340]	; (404b0c <cmd_task_commandProcesor+0x2c0>)
  4049b8:	4b4c      	ldr	r3, [pc, #304]	; (404aec <cmd_task_commandProcesor+0x2a0>)
  4049ba:	4798      	blx	r3
  4049bc:	e005      	b.n	4049ca <cmd_task_commandProcesor+0x17e>
						}
						else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  4049be:	7c3b      	ldrb	r3, [r7, #16]
  4049c0:	2b01      	cmp	r3, #1
  4049c2:	d102      	bne.n	4049ca <cmd_task_commandProcesor+0x17e>
						{
							dat_sendStringToUsb("Failed to read charge\r\n");
  4049c4:	4851      	ldr	r0, [pc, #324]	; (404b0c <cmd_task_commandProcesor+0x2c0>)
  4049c6:	4b4a      	ldr	r3, [pc, #296]	; (404af0 <cmd_task_commandProcesor+0x2a4>)
  4049c8:	4798      	blx	r3
						}
					}
					//don't forward this message on. 	
					forwardCommand = false; 						
  4049ca:	2300      	movs	r3, #0
  4049cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  4049d0:	e1d4      	b.n	404d7c <cmd_task_commandProcesor+0x530>
				}		
				else if(strncmp(packet.packetData,"getCharge",9)==0)
  4049d2:	f107 0310 	add.w	r3, r7, #16
  4049d6:	3301      	adds	r3, #1
  4049d8:	4618      	mov	r0, r3
  4049da:	494d      	ldr	r1, [pc, #308]	; (404b10 <cmd_task_commandProcesor+0x2c4>)
  4049dc:	2209      	movs	r2, #9
  4049de:	4b3c      	ldr	r3, [pc, #240]	; (404ad0 <cmd_task_commandProcesor+0x284>)
  4049e0:	4798      	blx	r3
  4049e2:	4603      	mov	r3, r0
  4049e4:	2b00      	cmp	r3, #0
  4049e6:	d137      	bne.n	404a58 <cmd_task_commandProcesor+0x20c>
				{
					//handle the set time command. 	
					status = getCalculatedPercentage(&ltc2941Config, &chargePercent);
  4049e8:	f107 0308 	add.w	r3, r7, #8
  4049ec:	4842      	ldr	r0, [pc, #264]	; (404af8 <cmd_task_commandProcesor+0x2ac>)
  4049ee:	4619      	mov	r1, r3
  4049f0:	4b48      	ldr	r3, [pc, #288]	; (404b14 <cmd_task_commandProcesor+0x2c8>)
  4049f2:	4798      	blx	r3
  4049f4:	4603      	mov	r3, r0
  4049f6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					if (status == STATUS_PASS)
  4049fa:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
  4049fe:	2b00      	cmp	r3, #0
  404a00:	d116      	bne.n	404a30 <cmd_task_commandProcesor+0x1e4>
					{
						sprintf(tempString,"charge Level: %d\r\n",chargePercent);
  404a02:	68bb      	ldr	r3, [r7, #8]
  404a04:	483e      	ldr	r0, [pc, #248]	; (404b00 <cmd_task_commandProcesor+0x2b4>)
  404a06:	4944      	ldr	r1, [pc, #272]	; (404b18 <cmd_task_commandProcesor+0x2cc>)
  404a08:	461a      	mov	r2, r3
  404a0a:	4b3f      	ldr	r3, [pc, #252]	; (404b08 <cmd_task_commandProcesor+0x2bc>)
  404a0c:	4798      	blx	r3
						if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  404a0e:	7c3b      	ldrb	r3, [r7, #16]
  404a10:	2b00      	cmp	r3, #0
  404a12:	d106      	bne.n	404a22 <cmd_task_commandProcesor+0x1d6>
						{
							drv_uart_putString(dataRouterConfiguration.daughterBoard, tempString);
  404a14:	4b33      	ldr	r3, [pc, #204]	; (404ae4 <cmd_task_commandProcesor+0x298>)
  404a16:	685b      	ldr	r3, [r3, #4]
  404a18:	4618      	mov	r0, r3
  404a1a:	4939      	ldr	r1, [pc, #228]	; (404b00 <cmd_task_commandProcesor+0x2b4>)
  404a1c:	4b33      	ldr	r3, [pc, #204]	; (404aec <cmd_task_commandProcesor+0x2a0>)
  404a1e:	4798      	blx	r3
  404a20:	e016      	b.n	404a50 <cmd_task_commandProcesor+0x204>
						}
						else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  404a22:	7c3b      	ldrb	r3, [r7, #16]
  404a24:	2b01      	cmp	r3, #1
  404a26:	d113      	bne.n	404a50 <cmd_task_commandProcesor+0x204>
						{
							dat_sendStringToUsb(tempString);
  404a28:	4835      	ldr	r0, [pc, #212]	; (404b00 <cmd_task_commandProcesor+0x2b4>)
  404a2a:	4b31      	ldr	r3, [pc, #196]	; (404af0 <cmd_task_commandProcesor+0x2a4>)
  404a2c:	4798      	blx	r3
  404a2e:	e00f      	b.n	404a50 <cmd_task_commandProcesor+0x204>
						}
					}	
					else
					{
						if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  404a30:	7c3b      	ldrb	r3, [r7, #16]
  404a32:	2b00      	cmp	r3, #0
  404a34:	d106      	bne.n	404a44 <cmd_task_commandProcesor+0x1f8>
						{
							drv_uart_putString(dataRouterConfiguration.daughterBoard, "Failed to read battery percentage\r\n");
  404a36:	4b2b      	ldr	r3, [pc, #172]	; (404ae4 <cmd_task_commandProcesor+0x298>)
  404a38:	685b      	ldr	r3, [r3, #4]
  404a3a:	4618      	mov	r0, r3
  404a3c:	4937      	ldr	r1, [pc, #220]	; (404b1c <cmd_task_commandProcesor+0x2d0>)
  404a3e:	4b2b      	ldr	r3, [pc, #172]	; (404aec <cmd_task_commandProcesor+0x2a0>)
  404a40:	4798      	blx	r3
  404a42:	e005      	b.n	404a50 <cmd_task_commandProcesor+0x204>
						}
						else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  404a44:	7c3b      	ldrb	r3, [r7, #16]
  404a46:	2b01      	cmp	r3, #1
  404a48:	d102      	bne.n	404a50 <cmd_task_commandProcesor+0x204>
						{
							dat_sendStringToUsb("Failed to read battery percentage\r\n");
  404a4a:	4834      	ldr	r0, [pc, #208]	; (404b1c <cmd_task_commandProcesor+0x2d0>)
  404a4c:	4b28      	ldr	r3, [pc, #160]	; (404af0 <cmd_task_commandProcesor+0x2a4>)
  404a4e:	4798      	blx	r3
						}
					}
					//don't forward this message on. 	
					forwardCommand = false; 						
  404a50:	2300      	movs	r3, #0
  404a52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  404a56:	e191      	b.n	404d7c <cmd_task_commandProcesor+0x530>
				}		
				else if(strncmp(packet.packetData,"setChargeLow",12)==0)
  404a58:	f107 0310 	add.w	r3, r7, #16
  404a5c:	3301      	adds	r3, #1
  404a5e:	4618      	mov	r0, r3
  404a60:	492f      	ldr	r1, [pc, #188]	; (404b20 <cmd_task_commandProcesor+0x2d4>)
  404a62:	220c      	movs	r2, #12
  404a64:	4b1a      	ldr	r3, [pc, #104]	; (404ad0 <cmd_task_commandProcesor+0x284>)
  404a66:	4798      	blx	r3
  404a68:	4603      	mov	r3, r0
  404a6a:	2b00      	cmp	r3, #0
  404a6c:	d10d      	bne.n	404a8a <cmd_task_commandProcesor+0x23e>
				{					
					chargeRegValue = getRegValueForPercent(14);					
  404a6e:	200e      	movs	r0, #14
  404a70:	4b2c      	ldr	r3, [pc, #176]	; (404b24 <cmd_task_commandProcesor+0x2d8>)
  404a72:	4798      	blx	r3
  404a74:	67b8      	str	r0, [r7, #120]	; 0x78
					ltc2941SetCharge(&ltc2941Config, chargeRegValue);
  404a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  404a78:	b29b      	uxth	r3, r3
  404a7a:	481f      	ldr	r0, [pc, #124]	; (404af8 <cmd_task_commandProcesor+0x2ac>)
  404a7c:	4619      	mov	r1, r3
  404a7e:	4b2a      	ldr	r3, [pc, #168]	; (404b28 <cmd_task_commandProcesor+0x2dc>)
  404a80:	4798      	blx	r3
					forwardCommand = false; 	 
  404a82:	2300      	movs	r3, #0
  404a84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  404a88:	e178      	b.n	404d7c <cmd_task_commandProcesor+0x530>
				}						
				else if(strncmp(packet.packetData,"setChargeCritical",17)==0)
  404a8a:	f107 0310 	add.w	r3, r7, #16
  404a8e:	3301      	adds	r3, #1
  404a90:	4618      	mov	r0, r3
  404a92:	4926      	ldr	r1, [pc, #152]	; (404b2c <cmd_task_commandProcesor+0x2e0>)
  404a94:	2211      	movs	r2, #17
  404a96:	4b0e      	ldr	r3, [pc, #56]	; (404ad0 <cmd_task_commandProcesor+0x284>)
  404a98:	4798      	blx	r3
  404a9a:	4603      	mov	r3, r0
  404a9c:	2b00      	cmp	r3, #0
  404a9e:	d147      	bne.n	404b30 <cmd_task_commandProcesor+0x2e4>
				{
					chargeRegValue = getRegValueForPercent(7);					
  404aa0:	2007      	movs	r0, #7
  404aa2:	4b20      	ldr	r3, [pc, #128]	; (404b24 <cmd_task_commandProcesor+0x2d8>)
  404aa4:	4798      	blx	r3
  404aa6:	67b8      	str	r0, [r7, #120]	; 0x78
					ltc2941SetCharge(&ltc2941Config,chargeRegValue);
  404aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  404aaa:	b29b      	uxth	r3, r3
  404aac:	4812      	ldr	r0, [pc, #72]	; (404af8 <cmd_task_commandProcesor+0x2ac>)
  404aae:	4619      	mov	r1, r3
  404ab0:	4b1d      	ldr	r3, [pc, #116]	; (404b28 <cmd_task_commandProcesor+0x2dc>)
  404ab2:	4798      	blx	r3
					forwardCommand = false; 	 
  404ab4:	2300      	movs	r3, #0
  404ab6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  404aba:	e15f      	b.n	404d7c <cmd_task_commandProcesor+0x530>
  404abc:	00408919 	.word	0x00408919
  404ac0:	20000e08 	.word	0x20000e08
  404ac4:	00404e7d 	.word	0x00404e7d
  404ac8:	00408bdd 	.word	0x00408bdd
  404acc:	00415d78 	.word	0x00415d78
  404ad0:	0040cf31 	.word	0x0040cf31
  404ad4:	0040ced1 	.word	0x0040ced1
  404ad8:	00404f69 	.word	0x00404f69
  404adc:	00415d80 	.word	0x00415d80
  404ae0:	00404ea5 	.word	0x00404ea5
  404ae4:	200002d8 	.word	0x200002d8
  404ae8:	00404e39 	.word	0x00404e39
  404aec:	00407e15 	.word	0x00407e15
  404af0:	00405271 	.word	0x00405271
  404af4:	00415d8c 	.word	0x00415d8c
  404af8:	200001d4 	.word	0x200001d4
  404afc:	00405b91 	.word	0x00405b91
  404b00:	20000e0c 	.word	0x20000e0c
  404b04:	00415d9c 	.word	0x00415d9c
  404b08:	0040cda5 	.word	0x0040cda5
  404b0c:	00415db4 	.word	0x00415db4
  404b10:	00415dcc 	.word	0x00415dcc
  404b14:	00405be1 	.word	0x00405be1
  404b18:	00415dd8 	.word	0x00415dd8
  404b1c:	00415dec 	.word	0x00415dec
  404b20:	00415e10 	.word	0x00415e10
  404b24:	00405c39 	.word	0x00405c39
  404b28:	00405b39 	.word	0x00405b39
  404b2c:	00415e20 	.word	0x00415e20
				}										
				else if(strncmp(packet.packetData,"setChargeFault",14)==0)
  404b30:	f107 0310 	add.w	r3, r7, #16
  404b34:	3301      	adds	r3, #1
  404b36:	4618      	mov	r0, r3
  404b38:	4997      	ldr	r1, [pc, #604]	; (404d98 <cmd_task_commandProcesor+0x54c>)
  404b3a:	220e      	movs	r2, #14
  404b3c:	4b97      	ldr	r3, [pc, #604]	; (404d9c <cmd_task_commandProcesor+0x550>)
  404b3e:	4798      	blx	r3
  404b40:	4603      	mov	r3, r0
  404b42:	2b00      	cmp	r3, #0
  404b44:	d10d      	bne.n	404b62 <cmd_task_commandProcesor+0x316>
				{
					chargeRegValue = getRegValueForPercent(4);					
  404b46:	2004      	movs	r0, #4
  404b48:	4b95      	ldr	r3, [pc, #596]	; (404da0 <cmd_task_commandProcesor+0x554>)
  404b4a:	4798      	blx	r3
  404b4c:	67b8      	str	r0, [r7, #120]	; 0x78
					ltc2941SetCharge(&ltc2941Config, chargeRegValue);
  404b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  404b50:	b29b      	uxth	r3, r3
  404b52:	4894      	ldr	r0, [pc, #592]	; (404da4 <cmd_task_commandProcesor+0x558>)
  404b54:	4619      	mov	r1, r3
  404b56:	4b94      	ldr	r3, [pc, #592]	; (404da8 <cmd_task_commandProcesor+0x55c>)
  404b58:	4798      	blx	r3
					forwardCommand = false; 	 
  404b5a:	2300      	movs	r3, #0
  404b5c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  404b60:	e10c      	b.n	404d7c <cmd_task_commandProcesor+0x530>
				}
				else if(strncmp(packet.packetData,"setChargeFull",13)==0)
  404b62:	f107 0310 	add.w	r3, r7, #16
  404b66:	3301      	adds	r3, #1
  404b68:	4618      	mov	r0, r3
  404b6a:	4990      	ldr	r1, [pc, #576]	; (404dac <cmd_task_commandProcesor+0x560>)
  404b6c:	220d      	movs	r2, #13
  404b6e:	4b8b      	ldr	r3, [pc, #556]	; (404d9c <cmd_task_commandProcesor+0x550>)
  404b70:	4798      	blx	r3
  404b72:	4603      	mov	r3, r0
  404b74:	2b00      	cmp	r3, #0
  404b76:	d108      	bne.n	404b8a <cmd_task_commandProcesor+0x33e>
				{										
					ltc2941SetCharge(&ltc2941Config, 0xFFFF);
  404b78:	488a      	ldr	r0, [pc, #552]	; (404da4 <cmd_task_commandProcesor+0x558>)
  404b7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  404b7e:	4b8a      	ldr	r3, [pc, #552]	; (404da8 <cmd_task_commandProcesor+0x55c>)
  404b80:	4798      	blx	r3
					forwardCommand = false; 	 
  404b82:	2300      	movs	r3, #0
  404b84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  404b88:	e0f8      	b.n	404d7c <cmd_task_commandProcesor+0x530>
				}									
				else if(strncmp(packet.packetData,"getChrgStatus",13)==0)
  404b8a:	f107 0310 	add.w	r3, r7, #16
  404b8e:	3301      	adds	r3, #1
  404b90:	4618      	mov	r0, r3
  404b92:	4987      	ldr	r1, [pc, #540]	; (404db0 <cmd_task_commandProcesor+0x564>)
  404b94:	220d      	movs	r2, #13
  404b96:	4b81      	ldr	r3, [pc, #516]	; (404d9c <cmd_task_commandProcesor+0x550>)
  404b98:	4798      	blx	r3
  404b9a:	4603      	mov	r3, r0
  404b9c:	2b00      	cmp	r3, #0
  404b9e:	d11c      	bne.n	404bda <cmd_task_commandProcesor+0x38e>
				{
					//handle the set time command. 
					sprintf(tempString,"charger status: %x\r\n",ltc2941GetStatus(&ltc2941Config));
  404ba0:	4880      	ldr	r0, [pc, #512]	; (404da4 <cmd_task_commandProcesor+0x558>)
  404ba2:	4b84      	ldr	r3, [pc, #528]	; (404db4 <cmd_task_commandProcesor+0x568>)
  404ba4:	4798      	blx	r3
  404ba6:	4603      	mov	r3, r0
  404ba8:	4883      	ldr	r0, [pc, #524]	; (404db8 <cmd_task_commandProcesor+0x56c>)
  404baa:	4984      	ldr	r1, [pc, #528]	; (404dbc <cmd_task_commandProcesor+0x570>)
  404bac:	461a      	mov	r2, r3
  404bae:	4b84      	ldr	r3, [pc, #528]	; (404dc0 <cmd_task_commandProcesor+0x574>)
  404bb0:	4798      	blx	r3
					if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  404bb2:	7c3b      	ldrb	r3, [r7, #16]
  404bb4:	2b00      	cmp	r3, #0
  404bb6:	d106      	bne.n	404bc6 <cmd_task_commandProcesor+0x37a>
					{
						drv_uart_putString(dataRouterConfiguration.daughterBoard, tempString);
  404bb8:	4b82      	ldr	r3, [pc, #520]	; (404dc4 <cmd_task_commandProcesor+0x578>)
  404bba:	685b      	ldr	r3, [r3, #4]
  404bbc:	4618      	mov	r0, r3
  404bbe:	497e      	ldr	r1, [pc, #504]	; (404db8 <cmd_task_commandProcesor+0x56c>)
  404bc0:	4b81      	ldr	r3, [pc, #516]	; (404dc8 <cmd_task_commandProcesor+0x57c>)
  404bc2:	4798      	blx	r3
  404bc4:	e005      	b.n	404bd2 <cmd_task_commandProcesor+0x386>
					}
					else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  404bc6:	7c3b      	ldrb	r3, [r7, #16]
  404bc8:	2b01      	cmp	r3, #1
  404bca:	d102      	bne.n	404bd2 <cmd_task_commandProcesor+0x386>
					{
						dat_sendStringToUsb(tempString);
  404bcc:	487a      	ldr	r0, [pc, #488]	; (404db8 <cmd_task_commandProcesor+0x56c>)
  404bce:	4b7f      	ldr	r3, [pc, #508]	; (404dcc <cmd_task_commandProcesor+0x580>)
  404bd0:	4798      	blx	r3
					}						
					//don't forward this message on. 						
					forwardCommand = false; 						
  404bd2:	2300      	movs	r3, #0
  404bd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  404bd8:	e0d0      	b.n	404d7c <cmd_task_commandProcesor+0x530>
				}	
				else if (strncmp(packet.packetData,"resetPb",7)==0)
  404bda:	f107 0310 	add.w	r3, r7, #16
  404bde:	3301      	adds	r3, #1
  404be0:	4618      	mov	r0, r3
  404be2:	497b      	ldr	r1, [pc, #492]	; (404dd0 <cmd_task_commandProcesor+0x584>)
  404be4:	2207      	movs	r2, #7
  404be6:	4b6d      	ldr	r3, [pc, #436]	; (404d9c <cmd_task_commandProcesor+0x550>)
  404be8:	4798      	blx	r3
  404bea:	4603      	mov	r3, r0
  404bec:	2b00      	cmp	r3, #0
  404bee:	d103      	bne.n	404bf8 <cmd_task_commandProcesor+0x3ac>
				{
					rstc_start_software_reset(RSTC);											
  404bf0:	4878      	ldr	r0, [pc, #480]	; (404dd4 <cmd_task_commandProcesor+0x588>)
  404bf2:	4b79      	ldr	r3, [pc, #484]	; (404dd8 <cmd_task_commandProcesor+0x58c>)
  404bf4:	4798      	blx	r3
  404bf6:	e0c1      	b.n	404d7c <cmd_task_commandProcesor+0x530>
				}	
				else if (strncmp(packet.packetData,"fastChrg1",9)==0)
  404bf8:	f107 0310 	add.w	r3, r7, #16
  404bfc:	3301      	adds	r3, #1
  404bfe:	4618      	mov	r0, r3
  404c00:	4976      	ldr	r1, [pc, #472]	; (404ddc <cmd_task_commandProcesor+0x590>)
  404c02:	2209      	movs	r2, #9
  404c04:	4b65      	ldr	r3, [pc, #404]	; (404d9c <cmd_task_commandProcesor+0x550>)
  404c06:	4798      	blx	r3
  404c08:	4603      	mov	r3, r0
  404c0a:	2b00      	cmp	r3, #0
  404c0c:	d10a      	bne.n	404c24 <cmd_task_commandProcesor+0x3d8>
				{
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:Fast Charge On\r\n");
  404c0e:	4874      	ldr	r0, [pc, #464]	; (404de0 <cmd_task_commandProcesor+0x594>)
  404c10:	4b74      	ldr	r3, [pc, #464]	; (404de4 <cmd_task_commandProcesor+0x598>)
  404c12:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_CHRG_SEL, DRV_GPIO_PIN_STATE_HIGH);	
  404c14:	2005      	movs	r0, #5
  404c16:	2101      	movs	r1, #1
  404c18:	4b73      	ldr	r3, [pc, #460]	; (404de8 <cmd_task_commandProcesor+0x59c>)
  404c1a:	4798      	blx	r3
					forwardCommand = false; 
  404c1c:	2300      	movs	r3, #0
  404c1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  404c22:	e0ab      	b.n	404d7c <cmd_task_commandProcesor+0x530>
				}
				else if (strncmp(packet.packetData,"fastChrg0",9)==0)
  404c24:	f107 0310 	add.w	r3, r7, #16
  404c28:	3301      	adds	r3, #1
  404c2a:	4618      	mov	r0, r3
  404c2c:	496f      	ldr	r1, [pc, #444]	; (404dec <cmd_task_commandProcesor+0x5a0>)
  404c2e:	2209      	movs	r2, #9
  404c30:	4b5a      	ldr	r3, [pc, #360]	; (404d9c <cmd_task_commandProcesor+0x550>)
  404c32:	4798      	blx	r3
  404c34:	4603      	mov	r3, r0
  404c36:	2b00      	cmp	r3, #0
  404c38:	d10a      	bne.n	404c50 <cmd_task_commandProcesor+0x404>
				{
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:Fast Charge Off\r\n");
  404c3a:	486d      	ldr	r0, [pc, #436]	; (404df0 <cmd_task_commandProcesor+0x5a4>)
  404c3c:	4b69      	ldr	r3, [pc, #420]	; (404de4 <cmd_task_commandProcesor+0x598>)
  404c3e:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_CHRG_SEL, DRV_GPIO_PIN_STATE_LOW);
  404c40:	2005      	movs	r0, #5
  404c42:	2100      	movs	r1, #0
  404c44:	4b68      	ldr	r3, [pc, #416]	; (404de8 <cmd_task_commandProcesor+0x59c>)
  404c46:	4798      	blx	r3
					forwardCommand = false; 	
  404c48:	2300      	movs	r3, #0
  404c4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  404c4e:	e095      	b.n	404d7c <cmd_task_commandProcesor+0x530>
				}
				else if (strncmp(packet.packetData,"jacksEn1",9)==0)
  404c50:	f107 0310 	add.w	r3, r7, #16
  404c54:	3301      	adds	r3, #1
  404c56:	4618      	mov	r0, r3
  404c58:	4966      	ldr	r1, [pc, #408]	; (404df4 <cmd_task_commandProcesor+0x5a8>)
  404c5a:	2209      	movs	r2, #9
  404c5c:	4b4f      	ldr	r3, [pc, #316]	; (404d9c <cmd_task_commandProcesor+0x550>)
  404c5e:	4798      	blx	r3
  404c60:	4603      	mov	r3, r0
  404c62:	2b00      	cmp	r3, #0
  404c64:	d10e      	bne.n	404c84 <cmd_task_commandProcesor+0x438>
				{
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:Jacks Enabled\r\n");
  404c66:	4864      	ldr	r0, [pc, #400]	; (404df8 <cmd_task_commandProcesor+0x5ac>)
  404c68:	4b5e      	ldr	r3, [pc, #376]	; (404de4 <cmd_task_commandProcesor+0x598>)
  404c6a:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
  404c6c:	2001      	movs	r0, #1
  404c6e:	2100      	movs	r1, #0
  404c70:	4b5d      	ldr	r3, [pc, #372]	; (404de8 <cmd_task_commandProcesor+0x59c>)
  404c72:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);
  404c74:	2000      	movs	r0, #0
  404c76:	2100      	movs	r1, #0
  404c78:	4b5b      	ldr	r3, [pc, #364]	; (404de8 <cmd_task_commandProcesor+0x59c>)
  404c7a:	4798      	blx	r3
					forwardCommand = false; 	
  404c7c:	2300      	movs	r3, #0
  404c7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  404c82:	e07b      	b.n	404d7c <cmd_task_commandProcesor+0x530>
				}
				else if (strncmp(packet.packetData,"jacksEn0",9)==0)
  404c84:	f107 0310 	add.w	r3, r7, #16
  404c88:	3301      	adds	r3, #1
  404c8a:	4618      	mov	r0, r3
  404c8c:	495b      	ldr	r1, [pc, #364]	; (404dfc <cmd_task_commandProcesor+0x5b0>)
  404c8e:	2209      	movs	r2, #9
  404c90:	4b42      	ldr	r3, [pc, #264]	; (404d9c <cmd_task_commandProcesor+0x550>)
  404c92:	4798      	blx	r3
  404c94:	4603      	mov	r3, r0
  404c96:	2b00      	cmp	r3, #0
  404c98:	d10e      	bne.n	404cb8 <cmd_task_commandProcesor+0x46c>
				{
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:Jacks Disabled\r\n");
  404c9a:	4859      	ldr	r0, [pc, #356]	; (404e00 <cmd_task_commandProcesor+0x5b4>)
  404c9c:	4b51      	ldr	r3, [pc, #324]	; (404de4 <cmd_task_commandProcesor+0x598>)
  404c9e:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
  404ca0:	2001      	movs	r0, #1
  404ca2:	2101      	movs	r1, #1
  404ca4:	4b50      	ldr	r3, [pc, #320]	; (404de8 <cmd_task_commandProcesor+0x59c>)
  404ca6:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
  404ca8:	2000      	movs	r0, #0
  404caa:	2101      	movs	r1, #1
  404cac:	4b4e      	ldr	r3, [pc, #312]	; (404de8 <cmd_task_commandProcesor+0x59c>)
  404cae:	4798      	blx	r3
					forwardCommand = false; 	
  404cb0:	2300      	movs	r3, #0
  404cb2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  404cb6:	e061      	b.n	404d7c <cmd_task_commandProcesor+0x530>
				}				
				else if (strncmp(packet.packetData,"crashSystem",11)==0)
  404cb8:	f107 0310 	add.w	r3, r7, #16
  404cbc:	3301      	adds	r3, #1
  404cbe:	4618      	mov	r0, r3
  404cc0:	4950      	ldr	r1, [pc, #320]	; (404e04 <cmd_task_commandProcesor+0x5b8>)
  404cc2:	220b      	movs	r2, #11
  404cc4:	4b35      	ldr	r3, [pc, #212]	; (404d9c <cmd_task_commandProcesor+0x550>)
  404cc6:	4798      	blx	r3
  404cc8:	4603      	mov	r3, r0
  404cca:	2b00      	cmp	r3, #0
  404ccc:	d109      	bne.n	404ce2 <cmd_task_commandProcesor+0x496>
					//sprintf(1234213,"crashity crash crash!%s\r\n",NULL);
					//assert(false);
					//*((unsigned int*)0) = 0xDEAD;
					//uint32_t* deadPointer = malloc(10000000000);
					//strncpy(deadPointer+4, deadPointer+6, 10000);
					memcpy(0x20000000, packet.packetData, 1000000);
  404cce:	f107 0310 	add.w	r3, r7, #16
  404cd2:	3301      	adds	r3, #1
  404cd4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  404cd8:	4619      	mov	r1, r3
  404cda:	4a4b      	ldr	r2, [pc, #300]	; (404e08 <cmd_task_commandProcesor+0x5bc>)
  404cdc:	4b4b      	ldr	r3, [pc, #300]	; (404e0c <cmd_task_commandProcesor+0x5c0>)
  404cde:	4798      	blx	r3
  404ce0:	e04c      	b.n	404d7c <cmd_task_commandProcesor+0x530>
										
				}
				else if (strncmp(packet.packetData,"enterBootloader",11)==0)
  404ce2:	f107 0310 	add.w	r3, r7, #16
  404ce6:	3301      	adds	r3, #1
  404ce8:	4618      	mov	r0, r3
  404cea:	4949      	ldr	r1, [pc, #292]	; (404e10 <cmd_task_commandProcesor+0x5c4>)
  404cec:	220b      	movs	r2, #11
  404cee:	4b2b      	ldr	r3, [pc, #172]	; (404d9c <cmd_task_commandProcesor+0x550>)
  404cf0:	4798      	blx	r3
  404cf2:	4603      	mov	r3, r0
  404cf4:	2b00      	cmp	r3, #0
  404cf6:	d108      	bne.n	404d0a <cmd_task_commandProcesor+0x4be>
				{
					//clear GPNVM bit 1 to get the processor to boot from the ROM
					efc_perform_command(EFC0,EFC_FCMD_CGPB,1);
  404cf8:	4846      	ldr	r0, [pc, #280]	; (404e14 <cmd_task_commandProcesor+0x5c8>)
  404cfa:	210c      	movs	r1, #12
  404cfc:	2201      	movs	r2, #1
  404cfe:	4b46      	ldr	r3, [pc, #280]	; (404e18 <cmd_task_commandProcesor+0x5cc>)
  404d00:	4798      	blx	r3
					//restart the processor, so we enter the ROM bootloader. 
					rstc_start_software_reset(RSTC);								
  404d02:	4834      	ldr	r0, [pc, #208]	; (404dd4 <cmd_task_commandProcesor+0x588>)
  404d04:	4b34      	ldr	r3, [pc, #208]	; (404dd8 <cmd_task_commandProcesor+0x58c>)
  404d06:	4798      	blx	r3
  404d08:	e038      	b.n	404d7c <cmd_task_commandProcesor+0x530>
				}
				else if(strncmp(packet.packetData,"pbVersion",9)==0)
  404d0a:	f107 0310 	add.w	r3, r7, #16
  404d0e:	3301      	adds	r3, #1
  404d10:	4618      	mov	r0, r3
  404d12:	4942      	ldr	r1, [pc, #264]	; (404e1c <cmd_task_commandProcesor+0x5d0>)
  404d14:	2209      	movs	r2, #9
  404d16:	4b21      	ldr	r3, [pc, #132]	; (404d9c <cmd_task_commandProcesor+0x550>)
  404d18:	4798      	blx	r3
  404d1a:	4603      	mov	r3, r0
  404d1c:	2b00      	cmp	r3, #0
  404d1e:	d12d      	bne.n	404d7c <cmd_task_commandProcesor+0x530>
				{
					sprintf(tempString," PB VERSION %s\r\n", VERSION);
  404d20:	4825      	ldr	r0, [pc, #148]	; (404db8 <cmd_task_commandProcesor+0x56c>)
  404d22:	493f      	ldr	r1, [pc, #252]	; (404e20 <cmd_task_commandProcesor+0x5d4>)
  404d24:	4a3f      	ldr	r2, [pc, #252]	; (404e24 <cmd_task_commandProcesor+0x5d8>)
  404d26:	4b26      	ldr	r3, [pc, #152]	; (404dc0 <cmd_task_commandProcesor+0x574>)
  404d28:	4798      	blx	r3
					if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  404d2a:	7c3b      	ldrb	r3, [r7, #16]
  404d2c:	2b00      	cmp	r3, #0
  404d2e:	d106      	bne.n	404d3e <cmd_task_commandProcesor+0x4f2>
					{
						drv_uart_putString(dataRouterConfiguration.daughterBoard, tempString);
  404d30:	4b24      	ldr	r3, [pc, #144]	; (404dc4 <cmd_task_commandProcesor+0x578>)
  404d32:	685b      	ldr	r3, [r3, #4]
  404d34:	4618      	mov	r0, r3
  404d36:	4920      	ldr	r1, [pc, #128]	; (404db8 <cmd_task_commandProcesor+0x56c>)
  404d38:	4b23      	ldr	r3, [pc, #140]	; (404dc8 <cmd_task_commandProcesor+0x57c>)
  404d3a:	4798      	blx	r3
  404d3c:	e005      	b.n	404d4a <cmd_task_commandProcesor+0x4fe>
					}
					else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  404d3e:	7c3b      	ldrb	r3, [r7, #16]
  404d40:	2b01      	cmp	r3, #1
  404d42:	d102      	bne.n	404d4a <cmd_task_commandProcesor+0x4fe>
					{
						dat_sendStringToUsb(tempString);
  404d44:	481c      	ldr	r0, [pc, #112]	; (404db8 <cmd_task_commandProcesor+0x56c>)
  404d46:	4b21      	ldr	r3, [pc, #132]	; (404dcc <cmd_task_commandProcesor+0x580>)
  404d48:	4798      	blx	r3
					}
					sprintf(tempString,"BUILD DATE: %s %s\r\n", __DATE__,__TIME__);
  404d4a:	481b      	ldr	r0, [pc, #108]	; (404db8 <cmd_task_commandProcesor+0x56c>)
  404d4c:	4936      	ldr	r1, [pc, #216]	; (404e28 <cmd_task_commandProcesor+0x5dc>)
  404d4e:	4a37      	ldr	r2, [pc, #220]	; (404e2c <cmd_task_commandProcesor+0x5e0>)
  404d50:	4b37      	ldr	r3, [pc, #220]	; (404e30 <cmd_task_commandProcesor+0x5e4>)
  404d52:	4c1b      	ldr	r4, [pc, #108]	; (404dc0 <cmd_task_commandProcesor+0x574>)
  404d54:	47a0      	blx	r4
					if(packet.packetSource == CMD_COMMAND_SOURCE_DAUGHTER)
  404d56:	7c3b      	ldrb	r3, [r7, #16]
  404d58:	2b00      	cmp	r3, #0
  404d5a:	d106      	bne.n	404d6a <cmd_task_commandProcesor+0x51e>
					{
						drv_uart_putString(dataRouterConfiguration.daughterBoard, tempString);
  404d5c:	4b19      	ldr	r3, [pc, #100]	; (404dc4 <cmd_task_commandProcesor+0x578>)
  404d5e:	685b      	ldr	r3, [r3, #4]
  404d60:	4618      	mov	r0, r3
  404d62:	4915      	ldr	r1, [pc, #84]	; (404db8 <cmd_task_commandProcesor+0x56c>)
  404d64:	4b18      	ldr	r3, [pc, #96]	; (404dc8 <cmd_task_commandProcesor+0x57c>)
  404d66:	4798      	blx	r3
  404d68:	e005      	b.n	404d76 <cmd_task_commandProcesor+0x52a>
					}
					else if(packet.packetSource == CMD_COMMAND_SOURCE_USB)
  404d6a:	7c3b      	ldrb	r3, [r7, #16]
  404d6c:	2b01      	cmp	r3, #1
  404d6e:	d102      	bne.n	404d76 <cmd_task_commandProcesor+0x52a>
					{
						dat_sendStringToUsb(tempString);
  404d70:	4811      	ldr	r0, [pc, #68]	; (404db8 <cmd_task_commandProcesor+0x56c>)
  404d72:	4b16      	ldr	r3, [pc, #88]	; (404dcc <cmd_task_commandProcesor+0x580>)
  404d74:	4798      	blx	r3
					}
					forwardCommand = false; 
  404d76:	2300      	movs	r3, #0
  404d78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}				
				if(forwardCommand == true)
  404d7c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  404d80:	2b00      	cmp	r3, #0
  404d82:	d005      	beq.n	404d90 <cmd_task_commandProcesor+0x544>
				{
					//forward the command to the data board. 
					dat_sendPacketToDataBoard(&packet); 	
  404d84:	f107 0310 	add.w	r3, r7, #16
  404d88:	4618      	mov	r0, r3
  404d8a:	4b2a      	ldr	r3, [pc, #168]	; (404e34 <cmd_task_commandProcesor+0x5e8>)
  404d8c:	4798      	blx	r3
				}				
			}
		}
	}
  404d8e:	e57f      	b.n	404890 <cmd_task_commandProcesor+0x44>
  404d90:	e57e      	b.n	404890 <cmd_task_commandProcesor+0x44>
		
}
  404d92:	3784      	adds	r7, #132	; 0x84
  404d94:	46bd      	mov	sp, r7
  404d96:	bd90      	pop	{r4, r7, pc}
  404d98:	00415e34 	.word	0x00415e34
  404d9c:	0040cf31 	.word	0x0040cf31
  404da0:	00405c39 	.word	0x00405c39
  404da4:	200001d4 	.word	0x200001d4
  404da8:	00405b39 	.word	0x00405b39
  404dac:	00415e44 	.word	0x00415e44
  404db0:	00415e54 	.word	0x00415e54
  404db4:	00405c8d 	.word	0x00405c8d
  404db8:	20000e0c 	.word	0x20000e0c
  404dbc:	00415e64 	.word	0x00415e64
  404dc0:	0040cda5 	.word	0x0040cda5
  404dc4:	200002d8 	.word	0x200002d8
  404dc8:	00407e15 	.word	0x00407e15
  404dcc:	00405271 	.word	0x00405271
  404dd0:	00415e7c 	.word	0x00415e7c
  404dd4:	400e1400 	.word	0x400e1400
  404dd8:	0040a9c1 	.word	0x0040a9c1
  404ddc:	00415e84 	.word	0x00415e84
  404de0:	00415e90 	.word	0x00415e90
  404de4:	00405215 	.word	0x00405215
  404de8:	00405559 	.word	0x00405559
  404dec:	00415eac 	.word	0x00415eac
  404df0:	00415eb8 	.word	0x00415eb8
  404df4:	00415ed4 	.word	0x00415ed4
  404df8:	00415ee0 	.word	0x00415ee0
  404dfc:	00415efc 	.word	0x00415efc
  404e00:	00415f08 	.word	0x00415f08
  404e04:	00415f24 	.word	0x00415f24
  404e08:	000f4240 	.word	0x000f4240
  404e0c:	0040ca61 	.word	0x0040ca61
  404e10:	00415f30 	.word	0x00415f30
  404e14:	400e0a00 	.word	0x400e0a00
  404e18:	00401d61 	.word	0x00401d61
  404e1c:	00415f40 	.word	0x00415f40
  404e20:	00415f4c 	.word	0x00415f4c
  404e24:	00415f60 	.word	0x00415f60
  404e28:	00415f68 	.word	0x00415f68
  404e2c:	00415f7c 	.word	0x00415f7c
  404e30:	00415f88 	.word	0x00415f88
  404e34:	0040523d 	.word	0x0040523d

00404e38 <getTimeString>:
char timeString[100] = {0};
static char* getTimeString()
{
  404e38:	b590      	push	{r4, r7, lr}
  404e3a:	b087      	sub	sp, #28
  404e3c:	af02      	add	r7, sp, #8
	uint32_t hour, minute, second;
	rtc_get_time(RTC,&hour,&minute,&second);
  404e3e:	f107 010c 	add.w	r1, r7, #12
  404e42:	f107 0208 	add.w	r2, r7, #8
  404e46:	1d3b      	adds	r3, r7, #4
  404e48:	4807      	ldr	r0, [pc, #28]	; (404e68 <getTimeString+0x30>)
  404e4a:	4c08      	ldr	r4, [pc, #32]	; (404e6c <getTimeString+0x34>)
  404e4c:	47a0      	blx	r4
	sprintf(timeString,"%02d:%02d:%02d\r\n",hour,minute,second);
  404e4e:	68fa      	ldr	r2, [r7, #12]
  404e50:	68bb      	ldr	r3, [r7, #8]
  404e52:	6879      	ldr	r1, [r7, #4]
  404e54:	9100      	str	r1, [sp, #0]
  404e56:	4806      	ldr	r0, [pc, #24]	; (404e70 <getTimeString+0x38>)
  404e58:	4906      	ldr	r1, [pc, #24]	; (404e74 <getTimeString+0x3c>)
  404e5a:	4c07      	ldr	r4, [pc, #28]	; (404e78 <getTimeString+0x40>)
  404e5c:	47a0      	blx	r4
	return timeString;
  404e5e:	4b04      	ldr	r3, [pc, #16]	; (404e70 <getTimeString+0x38>)
}
  404e60:	4618      	mov	r0, r3
  404e62:	3714      	adds	r7, #20
  404e64:	46bd      	mov	sp, r7
  404e66:	bd90      	pop	{r4, r7, pc}
  404e68:	400e1460 	.word	0x400e1460
  404e6c:	0040a489 	.word	0x0040a489
  404e70:	20000f0c 	.word	0x20000f0c
  404e74:	00415f94 	.word	0x00415f94
  404e78:	0040cda5 	.word	0x0040cda5

00404e7c <cmd_initPacketStructure>:


void cmd_initPacketStructure(cmd_commandPacket_t* packet)
{
  404e7c:	b580      	push	{r7, lr}
  404e7e:	b082      	sub	sp, #8
  404e80:	af00      	add	r7, sp, #0
  404e82:	6078      	str	r0, [r7, #4]
	memset(packet->packetData,0,CMD_INCOMING_CMD_SIZE_MAX);
  404e84:	687b      	ldr	r3, [r7, #4]
  404e86:	3301      	adds	r3, #1
  404e88:	4618      	mov	r0, r3
  404e8a:	2100      	movs	r1, #0
  404e8c:	2264      	movs	r2, #100	; 0x64
  404e8e:	4b04      	ldr	r3, [pc, #16]	; (404ea0 <cmd_initPacketStructure+0x24>)
  404e90:	4798      	blx	r3
	packet->packetSize = 0;
  404e92:	687b      	ldr	r3, [r7, #4]
  404e94:	2200      	movs	r2, #0
  404e96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
}
  404e9a:	3708      	adds	r7, #8
  404e9c:	46bd      	mov	sp, r7
  404e9e:	bd80      	pop	{r7, pc}
  404ea0:	0040cb95 	.word	0x0040cb95

00404ea4 <cmd_sendDateTimeCommand>:
			//this is an error, we should log it.
		}	
	}
}
status_t cmd_sendDateTimeCommand()
{
  404ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
  404ea6:	b0a9      	sub	sp, #164	; 0xa4
  404ea8:	af06      	add	r7, sp, #24
	cmd_commandPacket_t packet;
	packet.packetSource = CMD_COMMAND_SOURCE_LOCAL; 
  404eaa:	2302      	movs	r3, #2
  404eac:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t hour, minute, second, year, month, day, dow; 
	rtc_get_date(RTC,&year,&month,&day, &dow); 
  404eb0:	f107 0110 	add.w	r1, r7, #16
  404eb4:	f107 020c 	add.w	r2, r7, #12
  404eb8:	f107 0308 	add.w	r3, r7, #8
  404ebc:	1d38      	adds	r0, r7, #4
  404ebe:	9000      	str	r0, [sp, #0]
  404ec0:	4821      	ldr	r0, [pc, #132]	; (404f48 <cmd_sendDateTimeCommand+0xa4>)
  404ec2:	4c22      	ldr	r4, [pc, #136]	; (404f4c <cmd_sendDateTimeCommand+0xa8>)
  404ec4:	47a0      	blx	r4
	rtc_get_time(RTC,&hour,&minute,&second); 
  404ec6:	f107 011c 	add.w	r1, r7, #28
  404eca:	f107 0218 	add.w	r2, r7, #24
  404ece:	f107 0314 	add.w	r3, r7, #20
  404ed2:	481d      	ldr	r0, [pc, #116]	; (404f48 <cmd_sendDateTimeCommand+0xa4>)
  404ed4:	4c1e      	ldr	r4, [pc, #120]	; (404f50 <cmd_sendDateTimeCommand+0xac>)
  404ed6:	47a0      	blx	r4
	sprintf(packet.packetData,"setTime%04d-%02d-%02d-%02d-%02d:%02d:%02d\r\n", year, month, day, dow, hour, minute, second ); 	
  404ed8:	693a      	ldr	r2, [r7, #16]
  404eda:	68fb      	ldr	r3, [r7, #12]
  404edc:	f8d7 e008 	ldr.w	lr, [r7, #8]
  404ee0:	687e      	ldr	r6, [r7, #4]
  404ee2:	69fd      	ldr	r5, [r7, #28]
  404ee4:	69bc      	ldr	r4, [r7, #24]
  404ee6:	6978      	ldr	r0, [r7, #20]
  404ee8:	f107 0120 	add.w	r1, r7, #32
  404eec:	3101      	adds	r1, #1
  404eee:	f8cd e000 	str.w	lr, [sp]
  404ef2:	9601      	str	r6, [sp, #4]
  404ef4:	9502      	str	r5, [sp, #8]
  404ef6:	9403      	str	r4, [sp, #12]
  404ef8:	9004      	str	r0, [sp, #16]
  404efa:	4608      	mov	r0, r1
  404efc:	4915      	ldr	r1, [pc, #84]	; (404f54 <cmd_sendDateTimeCommand+0xb0>)
  404efe:	4c16      	ldr	r4, [pc, #88]	; (404f58 <cmd_sendDateTimeCommand+0xb4>)
  404f00:	47a0      	blx	r4
	packet.packetSize = strlen(packet.packetData); 
  404f02:	f107 0320 	add.w	r3, r7, #32
  404f06:	3301      	adds	r3, #1
  404f08:	4618      	mov	r0, r3
  404f0a:	4b14      	ldr	r3, [pc, #80]	; (404f5c <cmd_sendDateTimeCommand+0xb8>)
  404f0c:	4798      	blx	r3
  404f0e:	4603      	mov	r3, r0
  404f10:	b29b      	uxth	r3, r3
  404f12:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	if(cmd_queue_commandQueue != NULL)
  404f16:	4b12      	ldr	r3, [pc, #72]	; (404f60 <cmd_sendDateTimeCommand+0xbc>)
  404f18:	681b      	ldr	r3, [r3, #0]
  404f1a:	2b00      	cmp	r3, #0
  404f1c:	d00e      	beq.n	404f3c <cmd_sendDateTimeCommand+0x98>
	{
		if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &packet,5) != TRUE)
  404f1e:	4b10      	ldr	r3, [pc, #64]	; (404f60 <cmd_sendDateTimeCommand+0xbc>)
  404f20:	681a      	ldr	r2, [r3, #0]
  404f22:	f107 0320 	add.w	r3, r7, #32
  404f26:	4610      	mov	r0, r2
  404f28:	4619      	mov	r1, r3
  404f2a:	2205      	movs	r2, #5
  404f2c:	2300      	movs	r3, #0
  404f2e:	4c0d      	ldr	r4, [pc, #52]	; (404f64 <cmd_sendDateTimeCommand+0xc0>)
  404f30:	47a0      	blx	r4
  404f32:	4603      	mov	r3, r0
  404f34:	2b01      	cmp	r3, #1
  404f36:	d001      	beq.n	404f3c <cmd_sendDateTimeCommand+0x98>
		{
			//this is an error, we should log it.
			return STATUS_FAIL;
  404f38:	2301      	movs	r3, #1
  404f3a:	e000      	b.n	404f3e <cmd_sendDateTimeCommand+0x9a>
		}	
	}
	return STATUS_PASS;	
  404f3c:	2300      	movs	r3, #0
	
} 
  404f3e:	4618      	mov	r0, r3
  404f40:	378c      	adds	r7, #140	; 0x8c
  404f42:	46bd      	mov	sp, r7
  404f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404f46:	bf00      	nop
  404f48:	400e1460 	.word	0x400e1460
  404f4c:	0040a655 	.word	0x0040a655
  404f50:	0040a489 	.word	0x0040a489
  404f54:	00415fb8 	.word	0x00415fb8
  404f58:	0040cda5 	.word	0x0040cda5
  404f5c:	0040ced1 	.word	0x0040ced1
  404f60:	20000e08 	.word	0x20000e08
  404f64:	004089b1 	.word	0x004089b1

00404f68 <setTimeFromString>:
//static functions


static void setTimeFromString(char* dateTime)
{
  404f68:	b590      	push	{r4, r7, lr}
  404f6a:	b091      	sub	sp, #68	; 0x44
  404f6c:	af06      	add	r7, sp, #24
  404f6e:	6078      	str	r0, [r7, #4]
	uint32_t year, month, day, dow; //dow is day of week (1-7)
	uint32_t hour, minute, second;
	if(sscanf(dateTime,"%d-%d-%d-%d-%d:%d:%d\r\n", &year, &month, &day, &dow, &hour, &minute, &second ) == 7)
  404f70:	f107 0224 	add.w	r2, r7, #36	; 0x24
  404f74:	f107 0320 	add.w	r3, r7, #32
  404f78:	f107 011c 	add.w	r1, r7, #28
  404f7c:	9100      	str	r1, [sp, #0]
  404f7e:	f107 0118 	add.w	r1, r7, #24
  404f82:	9101      	str	r1, [sp, #4]
  404f84:	f107 0114 	add.w	r1, r7, #20
  404f88:	9102      	str	r1, [sp, #8]
  404f8a:	f107 0110 	add.w	r1, r7, #16
  404f8e:	9103      	str	r1, [sp, #12]
  404f90:	f107 010c 	add.w	r1, r7, #12
  404f94:	9104      	str	r1, [sp, #16]
  404f96:	6878      	ldr	r0, [r7, #4]
  404f98:	490b      	ldr	r1, [pc, #44]	; (404fc8 <setTimeFromString+0x60>)
  404f9a:	4c0c      	ldr	r4, [pc, #48]	; (404fcc <setTimeFromString+0x64>)
  404f9c:	47a0      	blx	r4
  404f9e:	4603      	mov	r3, r0
  404fa0:	2b07      	cmp	r3, #7
  404fa2:	d10d      	bne.n	404fc0 <setTimeFromString+0x58>
	{
		// we successfully parsed the data, set the time and date
		rtc_set_time(RTC,hour,minute,second);
  404fa4:	6979      	ldr	r1, [r7, #20]
  404fa6:	693a      	ldr	r2, [r7, #16]
  404fa8:	68fb      	ldr	r3, [r7, #12]
  404faa:	4809      	ldr	r0, [pc, #36]	; (404fd0 <setTimeFromString+0x68>)
  404fac:	4c09      	ldr	r4, [pc, #36]	; (404fd4 <setTimeFromString+0x6c>)
  404fae:	47a0      	blx	r4
		rtc_set_date(RTC,year,month,day,dow);
  404fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
  404fb2:	6a3a      	ldr	r2, [r7, #32]
  404fb4:	69fb      	ldr	r3, [r7, #28]
  404fb6:	69b8      	ldr	r0, [r7, #24]
  404fb8:	9000      	str	r0, [sp, #0]
  404fba:	4805      	ldr	r0, [pc, #20]	; (404fd0 <setTimeFromString+0x68>)
  404fbc:	4c06      	ldr	r4, [pc, #24]	; (404fd8 <setTimeFromString+0x70>)
  404fbe:	47a0      	blx	r4
	}
}
  404fc0:	372c      	adds	r7, #44	; 0x2c
  404fc2:	46bd      	mov	sp, r7
  404fc4:	bd90      	pop	{r4, r7, pc}
  404fc6:	bf00      	nop
  404fc8:	00415fe4 	.word	0x00415fe4
  404fcc:	0040cdf1 	.word	0x0040cdf1
  404fd0:	400e1460 	.word	0x400e1460
  404fd4:	0040a54d 	.word	0x0040a54d
  404fd8:	0040a73d 	.word	0x0040a73d

00404fdc <dat_task_dataRouter>:
 *	the daughter board UART 
 * @param pvParameters, void pointer to structure containing data router configuration. 
 * @return void
 ***********************************************************************************************/
void dat_task_dataRouter(void *pvParameters)
{
  404fdc:	b590      	push	{r4, r7, lr}
  404fde:	b0b9      	sub	sp, #228	; 0xe4
  404fe0:	af00      	add	r7, sp, #0
  404fe2:	6078      	str	r0, [r7, #4]
	dataRouterConfig = (dat_dataRouterConfig_t*)pvParameters; 
  404fe4:	4b7b      	ldr	r3, [pc, #492]	; (4051d4 <dat_task_dataRouter+0x1f8>)
  404fe6:	687a      	ldr	r2, [r7, #4]
  404fe8:	601a      	str	r2, [r3, #0]
	cmd_commandPacket_t daughterBoardPacket, usbPacket;
	//mgr_eventMessage_t eventMessage; 
	//initialize the packets
	cmd_initPacketStructure(&daughterBoardPacket);
  404fea:	f107 0374 	add.w	r3, r7, #116	; 0x74
  404fee:	4618      	mov	r0, r3
  404ff0:	4b79      	ldr	r3, [pc, #484]	; (4051d8 <dat_task_dataRouter+0x1fc>)
  404ff2:	4798      	blx	r3
	daughterBoardPacket.packetSource = CMD_COMMAND_SOURCE_DAUGHTER; 
  404ff4:	2300      	movs	r3, #0
  404ff6:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	cmd_initPacketStructure(&usbPacket);
  404ffa:	f107 030c 	add.w	r3, r7, #12
  404ffe:	4618      	mov	r0, r3
  405000:	4b75      	ldr	r3, [pc, #468]	; (4051d8 <dat_task_dataRouter+0x1fc>)
  405002:	4798      	blx	r3
	usbPacket.packetSource = CMD_COMMAND_SOURCE_USB;
  405004:	2301      	movs	r3, #1
  405006:	733b      	strb	r3, [r7, #12]
		
	if(drv_uart_isInit(dataRouterConfig->daughterBoard) != STATUS_PASS)
  405008:	4b72      	ldr	r3, [pc, #456]	; (4051d4 <dat_task_dataRouter+0x1f8>)
  40500a:	681b      	ldr	r3, [r3, #0]
  40500c:	685b      	ldr	r3, [r3, #4]
  40500e:	4618      	mov	r0, r3
  405010:	4b72      	ldr	r3, [pc, #456]	; (4051dc <dat_task_dataRouter+0x200>)
  405012:	4798      	blx	r3
  405014:	4603      	mov	r3, r0
  405016:	2b00      	cmp	r3, #0
  405018:	d000      	beq.n	40501c <dat_task_dataRouter+0x40>
	{
		//fail!
		return; 
  40501a:	e0d7      	b.n	4051cc <dat_task_dataRouter+0x1f0>
	}
	
	if(drv_uart_isInit(dataRouterConfig->dataBoardUart) != STATUS_PASS)
  40501c:	4b6d      	ldr	r3, [pc, #436]	; (4051d4 <dat_task_dataRouter+0x1f8>)
  40501e:	681b      	ldr	r3, [r3, #0]
  405020:	681b      	ldr	r3, [r3, #0]
  405022:	4618      	mov	r0, r3
  405024:	4b6d      	ldr	r3, [pc, #436]	; (4051dc <dat_task_dataRouter+0x200>)
  405026:	4798      	blx	r3
  405028:	4603      	mov	r3, r0
  40502a:	2b00      	cmp	r3, #0
  40502c:	d000      	beq.n	405030 <dat_task_dataRouter+0x54>
	{
		//fail!
		return;
  40502e:	e0cd      	b.n	4051cc <dat_task_dataRouter+0x1f0>
	}

	char receivedByte = 0x00; 
  405030:	2300      	movs	r3, #0
  405032:	72fb      	strb	r3, [r7, #11]
	int receivedUsbData = 0x00; 
  405034:	2300      	movs	r3, #0
  405036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	while(1)
	{
		//try to read byte from databoard mcu
		if(drv_uart_getChar(dataRouterConfig->dataBoardUart, &receivedByte) == STATUS_PASS)
  40503a:	4b66      	ldr	r3, [pc, #408]	; (4051d4 <dat_task_dataRouter+0x1f8>)
  40503c:	681b      	ldr	r3, [r3, #0]
  40503e:	681a      	ldr	r2, [r3, #0]
  405040:	f107 030b 	add.w	r3, r7, #11
  405044:	4610      	mov	r0, r2
  405046:	4619      	mov	r1, r3
  405048:	4b65      	ldr	r3, [pc, #404]	; (4051e0 <dat_task_dataRouter+0x204>)
  40504a:	4798      	blx	r3
  40504c:	4603      	mov	r3, r0
  40504e:	2b00      	cmp	r3, #0
  405050:	d134      	bne.n	4050bc <dat_task_dataRouter+0xe0>
		{
			if((receivedByte & 0xA0) == 0xA0)
  405052:	7afb      	ldrb	r3, [r7, #11]
  405054:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  405058:	2ba0      	cmp	r3, #160	; 0xa0
  40505a:	d11d      	bne.n	405098 <dat_task_dataRouter+0xbc>
			{
				if(receivedByte == POWER_BOARD_CMD_TOGGLE_JACKS)
  40505c:	7afb      	ldrb	r3, [r7, #11]
  40505e:	2baa      	cmp	r3, #170	; 0xaa
  405060:	d114      	bne.n	40508c <dat_task_dataRouter+0xb0>
				{
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
  405062:	2001      	movs	r0, #1
  405064:	2101      	movs	r1, #1
  405066:	4b5f      	ldr	r3, [pc, #380]	; (4051e4 <dat_task_dataRouter+0x208>)
  405068:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
  40506a:	2000      	movs	r0, #0
  40506c:	2101      	movs	r1, #1
  40506e:	4b5d      	ldr	r3, [pc, #372]	; (4051e4 <dat_task_dataRouter+0x208>)
  405070:	4798      	blx	r3
					vTaskDelay(500);
  405072:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  405076:	4b5c      	ldr	r3, [pc, #368]	; (4051e8 <dat_task_dataRouter+0x20c>)
  405078:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
  40507a:	2001      	movs	r0, #1
  40507c:	2100      	movs	r1, #0
  40507e:	4b59      	ldr	r3, [pc, #356]	; (4051e4 <dat_task_dataRouter+0x208>)
  405080:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);
  405082:	2000      	movs	r0, #0
  405084:	2100      	movs	r1, #0
  405086:	4b57      	ldr	r3, [pc, #348]	; (4051e4 <dat_task_dataRouter+0x208>)
  405088:	4798      	blx	r3
  40508a:	e01a      	b.n	4050c2 <dat_task_dataRouter+0xe6>
				}
				else if(receivedByte == POWER_BOARD_CMD_GET_TIME)
  40508c:	7afb      	ldrb	r3, [r7, #11]
  40508e:	2bac      	cmp	r3, #172	; 0xac
  405090:	d117      	bne.n	4050c2 <dat_task_dataRouter+0xe6>
				{
					cmd_sendDateTimeCommand();
  405092:	4b56      	ldr	r3, [pc, #344]	; (4051ec <dat_task_dataRouter+0x210>)
  405094:	4798      	blx	r3
  405096:	e014      	b.n	4050c2 <dat_task_dataRouter+0xe6>
				}			
			}
			else
			{			
				//if byte exists, pass through to the daughter board and USB (if connected)
				drv_uart_putChar(dataRouterConfig->daughterBoard, receivedByte); 
  405098:	4b4e      	ldr	r3, [pc, #312]	; (4051d4 <dat_task_dataRouter+0x1f8>)
  40509a:	681b      	ldr	r3, [r3, #0]
  40509c:	685a      	ldr	r2, [r3, #4]
  40509e:	7afb      	ldrb	r3, [r7, #11]
  4050a0:	4610      	mov	r0, r2
  4050a2:	4619      	mov	r1, r3
  4050a4:	4b52      	ldr	r3, [pc, #328]	; (4051f0 <dat_task_dataRouter+0x214>)
  4050a6:	4798      	blx	r3
				if(udi_cdc_is_tx_ready() == true)
  4050a8:	4b52      	ldr	r3, [pc, #328]	; (4051f4 <dat_task_dataRouter+0x218>)
  4050aa:	4798      	blx	r3
  4050ac:	4603      	mov	r3, r0
  4050ae:	2b00      	cmp	r3, #0
  4050b0:	d007      	beq.n	4050c2 <dat_task_dataRouter+0xe6>
				{
					udi_cdc_putc(receivedByte); 
  4050b2:	7afb      	ldrb	r3, [r7, #11]
  4050b4:	4618      	mov	r0, r3
  4050b6:	4b50      	ldr	r3, [pc, #320]	; (4051f8 <dat_task_dataRouter+0x21c>)
  4050b8:	4798      	blx	r3
  4050ba:	e002      	b.n	4050c2 <dat_task_dataRouter+0xe6>
			}
			
		}
		else
		{
			vTaskDelay(1);
  4050bc:	2001      	movs	r0, #1
  4050be:	4b4a      	ldr	r3, [pc, #296]	; (4051e8 <dat_task_dataRouter+0x20c>)
  4050c0:	4798      	blx	r3
		}

				
		//try to read byte from daughter board
		if(drv_uart_getChar(dataRouterConfig->daughterBoard, &receivedByte) == STATUS_PASS)
  4050c2:	4b44      	ldr	r3, [pc, #272]	; (4051d4 <dat_task_dataRouter+0x1f8>)
  4050c4:	681b      	ldr	r3, [r3, #0]
  4050c6:	685a      	ldr	r2, [r3, #4]
  4050c8:	f107 030b 	add.w	r3, r7, #11
  4050cc:	4610      	mov	r0, r2
  4050ce:	4619      	mov	r1, r3
  4050d0:	4b43      	ldr	r3, [pc, #268]	; (4051e0 <dat_task_dataRouter+0x204>)
  4050d2:	4798      	blx	r3
  4050d4:	4603      	mov	r3, r0
  4050d6:	2b00      	cmp	r3, #0
  4050d8:	d133      	bne.n	405142 <dat_task_dataRouter+0x166>
		{
			//if byte exists, pass through to the daughter board and USB (if connected)
			if(daughterBoardPacket.packetSize < CMD_INCOMING_CMD_SIZE_MAX -1) //check we have room for the command. 
  4050da:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
  4050de:	2b62      	cmp	r3, #98	; 0x62
  4050e0:	d82a      	bhi.n	405138 <dat_task_dataRouter+0x15c>
			{				
				daughterBoardPacket.packetData[daughterBoardPacket.packetSize++] = receivedByte;				
  4050e2:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
  4050e6:	1c5a      	adds	r2, r3, #1
  4050e8:	b292      	uxth	r2, r2
  4050ea:	f8a7 20da 	strh.w	r2, [r7, #218]	; 0xda
  4050ee:	7afa      	ldrb	r2, [r7, #11]
  4050f0:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
  4050f4:	440b      	add	r3, r1
  4050f6:	f803 2c6b 	strb.w	r2, [r3, #-107]
				if(receivedByte == '\n')
  4050fa:	7afb      	ldrb	r3, [r7, #11]
  4050fc:	2b0a      	cmp	r3, #10
  4050fe:	d120      	bne.n	405142 <dat_task_dataRouter+0x166>
				{
					//make sure the packet is null terminated
					daughterBoardPacket.packetData[daughterBoardPacket.packetSize] = 0x00;
  405100:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
  405104:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
  405108:	4413      	add	r3, r2
  40510a:	2200      	movs	r2, #0
  40510c:	f803 2c6b 	strb.w	r2, [r3, #-107]
					if(cmd_queue_commandQueue != NULL)
  405110:	4b3a      	ldr	r3, [pc, #232]	; (4051fc <dat_task_dataRouter+0x220>)
  405112:	681b      	ldr	r3, [r3, #0]
  405114:	2b00      	cmp	r3, #0
  405116:	d009      	beq.n	40512c <dat_task_dataRouter+0x150>
					{
						if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &daughterBoardPacket,5) != TRUE)
  405118:	4b38      	ldr	r3, [pc, #224]	; (4051fc <dat_task_dataRouter+0x220>)
  40511a:	681a      	ldr	r2, [r3, #0]
  40511c:	f107 0374 	add.w	r3, r7, #116	; 0x74
  405120:	4610      	mov	r0, r2
  405122:	4619      	mov	r1, r3
  405124:	2205      	movs	r2, #5
  405126:	2300      	movs	r3, #0
  405128:	4c35      	ldr	r4, [pc, #212]	; (405200 <dat_task_dataRouter+0x224>)
  40512a:	47a0      	blx	r4
						{
							//this is an error, we should log it. 
						}						
					}
					//clear the packet for the next one. 
					cmd_initPacketStructure(&daughterBoardPacket);
  40512c:	f107 0374 	add.w	r3, r7, #116	; 0x74
  405130:	4618      	mov	r0, r3
  405132:	4b29      	ldr	r3, [pc, #164]	; (4051d8 <dat_task_dataRouter+0x1fc>)
  405134:	4798      	blx	r3
  405136:	e004      	b.n	405142 <dat_task_dataRouter+0x166>
				}
			}
			else
			{
				//the packet was too big, we should delete it, possibly log an error
				cmd_initPacketStructure(&daughterBoardPacket);
  405138:	f107 0374 	add.w	r3, r7, #116	; 0x74
  40513c:	4618      	mov	r0, r3
  40513e:	4b26      	ldr	r3, [pc, #152]	; (4051d8 <dat_task_dataRouter+0x1fc>)
  405140:	4798      	blx	r3
			}
		}
		//check if there's any data on the 
		if(udi_cdc_is_rx_ready() == true)
  405142:	4b30      	ldr	r3, [pc, #192]	; (405204 <dat_task_dataRouter+0x228>)
  405144:	4798      	blx	r3
  405146:	4603      	mov	r3, r0
  405148:	2b00      	cmp	r3, #0
  40514a:	d03b      	beq.n	4051c4 <dat_task_dataRouter+0x1e8>
		{
			receivedUsbData = udi_cdc_getc();
  40514c:	4b2e      	ldr	r3, [pc, #184]	; (405208 <dat_task_dataRouter+0x22c>)
  40514e:	4798      	blx	r3
  405150:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
			//if byte exists, pass through to the daughter board and USB (if connected)
			if(usbPacket.packetSize < CMD_INCOMING_CMD_SIZE_MAX -1) //check we have room for the command.
  405154:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
  405158:	2b62      	cmp	r3, #98	; 0x62
  40515a:	d82e      	bhi.n	4051ba <dat_task_dataRouter+0x1de>
			{
				usbPacket.packetData[usbPacket.packetSize++] = (char)receivedUsbData;
  40515c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
  405160:	1c5a      	adds	r2, r3, #1
  405162:	b292      	uxth	r2, r2
  405164:	f8a7 2072 	strh.w	r2, [r7, #114]	; 0x72
  405168:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
  40516c:	b2d2      	uxtb	r2, r2
  40516e:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
  405172:	440b      	add	r3, r1
  405174:	f803 2cd3 	strb.w	r2, [r3, #-211]
				if((char)receivedUsbData == '\n')
  405178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
  40517c:	b2db      	uxtb	r3, r3
  40517e:	2b0a      	cmp	r3, #10
  405180:	d120      	bne.n	4051c4 <dat_task_dataRouter+0x1e8>
				{
					//make sure the packet is null terminated
					usbPacket.packetData[usbPacket.packetSize] = 0x00;
  405182:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
  405186:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
  40518a:	4413      	add	r3, r2
  40518c:	2200      	movs	r2, #0
  40518e:	f803 2cd3 	strb.w	r2, [r3, #-211]
					if(cmd_queue_commandQueue != NULL)
  405192:	4b1a      	ldr	r3, [pc, #104]	; (4051fc <dat_task_dataRouter+0x220>)
  405194:	681b      	ldr	r3, [r3, #0]
  405196:	2b00      	cmp	r3, #0
  405198:	d009      	beq.n	4051ae <dat_task_dataRouter+0x1d2>
					{
						if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &usbPacket,5) != TRUE)
  40519a:	4b18      	ldr	r3, [pc, #96]	; (4051fc <dat_task_dataRouter+0x220>)
  40519c:	681a      	ldr	r2, [r3, #0]
  40519e:	f107 030c 	add.w	r3, r7, #12
  4051a2:	4610      	mov	r0, r2
  4051a4:	4619      	mov	r1, r3
  4051a6:	2205      	movs	r2, #5
  4051a8:	2300      	movs	r3, #0
  4051aa:	4c15      	ldr	r4, [pc, #84]	; (405200 <dat_task_dataRouter+0x224>)
  4051ac:	47a0      	blx	r4
						{
							//this is an error, we should log it.
						}
					}
					//clear the packet for the next one.
					cmd_initPacketStructure(&usbPacket);
  4051ae:	f107 030c 	add.w	r3, r7, #12
  4051b2:	4618      	mov	r0, r3
  4051b4:	4b08      	ldr	r3, [pc, #32]	; (4051d8 <dat_task_dataRouter+0x1fc>)
  4051b6:	4798      	blx	r3
  4051b8:	e004      	b.n	4051c4 <dat_task_dataRouter+0x1e8>
				}
			}
			else
			{
				//the packet was too big, we should delete it, possibly log an error
				cmd_initPacketStructure(&usbPacket);
  4051ba:	f107 030c 	add.w	r3, r7, #12
  4051be:	4618      	mov	r0, r3
  4051c0:	4b05      	ldr	r3, [pc, #20]	; (4051d8 <dat_task_dataRouter+0x1fc>)
  4051c2:	4798      	blx	r3
			}
		}
		wdt_restart(WDT);
  4051c4:	4811      	ldr	r0, [pc, #68]	; (40520c <dat_task_dataRouter+0x230>)
  4051c6:	4b12      	ldr	r3, [pc, #72]	; (405210 <dat_task_dataRouter+0x234>)
  4051c8:	4798      	blx	r3
		//taskYIELD();
		//vTaskDelay(1);
				
		
	}	
  4051ca:	e736      	b.n	40503a <dat_task_dataRouter+0x5e>
}
  4051cc:	37e4      	adds	r7, #228	; 0xe4
  4051ce:	46bd      	mov	sp, r7
  4051d0:	bd90      	pop	{r4, r7, pc}
  4051d2:	bf00      	nop
  4051d4:	2000896c 	.word	0x2000896c
  4051d8:	00404e7d 	.word	0x00404e7d
  4051dc:	00407dd9 	.word	0x00407dd9
  4051e0:	00407c4d 	.word	0x00407c4d
  4051e4:	00405559 	.word	0x00405559
  4051e8:	00409239 	.word	0x00409239
  4051ec:	00404ea5 	.word	0x00404ea5
  4051f0:	00407b65 	.word	0x00407b65
  4051f4:	00400efd 	.word	0x00400efd
  4051f8:	00400fe9 	.word	0x00400fe9
  4051fc:	20000e08 	.word	0x20000e08
  405200:	004089b1 	.word	0x004089b1
  405204:	00400cfd 	.word	0x00400cfd
  405208:	00400df5 	.word	0x00400df5
  40520c:	400e1450 	.word	0x400e1450
  405210:	0040bead 	.word	0x0040bead

00405214 <dat_sendDebugMsgToDataBoard>:
//note... for now it must be prepended with "PwrBrdMsg:"
status_t dat_sendDebugMsgToDataBoard(char* debugString)
{
  405214:	b580      	push	{r7, lr}
  405216:	b082      	sub	sp, #8
  405218:	af00      	add	r7, sp, #0
  40521a:	6078      	str	r0, [r7, #4]
	//possibly add some sort of error handling here.	
	drv_uart_putString(dataRouterConfig->dataBoardUart, debugString);
  40521c:	4b05      	ldr	r3, [pc, #20]	; (405234 <dat_sendDebugMsgToDataBoard+0x20>)
  40521e:	681b      	ldr	r3, [r3, #0]
  405220:	681b      	ldr	r3, [r3, #0]
  405222:	4618      	mov	r0, r3
  405224:	6879      	ldr	r1, [r7, #4]
  405226:	4b04      	ldr	r3, [pc, #16]	; (405238 <dat_sendDebugMsgToDataBoard+0x24>)
  405228:	4798      	blx	r3
	return STATUS_PASS;
  40522a:	2300      	movs	r3, #0
}
  40522c:	4618      	mov	r0, r3
  40522e:	3708      	adds	r7, #8
  405230:	46bd      	mov	sp, r7
  405232:	bd80      	pop	{r7, pc}
  405234:	2000896c 	.word	0x2000896c
  405238:	00407e15 	.word	0x00407e15

0040523c <dat_sendPacketToDataBoard>:

status_t dat_sendPacketToDataBoard(cmd_commandPacket_t* packet)
{ 
  40523c:	b580      	push	{r7, lr}
  40523e:	b082      	sub	sp, #8
  405240:	af00      	add	r7, sp, #0
  405242:	6078      	str	r0, [r7, #4]
	//possibly add some sort of error handling here.
	drv_uart_putData(dataRouterConfig->dataBoardUart, packet->packetData, packet->packetSize);	
  405244:	4b08      	ldr	r3, [pc, #32]	; (405268 <dat_sendPacketToDataBoard+0x2c>)
  405246:	681b      	ldr	r3, [r3, #0]
  405248:	6819      	ldr	r1, [r3, #0]
  40524a:	687b      	ldr	r3, [r7, #4]
  40524c:	1c5a      	adds	r2, r3, #1
  40524e:	687b      	ldr	r3, [r7, #4]
  405250:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  405254:	4608      	mov	r0, r1
  405256:	4611      	mov	r1, r2
  405258:	461a      	mov	r2, r3
  40525a:	4b04      	ldr	r3, [pc, #16]	; (40526c <dat_sendPacketToDataBoard+0x30>)
  40525c:	4798      	blx	r3
	return STATUS_PASS;	
  40525e:	2300      	movs	r3, #0
}
  405260:	4618      	mov	r0, r3
  405262:	3708      	adds	r7, #8
  405264:	46bd      	mov	sp, r7
  405266:	bd80      	pop	{r7, pc}
  405268:	2000896c 	.word	0x2000896c
  40526c:	00407e65 	.word	0x00407e65

00405270 <dat_sendStringToUsb>:

status_t dat_sendStringToUsb(char* str)
{	
  405270:	b580      	push	{r7, lr}
  405272:	b084      	sub	sp, #16
  405274:	af00      	add	r7, sp, #0
  405276:	6078      	str	r0, [r7, #4]
	size_t length = strlen(str); 
  405278:	6878      	ldr	r0, [r7, #4]
  40527a:	4b06      	ldr	r3, [pc, #24]	; (405294 <dat_sendStringToUsb+0x24>)
  40527c:	4798      	blx	r3
  40527e:	60f8      	str	r0, [r7, #12]
	udi_cdc_write_buf(str, length); 
  405280:	6878      	ldr	r0, [r7, #4]
  405282:	68f9      	ldr	r1, [r7, #12]
  405284:	4b04      	ldr	r3, [pc, #16]	; (405298 <dat_sendStringToUsb+0x28>)
  405286:	4798      	blx	r3
	return STATUS_PASS;	
  405288:	2300      	movs	r3, #0
}
  40528a:	4618      	mov	r0, r3
  40528c:	3710      	adds	r7, #16
  40528e:	46bd      	mov	sp, r7
  405290:	bd80      	pop	{r7, pc}
  405292:	bf00      	nop
  405294:	0040ced1 	.word	0x0040ced1
  405298:	00401115 	.word	0x00401115

0040529c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40529c:	b480      	push	{r7}
  40529e:	b083      	sub	sp, #12
  4052a0:	af00      	add	r7, sp, #0
  4052a2:	4603      	mov	r3, r0
  4052a4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4052a6:	4b08      	ldr	r3, [pc, #32]	; (4052c8 <NVIC_EnableIRQ+0x2c>)
  4052a8:	f997 2007 	ldrsb.w	r2, [r7, #7]
  4052ac:	0952      	lsrs	r2, r2, #5
  4052ae:	79f9      	ldrb	r1, [r7, #7]
  4052b0:	f001 011f 	and.w	r1, r1, #31
  4052b4:	2001      	movs	r0, #1
  4052b6:	fa00 f101 	lsl.w	r1, r0, r1
  4052ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4052be:	370c      	adds	r7, #12
  4052c0:	46bd      	mov	sp, r7
  4052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4052c6:	4770      	bx	lr
  4052c8:	e000e100 	.word	0xe000e100

004052cc <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4052cc:	b480      	push	{r7}
  4052ce:	b083      	sub	sp, #12
  4052d0:	af00      	add	r7, sp, #0
  4052d2:	4603      	mov	r3, r0
  4052d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4052d6:	4b09      	ldr	r3, [pc, #36]	; (4052fc <NVIC_DisableIRQ+0x30>)
  4052d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
  4052dc:	0952      	lsrs	r2, r2, #5
  4052de:	79f9      	ldrb	r1, [r7, #7]
  4052e0:	f001 011f 	and.w	r1, r1, #31
  4052e4:	2001      	movs	r0, #1
  4052e6:	fa00 f101 	lsl.w	r1, r0, r1
  4052ea:	3220      	adds	r2, #32
  4052ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4052f0:	370c      	adds	r7, #12
  4052f2:	46bd      	mov	sp, r7
  4052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4052f8:	4770      	bx	lr
  4052fa:	bf00      	nop
  4052fc:	e000e100 	.word	0xe000e100

00405300 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  405300:	b480      	push	{r7}
  405302:	b089      	sub	sp, #36	; 0x24
  405304:	af00      	add	r7, sp, #0
  405306:	6078      	str	r0, [r7, #4]
  405308:	687b      	ldr	r3, [r7, #4]
  40530a:	61fb      	str	r3, [r7, #28]
  40530c:	69fb      	ldr	r3, [r7, #28]
  40530e:	61bb      	str	r3, [r7, #24]
  405310:	69bb      	ldr	r3, [r7, #24]
  405312:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  405314:	697b      	ldr	r3, [r7, #20]
  405316:	095b      	lsrs	r3, r3, #5
  405318:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40531a:	693b      	ldr	r3, [r7, #16]
  40531c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405320:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405324:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  405326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  405328:	69fb      	ldr	r3, [r7, #28]
  40532a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40532c:	68fb      	ldr	r3, [r7, #12]
  40532e:	f003 031f 	and.w	r3, r3, #31
  405332:	2101      	movs	r1, #1
  405334:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  405338:	4013      	ands	r3, r2
  40533a:	2b00      	cmp	r3, #0
  40533c:	bf0c      	ite	eq
  40533e:	2300      	moveq	r3, #0
  405340:	2301      	movne	r3, #1
  405342:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  405344:	4618      	mov	r0, r3
  405346:	3724      	adds	r7, #36	; 0x24
  405348:	46bd      	mov	sp, r7
  40534a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40534e:	4770      	bx	lr

00405350 <drv_gpio_initializeAll>:
 * @brief initialize all GPIO
 * @param 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_gpio_initializeAll(void)
{
  405350:	b580      	push	{r7, lr}
  405352:	b084      	sub	sp, #16
  405354:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS; 
  405356:	2300      	movs	r3, #0
  405358:	73fb      	strb	r3, [r7, #15]
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
  40535a:	230f      	movs	r3, #15
  40535c:	607b      	str	r3, [r7, #4]
	int i = 0; 
  40535e:	2300      	movs	r3, #0
  405360:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < numGpio ; i++)
  405362:	2300      	movs	r3, #0
  405364:	60bb      	str	r3, [r7, #8]
  405366:	e010      	b.n	40538a <drv_gpio_initializeAll+0x3a>
	{
		if(drv_gpio_config(&gpioConfig[i]) != STATUS_PASS)
  405368:	68bb      	ldr	r3, [r7, #8]
  40536a:	011a      	lsls	r2, r3, #4
  40536c:	4b0b      	ldr	r3, [pc, #44]	; (40539c <drv_gpio_initializeAll+0x4c>)
  40536e:	4413      	add	r3, r2
  405370:	4618      	mov	r0, r3
  405372:	4b0b      	ldr	r3, [pc, #44]	; (4053a0 <drv_gpio_initializeAll+0x50>)
  405374:	4798      	blx	r3
  405376:	4603      	mov	r3, r0
  405378:	2b00      	cmp	r3, #0
  40537a:	d003      	beq.n	405384 <drv_gpio_initializeAll+0x34>
		{
			status |= STATUS_FAIL;
  40537c:	7bfb      	ldrb	r3, [r7, #15]
  40537e:	f043 0301 	orr.w	r3, r3, #1
  405382:	73fb      	strb	r3, [r7, #15]
status_t drv_gpio_initializeAll(void)
{
	status_t status = STATUS_PASS; 
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
	int i = 0; 
	for(i = 0; i < numGpio ; i++)
  405384:	68bb      	ldr	r3, [r7, #8]
  405386:	3301      	adds	r3, #1
  405388:	60bb      	str	r3, [r7, #8]
  40538a:	68ba      	ldr	r2, [r7, #8]
  40538c:	687b      	ldr	r3, [r7, #4]
  40538e:	429a      	cmp	r2, r3
  405390:	dbea      	blt.n	405368 <drv_gpio_initializeAll+0x18>
		if(drv_gpio_config(&gpioConfig[i]) != STATUS_PASS)
		{
			status |= STATUS_FAIL;
		}
	}	
	return status; 
  405392:	7bfb      	ldrb	r3, [r7, #15]
}
  405394:	4618      	mov	r0, r3
  405396:	3710      	adds	r7, #16
  405398:	46bd      	mov	sp, r7
  40539a:	bd80      	pop	{r7, pc}
  40539c:	200001e4 	.word	0x200001e4
  4053a0:	004053a5 	.word	0x004053a5

004053a4 <drv_gpio_config>:
 * @brief Set and configure all GPIOs
 * @param drv_gpio_config_t* gpioConfig
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config(drv_gpio_config_t* gpioConfig)
{
  4053a4:	b590      	push	{r4, r7, lr}
  4053a6:	b08d      	sub	sp, #52	; 0x34
  4053a8:	af02      	add	r7, sp, #8
  4053aa:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  4053ac:	2300      	movs	r3, #0
  4053ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned long PinFlag = 0;	
  4053b2:	2300      	movs	r3, #0
  4053b4:	627b      	str	r3, [r7, #36]	; 0x24
	if(gpioConfig->pinMode == DRV_GPIO_PIN_MODE_INPUT)	//Check if input or output
  4053b6:	687b      	ldr	r3, [r7, #4]
  4053b8:	791b      	ldrb	r3, [r3, #4]
  4053ba:	2b01      	cmp	r3, #1
  4053bc:	f040 8093 	bne.w	4054e6 <drv_gpio_config+0x142>
	{
		PinFlag |= PIO_TYPE_PIO_INPUT;	//Set as input
  4053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4053c2:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
  4053c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (gpioConfig->pullUpEnabled == TRUE)
  4053c8:	687b      	ldr	r3, [r7, #4]
  4053ca:	7b1b      	ldrb	r3, [r3, #12]
  4053cc:	2b01      	cmp	r3, #1
  4053ce:	d103      	bne.n	4053d8 <drv_gpio_config+0x34>
		{
			PinFlag |= PIO_PULLUP;	//enable the pull up
  4053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4053d2:	f043 0301 	orr.w	r3, r3, #1
  4053d6:	627b      	str	r3, [r7, #36]	; 0x24
		}
		
		if (gpioConfig->debounceEnabled == TRUE)
  4053d8:	687b      	ldr	r3, [r7, #4]
  4053da:	7b5b      	ldrb	r3, [r3, #13]
  4053dc:	2b01      	cmp	r3, #1
  4053de:	d110      	bne.n	405402 <drv_gpio_config+0x5e>
		{
			//PinFlag |= PIO_DEBOUNCE;	//enable debounce filter
			Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);
  4053e0:	687b      	ldr	r3, [r7, #4]
  4053e2:	681b      	ldr	r3, [r3, #0]
  4053e4:	4618      	mov	r0, r3
  4053e6:	4b51      	ldr	r3, [pc, #324]	; (40552c <drv_gpio_config+0x188>)
  4053e8:	4798      	blx	r3
  4053ea:	61f8      	str	r0, [r7, #28]
			uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  4053ec:	687b      	ldr	r3, [r7, #4]
  4053ee:	681b      	ldr	r3, [r3, #0]
  4053f0:	4618      	mov	r0, r3
  4053f2:	4b4f      	ldr	r3, [pc, #316]	; (405530 <drv_gpio_config+0x18c>)
  4053f4:	4798      	blx	r3
  4053f6:	61b8      	str	r0, [r7, #24]
			pio_set_debounce_filter(p_pio, PinMask, DEBOUNCE_PERIOD);
  4053f8:	69f8      	ldr	r0, [r7, #28]
  4053fa:	69b9      	ldr	r1, [r7, #24]
  4053fc:	2205      	movs	r2, #5
  4053fe:	4b4d      	ldr	r3, [pc, #308]	; (405534 <drv_gpio_config+0x190>)
  405400:	4798      	blx	r3
		}
		
		pmc_enable_periph_clk(pio_get_pin_group_id(gpioConfig->pinId));	//pio_get_pin_group_id(gpioConfig->pinId
  405402:	687b      	ldr	r3, [r7, #4]
  405404:	681b      	ldr	r3, [r3, #0]
  405406:	4618      	mov	r0, r3
  405408:	4b4b      	ldr	r3, [pc, #300]	; (405538 <drv_gpio_config+0x194>)
  40540a:	4798      	blx	r3
  40540c:	4603      	mov	r3, r0
  40540e:	4618      	mov	r0, r3
  405410:	4b4a      	ldr	r3, [pc, #296]	; (40553c <drv_gpio_config+0x198>)
  405412:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  405414:	687b      	ldr	r3, [r7, #4]
  405416:	681b      	ldr	r3, [r3, #0]
  405418:	4618      	mov	r0, r3
  40541a:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40541c:	4b48      	ldr	r3, [pc, #288]	; (405540 <drv_gpio_config+0x19c>)
  40541e:	4798      	blx	r3
		 
		PinFlag = 0;	//Reset the PinFlag to use it to configure interrupt
  405420:	2300      	movs	r3, #0
  405422:	627b      	str	r3, [r7, #36]	; 0x24
		switch(gpioConfig->interruptType)	//set interrupt configuration flag
  405424:	687b      	ldr	r3, [r7, #4]
  405426:	799b      	ldrb	r3, [r3, #6]
  405428:	2b03      	cmp	r3, #3
  40542a:	d81f      	bhi.n	40546c <drv_gpio_config+0xc8>
  40542c:	a201      	add	r2, pc, #4	; (adr r2, 405434 <drv_gpio_config+0x90>)
  40542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405432:	bf00      	nop
  405434:	00405445 	.word	0x00405445
  405438:	0040544f 	.word	0x0040544f
  40543c:	00405459 	.word	0x00405459
  405440:	00405463 	.word	0x00405463
		{
			case DRV_GPIO_INTERRUPT_HIGH_EDGE :
				PinFlag |= PIO_IT_RISE_EDGE | PIO_IT_AIME;
  405444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405446:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  40544a:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  40544c:	e00f      	b.n	40546e <drv_gpio_config+0xca>
			case DRV_GPIO_INTERRUPT_LOW_EDGE :
				PinFlag |= PIO_IT_FALL_EDGE | PIO_IT_AIME;
  40544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405450:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  405454:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  405456:	e00a      	b.n	40546e <drv_gpio_config+0xca>
			case DRV_GPIO_INTERRUPT_HIGH_LVL :
				PinFlag |= PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  405458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40545a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  40545e:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  405460:	e005      	b.n	40546e <drv_gpio_config+0xca>
			case DRV_GPIO_INTERRUPT_LOW_LVL :
				PinFlag |= PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  405462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405464:	f043 0310 	orr.w	r3, r3, #16
  405468:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  40546a:	e000      	b.n	40546e <drv_gpio_config+0xca>
			case DRV_GPIO_INTERRUPT_NONE :
			default:
				break;
  40546c:	bf00      	nop
		}
		Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);	//peripheral ID
  40546e:	687b      	ldr	r3, [r7, #4]
  405470:	681b      	ldr	r3, [r3, #0]
  405472:	4618      	mov	r0, r3
  405474:	4b2d      	ldr	r3, [pc, #180]	; (40552c <drv_gpio_config+0x188>)
  405476:	4798      	blx	r3
  405478:	6178      	str	r0, [r7, #20]
		uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  40547a:	687b      	ldr	r3, [r7, #4]
  40547c:	681b      	ldr	r3, [r3, #0]
  40547e:	4618      	mov	r0, r3
  405480:	4b2b      	ldr	r3, [pc, #172]	; (405530 <drv_gpio_config+0x18c>)
  405482:	4798      	blx	r3
  405484:	6138      	str	r0, [r7, #16]
		if (PinFlag & (PIO_IT_RISE_EDGE | PIO_IT_FALL_EDGE | PIO_IT_HIGH_LEVEL | PIO_IT_LOW_LEVEL))	//if set as interrupt, enable and configure it
  405486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405488:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40548c:	2b00      	cmp	r3, #0
  40548e:	d021      	beq.n	4054d4 <drv_gpio_config+0x130>
		{			
			uint32_t PinPio = pio_get_pin_group_id(gpioConfig->pinId);	//Pin ID
  405490:	687b      	ldr	r3, [r7, #4]
  405492:	681b      	ldr	r3, [r3, #0]
  405494:	4618      	mov	r0, r3
  405496:	4b28      	ldr	r3, [pc, #160]	; (405538 <drv_gpio_config+0x194>)
  405498:	4798      	blx	r3
  40549a:	60f8      	str	r0, [r7, #12]
			pio_handler_set(p_pio, PinPio, PinMask, PinFlag, gpioConfig->interruptHandler);
  40549c:	687b      	ldr	r3, [r7, #4]
  40549e:	689b      	ldr	r3, [r3, #8]
  4054a0:	9300      	str	r3, [sp, #0]
  4054a2:	6978      	ldr	r0, [r7, #20]
  4054a4:	68f9      	ldr	r1, [r7, #12]
  4054a6:	693a      	ldr	r2, [r7, #16]
  4054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4054aa:	4c26      	ldr	r4, [pc, #152]	; (405544 <drv_gpio_config+0x1a0>)
  4054ac:	47a0      	blx	r4
			pio_enable_interrupt(p_pio, PinMask);
  4054ae:	6978      	ldr	r0, [r7, #20]
  4054b0:	6939      	ldr	r1, [r7, #16]
  4054b2:	4b25      	ldr	r3, [pc, #148]	; (405548 <drv_gpio_config+0x1a4>)
  4054b4:	4798      	blx	r3
			if (p_pio == PIOA)
  4054b6:	697a      	ldr	r2, [r7, #20]
  4054b8:	4b24      	ldr	r3, [pc, #144]	; (40554c <drv_gpio_config+0x1a8>)
  4054ba:	429a      	cmp	r2, r3
  4054bc:	d103      	bne.n	4054c6 <drv_gpio_config+0x122>
			{
				NVIC_EnableIRQ(PIOA_IRQn);
  4054be:	200b      	movs	r0, #11
  4054c0:	4b23      	ldr	r3, [pc, #140]	; (405550 <drv_gpio_config+0x1ac>)
  4054c2:	4798      	blx	r3
  4054c4:	e006      	b.n	4054d4 <drv_gpio_config+0x130>
			}
			else if (p_pio == PIOB)
  4054c6:	697a      	ldr	r2, [r7, #20]
  4054c8:	4b22      	ldr	r3, [pc, #136]	; (405554 <drv_gpio_config+0x1b0>)
  4054ca:	429a      	cmp	r2, r3
  4054cc:	d102      	bne.n	4054d4 <drv_gpio_config+0x130>
			{
				NVIC_EnableIRQ(PIOB_IRQn);
  4054ce:	200c      	movs	r0, #12
  4054d0:	4b1f      	ldr	r3, [pc, #124]	; (405550 <drv_gpio_config+0x1ac>)
  4054d2:	4798      	blx	r3
			}
		}
		//turn off any pulldown resistors
		p_pio->PIO_PPDDR |= PinMask; 
  4054d4:	697b      	ldr	r3, [r7, #20]
  4054d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  4054da:	693b      	ldr	r3, [r7, #16]
  4054dc:	431a      	orrs	r2, r3
  4054de:	697b      	ldr	r3, [r7, #20]
  4054e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  4054e4:	e01b      	b.n	40551e <drv_gpio_config+0x17a>
		
	}
	else	//The pin is output
	{
		if (gpioConfig->initialPinState == DRV_GPIO_PIN_STATE_HIGH)
  4054e6:	687b      	ldr	r3, [r7, #4]
  4054e8:	795b      	ldrb	r3, [r3, #5]
  4054ea:	2b01      	cmp	r3, #1
  4054ec:	d104      	bne.n	4054f8 <drv_gpio_config+0x154>
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_1;	//set default pin state
  4054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4054f0:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  4054f4:	627b      	str	r3, [r7, #36]	; 0x24
  4054f6:	e003      	b.n	405500 <drv_gpio_config+0x15c>
		} 
		else
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_0;	//set default pin state
  4054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4054fa:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
  4054fe:	627b      	str	r3, [r7, #36]	; 0x24
		}
		
		pmc_enable_periph_clk(pio_get_pin_group_id(gpioConfig->pinId)); //pio_get_pin_group_id(
  405500:	687b      	ldr	r3, [r7, #4]
  405502:	681b      	ldr	r3, [r3, #0]
  405504:	4618      	mov	r0, r3
  405506:	4b0c      	ldr	r3, [pc, #48]	; (405538 <drv_gpio_config+0x194>)
  405508:	4798      	blx	r3
  40550a:	4603      	mov	r3, r0
  40550c:	4618      	mov	r0, r3
  40550e:	4b0b      	ldr	r3, [pc, #44]	; (40553c <drv_gpio_config+0x198>)
  405510:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  405512:	687b      	ldr	r3, [r7, #4]
  405514:	681b      	ldr	r3, [r3, #0]
  405516:	4618      	mov	r0, r3
  405518:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40551a:	4b09      	ldr	r3, [pc, #36]	; (405540 <drv_gpio_config+0x19c>)
  40551c:	4798      	blx	r3
	}
	
	return status;
  40551e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
  405522:	4618      	mov	r0, r3
  405524:	372c      	adds	r7, #44	; 0x2c
  405526:	46bd      	mov	sp, r7
  405528:	bd90      	pop	{r4, r7, pc}
  40552a:	bf00      	nop
  40552c:	0040b381 	.word	0x0040b381
  405530:	0040b3c9 	.word	0x0040b3c9
  405534:	0040aded 	.word	0x0040aded
  405538:	0040b3a9 	.word	0x0040b3a9
  40553c:	0040b809 	.word	0x0040b809
  405540:	0040b1cd 	.word	0x0040b1cd
  405544:	0040b4b9 	.word	0x0040b4b9
  405548:	0040b081 	.word	0x0040b081
  40554c:	400e0e00 	.word	0x400e0e00
  405550:	0040529d 	.word	0x0040529d
  405554:	400e1000 	.word	0x400e1000

00405558 <drv_gpio_setPinState>:
 * @brief Set a GPIO to HIGH or LOW
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_setPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t state)
{
  405558:	b580      	push	{r7, lr}
  40555a:	b084      	sub	sp, #16
  40555c:	af00      	add	r7, sp, #0
  40555e:	4602      	mov	r2, r0
  405560:	460b      	mov	r3, r1
  405562:	71fa      	strb	r2, [r7, #7]
  405564:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_PASS;
  405566:	2300      	movs	r3, #0
  405568:	72fb      	strb	r3, [r7, #11]
	uint32_t pinFlag = 0x00; 
  40556a:	2300      	movs	r3, #0
  40556c:	60fb      	str	r3, [r7, #12]
	if(gpioConfig[pin].pinMode != DRV_GPIO_PIN_MODE_OUTPUT)
  40556e:	79fb      	ldrb	r3, [r7, #7]
  405570:	4a32      	ldr	r2, [pc, #200]	; (40563c <drv_gpio_setPinState+0xe4>)
  405572:	011b      	lsls	r3, r3, #4
  405574:	4413      	add	r3, r2
  405576:	791b      	ldrb	r3, [r3, #4]
  405578:	2b00      	cmp	r3, #0
  40557a:	d001      	beq.n	405580 <drv_gpio_setPinState+0x28>
	{
		return STATUS_FAIL;
  40557c:	2301      	movs	r3, #1
  40557e:	e059      	b.n	405634 <drv_gpio_setPinState+0xdc>
	}
	if(gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_HIGH || gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_LOW)
  405580:	79fb      	ldrb	r3, [r7, #7]
  405582:	4a2e      	ldr	r2, [pc, #184]	; (40563c <drv_gpio_setPinState+0xe4>)
  405584:	011b      	lsls	r3, r3, #4
  405586:	4413      	add	r3, r2
  405588:	3308      	adds	r3, #8
  40558a:	79db      	ldrb	r3, [r3, #7]
  40558c:	2b02      	cmp	r3, #2
  40558e:	d007      	beq.n	4055a0 <drv_gpio_setPinState+0x48>
  405590:	79fb      	ldrb	r3, [r7, #7]
  405592:	4a2a      	ldr	r2, [pc, #168]	; (40563c <drv_gpio_setPinState+0xe4>)
  405594:	011b      	lsls	r3, r3, #4
  405596:	4413      	add	r3, r2
  405598:	3308      	adds	r3, #8
  40559a:	79db      	ldrb	r3, [r3, #7]
  40559c:	2b03      	cmp	r3, #3
  40559e:	d11a      	bne.n	4055d6 <drv_gpio_setPinState+0x7e>
	{
		if(state == DRV_GPIO_PIN_STATE_HIGH )
  4055a0:	79bb      	ldrb	r3, [r7, #6]
  4055a2:	2b01      	cmp	r3, #1
  4055a4:	d10a      	bne.n	4055bc <drv_gpio_setPinState+0x64>
		{
			//we have to set the pin back to an output
			pinFlag |= PIO_TYPE_PIO_OUTPUT_1;
  4055a6:	68fb      	ldr	r3, [r7, #12]
  4055a8:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  4055ac:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);
  4055ae:	4b23      	ldr	r3, [pc, #140]	; (40563c <drv_gpio_setPinState+0xe4>)
  4055b0:	681b      	ldr	r3, [r3, #0]
  4055b2:	4618      	mov	r0, r3
  4055b4:	68f9      	ldr	r1, [r7, #12]
  4055b6:	4b22      	ldr	r3, [pc, #136]	; (405640 <drv_gpio_setPinState+0xe8>)
  4055b8:	4798      	blx	r3
  4055ba:	e00c      	b.n	4055d6 <drv_gpio_setPinState+0x7e>
		}
		else if(state == DRV_GPIO_PIN_STATE_LOW)
  4055bc:	79bb      	ldrb	r3, [r7, #6]
  4055be:	2b00      	cmp	r3, #0
  4055c0:	d109      	bne.n	4055d6 <drv_gpio_setPinState+0x7e>
		{
			pinFlag |= PIO_TYPE_PIO_OUTPUT_0;
  4055c2:	68fb      	ldr	r3, [r7, #12]
  4055c4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
  4055c8:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);			
  4055ca:	4b1c      	ldr	r3, [pc, #112]	; (40563c <drv_gpio_setPinState+0xe4>)
  4055cc:	681b      	ldr	r3, [r3, #0]
  4055ce:	4618      	mov	r0, r3
  4055d0:	68f9      	ldr	r1, [r7, #12]
  4055d2:	4b1b      	ldr	r3, [pc, #108]	; (405640 <drv_gpio_setPinState+0xe8>)
  4055d4:	4798      	blx	r3
		}
	}
	//the output should be in the right state. 
	
	switch(state)
  4055d6:	79bb      	ldrb	r3, [r7, #6]
  4055d8:	2b03      	cmp	r3, #3
  4055da:	d82a      	bhi.n	405632 <drv_gpio_setPinState+0xda>
  4055dc:	a201      	add	r2, pc, #4	; (adr r2, 4055e4 <drv_gpio_setPinState+0x8c>)
  4055de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4055e2:	bf00      	nop
  4055e4:	00405607 	.word	0x00405607
  4055e8:	004055f5 	.word	0x004055f5
  4055ec:	00405619 	.word	0x00405619
  4055f0:	00405633 	.word	0x00405633
	{
		case DRV_GPIO_PIN_STATE_HIGH:
			pio_set_pin_high(gpioConfig[pin].pinId);
  4055f4:	79fb      	ldrb	r3, [r7, #7]
  4055f6:	4a11      	ldr	r2, [pc, #68]	; (40563c <drv_gpio_setPinState+0xe4>)
  4055f8:	011b      	lsls	r3, r3, #4
  4055fa:	4413      	add	r3, r2
  4055fc:	681b      	ldr	r3, [r3, #0]
  4055fe:	4618      	mov	r0, r3
  405600:	4b10      	ldr	r3, [pc, #64]	; (405644 <drv_gpio_setPinState+0xec>)
  405602:	4798      	blx	r3
		break;
  405604:	e015      	b.n	405632 <drv_gpio_setPinState+0xda>
		case DRV_GPIO_PIN_STATE_LOW:
			pio_set_pin_low(gpioConfig[pin].pinId);
  405606:	79fb      	ldrb	r3, [r7, #7]
  405608:	4a0c      	ldr	r2, [pc, #48]	; (40563c <drv_gpio_setPinState+0xe4>)
  40560a:	011b      	lsls	r3, r3, #4
  40560c:	4413      	add	r3, r2
  40560e:	681b      	ldr	r3, [r3, #0]
  405610:	4618      	mov	r0, r3
  405612:	4b0d      	ldr	r3, [pc, #52]	; (405648 <drv_gpio_setPinState+0xf0>)
  405614:	4798      	blx	r3
		break;
  405616:	e00c      	b.n	405632 <drv_gpio_setPinState+0xda>
		case DRV_GPIO_PIN_STATE_PULLED_HIGH:
			pinFlag |= PIO_TYPE_PIO_INPUT | PIO_PULLUP;	//Set as input with pull up. 
  405618:	68fb      	ldr	r3, [r7, #12]
  40561a:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
  40561e:	f043 0301 	orr.w	r3, r3, #1
  405622:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);
  405624:	4b05      	ldr	r3, [pc, #20]	; (40563c <drv_gpio_setPinState+0xe4>)
  405626:	681b      	ldr	r3, [r3, #0]
  405628:	4618      	mov	r0, r3
  40562a:	68f9      	ldr	r1, [r7, #12]
  40562c:	4b04      	ldr	r3, [pc, #16]	; (405640 <drv_gpio_setPinState+0xe8>)
  40562e:	4798      	blx	r3
		break;
  405630:	bf00      	nop
		case DRV_GPIO_PIN_STATE_PULLED_LOW:
		break; 
	}
	return status;
  405632:	7afb      	ldrb	r3, [r7, #11]
}
  405634:	4618      	mov	r0, r3
  405636:	3710      	adds	r7, #16
  405638:	46bd      	mov	sp, r7
  40563a:	bd80      	pop	{r7, pc}
  40563c:	200001e4 	.word	0x200001e4
  405640:	0040b1cd 	.word	0x0040b1cd
  405644:	0040b11d 	.word	0x0040b11d
  405648:	0040b149 	.word	0x0040b149

0040564c <drv_gpio_getPinState>:
 * @brief Get a GPIO level
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_getPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t* state)
{
  40564c:	b580      	push	{r7, lr}
  40564e:	b084      	sub	sp, #16
  405650:	af00      	add	r7, sp, #0
  405652:	4603      	mov	r3, r0
  405654:	6039      	str	r1, [r7, #0]
  405656:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  405658:	2300      	movs	r3, #0
  40565a:	73fb      	strb	r3, [r7, #15]
	bool value = ioport_get_pin_level(gpioConfig[pin].pinId);
  40565c:	79fb      	ldrb	r3, [r7, #7]
  40565e:	4a0d      	ldr	r2, [pc, #52]	; (405694 <drv_gpio_getPinState+0x48>)
  405660:	011b      	lsls	r3, r3, #4
  405662:	4413      	add	r3, r2
  405664:	681b      	ldr	r3, [r3, #0]
  405666:	4618      	mov	r0, r3
  405668:	4b0b      	ldr	r3, [pc, #44]	; (405698 <drv_gpio_getPinState+0x4c>)
  40566a:	4798      	blx	r3
  40566c:	4603      	mov	r3, r0
  40566e:	73bb      	strb	r3, [r7, #14]
	if (value == false)
  405670:	7bbb      	ldrb	r3, [r7, #14]
  405672:	f083 0301 	eor.w	r3, r3, #1
  405676:	b2db      	uxtb	r3, r3
  405678:	2b00      	cmp	r3, #0
  40567a:	d003      	beq.n	405684 <drv_gpio_getPinState+0x38>
	{
		*state = DRV_GPIO_PIN_STATE_LOW;
  40567c:	683b      	ldr	r3, [r7, #0]
  40567e:	2200      	movs	r2, #0
  405680:	701a      	strb	r2, [r3, #0]
  405682:	e002      	b.n	40568a <drv_gpio_getPinState+0x3e>
	}
	else
	{
		*state = DRV_GPIO_PIN_STATE_HIGH;
  405684:	683b      	ldr	r3, [r7, #0]
  405686:	2201      	movs	r2, #1
  405688:	701a      	strb	r2, [r3, #0]
	}
	return status;
  40568a:	7bfb      	ldrb	r3, [r7, #15]
}
  40568c:	4618      	mov	r0, r3
  40568e:	3710      	adds	r7, #16
  405690:	46bd      	mov	sp, r7
  405692:	bd80      	pop	{r7, pc}
  405694:	200001e4 	.word	0x200001e4
  405698:	00405301 	.word	0x00405301

0040569c <drv_gpio_togglePin>:
 * @brief Toggle a GPIO level
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_togglePin(drv_gpio_pins_t pin)
{
  40569c:	b580      	push	{r7, lr}
  40569e:	b084      	sub	sp, #16
  4056a0:	af00      	add	r7, sp, #0
  4056a2:	4603      	mov	r3, r0
  4056a4:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  4056a6:	2300      	movs	r3, #0
  4056a8:	73fb      	strb	r3, [r7, #15]
	pio_toggle_pin(gpioConfig[pin].pinId);
  4056aa:	79fb      	ldrb	r3, [r7, #7]
  4056ac:	4a05      	ldr	r2, [pc, #20]	; (4056c4 <drv_gpio_togglePin+0x28>)
  4056ae:	011b      	lsls	r3, r3, #4
  4056b0:	4413      	add	r3, r2
  4056b2:	681b      	ldr	r3, [r3, #0]
  4056b4:	4618      	mov	r0, r3
  4056b6:	4b04      	ldr	r3, [pc, #16]	; (4056c8 <drv_gpio_togglePin+0x2c>)
  4056b8:	4798      	blx	r3
	return status;
  4056ba:	7bfb      	ldrb	r3, [r7, #15]
}
  4056bc:	4618      	mov	r0, r3
  4056be:	3710      	adds	r7, #16
  4056c0:	46bd      	mov	sp, r7
  4056c2:	bd80      	pop	{r7, pc}
  4056c4:	200001e4 	.word	0x200001e4
  4056c8:	0040b175 	.word	0x0040b175

004056cc <drv_gpio_config_interrupt>:
 * @brief Set Interrupt Configuration for the requested pin
 * @param drv_gpio_pins_t pinId, unsigned long pinFlag
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config_interrupt(drv_gpio_pins_t pin, drv_gpio_interrupt_t pinInt)
{
  4056cc:	b580      	push	{r7, lr}
  4056ce:	b086      	sub	sp, #24
  4056d0:	af00      	add	r7, sp, #0
  4056d2:	4602      	mov	r2, r0
  4056d4:	460b      	mov	r3, r1
  4056d6:	71fa      	strb	r2, [r7, #7]
  4056d8:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_FAIL;
  4056da:	2301      	movs	r3, #1
  4056dc:	75fb      	strb	r3, [r7, #23]
	unsigned long PinFlag = 0;
  4056de:	2300      	movs	r3, #0
  4056e0:	613b      	str	r3, [r7, #16]
	Pio *p_pio = pio_get_pin_group(gpioConfig[pin].pinId);	//peripheral ID
  4056e2:	79fb      	ldrb	r3, [r7, #7]
  4056e4:	4a1c      	ldr	r2, [pc, #112]	; (405758 <drv_gpio_config_interrupt+0x8c>)
  4056e6:	011b      	lsls	r3, r3, #4
  4056e8:	4413      	add	r3, r2
  4056ea:	681b      	ldr	r3, [r3, #0]
  4056ec:	4618      	mov	r0, r3
  4056ee:	4b1b      	ldr	r3, [pc, #108]	; (40575c <drv_gpio_config_interrupt+0x90>)
  4056f0:	4798      	blx	r3
  4056f2:	60f8      	str	r0, [r7, #12]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[pin].pinId);	//PinMask
  4056f4:	79fb      	ldrb	r3, [r7, #7]
  4056f6:	4a18      	ldr	r2, [pc, #96]	; (405758 <drv_gpio_config_interrupt+0x8c>)
  4056f8:	011b      	lsls	r3, r3, #4
  4056fa:	4413      	add	r3, r2
  4056fc:	681b      	ldr	r3, [r3, #0]
  4056fe:	4618      	mov	r0, r3
  405700:	4b17      	ldr	r3, [pc, #92]	; (405760 <drv_gpio_config_interrupt+0x94>)
  405702:	4798      	blx	r3
  405704:	60b8      	str	r0, [r7, #8]
	if (pinInt == DRV_GPIO_INTERRUPT_HIGH_EDGE)
  405706:	79bb      	ldrb	r3, [r7, #6]
  405708:	2b00      	cmp	r3, #0
  40570a:	d104      	bne.n	405716 <drv_gpio_config_interrupt+0x4a>
	{
		PinFlag = PIO_IT_RISE_EDGE | PIO_IT_AIME;
  40570c:	2370      	movs	r3, #112	; 0x70
  40570e:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  405710:	2300      	movs	r3, #0
  405712:	75fb      	strb	r3, [r7, #23]
  405714:	e016      	b.n	405744 <drv_gpio_config_interrupt+0x78>
	} 
	else if(pinInt == DRV_GPIO_INTERRUPT_LOW_EDGE)
  405716:	79bb      	ldrb	r3, [r7, #6]
  405718:	2b01      	cmp	r3, #1
  40571a:	d104      	bne.n	405726 <drv_gpio_config_interrupt+0x5a>
	{
		PinFlag = PIO_IT_FALL_EDGE | PIO_IT_AIME;
  40571c:	2350      	movs	r3, #80	; 0x50
  40571e:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  405720:	2300      	movs	r3, #0
  405722:	75fb      	strb	r3, [r7, #23]
  405724:	e00e      	b.n	405744 <drv_gpio_config_interrupt+0x78>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_HIGH_LVL)
  405726:	79bb      	ldrb	r3, [r7, #6]
  405728:	2b02      	cmp	r3, #2
  40572a:	d104      	bne.n	405736 <drv_gpio_config_interrupt+0x6a>
	{
		PinFlag = PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  40572c:	2330      	movs	r3, #48	; 0x30
  40572e:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  405730:	2300      	movs	r3, #0
  405732:	75fb      	strb	r3, [r7, #23]
  405734:	e006      	b.n	405744 <drv_gpio_config_interrupt+0x78>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_LOW_LVL)
  405736:	79bb      	ldrb	r3, [r7, #6]
  405738:	2b03      	cmp	r3, #3
  40573a:	d103      	bne.n	405744 <drv_gpio_config_interrupt+0x78>
	{
		PinFlag = PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  40573c:	2310      	movs	r3, #16
  40573e:	613b      	str	r3, [r7, #16]
		status = STATUS_PASS;
  405740:	2300      	movs	r3, #0
  405742:	75fb      	strb	r3, [r7, #23]
	}
	pio_configure_interrupt(p_pio, PinMask, PinFlag);
  405744:	68f8      	ldr	r0, [r7, #12]
  405746:	68b9      	ldr	r1, [r7, #8]
  405748:	693a      	ldr	r2, [r7, #16]
  40574a:	4b06      	ldr	r3, [pc, #24]	; (405764 <drv_gpio_config_interrupt+0x98>)
  40574c:	4798      	blx	r3
	return status;
  40574e:	7dfb      	ldrb	r3, [r7, #23]
}
  405750:	4618      	mov	r0, r3
  405752:	3718      	adds	r7, #24
  405754:	46bd      	mov	sp, r7
  405756:	bd80      	pop	{r7, pc}
  405758:	200001e4 	.word	0x200001e4
  40575c:	0040b381 	.word	0x0040b381
  405760:	0040b3c9 	.word	0x0040b3c9
  405764:	0040b015 	.word	0x0040b015

00405768 <drv_gpio_config_interrupt_handler>:
 * @brief Set Interrupt Configuration for the requested pin, and also what handler to use
 * @param drv_gpio_pins_t pinId, unsigned long pinFlag, void* handler 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config_interrupt_handler(drv_gpio_pins_t pin, drv_gpio_interrupt_t pinInt, void* handler)
{
  405768:	b590      	push	{r4, r7, lr}
  40576a:	b08b      	sub	sp, #44	; 0x2c
  40576c:	af02      	add	r7, sp, #8
  40576e:	460b      	mov	r3, r1
  405770:	603a      	str	r2, [r7, #0]
  405772:	4602      	mov	r2, r0
  405774:	71fa      	strb	r2, [r7, #7]
  405776:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_FAIL;
  405778:	2301      	movs	r3, #1
  40577a:	77fb      	strb	r3, [r7, #31]
	unsigned long PinFlag = 0;
  40577c:	2300      	movs	r3, #0
  40577e:	61bb      	str	r3, [r7, #24]
	Pio *p_pio = pio_get_pin_group(gpioConfig[pin].pinId);	//peripheral ID
  405780:	79fb      	ldrb	r3, [r7, #7]
  405782:	4a2a      	ldr	r2, [pc, #168]	; (40582c <drv_gpio_config_interrupt_handler+0xc4>)
  405784:	011b      	lsls	r3, r3, #4
  405786:	4413      	add	r3, r2
  405788:	681b      	ldr	r3, [r3, #0]
  40578a:	4618      	mov	r0, r3
  40578c:	4b28      	ldr	r3, [pc, #160]	; (405830 <drv_gpio_config_interrupt_handler+0xc8>)
  40578e:	4798      	blx	r3
  405790:	6178      	str	r0, [r7, #20]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[pin].pinId);	//PinMask
  405792:	79fb      	ldrb	r3, [r7, #7]
  405794:	4a25      	ldr	r2, [pc, #148]	; (40582c <drv_gpio_config_interrupt_handler+0xc4>)
  405796:	011b      	lsls	r3, r3, #4
  405798:	4413      	add	r3, r2
  40579a:	681b      	ldr	r3, [r3, #0]
  40579c:	4618      	mov	r0, r3
  40579e:	4b25      	ldr	r3, [pc, #148]	; (405834 <drv_gpio_config_interrupt_handler+0xcc>)
  4057a0:	4798      	blx	r3
  4057a2:	6138      	str	r0, [r7, #16]
	uint32_t PinPio = pio_get_pin_group_id(gpioConfig[pin].pinId);	//Pin ID
  4057a4:	79fb      	ldrb	r3, [r7, #7]
  4057a6:	4a21      	ldr	r2, [pc, #132]	; (40582c <drv_gpio_config_interrupt_handler+0xc4>)
  4057a8:	011b      	lsls	r3, r3, #4
  4057aa:	4413      	add	r3, r2
  4057ac:	681b      	ldr	r3, [r3, #0]
  4057ae:	4618      	mov	r0, r3
  4057b0:	4b21      	ldr	r3, [pc, #132]	; (405838 <drv_gpio_config_interrupt_handler+0xd0>)
  4057b2:	4798      	blx	r3
  4057b4:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PinPio, PinMask);
  4057b6:	68fb      	ldr	r3, [r7, #12]
  4057b8:	4618      	mov	r0, r3
  4057ba:	6939      	ldr	r1, [r7, #16]
  4057bc:	4b1f      	ldr	r3, [pc, #124]	; (40583c <drv_gpio_config_interrupt_handler+0xd4>)
  4057be:	4798      	blx	r3
	if (pinInt == DRV_GPIO_INTERRUPT_HIGH_EDGE)
  4057c0:	79bb      	ldrb	r3, [r7, #6]
  4057c2:	2b00      	cmp	r3, #0
  4057c4:	d104      	bne.n	4057d0 <drv_gpio_config_interrupt_handler+0x68>
	{
		PinFlag = PIO_IT_RISE_EDGE | PIO_IT_AIME;
  4057c6:	2370      	movs	r3, #112	; 0x70
  4057c8:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  4057ca:	2300      	movs	r3, #0
  4057cc:	77fb      	strb	r3, [r7, #31]
  4057ce:	e016      	b.n	4057fe <drv_gpio_config_interrupt_handler+0x96>
	} 
	else if(pinInt == DRV_GPIO_INTERRUPT_LOW_EDGE)
  4057d0:	79bb      	ldrb	r3, [r7, #6]
  4057d2:	2b01      	cmp	r3, #1
  4057d4:	d104      	bne.n	4057e0 <drv_gpio_config_interrupt_handler+0x78>
	{
		PinFlag = PIO_IT_FALL_EDGE | PIO_IT_AIME;
  4057d6:	2350      	movs	r3, #80	; 0x50
  4057d8:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  4057da:	2300      	movs	r3, #0
  4057dc:	77fb      	strb	r3, [r7, #31]
  4057de:	e00e      	b.n	4057fe <drv_gpio_config_interrupt_handler+0x96>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_HIGH_LVL)
  4057e0:	79bb      	ldrb	r3, [r7, #6]
  4057e2:	2b02      	cmp	r3, #2
  4057e4:	d104      	bne.n	4057f0 <drv_gpio_config_interrupt_handler+0x88>
	{
		PinFlag = PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  4057e6:	2330      	movs	r3, #48	; 0x30
  4057e8:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  4057ea:	2300      	movs	r3, #0
  4057ec:	77fb      	strb	r3, [r7, #31]
  4057ee:	e006      	b.n	4057fe <drv_gpio_config_interrupt_handler+0x96>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_LOW_LVL)
  4057f0:	79bb      	ldrb	r3, [r7, #6]
  4057f2:	2b03      	cmp	r3, #3
  4057f4:	d103      	bne.n	4057fe <drv_gpio_config_interrupt_handler+0x96>
	{
		PinFlag = PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  4057f6:	2310      	movs	r3, #16
  4057f8:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  4057fa:	2300      	movs	r3, #0
  4057fc:	77fb      	strb	r3, [r7, #31]
	}
	pio_handler_set(p_pio, PinPio, PinMask, PinFlag, handler);
  4057fe:	683b      	ldr	r3, [r7, #0]
  405800:	9300      	str	r3, [sp, #0]
  405802:	6978      	ldr	r0, [r7, #20]
  405804:	68f9      	ldr	r1, [r7, #12]
  405806:	693a      	ldr	r2, [r7, #16]
  405808:	69bb      	ldr	r3, [r7, #24]
  40580a:	4c0d      	ldr	r4, [pc, #52]	; (405840 <drv_gpio_config_interrupt_handler+0xd8>)
  40580c:	47a0      	blx	r4
	pio_configure_interrupt(p_pio, PinMask, PinFlag);
  40580e:	6978      	ldr	r0, [r7, #20]
  405810:	6939      	ldr	r1, [r7, #16]
  405812:	69ba      	ldr	r2, [r7, #24]
  405814:	4b0b      	ldr	r3, [pc, #44]	; (405844 <drv_gpio_config_interrupt_handler+0xdc>)
  405816:	4798      	blx	r3
	pio_enable_interrupt(PinPio, PinMask);
  405818:	68fb      	ldr	r3, [r7, #12]
  40581a:	4618      	mov	r0, r3
  40581c:	6939      	ldr	r1, [r7, #16]
  40581e:	4b0a      	ldr	r3, [pc, #40]	; (405848 <drv_gpio_config_interrupt_handler+0xe0>)
  405820:	4798      	blx	r3
	return status;
  405822:	7ffb      	ldrb	r3, [r7, #31]
}
  405824:	4618      	mov	r0, r3
  405826:	3724      	adds	r7, #36	; 0x24
  405828:	46bd      	mov	sp, r7
  40582a:	bd90      	pop	{r4, r7, pc}
  40582c:	200001e4 	.word	0x200001e4
  405830:	0040b381 	.word	0x0040b381
  405834:	0040b3c9 	.word	0x0040b3c9
  405838:	0040b3a9 	.word	0x0040b3a9
  40583c:	0040b0a1 	.word	0x0040b0a1
  405840:	0040b4b9 	.word	0x0040b4b9
  405844:	0040b015 	.word	0x0040b015
  405848:	0040b081 	.word	0x0040b081

0040584c <drv_gpio_clear_Int>:
 * @brief Clear the interrupt on a particular pin
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
bool drv_gpio_clear_Int(drv_gpio_pins_t pin)
{
  40584c:	b480      	push	{r7}
  40584e:	b085      	sub	sp, #20
  405850:	af00      	add	r7, sp, #0
  405852:	4603      	mov	r3, r0
  405854:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  405856:	2300      	movs	r3, #0
  405858:	73fb      	strb	r3, [r7, #15]
	gpioConfig[pin].gpioSetFlag = 0;
  40585a:	79fb      	ldrb	r3, [r7, #7]
  40585c:	4a08      	ldr	r2, [pc, #32]	; (405880 <drv_gpio_clear_Int+0x34>)
  40585e:	011b      	lsls	r3, r3, #4
  405860:	4413      	add	r3, r2
  405862:	3308      	adds	r3, #8
  405864:	2200      	movs	r2, #0
  405866:	719a      	strb	r2, [r3, #6]
	return status;
  405868:	7bfb      	ldrb	r3, [r7, #15]
  40586a:	2b00      	cmp	r3, #0
  40586c:	bf0c      	ite	eq
  40586e:	2300      	moveq	r3, #0
  405870:	2301      	movne	r3, #1
  405872:	b2db      	uxtb	r3, r3
}
  405874:	4618      	mov	r0, r3
  405876:	3714      	adds	r7, #20
  405878:	46bd      	mov	sp, r7
  40587a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40587e:	4770      	bx	lr
  405880:	200001e4 	.word	0x200001e4

00405884 <drv_gpio_enable_interrupt>:
 * @brief Enable the interrupt on a particular pin
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_enable_interrupt(drv_gpio_pins_t pin)
{
  405884:	b580      	push	{r7, lr}
  405886:	b086      	sub	sp, #24
  405888:	af00      	add	r7, sp, #0
  40588a:	4603      	mov	r3, r0
  40588c:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  40588e:	2300      	movs	r3, #0
  405890:	75fb      	strb	r3, [r7, #23]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[pin].pinId);
  405892:	79fb      	ldrb	r3, [r7, #7]
  405894:	4a14      	ldr	r2, [pc, #80]	; (4058e8 <drv_gpio_enable_interrupt+0x64>)
  405896:	011b      	lsls	r3, r3, #4
  405898:	4413      	add	r3, r2
  40589a:	681b      	ldr	r3, [r3, #0]
  40589c:	4618      	mov	r0, r3
  40589e:	4b13      	ldr	r3, [pc, #76]	; (4058ec <drv_gpio_enable_interrupt+0x68>)
  4058a0:	4798      	blx	r3
  4058a2:	6138      	str	r0, [r7, #16]
	Pio *p_pio = pio_get_pin_group(gpioConfig[pin].pinId);
  4058a4:	79fb      	ldrb	r3, [r7, #7]
  4058a6:	4a10      	ldr	r2, [pc, #64]	; (4058e8 <drv_gpio_enable_interrupt+0x64>)
  4058a8:	011b      	lsls	r3, r3, #4
  4058aa:	4413      	add	r3, r2
  4058ac:	681b      	ldr	r3, [r3, #0]
  4058ae:	4618      	mov	r0, r3
  4058b0:	4b0f      	ldr	r3, [pc, #60]	; (4058f0 <drv_gpio_enable_interrupt+0x6c>)
  4058b2:	4798      	blx	r3
  4058b4:	60f8      	str	r0, [r7, #12]
	pio_enable_interrupt(p_pio, PinMask);
  4058b6:	68f8      	ldr	r0, [r7, #12]
  4058b8:	6939      	ldr	r1, [r7, #16]
  4058ba:	4b0e      	ldr	r3, [pc, #56]	; (4058f4 <drv_gpio_enable_interrupt+0x70>)
  4058bc:	4798      	blx	r3
	if (p_pio == PIOA)
  4058be:	68fa      	ldr	r2, [r7, #12]
  4058c0:	4b0d      	ldr	r3, [pc, #52]	; (4058f8 <drv_gpio_enable_interrupt+0x74>)
  4058c2:	429a      	cmp	r2, r3
  4058c4:	d103      	bne.n	4058ce <drv_gpio_enable_interrupt+0x4a>
	{
		NVIC_EnableIRQ(PIOA_IRQn);
  4058c6:	200b      	movs	r0, #11
  4058c8:	4b0c      	ldr	r3, [pc, #48]	; (4058fc <drv_gpio_enable_interrupt+0x78>)
  4058ca:	4798      	blx	r3
  4058cc:	e006      	b.n	4058dc <drv_gpio_enable_interrupt+0x58>
	}
	else if (p_pio == PIOB)
  4058ce:	68fa      	ldr	r2, [r7, #12]
  4058d0:	4b0b      	ldr	r3, [pc, #44]	; (405900 <drv_gpio_enable_interrupt+0x7c>)
  4058d2:	429a      	cmp	r2, r3
  4058d4:	d102      	bne.n	4058dc <drv_gpio_enable_interrupt+0x58>
	{
		NVIC_EnableIRQ(PIOB_IRQn);
  4058d6:	200c      	movs	r0, #12
  4058d8:	4b08      	ldr	r3, [pc, #32]	; (4058fc <drv_gpio_enable_interrupt+0x78>)
  4058da:	4798      	blx	r3
	}
	return status;
  4058dc:	7dfb      	ldrb	r3, [r7, #23]
}
  4058de:	4618      	mov	r0, r3
  4058e0:	3718      	adds	r7, #24
  4058e2:	46bd      	mov	sp, r7
  4058e4:	bd80      	pop	{r7, pc}
  4058e6:	bf00      	nop
  4058e8:	200001e4 	.word	0x200001e4
  4058ec:	0040b3c9 	.word	0x0040b3c9
  4058f0:	0040b381 	.word	0x0040b381
  4058f4:	0040b081 	.word	0x0040b081
  4058f8:	400e0e00 	.word	0x400e0e00
  4058fc:	0040529d 	.word	0x0040529d
  405900:	400e1000 	.word	0x400e1000

00405904 <drv_gpio_disable_interrupt_all>:
 * @brief Disable interrupts on every gpio pin of every port
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_disable_interrupt_all(void)
{
  405904:	b580      	push	{r7, lr}
  405906:	b082      	sub	sp, #8
  405908:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS;
  40590a:	2300      	movs	r3, #0
  40590c:	71fb      	strb	r3, [r7, #7]
	pio_disable_interrupt(PIOA, ALL_INTERRUPT_MASK);
  40590e:	480a      	ldr	r0, [pc, #40]	; (405938 <drv_gpio_disable_interrupt_all+0x34>)
  405910:	f04f 31ff 	mov.w	r1, #4294967295
  405914:	4b09      	ldr	r3, [pc, #36]	; (40593c <drv_gpio_disable_interrupt_all+0x38>)
  405916:	4798      	blx	r3
	NVIC_DisableIRQ(PIOA_IRQn);
  405918:	200b      	movs	r0, #11
  40591a:	4b09      	ldr	r3, [pc, #36]	; (405940 <drv_gpio_disable_interrupt_all+0x3c>)
  40591c:	4798      	blx	r3
	pio_disable_interrupt(PIOB, ALL_INTERRUPT_MASK);
  40591e:	4809      	ldr	r0, [pc, #36]	; (405944 <drv_gpio_disable_interrupt_all+0x40>)
  405920:	f04f 31ff 	mov.w	r1, #4294967295
  405924:	4b05      	ldr	r3, [pc, #20]	; (40593c <drv_gpio_disable_interrupt_all+0x38>)
  405926:	4798      	blx	r3
	NVIC_DisableIRQ(PIOB_IRQn);
  405928:	200c      	movs	r0, #12
  40592a:	4b05      	ldr	r3, [pc, #20]	; (405940 <drv_gpio_disable_interrupt_all+0x3c>)
  40592c:	4798      	blx	r3
	return status;
  40592e:	79fb      	ldrb	r3, [r7, #7]
}
  405930:	4618      	mov	r0, r3
  405932:	3708      	adds	r7, #8
  405934:	46bd      	mov	sp, r7
  405936:	bd80      	pop	{r7, pc}
  405938:	400e0e00 	.word	0x400e0e00
  40593c:	0040b0a1 	.word	0x0040b0a1
  405940:	004052cd 	.word	0x004052cd
  405944:	400e1000 	.word	0x400e1000

00405948 <drv_gpio_int_pw>:
 * @brief Interrupt routine for Power Switch
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_pw(uint32_t ul_id, uint32_t ul_mask)
{
  405948:	b580      	push	{r7, lr}
  40594a:	b084      	sub	sp, #16
  40594c:	af00      	add	r7, sp, #0
  40594e:	6078      	str	r0, [r7, #4]
  405950:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_PWR_BTN].pinId);
  405952:	4b0e      	ldr	r3, [pc, #56]	; (40598c <drv_gpio_int_pw+0x44>)
  405954:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
  405958:	4618      	mov	r0, r3
  40595a:	4b0d      	ldr	r3, [pc, #52]	; (405990 <drv_gpio_int_pw+0x48>)
  40595c:	4798      	blx	r3
  40595e:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  405960:	480c      	ldr	r0, [pc, #48]	; (405994 <drv_gpio_int_pw+0x4c>)
  405962:	68f9      	ldr	r1, [r7, #12]
  405964:	4b0c      	ldr	r3, [pc, #48]	; (405998 <drv_gpio_int_pw+0x50>)
  405966:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  405968:	4b0a      	ldr	r3, [pc, #40]	; (405994 <drv_gpio_int_pw+0x4c>)
  40596a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  40596c:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  40596e:	68fa      	ldr	r2, [r7, #12]
  405970:	683b      	ldr	r3, [r7, #0]
  405972:	429a      	cmp	r2, r3
  405974:	d103      	bne.n	40597e <drv_gpio_int_pw+0x36>
	{
		gpioConfig[DRV_GPIO_PIN_PWR_BTN].gpioSetFlag = 1;
  405976:	4b05      	ldr	r3, [pc, #20]	; (40598c <drv_gpio_int_pw+0x44>)
  405978:	2201      	movs	r2, #1
  40597a:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
	}
	pio_enable_interrupt(PIOA, PinMask);
  40597e:	4805      	ldr	r0, [pc, #20]	; (405994 <drv_gpio_int_pw+0x4c>)
  405980:	68f9      	ldr	r1, [r7, #12]
  405982:	4b06      	ldr	r3, [pc, #24]	; (40599c <drv_gpio_int_pw+0x54>)
  405984:	4798      	blx	r3
}
  405986:	3710      	adds	r7, #16
  405988:	46bd      	mov	sp, r7
  40598a:	bd80      	pop	{r7, pc}
  40598c:	200001e4 	.word	0x200001e4
  405990:	0040b3c9 	.word	0x0040b3c9
  405994:	400e0e00 	.word	0x400e0e00
  405998:	0040b0a1 	.word	0x0040b0a1
  40599c:	0040b081 	.word	0x0040b081

004059a0 <drv_gpio_int_dc1>:
 * @brief Interrupt routine for Jack-1 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc1(uint32_t ul_id, uint32_t ul_mask)
{
  4059a0:	b580      	push	{r7, lr}
  4059a2:	b084      	sub	sp, #16
  4059a4:	af00      	add	r7, sp, #0
  4059a6:	6078      	str	r0, [r7, #4]
  4059a8:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC1_DET].pinId);
  4059aa:	4b0e      	ldr	r3, [pc, #56]	; (4059e4 <drv_gpio_int_dc1+0x44>)
  4059ac:	6a1b      	ldr	r3, [r3, #32]
  4059ae:	4618      	mov	r0, r3
  4059b0:	4b0d      	ldr	r3, [pc, #52]	; (4059e8 <drv_gpio_int_dc1+0x48>)
  4059b2:	4798      	blx	r3
  4059b4:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  4059b6:	480d      	ldr	r0, [pc, #52]	; (4059ec <drv_gpio_int_dc1+0x4c>)
  4059b8:	68f9      	ldr	r1, [r7, #12]
  4059ba:	4b0d      	ldr	r3, [pc, #52]	; (4059f0 <drv_gpio_int_dc1+0x50>)
  4059bc:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  4059be:	4b0b      	ldr	r3, [pc, #44]	; (4059ec <drv_gpio_int_dc1+0x4c>)
  4059c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  4059c2:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  4059c4:	68fa      	ldr	r2, [r7, #12]
  4059c6:	683b      	ldr	r3, [r7, #0]
  4059c8:	429a      	cmp	r2, r3
  4059ca:	d103      	bne.n	4059d4 <drv_gpio_int_dc1+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC1_DET].gpioSetFlag = 1;
  4059cc:	4b05      	ldr	r3, [pc, #20]	; (4059e4 <drv_gpio_int_dc1+0x44>)
  4059ce:	2201      	movs	r2, #1
  4059d0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	pio_enable_interrupt(PIOA, PinMask);
  4059d4:	4805      	ldr	r0, [pc, #20]	; (4059ec <drv_gpio_int_dc1+0x4c>)
  4059d6:	68f9      	ldr	r1, [r7, #12]
  4059d8:	4b06      	ldr	r3, [pc, #24]	; (4059f4 <drv_gpio_int_dc1+0x54>)
  4059da:	4798      	blx	r3
}
  4059dc:	3710      	adds	r7, #16
  4059de:	46bd      	mov	sp, r7
  4059e0:	bd80      	pop	{r7, pc}
  4059e2:	bf00      	nop
  4059e4:	200001e4 	.word	0x200001e4
  4059e8:	0040b3c9 	.word	0x0040b3c9
  4059ec:	400e0e00 	.word	0x400e0e00
  4059f0:	0040b0a1 	.word	0x0040b0a1
  4059f4:	0040b081 	.word	0x0040b081

004059f8 <drv_gpio_int_dc2>:
 * @brief Interrupt routine for Jack-2 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc2(uint32_t ul_id, uint32_t ul_mask)
{
  4059f8:	b580      	push	{r7, lr}
  4059fa:	b084      	sub	sp, #16
  4059fc:	af00      	add	r7, sp, #0
  4059fe:	6078      	str	r0, [r7, #4]
  405a00:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC2_DET].pinId);
  405a02:	4b0e      	ldr	r3, [pc, #56]	; (405a3c <drv_gpio_int_dc2+0x44>)
  405a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405a06:	4618      	mov	r0, r3
  405a08:	4b0d      	ldr	r3, [pc, #52]	; (405a40 <drv_gpio_int_dc2+0x48>)
  405a0a:	4798      	blx	r3
  405a0c:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  405a0e:	480d      	ldr	r0, [pc, #52]	; (405a44 <drv_gpio_int_dc2+0x4c>)
  405a10:	68f9      	ldr	r1, [r7, #12]
  405a12:	4b0d      	ldr	r3, [pc, #52]	; (405a48 <drv_gpio_int_dc2+0x50>)
  405a14:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  405a16:	4b0b      	ldr	r3, [pc, #44]	; (405a44 <drv_gpio_int_dc2+0x4c>)
  405a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  405a1a:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  405a1c:	68fa      	ldr	r2, [r7, #12]
  405a1e:	683b      	ldr	r3, [r7, #0]
  405a20:	429a      	cmp	r2, r3
  405a22:	d103      	bne.n	405a2c <drv_gpio_int_dc2+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC2_DET].gpioSetFlag = 1;
  405a24:	4b05      	ldr	r3, [pc, #20]	; (405a3c <drv_gpio_int_dc2+0x44>)
  405a26:	2201      	movs	r2, #1
  405a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
	pio_enable_interrupt(PIOA, PinMask);
  405a2c:	4805      	ldr	r0, [pc, #20]	; (405a44 <drv_gpio_int_dc2+0x4c>)
  405a2e:	68f9      	ldr	r1, [r7, #12]
  405a30:	4b06      	ldr	r3, [pc, #24]	; (405a4c <drv_gpio_int_dc2+0x54>)
  405a32:	4798      	blx	r3
}
  405a34:	3710      	adds	r7, #16
  405a36:	46bd      	mov	sp, r7
  405a38:	bd80      	pop	{r7, pc}
  405a3a:	bf00      	nop
  405a3c:	200001e4 	.word	0x200001e4
  405a40:	0040b3c9 	.word	0x0040b3c9
  405a44:	400e0e00 	.word	0x400e0e00
  405a48:	0040b0a1 	.word	0x0040b0a1
  405a4c:	0040b081 	.word	0x0040b081

00405a50 <drv_gpio_int_usb>:
 * @brief Interrupt routine for Jack-2 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_usb(uint32_t ul_id, uint32_t ul_mask)
{
  405a50:	b580      	push	{r7, lr}
  405a52:	b084      	sub	sp, #16
  405a54:	af00      	add	r7, sp, #0
  405a56:	6078      	str	r0, [r7, #4]
  405a58:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_USB_DET].pinId);
  405a5a:	4b0e      	ldr	r3, [pc, #56]	; (405a94 <drv_gpio_int_usb+0x44>)
  405a5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
  405a60:	4618      	mov	r0, r3
  405a62:	4b0d      	ldr	r3, [pc, #52]	; (405a98 <drv_gpio_int_usb+0x48>)
  405a64:	4798      	blx	r3
  405a66:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  405a68:	480c      	ldr	r0, [pc, #48]	; (405a9c <drv_gpio_int_usb+0x4c>)
  405a6a:	68f9      	ldr	r1, [r7, #12]
  405a6c:	4b0c      	ldr	r3, [pc, #48]	; (405aa0 <drv_gpio_int_usb+0x50>)
  405a6e:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  405a70:	4b0a      	ldr	r3, [pc, #40]	; (405a9c <drv_gpio_int_usb+0x4c>)
  405a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  405a74:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  405a76:	68fa      	ldr	r2, [r7, #12]
  405a78:	683b      	ldr	r3, [r7, #0]
  405a7a:	429a      	cmp	r2, r3
  405a7c:	d103      	bne.n	405a86 <drv_gpio_int_usb+0x36>
	{
		gpioConfig[DRV_GPIO_PIN_USB_DET].gpioSetFlag = 1;
  405a7e:	4b05      	ldr	r3, [pc, #20]	; (405a94 <drv_gpio_int_usb+0x44>)
  405a80:	2201      	movs	r2, #1
  405a82:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	}
	pio_enable_interrupt(PIOA, PinMask);
  405a86:	4805      	ldr	r0, [pc, #20]	; (405a9c <drv_gpio_int_usb+0x4c>)
  405a88:	68f9      	ldr	r1, [r7, #12]
  405a8a:	4b06      	ldr	r3, [pc, #24]	; (405aa4 <drv_gpio_int_usb+0x54>)
  405a8c:	4798      	blx	r3
  405a8e:	3710      	adds	r7, #16
  405a90:	46bd      	mov	sp, r7
  405a92:	bd80      	pop	{r7, pc}
  405a94:	200001e4 	.word	0x200001e4
  405a98:	0040b3c9 	.word	0x0040b3c9
  405a9c:	400e0e00 	.word	0x400e0e00
  405aa0:	0040b0a1 	.word	0x0040b0a1
  405aa4:	0040b081 	.word	0x0040b081

00405aa8 <ltc2941Init>:
#include "LTC2941-1.h"
#include "common.h"


status_t ltc2941Init(slave_twi_config_t* slaveConfig)
{
  405aa8:	b580      	push	{r7, lr}
  405aaa:	b084      	sub	sp, #16
  405aac:	af00      	add	r7, sp, #0
  405aae:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL;
  405ab0:	2301      	movs	r3, #1
  405ab2:	73fb      	strb	r3, [r7, #15]
	
	//Set configuration for charger 0xFC 	
	status = drv_i2c_write(slaveConfig, LTC_2941_CONTROL_REG_ADDR, 0xf0);
  405ab4:	6878      	ldr	r0, [r7, #4]
  405ab6:	2101      	movs	r1, #1
  405ab8:	22f0      	movs	r2, #240	; 0xf0
  405aba:	4b1e      	ldr	r3, [pc, #120]	; (405b34 <ltc2941Init+0x8c>)
  405abc:	4798      	blx	r3
  405abe:	4603      	mov	r3, r0
  405ac0:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405ac2:	7bfb      	ldrb	r3, [r7, #15]
  405ac4:	2b00      	cmp	r3, #0
  405ac6:	d001      	beq.n	405acc <ltc2941Init+0x24>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
		#endif
		return STATUS_FAIL;
  405ac8:	2301      	movs	r3, #1
  405aca:	e02f      	b.n	405b2c <ltc2941Init+0x84>
	}
	
	//Write the high threshold registers
	status = drv_i2c_write(slaveConfig, LTC_2941_CHRG_THRESHOLD_HIGH_REG_ADDR, 0xff);
  405acc:	6878      	ldr	r0, [r7, #4]
  405ace:	2104      	movs	r1, #4
  405ad0:	22ff      	movs	r2, #255	; 0xff
  405ad2:	4b18      	ldr	r3, [pc, #96]	; (405b34 <ltc2941Init+0x8c>)
  405ad4:	4798      	blx	r3
  405ad6:	4603      	mov	r3, r0
  405ad8:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405ada:	7bfb      	ldrb	r3, [r7, #15]
  405adc:	2b00      	cmp	r3, #0
  405ade:	d001      	beq.n	405ae4 <ltc2941Init+0x3c>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
		#endif
		return STATUS_FAIL;
  405ae0:	2301      	movs	r3, #1
  405ae2:	e023      	b.n	405b2c <ltc2941Init+0x84>
	}
	status = drv_i2c_write(slaveConfig, LTC_2941_CHRG_THRESHOLD_HIGH_REG_ADDR + 1, 0xff);
  405ae4:	6878      	ldr	r0, [r7, #4]
  405ae6:	2105      	movs	r1, #5
  405ae8:	22ff      	movs	r2, #255	; 0xff
  405aea:	4b12      	ldr	r3, [pc, #72]	; (405b34 <ltc2941Init+0x8c>)
  405aec:	4798      	blx	r3
  405aee:	4603      	mov	r3, r0
  405af0:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405af2:	7bfb      	ldrb	r3, [r7, #15]
  405af4:	2b00      	cmp	r3, #0
  405af6:	d001      	beq.n	405afc <ltc2941Init+0x54>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
		#endif
		return STATUS_FAIL;
  405af8:	2301      	movs	r3, #1
  405afa:	e017      	b.n	405b2c <ltc2941Init+0x84>
	}
	
	//Write the low threshold values
	status = drv_i2c_write(slaveConfig, LTC_2941_CHRG_THRESHOLD_LOW_REG_ADDR, 0x48);
  405afc:	6878      	ldr	r0, [r7, #4]
  405afe:	2106      	movs	r1, #6
  405b00:	2248      	movs	r2, #72	; 0x48
  405b02:	4b0c      	ldr	r3, [pc, #48]	; (405b34 <ltc2941Init+0x8c>)
  405b04:	4798      	blx	r3
  405b06:	4603      	mov	r3, r0
  405b08:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405b0a:	7bfb      	ldrb	r3, [r7, #15]
  405b0c:	2b00      	cmp	r3, #0
  405b0e:	d001      	beq.n	405b14 <ltc2941Init+0x6c>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
		#endif
		return STATUS_FAIL;
  405b10:	2301      	movs	r3, #1
  405b12:	e00b      	b.n	405b2c <ltc2941Init+0x84>
	}
	status = drv_i2c_write(slaveConfig, LTC_2941_CHRG_THRESHOLD_LOW_REG_ADDR + 1, 0x2c);
  405b14:	6878      	ldr	r0, [r7, #4]
  405b16:	2107      	movs	r1, #7
  405b18:	222c      	movs	r2, #44	; 0x2c
  405b1a:	4b06      	ldr	r3, [pc, #24]	; (405b34 <ltc2941Init+0x8c>)
  405b1c:	4798      	blx	r3
  405b1e:	4603      	mov	r3, r0
  405b20:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405b22:	7bfb      	ldrb	r3, [r7, #15]
  405b24:	2b00      	cmp	r3, #0
  405b26:	d001      	beq.n	405b2c <ltc2941Init+0x84>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
		#endif
		return STATUS_FAIL;
  405b28:	2301      	movs	r3, #1
  405b2a:	e7ff      	b.n	405b2c <ltc2941Init+0x84>
	}
}
  405b2c:	4618      	mov	r0, r3
  405b2e:	3710      	adds	r7, #16
  405b30:	46bd      	mov	sp, r7
  405b32:	bd80      	pop	{r7, pc}
  405b34:	00406c7d 	.word	0x00406c7d

00405b38 <ltc2941SetCharge>:
status_t ltc2941SetCharge(slave_twi_config_t* slaveConfig, uint16_t chargeLevel)
{
  405b38:	b580      	push	{r7, lr}
  405b3a:	b084      	sub	sp, #16
  405b3c:	af00      	add	r7, sp, #0
  405b3e:	6078      	str	r0, [r7, #4]
  405b40:	460b      	mov	r3, r1
  405b42:	807b      	strh	r3, [r7, #2]
	status_t status = STATUS_FAIL;
  405b44:	2301      	movs	r3, #1
  405b46:	73fb      	strb	r3, [r7, #15]
	
	//Set the Accumulated charge register to indicate battery full
	status = drv_i2c_write(slaveConfig, 0x03, chargeLevel&0xFF);
  405b48:	887b      	ldrh	r3, [r7, #2]
  405b4a:	b2db      	uxtb	r3, r3
  405b4c:	6878      	ldr	r0, [r7, #4]
  405b4e:	2103      	movs	r1, #3
  405b50:	461a      	mov	r2, r3
  405b52:	4b0e      	ldr	r3, [pc, #56]	; (405b8c <ltc2941SetCharge+0x54>)
  405b54:	4798      	blx	r3
  405b56:	4603      	mov	r3, r0
  405b58:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405b5a:	7bfb      	ldrb	r3, [r7, #15]
  405b5c:	2b00      	cmp	r3, #0
  405b5e:	d001      	beq.n	405b64 <ltc2941SetCharge+0x2c>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
		#endif
		return STATUS_FAIL;
  405b60:	2301      	movs	r3, #1
  405b62:	e00f      	b.n	405b84 <ltc2941SetCharge+0x4c>
	}
	status = drv_i2c_write(slaveConfig, 0x02, (chargeLevel>>8)&0xFF);
  405b64:	887b      	ldrh	r3, [r7, #2]
  405b66:	0a1b      	lsrs	r3, r3, #8
  405b68:	b29b      	uxth	r3, r3
  405b6a:	b2db      	uxtb	r3, r3
  405b6c:	6878      	ldr	r0, [r7, #4]
  405b6e:	2102      	movs	r1, #2
  405b70:	461a      	mov	r2, r3
  405b72:	4b06      	ldr	r3, [pc, #24]	; (405b8c <ltc2941SetCharge+0x54>)
  405b74:	4798      	blx	r3
  405b76:	4603      	mov	r3, r0
  405b78:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405b7a:	7bfb      	ldrb	r3, [r7, #15]
  405b7c:	2b00      	cmp	r3, #0
  405b7e:	d001      	beq.n	405b84 <ltc2941SetCharge+0x4c>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Write to Control register failed\r\n");
		#endif
		return STATUS_FAIL;
  405b80:	2301      	movs	r3, #1
  405b82:	e7ff      	b.n	405b84 <ltc2941SetCharge+0x4c>
	}	
};
  405b84:	4618      	mov	r0, r3
  405b86:	3710      	adds	r7, #16
  405b88:	46bd      	mov	sp, r7
  405b8a:	bd80      	pop	{r7, pc}
  405b8c:	00406c7d 	.word	0x00406c7d

00405b90 <ltc2941GetCharge>:
status_t ltc2941GetCharge(slave_twi_config_t* slaveConfig, uint16_t *charge)
{
  405b90:	b590      	push	{r4, r7, lr}
  405b92:	b085      	sub	sp, #20
  405b94:	af00      	add	r7, sp, #0
  405b96:	6078      	str	r0, [r7, #4]
  405b98:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_FAIL;
  405b9a:	2301      	movs	r3, #1
  405b9c:	73fb      	strb	r3, [r7, #15]
	uint8_t chargeBytes[2] = {0};
  405b9e:	2300      	movs	r3, #0
  405ba0:	81bb      	strh	r3, [r7, #12]
	//Read two bytes of Accumulated charge
	status = drv_i2c_read(slaveConfig, 0x02, chargeBytes, 2);
  405ba2:	f107 030c 	add.w	r3, r7, #12
  405ba6:	6878      	ldr	r0, [r7, #4]
  405ba8:	2102      	movs	r1, #2
  405baa:	461a      	mov	r2, r3
  405bac:	2302      	movs	r3, #2
  405bae:	4c0b      	ldr	r4, [pc, #44]	; (405bdc <ltc2941GetCharge+0x4c>)
  405bb0:	47a0      	blx	r4
  405bb2:	4603      	mov	r3, r0
  405bb4:	73fb      	strb	r3, [r7, #15]
	if (status != STATUS_PASS)
  405bb6:	7bfb      	ldrb	r3, [r7, #15]
  405bb8:	2b00      	cmp	r3, #0
  405bba:	d001      	beq.n	405bc0 <ltc2941GetCharge+0x30>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Read from register failed\r\n");
		#endif
		return STATUS_FAIL;
  405bbc:	2301      	movs	r3, #1
  405bbe:	e008      	b.n	405bd2 <ltc2941GetCharge+0x42>
	}
	*charge = (((chargeBytes[0]&0xFF)<<8) + (chargeBytes[1]&0xFF));	
  405bc0:	7b3b      	ldrb	r3, [r7, #12]
  405bc2:	021b      	lsls	r3, r3, #8
  405bc4:	b29a      	uxth	r2, r3
  405bc6:	7b7b      	ldrb	r3, [r7, #13]
  405bc8:	4413      	add	r3, r2
  405bca:	b29a      	uxth	r2, r3
  405bcc:	683b      	ldr	r3, [r7, #0]
  405bce:	801a      	strh	r2, [r3, #0]
	return STATUS_PASS;
  405bd0:	2300      	movs	r3, #0
}
  405bd2:	4618      	mov	r0, r3
  405bd4:	3714      	adds	r7, #20
  405bd6:	46bd      	mov	sp, r7
  405bd8:	bd90      	pop	{r4, r7, pc}
  405bda:	bf00      	nop
  405bdc:	00406d09 	.word	0x00406d09

00405be0 <getCalculatedPercentage>:
//[?3/?25/?2016 2:19 PM] Hriday Mehta: 
status_t getCalculatedPercentage(slave_twi_config_t* slaveConfig, uint32_t *percent)
{	
  405be0:	b580      	push	{r7, lr}
  405be2:	b084      	sub	sp, #16
  405be4:	af00      	add	r7, sp, #0
  405be6:	6078      	str	r0, [r7, #4]
  405be8:	6039      	str	r1, [r7, #0]
	uint16_t charge = 0;
  405bea:	2300      	movs	r3, #0
  405bec:	81fb      	strh	r3, [r7, #14]
	if (ltc2941GetCharge(slaveConfig, &charge) == STATUS_PASS)
  405bee:	f107 030e 	add.w	r3, r7, #14
  405bf2:	6878      	ldr	r0, [r7, #4]
  405bf4:	4619      	mov	r1, r3
  405bf6:	4b0e      	ldr	r3, [pc, #56]	; (405c30 <getCalculatedPercentage+0x50>)
  405bf8:	4798      	blx	r3
  405bfa:	4603      	mov	r3, r0
  405bfc:	2b00      	cmp	r3, #0
  405bfe:	d111      	bne.n	405c24 <getCalculatedPercentage+0x44>
	{
		*percent = (((charge - CHARGE_EMPTY_VALUE)*100) / (CHARGE_FULL_VALUE - CHARGE_EMPTY_VALUE));
  405c00:	89fb      	ldrh	r3, [r7, #14]
  405c02:	f5a3 4391 	sub.w	r3, r3, #18560	; 0x4880
  405c06:	3b18      	subs	r3, #24
  405c08:	2264      	movs	r2, #100	; 0x64
  405c0a:	fb02 f303 	mul.w	r3, r2, r3
  405c0e:	4a09      	ldr	r2, [pc, #36]	; (405c34 <getCalculatedPercentage+0x54>)
  405c10:	fb82 1203 	smull	r1, r2, r2, r3
  405c14:	1312      	asrs	r2, r2, #12
  405c16:	17db      	asrs	r3, r3, #31
  405c18:	1ad3      	subs	r3, r2, r3
  405c1a:	461a      	mov	r2, r3
  405c1c:	683b      	ldr	r3, [r7, #0]
  405c1e:	601a      	str	r2, [r3, #0]
		return STATUS_PASS;
  405c20:	2300      	movs	r3, #0
  405c22:	e000      	b.n	405c26 <getCalculatedPercentage+0x46>
	}
	return STATUS_FAIL;
  405c24:	2301      	movs	r3, #1
} 
  405c26:	4618      	mov	r0, r3
  405c28:	3710      	adds	r7, #16
  405c2a:	46bd      	mov	sp, r7
  405c2c:	bd80      	pop	{r7, pc}
  405c2e:	bf00      	nop
  405c30:	00405b91 	.word	0x00405b91
  405c34:	18877c59 	.word	0x18877c59

00405c38 <getRegValueForPercent>:
uint32_t getRegValueForPercent(uint32_t percent)
{
  405c38:	b480      	push	{r7}
  405c3a:	b083      	sub	sp, #12
  405c3c:	af00      	add	r7, sp, #0
  405c3e:	6078      	str	r0, [r7, #4]
	return (percent*(CHARGE_FULL_VALUE-CHARGE_EMPTY_VALUE)/100 + CHARGE_EMPTY_VALUE); 
  405c40:	687b      	ldr	r3, [r7, #4]
  405c42:	f24a 62fc 	movw	r2, #42748	; 0xa6fc
  405c46:	fb02 f203 	mul.w	r2, r2, r3
  405c4a:	4b06      	ldr	r3, [pc, #24]	; (405c64 <getRegValueForPercent+0x2c>)
  405c4c:	fba3 1302 	umull	r1, r3, r3, r2
  405c50:	095b      	lsrs	r3, r3, #5
  405c52:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
  405c56:	3318      	adds	r3, #24
}
  405c58:	4618      	mov	r0, r3
  405c5a:	370c      	adds	r7, #12
  405c5c:	46bd      	mov	sp, r7
  405c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c62:	4770      	bx	lr
  405c64:	51eb851f 	.word	0x51eb851f

00405c68 <ltc2941SetChargeComplete>:
status_t ltc2941SetChargeComplete(slave_twi_config_t* slaveConfig)
{
  405c68:	b580      	push	{r7, lr}
  405c6a:	b084      	sub	sp, #16
  405c6c:	af00      	add	r7, sp, #0
  405c6e:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL;	
  405c70:	2301      	movs	r3, #1
  405c72:	73fb      	strb	r3, [r7, #15]
	ltc2941SetCharge(slaveConfig, CHARGE_FULL_VALUE);
  405c74:	6878      	ldr	r0, [r7, #4]
  405c76:	f64e 7194 	movw	r1, #61332	; 0xef94
  405c7a:	4b03      	ldr	r3, [pc, #12]	; (405c88 <ltc2941SetChargeComplete+0x20>)
  405c7c:	4798      	blx	r3
}
  405c7e:	4618      	mov	r0, r3
  405c80:	3710      	adds	r7, #16
  405c82:	46bd      	mov	sp, r7
  405c84:	bd80      	pop	{r7, pc}
  405c86:	bf00      	nop
  405c88:	00405b39 	.word	0x00405b39

00405c8c <ltc2941GetStatus>:

uint8_t ltc2941GetStatus(slave_twi_config_t* slaveConfig)
{
  405c8c:	b590      	push	{r4, r7, lr}
  405c8e:	b085      	sub	sp, #20
  405c90:	af00      	add	r7, sp, #0
  405c92:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_FAIL;
  405c94:	2301      	movs	r3, #1
  405c96:	73fb      	strb	r3, [r7, #15]
	uint8_t readData = 0;
  405c98:	2300      	movs	r3, #0
  405c9a:	73bb      	strb	r3, [r7, #14]
	
	//uint8_t fullRead[10]; 
	
	//Read the status register
	status = drv_i2c_read(slaveConfig, 0x00, &readData, 1);
  405c9c:	f107 030e 	add.w	r3, r7, #14
  405ca0:	6878      	ldr	r0, [r7, #4]
  405ca2:	2100      	movs	r1, #0
  405ca4:	461a      	mov	r2, r3
  405ca6:	2301      	movs	r3, #1
  405ca8:	4c06      	ldr	r4, [pc, #24]	; (405cc4 <ltc2941GetStatus+0x38>)
  405caa:	47a0      	blx	r4
  405cac:	4603      	mov	r3, r0
  405cae:	73fb      	strb	r3, [r7, #15]
	//for(i=0;i<8;i++)
	//{
		//printf("%02x:",fullRead[i]);
	//}
	//printf("\r\n");
	if (status != STATUS_PASS)
  405cb0:	7bfb      	ldrb	r3, [r7, #15]
  405cb2:	2b00      	cmp	r3, #0
  405cb4:	d001      	beq.n	405cba <ltc2941GetStatus+0x2e>
	{
		#ifdef ENABLE_DEBUG_PRINTS
		puts("Read from status register failed\r\n");
		#endif
		return 0;
  405cb6:	2300      	movs	r3, #0
  405cb8:	e000      	b.n	405cbc <ltc2941GetStatus+0x30>
	}	
	return readData;
  405cba:	7bbb      	ldrb	r3, [r7, #14]
}
  405cbc:	4618      	mov	r0, r3
  405cbe:	3714      	adds	r7, #20
  405cc0:	46bd      	mov	sp, r7
  405cc2:	bd90      	pop	{r4, r7, pc}
  405cc4:	00406d09 	.word	0x00406d09

00405cc8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  405cc8:	b480      	push	{r7}
  405cca:	b083      	sub	sp, #12
  405ccc:	af00      	add	r7, sp, #0
  405cce:	4603      	mov	r3, r0
  405cd0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405cd2:	4b08      	ldr	r3, [pc, #32]	; (405cf4 <NVIC_EnableIRQ+0x2c>)
  405cd4:	f997 2007 	ldrsb.w	r2, [r7, #7]
  405cd8:	0952      	lsrs	r2, r2, #5
  405cda:	79f9      	ldrb	r1, [r7, #7]
  405cdc:	f001 011f 	and.w	r1, r1, #31
  405ce0:	2001      	movs	r0, #1
  405ce2:	fa00 f101 	lsl.w	r1, r0, r1
  405ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  405cea:	370c      	adds	r7, #12
  405cec:	46bd      	mov	sp, r7
  405cee:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cf2:	4770      	bx	lr
  405cf4:	e000e100 	.word	0xe000e100

00405cf8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  405cf8:	b480      	push	{r7}
  405cfa:	b083      	sub	sp, #12
  405cfc:	af00      	add	r7, sp, #0
  405cfe:	4603      	mov	r3, r0
  405d00:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  405d02:	4b09      	ldr	r3, [pc, #36]	; (405d28 <NVIC_DisableIRQ+0x30>)
  405d04:	f997 2007 	ldrsb.w	r2, [r7, #7]
  405d08:	0952      	lsrs	r2, r2, #5
  405d0a:	79f9      	ldrb	r1, [r7, #7]
  405d0c:	f001 011f 	and.w	r1, r1, #31
  405d10:	2001      	movs	r0, #1
  405d12:	fa00 f101 	lsl.w	r1, r0, r1
  405d16:	3220      	adds	r2, #32
  405d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  405d1c:	370c      	adds	r7, #12
  405d1e:	46bd      	mov	sp, r7
  405d20:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d24:	4770      	bx	lr
  405d26:	bf00      	nop
  405d28:	e000e100 	.word	0xe000e100

00405d2c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  405d2c:	b480      	push	{r7}
  405d2e:	b083      	sub	sp, #12
  405d30:	af00      	add	r7, sp, #0
  405d32:	4603      	mov	r3, r0
  405d34:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405d36:	4b09      	ldr	r3, [pc, #36]	; (405d5c <NVIC_ClearPendingIRQ+0x30>)
  405d38:	f997 2007 	ldrsb.w	r2, [r7, #7]
  405d3c:	0952      	lsrs	r2, r2, #5
  405d3e:	79f9      	ldrb	r1, [r7, #7]
  405d40:	f001 011f 	and.w	r1, r1, #31
  405d44:	2001      	movs	r0, #1
  405d46:	fa00 f101 	lsl.w	r1, r0, r1
  405d4a:	3260      	adds	r2, #96	; 0x60
  405d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  405d50:	370c      	adds	r7, #12
  405d52:	46bd      	mov	sp, r7
  405d54:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d58:	4770      	bx	lr
  405d5a:	bf00      	nop
  405d5c:	e000e100 	.word	0xe000e100

00405d60 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  405d60:	b480      	push	{r7}
  405d62:	b083      	sub	sp, #12
  405d64:	af00      	add	r7, sp, #0
  405d66:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405d68:	687b      	ldr	r3, [r7, #4]
  405d6a:	2b07      	cmp	r3, #7
  405d6c:	d825      	bhi.n	405dba <osc_get_rate+0x5a>
  405d6e:	a201      	add	r2, pc, #4	; (adr r2, 405d74 <osc_get_rate+0x14>)
  405d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405d74:	00405d95 	.word	0x00405d95
  405d78:	00405d9b 	.word	0x00405d9b
  405d7c:	00405da1 	.word	0x00405da1
  405d80:	00405da7 	.word	0x00405da7
  405d84:	00405dab 	.word	0x00405dab
  405d88:	00405daf 	.word	0x00405daf
  405d8c:	00405db3 	.word	0x00405db3
  405d90:	00405db7 	.word	0x00405db7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  405d94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  405d98:	e010      	b.n	405dbc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  405d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  405d9e:	e00d      	b.n	405dbc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  405da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  405da4:	e00a      	b.n	405dbc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  405da6:	4b08      	ldr	r3, [pc, #32]	; (405dc8 <osc_get_rate+0x68>)
  405da8:	e008      	b.n	405dbc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  405daa:	4b08      	ldr	r3, [pc, #32]	; (405dcc <osc_get_rate+0x6c>)
  405dac:	e006      	b.n	405dbc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  405dae:	4b08      	ldr	r3, [pc, #32]	; (405dd0 <osc_get_rate+0x70>)
  405db0:	e004      	b.n	405dbc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  405db2:	4b08      	ldr	r3, [pc, #32]	; (405dd4 <osc_get_rate+0x74>)
  405db4:	e002      	b.n	405dbc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  405db6:	4b07      	ldr	r3, [pc, #28]	; (405dd4 <osc_get_rate+0x74>)
  405db8:	e000      	b.n	405dbc <osc_get_rate+0x5c>
	}

	return 0;
  405dba:	2300      	movs	r3, #0
}
  405dbc:	4618      	mov	r0, r3
  405dbe:	370c      	adds	r7, #12
  405dc0:	46bd      	mov	sp, r7
  405dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405dc6:	4770      	bx	lr
  405dc8:	003d0900 	.word	0x003d0900
  405dcc:	007a1200 	.word	0x007a1200
  405dd0:	00b71b00 	.word	0x00b71b00
  405dd4:	00f42400 	.word	0x00f42400

00405dd8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  405dd8:	b580      	push	{r7, lr}
  405dda:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  405ddc:	2006      	movs	r0, #6
  405dde:	4b04      	ldr	r3, [pc, #16]	; (405df0 <sysclk_get_main_hz+0x18>)
  405de0:	4798      	blx	r3
  405de2:	4602      	mov	r2, r0
  405de4:	4613      	mov	r3, r2
  405de6:	011b      	lsls	r3, r3, #4
  405de8:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  405dea:	4618      	mov	r0, r3
  405dec:	bd80      	pop	{r7, pc}
  405dee:	bf00      	nop
  405df0:	00405d61 	.word	0x00405d61

00405df4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  405df4:	b580      	push	{r7, lr}
  405df6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  405df8:	4b02      	ldr	r3, [pc, #8]	; (405e04 <sysclk_get_cpu_hz+0x10>)
  405dfa:	4798      	blx	r3
  405dfc:	4603      	mov	r3, r0
  405dfe:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  405e00:	4618      	mov	r0, r3
  405e02:	bd80      	pop	{r7, pc}
  405e04:	00405dd9 	.word	0x00405dd9

00405e08 <mgr_managerTask>:
 * @brief Handles queued events for the power board.  
 * @param pvParameters, void pointer to structure containing data router configuration. 
 * @return void
 ***********************************************************************************************/
void mgr_managerTask(void *pvParameters)
{
  405e08:	b590      	push	{r4, r7, lr}
  405e0a:	b08b      	sub	sp, #44	; 0x2c
  405e0c:	af04      	add	r7, sp, #16
  405e0e:	6078      	str	r0, [r7, #4]
	mgr_eventMessage_t msgEvent; 
	//initialize the board
	
	brd_board_init(); 
  405e10:	4b72      	ldr	r3, [pc, #456]	; (405fdc <mgr_managerTask+0x1d4>)
  405e12:	4798      	blx	r3
	printf("startApplication!\r\n");
  405e14:	4872      	ldr	r0, [pc, #456]	; (405fe0 <mgr_managerTask+0x1d8>)
  405e16:	4b73      	ldr	r3, [pc, #460]	; (405fe4 <mgr_managerTask+0x1dc>)
  405e18:	4798      	blx	r3
	//initialize power button listener. 	
	drv_gpio_config_interrupt_handler(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_LOW_EDGE,powerButtonHandler_LowEdge);
  405e1a:	200a      	movs	r0, #10
  405e1c:	2101      	movs	r1, #1
  405e1e:	4a72      	ldr	r2, [pc, #456]	; (405fe8 <mgr_managerTask+0x1e0>)
  405e20:	4b72      	ldr	r3, [pc, #456]	; (405fec <mgr_managerTask+0x1e4>)
  405e22:	4798      	blx	r3
	mgr_eventQueue = xQueueCreate( 10, sizeof(mgr_eventMessage_t));
  405e24:	200a      	movs	r0, #10
  405e26:	2104      	movs	r1, #4
  405e28:	2200      	movs	r2, #0
  405e2a:	4b71      	ldr	r3, [pc, #452]	; (405ff0 <mgr_managerTask+0x1e8>)
  405e2c:	4798      	blx	r3
  405e2e:	4602      	mov	r2, r0
  405e30:	4b70      	ldr	r3, [pc, #448]	; (405ff4 <mgr_managerTask+0x1ec>)
  405e32:	601a      	str	r2, [r3, #0]
	pwrButtonTimer = xTimerCreate("PowerBnt timer", (SLEEP_ENTRY_WAIT_TIME/portTICK_RATE_MS), pdFALSE, NULL, powerButtonTimerCallback);
  405e34:	4b70      	ldr	r3, [pc, #448]	; (405ff8 <mgr_managerTask+0x1f0>)
  405e36:	9300      	str	r3, [sp, #0]
  405e38:	4870      	ldr	r0, [pc, #448]	; (405ffc <mgr_managerTask+0x1f4>)
  405e3a:	f240 51dc 	movw	r1, #1500	; 0x5dc
  405e3e:	2200      	movs	r2, #0
  405e40:	2300      	movs	r3, #0
  405e42:	4c6f      	ldr	r4, [pc, #444]	; (406000 <mgr_managerTask+0x1f8>)
  405e44:	47a0      	blx	r4
  405e46:	4602      	mov	r2, r0
  405e48:	4b6e      	ldr	r3, [pc, #440]	; (406004 <mgr_managerTask+0x1fc>)
  405e4a:	601a      	str	r2, [r3, #0]
	//start all the other tasks
	int retCode = 0;
  405e4c:	2300      	movs	r3, #0
  405e4e:	617b      	str	r3, [r7, #20]
	retCode = xTaskCreate(chrg_task_chargeMonitor, "CHRG", TASK_CHRG_MON_STACK_SIZE, &chargeMonitorConfiguration, TASK_CHRG_MON_STACK_PRIORITY, NULL);
  405e50:	2302      	movs	r3, #2
  405e52:	9300      	str	r3, [sp, #0]
  405e54:	2300      	movs	r3, #0
  405e56:	9301      	str	r3, [sp, #4]
  405e58:	2300      	movs	r3, #0
  405e5a:	9302      	str	r3, [sp, #8]
  405e5c:	2300      	movs	r3, #0
  405e5e:	9303      	str	r3, [sp, #12]
  405e60:	4869      	ldr	r0, [pc, #420]	; (406008 <mgr_managerTask+0x200>)
  405e62:	496a      	ldr	r1, [pc, #424]	; (40600c <mgr_managerTask+0x204>)
  405e64:	f44f 7240 	mov.w	r2, #768	; 0x300
  405e68:	4b69      	ldr	r3, [pc, #420]	; (406010 <mgr_managerTask+0x208>)
  405e6a:	4c6a      	ldr	r4, [pc, #424]	; (406014 <mgr_managerTask+0x20c>)
  405e6c:	47a0      	blx	r4
  405e6e:	6178      	str	r0, [r7, #20]
	if (retCode != pdPASS)
  405e70:	697b      	ldr	r3, [r7, #20]
  405e72:	2b01      	cmp	r3, #1
  405e74:	d003      	beq.n	405e7e <mgr_managerTask+0x76>
	{
		printf("Failed to create CHRG task code %d\r\n", retCode);
  405e76:	4868      	ldr	r0, [pc, #416]	; (406018 <mgr_managerTask+0x210>)
  405e78:	6979      	ldr	r1, [r7, #20]
  405e7a:	4b5a      	ldr	r3, [pc, #360]	; (405fe4 <mgr_managerTask+0x1dc>)
  405e7c:	4798      	blx	r3
	}
	retCode = xTaskCreate(cmd_task_commandProcesor, "CMD", TASK_COMMAND_PROC_STACK_SIZE, NULL, TASK_COMMAND_PROC_PRIORITY, NULL);
  405e7e:	2305      	movs	r3, #5
  405e80:	9300      	str	r3, [sp, #0]
  405e82:	2300      	movs	r3, #0
  405e84:	9301      	str	r3, [sp, #4]
  405e86:	2300      	movs	r3, #0
  405e88:	9302      	str	r3, [sp, #8]
  405e8a:	2300      	movs	r3, #0
  405e8c:	9303      	str	r3, [sp, #12]
  405e8e:	4863      	ldr	r0, [pc, #396]	; (40601c <mgr_managerTask+0x214>)
  405e90:	4963      	ldr	r1, [pc, #396]	; (406020 <mgr_managerTask+0x218>)
  405e92:	f44f 7200 	mov.w	r2, #512	; 0x200
  405e96:	2300      	movs	r3, #0
  405e98:	4c5e      	ldr	r4, [pc, #376]	; (406014 <mgr_managerTask+0x20c>)
  405e9a:	47a0      	blx	r4
  405e9c:	6178      	str	r0, [r7, #20]
	if (retCode != pdPASS)
  405e9e:	697b      	ldr	r3, [r7, #20]
  405ea0:	2b01      	cmp	r3, #1
  405ea2:	d003      	beq.n	405eac <mgr_managerTask+0xa4>
	{
		printf("Failed to create CMD task code %d\r\n", retCode);
  405ea4:	485f      	ldr	r0, [pc, #380]	; (406024 <mgr_managerTask+0x21c>)
  405ea6:	6979      	ldr	r1, [r7, #20]
  405ea8:	4b4e      	ldr	r3, [pc, #312]	; (405fe4 <mgr_managerTask+0x1dc>)
  405eaa:	4798      	blx	r3
	}
	retCode = xTaskCreate(dat_task_dataRouter, "DAT", TASK_DATA_ROUTER_STACK_SIZE, &dataRouterConfiguration, TASK_DATA_ROUTER_PRIORITY, NULL);
  405eac:	2306      	movs	r3, #6
  405eae:	9300      	str	r3, [sp, #0]
  405eb0:	2300      	movs	r3, #0
  405eb2:	9301      	str	r3, [sp, #4]
  405eb4:	2300      	movs	r3, #0
  405eb6:	9302      	str	r3, [sp, #8]
  405eb8:	2300      	movs	r3, #0
  405eba:	9303      	str	r3, [sp, #12]
  405ebc:	485a      	ldr	r0, [pc, #360]	; (406028 <mgr_managerTask+0x220>)
  405ebe:	495b      	ldr	r1, [pc, #364]	; (40602c <mgr_managerTask+0x224>)
  405ec0:	f44f 7240 	mov.w	r2, #768	; 0x300
  405ec4:	4b5a      	ldr	r3, [pc, #360]	; (406030 <mgr_managerTask+0x228>)
  405ec6:	4c53      	ldr	r4, [pc, #332]	; (406014 <mgr_managerTask+0x20c>)
  405ec8:	47a0      	blx	r4
  405eca:	6178      	str	r0, [r7, #20]
	if (retCode != pdPASS)
  405ecc:	697b      	ldr	r3, [r7, #20]
  405ece:	2b01      	cmp	r3, #1
  405ed0:	d003      	beq.n	405eda <mgr_managerTask+0xd2>
	{
		printf("Failed to create CMD task code %d\r\n", retCode);
  405ed2:	4854      	ldr	r0, [pc, #336]	; (406024 <mgr_managerTask+0x21c>)
  405ed4:	6979      	ldr	r1, [r7, #20]
  405ed6:	4b43      	ldr	r3, [pc, #268]	; (405fe4 <mgr_managerTask+0x1dc>)
  405ed8:	4798      	blx	r3
	}
	drv_led_set(DRV_LED_GREEN, DRV_LED_FLASH);
  405eda:	2002      	movs	r0, #2
  405edc:	2100      	movs	r1, #0
  405ede:	4b55      	ldr	r3, [pc, #340]	; (406034 <mgr_managerTask+0x22c>)
  405ee0:	4798      	blx	r3
	//enable power to the data board
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_HIGH);
  405ee2:	2004      	movs	r0, #4
  405ee4:	2101      	movs	r1, #1
  405ee6:	4b54      	ldr	r3, [pc, #336]	; (406038 <mgr_managerTask+0x230>)
  405ee8:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
  405eea:	2001      	movs	r0, #1
  405eec:	2100      	movs	r1, #0
  405eee:	4b52      	ldr	r3, [pc, #328]	; (406038 <mgr_managerTask+0x230>)
  405ef0:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);	
  405ef2:	2000      	movs	r0, #0
  405ef4:	2100      	movs	r1, #0
  405ef6:	4b50      	ldr	r3, [pc, #320]	; (406038 <mgr_managerTask+0x230>)
  405ef8:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_GPIO, DRV_GPIO_PIN_STATE_PULLED_LOW);
  405efa:	2009      	movs	r0, #9
  405efc:	2103      	movs	r1, #3
  405efe:	4b4e      	ldr	r3, [pc, #312]	; (406038 <mgr_managerTask+0x230>)
  405f00:	4798      	blx	r3
	currentSystemState = SYS_STATE_POWER_ON;
  405f02:	4b4e      	ldr	r3, [pc, #312]	; (40603c <mgr_managerTask+0x234>)
  405f04:	2200      	movs	r2, #0
  405f06:	701a      	strb	r2, [r3, #0]
	//by default enable fast charging
	drv_gpio_setPinState(DRV_GPIO_PIN_CHRG_SEL, DRV_GPIO_PIN_STATE_HIGH);	
  405f08:	2005      	movs	r0, #5
  405f0a:	2101      	movs	r1, #1
  405f0c:	4b4a      	ldr	r3, [pc, #296]	; (406038 <mgr_managerTask+0x230>)
  405f0e:	4798      	blx	r3
	uint32_t pwrButtonHeldLowCount = 0;
  405f10:	2300      	movs	r3, #0
  405f12:	613b      	str	r3, [r7, #16]
	drv_gpio_pin_state_t pwrButtonState = DRV_GPIO_PIN_STATE_HIGH; 
  405f14:	2301      	movs	r3, #1
  405f16:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		//test code for the power board. 
		if(xQueueReceive( mgr_eventQueue, &(msgEvent), 50) == TRUE)
  405f18:	4b36      	ldr	r3, [pc, #216]	; (405ff4 <mgr_managerTask+0x1ec>)
  405f1a:	681a      	ldr	r2, [r3, #0]
  405f1c:	f107 0308 	add.w	r3, r7, #8
  405f20:	4610      	mov	r0, r2
  405f22:	4619      	mov	r1, r3
  405f24:	2232      	movs	r2, #50	; 0x32
  405f26:	2300      	movs	r3, #0
  405f28:	4c45      	ldr	r4, [pc, #276]	; (406040 <mgr_managerTask+0x238>)
  405f2a:	47a0      	blx	r4
  405f2c:	4603      	mov	r3, r0
  405f2e:	2b01      	cmp	r3, #1
  405f30:	d14f      	bne.n	405fd2 <mgr_managerTask+0x1ca>
		{	
			switch(msgEvent.sysEvent)
  405f32:	7a3b      	ldrb	r3, [r7, #8]
  405f34:	2b05      	cmp	r3, #5
  405f36:	d84b      	bhi.n	405fd0 <mgr_managerTask+0x1c8>
  405f38:	a201      	add	r2, pc, #4	; (adr r2, 405f40 <mgr_managerTask+0x138>)
  405f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405f3e:	bf00      	nop
  405f40:	00405f59 	.word	0x00405f59
  405f44:	00405fd1 	.word	0x00405fd1
  405f48:	00405f91 	.word	0x00405f91
  405f4c:	00405fd1 	.word	0x00405fd1
  405f50:	00405f9d 	.word	0x00405f9d
  405f54:	00405fbb 	.word	0x00405fbb
			{
				case SYS_EVENT_POWER_SWITCH:
				{
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:Received PwrSwitch Event\r\n");
  405f58:	483a      	ldr	r0, [pc, #232]	; (406044 <mgr_managerTask+0x23c>)
  405f5a:	4b3b      	ldr	r3, [pc, #236]	; (406048 <mgr_managerTask+0x240>)
  405f5c:	4798      	blx	r3
					if(currentSystemState == SYS_STATE_POWER_ON)
  405f5e:	4b37      	ldr	r3, [pc, #220]	; (40603c <mgr_managerTask+0x234>)
  405f60:	781b      	ldrb	r3, [r3, #0]
  405f62:	b2db      	uxtb	r3, r3
  405f64:	2b00      	cmp	r3, #0
  405f66:	d10a      	bne.n	405f7e <mgr_managerTask+0x176>
					{						
						if(UsbConnected() == true)
  405f68:	4b38      	ldr	r3, [pc, #224]	; (40604c <mgr_managerTask+0x244>)
  405f6a:	4798      	blx	r3
  405f6c:	4603      	mov	r3, r0
  405f6e:	2b00      	cmp	r3, #0
  405f70:	d002      	beq.n	405f78 <mgr_managerTask+0x170>
						{
							//go to power down charge state
							enterPowerDownChargeState();
  405f72:	4b37      	ldr	r3, [pc, #220]	; (406050 <mgr_managerTask+0x248>)
  405f74:	4798      	blx	r3
  405f76:	e00a      	b.n	405f8e <mgr_managerTask+0x186>
						}
						else
						{
							//go to power down state.
							enterSleepMode();
  405f78:	4b36      	ldr	r3, [pc, #216]	; (406054 <mgr_managerTask+0x24c>)
  405f7a:	4798      	blx	r3
					{ 
						//we need to power everything back on
						exitPowerDownChargeState();
					}						
				}
				break;
  405f7c:	e029      	b.n	405fd2 <mgr_managerTask+0x1ca>
						{
							//go to power down state.
							enterSleepMode();
						}						
					}
					else if(currentSystemState == SYS_STATE_POWER_OFF_CHARGING)
  405f7e:	4b2f      	ldr	r3, [pc, #188]	; (40603c <mgr_managerTask+0x234>)
  405f80:	781b      	ldrb	r3, [r3, #0]
  405f82:	b2db      	uxtb	r3, r3
  405f84:	2b01      	cmp	r3, #1
  405f86:	d102      	bne.n	405f8e <mgr_managerTask+0x186>
					{ 
						//we need to power everything back on
						exitPowerDownChargeState();
  405f88:	4b33      	ldr	r3, [pc, #204]	; (406058 <mgr_managerTask+0x250>)
  405f8a:	4798      	blx	r3
					}						
				}
				break;
  405f8c:	e021      	b.n	405fd2 <mgr_managerTask+0x1ca>
  405f8e:	e020      	b.n	405fd2 <mgr_managerTask+0x1ca>
					
				}
				break;
				case SYS_EVENT_LOW_BATTERY:
				{
					vTaskDelay(200);
  405f90:	20c8      	movs	r0, #200	; 0xc8
  405f92:	4b32      	ldr	r3, [pc, #200]	; (40605c <mgr_managerTask+0x254>)
  405f94:	4798      	blx	r3
					enterSleepMode();
  405f96:	4b2f      	ldr	r3, [pc, #188]	; (406054 <mgr_managerTask+0x24c>)
  405f98:	4798      	blx	r3
				}
				break; 
  405f9a:	e01a      	b.n	405fd2 <mgr_managerTask+0x1ca>
					
				}
				break;
				case SYS_EVENT_USB_CONNECTED:
				{
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:USB Connected\r\n");
  405f9c:	4830      	ldr	r0, [pc, #192]	; (406060 <mgr_managerTask+0x258>)
  405f9e:	4b2a      	ldr	r3, [pc, #168]	; (406048 <mgr_managerTask+0x240>)
  405fa0:	4798      	blx	r3
					//toggle fast Charge
					drv_gpio_setPinState(DRV_GPIO_PIN_CHRG_SEL, DRV_GPIO_PIN_STATE_LOW);
  405fa2:	2005      	movs	r0, #5
  405fa4:	2100      	movs	r1, #0
  405fa6:	4b24      	ldr	r3, [pc, #144]	; (406038 <mgr_managerTask+0x230>)
  405fa8:	4798      	blx	r3
					vTaskDelay(200);
  405faa:	20c8      	movs	r0, #200	; 0xc8
  405fac:	4b2b      	ldr	r3, [pc, #172]	; (40605c <mgr_managerTask+0x254>)
  405fae:	4798      	blx	r3
					drv_gpio_setPinState(DRV_GPIO_PIN_CHRG_SEL, DRV_GPIO_PIN_STATE_HIGH);
  405fb0:	2005      	movs	r0, #5
  405fb2:	2101      	movs	r1, #1
  405fb4:	4b20      	ldr	r3, [pc, #128]	; (406038 <mgr_managerTask+0x230>)
  405fb6:	4798      	blx	r3
					
				}
				break;
  405fb8:	e00b      	b.n	405fd2 <mgr_managerTask+0x1ca>
				case SYS_EVENT_USB_DISCONNECTED:
				{
					//if we're currently charging with the power off, then go to sleep mode
					if(currentSystemState == SYS_STATE_POWER_OFF_CHARGING)
  405fba:	4b20      	ldr	r3, [pc, #128]	; (40603c <mgr_managerTask+0x234>)
  405fbc:	781b      	ldrb	r3, [r3, #0]
  405fbe:	b2db      	uxtb	r3, r3
  405fc0:	2b01      	cmp	r3, #1
  405fc2:	d101      	bne.n	405fc8 <mgr_managerTask+0x1c0>
					{
						enterSleepMode();
  405fc4:	4b23      	ldr	r3, [pc, #140]	; (406054 <mgr_managerTask+0x24c>)
  405fc6:	4798      	blx	r3
					}
					dat_sendDebugMsgToDataBoard("PwrBrdMsg:USB Disconnected\r\n");
  405fc8:	4826      	ldr	r0, [pc, #152]	; (406064 <mgr_managerTask+0x25c>)
  405fca:	4b1f      	ldr	r3, [pc, #124]	; (406048 <mgr_managerTask+0x240>)
  405fcc:	4798      	blx	r3
				}
				break;
  405fce:	e000      	b.n	405fd2 <mgr_managerTask+0x1ca>
				default:
				{
					
				}
				break;
  405fd0:	bf00      	nop
				
			}
		}
		vTaskDelay(150);
  405fd2:	2096      	movs	r0, #150	; 0x96
  405fd4:	4b21      	ldr	r3, [pc, #132]	; (40605c <mgr_managerTask+0x254>)
  405fd6:	4798      	blx	r3
		//if(pwrButtonHeldLowCount == 75)
		//{
			////reset the board.
			//rstc_start_software_reset(RSTC);
		//}
	}
  405fd8:	e79e      	b.n	405f18 <mgr_managerTask+0x110>
  405fda:	bf00      	nop
  405fdc:	00404299 	.word	0x00404299
  405fe0:	00415ffc 	.word	0x00415ffc
  405fe4:	0040ca39 	.word	0x0040ca39
  405fe8:	00406091 	.word	0x00406091
  405fec:	00405769 	.word	0x00405769
  405ff0:	00408919 	.word	0x00408919
  405ff4:	20000f70 	.word	0x20000f70
  405ff8:	00406069 	.word	0x00406069
  405ffc:	00416010 	.word	0x00416010
  406000:	00409de5 	.word	0x00409de5
  406004:	20000f74 	.word	0x20000f74
  406008:	00404441 	.word	0x00404441
  40600c:	00416020 	.word	0x00416020
  406010:	200002e0 	.word	0x200002e0
  406014:	00409079 	.word	0x00409079
  406018:	00416028 	.word	0x00416028
  40601c:	0040484d 	.word	0x0040484d
  406020:	00416050 	.word	0x00416050
  406024:	00416054 	.word	0x00416054
  406028:	00404fdd 	.word	0x00404fdd
  40602c:	00416078 	.word	0x00416078
  406030:	200002d8 	.word	0x200002d8
  406034:	004073e5 	.word	0x004073e5
  406038:	00405559 	.word	0x00405559
  40603c:	200002d4 	.word	0x200002d4
  406040:	00408bdd 	.word	0x00408bdd
  406044:	0041607c 	.word	0x0041607c
  406048:	00405215 	.word	0x00405215
  40604c:	0040644d 	.word	0x0040644d
  406050:	00406479 	.word	0x00406479
  406054:	00406111 	.word	0x00406111
  406058:	00406551 	.word	0x00406551
  40605c:	00409239 	.word	0x00409239
  406060:	004160a4 	.word	0x004160a4
  406064:	004160c0 	.word	0x004160c0

00406068 <powerButtonTimerCallback>:
}


//static functions
void powerButtonTimerCallback()
{
  406068:	b580      	push	{r7, lr}
  40606a:	b082      	sub	sp, #8
  40606c:	af00      	add	r7, sp, #0
	drv_gpio_pin_state_t pwSwState = DRV_GPIO_PIN_STATE_HIGH; 
  40606e:	2301      	movs	r3, #1
  406070:	71fb      	strb	r3, [r7, #7]
	mgr_eventMessage_t pwrDownEvent = 
  406072:	2300      	movs	r3, #0
  406074:	703b      	strb	r3, [r7, #0]
  406076:	2300      	movs	r3, #0
  406078:	807b      	strh	r3, [r7, #2]
	{
		.sysEvent = SYS_EVENT_POWER_SWITCH,
		.data = 0		
	};
	//check if the button is still low
	drv_gpio_getPinState(DRV_GPIO_PIN_PWR_BTN, &pwSwState);	//poll the power switch
  40607a:	1dfb      	adds	r3, r7, #7
  40607c:	200a      	movs	r0, #10
  40607e:	4619      	mov	r1, r3
  406080:	4b02      	ldr	r3, [pc, #8]	; (40608c <powerButtonTimerCallback+0x24>)
  406082:	4798      	blx	r3
			////this is an error, we should log it.
			//
		//}	
	}
	
}
  406084:	3708      	adds	r7, #8
  406086:	46bd      	mov	sp, r7
  406088:	bd80      	pop	{r7, pc}
  40608a:	bf00      	nop
  40608c:	0040564d 	.word	0x0040564d

00406090 <powerButtonHandler_LowEdge>:
	pio_enable_interrupt(PIOA, PinMask);	

}
volatile uint32_t hasWoken = pdFALSE; 
static void powerButtonHandler_LowEdge(uint32_t ul_id, uint32_t ul_mask)
{
  406090:	b590      	push	{r4, r7, lr}
  406092:	b087      	sub	sp, #28
  406094:	af02      	add	r7, sp, #8
  406096:	6078      	str	r0, [r7, #4]
  406098:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(DRV_GPIO_ID_PIN_PWR_BTN);
  40609a:	2005      	movs	r0, #5
  40609c:	4b13      	ldr	r3, [pc, #76]	; (4060ec <powerButtonHandler_LowEdge+0x5c>)
  40609e:	4798      	blx	r3
  4060a0:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  4060a2:	4813      	ldr	r0, [pc, #76]	; (4060f0 <powerButtonHandler_LowEdge+0x60>)
  4060a4:	68f9      	ldr	r1, [r7, #12]
  4060a6:	4b13      	ldr	r3, [pc, #76]	; (4060f4 <powerButtonHandler_LowEdge+0x64>)
  4060a8:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  4060aa:	4b11      	ldr	r3, [pc, #68]	; (4060f0 <powerButtonHandler_LowEdge+0x60>)
  4060ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  4060ae:	60bb      	str	r3, [r7, #8]
	
	if (PinMask == ul_mask)
  4060b0:	68fa      	ldr	r2, [r7, #12]
  4060b2:	683b      	ldr	r3, [r7, #0]
  4060b4:	429a      	cmp	r2, r3
  4060b6:	d10c      	bne.n	4060d2 <powerButtonHandler_LowEdge+0x42>
	{
		//drv_gpio_config_interrupt_handler(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_HIGH_EDGE,powerButtonHandler_HighEdge);
		xTimerResetFromISR(pwrButtonTimer,&hasWoken);
  4060b8:	4b0f      	ldr	r3, [pc, #60]	; (4060f8 <powerButtonHandler_LowEdge+0x68>)
  4060ba:	681c      	ldr	r4, [r3, #0]
  4060bc:	4b0f      	ldr	r3, [pc, #60]	; (4060fc <powerButtonHandler_LowEdge+0x6c>)
  4060be:	4798      	blx	r3
  4060c0:	4603      	mov	r3, r0
  4060c2:	2200      	movs	r2, #0
  4060c4:	9200      	str	r2, [sp, #0]
  4060c6:	4620      	mov	r0, r4
  4060c8:	2100      	movs	r1, #0
  4060ca:	461a      	mov	r2, r3
  4060cc:	4b0c      	ldr	r3, [pc, #48]	; (406100 <powerButtonHandler_LowEdge+0x70>)
  4060ce:	4c0d      	ldr	r4, [pc, #52]	; (406104 <powerButtonHandler_LowEdge+0x74>)
  4060d0:	47a0      	blx	r4
	}
	pio_enable_interrupt(PIOA, PinMask);	
  4060d2:	4807      	ldr	r0, [pc, #28]	; (4060f0 <powerButtonHandler_LowEdge+0x60>)
  4060d4:	68f9      	ldr	r1, [r7, #12]
  4060d6:	4b0c      	ldr	r3, [pc, #48]	; (406108 <powerButtonHandler_LowEdge+0x78>)
  4060d8:	4798      	blx	r3
	if( hasWoken != pdFALSE )
  4060da:	4b09      	ldr	r3, [pc, #36]	; (406100 <powerButtonHandler_LowEdge+0x70>)
  4060dc:	681b      	ldr	r3, [r3, #0]
  4060de:	2b00      	cmp	r3, #0
  4060e0:	d001      	beq.n	4060e6 <powerButtonHandler_LowEdge+0x56>
    {
        /* Call the interrupt safe yield function here (actual function
        depends on the FreeRTOS port being used). */
		taskYIELD();
  4060e2:	4b0a      	ldr	r3, [pc, #40]	; (40610c <powerButtonHandler_LowEdge+0x7c>)
  4060e4:	4798      	blx	r3
    }
	
}
  4060e6:	3714      	adds	r7, #20
  4060e8:	46bd      	mov	sp, r7
  4060ea:	bd90      	pop	{r4, r7, pc}
  4060ec:	0040b3c9 	.word	0x0040b3c9
  4060f0:	400e0e00 	.word	0x400e0e00
  4060f4:	0040b0a1 	.word	0x0040b0a1
  4060f8:	20000f74 	.word	0x20000f74
  4060fc:	00409485 	.word	0x00409485
  406100:	20000f78 	.word	0x20000f78
  406104:	00409e61 	.word	0x00409e61
  406108:	0040b081 	.word	0x0040b081
  40610c:	004084a5 	.word	0x004084a5

00406110 <enterSleepMode>:

static void enterSleepMode()
{
  406110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406114:	b0a1      	sub	sp, #132	; 0x84
  406116:	af00      	add	r7, sp, #0
	cmd_commandPacket_t packet;
	uint32_t powerOnFlag = FALSE, chargeFlag = FALSE;
  406118:	2300      	movs	r3, #0
  40611a:	67fb      	str	r3, [r7, #124]	; 0x7c
  40611c:	2300      	movs	r3, #0
  40611e:	67bb      	str	r3, [r7, #120]	; 0x78
	drv_gpio_pin_state_t pwSwState = DRV_GPIO_PIN_STATE_HIGH;  
  406120:	2301      	movs	r3, #1
  406122:	70fb      	strb	r3, [r7, #3]
	drv_gpio_pin_state_t chargingDetect = DRV_GPIO_PIN_STATE_HIGH; 
  406124:	2301      	movs	r3, #1
  406126:	70bb      	strb	r3, [r7, #2]
	strncpy(packet.packetData,"Power\r\n",CMD_INCOMING_CMD_SIZE_MAX); 
  406128:	1d3b      	adds	r3, r7, #4
  40612a:	3301      	adds	r3, #1
  40612c:	4618      	mov	r0, r3
  40612e:	498a      	ldr	r1, [pc, #552]	; (406358 <enterSleepMode+0x248>)
  406130:	2264      	movs	r2, #100	; 0x64
  406132:	4b8a      	ldr	r3, [pc, #552]	; (40635c <enterSleepMode+0x24c>)
  406134:	4798      	blx	r3
	uint32_t loopCount = 0;
  406136:	2300      	movs	r3, #0
  406138:	677b      	str	r3, [r7, #116]	; 0x74
	packet.packetSize = strlen(packet.packetData); 
  40613a:	1d3b      	adds	r3, r7, #4
  40613c:	3301      	adds	r3, #1
  40613e:	4618      	mov	r0, r3
  406140:	4b87      	ldr	r3, [pc, #540]	; (406360 <enterSleepMode+0x250>)
  406142:	4798      	blx	r3
  406144:	4603      	mov	r3, r0
  406146:	b29b      	uxth	r3, r3
  406148:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	//Send power down message to data board
	if(cmd_queue_commandQueue != NULL)
  40614c:	4b85      	ldr	r3, [pc, #532]	; (406364 <enterSleepMode+0x254>)
  40614e:	681b      	ldr	r3, [r3, #0]
  406150:	2b00      	cmp	r3, #0
  406152:	d008      	beq.n	406166 <enterSleepMode+0x56>
	{
		if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &packet,5) != TRUE)
  406154:	4b83      	ldr	r3, [pc, #524]	; (406364 <enterSleepMode+0x254>)
  406156:	681a      	ldr	r2, [r3, #0]
  406158:	1d3b      	adds	r3, r7, #4
  40615a:	4610      	mov	r0, r2
  40615c:	4619      	mov	r1, r3
  40615e:	2205      	movs	r2, #5
  406160:	2300      	movs	r3, #0
  406162:	4e81      	ldr	r6, [pc, #516]	; (406368 <enterSleepMode+0x258>)
  406164:	47b0      	blx	r6
		{
			//this is an error, we should log it.
		}
	}	
	//turn off power to both Jacks
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
  406166:	2001      	movs	r0, #1
  406168:	2101      	movs	r1, #1
  40616a:	4b80      	ldr	r3, [pc, #512]	; (40636c <enterSleepMode+0x25c>)
  40616c:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
  40616e:	2000      	movs	r0, #0
  406170:	2101      	movs	r1, #1
  406172:	4b7e      	ldr	r3, [pc, #504]	; (40636c <enterSleepMode+0x25c>)
  406174:	4798      	blx	r3
	//wait for GPIO to go low (indication that data board is ready to sleep)
	loopCount = 0;
  406176:	2300      	movs	r3, #0
  406178:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t startTime = xTaskGetTickCount(); 
  40617a:	4b7d      	ldr	r3, [pc, #500]	; (406370 <enterSleepMode+0x260>)
  40617c:	4798      	blx	r3
  40617e:	6738      	str	r0, [r7, #112]	; 0x70
	drv_gpio_pin_state_t gpioPinState = DRV_GPIO_PIN_STATE_HIGH;  
  406180:	2301      	movs	r3, #1
  406182:	707b      	strb	r3, [r7, #1]
	vTaskDelay(2000);
  406184:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  406188:	4b7a      	ldr	r3, [pc, #488]	; (406374 <enterSleepMode+0x264>)
  40618a:	4798      	blx	r3
	while(loopCount < 30)
  40618c:	e00e      	b.n	4061ac <enterSleepMode+0x9c>
	{		
		drv_gpio_getPinState(DRV_GPIO_PIN_GPIO,&gpioPinState);
  40618e:	1c7b      	adds	r3, r7, #1
  406190:	2009      	movs	r0, #9
  406192:	4619      	mov	r1, r3
  406194:	4b78      	ldr	r3, [pc, #480]	; (406378 <enterSleepMode+0x268>)
  406196:	4798      	blx	r3
		if(gpioPinState == DRV_GPIO_PIN_STATE_LOW)
  406198:	787b      	ldrb	r3, [r7, #1]
  40619a:	2b00      	cmp	r3, #0
  40619c:	d100      	bne.n	4061a0 <enterSleepMode+0x90>
		{
			//the data board is ready to shutdown, leave the loop. 
			break;
  40619e:	e008      	b.n	4061b2 <enterSleepMode+0xa2>
		}
		vTaskDelay(10);
  4061a0:	200a      	movs	r0, #10
  4061a2:	4b74      	ldr	r3, [pc, #464]	; (406374 <enterSleepMode+0x264>)
  4061a4:	4798      	blx	r3
		loopCount++;
  4061a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  4061a8:	3301      	adds	r3, #1
  4061aa:	677b      	str	r3, [r7, #116]	; 0x74
	//wait for GPIO to go low (indication that data board is ready to sleep)
	loopCount = 0;
	uint32_t startTime = xTaskGetTickCount(); 
	drv_gpio_pin_state_t gpioPinState = DRV_GPIO_PIN_STATE_HIGH;  
	vTaskDelay(2000);
	while(loopCount < 30)
  4061ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  4061ae:	2b1d      	cmp	r3, #29
  4061b0:	d9ed      	bls.n	40618e <enterSleepMode+0x7e>
		vTaskDelay(10);
		loopCount++;
	}
	
	//turn off power to the data board
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_LOW);
  4061b2:	2004      	movs	r0, #4
  4061b4:	2100      	movs	r1, #0
  4061b6:	4b6d      	ldr	r3, [pc, #436]	; (40636c <enterSleepMode+0x25c>)
  4061b8:	4798      	blx	r3
	//wait for the button to go high
	drv_gpio_getPinState(DRV_GPIO_PIN_PWR_BTN, &pwSwState);	//poll the power switch
  4061ba:	1cfb      	adds	r3, r7, #3
  4061bc:	200a      	movs	r0, #10
  4061be:	4619      	mov	r1, r3
  4061c0:	4b6d      	ldr	r3, [pc, #436]	; (406378 <enterSleepMode+0x268>)
  4061c2:	4798      	blx	r3
	loopCount = 0;
  4061c4:	2300      	movs	r3, #0
  4061c6:	677b      	str	r3, [r7, #116]	; 0x74
	//wait up to 5 seconds for the button to go high before going to sleep. 
	while(loopCount < 50)
  4061c8:	e00e      	b.n	4061e8 <enterSleepMode+0xd8>
	{		
		vTaskDelay(100); 
  4061ca:	2064      	movs	r0, #100	; 0x64
  4061cc:	4b69      	ldr	r3, [pc, #420]	; (406374 <enterSleepMode+0x264>)
  4061ce:	4798      	blx	r3
		drv_gpio_getPinState(DRV_GPIO_PIN_PWR_BTN, &pwSwState);	//poll the power switch
  4061d0:	1cfb      	adds	r3, r7, #3
  4061d2:	200a      	movs	r0, #10
  4061d4:	4619      	mov	r1, r3
  4061d6:	4b68      	ldr	r3, [pc, #416]	; (406378 <enterSleepMode+0x268>)
  4061d8:	4798      	blx	r3
		if(pwSwState == DRV_GPIO_PIN_STATE_HIGH)
  4061da:	78fb      	ldrb	r3, [r7, #3]
  4061dc:	2b01      	cmp	r3, #1
  4061de:	d100      	bne.n	4061e2 <enterSleepMode+0xd2>
		{
			break;
  4061e0:	e005      	b.n	4061ee <enterSleepMode+0xde>
		}
		loopCount++;
  4061e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  4061e4:	3301      	adds	r3, #1
  4061e6:	677b      	str	r3, [r7, #116]	; 0x74
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_LOW);
	//wait for the button to go high
	drv_gpio_getPinState(DRV_GPIO_PIN_PWR_BTN, &pwSwState);	//poll the power switch
	loopCount = 0;
	//wait up to 5 seconds for the button to go high before going to sleep. 
	while(loopCount < 50)
  4061e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  4061ea:	2b31      	cmp	r3, #49	; 0x31
  4061ec:	d9ed      	bls.n	4061ca <enterSleepMode+0xba>
			break;
		}
		loopCount++;
	}	
	//go to sleep, and wait for power button press again. 
	PreSleepProcess();
  4061ee:	4b63      	ldr	r3, [pc, #396]	; (40637c <enterSleepMode+0x26c>)
  4061f0:	4798      	blx	r3
	while ((powerOnFlag == FALSE) && (chargeFlag == FALSE))	//Stay in sleep mode until wakeup
  4061f2:	e05b      	b.n	4062ac <enterSleepMode+0x19c>
	{
		//cpu_irq_disable();
		//pmc_enable_sleepmode(0);
		uint32_t startupInput = (1<<4 | 1<<14); //WKUP14 and WKUP4 (power button and USB detect) 
  4061f4:	f244 0310 	movw	r3, #16400	; 0x4010
  4061f8:	66fb      	str	r3, [r7, #108]	; 0x6c
		pmc_set_fast_startup_input(startupInput);
  4061fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
  4061fc:	4b60      	ldr	r3, [pc, #384]	; (406380 <enterSleepMode+0x270>)
  4061fe:	4798      	blx	r3
		//uint32_t regVal = SUPC->SUPC_SR;  
		pmc_sleep(SAM_PM_SMODE_WAIT);
  406200:	2004      	movs	r0, #4
  406202:	4b60      	ldr	r3, [pc, #384]	; (406384 <enterSleepMode+0x274>)
  406204:	4798      	blx	r3
		//drv_gpio_togglePin(DRV_GPIO_PIN_LED_BLUE);
		//Processor wakes up from sleep
		delay_ms(WAKEUP_DELAY);
  406206:	4b60      	ldr	r3, [pc, #384]	; (406388 <enterSleepMode+0x278>)
  406208:	4798      	blx	r3
  40620a:	4603      	mov	r3, r0
  40620c:	4618      	mov	r0, r3
  40620e:	f04f 0100 	mov.w	r1, #0
  406212:	4602      	mov	r2, r0
  406214:	460b      	mov	r3, r1
  406216:	ea4f 0983 	mov.w	r9, r3, lsl #2
  40621a:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
  40621e:	ea4f 0882 	mov.w	r8, r2, lsl #2
  406222:	4642      	mov	r2, r8
  406224:	464b      	mov	r3, r9
  406226:	015d      	lsls	r5, r3, #5
  406228:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  40622c:	0154      	lsls	r4, r2, #5
  40622e:	1aa4      	subs	r4, r4, r2
  406230:	eb65 0503 	sbc.w	r5, r5, r3
  406234:	1824      	adds	r4, r4, r0
  406236:	eb45 0501 	adc.w	r5, r5, r1
  40623a:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
  40623e:	ea4b 7b54 	orr.w	fp, fp, r4, lsr #29
  406242:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
  406246:	4654      	mov	r4, sl
  406248:	465d      	mov	r5, fp
  40624a:	4620      	mov	r0, r4
  40624c:	4629      	mov	r1, r5
  40624e:	f243 62af 	movw	r2, #13999	; 0x36af
  406252:	f04f 0300 	mov.w	r3, #0
  406256:	1812      	adds	r2, r2, r0
  406258:	eb43 0301 	adc.w	r3, r3, r1
  40625c:	4e4b      	ldr	r6, [pc, #300]	; (40638c <enterSleepMode+0x27c>)
  40625e:	4610      	mov	r0, r2
  406260:	4619      	mov	r1, r3
  406262:	f243 62b0 	movw	r2, #14000	; 0x36b0
  406266:	f04f 0300 	mov.w	r3, #0
  40626a:	47b0      	blx	r6
  40626c:	4602      	mov	r2, r0
  40626e:	460b      	mov	r3, r1
  406270:	4613      	mov	r3, r2
  406272:	4618      	mov	r0, r3
  406274:	4b46      	ldr	r3, [pc, #280]	; (406390 <enterSleepMode+0x280>)
  406276:	4798      	blx	r3
		drv_gpio_getPinState(DRV_GPIO_PIN_PWR_BTN, &pwSwState);	//poll the power switch
  406278:	1cfb      	adds	r3, r7, #3
  40627a:	200a      	movs	r0, #10
  40627c:	4619      	mov	r1, r3
  40627e:	4b3e      	ldr	r3, [pc, #248]	; (406378 <enterSleepMode+0x268>)
  406280:	4798      	blx	r3
		drv_gpio_getPinState(DRV_GPIO_PIN_CHRG_PG, &chargingDetect); //
  406282:	1cbb      	adds	r3, r7, #2
  406284:	2006      	movs	r0, #6
  406286:	4619      	mov	r1, r3
  406288:	4b3b      	ldr	r3, [pc, #236]	; (406378 <enterSleepMode+0x268>)
  40628a:	4798      	blx	r3
		if(pwSwState == DRV_GPIO_PIN_STATE_LOW)	//check if it is a false wakeup
  40628c:	78fb      	ldrb	r3, [r7, #3]
  40628e:	2b00      	cmp	r3, #0
  406290:	d102      	bne.n	406298 <enterSleepMode+0x188>
		{
			//The power button has been held long enough, break the loop and power on. 
			powerOnFlag = TRUE; 
  406292:	2301      	movs	r3, #1
  406294:	67fb      	str	r3, [r7, #124]	; 0x7c
  406296:	e001      	b.n	40629c <enterSleepMode+0x18c>
		}
		else
		{
			powerOnFlag = FALSE;
  406298:	2300      	movs	r3, #0
  40629a:	67fb      	str	r3, [r7, #124]	; 0x7c
		}
		if(chargingDetect == DRV_GPIO_PIN_STATE_LOW)
  40629c:	78bb      	ldrb	r3, [r7, #2]
  40629e:	2b00      	cmp	r3, #0
  4062a0:	d102      	bne.n	4062a8 <enterSleepMode+0x198>
		{
			chargeFlag = TRUE; 
  4062a2:	2301      	movs	r3, #1
  4062a4:	67bb      	str	r3, [r7, #120]	; 0x78
  4062a6:	e001      	b.n	4062ac <enterSleepMode+0x19c>
		}
		else
		{
			chargeFlag = FALSE; 
  4062a8:	2300      	movs	r3, #0
  4062aa:	67bb      	str	r3, [r7, #120]	; 0x78
		}
		loopCount++;
	}	
	//go to sleep, and wait for power button press again. 
	PreSleepProcess();
	while ((powerOnFlag == FALSE) && (chargeFlag == FALSE))	//Stay in sleep mode until wakeup
  4062ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
  4062ae:	2b00      	cmp	r3, #0
  4062b0:	d102      	bne.n	4062b8 <enterSleepMode+0x1a8>
  4062b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  4062b4:	2b00      	cmp	r3, #0
  4062b6:	d09d      	beq.n	4061f4 <enterSleepMode+0xe4>
		else
		{
			chargeFlag = FALSE; 
		}
	}
	PostSleepProcess();
  4062b8:	4b36      	ldr	r3, [pc, #216]	; (406394 <enterSleepMode+0x284>)
  4062ba:	4798      	blx	r3
	if(powerOnFlag == TRUE)
  4062bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
  4062be:	2b01      	cmp	r3, #1
  4062c0:	d13b      	bne.n	40633a <enterSleepMode+0x22a>
	{	
		//set the GPIO pin to be an input. 
		drv_gpio_setPinState(DRV_GPIO_PIN_GPIO, DRV_GPIO_PIN_STATE_PULLED_LOW);
  4062c2:	2009      	movs	r0, #9
  4062c4:	2103      	movs	r1, #3
  4062c6:	4b29      	ldr	r3, [pc, #164]	; (40636c <enterSleepMode+0x25c>)
  4062c8:	4798      	blx	r3
		//enable power to the data board
		drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_HIGH);
  4062ca:	2004      	movs	r0, #4
  4062cc:	2101      	movs	r1, #1
  4062ce:	4b27      	ldr	r3, [pc, #156]	; (40636c <enterSleepMode+0x25c>)
  4062d0:	4798      	blx	r3
		//wait for brain mcu to start up
		gpioPinState = DRV_GPIO_PIN_STATE_LOW; 
  4062d2:	2300      	movs	r3, #0
  4062d4:	707b      	strb	r3, [r7, #1]
		loopCount = 0;
  4062d6:	2300      	movs	r3, #0
  4062d8:	677b      	str	r3, [r7, #116]	; 0x74
		//set the count over the threshold so it needs to be reset by it going high again. 
		powerButtonLowCount = 16;
  4062da:	4b2f      	ldr	r3, [pc, #188]	; (406398 <enterSleepMode+0x288>)
  4062dc:	2210      	movs	r2, #16
  4062de:	601a      	str	r2, [r3, #0]
		while(loopCount < 30)
  4062e0:	e00e      	b.n	406300 <enterSleepMode+0x1f0>
		{
			drv_gpio_getPinState(DRV_GPIO_PIN_GPIO,&gpioPinState);
  4062e2:	1c7b      	adds	r3, r7, #1
  4062e4:	2009      	movs	r0, #9
  4062e6:	4619      	mov	r1, r3
  4062e8:	4b23      	ldr	r3, [pc, #140]	; (406378 <enterSleepMode+0x268>)
  4062ea:	4798      	blx	r3
			if(gpioPinState == DRV_GPIO_PIN_STATE_HIGH)
  4062ec:	787b      	ldrb	r3, [r7, #1]
  4062ee:	2b01      	cmp	r3, #1
  4062f0:	d100      	bne.n	4062f4 <enterSleepMode+0x1e4>
			{
				//the data board is powered up, break loop
				break;
  4062f2:	e008      	b.n	406306 <enterSleepMode+0x1f6>
			}
			vTaskDelay(50);
  4062f4:	2032      	movs	r0, #50	; 0x32
  4062f6:	4b1f      	ldr	r3, [pc, #124]	; (406374 <enterSleepMode+0x264>)
  4062f8:	4798      	blx	r3
			loopCount++;
  4062fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  4062fc:	3301      	adds	r3, #1
  4062fe:	677b      	str	r3, [r7, #116]	; 0x74
		//wait for brain mcu to start up
		gpioPinState = DRV_GPIO_PIN_STATE_LOW; 
		loopCount = 0;
		//set the count over the threshold so it needs to be reset by it going high again. 
		powerButtonLowCount = 16;
		while(loopCount < 30)
  406300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  406302:	2b1d      	cmp	r3, #29
  406304:	d9ed      	bls.n	4062e2 <enterSleepMode+0x1d2>
			}
			vTaskDelay(50);
			loopCount++;
		}
		//invalidate the current charger state so that it is re-evaluated
		chrg_currentChargerState = CHRG_CHARGER_STATE_INVALID_CODE; 
  406306:	4b25      	ldr	r3, [pc, #148]	; (40639c <enterSleepMode+0x28c>)
  406308:	2205      	movs	r2, #5
  40630a:	701a      	strb	r2, [r3, #0]
		//send the date time command to the brain MCU. 	
		vTaskDelay(2000);
  40630c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  406310:	4b18      	ldr	r3, [pc, #96]	; (406374 <enterSleepMode+0x264>)
  406312:	4798      	blx	r3
		cmd_sendDateTimeCommand(); 
  406314:	4b22      	ldr	r3, [pc, #136]	; (4063a0 <enterSleepMode+0x290>)
  406316:	4798      	blx	r3
		//enable power to both Jacks
		vTaskDelay(100);
  406318:	2064      	movs	r0, #100	; 0x64
  40631a:	4b16      	ldr	r3, [pc, #88]	; (406374 <enterSleepMode+0x264>)
  40631c:	4798      	blx	r3
		//TODO add switching auto-enabling to this code. 
		drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
  40631e:	2001      	movs	r0, #1
  406320:	2100      	movs	r1, #0
  406322:	4b12      	ldr	r3, [pc, #72]	; (40636c <enterSleepMode+0x25c>)
  406324:	4798      	blx	r3
		drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);	
  406326:	2000      	movs	r0, #0
  406328:	2100      	movs	r1, #0
  40632a:	4b10      	ldr	r3, [pc, #64]	; (40636c <enterSleepMode+0x25c>)
  40632c:	4798      	blx	r3
	
		//clear the events
		clearAllEvents();
  40632e:	4b1d      	ldr	r3, [pc, #116]	; (4063a4 <enterSleepMode+0x294>)
  406330:	4798      	blx	r3
		currentSystemState = SYS_STATE_POWER_ON; 
  406332:	4b1d      	ldr	r3, [pc, #116]	; (4063a8 <enterSleepMode+0x298>)
  406334:	2200      	movs	r2, #0
  406336:	701a      	strb	r2, [r3, #0]
  406338:	e00a      	b.n	406350 <enterSleepMode+0x240>
	}
	else if(chargeFlag == TRUE)
  40633a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  40633c:	2b01      	cmp	r3, #1
  40633e:	d107      	bne.n	406350 <enterSleepMode+0x240>
	{
		//invalidate the current charger state so that it is re-evaluated
		chrg_currentChargerState = CHRG_CHARGER_STATE_INVALID_CODE;
  406340:	4b16      	ldr	r3, [pc, #88]	; (40639c <enterSleepMode+0x28c>)
  406342:	2205      	movs	r2, #5
  406344:	701a      	strb	r2, [r3, #0]
		//clear the events
		clearAllEvents();
  406346:	4b17      	ldr	r3, [pc, #92]	; (4063a4 <enterSleepMode+0x294>)
  406348:	4798      	blx	r3
		currentSystemState = SYS_STATE_POWER_OFF_CHARGING;		
  40634a:	4b17      	ldr	r3, [pc, #92]	; (4063a8 <enterSleepMode+0x298>)
  40634c:	2201      	movs	r2, #1
  40634e:	701a      	strb	r2, [r3, #0]
	}
}
  406350:	3784      	adds	r7, #132	; 0x84
  406352:	46bd      	mov	sp, r7
  406354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406358:	004160e0 	.word	0x004160e0
  40635c:	0040cfe5 	.word	0x0040cfe5
  406360:	0040ced1 	.word	0x0040ced1
  406364:	20000e08 	.word	0x20000e08
  406368:	004089b1 	.word	0x004089b1
  40636c:	00405559 	.word	0x00405559
  406370:	00409459 	.word	0x00409459
  406374:	00409239 	.word	0x00409239
  406378:	0040564d 	.word	0x0040564d
  40637c:	004063ad 	.word	0x004063ad
  406380:	0040b951 	.word	0x0040b951
  406384:	0040ba2d 	.word	0x0040ba2d
  406388:	00405df5 	.word	0x00405df5
  40638c:	0040c43d 	.word	0x0040c43d
  406390:	20000001 	.word	0x20000001
  406394:	00406405 	.word	0x00406405
  406398:	20000e04 	.word	0x20000e04
  40639c:	200001e0 	.word	0x200001e0
  4063a0:	00404ea5 	.word	0x00404ea5
  4063a4:	004065e1 	.word	0x004065e1
  4063a8:	200002d4 	.word	0x200002d4

004063ac <PreSleepProcess>:
 * @brief This does the necessary processing before putting the processor to sleep
 * @param void
 * @return void
 ***********************************************************************************************/
static void PreSleepProcess()
{
  4063ac:	b580      	push	{r7, lr}
  4063ae:	af00      	add	r7, sp, #0
	drv_led_set(DRV_LED_OFF,DRV_LED_SOLID);	
  4063b0:	2007      	movs	r0, #7
  4063b2:	2101      	movs	r1, #1
  4063b4:	4b0b      	ldr	r3, [pc, #44]	; (4063e4 <PreSleepProcess+0x38>)
  4063b6:	4798      	blx	r3
	//supc_disable_brownout_detector(SUPC);	
	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;	//disable the systick timer
  4063b8:	4b0b      	ldr	r3, [pc, #44]	; (4063e8 <PreSleepProcess+0x3c>)
  4063ba:	2205      	movs	r2, #5
  4063bc:	601a      	str	r2, [r3, #0]
	brd_deInitAllUarts();
  4063be:	4b0b      	ldr	r3, [pc, #44]	; (4063ec <PreSleepProcess+0x40>)
  4063c0:	4798      	blx	r3
	drv_gpio_disable_interrupt_all();
  4063c2:	4b0b      	ldr	r3, [pc, #44]	; (4063f0 <PreSleepProcess+0x44>)
  4063c4:	4798      	blx	r3
	//disable the watchdog
	drv_gpio_config_interrupt(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_LOW_EDGE);
  4063c6:	200a      	movs	r0, #10
  4063c8:	2101      	movs	r1, #1
  4063ca:	4b0a      	ldr	r3, [pc, #40]	; (4063f4 <PreSleepProcess+0x48>)
  4063cc:	4798      	blx	r3
	drv_gpio_enable_interrupt(DRV_GPIO_PIN_PWR_BTN);
  4063ce:	200a      	movs	r0, #10
  4063d0:	4b09      	ldr	r3, [pc, #36]	; (4063f8 <PreSleepProcess+0x4c>)
  4063d2:	4798      	blx	r3
	//drv_gpio_config_interrupt(DRV_GPIO_PIN_USB_DET, DRV_GPIO_INTERRUPT_HIGH_EDGE);
	//drv_gpio_enable_interrupt(DRV_GPIO_PIN_USB_DET);
	NVIC_DisableIRQ(WDT_IRQn);
  4063d4:	2004      	movs	r0, #4
  4063d6:	4b09      	ldr	r3, [pc, #36]	; (4063fc <PreSleepProcess+0x50>)
  4063d8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(WDT_IRQn);
  4063da:	2004      	movs	r0, #4
  4063dc:	4b08      	ldr	r3, [pc, #32]	; (406400 <PreSleepProcess+0x54>)
  4063de:	4798      	blx	r3
	
}
  4063e0:	bd80      	pop	{r7, pc}
  4063e2:	bf00      	nop
  4063e4:	004073e5 	.word	0x004073e5
  4063e8:	e000e010 	.word	0xe000e010
  4063ec:	0040437d 	.word	0x0040437d
  4063f0:	00405905 	.word	0x00405905
  4063f4:	004056cd 	.word	0x004056cd
  4063f8:	00405885 	.word	0x00405885
  4063fc:	00405cf9 	.word	0x00405cf9
  406400:	00405d2d 	.word	0x00405d2d

00406404 <PostSleepProcess>:
 * @brief This does the necessary processing required after waking up the processor from sleep
 * @param void
 * @return void
 ***********************************************************************************************/
static void PostSleepProcess()
{
  406404:	b580      	push	{r7, lr}
  406406:	af00      	add	r7, sp, #0
	drv_gpio_clear_Int(DRV_GPIO_PIN_PWR_BTN);	//Clear the interrupt generated by power switch flag
  406408:	200a      	movs	r0, #10
  40640a:	4b09      	ldr	r3, [pc, #36]	; (406430 <PostSleepProcess+0x2c>)
  40640c:	4798      	blx	r3
	drv_gpio_initializeAll();
  40640e:	4b09      	ldr	r3, [pc, #36]	; (406434 <PostSleepProcess+0x30>)
  406410:	4798      	blx	r3
	drv_gpio_config_interrupt_handler(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_LOW_EDGE,powerButtonHandler_LowEdge);
  406412:	200a      	movs	r0, #10
  406414:	2101      	movs	r1, #1
  406416:	4a08      	ldr	r2, [pc, #32]	; (406438 <PostSleepProcess+0x34>)
  406418:	4b08      	ldr	r3, [pc, #32]	; (40643c <PostSleepProcess+0x38>)
  40641a:	4798      	blx	r3
	brd_initAllUarts();
  40641c:	4b08      	ldr	r3, [pc, #32]	; (406440 <PostSleepProcess+0x3c>)
  40641e:	4798      	blx	r3
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;	//enable the systick timer
  406420:	4b08      	ldr	r3, [pc, #32]	; (406444 <PostSleepProcess+0x40>)
  406422:	2207      	movs	r2, #7
  406424:	601a      	str	r2, [r3, #0]
	
	//pmc_disable_periph_clk(ID_WDT);
	NVIC_EnableIRQ(WDT_IRQn);		
  406426:	2004      	movs	r0, #4
  406428:	4b07      	ldr	r3, [pc, #28]	; (406448 <PostSleepProcess+0x44>)
  40642a:	4798      	blx	r3
}
  40642c:	bd80      	pop	{r7, pc}
  40642e:	bf00      	nop
  406430:	0040584d 	.word	0x0040584d
  406434:	00405351 	.word	0x00405351
  406438:	00406091 	.word	0x00406091
  40643c:	00405769 	.word	0x00405769
  406440:	0040434d 	.word	0x0040434d
  406444:	e000e010 	.word	0xe000e010
  406448:	00405cc9 	.word	0x00405cc9

0040644c <UsbConnected>:

static bool UsbConnected()
{
  40644c:	b580      	push	{r7, lr}
  40644e:	b082      	sub	sp, #8
  406450:	af00      	add	r7, sp, #0
	drv_gpio_pin_state_t usbConnectedState = DRV_GPIO_PIN_STATE_LOW; 
  406452:	2300      	movs	r3, #0
  406454:	71fb      	strb	r3, [r7, #7]
	drv_gpio_getPinState(DRV_GPIO_PIN_USB_DET, &usbConnectedState);
  406456:	1dfb      	adds	r3, r7, #7
  406458:	200b      	movs	r0, #11
  40645a:	4619      	mov	r1, r3
  40645c:	4b05      	ldr	r3, [pc, #20]	; (406474 <UsbConnected+0x28>)
  40645e:	4798      	blx	r3
	if(usbConnectedState == DRV_GPIO_PIN_STATE_HIGH)
  406460:	79fb      	ldrb	r3, [r7, #7]
  406462:	2b01      	cmp	r3, #1
  406464:	d101      	bne.n	40646a <UsbConnected+0x1e>
	{
		return true;
  406466:	2301      	movs	r3, #1
  406468:	e000      	b.n	40646c <UsbConnected+0x20>
	}
	else
	{
		return false;
  40646a:	2300      	movs	r3, #0
	}	
}
  40646c:	4618      	mov	r0, r3
  40646e:	3708      	adds	r7, #8
  406470:	46bd      	mov	sp, r7
  406472:	bd80      	pop	{r7, pc}
  406474:	0040564d 	.word	0x0040564d

00406478 <enterPowerDownChargeState>:

static void enterPowerDownChargeState()
{
  406478:	b590      	push	{r4, r7, lr}
  40647a:	b09f      	sub	sp, #124	; 0x7c
  40647c:	af00      	add	r7, sp, #0
	cmd_commandPacket_t packet;
	drv_gpio_pin_state_t pwSwState = DRV_GPIO_PIN_STATE_HIGH;
  40647e:	2301      	movs	r3, #1
  406480:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	strncpy(packet.packetData,"Power\r\n",CMD_INCOMING_CMD_SIZE_MAX);
  406484:	1d3b      	adds	r3, r7, #4
  406486:	3301      	adds	r3, #1
  406488:	4618      	mov	r0, r3
  40648a:	4927      	ldr	r1, [pc, #156]	; (406528 <enterPowerDownChargeState+0xb0>)
  40648c:	2264      	movs	r2, #100	; 0x64
  40648e:	4b27      	ldr	r3, [pc, #156]	; (40652c <enterPowerDownChargeState+0xb4>)
  406490:	4798      	blx	r3
	packet.packetSize = strlen(packet.packetData);
  406492:	1d3b      	adds	r3, r7, #4
  406494:	3301      	adds	r3, #1
  406496:	4618      	mov	r0, r3
  406498:	4b25      	ldr	r3, [pc, #148]	; (406530 <enterPowerDownChargeState+0xb8>)
  40649a:	4798      	blx	r3
  40649c:	4603      	mov	r3, r0
  40649e:	b29b      	uxth	r3, r3
  4064a0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	//Send power down message to data board
	if(cmd_queue_commandQueue != NULL)
  4064a4:	4b23      	ldr	r3, [pc, #140]	; (406534 <enterPowerDownChargeState+0xbc>)
  4064a6:	681b      	ldr	r3, [r3, #0]
  4064a8:	2b00      	cmp	r3, #0
  4064aa:	d008      	beq.n	4064be <enterPowerDownChargeState+0x46>
	{
		if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &packet,5) != TRUE)
  4064ac:	4b21      	ldr	r3, [pc, #132]	; (406534 <enterPowerDownChargeState+0xbc>)
  4064ae:	681a      	ldr	r2, [r3, #0]
  4064b0:	1d3b      	adds	r3, r7, #4
  4064b2:	4610      	mov	r0, r2
  4064b4:	4619      	mov	r1, r3
  4064b6:	2205      	movs	r2, #5
  4064b8:	2300      	movs	r3, #0
  4064ba:	4c1f      	ldr	r4, [pc, #124]	; (406538 <enterPowerDownChargeState+0xc0>)
  4064bc:	47a0      	blx	r4
		{
			//this is an error, we should log it.
		}
	}
	//turn off power to both Jacks
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_HIGH);
  4064be:	2001      	movs	r0, #1
  4064c0:	2101      	movs	r1, #1
  4064c2:	4b1e      	ldr	r3, [pc, #120]	; (40653c <enterPowerDownChargeState+0xc4>)
  4064c4:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_HIGH);
  4064c6:	2000      	movs	r0, #0
  4064c8:	2101      	movs	r1, #1
  4064ca:	4b1c      	ldr	r3, [pc, #112]	; (40653c <enterPowerDownChargeState+0xc4>)
  4064cc:	4798      	blx	r3
	//wait for GPIO to go low (indication that data board is ready to sleep)
	uint32_t startTime = xTaskGetTickCount();
  4064ce:	4b1c      	ldr	r3, [pc, #112]	; (406540 <enterPowerDownChargeState+0xc8>)
  4064d0:	4798      	blx	r3
  4064d2:	66f8      	str	r0, [r7, #108]	; 0x6c
	drv_gpio_pin_state_t gpioPinState = DRV_GPIO_PIN_STATE_HIGH;
  4064d4:	2301      	movs	r3, #1
  4064d6:	70fb      	strb	r3, [r7, #3]
	uint32_t loopCount = 0;	
  4064d8:	2300      	movs	r3, #0
  4064da:	677b      	str	r3, [r7, #116]	; 0x74
	vTaskDelay(2000);
  4064dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  4064e0:	4b18      	ldr	r3, [pc, #96]	; (406544 <enterPowerDownChargeState+0xcc>)
  4064e2:	4798      	blx	r3
	while(loopCount < 30)
  4064e4:	e00e      	b.n	406504 <enterPowerDownChargeState+0x8c>
	{
		drv_gpio_getPinState(DRV_GPIO_PIN_GPIO,&gpioPinState);
  4064e6:	1cfb      	adds	r3, r7, #3
  4064e8:	2009      	movs	r0, #9
  4064ea:	4619      	mov	r1, r3
  4064ec:	4b16      	ldr	r3, [pc, #88]	; (406548 <enterPowerDownChargeState+0xd0>)
  4064ee:	4798      	blx	r3
		if(gpioPinState == DRV_GPIO_PIN_STATE_LOW)
  4064f0:	78fb      	ldrb	r3, [r7, #3]
  4064f2:	2b00      	cmp	r3, #0
  4064f4:	d100      	bne.n	4064f8 <enterPowerDownChargeState+0x80>
		{
			//the data board is ready to shutdown, leave the loop.
			break;
  4064f6:	e008      	b.n	40650a <enterPowerDownChargeState+0x92>
		}
		vTaskDelay(100);
  4064f8:	2064      	movs	r0, #100	; 0x64
  4064fa:	4b12      	ldr	r3, [pc, #72]	; (406544 <enterPowerDownChargeState+0xcc>)
  4064fc:	4798      	blx	r3
		loopCount++;
  4064fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  406500:	3301      	adds	r3, #1
  406502:	677b      	str	r3, [r7, #116]	; 0x74
	//wait for GPIO to go low (indication that data board is ready to sleep)
	uint32_t startTime = xTaskGetTickCount();
	drv_gpio_pin_state_t gpioPinState = DRV_GPIO_PIN_STATE_HIGH;
	uint32_t loopCount = 0;	
	vTaskDelay(2000);
	while(loopCount < 30)
  406504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  406506:	2b1d      	cmp	r3, #29
  406508:	d9ed      	bls.n	4064e6 <enterPowerDownChargeState+0x6e>
			break;
		}
		vTaskDelay(100);
		loopCount++;
	}	
	drv_gpio_setPinState(DRV_GPIO_PIN_GPIO, DRV_GPIO_PIN_STATE_LOW);
  40650a:	2009      	movs	r0, #9
  40650c:	2100      	movs	r1, #0
  40650e:	4b0b      	ldr	r3, [pc, #44]	; (40653c <enterPowerDownChargeState+0xc4>)
  406510:	4798      	blx	r3
	//turn off power to the data board
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_LOW);
  406512:	2004      	movs	r0, #4
  406514:	2100      	movs	r1, #0
  406516:	4b09      	ldr	r3, [pc, #36]	; (40653c <enterPowerDownChargeState+0xc4>)
  406518:	4798      	blx	r3
	
	currentSystemState = SYS_STATE_POWER_OFF_CHARGING; 
  40651a:	4b0c      	ldr	r3, [pc, #48]	; (40654c <enterPowerDownChargeState+0xd4>)
  40651c:	2201      	movs	r2, #1
  40651e:	701a      	strb	r2, [r3, #0]
		
}
  406520:	377c      	adds	r7, #124	; 0x7c
  406522:	46bd      	mov	sp, r7
  406524:	bd90      	pop	{r4, r7, pc}
  406526:	bf00      	nop
  406528:	004160e0 	.word	0x004160e0
  40652c:	0040cfe5 	.word	0x0040cfe5
  406530:	0040ced1 	.word	0x0040ced1
  406534:	20000e08 	.word	0x20000e08
  406538:	004089b1 	.word	0x004089b1
  40653c:	00405559 	.word	0x00405559
  406540:	00409459 	.word	0x00409459
  406544:	00409239 	.word	0x00409239
  406548:	0040564d 	.word	0x0040564d
  40654c:	200002d4 	.word	0x200002d4

00406550 <exitPowerDownChargeState>:
static void exitPowerDownChargeState()
{
  406550:	b580      	push	{r7, lr}
  406552:	b082      	sub	sp, #8
  406554:	af00      	add	r7, sp, #0
	//set the GPIO pin to be an input.
	drv_gpio_setPinState(DRV_GPIO_PIN_GPIO, DRV_GPIO_PIN_STATE_PULLED_LOW);
  406556:	2009      	movs	r0, #9
  406558:	2103      	movs	r1, #3
  40655a:	4b1a      	ldr	r3, [pc, #104]	; (4065c4 <exitPowerDownChargeState+0x74>)
  40655c:	4798      	blx	r3
	//enable power to the data board
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_HIGH);
  40655e:	2004      	movs	r0, #4
  406560:	2101      	movs	r1, #1
  406562:	4b18      	ldr	r3, [pc, #96]	; (4065c4 <exitPowerDownChargeState+0x74>)
  406564:	4798      	blx	r3
	//wait for brain mcu to start up
	drv_gpio_pin_state_t gpioPinState = DRV_GPIO_PIN_STATE_LOW;
  406566:	2300      	movs	r3, #0
  406568:	70fb      	strb	r3, [r7, #3]
	uint32_t loopCount = 0;
  40656a:	2300      	movs	r3, #0
  40656c:	607b      	str	r3, [r7, #4]
	while(loopCount < 30)
  40656e:	e00e      	b.n	40658e <exitPowerDownChargeState+0x3e>
	{
		drv_gpio_getPinState(DRV_GPIO_PIN_GPIO,&gpioPinState);
  406570:	1cfb      	adds	r3, r7, #3
  406572:	2009      	movs	r0, #9
  406574:	4619      	mov	r1, r3
  406576:	4b14      	ldr	r3, [pc, #80]	; (4065c8 <exitPowerDownChargeState+0x78>)
  406578:	4798      	blx	r3
		if(gpioPinState == DRV_GPIO_PIN_STATE_LOW)
  40657a:	78fb      	ldrb	r3, [r7, #3]
  40657c:	2b00      	cmp	r3, #0
  40657e:	d100      	bne.n	406582 <exitPowerDownChargeState+0x32>
		{
			//the data board is ready to shutdown, leave the loop.
			break;
  406580:	e008      	b.n	406594 <exitPowerDownChargeState+0x44>
		}
		vTaskDelay(100);
  406582:	2064      	movs	r0, #100	; 0x64
  406584:	4b11      	ldr	r3, [pc, #68]	; (4065cc <exitPowerDownChargeState+0x7c>)
  406586:	4798      	blx	r3
		loopCount++;
  406588:	687b      	ldr	r3, [r7, #4]
  40658a:	3301      	adds	r3, #1
  40658c:	607b      	str	r3, [r7, #4]
	//enable power to the data board
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_HIGH);
	//wait for brain mcu to start up
	drv_gpio_pin_state_t gpioPinState = DRV_GPIO_PIN_STATE_LOW;
	uint32_t loopCount = 0;
	while(loopCount < 30)
  40658e:	687b      	ldr	r3, [r7, #4]
  406590:	2b1d      	cmp	r3, #29
  406592:	d9ed      	bls.n	406570 <exitPowerDownChargeState+0x20>
		}
		vTaskDelay(100);
		loopCount++;
	}	
	//invalidate the current charger state so that it is re-evaluated
	chrg_currentChargerState = CHRG_CHARGER_STATE_INVALID_CODE;
  406594:	4b0e      	ldr	r3, [pc, #56]	; (4065d0 <exitPowerDownChargeState+0x80>)
  406596:	2205      	movs	r2, #5
  406598:	701a      	strb	r2, [r3, #0]
	//send the date time command to the brain MCU.
	cmd_sendDateTimeCommand();
  40659a:	4b0e      	ldr	r3, [pc, #56]	; (4065d4 <exitPowerDownChargeState+0x84>)
  40659c:	4798      	blx	r3
	//enable power to both Jacks
	vTaskDelay(100);
  40659e:	2064      	movs	r0, #100	; 0x64
  4065a0:	4b0a      	ldr	r3, [pc, #40]	; (4065cc <exitPowerDownChargeState+0x7c>)
  4065a2:	4798      	blx	r3
	//TODO add switching auto-enabling to this code.
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN1, DRV_GPIO_PIN_STATE_LOW);
  4065a4:	2001      	movs	r0, #1
  4065a6:	2100      	movs	r1, #0
  4065a8:	4b06      	ldr	r3, [pc, #24]	; (4065c4 <exitPowerDownChargeState+0x74>)
  4065aa:	4798      	blx	r3
	drv_gpio_setPinState(DRV_GPIO_PIN_JC_EN2, DRV_GPIO_PIN_STATE_LOW);
  4065ac:	2000      	movs	r0, #0
  4065ae:	2100      	movs	r1, #0
  4065b0:	4b04      	ldr	r3, [pc, #16]	; (4065c4 <exitPowerDownChargeState+0x74>)
  4065b2:	4798      	blx	r3
	currentSystemState = SYS_STATE_POWER_ON; 
  4065b4:	4b08      	ldr	r3, [pc, #32]	; (4065d8 <exitPowerDownChargeState+0x88>)
  4065b6:	2200      	movs	r2, #0
  4065b8:	701a      	strb	r2, [r3, #0]
	clearAllEvents();
  4065ba:	4b08      	ldr	r3, [pc, #32]	; (4065dc <exitPowerDownChargeState+0x8c>)
  4065bc:	4798      	blx	r3
}
  4065be:	3708      	adds	r7, #8
  4065c0:	46bd      	mov	sp, r7
  4065c2:	bd80      	pop	{r7, pc}
  4065c4:	00405559 	.word	0x00405559
  4065c8:	0040564d 	.word	0x0040564d
  4065cc:	00409239 	.word	0x00409239
  4065d0:	200001e0 	.word	0x200001e0
  4065d4:	00404ea5 	.word	0x00404ea5
  4065d8:	200002d4 	.word	0x200002d4
  4065dc:	004065e1 	.word	0x004065e1

004065e0 <clearAllEvents>:

void clearAllEvents()
{
  4065e0:	b590      	push	{r4, r7, lr}
  4065e2:	b085      	sub	sp, #20
  4065e4:	af00      	add	r7, sp, #0
	uint32_t numberOfMessages = 0; 
  4065e6:	2300      	movs	r3, #0
  4065e8:	60fb      	str	r3, [r7, #12]
	if(mgr_eventQueue != NULL)
  4065ea:	4b12      	ldr	r3, [pc, #72]	; (406634 <clearAllEvents+0x54>)
  4065ec:	681b      	ldr	r3, [r3, #0]
  4065ee:	2b00      	cmp	r3, #0
  4065f0:	d005      	beq.n	4065fe <clearAllEvents+0x1e>
	{
		numberOfMessages = uxQueueMessagesWaiting(mgr_eventQueue); 
  4065f2:	4b10      	ldr	r3, [pc, #64]	; (406634 <clearAllEvents+0x54>)
  4065f4:	681b      	ldr	r3, [r3, #0]
  4065f6:	4618      	mov	r0, r3
  4065f8:	4b0f      	ldr	r3, [pc, #60]	; (406638 <clearAllEvents+0x58>)
  4065fa:	4798      	blx	r3
  4065fc:	60f8      	str	r0, [r7, #12]
	}	
	int i = 0; 
  4065fe:	2300      	movs	r3, #0
  406600:	60bb      	str	r3, [r7, #8]
	mgr_eventMessage_t eventMessage;
	if(numberOfMessages > 0)
  406602:	68fb      	ldr	r3, [r7, #12]
  406604:	2b00      	cmp	r3, #0
  406606:	d012      	beq.n	40662e <clearAllEvents+0x4e>
	{
		for(i=0;i<numberOfMessages;i++)
  406608:	2300      	movs	r3, #0
  40660a:	60bb      	str	r3, [r7, #8]
  40660c:	e00b      	b.n	406626 <clearAllEvents+0x46>
		{
			xQueueReceive(mgr_eventQueue, &(eventMessage), 10); 						
  40660e:	4b09      	ldr	r3, [pc, #36]	; (406634 <clearAllEvents+0x54>)
  406610:	681a      	ldr	r2, [r3, #0]
  406612:	1d3b      	adds	r3, r7, #4
  406614:	4610      	mov	r0, r2
  406616:	4619      	mov	r1, r3
  406618:	220a      	movs	r2, #10
  40661a:	2300      	movs	r3, #0
  40661c:	4c07      	ldr	r4, [pc, #28]	; (40663c <clearAllEvents+0x5c>)
  40661e:	47a0      	blx	r4
	}	
	int i = 0; 
	mgr_eventMessage_t eventMessage;
	if(numberOfMessages > 0)
	{
		for(i=0;i<numberOfMessages;i++)
  406620:	68bb      	ldr	r3, [r7, #8]
  406622:	3301      	adds	r3, #1
  406624:	60bb      	str	r3, [r7, #8]
  406626:	68ba      	ldr	r2, [r7, #8]
  406628:	68fb      	ldr	r3, [r7, #12]
  40662a:	429a      	cmp	r2, r3
  40662c:	d3ef      	bcc.n	40660e <clearAllEvents+0x2e>
		{
			xQueueReceive(mgr_eventQueue, &(eventMessage), 10); 						
		}
	}		
  40662e:	3714      	adds	r7, #20
  406630:	46bd      	mov	sp, r7
  406632:	bd90      	pop	{r4, r7, pc}
  406634:	20000f70 	.word	0x20000f70
  406638:	00408db5 	.word	0x00408db5
  40663c:	00408bdd 	.word	0x00408bdd

00406640 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  406640:	b580      	push	{r7, lr}
  406642:	b086      	sub	sp, #24
  406644:	af00      	add	r7, sp, #0
  406646:	60f8      	str	r0, [r7, #12]
  406648:	60b9      	str	r1, [r7, #8]
  40664a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40664c:	2300      	movs	r3, #0
  40664e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  406650:	68fb      	ldr	r3, [r7, #12]
  406652:	2b00      	cmp	r3, #0
  406654:	d002      	beq.n	40665c <_read+0x1c>
		return -1;
  406656:	f04f 33ff 	mov.w	r3, #4294967295
  40665a:	e014      	b.n	406686 <_read+0x46>
	}

	for (; len > 0; --len) {
  40665c:	e00f      	b.n	40667e <_read+0x3e>
		ptr_get(stdio_base, ptr);
  40665e:	4b0c      	ldr	r3, [pc, #48]	; (406690 <_read+0x50>)
  406660:	681b      	ldr	r3, [r3, #0]
  406662:	4a0c      	ldr	r2, [pc, #48]	; (406694 <_read+0x54>)
  406664:	6812      	ldr	r2, [r2, #0]
  406666:	4610      	mov	r0, r2
  406668:	68b9      	ldr	r1, [r7, #8]
  40666a:	4798      	blx	r3
		ptr++;
  40666c:	68bb      	ldr	r3, [r7, #8]
  40666e:	3301      	adds	r3, #1
  406670:	60bb      	str	r3, [r7, #8]
		nChars++;
  406672:	697b      	ldr	r3, [r7, #20]
  406674:	3301      	adds	r3, #1
  406676:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  406678:	687b      	ldr	r3, [r7, #4]
  40667a:	3b01      	subs	r3, #1
  40667c:	607b      	str	r3, [r7, #4]
  40667e:	687b      	ldr	r3, [r7, #4]
  406680:	2b00      	cmp	r3, #0
  406682:	dcec      	bgt.n	40665e <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  406684:	697b      	ldr	r3, [r7, #20]
}
  406686:	4618      	mov	r0, r3
  406688:	3718      	adds	r7, #24
  40668a:	46bd      	mov	sp, r7
  40668c:	bd80      	pop	{r7, pc}
  40668e:	bf00      	nop
  406690:	20008970 	.word	0x20008970
  406694:	200099c8 	.word	0x200099c8

00406698 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  406698:	b480      	push	{r7}
  40669a:	b083      	sub	sp, #12
  40669c:	af00      	add	r7, sp, #0
  40669e:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4066a0:	687b      	ldr	r3, [r7, #4]
  4066a2:	2208      	movs	r2, #8
  4066a4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4066a6:	687b      	ldr	r3, [r7, #4]
  4066a8:	2220      	movs	r2, #32
  4066aa:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4066ac:	687b      	ldr	r3, [r7, #4]
  4066ae:	2204      	movs	r2, #4
  4066b0:	601a      	str	r2, [r3, #0]
}
  4066b2:	370c      	adds	r7, #12
  4066b4:	46bd      	mov	sp, r7
  4066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066ba:	4770      	bx	lr

004066bc <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4066bc:	b580      	push	{r7, lr}
  4066be:	b084      	sub	sp, #16
  4066c0:	af00      	add	r7, sp, #0
  4066c2:	6078      	str	r0, [r7, #4]
  4066c4:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  4066c6:	2300      	movs	r3, #0
  4066c8:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4066ca:	687b      	ldr	r3, [r7, #4]
  4066cc:	f04f 32ff 	mov.w	r2, #4294967295
  4066d0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4066d2:	687b      	ldr	r3, [r7, #4]
  4066d4:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  4066d6:	6878      	ldr	r0, [r7, #4]
  4066d8:	4b0f      	ldr	r3, [pc, #60]	; (406718 <twi_master_init+0x5c>)
  4066da:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  4066dc:	6878      	ldr	r0, [r7, #4]
  4066de:	4b0f      	ldr	r3, [pc, #60]	; (40671c <twi_master_init+0x60>)
  4066e0:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4066e2:	683b      	ldr	r3, [r7, #0]
  4066e4:	685a      	ldr	r2, [r3, #4]
  4066e6:	683b      	ldr	r3, [r7, #0]
  4066e8:	681b      	ldr	r3, [r3, #0]
  4066ea:	6878      	ldr	r0, [r7, #4]
  4066ec:	4611      	mov	r1, r2
  4066ee:	461a      	mov	r2, r3
  4066f0:	4b0b      	ldr	r3, [pc, #44]	; (406720 <twi_master_init+0x64>)
  4066f2:	4798      	blx	r3
  4066f4:	4603      	mov	r3, r0
  4066f6:	2b01      	cmp	r3, #1
  4066f8:	d101      	bne.n	4066fe <twi_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  4066fa:	2301      	movs	r3, #1
  4066fc:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  4066fe:	683b      	ldr	r3, [r7, #0]
  406700:	7a5b      	ldrb	r3, [r3, #9]
  406702:	2b01      	cmp	r3, #1
  406704:	d102      	bne.n	40670c <twi_master_init+0x50>
		p_twi->TWI_CR = TWI_CR_QUICK;
  406706:	687b      	ldr	r3, [r7, #4]
  406708:	2240      	movs	r2, #64	; 0x40
  40670a:	601a      	str	r2, [r3, #0]
	}

	return status;
  40670c:	68fb      	ldr	r3, [r7, #12]
}
  40670e:	4618      	mov	r0, r3
  406710:	3710      	adds	r7, #16
  406712:	46bd      	mov	sp, r7
  406714:	bd80      	pop	{r7, pc}
  406716:	bf00      	nop
  406718:	004067e5 	.word	0x004067e5
  40671c:	00406699 	.word	0x00406699
  406720:	00406725 	.word	0x00406725

00406724 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  406724:	b480      	push	{r7}
  406726:	b087      	sub	sp, #28
  406728:	af00      	add	r7, sp, #0
  40672a:	60f8      	str	r0, [r7, #12]
  40672c:	60b9      	str	r1, [r7, #8]
  40672e:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  406730:	2300      	movs	r3, #0
  406732:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  406734:	68ba      	ldr	r2, [r7, #8]
  406736:	4b16      	ldr	r3, [pc, #88]	; (406790 <twi_set_speed+0x6c>)
  406738:	429a      	cmp	r2, r3
  40673a:	d901      	bls.n	406740 <twi_set_speed+0x1c>
		return FAIL;
  40673c:	2301      	movs	r3, #1
  40673e:	e021      	b.n	406784 <twi_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  406740:	68bb      	ldr	r3, [r7, #8]
  406742:	005b      	lsls	r3, r3, #1
  406744:	687a      	ldr	r2, [r7, #4]
  406746:	fbb2 f3f3 	udiv	r3, r2, r3
  40674a:	3b04      	subs	r3, #4
  40674c:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40674e:	e005      	b.n	40675c <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  406750:	697b      	ldr	r3, [r7, #20]
  406752:	3301      	adds	r3, #1
  406754:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  406756:	693b      	ldr	r3, [r7, #16]
  406758:	085b      	lsrs	r3, r3, #1
  40675a:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40675c:	693b      	ldr	r3, [r7, #16]
  40675e:	2bff      	cmp	r3, #255	; 0xff
  406760:	d902      	bls.n	406768 <twi_set_speed+0x44>
  406762:	697b      	ldr	r3, [r7, #20]
  406764:	2b06      	cmp	r3, #6
  406766:	d9f3      	bls.n	406750 <twi_set_speed+0x2c>
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  406768:	693b      	ldr	r3, [r7, #16]
  40676a:	b2da      	uxtb	r2, r3
  40676c:	693b      	ldr	r3, [r7, #16]
  40676e:	021b      	lsls	r3, r3, #8
  406770:	b29b      	uxth	r3, r3
  406772:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
  406774:	697b      	ldr	r3, [r7, #20]
  406776:	041b      	lsls	r3, r3, #16
  406778:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40677c:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  40677e:	68fb      	ldr	r3, [r7, #12]
  406780:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  406782:	2300      	movs	r3, #0
}
  406784:	4618      	mov	r0, r3
  406786:	371c      	adds	r7, #28
  406788:	46bd      	mov	sp, r7
  40678a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40678e:	4770      	bx	lr
  406790:	00061a80 	.word	0x00061a80

00406794 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
  406794:	b480      	push	{r7}
  406796:	b083      	sub	sp, #12
  406798:	af00      	add	r7, sp, #0
  40679a:	6078      	str	r0, [r7, #4]
  40679c:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
  40679e:	687b      	ldr	r3, [r7, #4]
  4067a0:	683a      	ldr	r2, [r7, #0]
  4067a2:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
  4067a4:	687b      	ldr	r3, [r7, #4]
  4067a6:	6a1b      	ldr	r3, [r3, #32]
}
  4067a8:	370c      	adds	r7, #12
  4067aa:	46bd      	mov	sp, r7
  4067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067b0:	4770      	bx	lr
  4067b2:	bf00      	nop

004067b4 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
  4067b4:	b480      	push	{r7}
  4067b6:	b083      	sub	sp, #12
  4067b8:	af00      	add	r7, sp, #0
  4067ba:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
  4067bc:	687b      	ldr	r3, [r7, #4]
  4067be:	6a1b      	ldr	r3, [r3, #32]
}
  4067c0:	4618      	mov	r0, r3
  4067c2:	370c      	adds	r7, #12
  4067c4:	46bd      	mov	sp, r7
  4067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067ca:	4770      	bx	lr

004067cc <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
  4067cc:	b480      	push	{r7}
  4067ce:	b083      	sub	sp, #12
  4067d0:	af00      	add	r7, sp, #0
  4067d2:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
  4067d4:	687b      	ldr	r3, [r7, #4]
  4067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  4067d8:	4618      	mov	r0, r3
  4067da:	370c      	adds	r7, #12
  4067dc:	46bd      	mov	sp, r7
  4067de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067e2:	4770      	bx	lr

004067e4 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  4067e4:	b480      	push	{r7}
  4067e6:	b083      	sub	sp, #12
  4067e8:	af00      	add	r7, sp, #0
  4067ea:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4067ec:	687b      	ldr	r3, [r7, #4]
  4067ee:	2280      	movs	r2, #128	; 0x80
  4067f0:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  4067f2:	687b      	ldr	r3, [r7, #4]
  4067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4067f6:	370c      	adds	r7, #12
  4067f8:	46bd      	mov	sp, r7
  4067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067fe:	4770      	bx	lr

00406800 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  406800:	b480      	push	{r7}
  406802:	b089      	sub	sp, #36	; 0x24
  406804:	af00      	add	r7, sp, #0
  406806:	60f8      	str	r0, [r7, #12]
  406808:	60b9      	str	r1, [r7, #8]
  40680a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40680c:	68bb      	ldr	r3, [r7, #8]
  40680e:	011a      	lsls	r2, r3, #4
  406810:	687b      	ldr	r3, [r7, #4]
  406812:	429a      	cmp	r2, r3
  406814:	d802      	bhi.n	40681c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  406816:	2310      	movs	r3, #16
  406818:	61fb      	str	r3, [r7, #28]
  40681a:	e001      	b.n	406820 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  40681c:	2308      	movs	r3, #8
  40681e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  406820:	687b      	ldr	r3, [r7, #4]
  406822:	00da      	lsls	r2, r3, #3
  406824:	69fb      	ldr	r3, [r7, #28]
  406826:	68b9      	ldr	r1, [r7, #8]
  406828:	fb01 f303 	mul.w	r3, r1, r3
  40682c:	085b      	lsrs	r3, r3, #1
  40682e:	441a      	add	r2, r3
  406830:	69fb      	ldr	r3, [r7, #28]
  406832:	68b9      	ldr	r1, [r7, #8]
  406834:	fb01 f303 	mul.w	r3, r1, r3
  406838:	fbb2 f3f3 	udiv	r3, r2, r3
  40683c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40683e:	69bb      	ldr	r3, [r7, #24]
  406840:	08db      	lsrs	r3, r3, #3
  406842:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  406844:	69bb      	ldr	r3, [r7, #24]
  406846:	f003 0307 	and.w	r3, r3, #7
  40684a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40684c:	697b      	ldr	r3, [r7, #20]
  40684e:	2b00      	cmp	r3, #0
  406850:	d003      	beq.n	40685a <usart_set_async_baudrate+0x5a>
  406852:	697b      	ldr	r3, [r7, #20]
  406854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  406858:	d301      	bcc.n	40685e <usart_set_async_baudrate+0x5e>
		return 1;
  40685a:	2301      	movs	r3, #1
  40685c:	e00f      	b.n	40687e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40685e:	69fb      	ldr	r3, [r7, #28]
  406860:	2b08      	cmp	r3, #8
  406862:	d105      	bne.n	406870 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  406864:	68fb      	ldr	r3, [r7, #12]
  406866:	685b      	ldr	r3, [r3, #4]
  406868:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40686c:	68fb      	ldr	r3, [r7, #12]
  40686e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  406870:	693b      	ldr	r3, [r7, #16]
  406872:	041a      	lsls	r2, r3, #16
  406874:	697b      	ldr	r3, [r7, #20]
  406876:	431a      	orrs	r2, r3
  406878:	68fb      	ldr	r3, [r7, #12]
  40687a:	621a      	str	r2, [r3, #32]

	return 0;
  40687c:	2300      	movs	r3, #0
}
  40687e:	4618      	mov	r0, r3
  406880:	3724      	adds	r7, #36	; 0x24
  406882:	46bd      	mov	sp, r7
  406884:	f85d 7b04 	ldr.w	r7, [sp], #4
  406888:	4770      	bx	lr
  40688a:	bf00      	nop

0040688c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40688c:	b580      	push	{r7, lr}
  40688e:	b082      	sub	sp, #8
  406890:	af00      	add	r7, sp, #0
  406892:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  406894:	6878      	ldr	r0, [r7, #4]
  406896:	4b0e      	ldr	r3, [pc, #56]	; (4068d0 <usart_reset+0x44>)
  406898:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40689a:	687b      	ldr	r3, [r7, #4]
  40689c:	2200      	movs	r2, #0
  40689e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4068a0:	687b      	ldr	r3, [r7, #4]
  4068a2:	2200      	movs	r2, #0
  4068a4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4068a6:	687b      	ldr	r3, [r7, #4]
  4068a8:	2200      	movs	r2, #0
  4068aa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4068ac:	6878      	ldr	r0, [r7, #4]
  4068ae:	4b09      	ldr	r3, [pc, #36]	; (4068d4 <usart_reset+0x48>)
  4068b0:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4068b2:	6878      	ldr	r0, [r7, #4]
  4068b4:	4b08      	ldr	r3, [pc, #32]	; (4068d8 <usart_reset+0x4c>)
  4068b6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4068b8:	6878      	ldr	r0, [r7, #4]
  4068ba:	4b08      	ldr	r3, [pc, #32]	; (4068dc <usart_reset+0x50>)
  4068bc:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4068be:	6878      	ldr	r0, [r7, #4]
  4068c0:	4b07      	ldr	r3, [pc, #28]	; (4068e0 <usart_reset+0x54>)
  4068c2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4068c4:	6878      	ldr	r0, [r7, #4]
  4068c6:	4b07      	ldr	r3, [pc, #28]	; (4068e4 <usart_reset+0x58>)
  4068c8:	4798      	blx	r3
#endif
}
  4068ca:	3708      	adds	r7, #8
  4068cc:	46bd      	mov	sp, r7
  4068ce:	bd80      	pop	{r7, pc}
  4068d0:	00406af5 	.word	0x00406af5
  4068d4:	00406985 	.word	0x00406985
  4068d8:	004069b5 	.word	0x004069b5
  4068dc:	00406a05 	.word	0x00406a05
  4068e0:	00406a3d 	.word	0x00406a3d
  4068e4:	00406a21 	.word	0x00406a21

004068e8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4068e8:	b580      	push	{r7, lr}
  4068ea:	b084      	sub	sp, #16
  4068ec:	af00      	add	r7, sp, #0
  4068ee:	60f8      	str	r0, [r7, #12]
  4068f0:	60b9      	str	r1, [r7, #8]
  4068f2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4068f4:	68f8      	ldr	r0, [r7, #12]
  4068f6:	4b1a      	ldr	r3, [pc, #104]	; (406960 <usart_init_rs232+0x78>)
  4068f8:	4798      	blx	r3

	ul_reg_val = 0;
  4068fa:	4b1a      	ldr	r3, [pc, #104]	; (406964 <usart_init_rs232+0x7c>)
  4068fc:	2200      	movs	r2, #0
  4068fe:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  406900:	68bb      	ldr	r3, [r7, #8]
  406902:	2b00      	cmp	r3, #0
  406904:	d009      	beq.n	40691a <usart_init_rs232+0x32>
  406906:	68bb      	ldr	r3, [r7, #8]
  406908:	681b      	ldr	r3, [r3, #0]
  40690a:	68f8      	ldr	r0, [r7, #12]
  40690c:	4619      	mov	r1, r3
  40690e:	687a      	ldr	r2, [r7, #4]
  406910:	4b15      	ldr	r3, [pc, #84]	; (406968 <usart_init_rs232+0x80>)
  406912:	4798      	blx	r3
  406914:	4603      	mov	r3, r0
  406916:	2b00      	cmp	r3, #0
  406918:	d001      	beq.n	40691e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40691a:	2301      	movs	r3, #1
  40691c:	e01b      	b.n	406956 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40691e:	68bb      	ldr	r3, [r7, #8]
  406920:	685a      	ldr	r2, [r3, #4]
  406922:	68bb      	ldr	r3, [r7, #8]
  406924:	689b      	ldr	r3, [r3, #8]
  406926:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  406928:	68bb      	ldr	r3, [r7, #8]
  40692a:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40692c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40692e:	68bb      	ldr	r3, [r7, #8]
  406930:	68db      	ldr	r3, [r3, #12]
  406932:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  406934:	4b0b      	ldr	r3, [pc, #44]	; (406964 <usart_init_rs232+0x7c>)
  406936:	681b      	ldr	r3, [r3, #0]
  406938:	431a      	orrs	r2, r3
  40693a:	4b0a      	ldr	r3, [pc, #40]	; (406964 <usart_init_rs232+0x7c>)
  40693c:	601a      	str	r2, [r3, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40693e:	4b09      	ldr	r3, [pc, #36]	; (406964 <usart_init_rs232+0x7c>)
  406940:	681a      	ldr	r2, [r3, #0]
  406942:	4b08      	ldr	r3, [pc, #32]	; (406964 <usart_init_rs232+0x7c>)
  406944:	601a      	str	r2, [r3, #0]

	p_usart->US_MR |= ul_reg_val;
  406946:	68fb      	ldr	r3, [r7, #12]
  406948:	685a      	ldr	r2, [r3, #4]
  40694a:	4b06      	ldr	r3, [pc, #24]	; (406964 <usart_init_rs232+0x7c>)
  40694c:	681b      	ldr	r3, [r3, #0]
  40694e:	431a      	orrs	r2, r3
  406950:	68fb      	ldr	r3, [r7, #12]
  406952:	605a      	str	r2, [r3, #4]

	return 0;
  406954:	2300      	movs	r3, #0
}
  406956:	4618      	mov	r0, r3
  406958:	3710      	adds	r7, #16
  40695a:	46bd      	mov	sp, r7
  40695c:	bd80      	pop	{r7, pc}
  40695e:	bf00      	nop
  406960:	0040688d 	.word	0x0040688d
  406964:	20000f7c 	.word	0x20000f7c
  406968:	00406801 	.word	0x00406801

0040696c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  40696c:	b480      	push	{r7}
  40696e:	b083      	sub	sp, #12
  406970:	af00      	add	r7, sp, #0
  406972:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  406974:	687b      	ldr	r3, [r7, #4]
  406976:	2240      	movs	r2, #64	; 0x40
  406978:	601a      	str	r2, [r3, #0]
}
  40697a:	370c      	adds	r7, #12
  40697c:	46bd      	mov	sp, r7
  40697e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406982:	4770      	bx	lr

00406984 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  406984:	b480      	push	{r7}
  406986:	b083      	sub	sp, #12
  406988:	af00      	add	r7, sp, #0
  40698a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40698c:	687b      	ldr	r3, [r7, #4]
  40698e:	2288      	movs	r2, #136	; 0x88
  406990:	601a      	str	r2, [r3, #0]
}
  406992:	370c      	adds	r7, #12
  406994:	46bd      	mov	sp, r7
  406996:	f85d 7b04 	ldr.w	r7, [sp], #4
  40699a:	4770      	bx	lr

0040699c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  40699c:	b480      	push	{r7}
  40699e:	b083      	sub	sp, #12
  4069a0:	af00      	add	r7, sp, #0
  4069a2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4069a4:	687b      	ldr	r3, [r7, #4]
  4069a6:	2210      	movs	r2, #16
  4069a8:	601a      	str	r2, [r3, #0]
}
  4069aa:	370c      	adds	r7, #12
  4069ac:	46bd      	mov	sp, r7
  4069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4069b2:	4770      	bx	lr

004069b4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4069b4:	b480      	push	{r7}
  4069b6:	b083      	sub	sp, #12
  4069b8:	af00      	add	r7, sp, #0
  4069ba:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4069bc:	687b      	ldr	r3, [r7, #4]
  4069be:	2224      	movs	r2, #36	; 0x24
  4069c0:	601a      	str	r2, [r3, #0]
}
  4069c2:	370c      	adds	r7, #12
  4069c4:	46bd      	mov	sp, r7
  4069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4069ca:	4770      	bx	lr

004069cc <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4069cc:	b480      	push	{r7}
  4069ce:	b083      	sub	sp, #12
  4069d0:	af00      	add	r7, sp, #0
  4069d2:	6078      	str	r0, [r7, #4]
  4069d4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4069d6:	687b      	ldr	r3, [r7, #4]
  4069d8:	683a      	ldr	r2, [r7, #0]
  4069da:	609a      	str	r2, [r3, #8]
}
  4069dc:	370c      	adds	r7, #12
  4069de:	46bd      	mov	sp, r7
  4069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4069e4:	4770      	bx	lr
  4069e6:	bf00      	nop

004069e8 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4069e8:	b480      	push	{r7}
  4069ea:	b083      	sub	sp, #12
  4069ec:	af00      	add	r7, sp, #0
  4069ee:	6078      	str	r0, [r7, #4]
  4069f0:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  4069f2:	687b      	ldr	r3, [r7, #4]
  4069f4:	683a      	ldr	r2, [r7, #0]
  4069f6:	60da      	str	r2, [r3, #12]
}
  4069f8:	370c      	adds	r7, #12
  4069fa:	46bd      	mov	sp, r7
  4069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a00:	4770      	bx	lr
  406a02:	bf00      	nop

00406a04 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  406a04:	b480      	push	{r7}
  406a06:	b083      	sub	sp, #12
  406a08:	af00      	add	r7, sp, #0
  406a0a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  406a0c:	687b      	ldr	r3, [r7, #4]
  406a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
  406a12:	601a      	str	r2, [r3, #0]
}
  406a14:	370c      	adds	r7, #12
  406a16:	46bd      	mov	sp, r7
  406a18:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a1c:	4770      	bx	lr
  406a1e:	bf00      	nop

00406a20 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  406a20:	b480      	push	{r7}
  406a22:	b083      	sub	sp, #12
  406a24:	af00      	add	r7, sp, #0
  406a26:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  406a28:	687b      	ldr	r3, [r7, #4]
  406a2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  406a2e:	601a      	str	r2, [r3, #0]
}
  406a30:	370c      	adds	r7, #12
  406a32:	46bd      	mov	sp, r7
  406a34:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a38:	4770      	bx	lr
  406a3a:	bf00      	nop

00406a3c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  406a3c:	b480      	push	{r7}
  406a3e:	b083      	sub	sp, #12
  406a40:	af00      	add	r7, sp, #0
  406a42:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  406a44:	687b      	ldr	r3, [r7, #4]
  406a46:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  406a4a:	601a      	str	r2, [r3, #0]
}
  406a4c:	370c      	adds	r7, #12
  406a4e:	46bd      	mov	sp, r7
  406a50:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a54:	4770      	bx	lr
  406a56:	bf00      	nop

00406a58 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  406a58:	b480      	push	{r7}
  406a5a:	b083      	sub	sp, #12
  406a5c:	af00      	add	r7, sp, #0
  406a5e:	6078      	str	r0, [r7, #4]
  406a60:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  406a62:	687b      	ldr	r3, [r7, #4]
  406a64:	695b      	ldr	r3, [r3, #20]
  406a66:	f003 0302 	and.w	r3, r3, #2
  406a6a:	2b00      	cmp	r3, #0
  406a6c:	d101      	bne.n	406a72 <usart_write+0x1a>
		return 1;
  406a6e:	2301      	movs	r3, #1
  406a70:	e005      	b.n	406a7e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  406a72:	683b      	ldr	r3, [r7, #0]
  406a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
  406a78:	687b      	ldr	r3, [r7, #4]
  406a7a:	61da      	str	r2, [r3, #28]
	return 0;
  406a7c:	2300      	movs	r3, #0
}
  406a7e:	4618      	mov	r0, r3
  406a80:	370c      	adds	r7, #12
  406a82:	46bd      	mov	sp, r7
  406a84:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a88:	4770      	bx	lr
  406a8a:	bf00      	nop

00406a8c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  406a8c:	b480      	push	{r7}
  406a8e:	b083      	sub	sp, #12
  406a90:	af00      	add	r7, sp, #0
  406a92:	6078      	str	r0, [r7, #4]
  406a94:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  406a96:	687b      	ldr	r3, [r7, #4]
  406a98:	695b      	ldr	r3, [r3, #20]
  406a9a:	f003 0301 	and.w	r3, r3, #1
  406a9e:	2b00      	cmp	r3, #0
  406aa0:	d101      	bne.n	406aa6 <usart_read+0x1a>
		return 1;
  406aa2:	2301      	movs	r3, #1
  406aa4:	e006      	b.n	406ab4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  406aa6:	687b      	ldr	r3, [r7, #4]
  406aa8:	699b      	ldr	r3, [r3, #24]
  406aaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
  406aae:	683b      	ldr	r3, [r7, #0]
  406ab0:	601a      	str	r2, [r3, #0]

	return 0;
  406ab2:	2300      	movs	r3, #0
}
  406ab4:	4618      	mov	r0, r3
  406ab6:	370c      	adds	r7, #12
  406ab8:	46bd      	mov	sp, r7
  406aba:	f85d 7b04 	ldr.w	r7, [sp], #4
  406abe:	4770      	bx	lr

00406ac0 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  406ac0:	b480      	push	{r7}
  406ac2:	b083      	sub	sp, #12
  406ac4:	af00      	add	r7, sp, #0
  406ac6:	6078      	str	r0, [r7, #4]
  406ac8:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  406aca:	bf00      	nop
  406acc:	687b      	ldr	r3, [r7, #4]
  406ace:	695b      	ldr	r3, [r3, #20]
  406ad0:	f003 0301 	and.w	r3, r3, #1
  406ad4:	2b00      	cmp	r3, #0
  406ad6:	d0f9      	beq.n	406acc <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  406ad8:	687b      	ldr	r3, [r7, #4]
  406ada:	699b      	ldr	r3, [r3, #24]
  406adc:	f3c3 0208 	ubfx	r2, r3, #0, #9
  406ae0:	683b      	ldr	r3, [r7, #0]
  406ae2:	601a      	str	r2, [r3, #0]

	return 0;
  406ae4:	2300      	movs	r3, #0
}
  406ae6:	4618      	mov	r0, r3
  406ae8:	370c      	adds	r7, #12
  406aea:	46bd      	mov	sp, r7
  406aec:	f85d 7b04 	ldr.w	r7, [sp], #4
  406af0:	4770      	bx	lr
  406af2:	bf00      	nop

00406af4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  406af4:	b480      	push	{r7}
  406af6:	b083      	sub	sp, #12
  406af8:	af00      	add	r7, sp, #0
  406afa:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  406afc:	687b      	ldr	r3, [r7, #4]
  406afe:	4a04      	ldr	r2, [pc, #16]	; (406b10 <usart_disable_writeprotect+0x1c>)
  406b00:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  406b04:	370c      	adds	r7, #12
  406b06:	46bd      	mov	sp, r7
  406b08:	f85d 7b04 	ldr.w	r7, [sp], #4
  406b0c:	4770      	bx	lr
  406b0e:	bf00      	nop
  406b10:	55534100 	.word	0x55534100

00406b14 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  406b14:	b480      	push	{r7}
  406b16:	b083      	sub	sp, #12
  406b18:	af00      	add	r7, sp, #0
  406b1a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  406b1c:	687b      	ldr	r3, [r7, #4]
  406b1e:	2b07      	cmp	r3, #7
  406b20:	d825      	bhi.n	406b6e <osc_get_rate+0x5a>
  406b22:	a201      	add	r2, pc, #4	; (adr r2, 406b28 <osc_get_rate+0x14>)
  406b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406b28:	00406b49 	.word	0x00406b49
  406b2c:	00406b4f 	.word	0x00406b4f
  406b30:	00406b55 	.word	0x00406b55
  406b34:	00406b5b 	.word	0x00406b5b
  406b38:	00406b5f 	.word	0x00406b5f
  406b3c:	00406b63 	.word	0x00406b63
  406b40:	00406b67 	.word	0x00406b67
  406b44:	00406b6b 	.word	0x00406b6b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  406b48:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  406b4c:	e010      	b.n	406b70 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  406b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406b52:	e00d      	b.n	406b70 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  406b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406b58:	e00a      	b.n	406b70 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  406b5a:	4b08      	ldr	r3, [pc, #32]	; (406b7c <osc_get_rate+0x68>)
  406b5c:	e008      	b.n	406b70 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  406b5e:	4b08      	ldr	r3, [pc, #32]	; (406b80 <osc_get_rate+0x6c>)
  406b60:	e006      	b.n	406b70 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  406b62:	4b08      	ldr	r3, [pc, #32]	; (406b84 <osc_get_rate+0x70>)
  406b64:	e004      	b.n	406b70 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  406b66:	4b08      	ldr	r3, [pc, #32]	; (406b88 <osc_get_rate+0x74>)
  406b68:	e002      	b.n	406b70 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  406b6a:	4b07      	ldr	r3, [pc, #28]	; (406b88 <osc_get_rate+0x74>)
  406b6c:	e000      	b.n	406b70 <osc_get_rate+0x5c>
	}

	return 0;
  406b6e:	2300      	movs	r3, #0
}
  406b70:	4618      	mov	r0, r3
  406b72:	370c      	adds	r7, #12
  406b74:	46bd      	mov	sp, r7
  406b76:	f85d 7b04 	ldr.w	r7, [sp], #4
  406b7a:	4770      	bx	lr
  406b7c:	003d0900 	.word	0x003d0900
  406b80:	007a1200 	.word	0x007a1200
  406b84:	00b71b00 	.word	0x00b71b00
  406b88:	00f42400 	.word	0x00f42400

00406b8c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  406b8c:	b580      	push	{r7, lr}
  406b8e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  406b90:	2006      	movs	r0, #6
  406b92:	4b04      	ldr	r3, [pc, #16]	; (406ba4 <sysclk_get_main_hz+0x18>)
  406b94:	4798      	blx	r3
  406b96:	4602      	mov	r2, r0
  406b98:	4613      	mov	r3, r2
  406b9a:	011b      	lsls	r3, r3, #4
  406b9c:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  406b9e:	4618      	mov	r0, r3
  406ba0:	bd80      	pop	{r7, pc}
  406ba2:	bf00      	nop
  406ba4:	00406b15 	.word	0x00406b15

00406ba8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  406ba8:	b580      	push	{r7, lr}
  406baa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  406bac:	4b02      	ldr	r3, [pc, #8]	; (406bb8 <sysclk_get_cpu_hz+0x10>)
  406bae:	4798      	blx	r3
  406bb0:	4603      	mov	r3, r0
  406bb2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  406bb4:	4618      	mov	r0, r3
  406bb6:	bd80      	pop	{r7, pc}
  406bb8:	00406b8d 	.word	0x00406b8d

00406bbc <drv_i2c_init>:
//global variables
volatile drv_i2c_memory_buf_t twiMemBuf[2]; //2 TWIs, 2 buffers
 
/*	Function definitions	*/
int drv_i2c_init(drv_twi_config_t* twi_config)
{
  406bbc:	b580      	push	{r7, lr}
  406bbe:	b084      	sub	sp, #16
  406bc0:	af00      	add	r7, sp, #0
  406bc2:	6078      	str	r0, [r7, #4]
	int status = STATUS_PASS;
  406bc4:	2300      	movs	r3, #0
  406bc6:	60fb      	str	r3, [r7, #12]
	
	if (twi_config->p_i2c == TWI0)
  406bc8:	687b      	ldr	r3, [r7, #4]
  406bca:	681a      	ldr	r2, [r3, #0]
  406bcc:	4b23      	ldr	r3, [pc, #140]	; (406c5c <drv_i2c_init+0xa0>)
  406bce:	429a      	cmp	r2, r3
  406bd0:	d10d      	bne.n	406bee <drv_i2c_init+0x32>
	{
		twi_config->mem_index = 0;
  406bd2:	687b      	ldr	r3, [r7, #4]
  406bd4:	2200      	movs	r2, #0
  406bd6:	615a      	str	r2, [r3, #20]
 		gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);	//TODO: use drv_gpio to do this.
  406bd8:	2003      	movs	r0, #3
  406bda:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  406bde:	4b20      	ldr	r3, [pc, #128]	; (406c60 <drv_i2c_init+0xa4>)
  406be0:	4798      	blx	r3
 		gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  406be2:	2004      	movs	r0, #4
  406be4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  406be8:	4b1d      	ldr	r3, [pc, #116]	; (406c60 <drv_i2c_init+0xa4>)
  406bea:	4798      	blx	r3
  406bec:	e014      	b.n	406c18 <drv_i2c_init+0x5c>
	}
	else if (twi_config->p_i2c == TWI1)
  406bee:	687b      	ldr	r3, [r7, #4]
  406bf0:	681a      	ldr	r2, [r3, #0]
  406bf2:	4b1c      	ldr	r3, [pc, #112]	; (406c64 <drv_i2c_init+0xa8>)
  406bf4:	429a      	cmp	r2, r3
  406bf6:	d10d      	bne.n	406c14 <drv_i2c_init+0x58>
	{
		twi_config->mem_index = 1;
  406bf8:	687b      	ldr	r3, [r7, #4]
  406bfa:	2201      	movs	r2, #1
  406bfc:	615a      	str	r2, [r3, #20]
 		gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
  406bfe:	2024      	movs	r0, #36	; 0x24
  406c00:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406c04:	4b16      	ldr	r3, [pc, #88]	; (406c60 <drv_i2c_init+0xa4>)
  406c06:	4798      	blx	r3
 		gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
  406c08:	2025      	movs	r0, #37	; 0x25
  406c0a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406c0e:	4b14      	ldr	r3, [pc, #80]	; (406c60 <drv_i2c_init+0xa4>)
  406c10:	4798      	blx	r3
  406c12:	e001      	b.n	406c18 <drv_i2c_init+0x5c>
	}
	else
	{
		return STATUS_FAIL;	//return error
  406c14:	2301      	movs	r3, #1
  406c16:	e01c      	b.n	406c52 <drv_i2c_init+0x96>
	}
	
	//update the master clock value to current cpu_hz before initializing
	twi_config->twi_options.master_clk = sysclk_get_cpu_hz();
  406c18:	4b13      	ldr	r3, [pc, #76]	; (406c68 <drv_i2c_init+0xac>)
  406c1a:	4798      	blx	r3
  406c1c:	4602      	mov	r2, r0
  406c1e:	687b      	ldr	r3, [r7, #4]
  406c20:	605a      	str	r2, [r3, #4]
	}
	/* Configure the TWI bus parameters.  Do this after calling freertos_twi_master_init(). */
	twi_set_speed(twi_config->p_i2c, twi_config->twi_options.speed, twi_config->twi_options.master_clk);
	
	#else
	pmc_enable_periph_clk(twi_config->peripheral_Id);	//enable clock for I2C
  406c22:	687b      	ldr	r3, [r7, #4]
  406c24:	699b      	ldr	r3, [r3, #24]
  406c26:	4618      	mov	r0, r3
  406c28:	4b10      	ldr	r3, [pc, #64]	; (406c6c <drv_i2c_init+0xb0>)
  406c2a:	4798      	blx	r3
	status = twi_master_init(twi_config->p_i2c, &twi_config->twi_options);	//can also use twi_master_setup
  406c2c:	687b      	ldr	r3, [r7, #4]
  406c2e:	681a      	ldr	r2, [r3, #0]
  406c30:	687b      	ldr	r3, [r7, #4]
  406c32:	3304      	adds	r3, #4
  406c34:	4610      	mov	r0, r2
  406c36:	4619      	mov	r1, r3
  406c38:	4b0d      	ldr	r3, [pc, #52]	; (406c70 <drv_i2c_init+0xb4>)
  406c3a:	4798      	blx	r3
  406c3c:	4603      	mov	r3, r0
  406c3e:	60fb      	str	r3, [r7, #12]
	if (status != TWI_SUCCESS)
  406c40:	68fb      	ldr	r3, [r7, #12]
  406c42:	2b00      	cmp	r3, #0
  406c44:	d004      	beq.n	406c50 <drv_i2c_init+0x94>
	{
		puts("Failed to initialize as master.\r\n");
  406c46:	480b      	ldr	r0, [pc, #44]	; (406c74 <drv_i2c_init+0xb8>)
  406c48:	4b0b      	ldr	r3, [pc, #44]	; (406c78 <drv_i2c_init+0xbc>)
  406c4a:	4798      	blx	r3
		return STATUS_FAIL;	//return error
  406c4c:	2301      	movs	r3, #1
  406c4e:	e000      	b.n	406c52 <drv_i2c_init+0x96>
	}
	#endif
	
	return STATUS_PASS;
  406c50:	2300      	movs	r3, #0
}
  406c52:	4618      	mov	r0, r3
  406c54:	3710      	adds	r7, #16
  406c56:	46bd      	mov	sp, r7
  406c58:	bd80      	pop	{r7, pc}
  406c5a:	bf00      	nop
  406c5c:	40018000 	.word	0x40018000
  406c60:	0040b1cd 	.word	0x0040b1cd
  406c64:	4001c000 	.word	0x4001c000
  406c68:	00406ba9 	.word	0x00406ba9
  406c6c:	0040b809 	.word	0x0040b809
  406c70:	004066bd 	.word	0x004066bd
  406c74:	004160e8 	.word	0x004160e8
  406c78:	0040cc85 	.word	0x0040cc85

00406c7c <drv_i2c_write>:

int drv_i2c_write(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t data)
{
  406c7c:	b580      	push	{r7, lr}
  406c7e:	b088      	sub	sp, #32
  406c80:	af00      	add	r7, sp, #0
  406c82:	6078      	str	r0, [r7, #4]
  406c84:	4613      	mov	r3, r2
  406c86:	460a      	mov	r2, r1
  406c88:	70fa      	strb	r2, [r7, #3]
  406c8a:	70bb      	strb	r3, [r7, #2]
	status_t status = STATUS_FAIL;
  406c8c:	2301      	movs	r3, #1
  406c8e:	77fb      	strb	r3, [r7, #31]
	//Write one byte to desired register
	uint8_t dataPacket[2] = {0};
  406c90:	2300      	movs	r3, #0
  406c92:	83bb      	strh	r3, [r7, #28]
	twi_packet_t packet;
	dataPacket[0] = reg;
  406c94:	78fb      	ldrb	r3, [r7, #3]
  406c96:	773b      	strb	r3, [r7, #28]
	#ifdef ENABLE_TWO_BYTE_WRITE
	dataPacket[1] = data;
  406c98:	78bb      	ldrb	r3, [r7, #2]
  406c9a:	777b      	strb	r3, [r7, #29]
	packet.length = 2;
  406c9c:	2302      	movs	r3, #2
  406c9e:	617b      	str	r3, [r7, #20]
	#else
	packet.length = 1;
	#endif
	packet.buffer = &dataPacket[0];
  406ca0:	f107 031c 	add.w	r3, r7, #28
  406ca4:	613b      	str	r3, [r7, #16]
	packet.chip = (uint32_t) slave_twi_config->address;
  406ca6:	687b      	ldr	r3, [r7, #4]
  406ca8:	685b      	ldr	r3, [r3, #4]
  406caa:	b2db      	uxtb	r3, r3
  406cac:	763b      	strb	r3, [r7, #24]
	packet.addr[0] = 0x00;	//no internal register should be assigned
  406cae:	2300      	movs	r3, #0
  406cb0:	723b      	strb	r3, [r7, #8]
	packet.addr[1] = 0x00;
  406cb2:	2300      	movs	r3, #0
  406cb4:	727b      	strb	r3, [r7, #9]
	packet.addr[2] = 0x00;
  406cb6:	2300      	movs	r3, #0
  406cb8:	72bb      	strb	r3, [r7, #10]
	packet.addr_length = 0;	
  406cba:	2300      	movs	r3, #0
  406cbc:	60fb      	str	r3, [r7, #12]
	//status = twi_master_write(slave_twi_config->drv_twi_options->p_i2c, &packet);
	//if (status != TWI_SUCCESS)
	//{
		//return STATUS_FAIL;
	//}
	status = twi_write(slave_twi_config->drv_twi_options->p_i2c, &packet);
  406cbe:	687b      	ldr	r3, [r7, #4]
  406cc0:	689b      	ldr	r3, [r3, #8]
  406cc2:	681a      	ldr	r2, [r3, #0]
  406cc4:	f107 0308 	add.w	r3, r7, #8
  406cc8:	4610      	mov	r0, r2
  406cca:	4619      	mov	r1, r3
  406ccc:	4b0b      	ldr	r3, [pc, #44]	; (406cfc <drv_i2c_write+0x80>)
  406cce:	4798      	blx	r3
  406cd0:	4603      	mov	r3, r0
  406cd2:	77fb      	strb	r3, [r7, #31]
	if (status != TWI_SUCCESS)
  406cd4:	7ffb      	ldrb	r3, [r7, #31]
  406cd6:	2b00      	cmp	r3, #0
  406cd8:	d006      	beq.n	406ce8 <drv_i2c_write+0x6c>
	{
		assertBusError(slave_twi_config->drv_twi_options);
  406cda:	687b      	ldr	r3, [r7, #4]
  406cdc:	689b      	ldr	r3, [r3, #8]
  406cde:	4618      	mov	r0, r3
  406ce0:	4b07      	ldr	r3, [pc, #28]	; (406d00 <drv_i2c_write+0x84>)
  406ce2:	4798      	blx	r3
		return STATUS_FAIL;
  406ce4:	2301      	movs	r3, #1
  406ce6:	e005      	b.n	406cf4 <drv_i2c_write+0x78>
	}
	#endif
	assertBusHealthy(slave_twi_config->drv_twi_options);
  406ce8:	687b      	ldr	r3, [r7, #4]
  406cea:	689b      	ldr	r3, [r3, #8]
  406cec:	4618      	mov	r0, r3
  406cee:	4b05      	ldr	r3, [pc, #20]	; (406d04 <drv_i2c_write+0x88>)
  406cf0:	4798      	blx	r3
	return STATUS_PASS;
  406cf2:	2300      	movs	r3, #0
}
  406cf4:	4618      	mov	r0, r3
  406cf6:	3720      	adds	r7, #32
  406cf8:	46bd      	mov	sp, r7
  406cfa:	bd80      	pop	{r7, pc}
  406cfc:	00406e0d 	.word	0x00406e0d
  406d00:	00407061 	.word	0x00407061
  406d04:	00407279 	.word	0x00407279

00406d08 <drv_i2c_read>:

int drv_i2c_read(slave_twi_config_t* slave_twi_config, uint8_t reg, uint8_t* data, uint8_t length)
{
  406d08:	b580      	push	{r7, lr}
  406d0a:	b08a      	sub	sp, #40	; 0x28
  406d0c:	af00      	add	r7, sp, #0
  406d0e:	60f8      	str	r0, [r7, #12]
  406d10:	607a      	str	r2, [r7, #4]
  406d12:	460a      	mov	r2, r1
  406d14:	72fa      	strb	r2, [r7, #11]
  406d16:	72bb      	strb	r3, [r7, #10]
	uint8_t status = STATUS_FAIL;
  406d18:	2301      	movs	r3, #1
  406d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//Write the address of register to read from
	uint8_t dataPacket[2] = {0};
  406d1e:	2300      	movs	r3, #0
  406d20:	84bb      	strh	r3, [r7, #36]	; 0x24
	twi_packet_t packet;
	dataPacket[0] = reg;
  406d22:	7afb      	ldrb	r3, [r7, #11]
  406d24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet.buffer = dataPacket;
  406d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
  406d2c:	61bb      	str	r3, [r7, #24]
	packet.length = 1;
  406d2e:	2301      	movs	r3, #1
  406d30:	61fb      	str	r3, [r7, #28]
	packet.chip = (uint32_t) slave_twi_config->address;
  406d32:	68fb      	ldr	r3, [r7, #12]
  406d34:	685b      	ldr	r3, [r3, #4]
  406d36:	b2db      	uxtb	r3, r3
  406d38:	f887 3020 	strb.w	r3, [r7, #32]
	packet.addr[0] = 0x00;
  406d3c:	2300      	movs	r3, #0
  406d3e:	743b      	strb	r3, [r7, #16]
	packet.addr[1] = 0x00;
  406d40:	2300      	movs	r3, #0
  406d42:	747b      	strb	r3, [r7, #17]
	packet.addr[2] = 0x00;
  406d44:	2300      	movs	r3, #0
  406d46:	74bb      	strb	r3, [r7, #18]
	packet.addr_length = 0;
  406d48:	2300      	movs	r3, #0
  406d4a:	617b      	str	r3, [r7, #20]
	//}
	//#endif
	
	//delay_ms(1);
	//initialize the read sequence
	packet.buffer = data;
  406d4c:	687b      	ldr	r3, [r7, #4]
  406d4e:	61bb      	str	r3, [r7, #24]
	packet.length = length;
  406d50:	7abb      	ldrb	r3, [r7, #10]
  406d52:	61fb      	str	r3, [r7, #28]
	packet.addr[0] = reg;
  406d54:	7afb      	ldrb	r3, [r7, #11]
  406d56:	743b      	strb	r3, [r7, #16]
	packet.addr[1] = 0x00;
  406d58:	2300      	movs	r3, #0
  406d5a:	747b      	strb	r3, [r7, #17]
	packet.addr[2] = 0x00;
  406d5c:	2300      	movs	r3, #0
  406d5e:	74bb      	strb	r3, [r7, #18]
	packet.addr_length = 1;
  406d60:	2301      	movs	r3, #1
  406d62:	617b      	str	r3, [r7, #20]
		return STATUS_FAIL;
	}
	
	#else
	#ifdef ENABLE_MULTI_BYTE_READ 
	status = twi_read(slave_twi_config->drv_twi_options->p_i2c, &packet);
  406d64:	68fb      	ldr	r3, [r7, #12]
  406d66:	689b      	ldr	r3, [r3, #8]
  406d68:	681a      	ldr	r2, [r3, #0]
  406d6a:	f107 0310 	add.w	r3, r7, #16
  406d6e:	4610      	mov	r0, r2
  406d70:	4619      	mov	r1, r3
  406d72:	4b0d      	ldr	r3, [pc, #52]	; (406da8 <drv_i2c_read+0xa0>)
  406d74:	4798      	blx	r3
  406d76:	4603      	mov	r3, r0
  406d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != TWI_SUCCESS)
  406d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  406d80:	2b00      	cmp	r3, #0
  406d82:	d006      	beq.n	406d92 <drv_i2c_read+0x8a>
	{
		assertBusError(slave_twi_config->drv_twi_options);
  406d84:	68fb      	ldr	r3, [r7, #12]
  406d86:	689b      	ldr	r3, [r3, #8]
  406d88:	4618      	mov	r0, r3
  406d8a:	4b08      	ldr	r3, [pc, #32]	; (406dac <drv_i2c_read+0xa4>)
  406d8c:	4798      	blx	r3
		return STATUS_FAIL;
  406d8e:	2301      	movs	r3, #1
  406d90:	e005      	b.n	406d9e <drv_i2c_read+0x96>
			return STATUS_FAIL;
		}
	}
	#endif
	#endif
	assertBusHealthy(slave_twi_config->drv_twi_options);
  406d92:	68fb      	ldr	r3, [r7, #12]
  406d94:	689b      	ldr	r3, [r3, #8]
  406d96:	4618      	mov	r0, r3
  406d98:	4b05      	ldr	r3, [pc, #20]	; (406db0 <drv_i2c_read+0xa8>)
  406d9a:	4798      	blx	r3
	return STATUS_PASS;
  406d9c:	2300      	movs	r3, #0
}
  406d9e:	4618      	mov	r0, r3
  406da0:	3728      	adds	r7, #40	; 0x28
  406da2:	46bd      	mov	sp, r7
  406da4:	bd80      	pop	{r7, pc}
  406da6:	bf00      	nop
  406da8:	00406f39 	.word	0x00406f39
  406dac:	00407061 	.word	0x00407061
  406db0:	00407279 	.word	0x00407279

00406db4 <twi_mk_addr>:
	twi_disable_interrupt(twi_config->p_i2c, ul_sources);
	return STATUS_PASS;
}

static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  406db4:	b480      	push	{r7}
  406db6:	b085      	sub	sp, #20
  406db8:	af00      	add	r7, sp, #0
  406dba:	6078      	str	r0, [r7, #4]
  406dbc:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  406dbe:	683b      	ldr	r3, [r7, #0]
  406dc0:	2b00      	cmp	r3, #0
  406dc2:	d101      	bne.n	406dc8 <twi_mk_addr+0x14>
	return 0;
  406dc4:	2300      	movs	r3, #0
  406dc6:	e01b      	b.n	406e00 <twi_mk_addr+0x4c>

	val = addr[0];
  406dc8:	687b      	ldr	r3, [r7, #4]
  406dca:	781b      	ldrb	r3, [r3, #0]
  406dcc:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  406dce:	683b      	ldr	r3, [r7, #0]
  406dd0:	2b01      	cmp	r3, #1
  406dd2:	dd08      	ble.n	406de6 <twi_mk_addr+0x32>
		val <<= 8;
  406dd4:	68fb      	ldr	r3, [r7, #12]
  406dd6:	021b      	lsls	r3, r3, #8
  406dd8:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  406dda:	687b      	ldr	r3, [r7, #4]
  406ddc:	3301      	adds	r3, #1
  406dde:	781b      	ldrb	r3, [r3, #0]
  406de0:	68fa      	ldr	r2, [r7, #12]
  406de2:	4313      	orrs	r3, r2
  406de4:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  406de6:	683b      	ldr	r3, [r7, #0]
  406de8:	2b02      	cmp	r3, #2
  406dea:	dd08      	ble.n	406dfe <twi_mk_addr+0x4a>
		val <<= 8;
  406dec:	68fb      	ldr	r3, [r7, #12]
  406dee:	021b      	lsls	r3, r3, #8
  406df0:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  406df2:	687b      	ldr	r3, [r7, #4]
  406df4:	3302      	adds	r3, #2
  406df6:	781b      	ldrb	r3, [r3, #0]
  406df8:	68fa      	ldr	r2, [r7, #12]
  406dfa:	4313      	orrs	r3, r2
  406dfc:	60fb      	str	r3, [r7, #12]
	}
	return val;
  406dfe:	68fb      	ldr	r3, [r7, #12]
}
  406e00:	4618      	mov	r0, r3
  406e02:	3714      	adds	r7, #20
  406e04:	46bd      	mov	sp, r7
  406e06:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e0a:	4770      	bx	lr

00406e0c <twi_write>:

uint32_t twi_write(Twi *p_twi, twi_packet_t *p_packet)
{
  406e0c:	b580      	push	{r7, lr}
  406e0e:	b086      	sub	sp, #24
  406e10:	af00      	add	r7, sp, #0
  406e12:	6078      	str	r0, [r7, #4]
  406e14:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  406e16:	683b      	ldr	r3, [r7, #0]
  406e18:	68db      	ldr	r3, [r3, #12]
  406e1a:	613b      	str	r3, [r7, #16]
	uint8_t *buffer = p_packet->buffer;
  406e1c:	683b      	ldr	r3, [r7, #0]
  406e1e:	689b      	ldr	r3, [r3, #8]
  406e20:	60fb      	str	r3, [r7, #12]
	uint32_t timeout = TWI_TIMEOUT;
  406e22:	f643 2398 	movw	r3, #15000	; 0x3a98
  406e26:	617b      	str	r3, [r7, #20]

	/* Check argument */
	if (cnt == 0) {
  406e28:	693b      	ldr	r3, [r7, #16]
  406e2a:	2b00      	cmp	r3, #0
  406e2c:	d101      	bne.n	406e32 <twi_write+0x26>
		return TWI_INVALID_ARGUMENT;
  406e2e:	2301      	movs	r3, #1
  406e30:	e07c      	b.n	406f2c <twi_write+0x120>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  406e32:	687b      	ldr	r3, [r7, #4]
  406e34:	2200      	movs	r2, #0
  406e36:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  406e38:	683b      	ldr	r3, [r7, #0]
  406e3a:	7c1b      	ldrb	r3, [r3, #16]
  406e3c:	041b      	lsls	r3, r3, #16
  406e3e:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  406e42:	683b      	ldr	r3, [r7, #0]
  406e44:	685b      	ldr	r3, [r3, #4]
  406e46:	021b      	lsls	r3, r3, #8
  406e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  406e4c:	431a      	orrs	r2, r3
  406e4e:	687b      	ldr	r3, [r7, #4]
  406e50:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  406e52:	687b      	ldr	r3, [r7, #4]
  406e54:	2200      	movs	r2, #0
  406e56:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  406e58:	683a      	ldr	r2, [r7, #0]
  406e5a:	683b      	ldr	r3, [r7, #0]
  406e5c:	685b      	ldr	r3, [r3, #4]
  406e5e:	4610      	mov	r0, r2
  406e60:	4619      	mov	r1, r3
  406e62:	4b34      	ldr	r3, [pc, #208]	; (406f34 <twi_write+0x128>)
  406e64:	4798      	blx	r3
  406e66:	4602      	mov	r2, r0
  406e68:	687b      	ldr	r3, [r7, #4]
  406e6a:	60da      	str	r2, [r3, #12]

	/* Send one bytes */
		status = p_twi->TWI_SR;
  406e6c:	687b      	ldr	r3, [r7, #4]
  406e6e:	6a1b      	ldr	r3, [r3, #32]
  406e70:	60bb      	str	r3, [r7, #8]
		if (status & TWI_SR_NACK) {
  406e72:	68bb      	ldr	r3, [r7, #8]
  406e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406e78:	2b00      	cmp	r3, #0
  406e7a:	d001      	beq.n	406e80 <twi_write+0x74>
			return TWI_RECEIVE_NACK;
  406e7c:	2305      	movs	r3, #5
  406e7e:	e055      	b.n	406f2c <twi_write+0x120>
		}
		p_twi->TWI_THR = *buffer++;
  406e80:	68fb      	ldr	r3, [r7, #12]
  406e82:	1c5a      	adds	r2, r3, #1
  406e84:	60fa      	str	r2, [r7, #12]
  406e86:	781b      	ldrb	r3, [r3, #0]
  406e88:	461a      	mov	r2, r3
  406e8a:	687b      	ldr	r3, [r7, #4]
  406e8c:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(p_twi->TWI_SR & TWI_SR_TXRDY))
  406e8e:	e005      	b.n	406e9c <twi_write+0x90>
		{
			if (!(timeout--))
  406e90:	697b      	ldr	r3, [r7, #20]
  406e92:	1e5a      	subs	r2, r3, #1
  406e94:	617a      	str	r2, [r7, #20]
  406e96:	2b00      	cmp	r3, #0
  406e98:	d100      	bne.n	406e9c <twi_write+0x90>
			{
				break;
  406e9a:	e005      	b.n	406ea8 <twi_write+0x9c>
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}
		p_twi->TWI_THR = *buffer++;
		while (!(p_twi->TWI_SR & TWI_SR_TXRDY))
  406e9c:	687b      	ldr	r3, [r7, #4]
  406e9e:	6a1b      	ldr	r3, [r3, #32]
  406ea0:	f003 0304 	and.w	r3, r3, #4
  406ea4:	2b00      	cmp	r3, #0
  406ea6:	d0f3      	beq.n	406e90 <twi_write+0x84>
			if (!(timeout--))
			{
				break;
			}
		}
		if (cnt>1)
  406ea8:	693b      	ldr	r3, [r7, #16]
  406eaa:	2b01      	cmp	r3, #1
  406eac:	d910      	bls.n	406ed0 <twi_write+0xc4>
		{
			status = p_twi->TWI_SR;
  406eae:	687b      	ldr	r3, [r7, #4]
  406eb0:	6a1b      	ldr	r3, [r3, #32]
  406eb2:	60bb      	str	r3, [r7, #8]
			if (status & TWI_SR_NACK) {
  406eb4:	68bb      	ldr	r3, [r7, #8]
  406eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406eba:	2b00      	cmp	r3, #0
  406ebc:	d001      	beq.n	406ec2 <twi_write+0xb6>
				return TWI_RECEIVE_NACK;
  406ebe:	2305      	movs	r3, #5
  406ec0:	e034      	b.n	406f2c <twi_write+0x120>
			}
			p_twi->TWI_THR = *buffer++;		
  406ec2:	68fb      	ldr	r3, [r7, #12]
  406ec4:	1c5a      	adds	r2, r3, #1
  406ec6:	60fa      	str	r2, [r7, #12]
  406ec8:	781b      	ldrb	r3, [r3, #0]
  406eca:	461a      	mov	r2, r3
  406ecc:	687b      	ldr	r3, [r7, #4]
  406ece:	635a      	str	r2, [r3, #52]	; 0x34
		}
		p_twi->TWI_CR = TWI_CR_STOP;
  406ed0:	687b      	ldr	r3, [r7, #4]
  406ed2:	2202      	movs	r2, #2
  406ed4:	601a      	str	r2, [r3, #0]
		
	timeout = TWI_TIMEOUT;
  406ed6:	f643 2398 	movw	r3, #15000	; 0x3a98
  406eda:	617b      	str	r3, [r7, #20]
	while (1) {
		status = p_twi->TWI_SR;
  406edc:	687b      	ldr	r3, [r7, #4]
  406ede:	6a1b      	ldr	r3, [r3, #32]
  406ee0:	60bb      	str	r3, [r7, #8]
		if (status & TWI_SR_NACK) {
  406ee2:	68bb      	ldr	r3, [r7, #8]
  406ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406ee8:	2b00      	cmp	r3, #0
  406eea:	d001      	beq.n	406ef0 <twi_write+0xe4>
			return TWI_RECEIVE_NACK;
  406eec:	2305      	movs	r3, #5
  406eee:	e01d      	b.n	406f2c <twi_write+0x120>
		}

		if (status & TWI_SR_TXRDY) {
  406ef0:	68bb      	ldr	r3, [r7, #8]
  406ef2:	f003 0304 	and.w	r3, r3, #4
  406ef6:	2b00      	cmp	r3, #0
  406ef8:	d000      	beq.n	406efc <twi_write+0xf0>
			break;
  406efa:	e006      	b.n	406f0a <twi_write+0xfe>
		}
		if (!(timeout--))
  406efc:	697b      	ldr	r3, [r7, #20]
  406efe:	1e5a      	subs	r2, r3, #1
  406f00:	617a      	str	r2, [r7, #20]
  406f02:	2b00      	cmp	r3, #0
  406f04:	d100      	bne.n	406f08 <twi_write+0xfc>
		{
			break;
  406f06:	e000      	b.n	406f0a <twi_write+0xfe>
		}
	}
  406f08:	e7e8      	b.n	406edc <twi_write+0xd0>
	
	timeout = TWI_TIMEOUT;
  406f0a:	f643 2398 	movw	r3, #15000	; 0x3a98
  406f0e:	617b      	str	r3, [r7, #20]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  406f10:	e005      	b.n	406f1e <twi_write+0x112>
		if (!(timeout--))
  406f12:	697b      	ldr	r3, [r7, #20]
  406f14:	1e5a      	subs	r2, r3, #1
  406f16:	617a      	str	r2, [r7, #20]
  406f18:	2b00      	cmp	r3, #0
  406f1a:	d100      	bne.n	406f1e <twi_write+0x112>
		{
			break;
  406f1c:	e005      	b.n	406f2a <twi_write+0x11e>
			break;
		}
	}
	
	timeout = TWI_TIMEOUT;
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  406f1e:	687b      	ldr	r3, [r7, #4]
  406f20:	6a1b      	ldr	r3, [r3, #32]
  406f22:	f003 0301 	and.w	r3, r3, #1
  406f26:	2b00      	cmp	r3, #0
  406f28:	d0f3      	beq.n	406f12 <twi_write+0x106>
		{
			break;
		}
	}

	return TWI_SUCCESS;
  406f2a:	2300      	movs	r3, #0
}
  406f2c:	4618      	mov	r0, r3
  406f2e:	3718      	adds	r7, #24
  406f30:	46bd      	mov	sp, r7
  406f32:	bd80      	pop	{r7, pc}
  406f34:	00406db5 	.word	0x00406db5

00406f38 <twi_read>:

uint32_t twi_read(Twi *p_twi, twi_packet_t *p_packet)
{
  406f38:	b580      	push	{r7, lr}
  406f3a:	b088      	sub	sp, #32
  406f3c:	af00      	add	r7, sp, #0
  406f3e:	6078      	str	r0, [r7, #4]
  406f40:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  406f42:	683b      	ldr	r3, [r7, #0]
  406f44:	68db      	ldr	r3, [r3, #12]
  406f46:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  406f48:	683b      	ldr	r3, [r7, #0]
  406f4a:	689b      	ldr	r3, [r3, #8]
  406f4c:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  406f4e:	2300      	movs	r3, #0
  406f50:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;
  406f52:	f643 2398 	movw	r3, #15000	; 0x3a98
  406f56:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  406f58:	69fb      	ldr	r3, [r7, #28]
  406f5a:	2b00      	cmp	r3, #0
  406f5c:	d101      	bne.n	406f62 <twi_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  406f5e:	2301      	movs	r3, #1
  406f60:	e078      	b.n	407054 <twi_read+0x11c>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  406f62:	687b      	ldr	r3, [r7, #4]
  406f64:	2200      	movs	r2, #0
  406f66:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  406f68:	683b      	ldr	r3, [r7, #0]
  406f6a:	7c1b      	ldrb	r3, [r3, #16]
  406f6c:	041b      	lsls	r3, r3, #16
  406f6e:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  406f72:	683b      	ldr	r3, [r7, #0]
  406f74:	685b      	ldr	r3, [r3, #4]
  406f76:	021b      	lsls	r3, r3, #8
  406f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  406f7c:	4313      	orrs	r3, r2
  406f7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  406f82:	687b      	ldr	r3, [r7, #4]
  406f84:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  406f86:	687b      	ldr	r3, [r7, #4]
  406f88:	2200      	movs	r2, #0
  406f8a:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  406f8c:	683a      	ldr	r2, [r7, #0]
  406f8e:	683b      	ldr	r3, [r7, #0]
  406f90:	685b      	ldr	r3, [r3, #4]
  406f92:	4610      	mov	r0, r2
  406f94:	4619      	mov	r1, r3
  406f96:	4b31      	ldr	r3, [pc, #196]	; (40705c <twi_read+0x124>)
  406f98:	4798      	blx	r3
  406f9a:	4602      	mov	r2, r0
  406f9c:	687b      	ldr	r3, [r7, #4]
  406f9e:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  406fa0:	69fb      	ldr	r3, [r7, #28]
  406fa2:	2b01      	cmp	r3, #1
  406fa4:	d105      	bne.n	406fb2 <twi_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  406fa6:	687b      	ldr	r3, [r7, #4]
  406fa8:	2203      	movs	r2, #3
  406faa:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  406fac:	2301      	movs	r3, #1
  406fae:	75fb      	strb	r3, [r7, #23]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  406fb0:	e03a      	b.n	407028 <twi_read+0xf0>
	/* Send a START condition */
	if (cnt == 1) {
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
		stop_sent = 1;
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  406fb2:	687b      	ldr	r3, [r7, #4]
  406fb4:	2201      	movs	r2, #1
  406fb6:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  406fb8:	2300      	movs	r3, #0
  406fba:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  406fbc:	e034      	b.n	407028 <twi_read+0xf0>
		status = p_twi->TWI_SR;
  406fbe:	687b      	ldr	r3, [r7, #4]
  406fc0:	6a1b      	ldr	r3, [r3, #32]
  406fc2:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  406fc4:	68fb      	ldr	r3, [r7, #12]
  406fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406fca:	2b00      	cmp	r3, #0
  406fcc:	d001      	beq.n	406fd2 <twi_read+0x9a>
			return TWI_RECEIVE_NACK;
  406fce:	2305      	movs	r3, #5
  406fd0:	e040      	b.n	407054 <twi_read+0x11c>
		}

		if (!timeout--) {
  406fd2:	693b      	ldr	r3, [r7, #16]
  406fd4:	1e5a      	subs	r2, r3, #1
  406fd6:	613a      	str	r2, [r7, #16]
  406fd8:	2b00      	cmp	r3, #0
  406fda:	d101      	bne.n	406fe0 <twi_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  406fdc:	2309      	movs	r3, #9
  406fde:	e039      	b.n	407054 <twi_read+0x11c>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  406fe0:	69fb      	ldr	r3, [r7, #28]
  406fe2:	2b01      	cmp	r3, #1
  406fe4:	d107      	bne.n	406ff6 <twi_read+0xbe>
  406fe6:	7dfb      	ldrb	r3, [r7, #23]
  406fe8:	2b00      	cmp	r3, #0
  406fea:	d104      	bne.n	406ff6 <twi_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  406fec:	687b      	ldr	r3, [r7, #4]
  406fee:	2202      	movs	r2, #2
  406ff0:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  406ff2:	2301      	movs	r3, #1
  406ff4:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  406ff6:	68fb      	ldr	r3, [r7, #12]
  406ff8:	f003 0302 	and.w	r3, r3, #2
  406ffc:	2b00      	cmp	r3, #0
  406ffe:	d106      	bne.n	40700e <twi_read+0xd6>
			if (!(timeout--))
  407000:	693b      	ldr	r3, [r7, #16]
  407002:	1e5a      	subs	r2, r3, #1
  407004:	613a      	str	r2, [r7, #16]
  407006:	2b00      	cmp	r3, #0
  407008:	d100      	bne.n	40700c <twi_read+0xd4>
			{
				break;
  40700a:	e010      	b.n	40702e <twi_read+0xf6>
			}
			continue;
  40700c:	e00c      	b.n	407028 <twi_read+0xf0>
		}
		timeout = TWI_TIMEOUT;
  40700e:	f643 2398 	movw	r3, #15000	; 0x3a98
  407012:	613b      	str	r3, [r7, #16]
		*buffer++ = p_twi->TWI_RHR;
  407014:	69bb      	ldr	r3, [r7, #24]
  407016:	1c5a      	adds	r2, r3, #1
  407018:	61ba      	str	r2, [r7, #24]
  40701a:	687a      	ldr	r2, [r7, #4]
  40701c:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40701e:	b2d2      	uxtb	r2, r2
  407020:	701a      	strb	r2, [r3, #0]

		cnt--;
  407022:	69fb      	ldr	r3, [r7, #28]
  407024:	3b01      	subs	r3, #1
  407026:	61fb      	str	r3, [r7, #28]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  407028:	69fb      	ldr	r3, [r7, #28]
  40702a:	2b00      	cmp	r3, #0
  40702c:	d1c7      	bne.n	406fbe <twi_read+0x86>
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
	}

	timeout = TWI_TIMEOUT;
  40702e:	f643 2398 	movw	r3, #15000	; 0x3a98
  407032:	613b      	str	r3, [r7, #16]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  407034:	e005      	b.n	407042 <twi_read+0x10a>
		if (!(timeout--))
  407036:	693b      	ldr	r3, [r7, #16]
  407038:	1e5a      	subs	r2, r3, #1
  40703a:	613a      	str	r2, [r7, #16]
  40703c:	2b00      	cmp	r3, #0
  40703e:	d100      	bne.n	407042 <twi_read+0x10a>
		{
			break;
  407040:	e005      	b.n	40704e <twi_read+0x116>

		cnt--;
	}

	timeout = TWI_TIMEOUT;
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  407042:	687b      	ldr	r3, [r7, #4]
  407044:	6a1b      	ldr	r3, [r3, #32]
  407046:	f003 0301 	and.w	r3, r3, #1
  40704a:	2b00      	cmp	r3, #0
  40704c:	d0f3      	beq.n	407036 <twi_read+0xfe>
		{
			break;
		}
	}

	p_twi->TWI_SR;
  40704e:	687b      	ldr	r3, [r7, #4]
  407050:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  407052:	2300      	movs	r3, #0
}
  407054:	4618      	mov	r0, r3
  407056:	3720      	adds	r7, #32
  407058:	46bd      	mov	sp, r7
  40705a:	bd80      	pop	{r7, pc}
  40705c:	00406db5 	.word	0x00406db5

00407060 <assertBusError>:

static void assertBusError(drv_twi_config_t* twi_config)
{	
  407060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407064:	b087      	sub	sp, #28
  407066:	af00      	add	r7, sp, #0
  407068:	6078      	str	r0, [r7, #4]
	int breakCount = 10;
  40706a:	230a      	movs	r3, #10
  40706c:	617b      	str	r3, [r7, #20]
	if (twi_config->mem_index > 2)
  40706e:	687b      	ldr	r3, [r7, #4]
  407070:	695b      	ldr	r3, [r3, #20]
  407072:	2b02      	cmp	r3, #2
  407074:	dd00      	ble.n	407078 <assertBusError+0x18>
	{
		return;	// a safety check to make sure incorrect drv_config is not passed
  407076:	e0df      	b.n	407238 <assertBusError+0x1d8>
	}
	
	busErrorCount[twi_config->mem_index]++;
  407078:	687b      	ldr	r3, [r7, #4]
  40707a:	695b      	ldr	r3, [r3, #20]
  40707c:	4a72      	ldr	r2, [pc, #456]	; (407248 <assertBusError+0x1e8>)
  40707e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  407082:	1c51      	adds	r1, r2, #1
  407084:	4a70      	ldr	r2, [pc, #448]	; (407248 <assertBusError+0x1e8>)
  407086:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	
	if (busErrorCount[twi_config->mem_index] > DRV_I2C_MAX_BUS_ERR_CNT)
  40708a:	687b      	ldr	r3, [r7, #4]
  40708c:	695a      	ldr	r2, [r3, #20]
  40708e:	4b6e      	ldr	r3, [pc, #440]	; (407248 <assertBusError+0x1e8>)
  407090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407094:	2b64      	cmp	r3, #100	; 0x64
  407096:	f240 80cf 	bls.w	407238 <assertBusError+0x1d8>
			2. Master still sees logic 0 on SDA, master generates a clock pulse.
			3. Master examines SDA. If SDA = 0, go to step 2; if SDA = 1, go to step 4.
			4. Generate STOP conditions.
		*/
		
		if (twi_config->p_i2c == TWI0)
  40709a:	687b      	ldr	r3, [r7, #4]
  40709c:	681a      	ldr	r2, [r3, #0]
  40709e:	4b6b      	ldr	r3, [pc, #428]	; (40724c <assertBusError+0x1ec>)
  4070a0:	429a      	cmp	r2, r3
  4070a2:	d166      	bne.n	407172 <assertBusError+0x112>
		{
			gpio_configure_pin(TWI0_CLK_GPIO, (PIO_PERIPH_A | PIO_OUTPUT_0));	// set the pins as output first
  4070a4:	2004      	movs	r0, #4
  4070a6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4070aa:	4b69      	ldr	r3, [pc, #420]	; (407250 <assertBusError+0x1f0>)
  4070ac:	4798      	blx	r3
			gpio_configure_pin(TWI0_DATA_GPIO, (PIO_PERIPH_A | PIO_OUTPUT_0));
  4070ae:	2003      	movs	r0, #3
  4070b0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4070b4:	4b66      	ldr	r3, [pc, #408]	; (407250 <assertBusError+0x1f0>)
  4070b6:	4798      	blx	r3
			
			gpio_set_pin_high(TWI0_DATA_GPIO);	// step 1
  4070b8:	2003      	movs	r0, #3
  4070ba:	4b66      	ldr	r3, [pc, #408]	; (407254 <assertBusError+0x1f4>)
  4070bc:	4798      	blx	r3
			gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);	// set the pin as input again to monitor it
  4070be:	2003      	movs	r0, #3
  4070c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4070c4:	4b62      	ldr	r3, [pc, #392]	; (407250 <assertBusError+0x1f0>)
  4070c6:	4798      	blx	r3
			
			while (gpio_pin_is_low(TWI0_DATA_GPIO))	//step 2
  4070c8:	e03e      	b.n	407148 <assertBusError+0xe8>
			{
				for (int i = 0; i < 10; i++)	//step 3
  4070ca:	2300      	movs	r3, #0
  4070cc:	613b      	str	r3, [r7, #16]
  4070ce:	e02e      	b.n	40712e <assertBusError+0xce>
				{
					gpio_set_pin_high(TWI0_CLK_GPIO);
  4070d0:	2004      	movs	r0, #4
  4070d2:	4b60      	ldr	r3, [pc, #384]	; (407254 <assertBusError+0x1f4>)
  4070d4:	4798      	blx	r3
					delay_us(10);
  4070d6:	4b60      	ldr	r3, [pc, #384]	; (407258 <assertBusError+0x1f8>)
  4070d8:	4798      	blx	r3
  4070da:	4603      	mov	r3, r0
  4070dc:	461a      	mov	r2, r3
  4070de:	f04f 0300 	mov.w	r3, #0
  4070e2:	1892      	adds	r2, r2, r2
  4070e4:	eb43 0303 	adc.w	r3, r3, r3
  4070e8:	ea4f 0983 	mov.w	r9, r3, lsl #2
  4070ec:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
  4070f0:	ea4f 0882 	mov.w	r8, r2, lsl #2
  4070f4:	eb12 0008 	adds.w	r0, r2, r8
  4070f8:	eb43 0109 	adc.w	r1, r3, r9
  4070fc:	a350      	add	r3, pc, #320	; (adr r3, 407240 <assertBusError+0x1e0>)
  4070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  407102:	1812      	adds	r2, r2, r0
  407104:	eb43 0301 	adc.w	r3, r3, r1
  407108:	4c54      	ldr	r4, [pc, #336]	; (40725c <assertBusError+0x1fc>)
  40710a:	4610      	mov	r0, r2
  40710c:	4619      	mov	r1, r3
  40710e:	4a54      	ldr	r2, [pc, #336]	; (407260 <assertBusError+0x200>)
  407110:	f04f 0300 	mov.w	r3, #0
  407114:	47a0      	blx	r4
  407116:	4602      	mov	r2, r0
  407118:	460b      	mov	r3, r1
  40711a:	4613      	mov	r3, r2
  40711c:	4618      	mov	r0, r3
  40711e:	4b51      	ldr	r3, [pc, #324]	; (407264 <assertBusError+0x204>)
  407120:	4798      	blx	r3
					gpio_set_pin_low(TWI0_CLK_GPIO);
  407122:	2004      	movs	r0, #4
  407124:	4b50      	ldr	r3, [pc, #320]	; (407268 <assertBusError+0x208>)
  407126:	4798      	blx	r3
			gpio_set_pin_high(TWI0_DATA_GPIO);	// step 1
			gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);	// set the pin as input again to monitor it
			
			while (gpio_pin_is_low(TWI0_DATA_GPIO))	//step 2
			{
				for (int i = 0; i < 10; i++)	//step 3
  407128:	693b      	ldr	r3, [r7, #16]
  40712a:	3301      	adds	r3, #1
  40712c:	613b      	str	r3, [r7, #16]
  40712e:	693b      	ldr	r3, [r7, #16]
  407130:	2b09      	cmp	r3, #9
  407132:	ddcd      	ble.n	4070d0 <assertBusError+0x70>
				{
					gpio_set_pin_high(TWI0_CLK_GPIO);
					delay_us(10);
					gpio_set_pin_low(TWI0_CLK_GPIO);
				}
				vTaskDelay(10);
  407134:	200a      	movs	r0, #10
  407136:	4b4d      	ldr	r3, [pc, #308]	; (40726c <assertBusError+0x20c>)
  407138:	4798      	blx	r3
				if (--breakCount == 0)
  40713a:	697b      	ldr	r3, [r7, #20]
  40713c:	3b01      	subs	r3, #1
  40713e:	617b      	str	r3, [r7, #20]
  407140:	697b      	ldr	r3, [r7, #20]
  407142:	2b00      	cmp	r3, #0
  407144:	d100      	bne.n	407148 <assertBusError+0xe8>
				{
					break;
  407146:	e005      	b.n	407154 <assertBusError+0xf4>
			gpio_configure_pin(TWI0_DATA_GPIO, (PIO_PERIPH_A | PIO_OUTPUT_0));
			
			gpio_set_pin_high(TWI0_DATA_GPIO);	// step 1
			gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);	// set the pin as input again to monitor it
			
			while (gpio_pin_is_low(TWI0_DATA_GPIO))	//step 2
  407148:	2003      	movs	r0, #3
  40714a:	4b49      	ldr	r3, [pc, #292]	; (407270 <assertBusError+0x210>)
  40714c:	4798      	blx	r3
  40714e:	4603      	mov	r3, r0
  407150:	2b00      	cmp	r3, #0
  407152:	d0ba      	beq.n	4070ca <assertBusError+0x6a>
				if (--breakCount == 0)
				{
					break;
				}
			}
			gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);	// set the pins back to their original configuration
  407154:	2003      	movs	r0, #3
  407156:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40715a:	4b3d      	ldr	r3, [pc, #244]	; (407250 <assertBusError+0x1f0>)
  40715c:	4798      	blx	r3
			gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40715e:	2004      	movs	r0, #4
  407160:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407164:	4b3a      	ldr	r3, [pc, #232]	; (407250 <assertBusError+0x1f0>)
  407166:	4798      	blx	r3
			twi_config->p_i2c->TWI_CR = TWI_CR_START | TWI_CR_STOP;	// generate stop condition
  407168:	687b      	ldr	r3, [r7, #4]
  40716a:	681b      	ldr	r3, [r3, #0]
  40716c:	2203      	movs	r2, #3
  40716e:	601a      	str	r2, [r3, #0]
  407170:	e062      	b.n	407238 <assertBusError+0x1d8>
		}
		else
		{
			gpio_configure_pin(TWI1_CLK_GPIO, (PIO_PERIPH_B | PIO_OUTPUT_0));	// set the pins as output first
  407172:	2025      	movs	r0, #37	; 0x25
  407174:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  407178:	4b35      	ldr	r3, [pc, #212]	; (407250 <assertBusError+0x1f0>)
  40717a:	4798      	blx	r3
			gpio_configure_pin(TWI1_DATA_GPIO, (PIO_PERIPH_B | PIO_OUTPUT_0));
  40717c:	2024      	movs	r0, #36	; 0x24
  40717e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  407182:	4b33      	ldr	r3, [pc, #204]	; (407250 <assertBusError+0x1f0>)
  407184:	4798      	blx	r3
			
			gpio_set_pin_high(TWI1_DATA_GPIO);	// step 1
  407186:	2024      	movs	r0, #36	; 0x24
  407188:	4b32      	ldr	r3, [pc, #200]	; (407254 <assertBusError+0x1f4>)
  40718a:	4798      	blx	r3
			gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);	// set the pin as input again to monitor it
  40718c:	2024      	movs	r0, #36	; 0x24
  40718e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  407192:	4b2f      	ldr	r3, [pc, #188]	; (407250 <assertBusError+0x1f0>)
  407194:	4798      	blx	r3
			
			while (gpio_pin_is_low(TWI1_DATA_GPIO))	//step 2
  407196:	e03b      	b.n	407210 <assertBusError+0x1b0>
			{
				for (int i = 0; i < 10; i++)	//step 3
  407198:	2300      	movs	r3, #0
  40719a:	60fb      	str	r3, [r7, #12]
  40719c:	e02b      	b.n	4071f6 <assertBusError+0x196>
				{
					gpio_set_pin_high(TWI1_CLK_GPIO);
  40719e:	2025      	movs	r0, #37	; 0x25
  4071a0:	4b2c      	ldr	r3, [pc, #176]	; (407254 <assertBusError+0x1f4>)
  4071a2:	4798      	blx	r3
					delay_us(10);
  4071a4:	4b2c      	ldr	r3, [pc, #176]	; (407258 <assertBusError+0x1f8>)
  4071a6:	4798      	blx	r3
  4071a8:	4603      	mov	r3, r0
  4071aa:	461a      	mov	r2, r3
  4071ac:	f04f 0300 	mov.w	r3, #0
  4071b0:	1892      	adds	r2, r2, r2
  4071b2:	eb43 0303 	adc.w	r3, r3, r3
  4071b6:	009d      	lsls	r5, r3, #2
  4071b8:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
  4071bc:	0094      	lsls	r4, r2, #2
  4071be:	1910      	adds	r0, r2, r4
  4071c0:	eb43 0105 	adc.w	r1, r3, r5
  4071c4:	a31e      	add	r3, pc, #120	; (adr r3, 407240 <assertBusError+0x1e0>)
  4071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4071ca:	1812      	adds	r2, r2, r0
  4071cc:	eb43 0301 	adc.w	r3, r3, r1
  4071d0:	4e22      	ldr	r6, [pc, #136]	; (40725c <assertBusError+0x1fc>)
  4071d2:	4610      	mov	r0, r2
  4071d4:	4619      	mov	r1, r3
  4071d6:	4a22      	ldr	r2, [pc, #136]	; (407260 <assertBusError+0x200>)
  4071d8:	f04f 0300 	mov.w	r3, #0
  4071dc:	47b0      	blx	r6
  4071de:	4602      	mov	r2, r0
  4071e0:	460b      	mov	r3, r1
  4071e2:	4613      	mov	r3, r2
  4071e4:	4618      	mov	r0, r3
  4071e6:	4b1f      	ldr	r3, [pc, #124]	; (407264 <assertBusError+0x204>)
  4071e8:	4798      	blx	r3
					gpio_set_pin_low(TWI1_CLK_GPIO);
  4071ea:	2025      	movs	r0, #37	; 0x25
  4071ec:	4b1e      	ldr	r3, [pc, #120]	; (407268 <assertBusError+0x208>)
  4071ee:	4798      	blx	r3
			gpio_set_pin_high(TWI1_DATA_GPIO);	// step 1
			gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);	// set the pin as input again to monitor it
			
			while (gpio_pin_is_low(TWI1_DATA_GPIO))	//step 2
			{
				for (int i = 0; i < 10; i++)	//step 3
  4071f0:	68fb      	ldr	r3, [r7, #12]
  4071f2:	3301      	adds	r3, #1
  4071f4:	60fb      	str	r3, [r7, #12]
  4071f6:	68fb      	ldr	r3, [r7, #12]
  4071f8:	2b09      	cmp	r3, #9
  4071fa:	ddd0      	ble.n	40719e <assertBusError+0x13e>
				{
					gpio_set_pin_high(TWI1_CLK_GPIO);
					delay_us(10);
					gpio_set_pin_low(TWI1_CLK_GPIO);
				}
				vTaskDelay(10);
  4071fc:	200a      	movs	r0, #10
  4071fe:	4b1b      	ldr	r3, [pc, #108]	; (40726c <assertBusError+0x20c>)
  407200:	4798      	blx	r3
				if (--breakCount == 0)
  407202:	697b      	ldr	r3, [r7, #20]
  407204:	3b01      	subs	r3, #1
  407206:	617b      	str	r3, [r7, #20]
  407208:	697b      	ldr	r3, [r7, #20]
  40720a:	2b00      	cmp	r3, #0
  40720c:	d100      	bne.n	407210 <assertBusError+0x1b0>
				{
					break;
  40720e:	e005      	b.n	40721c <assertBusError+0x1bc>
			gpio_configure_pin(TWI1_DATA_GPIO, (PIO_PERIPH_B | PIO_OUTPUT_0));
			
			gpio_set_pin_high(TWI1_DATA_GPIO);	// step 1
			gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);	// set the pin as input again to monitor it
			
			while (gpio_pin_is_low(TWI1_DATA_GPIO))	//step 2
  407210:	2024      	movs	r0, #36	; 0x24
  407212:	4b17      	ldr	r3, [pc, #92]	; (407270 <assertBusError+0x210>)
  407214:	4798      	blx	r3
  407216:	4603      	mov	r3, r0
  407218:	2b00      	cmp	r3, #0
  40721a:	d0bd      	beq.n	407198 <assertBusError+0x138>
				if (--breakCount == 0)
				{
					break;
				}
			}
			gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);	// set the pins back to their original configuration
  40721c:	2024      	movs	r0, #36	; 0x24
  40721e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  407222:	4b0b      	ldr	r3, [pc, #44]	; (407250 <assertBusError+0x1f0>)
  407224:	4798      	blx	r3
			gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
  407226:	2025      	movs	r0, #37	; 0x25
  407228:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40722c:	4b08      	ldr	r3, [pc, #32]	; (407250 <assertBusError+0x1f0>)
  40722e:	4798      	blx	r3
			twi_config->p_i2c->TWI_CR = TWI_CR_START | TWI_CR_STOP;	// generate stop condition
  407230:	687b      	ldr	r3, [r7, #4]
  407232:	681b      	ldr	r3, [r3, #0]
  407234:	2203      	movs	r2, #3
  407236:	601a      	str	r2, [r3, #0]
		}
	}
}
  407238:	371c      	adds	r7, #28
  40723a:	46bd      	mov	sp, r7
  40723c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407240:	00d59f7f 	.word	0x00d59f7f
  407244:	00000000 	.word	0x00000000
  407248:	20000f80 	.word	0x20000f80
  40724c:	40018000 	.word	0x40018000
  407250:	0040b1cd 	.word	0x0040b1cd
  407254:	0040b11d 	.word	0x0040b11d
  407258:	00406ba9 	.word	0x00406ba9
  40725c:	0040c43d 	.word	0x0040c43d
  407260:	00d59f80 	.word	0x00d59f80
  407264:	20000001 	.word	0x20000001
  407268:	0040b149 	.word	0x0040b149
  40726c:	00409239 	.word	0x00409239
  407270:	0040b0ed 	.word	0x0040b0ed
  407274:	f3af 8000 	nop.w

00407278 <assertBusHealthy>:

static void assertBusHealthy(drv_twi_config_t* twi_config)
{
  407278:	b480      	push	{r7}
  40727a:	b083      	sub	sp, #12
  40727c:	af00      	add	r7, sp, #0
  40727e:	6078      	str	r0, [r7, #4]
	// the bus has returned to healthy state, reset the error count
	busErrorCount[twi_config->mem_index] = 0;
  407280:	687b      	ldr	r3, [r7, #4]
  407282:	695a      	ldr	r2, [r3, #20]
  407284:	4b04      	ldr	r3, [pc, #16]	; (407298 <assertBusHealthy+0x20>)
  407286:	2100      	movs	r1, #0
  407288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40728c:	370c      	adds	r7, #12
  40728e:	46bd      	mov	sp, r7
  407290:	f85d 7b04 	ldr.w	r7, [sp], #4
  407294:	4770      	bx	lr
  407296:	bf00      	nop
  407298:	20000f80 	.word	0x20000f80

0040729c <vLedTimerCallback>:
volatile drv_led_color_type_t vledColor;	//global variable to store led color, used in timer callback
volatile drv_led_state_type_t vledState; //global variable to store led state, used in timer callback

//Led Timer callback function
void vLedTimerCallback( xTimerHandle xTimer )
{
  40729c:	b580      	push	{r7, lr}
  40729e:	b082      	sub	sp, #8
  4072a0:	af00      	add	r7, sp, #0
  4072a2:	6078      	str	r0, [r7, #4]
	if(vledState == DRV_LED_FLASH)	//perform the action only if state is flashing
  4072a4:	4b31      	ldr	r3, [pc, #196]	; (40736c <vLedTimerCallback+0xd0>)
  4072a6:	781b      	ldrb	r3, [r3, #0]
  4072a8:	b2db      	uxtb	r3, r3
  4072aa:	2b00      	cmp	r3, #0
  4072ac:	d15a      	bne.n	407364 <vLedTimerCallback+0xc8>
	{
		//check which led color is set and toggle the pin state
		switch(vledColor)
  4072ae:	4b30      	ldr	r3, [pc, #192]	; (407370 <vLedTimerCallback+0xd4>)
  4072b0:	781b      	ldrb	r3, [r3, #0]
  4072b2:	b2db      	uxtb	r3, r3
  4072b4:	2b06      	cmp	r3, #6
  4072b6:	d854      	bhi.n	407362 <vLedTimerCallback+0xc6>
  4072b8:	a201      	add	r2, pc, #4	; (adr r2, 4072c0 <vLedTimerCallback+0x24>)
  4072ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4072be:	bf00      	nop
  4072c0:	004072dd 	.word	0x004072dd
  4072c4:	004072e9 	.word	0x004072e9
  4072c8:	004072f5 	.word	0x004072f5
  4072cc:	00407301 	.word	0x00407301
  4072d0:	00407317 	.word	0x00407317
  4072d4:	00407337 	.word	0x00407337
  4072d8:	0040734d 	.word	0x0040734d
		{
			case DRV_LED_RED:
				drv_gpio_togglePin(ledConfig.redLed);
  4072dc:	4b25      	ldr	r3, [pc, #148]	; (407374 <vLedTimerCallback+0xd8>)
  4072de:	781b      	ldrb	r3, [r3, #0]
  4072e0:	4618      	mov	r0, r3
  4072e2:	4b25      	ldr	r3, [pc, #148]	; (407378 <vLedTimerCallback+0xdc>)
  4072e4:	4798      	blx	r3
				break;
  4072e6:	e03d      	b.n	407364 <vLedTimerCallback+0xc8>
			case DRV_LED_BLUE:
				drv_gpio_togglePin(ledConfig.blueLed);
  4072e8:	4b22      	ldr	r3, [pc, #136]	; (407374 <vLedTimerCallback+0xd8>)
  4072ea:	785b      	ldrb	r3, [r3, #1]
  4072ec:	4618      	mov	r0, r3
  4072ee:	4b22      	ldr	r3, [pc, #136]	; (407378 <vLedTimerCallback+0xdc>)
  4072f0:	4798      	blx	r3
				break;
  4072f2:	e037      	b.n	407364 <vLedTimerCallback+0xc8>
			case DRV_LED_GREEN:
				drv_gpio_togglePin(ledConfig.greenLed);
  4072f4:	4b1f      	ldr	r3, [pc, #124]	; (407374 <vLedTimerCallback+0xd8>)
  4072f6:	789b      	ldrb	r3, [r3, #2]
  4072f8:	4618      	mov	r0, r3
  4072fa:	4b1f      	ldr	r3, [pc, #124]	; (407378 <vLedTimerCallback+0xdc>)
  4072fc:	4798      	blx	r3
				break;
  4072fe:	e031      	b.n	407364 <vLedTimerCallback+0xc8>
			case DRV_LED_YELLOW:
				drv_gpio_togglePin(ledConfig.redLed);
  407300:	4b1c      	ldr	r3, [pc, #112]	; (407374 <vLedTimerCallback+0xd8>)
  407302:	781b      	ldrb	r3, [r3, #0]
  407304:	4618      	mov	r0, r3
  407306:	4b1c      	ldr	r3, [pc, #112]	; (407378 <vLedTimerCallback+0xdc>)
  407308:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.greenLed);
  40730a:	4b1a      	ldr	r3, [pc, #104]	; (407374 <vLedTimerCallback+0xd8>)
  40730c:	789b      	ldrb	r3, [r3, #2]
  40730e:	4618      	mov	r0, r3
  407310:	4b19      	ldr	r3, [pc, #100]	; (407378 <vLedTimerCallback+0xdc>)
  407312:	4798      	blx	r3
				break;
  407314:	e026      	b.n	407364 <vLedTimerCallback+0xc8>
			case DRV_LED_WHITE:
				drv_gpio_togglePin(ledConfig.redLed);
  407316:	4b17      	ldr	r3, [pc, #92]	; (407374 <vLedTimerCallback+0xd8>)
  407318:	781b      	ldrb	r3, [r3, #0]
  40731a:	4618      	mov	r0, r3
  40731c:	4b16      	ldr	r3, [pc, #88]	; (407378 <vLedTimerCallback+0xdc>)
  40731e:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.greenLed);
  407320:	4b14      	ldr	r3, [pc, #80]	; (407374 <vLedTimerCallback+0xd8>)
  407322:	789b      	ldrb	r3, [r3, #2]
  407324:	4618      	mov	r0, r3
  407326:	4b14      	ldr	r3, [pc, #80]	; (407378 <vLedTimerCallback+0xdc>)
  407328:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.blueLed);
  40732a:	4b12      	ldr	r3, [pc, #72]	; (407374 <vLedTimerCallback+0xd8>)
  40732c:	785b      	ldrb	r3, [r3, #1]
  40732e:	4618      	mov	r0, r3
  407330:	4b11      	ldr	r3, [pc, #68]	; (407378 <vLedTimerCallback+0xdc>)
  407332:	4798      	blx	r3
				break;
  407334:	e016      	b.n	407364 <vLedTimerCallback+0xc8>
			case DRV_LED_TURQUOISE:
				drv_gpio_togglePin(ledConfig.greenLed);
  407336:	4b0f      	ldr	r3, [pc, #60]	; (407374 <vLedTimerCallback+0xd8>)
  407338:	789b      	ldrb	r3, [r3, #2]
  40733a:	4618      	mov	r0, r3
  40733c:	4b0e      	ldr	r3, [pc, #56]	; (407378 <vLedTimerCallback+0xdc>)
  40733e:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.blueLed);
  407340:	4b0c      	ldr	r3, [pc, #48]	; (407374 <vLedTimerCallback+0xd8>)
  407342:	785b      	ldrb	r3, [r3, #1]
  407344:	4618      	mov	r0, r3
  407346:	4b0c      	ldr	r3, [pc, #48]	; (407378 <vLedTimerCallback+0xdc>)
  407348:	4798      	blx	r3
				break;
  40734a:	e00b      	b.n	407364 <vLedTimerCallback+0xc8>
			case DRV_LED_PURPLE:
				drv_gpio_togglePin(ledConfig.redLed);
  40734c:	4b09      	ldr	r3, [pc, #36]	; (407374 <vLedTimerCallback+0xd8>)
  40734e:	781b      	ldrb	r3, [r3, #0]
  407350:	4618      	mov	r0, r3
  407352:	4b09      	ldr	r3, [pc, #36]	; (407378 <vLedTimerCallback+0xdc>)
  407354:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.blueLed);
  407356:	4b07      	ldr	r3, [pc, #28]	; (407374 <vLedTimerCallback+0xd8>)
  407358:	785b      	ldrb	r3, [r3, #1]
  40735a:	4618      	mov	r0, r3
  40735c:	4b06      	ldr	r3, [pc, #24]	; (407378 <vLedTimerCallback+0xdc>)
  40735e:	4798      	blx	r3
				break;
  407360:	e000      	b.n	407364 <vLedTimerCallback+0xc8>
			default:
				break;
  407362:	bf00      	nop
			
		}
	}
}
  407364:	3708      	adds	r7, #8
  407366:	46bd      	mov	sp, r7
  407368:	bd80      	pop	{r7, pc}
  40736a:	bf00      	nop
  40736c:	2000897c 	.word	0x2000897c
  407370:	20008974 	.word	0x20008974
  407374:	20008980 	.word	0x20008980
  407378:	0040569d 	.word	0x0040569d

0040737c <drv_led_init>:
int timerId = 0;
//store the led configuration
status_t drv_led_init(drv_led_config_t* configLed)
{
  40737c:	b590      	push	{r4, r7, lr}
  40737e:	b087      	sub	sp, #28
  407380:	af02      	add	r7, sp, #8
  407382:	6078      	str	r0, [r7, #4]
	status_t result = STATUS_PASS;
  407384:	2300      	movs	r3, #0
  407386:	73fb      	strb	r3, [r7, #15]
	//store the led configuration
	ledConfig.redLed = configLed->redLed;
  407388:	687b      	ldr	r3, [r7, #4]
  40738a:	781a      	ldrb	r2, [r3, #0]
  40738c:	4b0f      	ldr	r3, [pc, #60]	; (4073cc <drv_led_init+0x50>)
  40738e:	701a      	strb	r2, [r3, #0]
	ledConfig.blueLed = configLed->blueLed;
  407390:	687b      	ldr	r3, [r7, #4]
  407392:	785a      	ldrb	r2, [r3, #1]
  407394:	4b0d      	ldr	r3, [pc, #52]	; (4073cc <drv_led_init+0x50>)
  407396:	705a      	strb	r2, [r3, #1]
	ledConfig.greenLed = configLed->greenLed;
  407398:	687b      	ldr	r3, [r7, #4]
  40739a:	789a      	ldrb	r2, [r3, #2]
  40739c:	4b0b      	ldr	r3, [pc, #44]	; (4073cc <drv_led_init+0x50>)
  40739e:	709a      	strb	r2, [r3, #2]
	
	//create LedTimer task
	LedTimer = xTimerCreate("Led Timer", (LED_BLINK_RATE/portTICK_RATE_MS), pdTRUE, &timerId, vLedTimerCallback);
  4073a0:	4b0b      	ldr	r3, [pc, #44]	; (4073d0 <drv_led_init+0x54>)
  4073a2:	9300      	str	r3, [sp, #0]
  4073a4:	480b      	ldr	r0, [pc, #44]	; (4073d4 <drv_led_init+0x58>)
  4073a6:	21fa      	movs	r1, #250	; 0xfa
  4073a8:	2201      	movs	r2, #1
  4073aa:	4b0b      	ldr	r3, [pc, #44]	; (4073d8 <drv_led_init+0x5c>)
  4073ac:	4c0b      	ldr	r4, [pc, #44]	; (4073dc <drv_led_init+0x60>)
  4073ae:	47a0      	blx	r4
  4073b0:	4602      	mov	r2, r0
  4073b2:	4b0b      	ldr	r3, [pc, #44]	; (4073e0 <drv_led_init+0x64>)
  4073b4:	601a      	str	r2, [r3, #0]
	if (LedTimer == NULL)
  4073b6:	4b0a      	ldr	r3, [pc, #40]	; (4073e0 <drv_led_init+0x64>)
  4073b8:	681b      	ldr	r3, [r3, #0]
  4073ba:	2b00      	cmp	r3, #0
  4073bc:	d101      	bne.n	4073c2 <drv_led_init+0x46>
	{
		result = STATUS_FAIL;
  4073be:	2301      	movs	r3, #1
  4073c0:	73fb      	strb	r3, [r7, #15]
	}
	return result;
  4073c2:	7bfb      	ldrb	r3, [r7, #15]
}
  4073c4:	4618      	mov	r0, r3
  4073c6:	3714      	adds	r7, #20
  4073c8:	46bd      	mov	sp, r7
  4073ca:	bd90      	pop	{r4, r7, pc}
  4073cc:	20008980 	.word	0x20008980
  4073d0:	0040729d 	.word	0x0040729d
  4073d4:	0041610c 	.word	0x0041610c
  4073d8:	20000f88 	.word	0x20000f88
  4073dc:	00409de5 	.word	0x00409de5
  4073e0:	20008978 	.word	0x20008978

004073e4 <drv_led_set>:

status_t drv_led_set(drv_led_color_type_t ledColor, drv_led_state_type_t ledState)
{
  4073e4:	b590      	push	{r4, r7, lr}
  4073e6:	b087      	sub	sp, #28
  4073e8:	af02      	add	r7, sp, #8
  4073ea:	4602      	mov	r2, r0
  4073ec:	460b      	mov	r3, r1
  4073ee:	71fa      	strb	r2, [r7, #7]
  4073f0:	71bb      	strb	r3, [r7, #6]
	status_t result = STATUS_PASS;
  4073f2:	2300      	movs	r3, #0
  4073f4:	73fb      	strb	r3, [r7, #15]
	if(LedTimer != NULL)
  4073f6:	4b72      	ldr	r3, [pc, #456]	; (4075c0 <drv_led_set+0x1dc>)
  4073f8:	681b      	ldr	r3, [r3, #0]
  4073fa:	2b00      	cmp	r3, #0
  4073fc:	d011      	beq.n	407422 <drv_led_set+0x3e>
	{
		if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  4073fe:	4b70      	ldr	r3, [pc, #448]	; (4075c0 <drv_led_set+0x1dc>)
  407400:	681b      	ldr	r3, [r3, #0]
  407402:	4618      	mov	r0, r3
  407404:	4b6f      	ldr	r3, [pc, #444]	; (4075c4 <drv_led_set+0x1e0>)
  407406:	4798      	blx	r3
  407408:	4603      	mov	r3, r0
  40740a:	2b00      	cmp	r3, #0
  40740c:	d009      	beq.n	407422 <drv_led_set+0x3e>
		{
			//timer is active, stop it
			xTimerStop(LedTimer, 0);		
  40740e:	4b6c      	ldr	r3, [pc, #432]	; (4075c0 <drv_led_set+0x1dc>)
  407410:	681b      	ldr	r3, [r3, #0]
  407412:	2200      	movs	r2, #0
  407414:	9200      	str	r2, [sp, #0]
  407416:	4618      	mov	r0, r3
  407418:	2101      	movs	r1, #1
  40741a:	2200      	movs	r2, #0
  40741c:	2300      	movs	r3, #0
  40741e:	4c6a      	ldr	r4, [pc, #424]	; (4075c8 <drv_led_set+0x1e4>)
  407420:	47a0      	blx	r4
		}
	}
	//switch off all LEDs
	drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_HIGH);
  407422:	4b6a      	ldr	r3, [pc, #424]	; (4075cc <drv_led_set+0x1e8>)
  407424:	781b      	ldrb	r3, [r3, #0]
  407426:	4618      	mov	r0, r3
  407428:	2101      	movs	r1, #1
  40742a:	4b69      	ldr	r3, [pc, #420]	; (4075d0 <drv_led_set+0x1ec>)
  40742c:	4798      	blx	r3
	drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_HIGH);
  40742e:	4b67      	ldr	r3, [pc, #412]	; (4075cc <drv_led_set+0x1e8>)
  407430:	785b      	ldrb	r3, [r3, #1]
  407432:	4618      	mov	r0, r3
  407434:	2101      	movs	r1, #1
  407436:	4b66      	ldr	r3, [pc, #408]	; (4075d0 <drv_led_set+0x1ec>)
  407438:	4798      	blx	r3
	drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_HIGH);
  40743a:	4b64      	ldr	r3, [pc, #400]	; (4075cc <drv_led_set+0x1e8>)
  40743c:	789b      	ldrb	r3, [r3, #2]
  40743e:	4618      	mov	r0, r3
  407440:	2101      	movs	r1, #1
  407442:	4b63      	ldr	r3, [pc, #396]	; (4075d0 <drv_led_set+0x1ec>)
  407444:	4798      	blx	r3
	
	vledColor = ledColor;	//copy the color to a global variable used in timer callback
  407446:	4b63      	ldr	r3, [pc, #396]	; (4075d4 <drv_led_set+0x1f0>)
  407448:	79fa      	ldrb	r2, [r7, #7]
  40744a:	701a      	strb	r2, [r3, #0]
	vledState = ledState;	//copy the state to a global variable used in timer callback
  40744c:	4b62      	ldr	r3, [pc, #392]	; (4075d8 <drv_led_set+0x1f4>)
  40744e:	79ba      	ldrb	r2, [r7, #6]
  407450:	701a      	strb	r2, [r3, #0]
	switch (ledColor)
  407452:	79fb      	ldrb	r3, [r7, #7]
  407454:	2b07      	cmp	r3, #7
  407456:	d875      	bhi.n	407544 <drv_led_set+0x160>
  407458:	a201      	add	r2, pc, #4	; (adr r2, 407460 <drv_led_set+0x7c>)
  40745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40745e:	bf00      	nop
  407460:	00407481 	.word	0x00407481
  407464:	0040748f 	.word	0x0040748f
  407468:	0040749d 	.word	0x0040749d
  40746c:	004074ab 	.word	0x004074ab
  407470:	004074c5 	.word	0x004074c5
  407474:	004074eb 	.word	0x004074eb
  407478:	00407505 	.word	0x00407505
  40747c:	0040751f 	.word	0x0040751f
	{
		case DRV_LED_RED:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  407480:	4b52      	ldr	r3, [pc, #328]	; (4075cc <drv_led_set+0x1e8>)
  407482:	781b      	ldrb	r3, [r3, #0]
  407484:	4618      	mov	r0, r3
  407486:	2100      	movs	r1, #0
  407488:	4b51      	ldr	r3, [pc, #324]	; (4075d0 <drv_led_set+0x1ec>)
  40748a:	4798      	blx	r3
			break;
  40748c:	e05b      	b.n	407546 <drv_led_set+0x162>
		case DRV_LED_BLUE:
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  40748e:	4b4f      	ldr	r3, [pc, #316]	; (4075cc <drv_led_set+0x1e8>)
  407490:	785b      	ldrb	r3, [r3, #1]
  407492:	4618      	mov	r0, r3
  407494:	2100      	movs	r1, #0
  407496:	4b4e      	ldr	r3, [pc, #312]	; (4075d0 <drv_led_set+0x1ec>)
  407498:	4798      	blx	r3
			break;
  40749a:	e054      	b.n	407546 <drv_led_set+0x162>
		case DRV_LED_GREEN:
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  40749c:	4b4b      	ldr	r3, [pc, #300]	; (4075cc <drv_led_set+0x1e8>)
  40749e:	789b      	ldrb	r3, [r3, #2]
  4074a0:	4618      	mov	r0, r3
  4074a2:	2100      	movs	r1, #0
  4074a4:	4b4a      	ldr	r3, [pc, #296]	; (4075d0 <drv_led_set+0x1ec>)
  4074a6:	4798      	blx	r3
			break;
  4074a8:	e04d      	b.n	407546 <drv_led_set+0x162>
		case DRV_LED_YELLOW:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  4074aa:	4b48      	ldr	r3, [pc, #288]	; (4075cc <drv_led_set+0x1e8>)
  4074ac:	781b      	ldrb	r3, [r3, #0]
  4074ae:	4618      	mov	r0, r3
  4074b0:	2100      	movs	r1, #0
  4074b2:	4b47      	ldr	r3, [pc, #284]	; (4075d0 <drv_led_set+0x1ec>)
  4074b4:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  4074b6:	4b45      	ldr	r3, [pc, #276]	; (4075cc <drv_led_set+0x1e8>)
  4074b8:	789b      	ldrb	r3, [r3, #2]
  4074ba:	4618      	mov	r0, r3
  4074bc:	2100      	movs	r1, #0
  4074be:	4b44      	ldr	r3, [pc, #272]	; (4075d0 <drv_led_set+0x1ec>)
  4074c0:	4798      	blx	r3
			break;
  4074c2:	e040      	b.n	407546 <drv_led_set+0x162>
		case DRV_LED_WHITE:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  4074c4:	4b41      	ldr	r3, [pc, #260]	; (4075cc <drv_led_set+0x1e8>)
  4074c6:	781b      	ldrb	r3, [r3, #0]
  4074c8:	4618      	mov	r0, r3
  4074ca:	2100      	movs	r1, #0
  4074cc:	4b40      	ldr	r3, [pc, #256]	; (4075d0 <drv_led_set+0x1ec>)
  4074ce:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  4074d0:	4b3e      	ldr	r3, [pc, #248]	; (4075cc <drv_led_set+0x1e8>)
  4074d2:	789b      	ldrb	r3, [r3, #2]
  4074d4:	4618      	mov	r0, r3
  4074d6:	2100      	movs	r1, #0
  4074d8:	4b3d      	ldr	r3, [pc, #244]	; (4075d0 <drv_led_set+0x1ec>)
  4074da:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  4074dc:	4b3b      	ldr	r3, [pc, #236]	; (4075cc <drv_led_set+0x1e8>)
  4074de:	785b      	ldrb	r3, [r3, #1]
  4074e0:	4618      	mov	r0, r3
  4074e2:	2100      	movs	r1, #0
  4074e4:	4b3a      	ldr	r3, [pc, #232]	; (4075d0 <drv_led_set+0x1ec>)
  4074e6:	4798      	blx	r3
			break;
  4074e8:	e02d      	b.n	407546 <drv_led_set+0x162>
		case DRV_LED_TURQUOISE:
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  4074ea:	4b38      	ldr	r3, [pc, #224]	; (4075cc <drv_led_set+0x1e8>)
  4074ec:	789b      	ldrb	r3, [r3, #2]
  4074ee:	4618      	mov	r0, r3
  4074f0:	2100      	movs	r1, #0
  4074f2:	4b37      	ldr	r3, [pc, #220]	; (4075d0 <drv_led_set+0x1ec>)
  4074f4:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  4074f6:	4b35      	ldr	r3, [pc, #212]	; (4075cc <drv_led_set+0x1e8>)
  4074f8:	785b      	ldrb	r3, [r3, #1]
  4074fa:	4618      	mov	r0, r3
  4074fc:	2100      	movs	r1, #0
  4074fe:	4b34      	ldr	r3, [pc, #208]	; (4075d0 <drv_led_set+0x1ec>)
  407500:	4798      	blx	r3
			break;
  407502:	e020      	b.n	407546 <drv_led_set+0x162>
		case DRV_LED_PURPLE:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  407504:	4b31      	ldr	r3, [pc, #196]	; (4075cc <drv_led_set+0x1e8>)
  407506:	781b      	ldrb	r3, [r3, #0]
  407508:	4618      	mov	r0, r3
  40750a:	2100      	movs	r1, #0
  40750c:	4b30      	ldr	r3, [pc, #192]	; (4075d0 <drv_led_set+0x1ec>)
  40750e:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  407510:	4b2e      	ldr	r3, [pc, #184]	; (4075cc <drv_led_set+0x1e8>)
  407512:	785b      	ldrb	r3, [r3, #1]
  407514:	4618      	mov	r0, r3
  407516:	2100      	movs	r1, #0
  407518:	4b2d      	ldr	r3, [pc, #180]	; (4075d0 <drv_led_set+0x1ec>)
  40751a:	4798      	blx	r3
			break;
  40751c:	e013      	b.n	407546 <drv_led_set+0x162>
		case DRV_LED_OFF:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_HIGH);
  40751e:	4b2b      	ldr	r3, [pc, #172]	; (4075cc <drv_led_set+0x1e8>)
  407520:	781b      	ldrb	r3, [r3, #0]
  407522:	4618      	mov	r0, r3
  407524:	2101      	movs	r1, #1
  407526:	4b2a      	ldr	r3, [pc, #168]	; (4075d0 <drv_led_set+0x1ec>)
  407528:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_HIGH);
  40752a:	4b28      	ldr	r3, [pc, #160]	; (4075cc <drv_led_set+0x1e8>)
  40752c:	789b      	ldrb	r3, [r3, #2]
  40752e:	4618      	mov	r0, r3
  407530:	2101      	movs	r1, #1
  407532:	4b27      	ldr	r3, [pc, #156]	; (4075d0 <drv_led_set+0x1ec>)
  407534:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_HIGH);
  407536:	4b25      	ldr	r3, [pc, #148]	; (4075cc <drv_led_set+0x1e8>)
  407538:	785b      	ldrb	r3, [r3, #1]
  40753a:	4618      	mov	r0, r3
  40753c:	2101      	movs	r1, #1
  40753e:	4b24      	ldr	r3, [pc, #144]	; (4075d0 <drv_led_set+0x1ec>)
  407540:	4798      	blx	r3
			break;
  407542:	e000      	b.n	407546 <drv_led_set+0x162>
		default:
			break;
  407544:	bf00      	nop
	}
	
	if ((ledState == DRV_LED_FLASH) & (ledColor != DRV_LED_OFF))
  407546:	79bb      	ldrb	r3, [r7, #6]
  407548:	2b00      	cmp	r3, #0
  40754a:	bf14      	ite	ne
  40754c:	2300      	movne	r3, #0
  40754e:	2301      	moveq	r3, #1
  407550:	b2da      	uxtb	r2, r3
  407552:	79fb      	ldrb	r3, [r7, #7]
  407554:	2b07      	cmp	r3, #7
  407556:	bf0c      	ite	eq
  407558:	2300      	moveq	r3, #0
  40755a:	2301      	movne	r3, #1
  40755c:	b2db      	uxtb	r3, r3
  40755e:	4013      	ands	r3, r2
  407560:	b2db      	uxtb	r3, r3
  407562:	2b00      	cmp	r3, #0
  407564:	d011      	beq.n	40758a <drv_led_set+0x1a6>
	{
		if(LedTimer != NULL)
  407566:	4b16      	ldr	r3, [pc, #88]	; (4075c0 <drv_led_set+0x1dc>)
  407568:	681b      	ldr	r3, [r3, #0]
  40756a:	2b00      	cmp	r3, #0
  40756c:	d023      	beq.n	4075b6 <drv_led_set+0x1d2>
		{
			xTimerReset(LedTimer, 0);	
  40756e:	4b14      	ldr	r3, [pc, #80]	; (4075c0 <drv_led_set+0x1dc>)
  407570:	681c      	ldr	r4, [r3, #0]
  407572:	4b1a      	ldr	r3, [pc, #104]	; (4075dc <drv_led_set+0x1f8>)
  407574:	4798      	blx	r3
  407576:	4603      	mov	r3, r0
  407578:	2200      	movs	r2, #0
  40757a:	9200      	str	r2, [sp, #0]
  40757c:	4620      	mov	r0, r4
  40757e:	2100      	movs	r1, #0
  407580:	461a      	mov	r2, r3
  407582:	2300      	movs	r3, #0
  407584:	4c10      	ldr	r4, [pc, #64]	; (4075c8 <drv_led_set+0x1e4>)
  407586:	47a0      	blx	r4
  407588:	e015      	b.n	4075b6 <drv_led_set+0x1d2>
		}
		
	}
	else
	{
		if(LedTimer != NULL)
  40758a:	4b0d      	ldr	r3, [pc, #52]	; (4075c0 <drv_led_set+0x1dc>)
  40758c:	681b      	ldr	r3, [r3, #0]
  40758e:	2b00      	cmp	r3, #0
  407590:	d011      	beq.n	4075b6 <drv_led_set+0x1d2>
		{				
			//stop the timer
			if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  407592:	4b0b      	ldr	r3, [pc, #44]	; (4075c0 <drv_led_set+0x1dc>)
  407594:	681b      	ldr	r3, [r3, #0]
  407596:	4618      	mov	r0, r3
  407598:	4b0a      	ldr	r3, [pc, #40]	; (4075c4 <drv_led_set+0x1e0>)
  40759a:	4798      	blx	r3
  40759c:	4603      	mov	r3, r0
  40759e:	2b00      	cmp	r3, #0
  4075a0:	d009      	beq.n	4075b6 <drv_led_set+0x1d2>
			{
				xTimerStop(LedTimer, 0);
  4075a2:	4b07      	ldr	r3, [pc, #28]	; (4075c0 <drv_led_set+0x1dc>)
  4075a4:	681b      	ldr	r3, [r3, #0]
  4075a6:	2200      	movs	r2, #0
  4075a8:	9200      	str	r2, [sp, #0]
  4075aa:	4618      	mov	r0, r3
  4075ac:	2101      	movs	r1, #1
  4075ae:	2200      	movs	r2, #0
  4075b0:	2300      	movs	r3, #0
  4075b2:	4c05      	ldr	r4, [pc, #20]	; (4075c8 <drv_led_set+0x1e4>)
  4075b4:	47a0      	blx	r4
			}
		}
	}
	return result;
  4075b6:	7bfb      	ldrb	r3, [r7, #15]
}
  4075b8:	4618      	mov	r0, r3
  4075ba:	3714      	adds	r7, #20
  4075bc:	46bd      	mov	sp, r7
  4075be:	bd90      	pop	{r4, r7, pc}
  4075c0:	20008978 	.word	0x20008978
  4075c4:	0040a38d 	.word	0x0040a38d
  4075c8:	00409e61 	.word	0x00409e61
  4075cc:	20008980 	.word	0x20008980
  4075d0:	00405559 	.word	0x00405559
  4075d4:	20008974 	.word	0x20008974
  4075d8:	2000897c 	.word	0x2000897c
  4075dc:	00409459 	.word	0x00409459

004075e0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4075e0:	b480      	push	{r7}
  4075e2:	b083      	sub	sp, #12
  4075e4:	af00      	add	r7, sp, #0
  4075e6:	4603      	mov	r3, r0
  4075e8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4075ea:	4b08      	ldr	r3, [pc, #32]	; (40760c <NVIC_EnableIRQ+0x2c>)
  4075ec:	f997 2007 	ldrsb.w	r2, [r7, #7]
  4075f0:	0952      	lsrs	r2, r2, #5
  4075f2:	79f9      	ldrb	r1, [r7, #7]
  4075f4:	f001 011f 	and.w	r1, r1, #31
  4075f8:	2001      	movs	r0, #1
  4075fa:	fa00 f101 	lsl.w	r1, r0, r1
  4075fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  407602:	370c      	adds	r7, #12
  407604:	46bd      	mov	sp, r7
  407606:	f85d 7b04 	ldr.w	r7, [sp], #4
  40760a:	4770      	bx	lr
  40760c:	e000e100 	.word	0xe000e100

00407610 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  407610:	b480      	push	{r7}
  407612:	b083      	sub	sp, #12
  407614:	af00      	add	r7, sp, #0
  407616:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  407618:	687b      	ldr	r3, [r7, #4]
  40761a:	2b07      	cmp	r3, #7
  40761c:	d825      	bhi.n	40766a <osc_get_rate+0x5a>
  40761e:	a201      	add	r2, pc, #4	; (adr r2, 407624 <osc_get_rate+0x14>)
  407620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407624:	00407645 	.word	0x00407645
  407628:	0040764b 	.word	0x0040764b
  40762c:	00407651 	.word	0x00407651
  407630:	00407657 	.word	0x00407657
  407634:	0040765b 	.word	0x0040765b
  407638:	0040765f 	.word	0x0040765f
  40763c:	00407663 	.word	0x00407663
  407640:	00407667 	.word	0x00407667
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  407644:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  407648:	e010      	b.n	40766c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40764a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40764e:	e00d      	b.n	40766c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  407650:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407654:	e00a      	b.n	40766c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  407656:	4b08      	ldr	r3, [pc, #32]	; (407678 <osc_get_rate+0x68>)
  407658:	e008      	b.n	40766c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40765a:	4b08      	ldr	r3, [pc, #32]	; (40767c <osc_get_rate+0x6c>)
  40765c:	e006      	b.n	40766c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40765e:	4b08      	ldr	r3, [pc, #32]	; (407680 <osc_get_rate+0x70>)
  407660:	e004      	b.n	40766c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  407662:	4b08      	ldr	r3, [pc, #32]	; (407684 <osc_get_rate+0x74>)
  407664:	e002      	b.n	40766c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  407666:	4b07      	ldr	r3, [pc, #28]	; (407684 <osc_get_rate+0x74>)
  407668:	e000      	b.n	40766c <osc_get_rate+0x5c>
	}

	return 0;
  40766a:	2300      	movs	r3, #0
}
  40766c:	4618      	mov	r0, r3
  40766e:	370c      	adds	r7, #12
  407670:	46bd      	mov	sp, r7
  407672:	f85d 7b04 	ldr.w	r7, [sp], #4
  407676:	4770      	bx	lr
  407678:	003d0900 	.word	0x003d0900
  40767c:	007a1200 	.word	0x007a1200
  407680:	00b71b00 	.word	0x00b71b00
  407684:	00f42400 	.word	0x00f42400

00407688 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  407688:	b580      	push	{r7, lr}
  40768a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40768c:	2006      	movs	r0, #6
  40768e:	4b04      	ldr	r3, [pc, #16]	; (4076a0 <sysclk_get_main_hz+0x18>)
  407690:	4798      	blx	r3
  407692:	4602      	mov	r2, r0
  407694:	4613      	mov	r3, r2
  407696:	011b      	lsls	r3, r3, #4
  407698:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40769a:	4618      	mov	r0, r3
  40769c:	bd80      	pop	{r7, pc}
  40769e:	bf00      	nop
  4076a0:	00407611 	.word	0x00407611

004076a4 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4076a4:	b580      	push	{r7, lr}
  4076a6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4076a8:	4b02      	ldr	r3, [pc, #8]	; (4076b4 <sysclk_get_peripheral_hz+0x10>)
  4076aa:	4798      	blx	r3
  4076ac:	4603      	mov	r3, r0
  4076ae:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4076b0:	4618      	mov	r0, r3
  4076b2:	bd80      	pop	{r7, pc}
  4076b4:	00407689 	.word	0x00407689

004076b8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4076b8:	b580      	push	{r7, lr}
  4076ba:	b082      	sub	sp, #8
  4076bc:	af00      	add	r7, sp, #0
  4076be:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4076c0:	6878      	ldr	r0, [r7, #4]
  4076c2:	4b02      	ldr	r3, [pc, #8]	; (4076cc <sysclk_enable_peripheral_clock+0x14>)
  4076c4:	4798      	blx	r3
}
  4076c6:	3708      	adds	r7, #8
  4076c8:	46bd      	mov	sp, r7
  4076ca:	bd80      	pop	{r7, pc}
  4076cc:	0040b809 	.word	0x0040b809

004076d0 <sysclk_disable_peripheral_clock>:
 * \brief Disable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
  4076d0:	b580      	push	{r7, lr}
  4076d2:	b082      	sub	sp, #8
  4076d4:	af00      	add	r7, sp, #0
  4076d6:	6078      	str	r0, [r7, #4]
	pmc_disable_periph_clk(ul_id);
  4076d8:	6878      	ldr	r0, [r7, #4]
  4076da:	4b02      	ldr	r3, [pc, #8]	; (4076e4 <sysclk_disable_peripheral_clock+0x14>)
  4076dc:	4798      	blx	r3
}
  4076de:	3708      	adds	r7, #8
  4076e0:	46bd      	mov	sp, r7
  4076e2:	bd80      	pop	{r7, pc}
  4076e4:	0040b88d 	.word	0x0040b88d

004076e8 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  4076e8:	b580      	push	{r7, lr}
  4076ea:	b08c      	sub	sp, #48	; 0x30
  4076ec:	af00      	add	r7, sp, #0
  4076ee:	6078      	str	r0, [r7, #4]
  4076f0:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();	// 120000000
  4076f2:	4b26      	ldr	r3, [pc, #152]	; (40778c <usart_serial_init+0xa4>)
  4076f4:	4798      	blx	r3
  4076f6:	4603      	mov	r3, r0
  4076f8:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  4076fa:	683b      	ldr	r3, [r7, #0]
  4076fc:	681b      	ldr	r3, [r3, #0]
  4076fe:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  407700:	683b      	ldr	r3, [r7, #0]
  407702:	689b      	ldr	r3, [r3, #8]
  407704:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  407706:	683b      	ldr	r3, [r7, #0]
  407708:	681b      	ldr	r3, [r3, #0]
  40770a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40770c:	683b      	ldr	r3, [r7, #0]
  40770e:	685b      	ldr	r3, [r3, #4]
  407710:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  407712:	683b      	ldr	r3, [r7, #0]
  407714:	689b      	ldr	r3, [r3, #8]
  407716:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  407718:	683b      	ldr	r3, [r7, #0]
  40771a:	7b1b      	ldrb	r3, [r3, #12]
  40771c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40771e:	2300      	movs	r3, #0
  407720:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  407722:	687a      	ldr	r2, [r7, #4]
  407724:	4b1a      	ldr	r3, [pc, #104]	; (407790 <usart_serial_init+0xa8>)
  407726:	429a      	cmp	r2, r3
  407728:	d108      	bne.n	40773c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40772a:	2008      	movs	r0, #8
  40772c:	4b19      	ldr	r3, [pc, #100]	; (407794 <usart_serial_init+0xac>)
  40772e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  407730:	f107 0324 	add.w	r3, r7, #36	; 0x24
  407734:	6878      	ldr	r0, [r7, #4]
  407736:	4619      	mov	r1, r3
  407738:	4b17      	ldr	r3, [pc, #92]	; (407798 <usart_serial_init+0xb0>)
  40773a:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40773c:	687a      	ldr	r2, [r7, #4]
  40773e:	4b17      	ldr	r3, [pc, #92]	; (40779c <usart_serial_init+0xb4>)
  407740:	429a      	cmp	r2, r3
  407742:	d108      	bne.n	407756 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  407744:	2009      	movs	r0, #9
  407746:	4b13      	ldr	r3, [pc, #76]	; (407794 <usart_serial_init+0xac>)
  407748:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40774a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40774e:	6878      	ldr	r0, [r7, #4]
  407750:	4619      	mov	r1, r3
  407752:	4b11      	ldr	r3, [pc, #68]	; (407798 <usart_serial_init+0xb0>)
  407754:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  407756:	687a      	ldr	r2, [r7, #4]
  407758:	4b11      	ldr	r3, [pc, #68]	; (4077a0 <usart_serial_init+0xb8>)
  40775a:	429a      	cmp	r2, r3
  40775c:	d112      	bne.n	407784 <usart_serial_init+0x9c>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40775e:	200e      	movs	r0, #14
  407760:	4b0c      	ldr	r3, [pc, #48]	; (407794 <usart_serial_init+0xac>)
  407762:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  407764:	4b09      	ldr	r3, [pc, #36]	; (40778c <usart_serial_init+0xa4>)
  407766:	4798      	blx	r3
  407768:	4603      	mov	r3, r0
  40776a:	f107 020c 	add.w	r2, r7, #12
  40776e:	6878      	ldr	r0, [r7, #4]
  407770:	4611      	mov	r1, r2
  407772:	461a      	mov	r2, r3
  407774:	4b0b      	ldr	r3, [pc, #44]	; (4077a4 <usart_serial_init+0xbc>)
  407776:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  407778:	6878      	ldr	r0, [r7, #4]
  40777a:	4b0b      	ldr	r3, [pc, #44]	; (4077a8 <usart_serial_init+0xc0>)
  40777c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40777e:	6878      	ldr	r0, [r7, #4]
  407780:	4b0a      	ldr	r3, [pc, #40]	; (4077ac <usart_serial_init+0xc4>)
  407782:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  407784:	3730      	adds	r7, #48	; 0x30
  407786:	46bd      	mov	sp, r7
  407788:	bd80      	pop	{r7, pc}
  40778a:	bf00      	nop
  40778c:	004076a5 	.word	0x004076a5
  407790:	400e0600 	.word	0x400e0600
  407794:	004076b9 	.word	0x004076b9
  407798:	0040a8ad 	.word	0x0040a8ad
  40779c:	400e0800 	.word	0x400e0800
  4077a0:	40024000 	.word	0x40024000
  4077a4:	004068e9 	.word	0x004068e9
  4077a8:	0040696d 	.word	0x0040696d
  4077ac:	0040699d 	.word	0x0040699d

004077b0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4077b0:	b580      	push	{r7, lr}
  4077b2:	b082      	sub	sp, #8
  4077b4:	af00      	add	r7, sp, #0
  4077b6:	6078      	str	r0, [r7, #4]
  4077b8:	460b      	mov	r3, r1
  4077ba:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4077bc:	687a      	ldr	r2, [r7, #4]
  4077be:	4b18      	ldr	r3, [pc, #96]	; (407820 <usart_serial_putchar+0x70>)
  4077c0:	429a      	cmp	r2, r3
  4077c2:	d10a      	bne.n	4077da <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4077c4:	bf00      	nop
  4077c6:	78fb      	ldrb	r3, [r7, #3]
  4077c8:	6878      	ldr	r0, [r7, #4]
  4077ca:	4619      	mov	r1, r3
  4077cc:	4b15      	ldr	r3, [pc, #84]	; (407824 <usart_serial_putchar+0x74>)
  4077ce:	4798      	blx	r3
  4077d0:	4603      	mov	r3, r0
  4077d2:	2b00      	cmp	r3, #0
  4077d4:	d1f7      	bne.n	4077c6 <usart_serial_putchar+0x16>
		return 1;
  4077d6:	2301      	movs	r3, #1
  4077d8:	e01e      	b.n	407818 <usart_serial_putchar+0x68>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4077da:	687a      	ldr	r2, [r7, #4]
  4077dc:	4b12      	ldr	r3, [pc, #72]	; (407828 <usart_serial_putchar+0x78>)
  4077de:	429a      	cmp	r2, r3
  4077e0:	d10a      	bne.n	4077f8 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  4077e2:	bf00      	nop
  4077e4:	78fb      	ldrb	r3, [r7, #3]
  4077e6:	6878      	ldr	r0, [r7, #4]
  4077e8:	4619      	mov	r1, r3
  4077ea:	4b0e      	ldr	r3, [pc, #56]	; (407824 <usart_serial_putchar+0x74>)
  4077ec:	4798      	blx	r3
  4077ee:	4603      	mov	r3, r0
  4077f0:	2b00      	cmp	r3, #0
  4077f2:	d1f7      	bne.n	4077e4 <usart_serial_putchar+0x34>
		return 1;
  4077f4:	2301      	movs	r3, #1
  4077f6:	e00f      	b.n	407818 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4077f8:	687a      	ldr	r2, [r7, #4]
  4077fa:	4b0c      	ldr	r3, [pc, #48]	; (40782c <usart_serial_putchar+0x7c>)
  4077fc:	429a      	cmp	r2, r3
  4077fe:	d10a      	bne.n	407816 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  407800:	bf00      	nop
  407802:	78fb      	ldrb	r3, [r7, #3]
  407804:	6878      	ldr	r0, [r7, #4]
  407806:	4619      	mov	r1, r3
  407808:	4b09      	ldr	r3, [pc, #36]	; (407830 <usart_serial_putchar+0x80>)
  40780a:	4798      	blx	r3
  40780c:	4603      	mov	r3, r0
  40780e:	2b00      	cmp	r3, #0
  407810:	d1f7      	bne.n	407802 <usart_serial_putchar+0x52>
		return 1;
  407812:	2301      	movs	r3, #1
  407814:	e000      	b.n	407818 <usart_serial_putchar+0x68>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  407816:	2300      	movs	r3, #0
}
  407818:	4618      	mov	r0, r3
  40781a:	3708      	adds	r7, #8
  40781c:	46bd      	mov	sp, r7
  40781e:	bd80      	pop	{r7, pc}
  407820:	400e0600 	.word	0x400e0600
  407824:	0040a95d 	.word	0x0040a95d
  407828:	400e0800 	.word	0x400e0800
  40782c:	40024000 	.word	0x40024000
  407830:	00406a59 	.word	0x00406a59

00407834 <drv_uart_init>:
 * @brief initialize uart driver and circular buffer
 * @param uartConfig, the configuration structure for the uart, contains settings.  
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_init(drv_uart_config_t* uartConfig)
{
  407834:	b580      	push	{r7, lr}
  407836:	b084      	sub	sp, #16
  407838:	af00      	add	r7, sp, #0
  40783a:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS; 
  40783c:	2300      	movs	r3, #0
  40783e:	73fb      	strb	r3, [r7, #15]
	
	if(uartConfig->p_usart == UART0)
  407840:	687b      	ldr	r3, [r7, #4]
  407842:	681a      	ldr	r2, [r3, #0]
  407844:	4b57      	ldr	r3, [pc, #348]	; (4079a4 <drv_uart_init+0x170>)
  407846:	429a      	cmp	r2, r3
  407848:	d103      	bne.n	407852 <drv_uart_init+0x1e>
	{
		uartConfig->mem_index = 0;
  40784a:	687b      	ldr	r3, [r7, #4]
  40784c:	2200      	movs	r2, #0
  40784e:	615a      	str	r2, [r3, #20]
  407850:	e00a      	b.n	407868 <drv_uart_init+0x34>
	}
	else if(uartConfig->p_usart == UART1)
  407852:	687b      	ldr	r3, [r7, #4]
  407854:	681a      	ldr	r2, [r3, #0]
  407856:	4b54      	ldr	r3, [pc, #336]	; (4079a8 <drv_uart_init+0x174>)
  407858:	429a      	cmp	r2, r3
  40785a:	d103      	bne.n	407864 <drv_uart_init+0x30>
	{	
		uartConfig->mem_index = 1;
  40785c:	687b      	ldr	r3, [r7, #4]
  40785e:	2201      	movs	r2, #1
  407860:	615a      	str	r2, [r3, #20]
  407862:	e001      	b.n	407868 <drv_uart_init+0x34>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  407864:	2301      	movs	r3, #1
  407866:	e173      	b.n	407b50 <drv_uart_init+0x31c>
	}

	//initialize the circular buffers. 
	if(uartConfig->mem_index < 0 || uartConfig->mem_index > 2)
  407868:	687b      	ldr	r3, [r7, #4]
  40786a:	695b      	ldr	r3, [r3, #20]
  40786c:	2b00      	cmp	r3, #0
  40786e:	db03      	blt.n	407878 <drv_uart_init+0x44>
  407870:	687b      	ldr	r3, [r7, #4]
  407872:	695b      	ldr	r3, [r3, #20]
  407874:	2b02      	cmp	r3, #2
  407876:	dd01      	ble.n	40787c <drv_uart_init+0x48>
	{
		//ERROR! an incorrect buffer index has been used.  
		return STATUS_FAIL; 
  407878:	2301      	movs	r3, #1
  40787a:	e169      	b.n	407b50 <drv_uart_init+0x31c>
	}
	//make sure the buffer isn't already initialized. 
	if(uartMemBuf[uartConfig->mem_index].isinit == true)
  40787c:	687b      	ldr	r3, [r7, #4]
  40787e:	695a      	ldr	r2, [r3, #20]
  407880:	494a      	ldr	r1, [pc, #296]	; (4079ac <drv_uart_init+0x178>)
  407882:	4613      	mov	r3, r2
  407884:	019b      	lsls	r3, r3, #6
  407886:	4413      	add	r3, r2
  407888:	015b      	lsls	r3, r3, #5
  40788a:	440b      	add	r3, r1
  40788c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  407890:	799b      	ldrb	r3, [r3, #6]
  407892:	b2db      	uxtb	r3, r3
  407894:	2b01      	cmp	r3, #1
  407896:	d101      	bne.n	40789c <drv_uart_init+0x68>
	{
		//buffer already in use, call drv_uart_deinit() first
		return STATUS_FAIL; 
  407898:	2301      	movs	r3, #1
  40789a:	e159      	b.n	407b50 <drv_uart_init+0x31c>
	}
	
	//initialize the UART hardware 
	usart_serial_init(uartConfig->p_usart, &uartConfig->uart_options);
  40789c:	687b      	ldr	r3, [r7, #4]
  40789e:	681a      	ldr	r2, [r3, #0]
  4078a0:	687b      	ldr	r3, [r7, #4]
  4078a2:	3304      	adds	r3, #4
  4078a4:	4610      	mov	r0, r2
  4078a6:	4619      	mov	r1, r3
  4078a8:	4b41      	ldr	r3, [pc, #260]	; (4079b0 <drv_uart_init+0x17c>)
  4078aa:	4798      	blx	r3
	
	//setup interrupts for the UART
	/* Disable all the interrupts. */
	usart_disable_interrupt(uartConfig->p_usart, ALL_INTERRUPT_MASK);
  4078ac:	687b      	ldr	r3, [r7, #4]
  4078ae:	681b      	ldr	r3, [r3, #0]
  4078b0:	4618      	mov	r0, r3
  4078b2:	f04f 31ff 	mov.w	r1, #4294967295
  4078b6:	4b3f      	ldr	r3, [pc, #252]	; (4079b4 <drv_uart_init+0x180>)
  4078b8:	4798      	blx	r3
	/* Configure and enable interrupt of USART. */
	if(uartConfig->p_usart == UART0)
  4078ba:	687b      	ldr	r3, [r7, #4]
  4078bc:	681a      	ldr	r2, [r3, #0]
  4078be:	4b39      	ldr	r3, [pc, #228]	; (4079a4 <drv_uart_init+0x170>)
  4078c0:	429a      	cmp	r2, r3
  4078c2:	d11e      	bne.n	407902 <drv_uart_init+0xce>
	{
		sysclk_enable_peripheral_clock(ID_PIOA);
  4078c4:	200b      	movs	r0, #11
  4078c6:	4b3c      	ldr	r3, [pc, #240]	; (4079b8 <drv_uart_init+0x184>)
  4078c8:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  4078ca:	4b3c      	ldr	r3, [pc, #240]	; (4079bc <drv_uart_init+0x188>)
  4078cc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4078d0:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  4078d2:	4b3a      	ldr	r3, [pc, #232]	; (4079bc <drv_uart_init+0x188>)
  4078d4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4078d8:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  4078da:	4b38      	ldr	r3, [pc, #224]	; (4079bc <drv_uart_init+0x188>)
  4078dc:	4a37      	ldr	r2, [pc, #220]	; (4079bc <drv_uart_init+0x188>)
  4078de:	6f12      	ldr	r2, [r2, #112]	; 0x70
  4078e0:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  4078e4:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  4078e6:	4b35      	ldr	r3, [pc, #212]	; (4079bc <drv_uart_init+0x188>)
  4078e8:	4a34      	ldr	r2, [pc, #208]	; (4079bc <drv_uart_init+0x188>)
  4078ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
  4078ec:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  4078f0:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);	
  4078f2:	4b32      	ldr	r3, [pc, #200]	; (4079bc <drv_uart_init+0x188>)
  4078f4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4078f8:	605a      	str	r2, [r3, #4]
		
		//PIOA->PIO_PUDR   =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
		//PIOA->PIO_CODR   =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
		//PIOA->PIO_OER    =  (PIO_PA10A_UTXD0);
		//PIOA->PIO_PER    =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);				
		NVIC_EnableIRQ(UART0_IRQn);
  4078fa:	2008      	movs	r0, #8
  4078fc:	4b30      	ldr	r3, [pc, #192]	; (4079c0 <drv_uart_init+0x18c>)
  4078fe:	4798      	blx	r3
  407900:	e064      	b.n	4079cc <drv_uart_init+0x198>
	}
	else if(uartConfig->p_usart == UART1)
  407902:	687b      	ldr	r3, [r7, #4]
  407904:	681a      	ldr	r2, [r3, #0]
  407906:	4b28      	ldr	r3, [pc, #160]	; (4079a8 <drv_uart_init+0x174>)
  407908:	429a      	cmp	r2, r3
  40790a:	d11b      	bne.n	407944 <drv_uart_init+0x110>
	{
		sysclk_enable_peripheral_clock(ID_PIOB);
  40790c:	200c      	movs	r0, #12
  40790e:	4b2a      	ldr	r3, [pc, #168]	; (4079b8 <drv_uart_init+0x184>)
  407910:	4798      	blx	r3
		PIOB->PIO_IDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  407912:	4b2c      	ldr	r3, [pc, #176]	; (4079c4 <drv_uart_init+0x190>)
  407914:	220c      	movs	r2, #12
  407916:	645a      	str	r2, [r3, #68]	; 0x44
		PIOB->PIO_PUDR       =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  407918:	4b2a      	ldr	r3, [pc, #168]	; (4079c4 <drv_uart_init+0x190>)
  40791a:	220c      	movs	r2, #12
  40791c:	661a      	str	r2, [r3, #96]	; 0x60
		PIOB->PIO_ABCDSR[0] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40791e:	4b29      	ldr	r3, [pc, #164]	; (4079c4 <drv_uart_init+0x190>)
  407920:	4a28      	ldr	r2, [pc, #160]	; (4079c4 <drv_uart_init+0x190>)
  407922:	6f12      	ldr	r2, [r2, #112]	; 0x70
  407924:	f022 020c 	bic.w	r2, r2, #12
  407928:	671a      	str	r2, [r3, #112]	; 0x70
		PIOB->PIO_ABCDSR[1] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40792a:	4b26      	ldr	r3, [pc, #152]	; (4079c4 <drv_uart_init+0x190>)
  40792c:	4a25      	ldr	r2, [pc, #148]	; (4079c4 <drv_uart_init+0x190>)
  40792e:	6f52      	ldr	r2, [r2, #116]	; 0x74
  407930:	f022 020c 	bic.w	r2, r2, #12
  407934:	675a      	str	r2, [r3, #116]	; 0x74
		PIOB->PIO_PDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);		
  407936:	4b23      	ldr	r3, [pc, #140]	; (4079c4 <drv_uart_init+0x190>)
  407938:	220c      	movs	r2, #12
  40793a:	605a      	str	r2, [r3, #4]
		//PIOB->PIO_PUDR   =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
		//PIOB->PIO_CODR   =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
		//PIOB->PIO_OER    =  (PIO_PB3A_UTXD1);
		//PIOB->PIO_PER    =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);		
			
		NVIC_EnableIRQ(UART1_IRQn);
  40793c:	2009      	movs	r0, #9
  40793e:	4b20      	ldr	r3, [pc, #128]	; (4079c0 <drv_uart_init+0x18c>)
  407940:	4798      	blx	r3
  407942:	e043      	b.n	4079cc <drv_uart_init+0x198>
	}
	else if(uartConfig->p_usart == USART0)
  407944:	687b      	ldr	r3, [r7, #4]
  407946:	681a      	ldr	r2, [r3, #0]
  407948:	4b1f      	ldr	r3, [pc, #124]	; (4079c8 <drv_uart_init+0x194>)
  40794a:	429a      	cmp	r2, r3
  40794c:	d127      	bne.n	40799e <drv_uart_init+0x16a>
	{
		/* Configure USART0 Pins (PA6 = TX, PA5 = RX). */
		sysclk_enable_peripheral_clock(ID_PIOA);
  40794e:	200b      	movs	r0, #11
  407950:	4b19      	ldr	r3, [pc, #100]	; (4079b8 <drv_uart_init+0x184>)
  407952:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  407954:	4b19      	ldr	r3, [pc, #100]	; (4079bc <drv_uart_init+0x188>)
  407956:	2260      	movs	r2, #96	; 0x60
  407958:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  40795a:	4b18      	ldr	r3, [pc, #96]	; (4079bc <drv_uart_init+0x188>)
  40795c:	2260      	movs	r2, #96	; 0x60
  40795e:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  407960:	4b16      	ldr	r3, [pc, #88]	; (4079bc <drv_uart_init+0x188>)
  407962:	4a16      	ldr	r2, [pc, #88]	; (4079bc <drv_uart_init+0x188>)
  407964:	6f12      	ldr	r2, [r2, #112]	; 0x70
  407966:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  40796a:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  40796c:	4b13      	ldr	r3, [pc, #76]	; (4079bc <drv_uart_init+0x188>)
  40796e:	4a13      	ldr	r2, [pc, #76]	; (4079bc <drv_uart_init+0x188>)
  407970:	6f52      	ldr	r2, [r2, #116]	; 0x74
  407972:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  407976:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  407978:	4b10      	ldr	r3, [pc, #64]	; (4079bc <drv_uart_init+0x188>)
  40797a:	2260      	movs	r2, #96	; 0x60
  40797c:	605a      	str	r2, [r3, #4]
		PIOA->PIO_PUDR   =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  40797e:	4b0f      	ldr	r3, [pc, #60]	; (4079bc <drv_uart_init+0x188>)
  407980:	2260      	movs	r2, #96	; 0x60
  407982:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  407984:	4b0d      	ldr	r3, [pc, #52]	; (4079bc <drv_uart_init+0x188>)
  407986:	2260      	movs	r2, #96	; 0x60
  407988:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_OER    =  (PIO_PA6A_TXD0);
  40798a:	4b0c      	ldr	r3, [pc, #48]	; (4079bc <drv_uart_init+0x188>)
  40798c:	2240      	movs	r2, #64	; 0x40
  40798e:	611a      	str	r2, [r3, #16]
		PIOA->PIO_PER    =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);			
  407990:	4b0a      	ldr	r3, [pc, #40]	; (4079bc <drv_uart_init+0x188>)
  407992:	2260      	movs	r2, #96	; 0x60
  407994:	601a      	str	r2, [r3, #0]
		/* configure USART0 enable Pin (PA2) Peripheral-B */

		NVIC_EnableIRQ(USART0_IRQn);
  407996:	200e      	movs	r0, #14
  407998:	4b09      	ldr	r3, [pc, #36]	; (4079c0 <drv_uart_init+0x18c>)
  40799a:	4798      	blx	r3
  40799c:	e016      	b.n	4079cc <drv_uart_init+0x198>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  40799e:	2301      	movs	r3, #1
  4079a0:	e0d6      	b.n	407b50 <drv_uart_init+0x31c>
  4079a2:	bf00      	nop
  4079a4:	400e0600 	.word	0x400e0600
  4079a8:	400e0800 	.word	0x400e0800
  4079ac:	20008984 	.word	0x20008984
  4079b0:	004076e9 	.word	0x004076e9
  4079b4:	004069e9 	.word	0x004069e9
  4079b8:	004076b9 	.word	0x004076b9
  4079bc:	400e0e00 	.word	0x400e0e00
  4079c0:	004075e1 	.word	0x004075e1
  4079c4:	400e1000 	.word	0x400e1000
  4079c8:	40024000 	.word	0x40024000
	}
	uartMemBuf[uartConfig->mem_index].isinit = true;
  4079cc:	687b      	ldr	r3, [r7, #4]
  4079ce:	695a      	ldr	r2, [r3, #20]
  4079d0:	4961      	ldr	r1, [pc, #388]	; (407b58 <drv_uart_init+0x324>)
  4079d2:	4613      	mov	r3, r2
  4079d4:	019b      	lsls	r3, r3, #6
  4079d6:	4413      	add	r3, r2
  4079d8:	015b      	lsls	r3, r3, #5
  4079da:	440b      	add	r3, r1
  4079dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4079e0:	2201      	movs	r2, #1
  4079e2:	719a      	strb	r2, [r3, #6]
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY | UART_SR_TXEMPTY); //enable RXRDY interrupt	
  4079e4:	687b      	ldr	r3, [r7, #4]
  4079e6:	681b      	ldr	r3, [r3, #0]
  4079e8:	4618      	mov	r0, r3
  4079ea:	f240 2101 	movw	r1, #513	; 0x201
  4079ee:	4b5b      	ldr	r3, [pc, #364]	; (407b5c <drv_uart_init+0x328>)
  4079f0:	4798      	blx	r3
	
	//clear the buffer
	memset(uartMemBuf[uartConfig->mem_index].rx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  4079f2:	687b      	ldr	r3, [r7, #4]
  4079f4:	695a      	ldr	r2, [r3, #20]
  4079f6:	4613      	mov	r3, r2
  4079f8:	019b      	lsls	r3, r3, #6
  4079fa:	4413      	add	r3, r2
  4079fc:	015b      	lsls	r3, r3, #5
  4079fe:	4a56      	ldr	r2, [pc, #344]	; (407b58 <drv_uart_init+0x324>)
  407a00:	4413      	add	r3, r2
  407a02:	4618      	mov	r0, r3
  407a04:	2100      	movs	r1, #0
  407a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
  407a0a:	4b55      	ldr	r3, [pc, #340]	; (407b60 <drv_uart_init+0x32c>)
  407a0c:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_first = 0;
  407a0e:	687b      	ldr	r3, [r7, #4]
  407a10:	695a      	ldr	r2, [r3, #20]
  407a12:	4951      	ldr	r1, [pc, #324]	; (407b58 <drv_uart_init+0x324>)
  407a14:	4613      	mov	r3, r2
  407a16:	019b      	lsls	r3, r3, #6
  407a18:	4413      	add	r3, r2
  407a1a:	015b      	lsls	r3, r3, #5
  407a1c:	440b      	add	r3, r1
  407a1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  407a22:	2200      	movs	r2, #0
  407a24:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_last = 0;
  407a26:	687b      	ldr	r3, [r7, #4]
  407a28:	695a      	ldr	r2, [r3, #20]
  407a2a:	494b      	ldr	r1, [pc, #300]	; (407b58 <drv_uart_init+0x324>)
  407a2c:	4613      	mov	r3, r2
  407a2e:	019b      	lsls	r3, r3, #6
  407a30:	4413      	add	r3, r2
  407a32:	015b      	lsls	r3, r3, #5
  407a34:	440b      	add	r3, r1
  407a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  407a3a:	2200      	movs	r2, #0
  407a3c:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_full_flag = 0;
  407a3e:	687b      	ldr	r3, [r7, #4]
  407a40:	695a      	ldr	r2, [r3, #20]
  407a42:	4945      	ldr	r1, [pc, #276]	; (407b58 <drv_uart_init+0x324>)
  407a44:	4613      	mov	r3, r2
  407a46:	019b      	lsls	r3, r3, #6
  407a48:	4413      	add	r3, r2
  407a4a:	015b      	lsls	r3, r3, #5
  407a4c:	440b      	add	r3, r1
  407a4e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
  407a52:	2200      	movs	r2, #0
  407a54:	701a      	strb	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag = 0;
  407a56:	687b      	ldr	r3, [r7, #4]
  407a58:	695a      	ldr	r2, [r3, #20]
  407a5a:	493f      	ldr	r1, [pc, #252]	; (407b58 <drv_uart_init+0x324>)
  407a5c:	4613      	mov	r3, r2
  407a5e:	019b      	lsls	r3, r3, #6
  407a60:	4413      	add	r3, r2
  407a62:	015b      	lsls	r3, r3, #5
  407a64:	440b      	add	r3, r1
  407a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  407a6a:	2200      	movs	r2, #0
  407a6c:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_ovf_flag = 0;
  407a6e:	687b      	ldr	r3, [r7, #4]
  407a70:	695a      	ldr	r2, [r3, #20]
  407a72:	4939      	ldr	r1, [pc, #228]	; (407b58 <drv_uart_init+0x324>)
  407a74:	4613      	mov	r3, r2
  407a76:	019b      	lsls	r3, r3, #6
  407a78:	4413      	add	r3, r2
  407a7a:	015b      	lsls	r3, r3, #5
  407a7c:	440b      	add	r3, r1
  407a7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
  407a82:	2200      	movs	r2, #0
  407a84:	705a      	strb	r2, [r3, #1]
	uartMemBuf[uartConfig->mem_index].rx_fifo.num_bytes = 0;
  407a86:	687b      	ldr	r3, [r7, #4]
  407a88:	695a      	ldr	r2, [r3, #20]
  407a8a:	4933      	ldr	r1, [pc, #204]	; (407b58 <drv_uart_init+0x324>)
  407a8c:	4613      	mov	r3, r2
  407a8e:	019b      	lsls	r3, r3, #6
  407a90:	4413      	add	r3, r2
  407a92:	015b      	lsls	r3, r3, #5
  407a94:	440b      	add	r3, r1
  407a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  407a9a:	2200      	movs	r2, #0
  407a9c:	809a      	strh	r2, [r3, #4]

	memset(uartMemBuf[uartConfig->mem_index].tx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  407a9e:	687b      	ldr	r3, [r7, #4]
  407aa0:	695a      	ldr	r2, [r3, #20]
  407aa2:	4613      	mov	r3, r2
  407aa4:	019b      	lsls	r3, r3, #6
  407aa6:	4413      	add	r3, r2
  407aa8:	015b      	lsls	r3, r3, #5
  407aaa:	f503 6282 	add.w	r2, r3, #1040	; 0x410
  407aae:	4b2a      	ldr	r3, [pc, #168]	; (407b58 <drv_uart_init+0x324>)
  407ab0:	4413      	add	r3, r2
  407ab2:	4618      	mov	r0, r3
  407ab4:	2100      	movs	r1, #0
  407ab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  407aba:	4b29      	ldr	r3, [pc, #164]	; (407b60 <drv_uart_init+0x32c>)
  407abc:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].tx_fifo.i_first = 0;
  407abe:	687b      	ldr	r3, [r7, #4]
  407ac0:	695a      	ldr	r2, [r3, #20]
  407ac2:	4925      	ldr	r1, [pc, #148]	; (407b58 <drv_uart_init+0x324>)
  407ac4:	4613      	mov	r3, r2
  407ac6:	019b      	lsls	r3, r3, #6
  407ac8:	4413      	add	r3, r2
  407aca:	015b      	lsls	r3, r3, #5
  407acc:	440b      	add	r3, r1
  407ace:	f503 6301 	add.w	r3, r3, #2064	; 0x810
  407ad2:	2200      	movs	r2, #0
  407ad4:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].tx_fifo.i_last = 0;
  407ad6:	687b      	ldr	r3, [r7, #4]
  407ad8:	695a      	ldr	r2, [r3, #20]
  407ada:	491f      	ldr	r1, [pc, #124]	; (407b58 <drv_uart_init+0x324>)
  407adc:	4613      	mov	r3, r2
  407ade:	019b      	lsls	r3, r3, #6
  407ae0:	4413      	add	r3, r2
  407ae2:	015b      	lsls	r3, r3, #5
  407ae4:	440b      	add	r3, r1
  407ae6:	f503 6301 	add.w	r3, r3, #2064	; 0x810
  407aea:	2200      	movs	r2, #0
  407aec:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_full_flag = 0;
  407aee:	687b      	ldr	r3, [r7, #4]
  407af0:	695a      	ldr	r2, [r3, #20]
  407af2:	4919      	ldr	r1, [pc, #100]	; (407b58 <drv_uart_init+0x324>)
  407af4:	4613      	mov	r3, r2
  407af6:	019b      	lsls	r3, r3, #6
  407af8:	4413      	add	r3, r2
  407afa:	015b      	lsls	r3, r3, #5
  407afc:	440b      	add	r3, r1
  407afe:	f503 6301 	add.w	r3, r3, #2064	; 0x810
  407b02:	2200      	movs	r2, #0
  407b04:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_not_empty_flag = 0;
  407b06:	687b      	ldr	r3, [r7, #4]
  407b08:	695a      	ldr	r2, [r3, #20]
  407b0a:	4913      	ldr	r1, [pc, #76]	; (407b58 <drv_uart_init+0x324>)
  407b0c:	4613      	mov	r3, r2
  407b0e:	019b      	lsls	r3, r3, #6
  407b10:	4413      	add	r3, r2
  407b12:	015b      	lsls	r3, r3, #5
  407b14:	440b      	add	r3, r1
  407b16:	f503 6301 	add.w	r3, r3, #2064	; 0x810
  407b1a:	2200      	movs	r2, #0
  407b1c:	719a      	strb	r2, [r3, #6]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_ovf_flag = 0;
  407b1e:	687b      	ldr	r3, [r7, #4]
  407b20:	695a      	ldr	r2, [r3, #20]
  407b22:	490d      	ldr	r1, [pc, #52]	; (407b58 <drv_uart_init+0x324>)
  407b24:	4613      	mov	r3, r2
  407b26:	019b      	lsls	r3, r3, #6
  407b28:	4413      	add	r3, r2
  407b2a:	015b      	lsls	r3, r3, #5
  407b2c:	440b      	add	r3, r1
  407b2e:	f603 0318 	addw	r3, r3, #2072	; 0x818
  407b32:	2200      	movs	r2, #0
  407b34:	701a      	strb	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].tx_fifo.num_bytes = 0;
  407b36:	687b      	ldr	r3, [r7, #4]
  407b38:	695a      	ldr	r2, [r3, #20]
  407b3a:	4907      	ldr	r1, [pc, #28]	; (407b58 <drv_uart_init+0x324>)
  407b3c:	4613      	mov	r3, r2
  407b3e:	019b      	lsls	r3, r3, #6
  407b40:	4413      	add	r3, r2
  407b42:	015b      	lsls	r3, r3, #5
  407b44:	440b      	add	r3, r1
  407b46:	f503 6301 	add.w	r3, r3, #2064	; 0x810
  407b4a:	2200      	movs	r2, #0
  407b4c:	809a      	strh	r2, [r3, #4]
	
	return status; 
  407b4e:	7bfb      	ldrb	r3, [r7, #15]
}
  407b50:	4618      	mov	r0, r3
  407b52:	3710      	adds	r7, #16
  407b54:	46bd      	mov	sp, r7
  407b56:	bd80      	pop	{r7, pc}
  407b58:	20008984 	.word	0x20008984
  407b5c:	004069cd 	.word	0x004069cd
  407b60:	0040cb95 	.word	0x0040cb95

00407b64 <drv_uart_putChar>:
 * the character
 * @param c, the character that will be sent through the uart. 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_putChar(drv_uart_config_t* uartConfig, char c)
{
  407b64:	b580      	push	{r7, lr}
  407b66:	b086      	sub	sp, #24
  407b68:	af00      	add	r7, sp, #0
  407b6a:	6078      	str	r0, [r7, #4]
  407b6c:	460b      	mov	r3, r1
  407b6e:	70fb      	strb	r3, [r7, #3]
	status_t status = STATUS_PASS;
  407b70:	2300      	movs	r3, #0
  407b72:	75fb      	strb	r3, [r7, #23]
	//disable the interrupts so we don't fuck up the pointers	
	usart_disable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);	
  407b74:	687b      	ldr	r3, [r7, #4]
  407b76:	681b      	ldr	r3, [r3, #0]
  407b78:	4618      	mov	r0, r3
  407b7a:	f44f 7100 	mov.w	r1, #512	; 0x200
  407b7e:	4b30      	ldr	r3, [pc, #192]	; (407c40 <drv_uart_putChar+0xdc>)
  407b80:	4798      	blx	r3
	uint32_t val = 0;
  407b82:	2300      	movs	r3, #0
  407b84:	613b      	str	r3, [r7, #16]
	drv_uart_memory_buf_t* memBuf = &uartMemBuf[uartConfig->mem_index]; 
  407b86:	687b      	ldr	r3, [r7, #4]
  407b88:	695a      	ldr	r2, [r3, #20]
  407b8a:	4613      	mov	r3, r2
  407b8c:	019b      	lsls	r3, r3, #6
  407b8e:	4413      	add	r3, r2
  407b90:	015b      	lsls	r3, r3, #5
  407b92:	4a2c      	ldr	r2, [pc, #176]	; (407c44 <drv_uart_putChar+0xe0>)
  407b94:	4413      	add	r3, r2
  407b96:	60fb      	str	r3, [r7, #12]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  407b98:	68fb      	ldr	r3, [r7, #12]
  407b9a:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  407b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407ba2:	d10b      	bne.n	407bbc <drv_uart_putChar+0x58>
	{
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
  407ba4:	68fb      	ldr	r3, [r7, #12]
  407ba6:	2201      	movs	r2, #1
  407ba8:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
  407bac:	68fb      	ldr	r3, [r7, #12]
  407bae:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
  407bb2:	1c5a      	adds	r2, r3, #1
  407bb4:	68fb      	ldr	r3, [r7, #12]
  407bb6:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  407bba:	e01d      	b.n	407bf8 <drv_uart_putChar+0x94>
	}
	else if(memBuf->tx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  407bbc:	68fb      	ldr	r3, [r7, #12]
  407bbe:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  407bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407bc6:	d217      	bcs.n	407bf8 <drv_uart_putChar+0x94>
	{
		memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_last] = c;
  407bc8:	68fb      	ldr	r3, [r7, #12]
  407bca:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
  407bce:	68fa      	ldr	r2, [r7, #12]
  407bd0:	4413      	add	r3, r2
  407bd2:	78fa      	ldrb	r2, [r7, #3]
  407bd4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
		memBuf->tx_fifo.i_last++;                              // increment the index of the most recently added element
  407bd8:	68fb      	ldr	r3, [r7, #12]
  407bda:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
  407bde:	3301      	adds	r3, #1
  407be0:	b29a      	uxth	r2, r3
  407be2:	68fb      	ldr	r3, [r7, #12]
  407be4:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
		memBuf->tx_fifo.num_bytes++;                           // increment the bytes counter
  407be8:	68fb      	ldr	r3, [r7, #12]
  407bea:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  407bee:	3301      	adds	r3, #1
  407bf0:	b29a      	uxth	r2, r3
  407bf2:	68fb      	ldr	r3, [r7, #12]
  407bf4:	f8a3 2814 	strh.w	r2, [r3, #2068]	; 0x814
		//if(uartConfig->p_usart == UART1)
		//{
			//usart_putchar(UART0, c);
		//}
	}
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  407bf8:	68fb      	ldr	r3, [r7, #12]
  407bfa:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  407bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407c02:	d103      	bne.n	407c0c <drv_uart_putChar+0xa8>
	{      // if sw buffer just filled up
		memBuf->uart_tx_fifo_full_flag = 1;                    // set the tx FIFO full flag
  407c04:	68fb      	ldr	r3, [r7, #12]
  407c06:	2201      	movs	r2, #1
  407c08:	f883 2817 	strb.w	r2, [r3, #2071]	; 0x817
	}
	if(memBuf->tx_fifo.i_last == FIFO_BUFFER_SIZE)
  407c0c:	68fb      	ldr	r3, [r7, #12]
  407c0e:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
  407c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407c16:	d103      	bne.n	407c20 <drv_uart_putChar+0xbc>
	{         // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_last = 0;                            // roll over the index counter
  407c18:	68fb      	ldr	r3, [r7, #12]
  407c1a:	2200      	movs	r2, #0
  407c1c:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
	}
	memBuf->uart_tx_fifo_not_empty_flag = 1;                 // set tx-data ready flag	
  407c20:	68fb      	ldr	r3, [r7, #12]
  407c22:	2201      	movs	r2, #1
  407c24:	f883 2816 	strb.w	r2, [r3, #2070]	; 0x816
	//re-enable the interrupts
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);		
  407c28:	687b      	ldr	r3, [r7, #4]
  407c2a:	681b      	ldr	r3, [r3, #0]
  407c2c:	4618      	mov	r0, r3
  407c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
  407c32:	4b05      	ldr	r3, [pc, #20]	; (407c48 <drv_uart_putChar+0xe4>)
  407c34:	4798      	blx	r3
	return status;	
  407c36:	7dfb      	ldrb	r3, [r7, #23]
}
  407c38:	4618      	mov	r0, r3
  407c3a:	3718      	adds	r7, #24
  407c3c:	46bd      	mov	sp, r7
  407c3e:	bd80      	pop	{r7, pc}
  407c40:	004069e9 	.word	0x004069e9
  407c44:	20008984 	.word	0x20008984
  407c48:	004069cd 	.word	0x004069cd

00407c4c <drv_uart_getChar>:
 * @param *c, the return character
 * @return STATUS_PASS if successful, STATUS_EOF if there were no bytes to read
 *	STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_getChar(drv_uart_config_t* uartConfig, char* c)
{
  407c4c:	b580      	push	{r7, lr}
  407c4e:	b084      	sub	sp, #16
  407c50:	af00      	add	r7, sp, #0
  407c52:	6078      	str	r0, [r7, #4]
  407c54:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  407c56:	2300      	movs	r3, #0
  407c58:	73fb      	strb	r3, [r7, #15]
	
	if(uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag == 1) //check if the buffer has information in it
  407c5a:	687b      	ldr	r3, [r7, #4]
  407c5c:	695a      	ldr	r2, [r3, #20]
  407c5e:	4917      	ldr	r1, [pc, #92]	; (407cbc <drv_uart_getChar+0x70>)
  407c60:	4613      	mov	r3, r2
  407c62:	019b      	lsls	r3, r3, #6
  407c64:	4413      	add	r3, r2
  407c66:	015b      	lsls	r3, r3, #5
  407c68:	440b      	add	r3, r1
  407c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  407c6e:	79db      	ldrb	r3, [r3, #7]
  407c70:	b2db      	uxtb	r3, r3
  407c72:	2b01      	cmp	r3, #1
  407c74:	d11a      	bne.n	407cac <drv_uart_getChar+0x60>
	{
		usart_disable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);
  407c76:	687b      	ldr	r3, [r7, #4]
  407c78:	681b      	ldr	r3, [r3, #0]
  407c7a:	4618      	mov	r0, r3
  407c7c:	2101      	movs	r1, #1
  407c7e:	4b10      	ldr	r3, [pc, #64]	; (407cc0 <drv_uart_getChar+0x74>)
  407c80:	4798      	blx	r3
		//disable the interrupts so we don't fuck up the pointers		
		status = uart_get_byte(&(uartMemBuf[uartConfig->mem_index]), c); //get the byte from the buffer	
  407c82:	687b      	ldr	r3, [r7, #4]
  407c84:	695a      	ldr	r2, [r3, #20]
  407c86:	4613      	mov	r3, r2
  407c88:	019b      	lsls	r3, r3, #6
  407c8a:	4413      	add	r3, r2
  407c8c:	015b      	lsls	r3, r3, #5
  407c8e:	4a0b      	ldr	r2, [pc, #44]	; (407cbc <drv_uart_getChar+0x70>)
  407c90:	4413      	add	r3, r2
  407c92:	4618      	mov	r0, r3
  407c94:	6839      	ldr	r1, [r7, #0]
  407c96:	4b0b      	ldr	r3, [pc, #44]	; (407cc4 <drv_uart_getChar+0x78>)
  407c98:	4798      	blx	r3
  407c9a:	4603      	mov	r3, r0
  407c9c:	73fb      	strb	r3, [r7, #15]
		//re-enable the interrupts
		usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);				
  407c9e:	687b      	ldr	r3, [r7, #4]
  407ca0:	681b      	ldr	r3, [r3, #0]
  407ca2:	4618      	mov	r0, r3
  407ca4:	2101      	movs	r1, #1
  407ca6:	4b08      	ldr	r3, [pc, #32]	; (407cc8 <drv_uart_getChar+0x7c>)
  407ca8:	4798      	blx	r3
  407caa:	e001      	b.n	407cb0 <drv_uart_getChar+0x64>
	}
	else
	{
		status = STATUS_EOF; //there's no data return End Of File status code.
  407cac:	2302      	movs	r3, #2
  407cae:	73fb      	strb	r3, [r7, #15]
	}
	
	return status;	
  407cb0:	7bfb      	ldrb	r3, [r7, #15]
}
  407cb2:	4618      	mov	r0, r3
  407cb4:	3710      	adds	r7, #16
  407cb6:	46bd      	mov	sp, r7
  407cb8:	bd80      	pop	{r7, pc}
  407cba:	bf00      	nop
  407cbc:	20008984 	.word	0x20008984
  407cc0:	004069e9 	.word	0x004069e9
  407cc4:	00407fe5 	.word	0x00407fe5
  407cc8:	004069cd 	.word	0x004069cd

00407ccc <drv_uart_deInit>:
 * @brief puts the uart driver in a deinitialized state
 * @param uartConfig, the configuration structure for the uart, 
 * @return STATUS_PASS if successful,	STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_deInit(drv_uart_config_t* uartConfig)
{
  407ccc:	b580      	push	{r7, lr}
  407cce:	b084      	sub	sp, #16
  407cd0:	af00      	add	r7, sp, #0
  407cd2:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  407cd4:	2300      	movs	r3, #0
  407cd6:	73fb      	strb	r3, [r7, #15]
	/* Disable all the interrupts. */
	usart_disable_interrupt(uartConfig->p_usart, ALL_INTERRUPT_MASK);
  407cd8:	687b      	ldr	r3, [r7, #4]
  407cda:	681b      	ldr	r3, [r3, #0]
  407cdc:	4618      	mov	r0, r3
  407cde:	f04f 31ff 	mov.w	r1, #4294967295
  407ce2:	4b34      	ldr	r3, [pc, #208]	; (407db4 <drv_uart_deInit+0xe8>)
  407ce4:	4798      	blx	r3
	uart_disable(uartConfig->p_usart);
  407ce6:	687b      	ldr	r3, [r7, #4]
  407ce8:	681b      	ldr	r3, [r3, #0]
  407cea:	4618      	mov	r0, r3
  407cec:	4b32      	ldr	r3, [pc, #200]	; (407db8 <drv_uart_deInit+0xec>)
  407cee:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].isinit = false;		
  407cf0:	687b      	ldr	r3, [r7, #4]
  407cf2:	695a      	ldr	r2, [r3, #20]
  407cf4:	4931      	ldr	r1, [pc, #196]	; (407dbc <drv_uart_deInit+0xf0>)
  407cf6:	4613      	mov	r3, r2
  407cf8:	019b      	lsls	r3, r3, #6
  407cfa:	4413      	add	r3, r2
  407cfc:	015b      	lsls	r3, r3, #5
  407cfe:	440b      	add	r3, r1
  407d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  407d04:	2200      	movs	r2, #0
  407d06:	719a      	strb	r2, [r3, #6]
	unsigned long PinFlag = PIO_TYPE_PIO_OUTPUT_0;
  407d08:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  407d0c:	60bb      	str	r3, [r7, #8]
	if(uartConfig->p_usart == UART0)
  407d0e:	687b      	ldr	r3, [r7, #4]
  407d10:	681a      	ldr	r2, [r3, #0]
  407d12:	4b2b      	ldr	r3, [pc, #172]	; (407dc0 <drv_uart_deInit+0xf4>)
  407d14:	429a      	cmp	r2, r3
  407d16:	d129      	bne.n	407d6c <drv_uart_deInit+0xa0>
	{
		sysclk_disable_peripheral_clock(ID_UART0);
  407d18:	2008      	movs	r0, #8
  407d1a:	4b2a      	ldr	r3, [pc, #168]	; (407dc4 <drv_uart_deInit+0xf8>)
  407d1c:	4798      	blx	r3

		//enable the pin
		PIOA->PIO_PDR    |=  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);			
  407d1e:	4b2a      	ldr	r3, [pc, #168]	; (407dc8 <drv_uart_deInit+0xfc>)
  407d20:	4a29      	ldr	r2, [pc, #164]	; (407dc8 <drv_uart_deInit+0xfc>)
  407d22:	6852      	ldr	r2, [r2, #4]
  407d24:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  407d28:	605a      	str	r2, [r3, #4]
		PIOA->PIO_PUDR   |=  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  407d2a:	4b27      	ldr	r3, [pc, #156]	; (407dc8 <drv_uart_deInit+0xfc>)
  407d2c:	4a26      	ldr	r2, [pc, #152]	; (407dc8 <drv_uart_deInit+0xfc>)
  407d2e:	6e12      	ldr	r2, [r2, #96]	; 0x60
  407d30:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  407d34:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   |=  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  407d36:	4b24      	ldr	r3, [pc, #144]	; (407dc8 <drv_uart_deInit+0xfc>)
  407d38:	4a23      	ldr	r2, [pc, #140]	; (407dc8 <drv_uart_deInit+0xfc>)
  407d3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
  407d3c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  407d40:	635a      	str	r2, [r3, #52]	; 0x34
		//disable pin as output
		PIOA->PIO_ODR    |=  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  407d42:	4b21      	ldr	r3, [pc, #132]	; (407dc8 <drv_uart_deInit+0xfc>)
  407d44:	4a20      	ldr	r2, [pc, #128]	; (407dc8 <drv_uart_deInit+0xfc>)
  407d46:	6952      	ldr	r2, [r2, #20]
  407d48:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  407d4c:	615a      	str	r2, [r3, #20]
		//re-enable the pin
		PIOA->PIO_PER    |=  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);	
  407d4e:	4b1e      	ldr	r3, [pc, #120]	; (407dc8 <drv_uart_deInit+0xfc>)
  407d50:	4a1d      	ldr	r2, [pc, #116]	; (407dc8 <drv_uart_deInit+0xfc>)
  407d52:	6812      	ldr	r2, [r2, #0]
  407d54:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  407d58:	601a      	str	r2, [r3, #0]
		pio_configure_pin(PIO_PA9_IDX, PinFlag);
  407d5a:	2009      	movs	r0, #9
  407d5c:	68b9      	ldr	r1, [r7, #8]
  407d5e:	4b1b      	ldr	r3, [pc, #108]	; (407dcc <drv_uart_deInit+0x100>)
  407d60:	4798      	blx	r3
		pio_configure_pin(PIO_PA10_IDX, PinFlag);
  407d62:	200a      	movs	r0, #10
  407d64:	68b9      	ldr	r1, [r7, #8]
  407d66:	4b19      	ldr	r3, [pc, #100]	; (407dcc <drv_uart_deInit+0x100>)
  407d68:	4798      	blx	r3
  407d6a:	e01e      	b.n	407daa <drv_uart_deInit+0xde>
	}
	else if(uartConfig->p_usart == UART1)
  407d6c:	687b      	ldr	r3, [r7, #4]
  407d6e:	681a      	ldr	r2, [r3, #0]
  407d70:	4b17      	ldr	r3, [pc, #92]	; (407dd0 <drv_uart_deInit+0x104>)
  407d72:	429a      	cmp	r2, r3
  407d74:	d119      	bne.n	407daa <drv_uart_deInit+0xde>
	{
		sysclk_disable_peripheral_clock(ID_UART1);
  407d76:	2009      	movs	r0, #9
  407d78:	4b12      	ldr	r3, [pc, #72]	; (407dc4 <drv_uart_deInit+0xf8>)
  407d7a:	4798      	blx	r3
		PIOB->PIO_PDR    =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);		
  407d7c:	4b15      	ldr	r3, [pc, #84]	; (407dd4 <drv_uart_deInit+0x108>)
  407d7e:	220c      	movs	r2, #12
  407d80:	605a      	str	r2, [r3, #4]
		PIOB->PIO_PUDR   =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  407d82:	4b14      	ldr	r3, [pc, #80]	; (407dd4 <drv_uart_deInit+0x108>)
  407d84:	220c      	movs	r2, #12
  407d86:	661a      	str	r2, [r3, #96]	; 0x60
		PIOB->PIO_CODR   =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  407d88:	4b12      	ldr	r3, [pc, #72]	; (407dd4 <drv_uart_deInit+0x108>)
  407d8a:	220c      	movs	r2, #12
  407d8c:	635a      	str	r2, [r3, #52]	; 0x34
		PIOB->PIO_ODR    =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  407d8e:	4b11      	ldr	r3, [pc, #68]	; (407dd4 <drv_uart_deInit+0x108>)
  407d90:	220c      	movs	r2, #12
  407d92:	615a      	str	r2, [r3, #20]
		PIOB->PIO_PER    =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);		
  407d94:	4b0f      	ldr	r3, [pc, #60]	; (407dd4 <drv_uart_deInit+0x108>)
  407d96:	220c      	movs	r2, #12
  407d98:	601a      	str	r2, [r3, #0]
		pio_configure_pin(PIO_PB2_IDX, PinFlag);
  407d9a:	2022      	movs	r0, #34	; 0x22
  407d9c:	68b9      	ldr	r1, [r7, #8]
  407d9e:	4b0b      	ldr	r3, [pc, #44]	; (407dcc <drv_uart_deInit+0x100>)
  407da0:	4798      	blx	r3
		pio_configure_pin(PIO_PB3_IDX, PinFlag);		
  407da2:	2023      	movs	r0, #35	; 0x23
  407da4:	68b9      	ldr	r1, [r7, #8]
  407da6:	4b09      	ldr	r3, [pc, #36]	; (407dcc <drv_uart_deInit+0x100>)
  407da8:	4798      	blx	r3
	}	
	return status;	
  407daa:	7bfb      	ldrb	r3, [r7, #15]
}
  407dac:	4618      	mov	r0, r3
  407dae:	3710      	adds	r7, #16
  407db0:	46bd      	mov	sp, r7
  407db2:	bd80      	pop	{r7, pc}
  407db4:	004069e9 	.word	0x004069e9
  407db8:	0040a911 	.word	0x0040a911
  407dbc:	20008984 	.word	0x20008984
  407dc0:	400e0600 	.word	0x400e0600
  407dc4:	004076d1 	.word	0x004076d1
  407dc8:	400e0e00 	.word	0x400e0e00
  407dcc:	0040b1cd 	.word	0x0040b1cd
  407dd0:	400e0800 	.word	0x400e0800
  407dd4:	400e1000 	.word	0x400e1000

00407dd8 <drv_uart_isInit>:
 * @brief returns the initialized status of the uart
 * @param uartConfig, the configuration structure for the uart
 * @return STATUS_PASS if the driver is initialized,	STATUS_FAIL if not
 ***********************************************************************************************/	
status_t drv_uart_isInit(drv_uart_config_t* uartConfig)
{
  407dd8:	b480      	push	{r7}
  407dda:	b083      	sub	sp, #12
  407ddc:	af00      	add	r7, sp, #0
  407dde:	6078      	str	r0, [r7, #4]
	if(uartMemBuf[uartConfig->mem_index].isinit)
  407de0:	687b      	ldr	r3, [r7, #4]
  407de2:	695a      	ldr	r2, [r3, #20]
  407de4:	490a      	ldr	r1, [pc, #40]	; (407e10 <drv_uart_isInit+0x38>)
  407de6:	4613      	mov	r3, r2
  407de8:	019b      	lsls	r3, r3, #6
  407dea:	4413      	add	r3, r2
  407dec:	015b      	lsls	r3, r3, #5
  407dee:	440b      	add	r3, r1
  407df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  407df4:	799b      	ldrb	r3, [r3, #6]
  407df6:	b2db      	uxtb	r3, r3
  407df8:	2b00      	cmp	r3, #0
  407dfa:	d001      	beq.n	407e00 <drv_uart_isInit+0x28>
	{
		return STATUS_PASS;
  407dfc:	2300      	movs	r3, #0
  407dfe:	e000      	b.n	407e02 <drv_uart_isInit+0x2a>
	}
	else
	{
		return STATUS_FAIL; 
  407e00:	2301      	movs	r3, #1
	}
}
  407e02:	4618      	mov	r0, r3
  407e04:	370c      	adds	r7, #12
  407e06:	46bd      	mov	sp, r7
  407e08:	f85d 7b04 	ldr.w	r7, [sp], #4
  407e0c:	4770      	bx	lr
  407e0e:	bf00      	nop
  407e10:	20008984 	.word	0x20008984

00407e14 <drv_uart_putString>:
	*strLength = pointer;
	return result; 
}

void drv_uart_putString(drv_uart_config_t* uartConfig, char* str)
{
  407e14:	b580      	push	{r7, lr}
  407e16:	b084      	sub	sp, #16
  407e18:	af00      	add	r7, sp, #0
  407e1a:	6078      	str	r0, [r7, #4]
  407e1c:	6039      	str	r1, [r7, #0]
	int i=0;
  407e1e:	2300      	movs	r3, #0
  407e20:	60fb      	str	r3, [r7, #12]
	int size = strlen(str);
  407e22:	6838      	ldr	r0, [r7, #0]
  407e24:	4b0d      	ldr	r3, [pc, #52]	; (407e5c <drv_uart_putString+0x48>)
  407e26:	4798      	blx	r3
  407e28:	4603      	mov	r3, r0
  407e2a:	60bb      	str	r3, [r7, #8]

	for (i=0;i<size;)
  407e2c:	2300      	movs	r3, #0
  407e2e:	60fb      	str	r3, [r7, #12]
  407e30:	e00d      	b.n	407e4e <drv_uart_putString+0x3a>
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  407e32:	68fb      	ldr	r3, [r7, #12]
  407e34:	683a      	ldr	r2, [r7, #0]
  407e36:	4413      	add	r3, r2
  407e38:	781b      	ldrb	r3, [r3, #0]
  407e3a:	6878      	ldr	r0, [r7, #4]
  407e3c:	4619      	mov	r1, r3
  407e3e:	4b08      	ldr	r3, [pc, #32]	; (407e60 <drv_uart_putString+0x4c>)
  407e40:	4798      	blx	r3
  407e42:	4603      	mov	r3, r0
  407e44:	2b00      	cmp	r3, #0
  407e46:	d102      	bne.n	407e4e <drv_uart_putString+0x3a>
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
  407e48:	68fb      	ldr	r3, [r7, #12]
  407e4a:	3301      	adds	r3, #1
  407e4c:	60fb      	str	r3, [r7, #12]
void drv_uart_putString(drv_uart_config_t* uartConfig, char* str)
{
	int i=0;
	int size = strlen(str);

	for (i=0;i<size;)
  407e4e:	68fa      	ldr	r2, [r7, #12]
  407e50:	68bb      	ldr	r3, [r7, #8]
  407e52:	429a      	cmp	r2, r3
  407e54:	dbed      	blt.n	407e32 <drv_uart_putString+0x1e>
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
		}		
	}
}
  407e56:	3710      	adds	r7, #16
  407e58:	46bd      	mov	sp, r7
  407e5a:	bd80      	pop	{r7, pc}
  407e5c:	0040ced1 	.word	0x0040ced1
  407e60:	00407b65 	.word	0x00407b65

00407e64 <drv_uart_putData>:

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
  407e64:	b580      	push	{r7, lr}
  407e66:	b086      	sub	sp, #24
  407e68:	af00      	add	r7, sp, #0
  407e6a:	60f8      	str	r0, [r7, #12]
  407e6c:	60b9      	str	r1, [r7, #8]
  407e6e:	607a      	str	r2, [r7, #4]
	int i=0;
  407e70:	2300      	movs	r3, #0
  407e72:	617b      	str	r3, [r7, #20]
	for (i=0;i<length;)
  407e74:	2300      	movs	r3, #0
  407e76:	617b      	str	r3, [r7, #20]
  407e78:	e00d      	b.n	407e96 <drv_uart_putData+0x32>
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  407e7a:	697b      	ldr	r3, [r7, #20]
  407e7c:	68ba      	ldr	r2, [r7, #8]
  407e7e:	4413      	add	r3, r2
  407e80:	781b      	ldrb	r3, [r3, #0]
  407e82:	68f8      	ldr	r0, [r7, #12]
  407e84:	4619      	mov	r1, r3
  407e86:	4b07      	ldr	r3, [pc, #28]	; (407ea4 <drv_uart_putData+0x40>)
  407e88:	4798      	blx	r3
  407e8a:	4603      	mov	r3, r0
  407e8c:	2b00      	cmp	r3, #0
  407e8e:	d102      	bne.n	407e96 <drv_uart_putData+0x32>
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
  407e90:	697b      	ldr	r3, [r7, #20]
  407e92:	3301      	adds	r3, #1
  407e94:	617b      	str	r3, [r7, #20]
}

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
	int i=0;
	for (i=0;i<length;)
  407e96:	697a      	ldr	r2, [r7, #20]
  407e98:	687b      	ldr	r3, [r7, #4]
  407e9a:	429a      	cmp	r2, r3
  407e9c:	d3ed      	bcc.n	407e7a <drv_uart_putData+0x16>
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
		}
	}
}
  407e9e:	3718      	adds	r7, #24
  407ea0:	46bd      	mov	sp, r7
  407ea2:	bd80      	pop	{r7, pc}
  407ea4:	00407b65 	.word	0x00407b65

00407ea8 <UART0_Handler>:
	}
}

// interrupt handlers
void UART0_Handler()
{	
  407ea8:	b580      	push	{r7, lr}
  407eaa:	b082      	sub	sp, #8
  407eac:	af00      	add	r7, sp, #0
	//if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized. 
	//{
		//uart_process_byte(UART0, &(uartMemBuf[0]));	
	//}
	uint32_t status = uart_get_status(UART0); 
  407eae:	4812      	ldr	r0, [pc, #72]	; (407ef8 <UART0_Handler+0x50>)
  407eb0:	4b12      	ldr	r3, [pc, #72]	; (407efc <UART0_Handler+0x54>)
  407eb2:	4798      	blx	r3
  407eb4:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  407eb6:	687b      	ldr	r3, [r7, #4]
  407eb8:	f003 0301 	and.w	r3, r3, #1
  407ebc:	2b00      	cmp	r3, #0
  407ebe:	d009      	beq.n	407ed4 <UART0_Handler+0x2c>
	{	
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  407ec0:	4b0f      	ldr	r3, [pc, #60]	; (407f00 <UART0_Handler+0x58>)
  407ec2:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
  407ec6:	b2db      	uxtb	r3, r3
  407ec8:	2b00      	cmp	r3, #0
  407eca:	d003      	beq.n	407ed4 <UART0_Handler+0x2c>
		{
			uart_process_byte(UART0, &(uartMemBuf[0]));
  407ecc:	480a      	ldr	r0, [pc, #40]	; (407ef8 <UART0_Handler+0x50>)
  407ece:	490c      	ldr	r1, [pc, #48]	; (407f00 <UART0_Handler+0x58>)
  407ed0:	4b0c      	ldr	r3, [pc, #48]	; (407f04 <UART0_Handler+0x5c>)
  407ed2:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  407ed4:	687b      	ldr	r3, [r7, #4]
  407ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
  407eda:	2b00      	cmp	r3, #0
  407edc:	d009      	beq.n	407ef2 <UART0_Handler+0x4a>
	{
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  407ede:	4b08      	ldr	r3, [pc, #32]	; (407f00 <UART0_Handler+0x58>)
  407ee0:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
  407ee4:	b2db      	uxtb	r3, r3
  407ee6:	2b00      	cmp	r3, #0
  407ee8:	d003      	beq.n	407ef2 <UART0_Handler+0x4a>
		{
			uart_process_tx_byte(UART0, &(uartMemBuf[0])); 	
  407eea:	4803      	ldr	r0, [pc, #12]	; (407ef8 <UART0_Handler+0x50>)
  407eec:	4904      	ldr	r1, [pc, #16]	; (407f00 <UART0_Handler+0x58>)
  407eee:	4b06      	ldr	r3, [pc, #24]	; (407f08 <UART0_Handler+0x60>)
  407ef0:	4798      	blx	r3
		}
	}	
}
  407ef2:	3708      	adds	r7, #8
  407ef4:	46bd      	mov	sp, r7
  407ef6:	bd80      	pop	{r7, pc}
  407ef8:	400e0600 	.word	0x400e0600
  407efc:	0040a945 	.word	0x0040a945
  407f00:	20008984 	.word	0x20008984
  407f04:	00408071 	.word	0x00408071
  407f08:	00408135 	.word	0x00408135

00407f0c <UART1_Handler>:

void UART1_Handler()
{
  407f0c:	b580      	push	{r7, lr}
  407f0e:	b082      	sub	sp, #8
  407f10:	af00      	add	r7, sp, #0
	uint32_t status = uart_get_status(UART1); 
  407f12:	4812      	ldr	r0, [pc, #72]	; (407f5c <UART1_Handler+0x50>)
  407f14:	4b12      	ldr	r3, [pc, #72]	; (407f60 <UART1_Handler+0x54>)
  407f16:	4798      	blx	r3
  407f18:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  407f1a:	687b      	ldr	r3, [r7, #4]
  407f1c:	f003 0301 	and.w	r3, r3, #1
  407f20:	2b00      	cmp	r3, #0
  407f22:	d009      	beq.n	407f38 <UART1_Handler+0x2c>
	{	
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  407f24:	4b0f      	ldr	r3, [pc, #60]	; (407f64 <UART1_Handler+0x58>)
  407f26:	f893 3c26 	ldrb.w	r3, [r3, #3110]	; 0xc26
  407f2a:	b2db      	uxtb	r3, r3
  407f2c:	2b00      	cmp	r3, #0
  407f2e:	d003      	beq.n	407f38 <UART1_Handler+0x2c>
		{
			uart_process_byte(UART1, &(uartMemBuf[1]));
  407f30:	480a      	ldr	r0, [pc, #40]	; (407f5c <UART1_Handler+0x50>)
  407f32:	490d      	ldr	r1, [pc, #52]	; (407f68 <UART1_Handler+0x5c>)
  407f34:	4b0d      	ldr	r3, [pc, #52]	; (407f6c <UART1_Handler+0x60>)
  407f36:	4798      	blx	r3
			
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  407f38:	687b      	ldr	r3, [r7, #4]
  407f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  407f3e:	2b00      	cmp	r3, #0
  407f40:	d009      	beq.n	407f56 <UART1_Handler+0x4a>
	{
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  407f42:	4b08      	ldr	r3, [pc, #32]	; (407f64 <UART1_Handler+0x58>)
  407f44:	f893 3c26 	ldrb.w	r3, [r3, #3110]	; 0xc26
  407f48:	b2db      	uxtb	r3, r3
  407f4a:	2b00      	cmp	r3, #0
  407f4c:	d003      	beq.n	407f56 <UART1_Handler+0x4a>
		{
			uart_process_tx_byte(UART1, &(uartMemBuf[1])); 	
  407f4e:	4803      	ldr	r0, [pc, #12]	; (407f5c <UART1_Handler+0x50>)
  407f50:	4905      	ldr	r1, [pc, #20]	; (407f68 <UART1_Handler+0x5c>)
  407f52:	4b07      	ldr	r3, [pc, #28]	; (407f70 <UART1_Handler+0x64>)
  407f54:	4798      	blx	r3
		}
	}
}
  407f56:	3708      	adds	r7, #8
  407f58:	46bd      	mov	sp, r7
  407f5a:	bd80      	pop	{r7, pc}
  407f5c:	400e0800 	.word	0x400e0800
  407f60:	0040a945 	.word	0x0040a945
  407f64:	20008984 	.word	0x20008984
  407f68:	200091a4 	.word	0x200091a4
  407f6c:	00408071 	.word	0x00408071
  407f70:	00408135 	.word	0x00408135

00407f74 <USART0_Handler>:

void USART0_Handler()
{
  407f74:	b580      	push	{r7, lr}
  407f76:	b082      	sub	sp, #8
  407f78:	af00      	add	r7, sp, #0
	//if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART0, &(uartMemBuf[2]));
	//}
	uint32_t status = uart_get_status(USART0); 
  407f7a:	4814      	ldr	r0, [pc, #80]	; (407fcc <USART0_Handler+0x58>)
  407f7c:	4b14      	ldr	r3, [pc, #80]	; (407fd0 <USART0_Handler+0x5c>)
  407f7e:	4798      	blx	r3
  407f80:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  407f82:	687b      	ldr	r3, [r7, #4]
  407f84:	f003 0301 	and.w	r3, r3, #1
  407f88:	2b00      	cmp	r3, #0
  407f8a:	d00b      	beq.n	407fa4 <USART0_Handler+0x30>
	{	
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  407f8c:	4b11      	ldr	r3, [pc, #68]	; (407fd4 <USART0_Handler+0x60>)
  407f8e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
  407f92:	3306      	adds	r3, #6
  407f94:	781b      	ldrb	r3, [r3, #0]
  407f96:	b2db      	uxtb	r3, r3
  407f98:	2b00      	cmp	r3, #0
  407f9a:	d003      	beq.n	407fa4 <USART0_Handler+0x30>
		{
			uart_process_byte(USART0, &(uartMemBuf[2]));
  407f9c:	480b      	ldr	r0, [pc, #44]	; (407fcc <USART0_Handler+0x58>)
  407f9e:	490e      	ldr	r1, [pc, #56]	; (407fd8 <USART0_Handler+0x64>)
  407fa0:	4b0e      	ldr	r3, [pc, #56]	; (407fdc <USART0_Handler+0x68>)
  407fa2:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  407fa4:	687b      	ldr	r3, [r7, #4]
  407fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
  407faa:	2b00      	cmp	r3, #0
  407fac:	d00b      	beq.n	407fc6 <USART0_Handler+0x52>
	{
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  407fae:	4b09      	ldr	r3, [pc, #36]	; (407fd4 <USART0_Handler+0x60>)
  407fb0:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
  407fb4:	3306      	adds	r3, #6
  407fb6:	781b      	ldrb	r3, [r3, #0]
  407fb8:	b2db      	uxtb	r3, r3
  407fba:	2b00      	cmp	r3, #0
  407fbc:	d003      	beq.n	407fc6 <USART0_Handler+0x52>
		{
			uart_process_tx_byte(USART0, &(uartMemBuf[2])); 	
  407fbe:	4803      	ldr	r0, [pc, #12]	; (407fcc <USART0_Handler+0x58>)
  407fc0:	4905      	ldr	r1, [pc, #20]	; (407fd8 <USART0_Handler+0x64>)
  407fc2:	4b07      	ldr	r3, [pc, #28]	; (407fe0 <USART0_Handler+0x6c>)
  407fc4:	4798      	blx	r3
		}
	}	
}
  407fc6:	3708      	adds	r7, #8
  407fc8:	46bd      	mov	sp, r7
  407fca:	bd80      	pop	{r7, pc}
  407fcc:	40024000 	.word	0x40024000
  407fd0:	0040a945 	.word	0x0040a945
  407fd4:	20008984 	.word	0x20008984
  407fd8:	200099c4 	.word	0x200099c4
  407fdc:	00408071 	.word	0x00408071
  407fe0:	00408135 	.word	0x00408135

00407fe4 <uart_get_byte>:
}


//static functions
static int uart_get_byte(drv_uart_memory_buf_t* memBuf, char* c)
{
  407fe4:	b480      	push	{r7}
  407fe6:	b085      	sub	sp, #20
  407fe8:	af00      	add	r7, sp, #0
  407fea:	6078      	str	r0, [r7, #4]
  407fec:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  407fee:	2300      	movs	r3, #0
  407ff0:	73fb      	strb	r3, [r7, #15]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  407ff2:	687b      	ldr	r3, [r7, #4]
  407ff4:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  407ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  407ffc:	d103      	bne.n	408006 <uart_get_byte+0x22>
	{ // if the sw buffer is full
		memBuf->uart_rx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  407ffe:	687b      	ldr	r3, [r7, #4]
  408000:	2200      	movs	r2, #0
  408002:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
	}
	if(memBuf->rx_fifo.num_bytes > 0)
  408006:	687b      	ldr	r3, [r7, #4]
  408008:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  40800c:	2b00      	cmp	r3, #0
  40800e:	d017      	beq.n	408040 <uart_get_byte+0x5c>
	{
		// if data exists in the sw buffer
		*c = memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_first]; // grab the oldest element in the buffer
  408010:	687b      	ldr	r3, [r7, #4]
  408012:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
  408016:	687a      	ldr	r2, [r7, #4]
  408018:	5cd2      	ldrb	r2, [r2, r3]
  40801a:	683b      	ldr	r3, [r7, #0]
  40801c:	701a      	strb	r2, [r3, #0]
		memBuf->rx_fifo.i_first++;                        // increment the index of the oldest element
  40801e:	687b      	ldr	r3, [r7, #4]
  408020:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
  408024:	3301      	adds	r3, #1
  408026:	b29a      	uxth	r2, r3
  408028:	687b      	ldr	r3, [r7, #4]
  40802a:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
		memBuf->rx_fifo.num_bytes--;                      // decrement the bytes counter
  40802e:	687b      	ldr	r3, [r7, #4]
  408030:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  408034:	3b01      	subs	r3, #1
  408036:	b29a      	uxth	r2, r3
  408038:	687b      	ldr	r3, [r7, #4]
  40803a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  40803e:	e005      	b.n	40804c <uart_get_byte+0x68>
	}
	else
	{                                      // RX sw buffer is empty
		memBuf->uart_rx_fifo_not_empty_flag = 0;          // clear the rx flag
  408040:	687b      	ldr	r3, [r7, #4]
  408042:	2200      	movs	r2, #0
  408044:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
		status = STATUS_EOF;
  408048:	2302      	movs	r3, #2
  40804a:	73fb      	strb	r3, [r7, #15]
	}
	if(memBuf->rx_fifo.i_first == FIFO_BUFFER_SIZE)
  40804c:	687b      	ldr	r3, [r7, #4]
  40804e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
  408052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  408056:	d103      	bne.n	408060 <uart_get_byte+0x7c>
	{   // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_first = 0;                      // roll over the index counter
  408058:	687b      	ldr	r3, [r7, #4]
  40805a:	2200      	movs	r2, #0
  40805c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	}		
	return status;
  408060:	7bfb      	ldrb	r3, [r7, #15]
}
  408062:	4618      	mov	r0, r3
  408064:	3714      	adds	r7, #20
  408066:	46bd      	mov	sp, r7
  408068:	f85d 7b04 	ldr.w	r7, [sp], #4
  40806c:	4770      	bx	lr
  40806e:	bf00      	nop

00408070 <uart_process_byte>:

static void uart_process_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  408070:	b580      	push	{r7, lr}
  408072:	b084      	sub	sp, #16
  408074:	af00      	add	r7, sp, #0
  408076:	6078      	str	r0, [r7, #4]
  408078:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40807a:	2300      	movs	r3, #0
  40807c:	60fb      	str	r3, [r7, #12]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  40807e:	683b      	ldr	r3, [r7, #0]
  408080:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  408084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  408088:	d111      	bne.n	4080ae <uart_process_byte+0x3e>
	{
		memBuf->uart_rx_fifo_ovf_flag = 1;                     // set the overflow flag
  40808a:	683b      	ldr	r3, [r7, #0]
  40808c:	2201      	movs	r2, #1
  40808e:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
		//the buffer is full, but we have to clear the interrupt
		memBuf->uart_rx_fifo_dropped_bytes++; //our data stream will be out of sync now...
  408092:	683b      	ldr	r3, [r7, #0]
  408094:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
  408098:	1c5a      	adds	r2, r3, #1
  40809a:	683b      	ldr	r3, [r7, #0]
  40809c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		usart_getchar(p_usart,&val);		
  4080a0:	f107 030c 	add.w	r3, r7, #12
  4080a4:	6878      	ldr	r0, [r7, #4]
  4080a6:	4619      	mov	r1, r3
  4080a8:	4b21      	ldr	r3, [pc, #132]	; (408130 <uart_process_byte+0xc0>)
  4080aa:	4798      	blx	r3
  4080ac:	e025      	b.n	4080fa <uart_process_byte+0x8a>
	}
	else if(memBuf->rx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  4080ae:	683b      	ldr	r3, [r7, #0]
  4080b0:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  4080b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  4080b8:	d21f      	bcs.n	4080fa <uart_process_byte+0x8a>
	{		
		//while((UART0->UART_SR & UART_SR_RXRDY) == 0);
		if(usart_getchar(p_usart,&val) == STATUS_PASS)
  4080ba:	f107 030c 	add.w	r3, r7, #12
  4080be:	6878      	ldr	r0, [r7, #4]
  4080c0:	4619      	mov	r1, r3
  4080c2:	4b1b      	ldr	r3, [pc, #108]	; (408130 <uart_process_byte+0xc0>)
  4080c4:	4798      	blx	r3
  4080c6:	4603      	mov	r3, r0
  4080c8:	2b00      	cmp	r3, #0
  4080ca:	d116      	bne.n	4080fa <uart_process_byte+0x8a>
		{		
			memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_last] = (uint8_t)val;
  4080cc:	683b      	ldr	r3, [r7, #0]
  4080ce:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
  4080d2:	68fa      	ldr	r2, [r7, #12]
  4080d4:	b2d1      	uxtb	r1, r2
  4080d6:	683a      	ldr	r2, [r7, #0]
  4080d8:	54d1      	strb	r1, [r2, r3]
			memBuf->rx_fifo.i_last++;                              // increment the index of the most recently added element
  4080da:	683b      	ldr	r3, [r7, #0]
  4080dc:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
  4080e0:	3301      	adds	r3, #1
  4080e2:	b29a      	uxth	r2, r3
  4080e4:	683b      	ldr	r3, [r7, #0]
  4080e6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
			memBuf->rx_fifo.num_bytes++;                           // increment the bytes counter
  4080ea:	683b      	ldr	r3, [r7, #0]
  4080ec:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  4080f0:	3301      	adds	r3, #1
  4080f2:	b29a      	uxth	r2, r3
  4080f4:	683b      	ldr	r3, [r7, #0]
  4080f6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		//if(p_usart == UART1)
		//{
			//usart_putchar(UART0, val);
		//}
	}
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  4080fa:	683b      	ldr	r3, [r7, #0]
  4080fc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
  408100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  408104:	d103      	bne.n	40810e <uart_process_byte+0x9e>
	{      // if sw buffer just filled up
		memBuf->uart_rx_fifo_full_flag = 1;                    // set the RX FIFO full flag
  408106:	683b      	ldr	r3, [r7, #0]
  408108:	2201      	movs	r2, #1
  40810a:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
	}
	if(memBuf->rx_fifo.i_last == FIFO_BUFFER_SIZE)
  40810e:	683b      	ldr	r3, [r7, #0]
  408110:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
  408114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  408118:	d103      	bne.n	408122 <uart_process_byte+0xb2>
	{         // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_last = 0;                            // roll over the index counter
  40811a:	683b      	ldr	r3, [r7, #0]
  40811c:	2200      	movs	r2, #0
  40811e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	}
	memBuf->uart_rx_fifo_not_empty_flag = 1;                 // set received-data flag	
  408122:	683b      	ldr	r3, [r7, #0]
  408124:	2201      	movs	r2, #1
  408126:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
}
  40812a:	3710      	adds	r7, #16
  40812c:	46bd      	mov	sp, r7
  40812e:	bd80      	pop	{r7, pc}
  408130:	00406ac1 	.word	0x00406ac1

00408134 <uart_process_tx_byte>:

static void uart_process_tx_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  408134:	b580      	push	{r7, lr}
  408136:	b082      	sub	sp, #8
  408138:	af00      	add	r7, sp, #0
  40813a:	6078      	str	r0, [r7, #4]
  40813c:	6039      	str	r1, [r7, #0]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  40813e:	683b      	ldr	r3, [r7, #0]
  408140:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  408144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  408148:	d103      	bne.n	408152 <uart_process_tx_byte+0x1e>
	{ // if the sw buffer is full
		memBuf->uart_tx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  40814a:	683b      	ldr	r3, [r7, #0]
  40814c:	2200      	movs	r2, #0
  40814e:	f883 2817 	strb.w	r2, [r3, #2071]	; 0x817
	}
	if(memBuf->tx_fifo.num_bytes > 0)
  408152:	683b      	ldr	r3, [r7, #0]
  408154:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  408158:	2b00      	cmp	r3, #0
  40815a:	d01b      	beq.n	408194 <uart_process_tx_byte+0x60>
	{
		// if data exists in the sw buffer
		usart_serial_putchar(p_usart,memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_first]); // send the next value from buffer
  40815c:	683b      	ldr	r3, [r7, #0]
  40815e:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
  408162:	683a      	ldr	r2, [r7, #0]
  408164:	4413      	add	r3, r2
  408166:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
  40816a:	6878      	ldr	r0, [r7, #4]
  40816c:	4619      	mov	r1, r3
  40816e:	4b14      	ldr	r3, [pc, #80]	; (4081c0 <uart_process_tx_byte+0x8c>)
  408170:	4798      	blx	r3
		memBuf->tx_fifo.i_first++;                        // increment the index of the oldest element
  408172:	683b      	ldr	r3, [r7, #0]
  408174:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
  408178:	3301      	adds	r3, #1
  40817a:	b29a      	uxth	r2, r3
  40817c:	683b      	ldr	r3, [r7, #0]
  40817e:	f8a3 2810 	strh.w	r2, [r3, #2064]	; 0x810
		memBuf->tx_fifo.num_bytes--;                      // decrement the bytes counter
  408182:	683b      	ldr	r3, [r7, #0]
  408184:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
  408188:	3b01      	subs	r3, #1
  40818a:	b29a      	uxth	r2, r3
  40818c:	683b      	ldr	r3, [r7, #0]
  40818e:	f8a3 2814 	strh.w	r2, [r3, #2068]	; 0x814
  408192:	e008      	b.n	4081a6 <uart_process_tx_byte+0x72>
	}
	else
	{   // tx sw buffer is empty
		memBuf->uart_tx_fifo_not_empty_flag = 0;          // clear the tx flag
  408194:	683b      	ldr	r3, [r7, #0]
  408196:	2200      	movs	r2, #0
  408198:	f883 2816 	strb.w	r2, [r3, #2070]	; 0x816
		uart_disable_interrupt(p_usart,UART_IER_TXEMPTY); //the buffer is empty, stop the interrupt. 
  40819c:	6878      	ldr	r0, [r7, #4]
  40819e:	f44f 7100 	mov.w	r1, #512	; 0x200
  4081a2:	4b08      	ldr	r3, [pc, #32]	; (4081c4 <uart_process_tx_byte+0x90>)
  4081a4:	4798      	blx	r3
	}
	if(memBuf->tx_fifo.i_first == FIFO_BUFFER_SIZE)
  4081a6:	683b      	ldr	r3, [r7, #0]
  4081a8:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
  4081ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  4081b0:	d103      	bne.n	4081ba <uart_process_tx_byte+0x86>
	{   // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_first = 0;                      // roll over the index counter
  4081b2:	683b      	ldr	r3, [r7, #0]
  4081b4:	2200      	movs	r2, #0
  4081b6:	f8a3 2810 	strh.w	r2, [r3, #2064]	; 0x810
	}	
  4081ba:	3708      	adds	r7, #8
  4081bc:	46bd      	mov	sp, r7
  4081be:	bd80      	pop	{r7, pc}
  4081c0:	004077b1 	.word	0x004077b1
  4081c4:	0040a929 	.word	0x0040a929

004081c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  4081c8:	b480      	push	{r7}
  4081ca:	b083      	sub	sp, #12
  4081cc:	af00      	add	r7, sp, #0
  4081ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  4081d0:	687b      	ldr	r3, [r7, #4]
  4081d2:	f103 0208 	add.w	r2, r3, #8
  4081d6:	687b      	ldr	r3, [r7, #4]
  4081d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4081da:	687b      	ldr	r3, [r7, #4]
  4081dc:	f04f 32ff 	mov.w	r2, #4294967295
  4081e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  4081e2:	687b      	ldr	r3, [r7, #4]
  4081e4:	f103 0208 	add.w	r2, r3, #8
  4081e8:	687b      	ldr	r3, [r7, #4]
  4081ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  4081ec:	687b      	ldr	r3, [r7, #4]
  4081ee:	f103 0208 	add.w	r2, r3, #8
  4081f2:	687b      	ldr	r3, [r7, #4]
  4081f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  4081f6:	687b      	ldr	r3, [r7, #4]
  4081f8:	2200      	movs	r2, #0
  4081fa:	601a      	str	r2, [r3, #0]
}
  4081fc:	370c      	adds	r7, #12
  4081fe:	46bd      	mov	sp, r7
  408200:	f85d 7b04 	ldr.w	r7, [sp], #4
  408204:	4770      	bx	lr
  408206:	bf00      	nop

00408208 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  408208:	b480      	push	{r7}
  40820a:	b083      	sub	sp, #12
  40820c:	af00      	add	r7, sp, #0
  40820e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  408210:	687b      	ldr	r3, [r7, #4]
  408212:	2200      	movs	r2, #0
  408214:	611a      	str	r2, [r3, #16]
}
  408216:	370c      	adds	r7, #12
  408218:	46bd      	mov	sp, r7
  40821a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40821e:	4770      	bx	lr

00408220 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  408220:	b480      	push	{r7}
  408222:	b085      	sub	sp, #20
  408224:	af00      	add	r7, sp, #0
  408226:	6078      	str	r0, [r7, #4]
  408228:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  40822a:	687b      	ldr	r3, [r7, #4]
  40822c:	685b      	ldr	r3, [r3, #4]
  40822e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  408230:	68fb      	ldr	r3, [r7, #12]
  408232:	685a      	ldr	r2, [r3, #4]
  408234:	683b      	ldr	r3, [r7, #0]
  408236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  408238:	687b      	ldr	r3, [r7, #4]
  40823a:	685a      	ldr	r2, [r3, #4]
  40823c:	683b      	ldr	r3, [r7, #0]
  40823e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  408240:	68fb      	ldr	r3, [r7, #12]
  408242:	685b      	ldr	r3, [r3, #4]
  408244:	683a      	ldr	r2, [r7, #0]
  408246:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  408248:	68fb      	ldr	r3, [r7, #12]
  40824a:	683a      	ldr	r2, [r7, #0]
  40824c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  40824e:	687b      	ldr	r3, [r7, #4]
  408250:	683a      	ldr	r2, [r7, #0]
  408252:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  408254:	683b      	ldr	r3, [r7, #0]
  408256:	687a      	ldr	r2, [r7, #4]
  408258:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  40825a:	687b      	ldr	r3, [r7, #4]
  40825c:	681b      	ldr	r3, [r3, #0]
  40825e:	1c5a      	adds	r2, r3, #1
  408260:	687b      	ldr	r3, [r7, #4]
  408262:	601a      	str	r2, [r3, #0]
}
  408264:	3714      	adds	r7, #20
  408266:	46bd      	mov	sp, r7
  408268:	f85d 7b04 	ldr.w	r7, [sp], #4
  40826c:	4770      	bx	lr
  40826e:	bf00      	nop

00408270 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  408270:	b480      	push	{r7}
  408272:	b085      	sub	sp, #20
  408274:	af00      	add	r7, sp, #0
  408276:	6078      	str	r0, [r7, #4]
  408278:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  40827a:	683b      	ldr	r3, [r7, #0]
  40827c:	681b      	ldr	r3, [r3, #0]
  40827e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  408280:	68bb      	ldr	r3, [r7, #8]
  408282:	f1b3 3fff 	cmp.w	r3, #4294967295
  408286:	d103      	bne.n	408290 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  408288:	687b      	ldr	r3, [r7, #4]
  40828a:	691b      	ldr	r3, [r3, #16]
  40828c:	60fb      	str	r3, [r7, #12]
  40828e:	e00c      	b.n	4082aa <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  408290:	687b      	ldr	r3, [r7, #4]
  408292:	3308      	adds	r3, #8
  408294:	60fb      	str	r3, [r7, #12]
  408296:	e002      	b.n	40829e <vListInsert+0x2e>
  408298:	68fb      	ldr	r3, [r7, #12]
  40829a:	685b      	ldr	r3, [r3, #4]
  40829c:	60fb      	str	r3, [r7, #12]
  40829e:	68fb      	ldr	r3, [r7, #12]
  4082a0:	685b      	ldr	r3, [r3, #4]
  4082a2:	681a      	ldr	r2, [r3, #0]
  4082a4:	68bb      	ldr	r3, [r7, #8]
  4082a6:	429a      	cmp	r2, r3
  4082a8:	d9f6      	bls.n	408298 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4082aa:	68fb      	ldr	r3, [r7, #12]
  4082ac:	685a      	ldr	r2, [r3, #4]
  4082ae:	683b      	ldr	r3, [r7, #0]
  4082b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4082b2:	683b      	ldr	r3, [r7, #0]
  4082b4:	685b      	ldr	r3, [r3, #4]
  4082b6:	683a      	ldr	r2, [r7, #0]
  4082b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4082ba:	683b      	ldr	r3, [r7, #0]
  4082bc:	68fa      	ldr	r2, [r7, #12]
  4082be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  4082c0:	68fb      	ldr	r3, [r7, #12]
  4082c2:	683a      	ldr	r2, [r7, #0]
  4082c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4082c6:	683b      	ldr	r3, [r7, #0]
  4082c8:	687a      	ldr	r2, [r7, #4]
  4082ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4082cc:	687b      	ldr	r3, [r7, #4]
  4082ce:	681b      	ldr	r3, [r3, #0]
  4082d0:	1c5a      	adds	r2, r3, #1
  4082d2:	687b      	ldr	r3, [r7, #4]
  4082d4:	601a      	str	r2, [r3, #0]
}
  4082d6:	3714      	adds	r7, #20
  4082d8:	46bd      	mov	sp, r7
  4082da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4082de:	4770      	bx	lr

004082e0 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  4082e0:	b480      	push	{r7}
  4082e2:	b085      	sub	sp, #20
  4082e4:	af00      	add	r7, sp, #0
  4082e6:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4082e8:	687b      	ldr	r3, [r7, #4]
  4082ea:	685b      	ldr	r3, [r3, #4]
  4082ec:	687a      	ldr	r2, [r7, #4]
  4082ee:	6892      	ldr	r2, [r2, #8]
  4082f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4082f2:	687b      	ldr	r3, [r7, #4]
  4082f4:	689b      	ldr	r3, [r3, #8]
  4082f6:	687a      	ldr	r2, [r7, #4]
  4082f8:	6852      	ldr	r2, [r2, #4]
  4082fa:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  4082fc:	687b      	ldr	r3, [r7, #4]
  4082fe:	691b      	ldr	r3, [r3, #16]
  408300:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  408302:	68fb      	ldr	r3, [r7, #12]
  408304:	685a      	ldr	r2, [r3, #4]
  408306:	687b      	ldr	r3, [r7, #4]
  408308:	429a      	cmp	r2, r3
  40830a:	d103      	bne.n	408314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40830c:	687b      	ldr	r3, [r7, #4]
  40830e:	689a      	ldr	r2, [r3, #8]
  408310:	68fb      	ldr	r3, [r7, #12]
  408312:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  408314:	687b      	ldr	r3, [r7, #4]
  408316:	2200      	movs	r2, #0
  408318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  40831a:	68fb      	ldr	r3, [r7, #12]
  40831c:	681b      	ldr	r3, [r3, #0]
  40831e:	1e5a      	subs	r2, r3, #1
  408320:	68fb      	ldr	r3, [r7, #12]
  408322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  408324:	68fb      	ldr	r3, [r7, #12]
  408326:	681b      	ldr	r3, [r3, #0]
}
  408328:	4618      	mov	r0, r3
  40832a:	3714      	adds	r7, #20
  40832c:	46bd      	mov	sp, r7
  40832e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408332:	4770      	bx	lr

00408334 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  408334:	b480      	push	{r7}
  408336:	b083      	sub	sp, #12
  408338:	af00      	add	r7, sp, #0
  40833a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40833c:	687b      	ldr	r3, [r7, #4]
  40833e:	2b07      	cmp	r3, #7
  408340:	d825      	bhi.n	40838e <osc_get_rate+0x5a>
  408342:	a201      	add	r2, pc, #4	; (adr r2, 408348 <osc_get_rate+0x14>)
  408344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408348:	00408369 	.word	0x00408369
  40834c:	0040836f 	.word	0x0040836f
  408350:	00408375 	.word	0x00408375
  408354:	0040837b 	.word	0x0040837b
  408358:	0040837f 	.word	0x0040837f
  40835c:	00408383 	.word	0x00408383
  408360:	00408387 	.word	0x00408387
  408364:	0040838b 	.word	0x0040838b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  408368:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40836c:	e010      	b.n	408390 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40836e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  408372:	e00d      	b.n	408390 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  408374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  408378:	e00a      	b.n	408390 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40837a:	4b08      	ldr	r3, [pc, #32]	; (40839c <osc_get_rate+0x68>)
  40837c:	e008      	b.n	408390 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40837e:	4b08      	ldr	r3, [pc, #32]	; (4083a0 <osc_get_rate+0x6c>)
  408380:	e006      	b.n	408390 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  408382:	4b08      	ldr	r3, [pc, #32]	; (4083a4 <osc_get_rate+0x70>)
  408384:	e004      	b.n	408390 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  408386:	4b08      	ldr	r3, [pc, #32]	; (4083a8 <osc_get_rate+0x74>)
  408388:	e002      	b.n	408390 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40838a:	4b07      	ldr	r3, [pc, #28]	; (4083a8 <osc_get_rate+0x74>)
  40838c:	e000      	b.n	408390 <osc_get_rate+0x5c>
	}

	return 0;
  40838e:	2300      	movs	r3, #0
}
  408390:	4618      	mov	r0, r3
  408392:	370c      	adds	r7, #12
  408394:	46bd      	mov	sp, r7
  408396:	f85d 7b04 	ldr.w	r7, [sp], #4
  40839a:	4770      	bx	lr
  40839c:	003d0900 	.word	0x003d0900
  4083a0:	007a1200 	.word	0x007a1200
  4083a4:	00b71b00 	.word	0x00b71b00
  4083a8:	00f42400 	.word	0x00f42400

004083ac <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4083ac:	b580      	push	{r7, lr}
  4083ae:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4083b0:	2006      	movs	r0, #6
  4083b2:	4b04      	ldr	r3, [pc, #16]	; (4083c4 <sysclk_get_main_hz+0x18>)
  4083b4:	4798      	blx	r3
  4083b6:	4602      	mov	r2, r0
  4083b8:	4613      	mov	r3, r2
  4083ba:	011b      	lsls	r3, r3, #4
  4083bc:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4083be:	4618      	mov	r0, r3
  4083c0:	bd80      	pop	{r7, pc}
  4083c2:	bf00      	nop
  4083c4:	00408335 	.word	0x00408335

004083c8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4083c8:	b580      	push	{r7, lr}
  4083ca:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4083cc:	4b02      	ldr	r3, [pc, #8]	; (4083d8 <sysclk_get_cpu_hz+0x10>)
  4083ce:	4798      	blx	r3
  4083d0:	4603      	mov	r3, r0
  4083d2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4083d4:	4618      	mov	r0, r3
  4083d6:	bd80      	pop	{r7, pc}
  4083d8:	004083ad 	.word	0x004083ad

004083dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
  4083dc:	b480      	push	{r7}
  4083de:	b085      	sub	sp, #20
  4083e0:	af00      	add	r7, sp, #0
  4083e2:	60f8      	str	r0, [r7, #12]
  4083e4:	60b9      	str	r1, [r7, #8]
  4083e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
  4083e8:	68fb      	ldr	r3, [r7, #12]
  4083ea:	3b04      	subs	r3, #4
  4083ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4083ee:	68fb      	ldr	r3, [r7, #12]
  4083f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4083f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  4083f6:	68fb      	ldr	r3, [r7, #12]
  4083f8:	3b04      	subs	r3, #4
  4083fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  4083fc:	68ba      	ldr	r2, [r7, #8]
  4083fe:	68fb      	ldr	r3, [r7, #12]
  408400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  408402:	68fb      	ldr	r3, [r7, #12]
  408404:	3b04      	subs	r3, #4
  408406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
  408408:	68fb      	ldr	r3, [r7, #12]
  40840a:	2200      	movs	r2, #0
  40840c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  40840e:	68fb      	ldr	r3, [r7, #12]
  408410:	3b14      	subs	r3, #20
  408412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  408414:	687a      	ldr	r2, [r7, #4]
  408416:	68fb      	ldr	r3, [r7, #12]
  408418:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  40841a:	68fb      	ldr	r3, [r7, #12]
  40841c:	3b20      	subs	r3, #32
  40841e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  408420:	68fb      	ldr	r3, [r7, #12]
}
  408422:	4618      	mov	r0, r3
  408424:	3714      	adds	r7, #20
  408426:	46bd      	mov	sp, r7
  408428:	f85d 7b04 	ldr.w	r7, [sp], #4
  40842c:	4770      	bx	lr
  40842e:	bf00      	nop

00408430 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  408430:	4b06      	ldr	r3, [pc, #24]	; (40844c <pxCurrentTCBConst2>)
  408432:	6819      	ldr	r1, [r3, #0]
  408434:	6808      	ldr	r0, [r1, #0]
  408436:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40843a:	f380 8809 	msr	PSP, r0
  40843e:	f04f 0000 	mov.w	r0, #0
  408442:	f380 8811 	msr	BASEPRI, r0
  408446:	f04e 0e0d 	orr.w	lr, lr, #13
  40844a:	4770      	bx	lr

0040844c <pxCurrentTCBConst2>:
  40844c:	20008694 	.word	0x20008694

00408450 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  408450:	4803      	ldr	r0, [pc, #12]	; (408460 <prvPortStartFirstTask+0x10>)
  408452:	6800      	ldr	r0, [r0, #0]
  408454:	6800      	ldr	r0, [r0, #0]
  408456:	f380 8808 	msr	MSP, r0
  40845a:	b662      	cpsie	i
  40845c:	df00      	svc	0
  40845e:	bf00      	nop
  408460:	e000ed08 	.word	0xe000ed08

00408464 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  408464:	b580      	push	{r7, lr}
  408466:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  408468:	4b0a      	ldr	r3, [pc, #40]	; (408494 <xPortStartScheduler+0x30>)
  40846a:	4a0a      	ldr	r2, [pc, #40]	; (408494 <xPortStartScheduler+0x30>)
  40846c:	6812      	ldr	r2, [r2, #0]
  40846e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  408472:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  408474:	4b07      	ldr	r3, [pc, #28]	; (408494 <xPortStartScheduler+0x30>)
  408476:	4a07      	ldr	r2, [pc, #28]	; (408494 <xPortStartScheduler+0x30>)
  408478:	6812      	ldr	r2, [r2, #0]
  40847a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  40847e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  408480:	4b05      	ldr	r3, [pc, #20]	; (408498 <xPortStartScheduler+0x34>)
  408482:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  408484:	4b05      	ldr	r3, [pc, #20]	; (40849c <xPortStartScheduler+0x38>)
  408486:	2200      	movs	r2, #0
  408488:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  40848a:	4b05      	ldr	r3, [pc, #20]	; (4084a0 <xPortStartScheduler+0x3c>)
  40848c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  40848e:	2300      	movs	r3, #0
}
  408490:	4618      	mov	r0, r3
  408492:	bd80      	pop	{r7, pc}
  408494:	e000ed20 	.word	0xe000ed20
  408498:	00408585 	.word	0x00408585
  40849c:	20000358 	.word	0x20000358
  4084a0:	00408451 	.word	0x00408451

004084a4 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  4084a4:	b480      	push	{r7}
  4084a6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4084a8:	4b03      	ldr	r3, [pc, #12]	; (4084b8 <vPortYieldFromISR+0x14>)
  4084aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4084ae:	601a      	str	r2, [r3, #0]
}
  4084b0:	46bd      	mov	sp, r7
  4084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4084b6:	4770      	bx	lr
  4084b8:	e000ed04 	.word	0xe000ed04

004084bc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  4084bc:	b580      	push	{r7, lr}
  4084be:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  4084c0:	4b03      	ldr	r3, [pc, #12]	; (4084d0 <vPortEnterCritical+0x14>)
  4084c2:	4798      	blx	r3
	uxCriticalNesting++;
  4084c4:	4b03      	ldr	r3, [pc, #12]	; (4084d4 <vPortEnterCritical+0x18>)
  4084c6:	681b      	ldr	r3, [r3, #0]
  4084c8:	1c5a      	adds	r2, r3, #1
  4084ca:	4b02      	ldr	r3, [pc, #8]	; (4084d4 <vPortEnterCritical+0x18>)
  4084cc:	601a      	str	r2, [r3, #0]
}
  4084ce:	bd80      	pop	{r7, pc}
  4084d0:	00408501 	.word	0x00408501
  4084d4:	20000358 	.word	0x20000358

004084d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  4084d8:	b580      	push	{r7, lr}
  4084da:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  4084dc:	4b06      	ldr	r3, [pc, #24]	; (4084f8 <vPortExitCritical+0x20>)
  4084de:	681b      	ldr	r3, [r3, #0]
  4084e0:	1e5a      	subs	r2, r3, #1
  4084e2:	4b05      	ldr	r3, [pc, #20]	; (4084f8 <vPortExitCritical+0x20>)
  4084e4:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
  4084e6:	4b04      	ldr	r3, [pc, #16]	; (4084f8 <vPortExitCritical+0x20>)
  4084e8:	681b      	ldr	r3, [r3, #0]
  4084ea:	2b00      	cmp	r3, #0
  4084ec:	d102      	bne.n	4084f4 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
  4084ee:	2000      	movs	r0, #0
  4084f0:	4b02      	ldr	r3, [pc, #8]	; (4084fc <vPortExitCritical+0x24>)
  4084f2:	4798      	blx	r3
	}
}
  4084f4:	bd80      	pop	{r7, pc}
  4084f6:	bf00      	nop
  4084f8:	20000358 	.word	0x20000358
  4084fc:	00408515 	.word	0x00408515

00408500 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  408500:	f3ef 8011 	mrs	r0, BASEPRI
  408504:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  408508:	f381 8811 	msr	BASEPRI, r1
  40850c:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
  40850e:	2300      	movs	r3, #0
}
  408510:	4618      	mov	r0, r3
  408512:	bf00      	nop

00408514 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  408514:	f380 8811 	msr	BASEPRI, r0
  408518:	4770      	bx	lr
  40851a:	bf00      	nop

0040851c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  40851c:	f3ef 8009 	mrs	r0, PSP
  408520:	4b0c      	ldr	r3, [pc, #48]	; (408554 <pxCurrentTCBConst>)
  408522:	681a      	ldr	r2, [r3, #0]
  408524:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  408528:	6010      	str	r0, [r2, #0]
  40852a:	e92d 4008 	stmdb	sp!, {r3, lr}
  40852e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  408532:	f380 8811 	msr	BASEPRI, r0
  408536:	f001 f861 	bl	4095fc <vTaskSwitchContext>
  40853a:	f04f 0000 	mov.w	r0, #0
  40853e:	f380 8811 	msr	BASEPRI, r0
  408542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  408546:	6819      	ldr	r1, [r3, #0]
  408548:	6808      	ldr	r0, [r1, #0]
  40854a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40854e:	f380 8809 	msr	PSP, r0
  408552:	4770      	bx	lr

00408554 <pxCurrentTCBConst>:
  408554:	20008694 	.word	0x20008694

00408558 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  408558:	b580      	push	{r7, lr}
  40855a:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40855c:	4b05      	ldr	r3, [pc, #20]	; (408574 <SysTick_Handler+0x1c>)
  40855e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  408562:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  408564:	4b04      	ldr	r3, [pc, #16]	; (408578 <SysTick_Handler+0x20>)
  408566:	4798      	blx	r3
	{
		vTaskIncrementTick();
  408568:	4b04      	ldr	r3, [pc, #16]	; (40857c <SysTick_Handler+0x24>)
  40856a:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  40856c:	2000      	movs	r0, #0
  40856e:	4b04      	ldr	r3, [pc, #16]	; (408580 <SysTick_Handler+0x28>)
  408570:	4798      	blx	r3
}
  408572:	bd80      	pop	{r7, pc}
  408574:	e000ed04 	.word	0xe000ed04
  408578:	00408501 	.word	0x00408501
  40857c:	004094b5 	.word	0x004094b5
  408580:	00408515 	.word	0x00408515

00408584 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
  408584:	b598      	push	{r3, r4, r7, lr}
  408586:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  408588:	4c06      	ldr	r4, [pc, #24]	; (4085a4 <vPortSetupTimerInterrupt+0x20>)
  40858a:	4b07      	ldr	r3, [pc, #28]	; (4085a8 <vPortSetupTimerInterrupt+0x24>)
  40858c:	4798      	blx	r3
  40858e:	4602      	mov	r2, r0
  408590:	4b06      	ldr	r3, [pc, #24]	; (4085ac <vPortSetupTimerInterrupt+0x28>)
  408592:	fba3 1302 	umull	r1, r3, r3, r2
  408596:	099b      	lsrs	r3, r3, #6
  408598:	3b01      	subs	r3, #1
  40859a:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  40859c:	4b04      	ldr	r3, [pc, #16]	; (4085b0 <vPortSetupTimerInterrupt+0x2c>)
  40859e:	2207      	movs	r2, #7
  4085a0:	601a      	str	r2, [r3, #0]
}
  4085a2:	bd98      	pop	{r3, r4, r7, pc}
  4085a4:	e000e014 	.word	0xe000e014
  4085a8:	004083c9 	.word	0x004083c9
  4085ac:	10624dd3 	.word	0x10624dd3
  4085b0:	e000e010 	.word	0xe000e010

004085b4 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4085b4:	b580      	push	{r7, lr}
  4085b6:	b086      	sub	sp, #24
  4085b8:	af00      	add	r7, sp, #0
  4085ba:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  4085bc:	2300      	movs	r3, #0
  4085be:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  4085c0:	4b36      	ldr	r3, [pc, #216]	; (40869c <pvPortMalloc+0xe8>)
  4085c2:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  4085c4:	4b36      	ldr	r3, [pc, #216]	; (4086a0 <pvPortMalloc+0xec>)
  4085c6:	681b      	ldr	r3, [r3, #0]
  4085c8:	2b00      	cmp	r3, #0
  4085ca:	d101      	bne.n	4085d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  4085cc:	4b35      	ldr	r3, [pc, #212]	; (4086a4 <pvPortMalloc+0xf0>)
  4085ce:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  4085d0:	687b      	ldr	r3, [r7, #4]
  4085d2:	2b00      	cmp	r3, #0
  4085d4:	d00d      	beq.n	4085f2 <pvPortMalloc+0x3e>
		{
			xWantedSize += heapSTRUCT_SIZE;
  4085d6:	2310      	movs	r3, #16
  4085d8:	687a      	ldr	r2, [r7, #4]
  4085da:	4413      	add	r3, r2
  4085dc:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4085de:	687b      	ldr	r3, [r7, #4]
  4085e0:	f003 0307 	and.w	r3, r3, #7
  4085e4:	2b00      	cmp	r3, #0
  4085e6:	d004      	beq.n	4085f2 <pvPortMalloc+0x3e>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4085e8:	687b      	ldr	r3, [r7, #4]
  4085ea:	f023 0307 	bic.w	r3, r3, #7
  4085ee:	3308      	adds	r3, #8
  4085f0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4085f2:	687b      	ldr	r3, [r7, #4]
  4085f4:	2b00      	cmp	r3, #0
  4085f6:	d045      	beq.n	408684 <pvPortMalloc+0xd0>
  4085f8:	f247 63f0 	movw	r3, #30448	; 0x76f0
  4085fc:	687a      	ldr	r2, [r7, #4]
  4085fe:	429a      	cmp	r2, r3
  408600:	d240      	bcs.n	408684 <pvPortMalloc+0xd0>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  408602:	4b29      	ldr	r3, [pc, #164]	; (4086a8 <pvPortMalloc+0xf4>)
  408604:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  408606:	4b28      	ldr	r3, [pc, #160]	; (4086a8 <pvPortMalloc+0xf4>)
  408608:	681b      	ldr	r3, [r3, #0]
  40860a:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40860c:	e004      	b.n	408618 <pvPortMalloc+0x64>
			{
				pxPreviousBlock = pxBlock;
  40860e:	697b      	ldr	r3, [r7, #20]
  408610:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  408612:	697b      	ldr	r3, [r7, #20]
  408614:	681b      	ldr	r3, [r3, #0]
  408616:	617b      	str	r3, [r7, #20]
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  408618:	697b      	ldr	r3, [r7, #20]
  40861a:	685a      	ldr	r2, [r3, #4]
  40861c:	687b      	ldr	r3, [r7, #4]
  40861e:	429a      	cmp	r2, r3
  408620:	d203      	bcs.n	40862a <pvPortMalloc+0x76>
  408622:	697b      	ldr	r3, [r7, #20]
  408624:	681b      	ldr	r3, [r3, #0]
  408626:	2b00      	cmp	r3, #0
  408628:	d1f1      	bne.n	40860e <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  40862a:	4b1d      	ldr	r3, [pc, #116]	; (4086a0 <pvPortMalloc+0xec>)
  40862c:	681b      	ldr	r3, [r3, #0]
  40862e:	697a      	ldr	r2, [r7, #20]
  408630:	429a      	cmp	r2, r3
  408632:	d027      	beq.n	408684 <pvPortMalloc+0xd0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  408634:	693b      	ldr	r3, [r7, #16]
  408636:	681a      	ldr	r2, [r3, #0]
  408638:	2310      	movs	r3, #16
  40863a:	4413      	add	r3, r2
  40863c:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  40863e:	697b      	ldr	r3, [r7, #20]
  408640:	681a      	ldr	r2, [r3, #0]
  408642:	693b      	ldr	r3, [r7, #16]
  408644:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  408646:	697b      	ldr	r3, [r7, #20]
  408648:	685a      	ldr	r2, [r3, #4]
  40864a:	687b      	ldr	r3, [r7, #4]
  40864c:	1ad2      	subs	r2, r2, r3
  40864e:	2310      	movs	r3, #16
  408650:	005b      	lsls	r3, r3, #1
  408652:	429a      	cmp	r2, r3
  408654:	d90f      	bls.n	408676 <pvPortMalloc+0xc2>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  408656:	697a      	ldr	r2, [r7, #20]
  408658:	687b      	ldr	r3, [r7, #4]
  40865a:	4413      	add	r3, r2
  40865c:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  40865e:	697b      	ldr	r3, [r7, #20]
  408660:	685a      	ldr	r2, [r3, #4]
  408662:	687b      	ldr	r3, [r7, #4]
  408664:	1ad2      	subs	r2, r2, r3
  408666:	68bb      	ldr	r3, [r7, #8]
  408668:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  40866a:	697b      	ldr	r3, [r7, #20]
  40866c:	687a      	ldr	r2, [r7, #4]
  40866e:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  408670:	68b8      	ldr	r0, [r7, #8]
  408672:	4b0e      	ldr	r3, [pc, #56]	; (4086ac <pvPortMalloc+0xf8>)
  408674:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  408676:	4b0e      	ldr	r3, [pc, #56]	; (4086b0 <pvPortMalloc+0xfc>)
  408678:	681a      	ldr	r2, [r3, #0]
  40867a:	697b      	ldr	r3, [r7, #20]
  40867c:	685b      	ldr	r3, [r3, #4]
  40867e:	1ad2      	subs	r2, r2, r3
  408680:	4b0b      	ldr	r3, [pc, #44]	; (4086b0 <pvPortMalloc+0xfc>)
  408682:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
  408684:	4b0b      	ldr	r3, [pc, #44]	; (4086b4 <pvPortMalloc+0x100>)
  408686:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  408688:	68fb      	ldr	r3, [r7, #12]
  40868a:	2b00      	cmp	r3, #0
  40868c:	d101      	bne.n	408692 <pvPortMalloc+0xde>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  40868e:	4b0a      	ldr	r3, [pc, #40]	; (4086b8 <pvPortMalloc+0x104>)
  408690:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  408692:	68fb      	ldr	r3, [r7, #12]
}
  408694:	4618      	mov	r0, r3
  408696:	3718      	adds	r7, #24
  408698:	46bd      	mov	sp, r7
  40869a:	bd80      	pop	{r7, pc}
  40869c:	0040931d 	.word	0x0040931d
  4086a0:	20008690 	.word	0x20008690
  4086a4:	00408711 	.word	0x00408711
  4086a8:	20008688 	.word	0x20008688
  4086ac:	004087a1 	.word	0x004087a1
  4086b0:	2000035c 	.word	0x2000035c
  4086b4:	00409339 	.word	0x00409339
  4086b8:	0040c38d 	.word	0x0040c38d

004086bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  4086bc:	b580      	push	{r7, lr}
  4086be:	b084      	sub	sp, #16
  4086c0:	af00      	add	r7, sp, #0
  4086c2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  4086c4:	687b      	ldr	r3, [r7, #4]
  4086c6:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  4086c8:	687b      	ldr	r3, [r7, #4]
  4086ca:	2b00      	cmp	r3, #0
  4086cc:	d014      	beq.n	4086f8 <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  4086ce:	2310      	movs	r3, #16
  4086d0:	425b      	negs	r3, r3
  4086d2:	68fa      	ldr	r2, [r7, #12]
  4086d4:	4413      	add	r3, r2
  4086d6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  4086d8:	68fb      	ldr	r3, [r7, #12]
  4086da:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  4086dc:	4b08      	ldr	r3, [pc, #32]	; (408700 <vPortFree+0x44>)
  4086de:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  4086e0:	68bb      	ldr	r3, [r7, #8]
  4086e2:	685a      	ldr	r2, [r3, #4]
  4086e4:	4b07      	ldr	r3, [pc, #28]	; (408704 <vPortFree+0x48>)
  4086e6:	681b      	ldr	r3, [r3, #0]
  4086e8:	441a      	add	r2, r3
  4086ea:	4b06      	ldr	r3, [pc, #24]	; (408704 <vPortFree+0x48>)
  4086ec:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  4086ee:	68b8      	ldr	r0, [r7, #8]
  4086f0:	4b05      	ldr	r3, [pc, #20]	; (408708 <vPortFree+0x4c>)
  4086f2:	4798      	blx	r3
		}
		xTaskResumeAll();
  4086f4:	4b05      	ldr	r3, [pc, #20]	; (40870c <vPortFree+0x50>)
  4086f6:	4798      	blx	r3
	}
}
  4086f8:	3710      	adds	r7, #16
  4086fa:	46bd      	mov	sp, r7
  4086fc:	bd80      	pop	{r7, pc}
  4086fe:	bf00      	nop
  408700:	0040931d 	.word	0x0040931d
  408704:	2000035c 	.word	0x2000035c
  408708:	004087a1 	.word	0x004087a1
  40870c:	00409339 	.word	0x00409339

00408710 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  408710:	b580      	push	{r7, lr}
  408712:	b082      	sub	sp, #8
  408714:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  408716:	4b1d      	ldr	r3, [pc, #116]	; (40878c <prvHeapInit+0x7c>)
  408718:	4a1d      	ldr	r2, [pc, #116]	; (408790 <prvHeapInit+0x80>)
  40871a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  40871c:	4b1b      	ldr	r3, [pc, #108]	; (40878c <prvHeapInit+0x7c>)
  40871e:	2200      	movs	r2, #0
  408720:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  408722:	f247 62f0 	movw	r2, #30448	; 0x76f0
  408726:	4b1a      	ldr	r3, [pc, #104]	; (408790 <prvHeapInit+0x80>)
  408728:	4413      	add	r3, r2
  40872a:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  40872c:	2310      	movs	r3, #16
  40872e:	425b      	negs	r3, r3
  408730:	687a      	ldr	r2, [r7, #4]
  408732:	4413      	add	r3, r2
  408734:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  408736:	4b17      	ldr	r3, [pc, #92]	; (408794 <prvHeapInit+0x84>)
  408738:	687a      	ldr	r2, [r7, #4]
  40873a:	601a      	str	r2, [r3, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  40873c:	4b15      	ldr	r3, [pc, #84]	; (408794 <prvHeapInit+0x84>)
  40873e:	681b      	ldr	r3, [r3, #0]
  408740:	f003 0307 	and.w	r3, r3, #7
  408744:	2b00      	cmp	r3, #0
  408746:	d003      	beq.n	408750 <prvHeapInit+0x40>
  408748:	4b13      	ldr	r3, [pc, #76]	; (408798 <prvHeapInit+0x88>)
  40874a:	4798      	blx	r3
  40874c:	bf00      	nop
  40874e:	e7fd      	b.n	40874c <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  408750:	4b10      	ldr	r3, [pc, #64]	; (408794 <prvHeapInit+0x84>)
  408752:	681b      	ldr	r3, [r3, #0]
  408754:	2200      	movs	r2, #0
  408756:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  408758:	4b0e      	ldr	r3, [pc, #56]	; (408794 <prvHeapInit+0x84>)
  40875a:	681b      	ldr	r3, [r3, #0]
  40875c:	2200      	movs	r2, #0
  40875e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  408760:	4b0b      	ldr	r3, [pc, #44]	; (408790 <prvHeapInit+0x80>)
  408762:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  408764:	f247 62f0 	movw	r2, #30448	; 0x76f0
  408768:	2310      	movs	r3, #16
  40876a:	1ad2      	subs	r2, r2, r3
  40876c:	683b      	ldr	r3, [r7, #0]
  40876e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  408770:	4b08      	ldr	r3, [pc, #32]	; (408794 <prvHeapInit+0x84>)
  408772:	681a      	ldr	r2, [r3, #0]
  408774:	683b      	ldr	r3, [r7, #0]
  408776:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  408778:	4b08      	ldr	r3, [pc, #32]	; (40879c <prvHeapInit+0x8c>)
  40877a:	681a      	ldr	r2, [r3, #0]
  40877c:	2310      	movs	r3, #16
  40877e:	1ad2      	subs	r2, r2, r3
  408780:	4b06      	ldr	r3, [pc, #24]	; (40879c <prvHeapInit+0x8c>)
  408782:	601a      	str	r2, [r3, #0]
}
  408784:	3708      	adds	r7, #8
  408786:	46bd      	mov	sp, r7
  408788:	bd80      	pop	{r7, pc}
  40878a:	bf00      	nop
  40878c:	20008688 	.word	0x20008688
  408790:	20000f90 	.word	0x20000f90
  408794:	20008690 	.word	0x20008690
  408798:	00408501 	.word	0x00408501
  40879c:	2000035c 	.word	0x2000035c

004087a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  4087a0:	b480      	push	{r7}
  4087a2:	b085      	sub	sp, #20
  4087a4:	af00      	add	r7, sp, #0
  4087a6:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  4087a8:	4b27      	ldr	r3, [pc, #156]	; (408848 <prvInsertBlockIntoFreeList+0xa8>)
  4087aa:	60fb      	str	r3, [r7, #12]
  4087ac:	e002      	b.n	4087b4 <prvInsertBlockIntoFreeList+0x14>
  4087ae:	68fb      	ldr	r3, [r7, #12]
  4087b0:	681b      	ldr	r3, [r3, #0]
  4087b2:	60fb      	str	r3, [r7, #12]
  4087b4:	68fb      	ldr	r3, [r7, #12]
  4087b6:	681a      	ldr	r2, [r3, #0]
  4087b8:	687b      	ldr	r3, [r7, #4]
  4087ba:	429a      	cmp	r2, r3
  4087bc:	d3f7      	bcc.n	4087ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  4087be:	68fb      	ldr	r3, [r7, #12]
  4087c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  4087c2:	68fb      	ldr	r3, [r7, #12]
  4087c4:	685b      	ldr	r3, [r3, #4]
  4087c6:	68ba      	ldr	r2, [r7, #8]
  4087c8:	441a      	add	r2, r3
  4087ca:	687b      	ldr	r3, [r7, #4]
  4087cc:	429a      	cmp	r2, r3
  4087ce:	d108      	bne.n	4087e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4087d0:	68fb      	ldr	r3, [r7, #12]
  4087d2:	685a      	ldr	r2, [r3, #4]
  4087d4:	687b      	ldr	r3, [r7, #4]
  4087d6:	685b      	ldr	r3, [r3, #4]
  4087d8:	441a      	add	r2, r3
  4087da:	68fb      	ldr	r3, [r7, #12]
  4087dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  4087de:	68fb      	ldr	r3, [r7, #12]
  4087e0:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  4087e2:	687b      	ldr	r3, [r7, #4]
  4087e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  4087e6:	687b      	ldr	r3, [r7, #4]
  4087e8:	685b      	ldr	r3, [r3, #4]
  4087ea:	68ba      	ldr	r2, [r7, #8]
  4087ec:	441a      	add	r2, r3
  4087ee:	68fb      	ldr	r3, [r7, #12]
  4087f0:	681b      	ldr	r3, [r3, #0]
  4087f2:	429a      	cmp	r2, r3
  4087f4:	d118      	bne.n	408828 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4087f6:	68fb      	ldr	r3, [r7, #12]
  4087f8:	681a      	ldr	r2, [r3, #0]
  4087fa:	4b14      	ldr	r3, [pc, #80]	; (40884c <prvInsertBlockIntoFreeList+0xac>)
  4087fc:	681b      	ldr	r3, [r3, #0]
  4087fe:	429a      	cmp	r2, r3
  408800:	d00d      	beq.n	40881e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  408802:	687b      	ldr	r3, [r7, #4]
  408804:	685a      	ldr	r2, [r3, #4]
  408806:	68fb      	ldr	r3, [r7, #12]
  408808:	681b      	ldr	r3, [r3, #0]
  40880a:	685b      	ldr	r3, [r3, #4]
  40880c:	441a      	add	r2, r3
  40880e:	687b      	ldr	r3, [r7, #4]
  408810:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  408812:	68fb      	ldr	r3, [r7, #12]
  408814:	681b      	ldr	r3, [r3, #0]
  408816:	681a      	ldr	r2, [r3, #0]
  408818:	687b      	ldr	r3, [r7, #4]
  40881a:	601a      	str	r2, [r3, #0]
  40881c:	e008      	b.n	408830 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  40881e:	4b0b      	ldr	r3, [pc, #44]	; (40884c <prvInsertBlockIntoFreeList+0xac>)
  408820:	681a      	ldr	r2, [r3, #0]
  408822:	687b      	ldr	r3, [r7, #4]
  408824:	601a      	str	r2, [r3, #0]
  408826:	e003      	b.n	408830 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  408828:	68fb      	ldr	r3, [r7, #12]
  40882a:	681a      	ldr	r2, [r3, #0]
  40882c:	687b      	ldr	r3, [r7, #4]
  40882e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  408830:	68fa      	ldr	r2, [r7, #12]
  408832:	687b      	ldr	r3, [r7, #4]
  408834:	429a      	cmp	r2, r3
  408836:	d002      	beq.n	40883e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  408838:	68fb      	ldr	r3, [r7, #12]
  40883a:	687a      	ldr	r2, [r7, #4]
  40883c:	601a      	str	r2, [r3, #0]
	}
}
  40883e:	3714      	adds	r7, #20
  408840:	46bd      	mov	sp, r7
  408842:	f85d 7b04 	ldr.w	r7, [sp], #4
  408846:	4770      	bx	lr
  408848:	20008688 	.word	0x20008688
  40884c:	20008690 	.word	0x20008690

00408850 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  408850:	b580      	push	{r7, lr}
  408852:	b082      	sub	sp, #8
  408854:	af00      	add	r7, sp, #0
  408856:	6078      	str	r0, [r7, #4]
  408858:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  40885a:	687b      	ldr	r3, [r7, #4]
  40885c:	2b00      	cmp	r3, #0
  40885e:	d103      	bne.n	408868 <xQueueGenericReset+0x18>
  408860:	4b27      	ldr	r3, [pc, #156]	; (408900 <xQueueGenericReset+0xb0>)
  408862:	4798      	blx	r3
  408864:	bf00      	nop
  408866:	e7fd      	b.n	408864 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  408868:	4b26      	ldr	r3, [pc, #152]	; (408904 <xQueueGenericReset+0xb4>)
  40886a:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40886c:	687b      	ldr	r3, [r7, #4]
  40886e:	681a      	ldr	r2, [r3, #0]
  408870:	687b      	ldr	r3, [r7, #4]
  408872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  408874:	6879      	ldr	r1, [r7, #4]
  408876:	6c09      	ldr	r1, [r1, #64]	; 0x40
  408878:	fb01 f303 	mul.w	r3, r1, r3
  40887c:	441a      	add	r2, r3
  40887e:	687b      	ldr	r3, [r7, #4]
  408880:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  408882:	687b      	ldr	r3, [r7, #4]
  408884:	2200      	movs	r2, #0
  408886:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  408888:	687b      	ldr	r3, [r7, #4]
  40888a:	681a      	ldr	r2, [r3, #0]
  40888c:	687b      	ldr	r3, [r7, #4]
  40888e:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  408890:	687b      	ldr	r3, [r7, #4]
  408892:	681a      	ldr	r2, [r3, #0]
  408894:	687b      	ldr	r3, [r7, #4]
  408896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  408898:	3b01      	subs	r3, #1
  40889a:	6879      	ldr	r1, [r7, #4]
  40889c:	6c09      	ldr	r1, [r1, #64]	; 0x40
  40889e:	fb01 f303 	mul.w	r3, r1, r3
  4088a2:	441a      	add	r2, r3
  4088a4:	687b      	ldr	r3, [r7, #4]
  4088a6:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4088a8:	687b      	ldr	r3, [r7, #4]
  4088aa:	f04f 32ff 	mov.w	r2, #4294967295
  4088ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4088b0:	687b      	ldr	r3, [r7, #4]
  4088b2:	f04f 32ff 	mov.w	r2, #4294967295
  4088b6:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4088b8:	683b      	ldr	r3, [r7, #0]
  4088ba:	2b00      	cmp	r3, #0
  4088bc:	d10e      	bne.n	4088dc <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4088be:	687b      	ldr	r3, [r7, #4]
  4088c0:	691b      	ldr	r3, [r3, #16]
  4088c2:	2b00      	cmp	r3, #0
  4088c4:	d014      	beq.n	4088f0 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4088c6:	687b      	ldr	r3, [r7, #4]
  4088c8:	3310      	adds	r3, #16
  4088ca:	4618      	mov	r0, r3
  4088cc:	4b0e      	ldr	r3, [pc, #56]	; (408908 <xQueueGenericReset+0xb8>)
  4088ce:	4798      	blx	r3
  4088d0:	4603      	mov	r3, r0
  4088d2:	2b01      	cmp	r3, #1
  4088d4:	d10c      	bne.n	4088f0 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  4088d6:	4b0d      	ldr	r3, [pc, #52]	; (40890c <xQueueGenericReset+0xbc>)
  4088d8:	4798      	blx	r3
  4088da:	e009      	b.n	4088f0 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4088dc:	687b      	ldr	r3, [r7, #4]
  4088de:	3310      	adds	r3, #16
  4088e0:	4618      	mov	r0, r3
  4088e2:	4b0b      	ldr	r3, [pc, #44]	; (408910 <xQueueGenericReset+0xc0>)
  4088e4:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4088e6:	687b      	ldr	r3, [r7, #4]
  4088e8:	3324      	adds	r3, #36	; 0x24
  4088ea:	4618      	mov	r0, r3
  4088ec:	4b08      	ldr	r3, [pc, #32]	; (408910 <xQueueGenericReset+0xc0>)
  4088ee:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  4088f0:	4b08      	ldr	r3, [pc, #32]	; (408914 <xQueueGenericReset+0xc4>)
  4088f2:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  4088f4:	2301      	movs	r3, #1
}
  4088f6:	4618      	mov	r0, r3
  4088f8:	3708      	adds	r7, #8
  4088fa:	46bd      	mov	sp, r7
  4088fc:	bd80      	pop	{r7, pc}
  4088fe:	bf00      	nop
  408900:	00408501 	.word	0x00408501
  408904:	004084bd 	.word	0x004084bd
  408908:	00409781 	.word	0x00409781
  40890c:	004084a5 	.word	0x004084a5
  408910:	004081c9 	.word	0x004081c9
  408914:	004084d9 	.word	0x004084d9

00408918 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  408918:	b580      	push	{r7, lr}
  40891a:	b088      	sub	sp, #32
  40891c:	af00      	add	r7, sp, #0
  40891e:	60f8      	str	r0, [r7, #12]
  408920:	60b9      	str	r1, [r7, #8]
  408922:	4613      	mov	r3, r2
  408924:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  408926:	2300      	movs	r3, #0
  408928:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  40892a:	68fb      	ldr	r3, [r7, #12]
  40892c:	2b00      	cmp	r3, #0
  40892e:	d02a      	beq.n	408986 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  408930:	2050      	movs	r0, #80	; 0x50
  408932:	4b1b      	ldr	r3, [pc, #108]	; (4089a0 <xQueueGenericCreate+0x88>)
  408934:	4798      	blx	r3
  408936:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  408938:	69bb      	ldr	r3, [r7, #24]
  40893a:	2b00      	cmp	r3, #0
  40893c:	d023      	beq.n	408986 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  40893e:	68fb      	ldr	r3, [r7, #12]
  408940:	68ba      	ldr	r2, [r7, #8]
  408942:	fb02 f303 	mul.w	r3, r2, r3
  408946:	3301      	adds	r3, #1
  408948:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  40894a:	6978      	ldr	r0, [r7, #20]
  40894c:	4b14      	ldr	r3, [pc, #80]	; (4089a0 <xQueueGenericCreate+0x88>)
  40894e:	4798      	blx	r3
  408950:	4602      	mov	r2, r0
  408952:	69bb      	ldr	r3, [r7, #24]
  408954:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  408956:	69bb      	ldr	r3, [r7, #24]
  408958:	681b      	ldr	r3, [r3, #0]
  40895a:	2b00      	cmp	r3, #0
  40895c:	d010      	beq.n	408980 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  40895e:	69bb      	ldr	r3, [r7, #24]
  408960:	68fa      	ldr	r2, [r7, #12]
  408962:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  408964:	69bb      	ldr	r3, [r7, #24]
  408966:	68ba      	ldr	r2, [r7, #8]
  408968:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  40896a:	69b8      	ldr	r0, [r7, #24]
  40896c:	2101      	movs	r1, #1
  40896e:	4b0d      	ldr	r3, [pc, #52]	; (4089a4 <xQueueGenericCreate+0x8c>)
  408970:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  408972:	69bb      	ldr	r3, [r7, #24]
  408974:	79fa      	ldrb	r2, [r7, #7]
  408976:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  40897a:	69bb      	ldr	r3, [r7, #24]
  40897c:	61fb      	str	r3, [r7, #28]
  40897e:	e002      	b.n	408986 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  408980:	69b8      	ldr	r0, [r7, #24]
  408982:	4b09      	ldr	r3, [pc, #36]	; (4089a8 <xQueueGenericCreate+0x90>)
  408984:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  408986:	69fb      	ldr	r3, [r7, #28]
  408988:	2b00      	cmp	r3, #0
  40898a:	d103      	bne.n	408994 <xQueueGenericCreate+0x7c>
  40898c:	4b07      	ldr	r3, [pc, #28]	; (4089ac <xQueueGenericCreate+0x94>)
  40898e:	4798      	blx	r3
  408990:	bf00      	nop
  408992:	e7fd      	b.n	408990 <xQueueGenericCreate+0x78>

	return xReturn;
  408994:	69fb      	ldr	r3, [r7, #28]
}
  408996:	4618      	mov	r0, r3
  408998:	3720      	adds	r7, #32
  40899a:	46bd      	mov	sp, r7
  40899c:	bd80      	pop	{r7, pc}
  40899e:	bf00      	nop
  4089a0:	004085b5 	.word	0x004085b5
  4089a4:	00408851 	.word	0x00408851
  4089a8:	004086bd 	.word	0x004086bd
  4089ac:	00408501 	.word	0x00408501

004089b0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  4089b0:	b580      	push	{r7, lr}
  4089b2:	b088      	sub	sp, #32
  4089b4:	af00      	add	r7, sp, #0
  4089b6:	60f8      	str	r0, [r7, #12]
  4089b8:	60b9      	str	r1, [r7, #8]
  4089ba:	607a      	str	r2, [r7, #4]
  4089bc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  4089be:	2300      	movs	r3, #0
  4089c0:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  4089c2:	68fb      	ldr	r3, [r7, #12]
  4089c4:	2b00      	cmp	r3, #0
  4089c6:	d103      	bne.n	4089d0 <xQueueGenericSend+0x20>
  4089c8:	4b48      	ldr	r3, [pc, #288]	; (408aec <xQueueGenericSend+0x13c>)
  4089ca:	4798      	blx	r3
  4089cc:	bf00      	nop
  4089ce:	e7fd      	b.n	4089cc <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  4089d0:	68bb      	ldr	r3, [r7, #8]
  4089d2:	2b00      	cmp	r3, #0
  4089d4:	d103      	bne.n	4089de <xQueueGenericSend+0x2e>
  4089d6:	68fb      	ldr	r3, [r7, #12]
  4089d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4089da:	2b00      	cmp	r3, #0
  4089dc:	d101      	bne.n	4089e2 <xQueueGenericSend+0x32>
  4089de:	2301      	movs	r3, #1
  4089e0:	e000      	b.n	4089e4 <xQueueGenericSend+0x34>
  4089e2:	2300      	movs	r3, #0
  4089e4:	2b00      	cmp	r3, #0
  4089e6:	d103      	bne.n	4089f0 <xQueueGenericSend+0x40>
  4089e8:	4b40      	ldr	r3, [pc, #256]	; (408aec <xQueueGenericSend+0x13c>)
  4089ea:	4798      	blx	r3
  4089ec:	bf00      	nop
  4089ee:	e7fd      	b.n	4089ec <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4089f0:	4b3f      	ldr	r3, [pc, #252]	; (408af0 <xQueueGenericSend+0x140>)
  4089f2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4089f4:	68fb      	ldr	r3, [r7, #12]
  4089f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4089f8:	68fb      	ldr	r3, [r7, #12]
  4089fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4089fc:	429a      	cmp	r2, r3
  4089fe:	d216      	bcs.n	408a2e <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  408a00:	68f8      	ldr	r0, [r7, #12]
  408a02:	68b9      	ldr	r1, [r7, #8]
  408a04:	683a      	ldr	r2, [r7, #0]
  408a06:	4b3b      	ldr	r3, [pc, #236]	; (408af4 <xQueueGenericSend+0x144>)
  408a08:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  408a0a:	68fb      	ldr	r3, [r7, #12]
  408a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  408a0e:	2b00      	cmp	r3, #0
  408a10:	d009      	beq.n	408a26 <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  408a12:	68fb      	ldr	r3, [r7, #12]
  408a14:	3324      	adds	r3, #36	; 0x24
  408a16:	4618      	mov	r0, r3
  408a18:	4b37      	ldr	r3, [pc, #220]	; (408af8 <xQueueGenericSend+0x148>)
  408a1a:	4798      	blx	r3
  408a1c:	4603      	mov	r3, r0
  408a1e:	2b01      	cmp	r3, #1
  408a20:	d101      	bne.n	408a26 <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  408a22:	4b36      	ldr	r3, [pc, #216]	; (408afc <xQueueGenericSend+0x14c>)
  408a24:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  408a26:	4b36      	ldr	r3, [pc, #216]	; (408b00 <xQueueGenericSend+0x150>)
  408a28:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  408a2a:	2301      	movs	r3, #1
  408a2c:	e059      	b.n	408ae2 <xQueueGenericSend+0x132>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  408a2e:	687b      	ldr	r3, [r7, #4]
  408a30:	2b00      	cmp	r3, #0
  408a32:	d103      	bne.n	408a3c <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  408a34:	4b32      	ldr	r3, [pc, #200]	; (408b00 <xQueueGenericSend+0x150>)
  408a36:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  408a38:	2300      	movs	r3, #0
  408a3a:	e052      	b.n	408ae2 <xQueueGenericSend+0x132>
				}
				else if( xEntryTimeSet == pdFALSE )
  408a3c:	69fb      	ldr	r3, [r7, #28]
  408a3e:	2b00      	cmp	r3, #0
  408a40:	d106      	bne.n	408a50 <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  408a42:	f107 0314 	add.w	r3, r7, #20
  408a46:	4618      	mov	r0, r3
  408a48:	4b2e      	ldr	r3, [pc, #184]	; (408b04 <xQueueGenericSend+0x154>)
  408a4a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  408a4c:	2301      	movs	r3, #1
  408a4e:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  408a50:	4b2b      	ldr	r3, [pc, #172]	; (408b00 <xQueueGenericSend+0x150>)
  408a52:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  408a54:	4b2c      	ldr	r3, [pc, #176]	; (408b08 <xQueueGenericSend+0x158>)
  408a56:	4798      	blx	r3
		prvLockQueue( pxQueue );
  408a58:	4b25      	ldr	r3, [pc, #148]	; (408af0 <xQueueGenericSend+0x140>)
  408a5a:	4798      	blx	r3
  408a5c:	68fb      	ldr	r3, [r7, #12]
  408a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  408a60:	f1b3 3fff 	cmp.w	r3, #4294967295
  408a64:	d102      	bne.n	408a6c <xQueueGenericSend+0xbc>
  408a66:	68fb      	ldr	r3, [r7, #12]
  408a68:	2200      	movs	r2, #0
  408a6a:	645a      	str	r2, [r3, #68]	; 0x44
  408a6c:	68fb      	ldr	r3, [r7, #12]
  408a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408a70:	f1b3 3fff 	cmp.w	r3, #4294967295
  408a74:	d102      	bne.n	408a7c <xQueueGenericSend+0xcc>
  408a76:	68fb      	ldr	r3, [r7, #12]
  408a78:	2200      	movs	r2, #0
  408a7a:	649a      	str	r2, [r3, #72]	; 0x48
  408a7c:	4b20      	ldr	r3, [pc, #128]	; (408b00 <xQueueGenericSend+0x150>)
  408a7e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  408a80:	f107 0214 	add.w	r2, r7, #20
  408a84:	1d3b      	adds	r3, r7, #4
  408a86:	4610      	mov	r0, r2
  408a88:	4619      	mov	r1, r3
  408a8a:	4b20      	ldr	r3, [pc, #128]	; (408b0c <xQueueGenericSend+0x15c>)
  408a8c:	4798      	blx	r3
  408a8e:	4603      	mov	r3, r0
  408a90:	2b00      	cmp	r3, #0
  408a92:	d11e      	bne.n	408ad2 <xQueueGenericSend+0x122>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  408a94:	68f8      	ldr	r0, [r7, #12]
  408a96:	4b1e      	ldr	r3, [pc, #120]	; (408b10 <xQueueGenericSend+0x160>)
  408a98:	4798      	blx	r3
  408a9a:	4603      	mov	r3, r0
  408a9c:	2b00      	cmp	r3, #0
  408a9e:	d012      	beq.n	408ac6 <xQueueGenericSend+0x116>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  408aa0:	68fb      	ldr	r3, [r7, #12]
  408aa2:	f103 0210 	add.w	r2, r3, #16
  408aa6:	687b      	ldr	r3, [r7, #4]
  408aa8:	4610      	mov	r0, r2
  408aaa:	4619      	mov	r1, r3
  408aac:	4b19      	ldr	r3, [pc, #100]	; (408b14 <xQueueGenericSend+0x164>)
  408aae:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  408ab0:	68f8      	ldr	r0, [r7, #12]
  408ab2:	4b19      	ldr	r3, [pc, #100]	; (408b18 <xQueueGenericSend+0x168>)
  408ab4:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  408ab6:	4b19      	ldr	r3, [pc, #100]	; (408b1c <xQueueGenericSend+0x16c>)
  408ab8:	4798      	blx	r3
  408aba:	4603      	mov	r3, r0
  408abc:	2b00      	cmp	r3, #0
  408abe:	d10f      	bne.n	408ae0 <xQueueGenericSend+0x130>
				{
					portYIELD_WITHIN_API();
  408ac0:	4b0e      	ldr	r3, [pc, #56]	; (408afc <xQueueGenericSend+0x14c>)
  408ac2:	4798      	blx	r3
  408ac4:	e00c      	b.n	408ae0 <xQueueGenericSend+0x130>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  408ac6:	68f8      	ldr	r0, [r7, #12]
  408ac8:	4b13      	ldr	r3, [pc, #76]	; (408b18 <xQueueGenericSend+0x168>)
  408aca:	4798      	blx	r3
				( void ) xTaskResumeAll();
  408acc:	4b13      	ldr	r3, [pc, #76]	; (408b1c <xQueueGenericSend+0x16c>)
  408ace:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
  408ad0:	e78e      	b.n	4089f0 <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  408ad2:	68f8      	ldr	r0, [r7, #12]
  408ad4:	4b10      	ldr	r3, [pc, #64]	; (408b18 <xQueueGenericSend+0x168>)
  408ad6:	4798      	blx	r3
			( void ) xTaskResumeAll();
  408ad8:	4b10      	ldr	r3, [pc, #64]	; (408b1c <xQueueGenericSend+0x16c>)
  408ada:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  408adc:	2300      	movs	r3, #0
  408ade:	e000      	b.n	408ae2 <xQueueGenericSend+0x132>
		}
	}
  408ae0:	e786      	b.n	4089f0 <xQueueGenericSend+0x40>
}
  408ae2:	4618      	mov	r0, r3
  408ae4:	3720      	adds	r7, #32
  408ae6:	46bd      	mov	sp, r7
  408ae8:	bd80      	pop	{r7, pc}
  408aea:	bf00      	nop
  408aec:	00408501 	.word	0x00408501
  408af0:	004084bd 	.word	0x004084bd
  408af4:	00408df1 	.word	0x00408df1
  408af8:	00409781 	.word	0x00409781
  408afc:	004084a5 	.word	0x004084a5
  408b00:	004084d9 	.word	0x004084d9
  408b04:	0040983d 	.word	0x0040983d
  408b08:	0040931d 	.word	0x0040931d
  408b0c:	00409875 	.word	0x00409875
  408b10:	00408fdd 	.word	0x00408fdd
  408b14:	004096a1 	.word	0x004096a1
  408b18:	00408f01 	.word	0x00408f01
  408b1c:	00409339 	.word	0x00409339

00408b20 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  408b20:	b580      	push	{r7, lr}
  408b22:	b086      	sub	sp, #24
  408b24:	af00      	add	r7, sp, #0
  408b26:	60f8      	str	r0, [r7, #12]
  408b28:	60b9      	str	r1, [r7, #8]
  408b2a:	607a      	str	r2, [r7, #4]
  408b2c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  408b2e:	68fb      	ldr	r3, [r7, #12]
  408b30:	2b00      	cmp	r3, #0
  408b32:	d103      	bne.n	408b3c <xQueueGenericSendFromISR+0x1c>
  408b34:	4b25      	ldr	r3, [pc, #148]	; (408bcc <xQueueGenericSendFromISR+0xac>)
  408b36:	4798      	blx	r3
  408b38:	bf00      	nop
  408b3a:	e7fd      	b.n	408b38 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  408b3c:	68bb      	ldr	r3, [r7, #8]
  408b3e:	2b00      	cmp	r3, #0
  408b40:	d103      	bne.n	408b4a <xQueueGenericSendFromISR+0x2a>
  408b42:	68fb      	ldr	r3, [r7, #12]
  408b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408b46:	2b00      	cmp	r3, #0
  408b48:	d101      	bne.n	408b4e <xQueueGenericSendFromISR+0x2e>
  408b4a:	2301      	movs	r3, #1
  408b4c:	e000      	b.n	408b50 <xQueueGenericSendFromISR+0x30>
  408b4e:	2300      	movs	r3, #0
  408b50:	2b00      	cmp	r3, #0
  408b52:	d103      	bne.n	408b5c <xQueueGenericSendFromISR+0x3c>
  408b54:	4b1d      	ldr	r3, [pc, #116]	; (408bcc <xQueueGenericSendFromISR+0xac>)
  408b56:	4798      	blx	r3
  408b58:	bf00      	nop
  408b5a:	e7fd      	b.n	408b58 <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  408b5c:	4b1b      	ldr	r3, [pc, #108]	; (408bcc <xQueueGenericSendFromISR+0xac>)
  408b5e:	4798      	blx	r3
  408b60:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  408b62:	68fb      	ldr	r3, [r7, #12]
  408b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408b66:	68fb      	ldr	r3, [r7, #12]
  408b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  408b6a:	429a      	cmp	r2, r3
  408b6c:	d224      	bcs.n	408bb8 <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  408b6e:	68f8      	ldr	r0, [r7, #12]
  408b70:	68b9      	ldr	r1, [r7, #8]
  408b72:	683a      	ldr	r2, [r7, #0]
  408b74:	4b16      	ldr	r3, [pc, #88]	; (408bd0 <xQueueGenericSendFromISR+0xb0>)
  408b76:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  408b78:	68fb      	ldr	r3, [r7, #12]
  408b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
  408b80:	d112      	bne.n	408ba8 <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  408b82:	68fb      	ldr	r3, [r7, #12]
  408b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  408b86:	2b00      	cmp	r3, #0
  408b88:	d013      	beq.n	408bb2 <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  408b8a:	68fb      	ldr	r3, [r7, #12]
  408b8c:	3324      	adds	r3, #36	; 0x24
  408b8e:	4618      	mov	r0, r3
  408b90:	4b10      	ldr	r3, [pc, #64]	; (408bd4 <xQueueGenericSendFromISR+0xb4>)
  408b92:	4798      	blx	r3
  408b94:	4603      	mov	r3, r0
  408b96:	2b00      	cmp	r3, #0
  408b98:	d00b      	beq.n	408bb2 <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  408b9a:	687b      	ldr	r3, [r7, #4]
  408b9c:	2b00      	cmp	r3, #0
  408b9e:	d008      	beq.n	408bb2 <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  408ba0:	687b      	ldr	r3, [r7, #4]
  408ba2:	2201      	movs	r2, #1
  408ba4:	601a      	str	r2, [r3, #0]
  408ba6:	e004      	b.n	408bb2 <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  408ba8:	68fb      	ldr	r3, [r7, #12]
  408baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408bac:	1c5a      	adds	r2, r3, #1
  408bae:	68fb      	ldr	r3, [r7, #12]
  408bb0:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  408bb2:	2301      	movs	r3, #1
  408bb4:	617b      	str	r3, [r7, #20]
  408bb6:	e001      	b.n	408bbc <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  408bb8:	2300      	movs	r3, #0
  408bba:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  408bbc:	6938      	ldr	r0, [r7, #16]
  408bbe:	4b06      	ldr	r3, [pc, #24]	; (408bd8 <xQueueGenericSendFromISR+0xb8>)
  408bc0:	4798      	blx	r3

	return xReturn;
  408bc2:	697b      	ldr	r3, [r7, #20]
}
  408bc4:	4618      	mov	r0, r3
  408bc6:	3718      	adds	r7, #24
  408bc8:	46bd      	mov	sp, r7
  408bca:	bd80      	pop	{r7, pc}
  408bcc:	00408501 	.word	0x00408501
  408bd0:	00408df1 	.word	0x00408df1
  408bd4:	00409781 	.word	0x00409781
  408bd8:	00408515 	.word	0x00408515

00408bdc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  408bdc:	b580      	push	{r7, lr}
  408bde:	b088      	sub	sp, #32
  408be0:	af00      	add	r7, sp, #0
  408be2:	60f8      	str	r0, [r7, #12]
  408be4:	60b9      	str	r1, [r7, #8]
  408be6:	607a      	str	r2, [r7, #4]
  408be8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  408bea:	2300      	movs	r3, #0
  408bec:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  408bee:	68fb      	ldr	r3, [r7, #12]
  408bf0:	2b00      	cmp	r3, #0
  408bf2:	d103      	bne.n	408bfc <xQueueGenericReceive+0x20>
  408bf4:	4b60      	ldr	r3, [pc, #384]	; (408d78 <xQueueGenericReceive+0x19c>)
  408bf6:	4798      	blx	r3
  408bf8:	bf00      	nop
  408bfa:	e7fd      	b.n	408bf8 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  408bfc:	68bb      	ldr	r3, [r7, #8]
  408bfe:	2b00      	cmp	r3, #0
  408c00:	d103      	bne.n	408c0a <xQueueGenericReceive+0x2e>
  408c02:	68fb      	ldr	r3, [r7, #12]
  408c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408c06:	2b00      	cmp	r3, #0
  408c08:	d101      	bne.n	408c0e <xQueueGenericReceive+0x32>
  408c0a:	2301      	movs	r3, #1
  408c0c:	e000      	b.n	408c10 <xQueueGenericReceive+0x34>
  408c0e:	2300      	movs	r3, #0
  408c10:	2b00      	cmp	r3, #0
  408c12:	d103      	bne.n	408c1c <xQueueGenericReceive+0x40>
  408c14:	4b58      	ldr	r3, [pc, #352]	; (408d78 <xQueueGenericReceive+0x19c>)
  408c16:	4798      	blx	r3
  408c18:	bf00      	nop
  408c1a:	e7fd      	b.n	408c18 <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  408c1c:	4b57      	ldr	r3, [pc, #348]	; (408d7c <xQueueGenericReceive+0x1a0>)
  408c1e:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  408c20:	68fb      	ldr	r3, [r7, #12]
  408c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408c24:	2b00      	cmp	r3, #0
  408c26:	d03b      	beq.n	408ca0 <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  408c28:	68fb      	ldr	r3, [r7, #12]
  408c2a:	68db      	ldr	r3, [r3, #12]
  408c2c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  408c2e:	68f8      	ldr	r0, [r7, #12]
  408c30:	68b9      	ldr	r1, [r7, #8]
  408c32:	4b53      	ldr	r3, [pc, #332]	; (408d80 <xQueueGenericReceive+0x1a4>)
  408c34:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  408c36:	683b      	ldr	r3, [r7, #0]
  408c38:	2b00      	cmp	r3, #0
  408c3a:	d11c      	bne.n	408c76 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  408c3c:	68fb      	ldr	r3, [r7, #12]
  408c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408c40:	1e5a      	subs	r2, r3, #1
  408c42:	68fb      	ldr	r3, [r7, #12]
  408c44:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  408c46:	68fb      	ldr	r3, [r7, #12]
  408c48:	681b      	ldr	r3, [r3, #0]
  408c4a:	2b00      	cmp	r3, #0
  408c4c:	d104      	bne.n	408c58 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  408c4e:	4b4d      	ldr	r3, [pc, #308]	; (408d84 <xQueueGenericReceive+0x1a8>)
  408c50:	4798      	blx	r3
  408c52:	4602      	mov	r2, r0
  408c54:	68fb      	ldr	r3, [r7, #12]
  408c56:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  408c58:	68fb      	ldr	r3, [r7, #12]
  408c5a:	691b      	ldr	r3, [r3, #16]
  408c5c:	2b00      	cmp	r3, #0
  408c5e:	d01b      	beq.n	408c98 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  408c60:	68fb      	ldr	r3, [r7, #12]
  408c62:	3310      	adds	r3, #16
  408c64:	4618      	mov	r0, r3
  408c66:	4b48      	ldr	r3, [pc, #288]	; (408d88 <xQueueGenericReceive+0x1ac>)
  408c68:	4798      	blx	r3
  408c6a:	4603      	mov	r3, r0
  408c6c:	2b01      	cmp	r3, #1
  408c6e:	d113      	bne.n	408c98 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  408c70:	4b46      	ldr	r3, [pc, #280]	; (408d8c <xQueueGenericReceive+0x1b0>)
  408c72:	4798      	blx	r3
  408c74:	e010      	b.n	408c98 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  408c76:	68fb      	ldr	r3, [r7, #12]
  408c78:	69ba      	ldr	r2, [r7, #24]
  408c7a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  408c7c:	68fb      	ldr	r3, [r7, #12]
  408c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  408c80:	2b00      	cmp	r3, #0
  408c82:	d009      	beq.n	408c98 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  408c84:	68fb      	ldr	r3, [r7, #12]
  408c86:	3324      	adds	r3, #36	; 0x24
  408c88:	4618      	mov	r0, r3
  408c8a:	4b3f      	ldr	r3, [pc, #252]	; (408d88 <xQueueGenericReceive+0x1ac>)
  408c8c:	4798      	blx	r3
  408c8e:	4603      	mov	r3, r0
  408c90:	2b00      	cmp	r3, #0
  408c92:	d001      	beq.n	408c98 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  408c94:	4b3d      	ldr	r3, [pc, #244]	; (408d8c <xQueueGenericReceive+0x1b0>)
  408c96:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  408c98:	4b3d      	ldr	r3, [pc, #244]	; (408d90 <xQueueGenericReceive+0x1b4>)
  408c9a:	4798      	blx	r3
				return pdPASS;
  408c9c:	2301      	movs	r3, #1
  408c9e:	e066      	b.n	408d6e <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  408ca0:	687b      	ldr	r3, [r7, #4]
  408ca2:	2b00      	cmp	r3, #0
  408ca4:	d103      	bne.n	408cae <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  408ca6:	4b3a      	ldr	r3, [pc, #232]	; (408d90 <xQueueGenericReceive+0x1b4>)
  408ca8:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  408caa:	2300      	movs	r3, #0
  408cac:	e05f      	b.n	408d6e <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
  408cae:	69fb      	ldr	r3, [r7, #28]
  408cb0:	2b00      	cmp	r3, #0
  408cb2:	d106      	bne.n	408cc2 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  408cb4:	f107 0310 	add.w	r3, r7, #16
  408cb8:	4618      	mov	r0, r3
  408cba:	4b36      	ldr	r3, [pc, #216]	; (408d94 <xQueueGenericReceive+0x1b8>)
  408cbc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  408cbe:	2301      	movs	r3, #1
  408cc0:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  408cc2:	4b33      	ldr	r3, [pc, #204]	; (408d90 <xQueueGenericReceive+0x1b4>)
  408cc4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  408cc6:	4b34      	ldr	r3, [pc, #208]	; (408d98 <xQueueGenericReceive+0x1bc>)
  408cc8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  408cca:	4b2c      	ldr	r3, [pc, #176]	; (408d7c <xQueueGenericReceive+0x1a0>)
  408ccc:	4798      	blx	r3
  408cce:	68fb      	ldr	r3, [r7, #12]
  408cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  408cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
  408cd6:	d102      	bne.n	408cde <xQueueGenericReceive+0x102>
  408cd8:	68fb      	ldr	r3, [r7, #12]
  408cda:	2200      	movs	r2, #0
  408cdc:	645a      	str	r2, [r3, #68]	; 0x44
  408cde:	68fb      	ldr	r3, [r7, #12]
  408ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
  408ce6:	d102      	bne.n	408cee <xQueueGenericReceive+0x112>
  408ce8:	68fb      	ldr	r3, [r7, #12]
  408cea:	2200      	movs	r2, #0
  408cec:	649a      	str	r2, [r3, #72]	; 0x48
  408cee:	4b28      	ldr	r3, [pc, #160]	; (408d90 <xQueueGenericReceive+0x1b4>)
  408cf0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  408cf2:	f107 0210 	add.w	r2, r7, #16
  408cf6:	1d3b      	adds	r3, r7, #4
  408cf8:	4610      	mov	r0, r2
  408cfa:	4619      	mov	r1, r3
  408cfc:	4b27      	ldr	r3, [pc, #156]	; (408d9c <xQueueGenericReceive+0x1c0>)
  408cfe:	4798      	blx	r3
  408d00:	4603      	mov	r3, r0
  408d02:	2b00      	cmp	r3, #0
  408d04:	d12b      	bne.n	408d5e <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  408d06:	68f8      	ldr	r0, [r7, #12]
  408d08:	4b25      	ldr	r3, [pc, #148]	; (408da0 <xQueueGenericReceive+0x1c4>)
  408d0a:	4798      	blx	r3
  408d0c:	4603      	mov	r3, r0
  408d0e:	2b00      	cmp	r3, #0
  408d10:	d01f      	beq.n	408d52 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  408d12:	68fb      	ldr	r3, [r7, #12]
  408d14:	681b      	ldr	r3, [r3, #0]
  408d16:	2b00      	cmp	r3, #0
  408d18:	d108      	bne.n	408d2c <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  408d1a:	4b18      	ldr	r3, [pc, #96]	; (408d7c <xQueueGenericReceive+0x1a0>)
  408d1c:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  408d1e:	68fb      	ldr	r3, [r7, #12]
  408d20:	685b      	ldr	r3, [r3, #4]
  408d22:	4618      	mov	r0, r3
  408d24:	4b1f      	ldr	r3, [pc, #124]	; (408da4 <xQueueGenericReceive+0x1c8>)
  408d26:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  408d28:	4b19      	ldr	r3, [pc, #100]	; (408d90 <xQueueGenericReceive+0x1b4>)
  408d2a:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  408d2c:	68fb      	ldr	r3, [r7, #12]
  408d2e:	f103 0224 	add.w	r2, r3, #36	; 0x24
  408d32:	687b      	ldr	r3, [r7, #4]
  408d34:	4610      	mov	r0, r2
  408d36:	4619      	mov	r1, r3
  408d38:	4b1b      	ldr	r3, [pc, #108]	; (408da8 <xQueueGenericReceive+0x1cc>)
  408d3a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  408d3c:	68f8      	ldr	r0, [r7, #12]
  408d3e:	4b1b      	ldr	r3, [pc, #108]	; (408dac <xQueueGenericReceive+0x1d0>)
  408d40:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  408d42:	4b1b      	ldr	r3, [pc, #108]	; (408db0 <xQueueGenericReceive+0x1d4>)
  408d44:	4798      	blx	r3
  408d46:	4603      	mov	r3, r0
  408d48:	2b00      	cmp	r3, #0
  408d4a:	d10f      	bne.n	408d6c <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
  408d4c:	4b0f      	ldr	r3, [pc, #60]	; (408d8c <xQueueGenericReceive+0x1b0>)
  408d4e:	4798      	blx	r3
  408d50:	e00c      	b.n	408d6c <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  408d52:	68f8      	ldr	r0, [r7, #12]
  408d54:	4b15      	ldr	r3, [pc, #84]	; (408dac <xQueueGenericReceive+0x1d0>)
  408d56:	4798      	blx	r3
				( void ) xTaskResumeAll();
  408d58:	4b15      	ldr	r3, [pc, #84]	; (408db0 <xQueueGenericReceive+0x1d4>)
  408d5a:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
  408d5c:	e75e      	b.n	408c1c <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  408d5e:	68f8      	ldr	r0, [r7, #12]
  408d60:	4b12      	ldr	r3, [pc, #72]	; (408dac <xQueueGenericReceive+0x1d0>)
  408d62:	4798      	blx	r3
			( void ) xTaskResumeAll();
  408d64:	4b12      	ldr	r3, [pc, #72]	; (408db0 <xQueueGenericReceive+0x1d4>)
  408d66:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  408d68:	2300      	movs	r3, #0
  408d6a:	e000      	b.n	408d6e <xQueueGenericReceive+0x192>
		}
	}
  408d6c:	e756      	b.n	408c1c <xQueueGenericReceive+0x40>
}
  408d6e:	4618      	mov	r0, r3
  408d70:	3720      	adds	r7, #32
  408d72:	46bd      	mov	sp, r7
  408d74:	bd80      	pop	{r7, pc}
  408d76:	bf00      	nop
  408d78:	00408501 	.word	0x00408501
  408d7c:	004084bd 	.word	0x004084bd
  408d80:	00408eb1 	.word	0x00408eb1
  408d84:	00409bed 	.word	0x00409bed
  408d88:	00409781 	.word	0x00409781
  408d8c:	004084a5 	.word	0x004084a5
  408d90:	004084d9 	.word	0x004084d9
  408d94:	0040983d 	.word	0x0040983d
  408d98:	0040931d 	.word	0x0040931d
  408d9c:	00409875 	.word	0x00409875
  408da0:	00408fa9 	.word	0x00408fa9
  408da4:	00409c49 	.word	0x00409c49
  408da8:	004096a1 	.word	0x004096a1
  408dac:	00408f01 	.word	0x00408f01
  408db0:	00409339 	.word	0x00409339

00408db4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
  408db4:	b580      	push	{r7, lr}
  408db6:	b084      	sub	sp, #16
  408db8:	af00      	add	r7, sp, #0
  408dba:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );
  408dbc:	687b      	ldr	r3, [r7, #4]
  408dbe:	2b00      	cmp	r3, #0
  408dc0:	d103      	bne.n	408dca <uxQueueMessagesWaiting+0x16>
  408dc2:	4b08      	ldr	r3, [pc, #32]	; (408de4 <uxQueueMessagesWaiting+0x30>)
  408dc4:	4798      	blx	r3
  408dc6:	bf00      	nop
  408dc8:	e7fd      	b.n	408dc6 <uxQueueMessagesWaiting+0x12>

	taskENTER_CRITICAL();
  408dca:	4b07      	ldr	r3, [pc, #28]	; (408de8 <uxQueueMessagesWaiting+0x34>)
  408dcc:	4798      	blx	r3
		uxReturn = pxQueue->uxMessagesWaiting;
  408dce:	687b      	ldr	r3, [r7, #4]
  408dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408dd2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  408dd4:	4b05      	ldr	r3, [pc, #20]	; (408dec <uxQueueMessagesWaiting+0x38>)
  408dd6:	4798      	blx	r3

	return uxReturn;
  408dd8:	68fb      	ldr	r3, [r7, #12]
}
  408dda:	4618      	mov	r0, r3
  408ddc:	3710      	adds	r7, #16
  408dde:	46bd      	mov	sp, r7
  408de0:	bd80      	pop	{r7, pc}
  408de2:	bf00      	nop
  408de4:	00408501 	.word	0x00408501
  408de8:	004084bd 	.word	0x004084bd
  408dec:	004084d9 	.word	0x004084d9

00408df0 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  408df0:	b580      	push	{r7, lr}
  408df2:	b084      	sub	sp, #16
  408df4:	af00      	add	r7, sp, #0
  408df6:	60f8      	str	r0, [r7, #12]
  408df8:	60b9      	str	r1, [r7, #8]
  408dfa:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  408dfc:	68fb      	ldr	r3, [r7, #12]
  408dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408e00:	2b00      	cmp	r3, #0
  408e02:	d10c      	bne.n	408e1e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  408e04:	68fb      	ldr	r3, [r7, #12]
  408e06:	681b      	ldr	r3, [r3, #0]
  408e08:	2b00      	cmp	r3, #0
  408e0a:	d145      	bne.n	408e98 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  408e0c:	68fb      	ldr	r3, [r7, #12]
  408e0e:	685b      	ldr	r3, [r3, #4]
  408e10:	4618      	mov	r0, r3
  408e12:	4b25      	ldr	r3, [pc, #148]	; (408ea8 <prvCopyDataToQueue+0xb8>)
  408e14:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  408e16:	68fb      	ldr	r3, [r7, #12]
  408e18:	2200      	movs	r2, #0
  408e1a:	605a      	str	r2, [r3, #4]
  408e1c:	e03c      	b.n	408e98 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  408e1e:	687b      	ldr	r3, [r7, #4]
  408e20:	2b00      	cmp	r3, #0
  408e22:	d11a      	bne.n	408e5a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  408e24:	68fb      	ldr	r3, [r7, #12]
  408e26:	689a      	ldr	r2, [r3, #8]
  408e28:	68fb      	ldr	r3, [r7, #12]
  408e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408e2c:	4610      	mov	r0, r2
  408e2e:	68b9      	ldr	r1, [r7, #8]
  408e30:	461a      	mov	r2, r3
  408e32:	4b1e      	ldr	r3, [pc, #120]	; (408eac <prvCopyDataToQueue+0xbc>)
  408e34:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  408e36:	68fb      	ldr	r3, [r7, #12]
  408e38:	689a      	ldr	r2, [r3, #8]
  408e3a:	68fb      	ldr	r3, [r7, #12]
  408e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408e3e:	441a      	add	r2, r3
  408e40:	68fb      	ldr	r3, [r7, #12]
  408e42:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  408e44:	68fb      	ldr	r3, [r7, #12]
  408e46:	689a      	ldr	r2, [r3, #8]
  408e48:	68fb      	ldr	r3, [r7, #12]
  408e4a:	685b      	ldr	r3, [r3, #4]
  408e4c:	429a      	cmp	r2, r3
  408e4e:	d323      	bcc.n	408e98 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  408e50:	68fb      	ldr	r3, [r7, #12]
  408e52:	681a      	ldr	r2, [r3, #0]
  408e54:	68fb      	ldr	r3, [r7, #12]
  408e56:	609a      	str	r2, [r3, #8]
  408e58:	e01e      	b.n	408e98 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  408e5a:	68fb      	ldr	r3, [r7, #12]
  408e5c:	68da      	ldr	r2, [r3, #12]
  408e5e:	68fb      	ldr	r3, [r7, #12]
  408e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408e62:	4610      	mov	r0, r2
  408e64:	68b9      	ldr	r1, [r7, #8]
  408e66:	461a      	mov	r2, r3
  408e68:	4b10      	ldr	r3, [pc, #64]	; (408eac <prvCopyDataToQueue+0xbc>)
  408e6a:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  408e6c:	68fb      	ldr	r3, [r7, #12]
  408e6e:	68da      	ldr	r2, [r3, #12]
  408e70:	68fb      	ldr	r3, [r7, #12]
  408e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408e74:	425b      	negs	r3, r3
  408e76:	441a      	add	r2, r3
  408e78:	68fb      	ldr	r3, [r7, #12]
  408e7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  408e7c:	68fb      	ldr	r3, [r7, #12]
  408e7e:	68da      	ldr	r2, [r3, #12]
  408e80:	68fb      	ldr	r3, [r7, #12]
  408e82:	681b      	ldr	r3, [r3, #0]
  408e84:	429a      	cmp	r2, r3
  408e86:	d207      	bcs.n	408e98 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  408e88:	68fb      	ldr	r3, [r7, #12]
  408e8a:	685a      	ldr	r2, [r3, #4]
  408e8c:	68fb      	ldr	r3, [r7, #12]
  408e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408e90:	425b      	negs	r3, r3
  408e92:	441a      	add	r2, r3
  408e94:	68fb      	ldr	r3, [r7, #12]
  408e96:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  408e98:	68fb      	ldr	r3, [r7, #12]
  408e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408e9c:	1c5a      	adds	r2, r3, #1
  408e9e:	68fb      	ldr	r3, [r7, #12]
  408ea0:	639a      	str	r2, [r3, #56]	; 0x38
}
  408ea2:	3710      	adds	r7, #16
  408ea4:	46bd      	mov	sp, r7
  408ea6:	bd80      	pop	{r7, pc}
  408ea8:	00409cf9 	.word	0x00409cf9
  408eac:	0040ca61 	.word	0x0040ca61

00408eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  408eb0:	b580      	push	{r7, lr}
  408eb2:	b082      	sub	sp, #8
  408eb4:	af00      	add	r7, sp, #0
  408eb6:	6078      	str	r0, [r7, #4]
  408eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  408eba:	687b      	ldr	r3, [r7, #4]
  408ebc:	681b      	ldr	r3, [r3, #0]
  408ebe:	2b00      	cmp	r3, #0
  408ec0:	d019      	beq.n	408ef6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  408ec2:	687b      	ldr	r3, [r7, #4]
  408ec4:	68da      	ldr	r2, [r3, #12]
  408ec6:	687b      	ldr	r3, [r7, #4]
  408ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408eca:	441a      	add	r2, r3
  408ecc:	687b      	ldr	r3, [r7, #4]
  408ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  408ed0:	687b      	ldr	r3, [r7, #4]
  408ed2:	68da      	ldr	r2, [r3, #12]
  408ed4:	687b      	ldr	r3, [r7, #4]
  408ed6:	685b      	ldr	r3, [r3, #4]
  408ed8:	429a      	cmp	r2, r3
  408eda:	d303      	bcc.n	408ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  408edc:	687b      	ldr	r3, [r7, #4]
  408ede:	681a      	ldr	r2, [r3, #0]
  408ee0:	687b      	ldr	r3, [r7, #4]
  408ee2:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  408ee4:	687b      	ldr	r3, [r7, #4]
  408ee6:	68da      	ldr	r2, [r3, #12]
  408ee8:	687b      	ldr	r3, [r7, #4]
  408eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  408eec:	6838      	ldr	r0, [r7, #0]
  408eee:	4611      	mov	r1, r2
  408ef0:	461a      	mov	r2, r3
  408ef2:	4b02      	ldr	r3, [pc, #8]	; (408efc <prvCopyDataFromQueue+0x4c>)
  408ef4:	4798      	blx	r3
	}
}
  408ef6:	3708      	adds	r7, #8
  408ef8:	46bd      	mov	sp, r7
  408efa:	bd80      	pop	{r7, pc}
  408efc:	0040ca61 	.word	0x0040ca61

00408f00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  408f00:	b580      	push	{r7, lr}
  408f02:	b082      	sub	sp, #8
  408f04:	af00      	add	r7, sp, #0
  408f06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  408f08:	4b23      	ldr	r3, [pc, #140]	; (408f98 <prvUnlockQueue+0x98>)
  408f0a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  408f0c:	e014      	b.n	408f38 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  408f0e:	687b      	ldr	r3, [r7, #4]
  408f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  408f12:	2b00      	cmp	r3, #0
  408f14:	d00f      	beq.n	408f36 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  408f16:	687b      	ldr	r3, [r7, #4]
  408f18:	3324      	adds	r3, #36	; 0x24
  408f1a:	4618      	mov	r0, r3
  408f1c:	4b1f      	ldr	r3, [pc, #124]	; (408f9c <prvUnlockQueue+0x9c>)
  408f1e:	4798      	blx	r3
  408f20:	4603      	mov	r3, r0
  408f22:	2b00      	cmp	r3, #0
  408f24:	d001      	beq.n	408f2a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  408f26:	4b1e      	ldr	r3, [pc, #120]	; (408fa0 <prvUnlockQueue+0xa0>)
  408f28:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  408f2a:	687b      	ldr	r3, [r7, #4]
  408f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408f2e:	1e5a      	subs	r2, r3, #1
  408f30:	687b      	ldr	r3, [r7, #4]
  408f32:	649a      	str	r2, [r3, #72]	; 0x48
  408f34:	e000      	b.n	408f38 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
  408f36:	e003      	b.n	408f40 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  408f38:	687b      	ldr	r3, [r7, #4]
  408f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408f3c:	2b00      	cmp	r3, #0
  408f3e:	dce6      	bgt.n	408f0e <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  408f40:	687b      	ldr	r3, [r7, #4]
  408f42:	f04f 32ff 	mov.w	r2, #4294967295
  408f46:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  408f48:	4b16      	ldr	r3, [pc, #88]	; (408fa4 <prvUnlockQueue+0xa4>)
  408f4a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  408f4c:	4b12      	ldr	r3, [pc, #72]	; (408f98 <prvUnlockQueue+0x98>)
  408f4e:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  408f50:	e014      	b.n	408f7c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  408f52:	687b      	ldr	r3, [r7, #4]
  408f54:	691b      	ldr	r3, [r3, #16]
  408f56:	2b00      	cmp	r3, #0
  408f58:	d00f      	beq.n	408f7a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  408f5a:	687b      	ldr	r3, [r7, #4]
  408f5c:	3310      	adds	r3, #16
  408f5e:	4618      	mov	r0, r3
  408f60:	4b0e      	ldr	r3, [pc, #56]	; (408f9c <prvUnlockQueue+0x9c>)
  408f62:	4798      	blx	r3
  408f64:	4603      	mov	r3, r0
  408f66:	2b00      	cmp	r3, #0
  408f68:	d001      	beq.n	408f6e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  408f6a:	4b0d      	ldr	r3, [pc, #52]	; (408fa0 <prvUnlockQueue+0xa0>)
  408f6c:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  408f6e:	687b      	ldr	r3, [r7, #4]
  408f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  408f72:	1e5a      	subs	r2, r3, #1
  408f74:	687b      	ldr	r3, [r7, #4]
  408f76:	645a      	str	r2, [r3, #68]	; 0x44
  408f78:	e000      	b.n	408f7c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
  408f7a:	e003      	b.n	408f84 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  408f7c:	687b      	ldr	r3, [r7, #4]
  408f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  408f80:	2b00      	cmp	r3, #0
  408f82:	dce6      	bgt.n	408f52 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  408f84:	687b      	ldr	r3, [r7, #4]
  408f86:	f04f 32ff 	mov.w	r2, #4294967295
  408f8a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  408f8c:	4b05      	ldr	r3, [pc, #20]	; (408fa4 <prvUnlockQueue+0xa4>)
  408f8e:	4798      	blx	r3
}
  408f90:	3708      	adds	r7, #8
  408f92:	46bd      	mov	sp, r7
  408f94:	bd80      	pop	{r7, pc}
  408f96:	bf00      	nop
  408f98:	004084bd 	.word	0x004084bd
  408f9c:	00409781 	.word	0x00409781
  408fa0:	00409929 	.word	0x00409929
  408fa4:	004084d9 	.word	0x004084d9

00408fa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  408fa8:	b580      	push	{r7, lr}
  408faa:	b084      	sub	sp, #16
  408fac:	af00      	add	r7, sp, #0
  408fae:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  408fb0:	4b08      	ldr	r3, [pc, #32]	; (408fd4 <prvIsQueueEmpty+0x2c>)
  408fb2:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  408fb4:	687b      	ldr	r3, [r7, #4]
  408fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408fb8:	2b00      	cmp	r3, #0
  408fba:	bf14      	ite	ne
  408fbc:	2300      	movne	r3, #0
  408fbe:	2301      	moveq	r3, #1
  408fc0:	b2db      	uxtb	r3, r3
  408fc2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  408fc4:	4b04      	ldr	r3, [pc, #16]	; (408fd8 <prvIsQueueEmpty+0x30>)
  408fc6:	4798      	blx	r3

	return xReturn;
  408fc8:	68fb      	ldr	r3, [r7, #12]
}
  408fca:	4618      	mov	r0, r3
  408fcc:	3710      	adds	r7, #16
  408fce:	46bd      	mov	sp, r7
  408fd0:	bd80      	pop	{r7, pc}
  408fd2:	bf00      	nop
  408fd4:	004084bd 	.word	0x004084bd
  408fd8:	004084d9 	.word	0x004084d9

00408fdc <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  408fdc:	b580      	push	{r7, lr}
  408fde:	b084      	sub	sp, #16
  408fe0:	af00      	add	r7, sp, #0
  408fe2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  408fe4:	4b09      	ldr	r3, [pc, #36]	; (40900c <prvIsQueueFull+0x30>)
  408fe6:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  408fe8:	687b      	ldr	r3, [r7, #4]
  408fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408fec:	687b      	ldr	r3, [r7, #4]
  408fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  408ff0:	429a      	cmp	r2, r3
  408ff2:	bf14      	ite	ne
  408ff4:	2300      	movne	r3, #0
  408ff6:	2301      	moveq	r3, #1
  408ff8:	b2db      	uxtb	r3, r3
  408ffa:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  408ffc:	4b04      	ldr	r3, [pc, #16]	; (409010 <prvIsQueueFull+0x34>)
  408ffe:	4798      	blx	r3

	return xReturn;
  409000:	68fb      	ldr	r3, [r7, #12]
}
  409002:	4618      	mov	r0, r3
  409004:	3710      	adds	r7, #16
  409006:	46bd      	mov	sp, r7
  409008:	bd80      	pop	{r7, pc}
  40900a:	bf00      	nop
  40900c:	004084bd 	.word	0x004084bd
  409010:	004084d9 	.word	0x004084d9

00409014 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  409014:	b580      	push	{r7, lr}
  409016:	b082      	sub	sp, #8
  409018:	af00      	add	r7, sp, #0
  40901a:	6078      	str	r0, [r7, #4]
  40901c:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  40901e:	4b12      	ldr	r3, [pc, #72]	; (409068 <vQueueWaitForMessageRestricted+0x54>)
  409020:	4798      	blx	r3
  409022:	687b      	ldr	r3, [r7, #4]
  409024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  409026:	f1b3 3fff 	cmp.w	r3, #4294967295
  40902a:	d102      	bne.n	409032 <vQueueWaitForMessageRestricted+0x1e>
  40902c:	687b      	ldr	r3, [r7, #4]
  40902e:	2200      	movs	r2, #0
  409030:	645a      	str	r2, [r3, #68]	; 0x44
  409032:	687b      	ldr	r3, [r7, #4]
  409034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  409036:	f1b3 3fff 	cmp.w	r3, #4294967295
  40903a:	d102      	bne.n	409042 <vQueueWaitForMessageRestricted+0x2e>
  40903c:	687b      	ldr	r3, [r7, #4]
  40903e:	2200      	movs	r2, #0
  409040:	649a      	str	r2, [r3, #72]	; 0x48
  409042:	4b0a      	ldr	r3, [pc, #40]	; (40906c <vQueueWaitForMessageRestricted+0x58>)
  409044:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  409046:	687b      	ldr	r3, [r7, #4]
  409048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40904a:	2b00      	cmp	r3, #0
  40904c:	d105      	bne.n	40905a <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40904e:	687b      	ldr	r3, [r7, #4]
  409050:	3324      	adds	r3, #36	; 0x24
  409052:	4618      	mov	r0, r3
  409054:	6839      	ldr	r1, [r7, #0]
  409056:	4b06      	ldr	r3, [pc, #24]	; (409070 <vQueueWaitForMessageRestricted+0x5c>)
  409058:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  40905a:	6878      	ldr	r0, [r7, #4]
  40905c:	4b05      	ldr	r3, [pc, #20]	; (409074 <vQueueWaitForMessageRestricted+0x60>)
  40905e:	4798      	blx	r3
	}
  409060:	3708      	adds	r7, #8
  409062:	46bd      	mov	sp, r7
  409064:	bd80      	pop	{r7, pc}
  409066:	bf00      	nop
  409068:	004084bd 	.word	0x004084bd
  40906c:	004084d9 	.word	0x004084d9
  409070:	00409721 	.word	0x00409721
  409074:	00408f01 	.word	0x00408f01

00409078 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  409078:	b590      	push	{r4, r7, lr}
  40907a:	b08b      	sub	sp, #44	; 0x2c
  40907c:	af02      	add	r7, sp, #8
  40907e:	60f8      	str	r0, [r7, #12]
  409080:	60b9      	str	r1, [r7, #8]
  409082:	603b      	str	r3, [r7, #0]
  409084:	4613      	mov	r3, r2
  409086:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  409088:	68fb      	ldr	r3, [r7, #12]
  40908a:	2b00      	cmp	r3, #0
  40908c:	d103      	bne.n	409096 <xTaskGenericCreate+0x1e>
  40908e:	4b5a      	ldr	r3, [pc, #360]	; (4091f8 <xTaskGenericCreate+0x180>)
  409090:	4798      	blx	r3
  409092:	bf00      	nop
  409094:	e7fd      	b.n	409092 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  409096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  409098:	2b0e      	cmp	r3, #14
  40909a:	d903      	bls.n	4090a4 <xTaskGenericCreate+0x2c>
  40909c:	4b56      	ldr	r3, [pc, #344]	; (4091f8 <xTaskGenericCreate+0x180>)
  40909e:	4798      	blx	r3
  4090a0:	bf00      	nop
  4090a2:	e7fd      	b.n	4090a0 <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  4090a4:	88fb      	ldrh	r3, [r7, #6]
  4090a6:	4618      	mov	r0, r3
  4090a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  4090aa:	4b54      	ldr	r3, [pc, #336]	; (4091fc <xTaskGenericCreate+0x184>)
  4090ac:	4798      	blx	r3
  4090ae:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  4090b0:	69bb      	ldr	r3, [r7, #24]
  4090b2:	2b00      	cmp	r3, #0
  4090b4:	f000 8088 	beq.w	4091c8 <xTaskGenericCreate+0x150>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  4090b8:	69bb      	ldr	r3, [r7, #24]
  4090ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4090bc:	88fb      	ldrh	r3, [r7, #6]
  4090be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  4090c2:	3b01      	subs	r3, #1
  4090c4:	009b      	lsls	r3, r3, #2
  4090c6:	4413      	add	r3, r2
  4090c8:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  4090ca:	697b      	ldr	r3, [r7, #20]
  4090cc:	f023 0307 	bic.w	r3, r3, #7
  4090d0:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  4090d2:	697b      	ldr	r3, [r7, #20]
  4090d4:	f003 0307 	and.w	r3, r3, #7
  4090d8:	2b00      	cmp	r3, #0
  4090da:	d003      	beq.n	4090e4 <xTaskGenericCreate+0x6c>
  4090dc:	4b46      	ldr	r3, [pc, #280]	; (4091f8 <xTaskGenericCreate+0x180>)
  4090de:	4798      	blx	r3
  4090e0:	bf00      	nop
  4090e2:	e7fd      	b.n	4090e0 <xTaskGenericCreate+0x68>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  4090e4:	88fb      	ldrh	r3, [r7, #6]
  4090e6:	9300      	str	r3, [sp, #0]
  4090e8:	69b8      	ldr	r0, [r7, #24]
  4090ea:	68b9      	ldr	r1, [r7, #8]
  4090ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4090ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4090f0:	4c43      	ldr	r4, [pc, #268]	; (409200 <xTaskGenericCreate+0x188>)
  4090f2:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4090f4:	6978      	ldr	r0, [r7, #20]
  4090f6:	68f9      	ldr	r1, [r7, #12]
  4090f8:	683a      	ldr	r2, [r7, #0]
  4090fa:	4b42      	ldr	r3, [pc, #264]	; (409204 <xTaskGenericCreate+0x18c>)
  4090fc:	4798      	blx	r3
  4090fe:	4602      	mov	r2, r0
  409100:	69bb      	ldr	r3, [r7, #24]
  409102:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  409104:	69bb      	ldr	r3, [r7, #24]
  409106:	681b      	ldr	r3, [r3, #0]
  409108:	f003 0307 	and.w	r3, r3, #7
  40910c:	2b00      	cmp	r3, #0
  40910e:	d003      	beq.n	409118 <xTaskGenericCreate+0xa0>
  409110:	4b39      	ldr	r3, [pc, #228]	; (4091f8 <xTaskGenericCreate+0x180>)
  409112:	4798      	blx	r3
  409114:	bf00      	nop
  409116:	e7fd      	b.n	409114 <xTaskGenericCreate+0x9c>

		if( ( void * ) pxCreatedTask != NULL )
  409118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40911a:	2b00      	cmp	r3, #0
  40911c:	d002      	beq.n	409124 <xTaskGenericCreate+0xac>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  40911e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  409120:	69ba      	ldr	r2, [r7, #24]
  409122:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  409124:	4b38      	ldr	r3, [pc, #224]	; (409208 <xTaskGenericCreate+0x190>)
  409126:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  409128:	4b38      	ldr	r3, [pc, #224]	; (40920c <xTaskGenericCreate+0x194>)
  40912a:	681b      	ldr	r3, [r3, #0]
  40912c:	1c5a      	adds	r2, r3, #1
  40912e:	4b37      	ldr	r3, [pc, #220]	; (40920c <xTaskGenericCreate+0x194>)
  409130:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
  409132:	4b37      	ldr	r3, [pc, #220]	; (409210 <xTaskGenericCreate+0x198>)
  409134:	681b      	ldr	r3, [r3, #0]
  409136:	2b00      	cmp	r3, #0
  409138:	d109      	bne.n	40914e <xTaskGenericCreate+0xd6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  40913a:	4b35      	ldr	r3, [pc, #212]	; (409210 <xTaskGenericCreate+0x198>)
  40913c:	69ba      	ldr	r2, [r7, #24]
  40913e:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  409140:	4b32      	ldr	r3, [pc, #200]	; (40920c <xTaskGenericCreate+0x194>)
  409142:	681b      	ldr	r3, [r3, #0]
  409144:	2b01      	cmp	r3, #1
  409146:	d10f      	bne.n	409168 <xTaskGenericCreate+0xf0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  409148:	4b32      	ldr	r3, [pc, #200]	; (409214 <xTaskGenericCreate+0x19c>)
  40914a:	4798      	blx	r3
  40914c:	e00c      	b.n	409168 <xTaskGenericCreate+0xf0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40914e:	4b32      	ldr	r3, [pc, #200]	; (409218 <xTaskGenericCreate+0x1a0>)
  409150:	681b      	ldr	r3, [r3, #0]
  409152:	2b00      	cmp	r3, #0
  409154:	d108      	bne.n	409168 <xTaskGenericCreate+0xf0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  409156:	4b2e      	ldr	r3, [pc, #184]	; (409210 <xTaskGenericCreate+0x198>)
  409158:	681b      	ldr	r3, [r3, #0]
  40915a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40915e:	429a      	cmp	r2, r3
  409160:	d802      	bhi.n	409168 <xTaskGenericCreate+0xf0>
					{
						pxCurrentTCB = pxNewTCB;
  409162:	4b2b      	ldr	r3, [pc, #172]	; (409210 <xTaskGenericCreate+0x198>)
  409164:	69ba      	ldr	r2, [r7, #24]
  409166:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  409168:	69bb      	ldr	r3, [r7, #24]
  40916a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40916c:	4b2b      	ldr	r3, [pc, #172]	; (40921c <xTaskGenericCreate+0x1a4>)
  40916e:	681b      	ldr	r3, [r3, #0]
  409170:	429a      	cmp	r2, r3
  409172:	d903      	bls.n	40917c <xTaskGenericCreate+0x104>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  409174:	69bb      	ldr	r3, [r7, #24]
  409176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409178:	4b28      	ldr	r3, [pc, #160]	; (40921c <xTaskGenericCreate+0x1a4>)
  40917a:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40917c:	4b28      	ldr	r3, [pc, #160]	; (409220 <xTaskGenericCreate+0x1a8>)
  40917e:	681a      	ldr	r2, [r3, #0]
  409180:	69bb      	ldr	r3, [r7, #24]
  409182:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  409184:	4b26      	ldr	r3, [pc, #152]	; (409220 <xTaskGenericCreate+0x1a8>)
  409186:	681b      	ldr	r3, [r3, #0]
  409188:	1c5a      	adds	r2, r3, #1
  40918a:	4b25      	ldr	r3, [pc, #148]	; (409220 <xTaskGenericCreate+0x1a8>)
  40918c:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  40918e:	69bb      	ldr	r3, [r7, #24]
  409190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409192:	4b24      	ldr	r3, [pc, #144]	; (409224 <xTaskGenericCreate+0x1ac>)
  409194:	681b      	ldr	r3, [r3, #0]
  409196:	429a      	cmp	r2, r3
  409198:	d903      	bls.n	4091a2 <xTaskGenericCreate+0x12a>
  40919a:	69bb      	ldr	r3, [r7, #24]
  40919c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40919e:	4b21      	ldr	r3, [pc, #132]	; (409224 <xTaskGenericCreate+0x1ac>)
  4091a0:	601a      	str	r2, [r3, #0]
  4091a2:	69bb      	ldr	r3, [r7, #24]
  4091a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4091a6:	4613      	mov	r3, r2
  4091a8:	009b      	lsls	r3, r3, #2
  4091aa:	4413      	add	r3, r2
  4091ac:	009b      	lsls	r3, r3, #2
  4091ae:	4a1e      	ldr	r2, [pc, #120]	; (409228 <xTaskGenericCreate+0x1b0>)
  4091b0:	441a      	add	r2, r3
  4091b2:	69bb      	ldr	r3, [r7, #24]
  4091b4:	3304      	adds	r3, #4
  4091b6:	4610      	mov	r0, r2
  4091b8:	4619      	mov	r1, r3
  4091ba:	4b1c      	ldr	r3, [pc, #112]	; (40922c <xTaskGenericCreate+0x1b4>)
  4091bc:	4798      	blx	r3

			xReturn = pdPASS;
  4091be:	2301      	movs	r3, #1
  4091c0:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  4091c2:	4b1b      	ldr	r3, [pc, #108]	; (409230 <xTaskGenericCreate+0x1b8>)
  4091c4:	4798      	blx	r3
  4091c6:	e002      	b.n	4091ce <xTaskGenericCreate+0x156>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4091c8:	f04f 33ff 	mov.w	r3, #4294967295
  4091cc:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  4091ce:	69fb      	ldr	r3, [r7, #28]
  4091d0:	2b01      	cmp	r3, #1
  4091d2:	d10b      	bne.n	4091ec <xTaskGenericCreate+0x174>
	{
		if( xSchedulerRunning != pdFALSE )
  4091d4:	4b10      	ldr	r3, [pc, #64]	; (409218 <xTaskGenericCreate+0x1a0>)
  4091d6:	681b      	ldr	r3, [r3, #0]
  4091d8:	2b00      	cmp	r3, #0
  4091da:	d007      	beq.n	4091ec <xTaskGenericCreate+0x174>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  4091dc:	4b0c      	ldr	r3, [pc, #48]	; (409210 <xTaskGenericCreate+0x198>)
  4091de:	681b      	ldr	r3, [r3, #0]
  4091e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4091e4:	429a      	cmp	r2, r3
  4091e6:	d201      	bcs.n	4091ec <xTaskGenericCreate+0x174>
			{
				portYIELD_WITHIN_API();
  4091e8:	4b12      	ldr	r3, [pc, #72]	; (409234 <xTaskGenericCreate+0x1bc>)
  4091ea:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  4091ec:	69fb      	ldr	r3, [r7, #28]
}
  4091ee:	4618      	mov	r0, r3
  4091f0:	3724      	adds	r7, #36	; 0x24
  4091f2:	46bd      	mov	sp, r7
  4091f4:	bd90      	pop	{r4, r7, pc}
  4091f6:	bf00      	nop
  4091f8:	00408501 	.word	0x00408501
  4091fc:	00409b59 	.word	0x00409b59
  409200:	00409969 	.word	0x00409969
  409204:	004083dd 	.word	0x004083dd
  409208:	004084bd 	.word	0x004084bd
  40920c:	20008834 	.word	0x20008834
  409210:	20008694 	.word	0x20008694
  409214:	004099dd 	.word	0x004099dd
  409218:	20008844 	.word	0x20008844
  40921c:	2000883c 	.word	0x2000883c
  409220:	20008858 	.word	0x20008858
  409224:	20008840 	.word	0x20008840
  409228:	20008698 	.word	0x20008698
  40922c:	00408221 	.word	0x00408221
  409230:	004084d9 	.word	0x004084d9
  409234:	004084a5 	.word	0x004084a5

00409238 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  409238:	b580      	push	{r7, lr}
  40923a:	b084      	sub	sp, #16
  40923c:	af00      	add	r7, sp, #0
  40923e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  409240:	2300      	movs	r3, #0
  409242:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  409244:	687b      	ldr	r3, [r7, #4]
  409246:	2b00      	cmp	r3, #0
  409248:	d012      	beq.n	409270 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  40924a:	4b0d      	ldr	r3, [pc, #52]	; (409280 <vTaskDelay+0x48>)
  40924c:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  40924e:	4b0d      	ldr	r3, [pc, #52]	; (409284 <vTaskDelay+0x4c>)
  409250:	681a      	ldr	r2, [r3, #0]
  409252:	687b      	ldr	r3, [r7, #4]
  409254:	4413      	add	r3, r2
  409256:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  409258:	4b0b      	ldr	r3, [pc, #44]	; (409288 <vTaskDelay+0x50>)
  40925a:	681b      	ldr	r3, [r3, #0]
  40925c:	3304      	adds	r3, #4
  40925e:	4618      	mov	r0, r3
  409260:	4b0a      	ldr	r3, [pc, #40]	; (40928c <vTaskDelay+0x54>)
  409262:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  409264:	68b8      	ldr	r0, [r7, #8]
  409266:	4b0a      	ldr	r3, [pc, #40]	; (409290 <vTaskDelay+0x58>)
  409268:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  40926a:	4b0a      	ldr	r3, [pc, #40]	; (409294 <vTaskDelay+0x5c>)
  40926c:	4798      	blx	r3
  40926e:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  409270:	68fb      	ldr	r3, [r7, #12]
  409272:	2b00      	cmp	r3, #0
  409274:	d101      	bne.n	40927a <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  409276:	4b08      	ldr	r3, [pc, #32]	; (409298 <vTaskDelay+0x60>)
  409278:	4798      	blx	r3
		}
	}
  40927a:	3710      	adds	r7, #16
  40927c:	46bd      	mov	sp, r7
  40927e:	bd80      	pop	{r7, pc}
  409280:	0040931d 	.word	0x0040931d
  409284:	20008838 	.word	0x20008838
  409288:	20008694 	.word	0x20008694
  40928c:	004082e1 	.word	0x004082e1
  409290:	00409ae9 	.word	0x00409ae9
  409294:	00409339 	.word	0x00409339
  409298:	004084a5 	.word	0x004084a5

0040929c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  40929c:	b590      	push	{r4, r7, lr}
  40929e:	b087      	sub	sp, #28
  4092a0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  4092a2:	2300      	movs	r3, #0
  4092a4:	9300      	str	r3, [sp, #0]
  4092a6:	2300      	movs	r3, #0
  4092a8:	9301      	str	r3, [sp, #4]
  4092aa:	2300      	movs	r3, #0
  4092ac:	9302      	str	r3, [sp, #8]
  4092ae:	2300      	movs	r3, #0
  4092b0:	9303      	str	r3, [sp, #12]
  4092b2:	4812      	ldr	r0, [pc, #72]	; (4092fc <vTaskStartScheduler+0x60>)
  4092b4:	4912      	ldr	r1, [pc, #72]	; (409300 <vTaskStartScheduler+0x64>)
  4092b6:	2282      	movs	r2, #130	; 0x82
  4092b8:	2300      	movs	r3, #0
  4092ba:	4c12      	ldr	r4, [pc, #72]	; (409304 <vTaskStartScheduler+0x68>)
  4092bc:	47a0      	blx	r4
  4092be:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4092c0:	687b      	ldr	r3, [r7, #4]
  4092c2:	2b01      	cmp	r3, #1
  4092c4:	d102      	bne.n	4092cc <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  4092c6:	4b10      	ldr	r3, [pc, #64]	; (409308 <vTaskStartScheduler+0x6c>)
  4092c8:	4798      	blx	r3
  4092ca:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  4092cc:	687b      	ldr	r3, [r7, #4]
  4092ce:	2b01      	cmp	r3, #1
  4092d0:	d109      	bne.n	4092e6 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  4092d2:	4b0e      	ldr	r3, [pc, #56]	; (40930c <vTaskStartScheduler+0x70>)
  4092d4:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  4092d6:	4b0e      	ldr	r3, [pc, #56]	; (409310 <vTaskStartScheduler+0x74>)
  4092d8:	2201      	movs	r2, #1
  4092da:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  4092dc:	4b0d      	ldr	r3, [pc, #52]	; (409314 <vTaskStartScheduler+0x78>)
  4092de:	2200      	movs	r2, #0
  4092e0:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  4092e2:	4b0d      	ldr	r3, [pc, #52]	; (409318 <vTaskStartScheduler+0x7c>)
  4092e4:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  4092e6:	687b      	ldr	r3, [r7, #4]
  4092e8:	2b00      	cmp	r3, #0
  4092ea:	d103      	bne.n	4092f4 <vTaskStartScheduler+0x58>
  4092ec:	4b07      	ldr	r3, [pc, #28]	; (40930c <vTaskStartScheduler+0x70>)
  4092ee:	4798      	blx	r3
  4092f0:	bf00      	nop
  4092f2:	e7fd      	b.n	4092f0 <vTaskStartScheduler+0x54>
}
  4092f4:	370c      	adds	r7, #12
  4092f6:	46bd      	mov	sp, r7
  4092f8:	bd90      	pop	{r4, r7, pc}
  4092fa:	bf00      	nop
  4092fc:	00409941 	.word	0x00409941
  409300:	00416118 	.word	0x00416118
  409304:	00409079 	.word	0x00409079
  409308:	00409d7d 	.word	0x00409d7d
  40930c:	00408501 	.word	0x00408501
  409310:	20008844 	.word	0x20008844
  409314:	20008838 	.word	0x20008838
  409318:	00408465 	.word	0x00408465

0040931c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  40931c:	b480      	push	{r7}
  40931e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  409320:	4b04      	ldr	r3, [pc, #16]	; (409334 <vTaskSuspendAll+0x18>)
  409322:	681b      	ldr	r3, [r3, #0]
  409324:	1c5a      	adds	r2, r3, #1
  409326:	4b03      	ldr	r3, [pc, #12]	; (409334 <vTaskSuspendAll+0x18>)
  409328:	601a      	str	r2, [r3, #0]
}
  40932a:	46bd      	mov	sp, r7
  40932c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409330:	4770      	bx	lr
  409332:	bf00      	nop
  409334:	20008848 	.word	0x20008848

00409338 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  409338:	b590      	push	{r4, r7, lr}
  40933a:	b083      	sub	sp, #12
  40933c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40933e:	2300      	movs	r3, #0
  409340:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  409342:	4b36      	ldr	r3, [pc, #216]	; (40941c <xTaskResumeAll+0xe4>)
  409344:	681b      	ldr	r3, [r3, #0]
  409346:	2b00      	cmp	r3, #0
  409348:	d103      	bne.n	409352 <xTaskResumeAll+0x1a>
  40934a:	4b35      	ldr	r3, [pc, #212]	; (409420 <xTaskResumeAll+0xe8>)
  40934c:	4798      	blx	r3
  40934e:	bf00      	nop
  409350:	e7fd      	b.n	40934e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  409352:	4b34      	ldr	r3, [pc, #208]	; (409424 <xTaskResumeAll+0xec>)
  409354:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  409356:	4b31      	ldr	r3, [pc, #196]	; (40941c <xTaskResumeAll+0xe4>)
  409358:	681b      	ldr	r3, [r3, #0]
  40935a:	1e5a      	subs	r2, r3, #1
  40935c:	4b2f      	ldr	r3, [pc, #188]	; (40941c <xTaskResumeAll+0xe4>)
  40935e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  409360:	4b2e      	ldr	r3, [pc, #184]	; (40941c <xTaskResumeAll+0xe4>)
  409362:	681b      	ldr	r3, [r3, #0]
  409364:	2b00      	cmp	r3, #0
  409366:	d152      	bne.n	40940e <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  409368:	4b2f      	ldr	r3, [pc, #188]	; (409428 <xTaskResumeAll+0xf0>)
  40936a:	681b      	ldr	r3, [r3, #0]
  40936c:	2b00      	cmp	r3, #0
  40936e:	d04e      	beq.n	40940e <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  409370:	2300      	movs	r3, #0
  409372:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  409374:	e027      	b.n	4093c6 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  409376:	4b2d      	ldr	r3, [pc, #180]	; (40942c <xTaskResumeAll+0xf4>)
  409378:	68db      	ldr	r3, [r3, #12]
  40937a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  40937c:	f104 0318 	add.w	r3, r4, #24
  409380:	4618      	mov	r0, r3
  409382:	4b2b      	ldr	r3, [pc, #172]	; (409430 <xTaskResumeAll+0xf8>)
  409384:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  409386:	1d23      	adds	r3, r4, #4
  409388:	4618      	mov	r0, r3
  40938a:	4b29      	ldr	r3, [pc, #164]	; (409430 <xTaskResumeAll+0xf8>)
  40938c:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  40938e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  409390:	4b28      	ldr	r3, [pc, #160]	; (409434 <xTaskResumeAll+0xfc>)
  409392:	681b      	ldr	r3, [r3, #0]
  409394:	429a      	cmp	r2, r3
  409396:	d902      	bls.n	40939e <xTaskResumeAll+0x66>
  409398:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40939a:	4b26      	ldr	r3, [pc, #152]	; (409434 <xTaskResumeAll+0xfc>)
  40939c:	601a      	str	r2, [r3, #0]
  40939e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4093a0:	4613      	mov	r3, r2
  4093a2:	009b      	lsls	r3, r3, #2
  4093a4:	4413      	add	r3, r2
  4093a6:	009b      	lsls	r3, r3, #2
  4093a8:	4a23      	ldr	r2, [pc, #140]	; (409438 <xTaskResumeAll+0x100>)
  4093aa:	441a      	add	r2, r3
  4093ac:	1d23      	adds	r3, r4, #4
  4093ae:	4610      	mov	r0, r2
  4093b0:	4619      	mov	r1, r3
  4093b2:	4b22      	ldr	r3, [pc, #136]	; (40943c <xTaskResumeAll+0x104>)
  4093b4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4093b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4093b8:	4b21      	ldr	r3, [pc, #132]	; (409440 <xTaskResumeAll+0x108>)
  4093ba:	681b      	ldr	r3, [r3, #0]
  4093bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4093be:	429a      	cmp	r2, r3
  4093c0:	d301      	bcc.n	4093c6 <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  4093c2:	2301      	movs	r3, #1
  4093c4:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4093c6:	4b19      	ldr	r3, [pc, #100]	; (40942c <xTaskResumeAll+0xf4>)
  4093c8:	681b      	ldr	r3, [r3, #0]
  4093ca:	2b00      	cmp	r3, #0
  4093cc:	d1d3      	bne.n	409376 <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4093ce:	4b1d      	ldr	r3, [pc, #116]	; (409444 <xTaskResumeAll+0x10c>)
  4093d0:	681b      	ldr	r3, [r3, #0]
  4093d2:	2b00      	cmp	r3, #0
  4093d4:	d00d      	beq.n	4093f2 <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4093d6:	e006      	b.n	4093e6 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  4093d8:	4b1b      	ldr	r3, [pc, #108]	; (409448 <xTaskResumeAll+0x110>)
  4093da:	4798      	blx	r3
						--uxMissedTicks;
  4093dc:	4b19      	ldr	r3, [pc, #100]	; (409444 <xTaskResumeAll+0x10c>)
  4093de:	681b      	ldr	r3, [r3, #0]
  4093e0:	1e5a      	subs	r2, r3, #1
  4093e2:	4b18      	ldr	r3, [pc, #96]	; (409444 <xTaskResumeAll+0x10c>)
  4093e4:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4093e6:	4b17      	ldr	r3, [pc, #92]	; (409444 <xTaskResumeAll+0x10c>)
  4093e8:	681b      	ldr	r3, [r3, #0]
  4093ea:	2b00      	cmp	r3, #0
  4093ec:	d1f4      	bne.n	4093d8 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  4093ee:	2301      	movs	r3, #1
  4093f0:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  4093f2:	683b      	ldr	r3, [r7, #0]
  4093f4:	2b01      	cmp	r3, #1
  4093f6:	d003      	beq.n	409400 <xTaskResumeAll+0xc8>
  4093f8:	4b14      	ldr	r3, [pc, #80]	; (40944c <xTaskResumeAll+0x114>)
  4093fa:	681b      	ldr	r3, [r3, #0]
  4093fc:	2b01      	cmp	r3, #1
  4093fe:	d106      	bne.n	40940e <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  409400:	2301      	movs	r3, #1
  409402:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  409404:	4b11      	ldr	r3, [pc, #68]	; (40944c <xTaskResumeAll+0x114>)
  409406:	2200      	movs	r2, #0
  409408:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  40940a:	4b11      	ldr	r3, [pc, #68]	; (409450 <xTaskResumeAll+0x118>)
  40940c:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  40940e:	4b11      	ldr	r3, [pc, #68]	; (409454 <xTaskResumeAll+0x11c>)
  409410:	4798      	blx	r3

	return xAlreadyYielded;
  409412:	687b      	ldr	r3, [r7, #4]
}
  409414:	4618      	mov	r0, r3
  409416:	370c      	adds	r7, #12
  409418:	46bd      	mov	sp, r7
  40941a:	bd90      	pop	{r4, r7, pc}
  40941c:	20008848 	.word	0x20008848
  409420:	00408501 	.word	0x00408501
  409424:	004084bd 	.word	0x004084bd
  409428:	20008834 	.word	0x20008834
  40942c:	200087f4 	.word	0x200087f4
  409430:	004082e1 	.word	0x004082e1
  409434:	20008840 	.word	0x20008840
  409438:	20008698 	.word	0x20008698
  40943c:	00408221 	.word	0x00408221
  409440:	20008694 	.word	0x20008694
  409444:	2000884c 	.word	0x2000884c
  409448:	004094b5 	.word	0x004094b5
  40944c:	20008850 	.word	0x20008850
  409450:	004084a5 	.word	0x004084a5
  409454:	004084d9 	.word	0x004084d9

00409458 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  409458:	b580      	push	{r7, lr}
  40945a:	b082      	sub	sp, #8
  40945c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  40945e:	4b06      	ldr	r3, [pc, #24]	; (409478 <xTaskGetTickCount+0x20>)
  409460:	4798      	blx	r3
	{
		xTicks = xTickCount;
  409462:	4b06      	ldr	r3, [pc, #24]	; (40947c <xTaskGetTickCount+0x24>)
  409464:	681b      	ldr	r3, [r3, #0]
  409466:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  409468:	4b05      	ldr	r3, [pc, #20]	; (409480 <xTaskGetTickCount+0x28>)
  40946a:	4798      	blx	r3

	return xTicks;
  40946c:	687b      	ldr	r3, [r7, #4]
}
  40946e:	4618      	mov	r0, r3
  409470:	3708      	adds	r7, #8
  409472:	46bd      	mov	sp, r7
  409474:	bd80      	pop	{r7, pc}
  409476:	bf00      	nop
  409478:	004084bd 	.word	0x004084bd
  40947c:	20008838 	.word	0x20008838
  409480:	004084d9 	.word	0x004084d9

00409484 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
  409484:	b580      	push	{r7, lr}
  409486:	b082      	sub	sp, #8
  409488:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  40948a:	4b07      	ldr	r3, [pc, #28]	; (4094a8 <xTaskGetTickCountFromISR+0x24>)
  40948c:	4798      	blx	r3
  40948e:	6078      	str	r0, [r7, #4]
	xReturn = xTickCount;
  409490:	4b06      	ldr	r3, [pc, #24]	; (4094ac <xTaskGetTickCountFromISR+0x28>)
  409492:	681b      	ldr	r3, [r3, #0]
  409494:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  409496:	6878      	ldr	r0, [r7, #4]
  409498:	4b05      	ldr	r3, [pc, #20]	; (4094b0 <xTaskGetTickCountFromISR+0x2c>)
  40949a:	4798      	blx	r3

	return xReturn;
  40949c:	683b      	ldr	r3, [r7, #0]
}
  40949e:	4618      	mov	r0, r3
  4094a0:	3708      	adds	r7, #8
  4094a2:	46bd      	mov	sp, r7
  4094a4:	bd80      	pop	{r7, pc}
  4094a6:	bf00      	nop
  4094a8:	00408501 	.word	0x00408501
  4094ac:	20008838 	.word	0x20008838
  4094b0:	00408515 	.word	0x00408515

004094b4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  4094b4:	b580      	push	{r7, lr}
  4094b6:	b084      	sub	sp, #16
  4094b8:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4094ba:	4b44      	ldr	r3, [pc, #272]	; (4095cc <vTaskIncrementTick+0x118>)
  4094bc:	681b      	ldr	r3, [r3, #0]
  4094be:	2b00      	cmp	r3, #0
  4094c0:	d17c      	bne.n	4095bc <vTaskIncrementTick+0x108>
	{
		++xTickCount;
  4094c2:	4b43      	ldr	r3, [pc, #268]	; (4095d0 <vTaskIncrementTick+0x11c>)
  4094c4:	681b      	ldr	r3, [r3, #0]
  4094c6:	1c5a      	adds	r2, r3, #1
  4094c8:	4b41      	ldr	r3, [pc, #260]	; (4095d0 <vTaskIncrementTick+0x11c>)
  4094ca:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  4094cc:	4b40      	ldr	r3, [pc, #256]	; (4095d0 <vTaskIncrementTick+0x11c>)
  4094ce:	681b      	ldr	r3, [r3, #0]
  4094d0:	2b00      	cmp	r3, #0
  4094d2:	d12a      	bne.n	40952a <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  4094d4:	4b3f      	ldr	r3, [pc, #252]	; (4095d4 <vTaskIncrementTick+0x120>)
  4094d6:	681b      	ldr	r3, [r3, #0]
  4094d8:	681b      	ldr	r3, [r3, #0]
  4094da:	2b00      	cmp	r3, #0
  4094dc:	d003      	beq.n	4094e6 <vTaskIncrementTick+0x32>
  4094de:	4b3e      	ldr	r3, [pc, #248]	; (4095d8 <vTaskIncrementTick+0x124>)
  4094e0:	4798      	blx	r3
  4094e2:	bf00      	nop
  4094e4:	e7fd      	b.n	4094e2 <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  4094e6:	4b3b      	ldr	r3, [pc, #236]	; (4095d4 <vTaskIncrementTick+0x120>)
  4094e8:	681b      	ldr	r3, [r3, #0]
  4094ea:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4094ec:	4b3b      	ldr	r3, [pc, #236]	; (4095dc <vTaskIncrementTick+0x128>)
  4094ee:	681a      	ldr	r2, [r3, #0]
  4094f0:	4b38      	ldr	r3, [pc, #224]	; (4095d4 <vTaskIncrementTick+0x120>)
  4094f2:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  4094f4:	4b39      	ldr	r3, [pc, #228]	; (4095dc <vTaskIncrementTick+0x128>)
  4094f6:	68fa      	ldr	r2, [r7, #12]
  4094f8:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
  4094fa:	4b39      	ldr	r3, [pc, #228]	; (4095e0 <vTaskIncrementTick+0x12c>)
  4094fc:	681b      	ldr	r3, [r3, #0]
  4094fe:	1c5a      	adds	r2, r3, #1
  409500:	4b37      	ldr	r3, [pc, #220]	; (4095e0 <vTaskIncrementTick+0x12c>)
  409502:	601a      	str	r2, [r3, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  409504:	4b33      	ldr	r3, [pc, #204]	; (4095d4 <vTaskIncrementTick+0x120>)
  409506:	681b      	ldr	r3, [r3, #0]
  409508:	681b      	ldr	r3, [r3, #0]
  40950a:	2b00      	cmp	r3, #0
  40950c:	d104      	bne.n	409518 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  40950e:	4b35      	ldr	r3, [pc, #212]	; (4095e4 <vTaskIncrementTick+0x130>)
  409510:	f04f 32ff 	mov.w	r2, #4294967295
  409514:	601a      	str	r2, [r3, #0]
  409516:	e008      	b.n	40952a <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  409518:	4b2e      	ldr	r3, [pc, #184]	; (4095d4 <vTaskIncrementTick+0x120>)
  40951a:	681b      	ldr	r3, [r3, #0]
  40951c:	68db      	ldr	r3, [r3, #12]
  40951e:	68db      	ldr	r3, [r3, #12]
  409520:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  409522:	68bb      	ldr	r3, [r7, #8]
  409524:	685a      	ldr	r2, [r3, #4]
  409526:	4b2f      	ldr	r3, [pc, #188]	; (4095e4 <vTaskIncrementTick+0x130>)
  409528:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  40952a:	4b29      	ldr	r3, [pc, #164]	; (4095d0 <vTaskIncrementTick+0x11c>)
  40952c:	681a      	ldr	r2, [r3, #0]
  40952e:	4b2d      	ldr	r3, [pc, #180]	; (4095e4 <vTaskIncrementTick+0x130>)
  409530:	681b      	ldr	r3, [r3, #0]
  409532:	429a      	cmp	r2, r3
  409534:	d341      	bcc.n	4095ba <vTaskIncrementTick+0x106>
  409536:	4b27      	ldr	r3, [pc, #156]	; (4095d4 <vTaskIncrementTick+0x120>)
  409538:	681b      	ldr	r3, [r3, #0]
  40953a:	681b      	ldr	r3, [r3, #0]
  40953c:	2b00      	cmp	r3, #0
  40953e:	d104      	bne.n	40954a <vTaskIncrementTick+0x96>
  409540:	4b28      	ldr	r3, [pc, #160]	; (4095e4 <vTaskIncrementTick+0x130>)
  409542:	f04f 32ff 	mov.w	r2, #4294967295
  409546:	601a      	str	r2, [r3, #0]
  409548:	e037      	b.n	4095ba <vTaskIncrementTick+0x106>
  40954a:	4b22      	ldr	r3, [pc, #136]	; (4095d4 <vTaskIncrementTick+0x120>)
  40954c:	681b      	ldr	r3, [r3, #0]
  40954e:	68db      	ldr	r3, [r3, #12]
  409550:	68db      	ldr	r3, [r3, #12]
  409552:	60bb      	str	r3, [r7, #8]
  409554:	68bb      	ldr	r3, [r7, #8]
  409556:	685b      	ldr	r3, [r3, #4]
  409558:	607b      	str	r3, [r7, #4]
  40955a:	4b1d      	ldr	r3, [pc, #116]	; (4095d0 <vTaskIncrementTick+0x11c>)
  40955c:	681a      	ldr	r2, [r3, #0]
  40955e:	687b      	ldr	r3, [r7, #4]
  409560:	429a      	cmp	r2, r3
  409562:	d203      	bcs.n	40956c <vTaskIncrementTick+0xb8>
  409564:	4b1f      	ldr	r3, [pc, #124]	; (4095e4 <vTaskIncrementTick+0x130>)
  409566:	687a      	ldr	r2, [r7, #4]
  409568:	601a      	str	r2, [r3, #0]
  40956a:	e026      	b.n	4095ba <vTaskIncrementTick+0x106>
  40956c:	68bb      	ldr	r3, [r7, #8]
  40956e:	3304      	adds	r3, #4
  409570:	4618      	mov	r0, r3
  409572:	4b1d      	ldr	r3, [pc, #116]	; (4095e8 <vTaskIncrementTick+0x134>)
  409574:	4798      	blx	r3
  409576:	68bb      	ldr	r3, [r7, #8]
  409578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40957a:	2b00      	cmp	r3, #0
  40957c:	d004      	beq.n	409588 <vTaskIncrementTick+0xd4>
  40957e:	68bb      	ldr	r3, [r7, #8]
  409580:	3318      	adds	r3, #24
  409582:	4618      	mov	r0, r3
  409584:	4b18      	ldr	r3, [pc, #96]	; (4095e8 <vTaskIncrementTick+0x134>)
  409586:	4798      	blx	r3
  409588:	68bb      	ldr	r3, [r7, #8]
  40958a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40958c:	4b17      	ldr	r3, [pc, #92]	; (4095ec <vTaskIncrementTick+0x138>)
  40958e:	681b      	ldr	r3, [r3, #0]
  409590:	429a      	cmp	r2, r3
  409592:	d903      	bls.n	40959c <vTaskIncrementTick+0xe8>
  409594:	68bb      	ldr	r3, [r7, #8]
  409596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409598:	4b14      	ldr	r3, [pc, #80]	; (4095ec <vTaskIncrementTick+0x138>)
  40959a:	601a      	str	r2, [r3, #0]
  40959c:	68bb      	ldr	r3, [r7, #8]
  40959e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4095a0:	4613      	mov	r3, r2
  4095a2:	009b      	lsls	r3, r3, #2
  4095a4:	4413      	add	r3, r2
  4095a6:	009b      	lsls	r3, r3, #2
  4095a8:	4a11      	ldr	r2, [pc, #68]	; (4095f0 <vTaskIncrementTick+0x13c>)
  4095aa:	441a      	add	r2, r3
  4095ac:	68bb      	ldr	r3, [r7, #8]
  4095ae:	3304      	adds	r3, #4
  4095b0:	4610      	mov	r0, r2
  4095b2:	4619      	mov	r1, r3
  4095b4:	4b0f      	ldr	r3, [pc, #60]	; (4095f4 <vTaskIncrementTick+0x140>)
  4095b6:	4798      	blx	r3
  4095b8:	e7bd      	b.n	409536 <vTaskIncrementTick+0x82>
  4095ba:	e004      	b.n	4095c6 <vTaskIncrementTick+0x112>
	}
	else
	{
		++uxMissedTicks;
  4095bc:	4b0e      	ldr	r3, [pc, #56]	; (4095f8 <vTaskIncrementTick+0x144>)
  4095be:	681b      	ldr	r3, [r3, #0]
  4095c0:	1c5a      	adds	r2, r3, #1
  4095c2:	4b0d      	ldr	r3, [pc, #52]	; (4095f8 <vTaskIncrementTick+0x144>)
  4095c4:	601a      	str	r2, [r3, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  4095c6:	3710      	adds	r7, #16
  4095c8:	46bd      	mov	sp, r7
  4095ca:	bd80      	pop	{r7, pc}
  4095cc:	20008848 	.word	0x20008848
  4095d0:	20008838 	.word	0x20008838
  4095d4:	200087ec 	.word	0x200087ec
  4095d8:	00408501 	.word	0x00408501
  4095dc:	200087f0 	.word	0x200087f0
  4095e0:	20008854 	.word	0x20008854
  4095e4:	20000360 	.word	0x20000360
  4095e8:	004082e1 	.word	0x004082e1
  4095ec:	20008840 	.word	0x20008840
  4095f0:	20008698 	.word	0x20008698
  4095f4:	00408221 	.word	0x00408221
  4095f8:	2000884c 	.word	0x2000884c

004095fc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  4095fc:	b580      	push	{r7, lr}
  4095fe:	b082      	sub	sp, #8
  409600:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  409602:	4b21      	ldr	r3, [pc, #132]	; (409688 <vTaskSwitchContext+0x8c>)
  409604:	681b      	ldr	r3, [r3, #0]
  409606:	2b00      	cmp	r3, #0
  409608:	d003      	beq.n	409612 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  40960a:	4b20      	ldr	r3, [pc, #128]	; (40968c <vTaskSwitchContext+0x90>)
  40960c:	2201      	movs	r2, #1
  40960e:	601a      	str	r2, [r3, #0]
  409610:	e036      	b.n	409680 <vTaskSwitchContext+0x84>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  409612:	e00c      	b.n	40962e <vTaskSwitchContext+0x32>
  409614:	4b1e      	ldr	r3, [pc, #120]	; (409690 <vTaskSwitchContext+0x94>)
  409616:	681b      	ldr	r3, [r3, #0]
  409618:	2b00      	cmp	r3, #0
  40961a:	d103      	bne.n	409624 <vTaskSwitchContext+0x28>
  40961c:	4b1d      	ldr	r3, [pc, #116]	; (409694 <vTaskSwitchContext+0x98>)
  40961e:	4798      	blx	r3
  409620:	bf00      	nop
  409622:	e7fd      	b.n	409620 <vTaskSwitchContext+0x24>
  409624:	4b1a      	ldr	r3, [pc, #104]	; (409690 <vTaskSwitchContext+0x94>)
  409626:	681b      	ldr	r3, [r3, #0]
  409628:	1e5a      	subs	r2, r3, #1
  40962a:	4b19      	ldr	r3, [pc, #100]	; (409690 <vTaskSwitchContext+0x94>)
  40962c:	601a      	str	r2, [r3, #0]
  40962e:	4b18      	ldr	r3, [pc, #96]	; (409690 <vTaskSwitchContext+0x94>)
  409630:	681a      	ldr	r2, [r3, #0]
  409632:	4919      	ldr	r1, [pc, #100]	; (409698 <vTaskSwitchContext+0x9c>)
  409634:	4613      	mov	r3, r2
  409636:	009b      	lsls	r3, r3, #2
  409638:	4413      	add	r3, r2
  40963a:	009b      	lsls	r3, r3, #2
  40963c:	440b      	add	r3, r1
  40963e:	681b      	ldr	r3, [r3, #0]
  409640:	2b00      	cmp	r3, #0
  409642:	d0e7      	beq.n	409614 <vTaskSwitchContext+0x18>
  409644:	4b12      	ldr	r3, [pc, #72]	; (409690 <vTaskSwitchContext+0x94>)
  409646:	681a      	ldr	r2, [r3, #0]
  409648:	4613      	mov	r3, r2
  40964a:	009b      	lsls	r3, r3, #2
  40964c:	4413      	add	r3, r2
  40964e:	009b      	lsls	r3, r3, #2
  409650:	4a11      	ldr	r2, [pc, #68]	; (409698 <vTaskSwitchContext+0x9c>)
  409652:	4413      	add	r3, r2
  409654:	607b      	str	r3, [r7, #4]
  409656:	687b      	ldr	r3, [r7, #4]
  409658:	685b      	ldr	r3, [r3, #4]
  40965a:	685a      	ldr	r2, [r3, #4]
  40965c:	687b      	ldr	r3, [r7, #4]
  40965e:	605a      	str	r2, [r3, #4]
  409660:	687b      	ldr	r3, [r7, #4]
  409662:	685a      	ldr	r2, [r3, #4]
  409664:	687b      	ldr	r3, [r7, #4]
  409666:	3308      	adds	r3, #8
  409668:	429a      	cmp	r2, r3
  40966a:	d104      	bne.n	409676 <vTaskSwitchContext+0x7a>
  40966c:	687b      	ldr	r3, [r7, #4]
  40966e:	685b      	ldr	r3, [r3, #4]
  409670:	685a      	ldr	r2, [r3, #4]
  409672:	687b      	ldr	r3, [r7, #4]
  409674:	605a      	str	r2, [r3, #4]
  409676:	687b      	ldr	r3, [r7, #4]
  409678:	685b      	ldr	r3, [r3, #4]
  40967a:	68da      	ldr	r2, [r3, #12]
  40967c:	4b07      	ldr	r3, [pc, #28]	; (40969c <vTaskSwitchContext+0xa0>)
  40967e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
  409680:	3708      	adds	r7, #8
  409682:	46bd      	mov	sp, r7
  409684:	bd80      	pop	{r7, pc}
  409686:	bf00      	nop
  409688:	20008848 	.word	0x20008848
  40968c:	20008850 	.word	0x20008850
  409690:	20008840 	.word	0x20008840
  409694:	00408501 	.word	0x00408501
  409698:	20008698 	.word	0x20008698
  40969c:	20008694 	.word	0x20008694

004096a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  4096a0:	b580      	push	{r7, lr}
  4096a2:	b084      	sub	sp, #16
  4096a4:	af00      	add	r7, sp, #0
  4096a6:	6078      	str	r0, [r7, #4]
  4096a8:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  4096aa:	687b      	ldr	r3, [r7, #4]
  4096ac:	2b00      	cmp	r3, #0
  4096ae:	d103      	bne.n	4096b8 <vTaskPlaceOnEventList+0x18>
  4096b0:	4b13      	ldr	r3, [pc, #76]	; (409700 <vTaskPlaceOnEventList+0x60>)
  4096b2:	4798      	blx	r3
  4096b4:	bf00      	nop
  4096b6:	e7fd      	b.n	4096b4 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4096b8:	4b12      	ldr	r3, [pc, #72]	; (409704 <vTaskPlaceOnEventList+0x64>)
  4096ba:	681b      	ldr	r3, [r3, #0]
  4096bc:	3318      	adds	r3, #24
  4096be:	6878      	ldr	r0, [r7, #4]
  4096c0:	4619      	mov	r1, r3
  4096c2:	4b11      	ldr	r3, [pc, #68]	; (409708 <vTaskPlaceOnEventList+0x68>)
  4096c4:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4096c6:	4b0f      	ldr	r3, [pc, #60]	; (409704 <vTaskPlaceOnEventList+0x64>)
  4096c8:	681b      	ldr	r3, [r3, #0]
  4096ca:	3304      	adds	r3, #4
  4096cc:	4618      	mov	r0, r3
  4096ce:	4b0f      	ldr	r3, [pc, #60]	; (40970c <vTaskPlaceOnEventList+0x6c>)
  4096d0:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  4096d2:	683b      	ldr	r3, [r7, #0]
  4096d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4096d8:	d107      	bne.n	4096ea <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4096da:	4b0a      	ldr	r3, [pc, #40]	; (409704 <vTaskPlaceOnEventList+0x64>)
  4096dc:	681b      	ldr	r3, [r3, #0]
  4096de:	3304      	adds	r3, #4
  4096e0:	480b      	ldr	r0, [pc, #44]	; (409710 <vTaskPlaceOnEventList+0x70>)
  4096e2:	4619      	mov	r1, r3
  4096e4:	4b0b      	ldr	r3, [pc, #44]	; (409714 <vTaskPlaceOnEventList+0x74>)
  4096e6:	4798      	blx	r3
  4096e8:	e007      	b.n	4096fa <vTaskPlaceOnEventList+0x5a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  4096ea:	4b0b      	ldr	r3, [pc, #44]	; (409718 <vTaskPlaceOnEventList+0x78>)
  4096ec:	681a      	ldr	r2, [r3, #0]
  4096ee:	683b      	ldr	r3, [r7, #0]
  4096f0:	4413      	add	r3, r2
  4096f2:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4096f4:	68f8      	ldr	r0, [r7, #12]
  4096f6:	4b09      	ldr	r3, [pc, #36]	; (40971c <vTaskPlaceOnEventList+0x7c>)
  4096f8:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  4096fa:	3710      	adds	r7, #16
  4096fc:	46bd      	mov	sp, r7
  4096fe:	bd80      	pop	{r7, pc}
  409700:	00408501 	.word	0x00408501
  409704:	20008694 	.word	0x20008694
  409708:	00408271 	.word	0x00408271
  40970c:	004082e1 	.word	0x004082e1
  409710:	20008820 	.word	0x20008820
  409714:	00408221 	.word	0x00408221
  409718:	20008838 	.word	0x20008838
  40971c:	00409ae9 	.word	0x00409ae9

00409720 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  409720:	b580      	push	{r7, lr}
  409722:	b084      	sub	sp, #16
  409724:	af00      	add	r7, sp, #0
  409726:	6078      	str	r0, [r7, #4]
  409728:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  40972a:	687b      	ldr	r3, [r7, #4]
  40972c:	2b00      	cmp	r3, #0
  40972e:	d103      	bne.n	409738 <vTaskPlaceOnEventListRestricted+0x18>
  409730:	4b0d      	ldr	r3, [pc, #52]	; (409768 <vTaskPlaceOnEventListRestricted+0x48>)
  409732:	4798      	blx	r3
  409734:	bf00      	nop
  409736:	e7fd      	b.n	409734 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  409738:	4b0c      	ldr	r3, [pc, #48]	; (40976c <vTaskPlaceOnEventListRestricted+0x4c>)
  40973a:	681b      	ldr	r3, [r3, #0]
  40973c:	3318      	adds	r3, #24
  40973e:	6878      	ldr	r0, [r7, #4]
  409740:	4619      	mov	r1, r3
  409742:	4b0b      	ldr	r3, [pc, #44]	; (409770 <vTaskPlaceOnEventListRestricted+0x50>)
  409744:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  409746:	4b09      	ldr	r3, [pc, #36]	; (40976c <vTaskPlaceOnEventListRestricted+0x4c>)
  409748:	681b      	ldr	r3, [r3, #0]
  40974a:	3304      	adds	r3, #4
  40974c:	4618      	mov	r0, r3
  40974e:	4b09      	ldr	r3, [pc, #36]	; (409774 <vTaskPlaceOnEventListRestricted+0x54>)
  409750:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  409752:	4b09      	ldr	r3, [pc, #36]	; (409778 <vTaskPlaceOnEventListRestricted+0x58>)
  409754:	681a      	ldr	r2, [r3, #0]
  409756:	683b      	ldr	r3, [r7, #0]
  409758:	4413      	add	r3, r2
  40975a:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  40975c:	68f8      	ldr	r0, [r7, #12]
  40975e:	4b07      	ldr	r3, [pc, #28]	; (40977c <vTaskPlaceOnEventListRestricted+0x5c>)
  409760:	4798      	blx	r3
	}
  409762:	3710      	adds	r7, #16
  409764:	46bd      	mov	sp, r7
  409766:	bd80      	pop	{r7, pc}
  409768:	00408501 	.word	0x00408501
  40976c:	20008694 	.word	0x20008694
  409770:	00408221 	.word	0x00408221
  409774:	004082e1 	.word	0x004082e1
  409778:	20008838 	.word	0x20008838
  40977c:	00409ae9 	.word	0x00409ae9

00409780 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  409780:	b580      	push	{r7, lr}
  409782:	b084      	sub	sp, #16
  409784:	af00      	add	r7, sp, #0
  409786:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  409788:	687b      	ldr	r3, [r7, #4]
  40978a:	68db      	ldr	r3, [r3, #12]
  40978c:	68db      	ldr	r3, [r3, #12]
  40978e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  409790:	68bb      	ldr	r3, [r7, #8]
  409792:	2b00      	cmp	r3, #0
  409794:	d103      	bne.n	40979e <xTaskRemoveFromEventList+0x1e>
  409796:	4b21      	ldr	r3, [pc, #132]	; (40981c <xTaskRemoveFromEventList+0x9c>)
  409798:	4798      	blx	r3
  40979a:	bf00      	nop
  40979c:	e7fd      	b.n	40979a <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40979e:	68bb      	ldr	r3, [r7, #8]
  4097a0:	3318      	adds	r3, #24
  4097a2:	4618      	mov	r0, r3
  4097a4:	4b1e      	ldr	r3, [pc, #120]	; (409820 <xTaskRemoveFromEventList+0xa0>)
  4097a6:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4097a8:	4b1e      	ldr	r3, [pc, #120]	; (409824 <xTaskRemoveFromEventList+0xa4>)
  4097aa:	681b      	ldr	r3, [r3, #0]
  4097ac:	2b00      	cmp	r3, #0
  4097ae:	d11d      	bne.n	4097ec <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4097b0:	68bb      	ldr	r3, [r7, #8]
  4097b2:	3304      	adds	r3, #4
  4097b4:	4618      	mov	r0, r3
  4097b6:	4b1a      	ldr	r3, [pc, #104]	; (409820 <xTaskRemoveFromEventList+0xa0>)
  4097b8:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  4097ba:	68bb      	ldr	r3, [r7, #8]
  4097bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4097be:	4b1a      	ldr	r3, [pc, #104]	; (409828 <xTaskRemoveFromEventList+0xa8>)
  4097c0:	681b      	ldr	r3, [r3, #0]
  4097c2:	429a      	cmp	r2, r3
  4097c4:	d903      	bls.n	4097ce <xTaskRemoveFromEventList+0x4e>
  4097c6:	68bb      	ldr	r3, [r7, #8]
  4097c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4097ca:	4b17      	ldr	r3, [pc, #92]	; (409828 <xTaskRemoveFromEventList+0xa8>)
  4097cc:	601a      	str	r2, [r3, #0]
  4097ce:	68bb      	ldr	r3, [r7, #8]
  4097d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4097d2:	4613      	mov	r3, r2
  4097d4:	009b      	lsls	r3, r3, #2
  4097d6:	4413      	add	r3, r2
  4097d8:	009b      	lsls	r3, r3, #2
  4097da:	4a14      	ldr	r2, [pc, #80]	; (40982c <xTaskRemoveFromEventList+0xac>)
  4097dc:	441a      	add	r2, r3
  4097de:	68bb      	ldr	r3, [r7, #8]
  4097e0:	3304      	adds	r3, #4
  4097e2:	4610      	mov	r0, r2
  4097e4:	4619      	mov	r1, r3
  4097e6:	4b12      	ldr	r3, [pc, #72]	; (409830 <xTaskRemoveFromEventList+0xb0>)
  4097e8:	4798      	blx	r3
  4097ea:	e005      	b.n	4097f8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4097ec:	68bb      	ldr	r3, [r7, #8]
  4097ee:	3318      	adds	r3, #24
  4097f0:	4810      	ldr	r0, [pc, #64]	; (409834 <xTaskRemoveFromEventList+0xb4>)
  4097f2:	4619      	mov	r1, r3
  4097f4:	4b0e      	ldr	r3, [pc, #56]	; (409830 <xTaskRemoveFromEventList+0xb0>)
  4097f6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4097f8:	68bb      	ldr	r3, [r7, #8]
  4097fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4097fc:	4b0e      	ldr	r3, [pc, #56]	; (409838 <xTaskRemoveFromEventList+0xb8>)
  4097fe:	681b      	ldr	r3, [r3, #0]
  409800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  409802:	429a      	cmp	r2, r3
  409804:	d302      	bcc.n	40980c <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  409806:	2301      	movs	r3, #1
  409808:	60fb      	str	r3, [r7, #12]
  40980a:	e001      	b.n	409810 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  40980c:	2300      	movs	r3, #0
  40980e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  409810:	68fb      	ldr	r3, [r7, #12]
}
  409812:	4618      	mov	r0, r3
  409814:	3710      	adds	r7, #16
  409816:	46bd      	mov	sp, r7
  409818:	bd80      	pop	{r7, pc}
  40981a:	bf00      	nop
  40981c:	00408501 	.word	0x00408501
  409820:	004082e1 	.word	0x004082e1
  409824:	20008848 	.word	0x20008848
  409828:	20008840 	.word	0x20008840
  40982c:	20008698 	.word	0x20008698
  409830:	00408221 	.word	0x00408221
  409834:	200087f4 	.word	0x200087f4
  409838:	20008694 	.word	0x20008694

0040983c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  40983c:	b580      	push	{r7, lr}
  40983e:	b082      	sub	sp, #8
  409840:	af00      	add	r7, sp, #0
  409842:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  409844:	687b      	ldr	r3, [r7, #4]
  409846:	2b00      	cmp	r3, #0
  409848:	d103      	bne.n	409852 <vTaskSetTimeOutState+0x16>
  40984a:	4b07      	ldr	r3, [pc, #28]	; (409868 <vTaskSetTimeOutState+0x2c>)
  40984c:	4798      	blx	r3
  40984e:	bf00      	nop
  409850:	e7fd      	b.n	40984e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  409852:	4b06      	ldr	r3, [pc, #24]	; (40986c <vTaskSetTimeOutState+0x30>)
  409854:	681a      	ldr	r2, [r3, #0]
  409856:	687b      	ldr	r3, [r7, #4]
  409858:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40985a:	4b05      	ldr	r3, [pc, #20]	; (409870 <vTaskSetTimeOutState+0x34>)
  40985c:	681a      	ldr	r2, [r3, #0]
  40985e:	687b      	ldr	r3, [r7, #4]
  409860:	605a      	str	r2, [r3, #4]
}
  409862:	3708      	adds	r7, #8
  409864:	46bd      	mov	sp, r7
  409866:	bd80      	pop	{r7, pc}
  409868:	00408501 	.word	0x00408501
  40986c:	20008854 	.word	0x20008854
  409870:	20008838 	.word	0x20008838

00409874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  409874:	b580      	push	{r7, lr}
  409876:	b084      	sub	sp, #16
  409878:	af00      	add	r7, sp, #0
  40987a:	6078      	str	r0, [r7, #4]
  40987c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  40987e:	687b      	ldr	r3, [r7, #4]
  409880:	2b00      	cmp	r3, #0
  409882:	d103      	bne.n	40988c <xTaskCheckForTimeOut+0x18>
  409884:	4b22      	ldr	r3, [pc, #136]	; (409910 <xTaskCheckForTimeOut+0x9c>)
  409886:	4798      	blx	r3
  409888:	bf00      	nop
  40988a:	e7fd      	b.n	409888 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  40988c:	683b      	ldr	r3, [r7, #0]
  40988e:	2b00      	cmp	r3, #0
  409890:	d103      	bne.n	40989a <xTaskCheckForTimeOut+0x26>
  409892:	4b1f      	ldr	r3, [pc, #124]	; (409910 <xTaskCheckForTimeOut+0x9c>)
  409894:	4798      	blx	r3
  409896:	bf00      	nop
  409898:	e7fd      	b.n	409896 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  40989a:	4b1e      	ldr	r3, [pc, #120]	; (409914 <xTaskCheckForTimeOut+0xa0>)
  40989c:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  40989e:	683b      	ldr	r3, [r7, #0]
  4098a0:	681b      	ldr	r3, [r3, #0]
  4098a2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4098a6:	d102      	bne.n	4098ae <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  4098a8:	2300      	movs	r3, #0
  4098aa:	60fb      	str	r3, [r7, #12]
  4098ac:	e029      	b.n	409902 <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  4098ae:	687b      	ldr	r3, [r7, #4]
  4098b0:	681a      	ldr	r2, [r3, #0]
  4098b2:	4b19      	ldr	r3, [pc, #100]	; (409918 <xTaskCheckForTimeOut+0xa4>)
  4098b4:	681b      	ldr	r3, [r3, #0]
  4098b6:	429a      	cmp	r2, r3
  4098b8:	d008      	beq.n	4098cc <xTaskCheckForTimeOut+0x58>
  4098ba:	687b      	ldr	r3, [r7, #4]
  4098bc:	685a      	ldr	r2, [r3, #4]
  4098be:	4b17      	ldr	r3, [pc, #92]	; (40991c <xTaskCheckForTimeOut+0xa8>)
  4098c0:	681b      	ldr	r3, [r3, #0]
  4098c2:	429a      	cmp	r2, r3
  4098c4:	d802      	bhi.n	4098cc <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  4098c6:	2301      	movs	r3, #1
  4098c8:	60fb      	str	r3, [r7, #12]
  4098ca:	e01a      	b.n	409902 <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  4098cc:	4b13      	ldr	r3, [pc, #76]	; (40991c <xTaskCheckForTimeOut+0xa8>)
  4098ce:	681a      	ldr	r2, [r3, #0]
  4098d0:	687b      	ldr	r3, [r7, #4]
  4098d2:	685b      	ldr	r3, [r3, #4]
  4098d4:	1ad2      	subs	r2, r2, r3
  4098d6:	683b      	ldr	r3, [r7, #0]
  4098d8:	681b      	ldr	r3, [r3, #0]
  4098da:	429a      	cmp	r2, r3
  4098dc:	d20f      	bcs.n	4098fe <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  4098de:	683b      	ldr	r3, [r7, #0]
  4098e0:	681a      	ldr	r2, [r3, #0]
  4098e2:	687b      	ldr	r3, [r7, #4]
  4098e4:	6859      	ldr	r1, [r3, #4]
  4098e6:	4b0d      	ldr	r3, [pc, #52]	; (40991c <xTaskCheckForTimeOut+0xa8>)
  4098e8:	681b      	ldr	r3, [r3, #0]
  4098ea:	1acb      	subs	r3, r1, r3
  4098ec:	441a      	add	r2, r3
  4098ee:	683b      	ldr	r3, [r7, #0]
  4098f0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4098f2:	6878      	ldr	r0, [r7, #4]
  4098f4:	4b0a      	ldr	r3, [pc, #40]	; (409920 <xTaskCheckForTimeOut+0xac>)
  4098f6:	4798      	blx	r3
			xReturn = pdFALSE;
  4098f8:	2300      	movs	r3, #0
  4098fa:	60fb      	str	r3, [r7, #12]
  4098fc:	e001      	b.n	409902 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  4098fe:	2301      	movs	r3, #1
  409900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  409902:	4b08      	ldr	r3, [pc, #32]	; (409924 <xTaskCheckForTimeOut+0xb0>)
  409904:	4798      	blx	r3

	return xReturn;
  409906:	68fb      	ldr	r3, [r7, #12]
}
  409908:	4618      	mov	r0, r3
  40990a:	3710      	adds	r7, #16
  40990c:	46bd      	mov	sp, r7
  40990e:	bd80      	pop	{r7, pc}
  409910:	00408501 	.word	0x00408501
  409914:	004084bd 	.word	0x004084bd
  409918:	20008854 	.word	0x20008854
  40991c:	20008838 	.word	0x20008838
  409920:	0040983d 	.word	0x0040983d
  409924:	004084d9 	.word	0x004084d9

00409928 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  409928:	b480      	push	{r7}
  40992a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  40992c:	4b03      	ldr	r3, [pc, #12]	; (40993c <vTaskMissedYield+0x14>)
  40992e:	2201      	movs	r2, #1
  409930:	601a      	str	r2, [r3, #0]
}
  409932:	46bd      	mov	sp, r7
  409934:	f85d 7b04 	ldr.w	r7, [sp], #4
  409938:	4770      	bx	lr
  40993a:	bf00      	nop
  40993c:	20008850 	.word	0x20008850

00409940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  409940:	b580      	push	{r7, lr}
  409942:	b082      	sub	sp, #8
  409944:	af00      	add	r7, sp, #0
  409946:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  409948:	4b04      	ldr	r3, [pc, #16]	; (40995c <prvIdleTask+0x1c>)
  40994a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  40994c:	4b04      	ldr	r3, [pc, #16]	; (409960 <prvIdleTask+0x20>)
  40994e:	681b      	ldr	r3, [r3, #0]
  409950:	2b01      	cmp	r3, #1
  409952:	d902      	bls.n	40995a <prvIdleTask+0x1a>
			{
				taskYIELD();
  409954:	4b03      	ldr	r3, [pc, #12]	; (409964 <prvIdleTask+0x24>)
  409956:	4798      	blx	r3
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
  409958:	e7f6      	b.n	409948 <prvIdleTask+0x8>
  40995a:	e7f5      	b.n	409948 <prvIdleTask+0x8>
  40995c:	00409a5d 	.word	0x00409a5d
  409960:	20008698 	.word	0x20008698
  409964:	004084a5 	.word	0x004084a5

00409968 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  409968:	b580      	push	{r7, lr}
  40996a:	b084      	sub	sp, #16
  40996c:	af00      	add	r7, sp, #0
  40996e:	60f8      	str	r0, [r7, #12]
  409970:	60b9      	str	r1, [r7, #8]
  409972:	607a      	str	r2, [r7, #4]
  409974:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  409976:	68fb      	ldr	r3, [r7, #12]
  409978:	3334      	adds	r3, #52	; 0x34
  40997a:	4618      	mov	r0, r3
  40997c:	68b9      	ldr	r1, [r7, #8]
  40997e:	220a      	movs	r2, #10
  409980:	4b14      	ldr	r3, [pc, #80]	; (4099d4 <prvInitialiseTCBVariables+0x6c>)
  409982:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  409984:	68fb      	ldr	r3, [r7, #12]
  409986:	2200      	movs	r2, #0
  409988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  40998c:	687b      	ldr	r3, [r7, #4]
  40998e:	2b0e      	cmp	r3, #14
  409990:	d901      	bls.n	409996 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  409992:	230e      	movs	r3, #14
  409994:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  409996:	68fb      	ldr	r3, [r7, #12]
  409998:	687a      	ldr	r2, [r7, #4]
  40999a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  40999c:	68fb      	ldr	r3, [r7, #12]
  40999e:	687a      	ldr	r2, [r7, #4]
  4099a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4099a2:	68fb      	ldr	r3, [r7, #12]
  4099a4:	3304      	adds	r3, #4
  4099a6:	4618      	mov	r0, r3
  4099a8:	4b0b      	ldr	r3, [pc, #44]	; (4099d8 <prvInitialiseTCBVariables+0x70>)
  4099aa:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4099ac:	68fb      	ldr	r3, [r7, #12]
  4099ae:	3318      	adds	r3, #24
  4099b0:	4618      	mov	r0, r3
  4099b2:	4b09      	ldr	r3, [pc, #36]	; (4099d8 <prvInitialiseTCBVariables+0x70>)
  4099b4:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4099b6:	68fb      	ldr	r3, [r7, #12]
  4099b8:	68fa      	ldr	r2, [r7, #12]
  4099ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  4099bc:	687b      	ldr	r3, [r7, #4]
  4099be:	f1c3 020f 	rsb	r2, r3, #15
  4099c2:	68fb      	ldr	r3, [r7, #12]
  4099c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4099c6:	68fb      	ldr	r3, [r7, #12]
  4099c8:	68fa      	ldr	r2, [r7, #12]
  4099ca:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  4099cc:	3710      	adds	r7, #16
  4099ce:	46bd      	mov	sp, r7
  4099d0:	bd80      	pop	{r7, pc}
  4099d2:	bf00      	nop
  4099d4:	0040cfe5 	.word	0x0040cfe5
  4099d8:	00408209 	.word	0x00408209

004099dc <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  4099dc:	b580      	push	{r7, lr}
  4099de:	b082      	sub	sp, #8
  4099e0:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4099e2:	2300      	movs	r3, #0
  4099e4:	607b      	str	r3, [r7, #4]
  4099e6:	e00c      	b.n	409a02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  4099e8:	687a      	ldr	r2, [r7, #4]
  4099ea:	4613      	mov	r3, r2
  4099ec:	009b      	lsls	r3, r3, #2
  4099ee:	4413      	add	r3, r2
  4099f0:	009b      	lsls	r3, r3, #2
  4099f2:	4a11      	ldr	r2, [pc, #68]	; (409a38 <prvInitialiseTaskLists+0x5c>)
  4099f4:	4413      	add	r3, r2
  4099f6:	4618      	mov	r0, r3
  4099f8:	4b10      	ldr	r3, [pc, #64]	; (409a3c <prvInitialiseTaskLists+0x60>)
  4099fa:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4099fc:	687b      	ldr	r3, [r7, #4]
  4099fe:	3301      	adds	r3, #1
  409a00:	607b      	str	r3, [r7, #4]
  409a02:	687b      	ldr	r3, [r7, #4]
  409a04:	2b0e      	cmp	r3, #14
  409a06:	d9ef      	bls.n	4099e8 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  409a08:	480d      	ldr	r0, [pc, #52]	; (409a40 <prvInitialiseTaskLists+0x64>)
  409a0a:	4b0c      	ldr	r3, [pc, #48]	; (409a3c <prvInitialiseTaskLists+0x60>)
  409a0c:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  409a0e:	480d      	ldr	r0, [pc, #52]	; (409a44 <prvInitialiseTaskLists+0x68>)
  409a10:	4b0a      	ldr	r3, [pc, #40]	; (409a3c <prvInitialiseTaskLists+0x60>)
  409a12:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  409a14:	480c      	ldr	r0, [pc, #48]	; (409a48 <prvInitialiseTaskLists+0x6c>)
  409a16:	4b09      	ldr	r3, [pc, #36]	; (409a3c <prvInitialiseTaskLists+0x60>)
  409a18:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  409a1a:	480c      	ldr	r0, [pc, #48]	; (409a4c <prvInitialiseTaskLists+0x70>)
  409a1c:	4b07      	ldr	r3, [pc, #28]	; (409a3c <prvInitialiseTaskLists+0x60>)
  409a1e:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  409a20:	480b      	ldr	r0, [pc, #44]	; (409a50 <prvInitialiseTaskLists+0x74>)
  409a22:	4b06      	ldr	r3, [pc, #24]	; (409a3c <prvInitialiseTaskLists+0x60>)
  409a24:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  409a26:	4b0b      	ldr	r3, [pc, #44]	; (409a54 <prvInitialiseTaskLists+0x78>)
  409a28:	4a05      	ldr	r2, [pc, #20]	; (409a40 <prvInitialiseTaskLists+0x64>)
  409a2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  409a2c:	4b0a      	ldr	r3, [pc, #40]	; (409a58 <prvInitialiseTaskLists+0x7c>)
  409a2e:	4a05      	ldr	r2, [pc, #20]	; (409a44 <prvInitialiseTaskLists+0x68>)
  409a30:	601a      	str	r2, [r3, #0]
}
  409a32:	3708      	adds	r7, #8
  409a34:	46bd      	mov	sp, r7
  409a36:	bd80      	pop	{r7, pc}
  409a38:	20008698 	.word	0x20008698
  409a3c:	004081c9 	.word	0x004081c9
  409a40:	200087c4 	.word	0x200087c4
  409a44:	200087d8 	.word	0x200087d8
  409a48:	200087f4 	.word	0x200087f4
  409a4c:	20008808 	.word	0x20008808
  409a50:	20008820 	.word	0x20008820
  409a54:	200087ec 	.word	0x200087ec
  409a58:	200087f0 	.word	0x200087f0

00409a5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  409a5c:	b580      	push	{r7, lr}
  409a5e:	b082      	sub	sp, #8
  409a60:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  409a62:	e028      	b.n	409ab6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  409a64:	4b17      	ldr	r3, [pc, #92]	; (409ac4 <prvCheckTasksWaitingTermination+0x68>)
  409a66:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  409a68:	4b17      	ldr	r3, [pc, #92]	; (409ac8 <prvCheckTasksWaitingTermination+0x6c>)
  409a6a:	681b      	ldr	r3, [r3, #0]
  409a6c:	2b00      	cmp	r3, #0
  409a6e:	bf14      	ite	ne
  409a70:	2300      	movne	r3, #0
  409a72:	2301      	moveq	r3, #1
  409a74:	b2db      	uxtb	r3, r3
  409a76:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  409a78:	4b14      	ldr	r3, [pc, #80]	; (409acc <prvCheckTasksWaitingTermination+0x70>)
  409a7a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  409a7c:	687b      	ldr	r3, [r7, #4]
  409a7e:	2b00      	cmp	r3, #0
  409a80:	d119      	bne.n	409ab6 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  409a82:	4b13      	ldr	r3, [pc, #76]	; (409ad0 <prvCheckTasksWaitingTermination+0x74>)
  409a84:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  409a86:	4b10      	ldr	r3, [pc, #64]	; (409ac8 <prvCheckTasksWaitingTermination+0x6c>)
  409a88:	68db      	ldr	r3, [r3, #12]
  409a8a:	68db      	ldr	r3, [r3, #12]
  409a8c:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  409a8e:	683b      	ldr	r3, [r7, #0]
  409a90:	3304      	adds	r3, #4
  409a92:	4618      	mov	r0, r3
  409a94:	4b0f      	ldr	r3, [pc, #60]	; (409ad4 <prvCheckTasksWaitingTermination+0x78>)
  409a96:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  409a98:	4b0f      	ldr	r3, [pc, #60]	; (409ad8 <prvCheckTasksWaitingTermination+0x7c>)
  409a9a:	681b      	ldr	r3, [r3, #0]
  409a9c:	1e5a      	subs	r2, r3, #1
  409a9e:	4b0e      	ldr	r3, [pc, #56]	; (409ad8 <prvCheckTasksWaitingTermination+0x7c>)
  409aa0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
  409aa2:	4b0e      	ldr	r3, [pc, #56]	; (409adc <prvCheckTasksWaitingTermination+0x80>)
  409aa4:	681b      	ldr	r3, [r3, #0]
  409aa6:	1e5a      	subs	r2, r3, #1
  409aa8:	4b0c      	ldr	r3, [pc, #48]	; (409adc <prvCheckTasksWaitingTermination+0x80>)
  409aaa:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
  409aac:	4b0c      	ldr	r3, [pc, #48]	; (409ae0 <prvCheckTasksWaitingTermination+0x84>)
  409aae:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  409ab0:	6838      	ldr	r0, [r7, #0]
  409ab2:	4b0c      	ldr	r3, [pc, #48]	; (409ae4 <prvCheckTasksWaitingTermination+0x88>)
  409ab4:	4798      	blx	r3
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  409ab6:	4b09      	ldr	r3, [pc, #36]	; (409adc <prvCheckTasksWaitingTermination+0x80>)
  409ab8:	681b      	ldr	r3, [r3, #0]
  409aba:	2b00      	cmp	r3, #0
  409abc:	d1d2      	bne.n	409a64 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
  409abe:	3708      	adds	r7, #8
  409ac0:	46bd      	mov	sp, r7
  409ac2:	bd80      	pop	{r7, pc}
  409ac4:	0040931d 	.word	0x0040931d
  409ac8:	20008808 	.word	0x20008808
  409acc:	00409339 	.word	0x00409339
  409ad0:	004084bd 	.word	0x004084bd
  409ad4:	004082e1 	.word	0x004082e1
  409ad8:	20008834 	.word	0x20008834
  409adc:	2000881c 	.word	0x2000881c
  409ae0:	004084d9 	.word	0x004084d9
  409ae4:	00409bc9 	.word	0x00409bc9

00409ae8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  409ae8:	b580      	push	{r7, lr}
  409aea:	b082      	sub	sp, #8
  409aec:	af00      	add	r7, sp, #0
  409aee:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  409af0:	4b13      	ldr	r3, [pc, #76]	; (409b40 <prvAddCurrentTaskToDelayedList+0x58>)
  409af2:	681b      	ldr	r3, [r3, #0]
  409af4:	687a      	ldr	r2, [r7, #4]
  409af6:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  409af8:	4b12      	ldr	r3, [pc, #72]	; (409b44 <prvAddCurrentTaskToDelayedList+0x5c>)
  409afa:	681b      	ldr	r3, [r3, #0]
  409afc:	687a      	ldr	r2, [r7, #4]
  409afe:	429a      	cmp	r2, r3
  409b00:	d209      	bcs.n	409b16 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  409b02:	4b11      	ldr	r3, [pc, #68]	; (409b48 <prvAddCurrentTaskToDelayedList+0x60>)
  409b04:	681a      	ldr	r2, [r3, #0]
  409b06:	4b0e      	ldr	r3, [pc, #56]	; (409b40 <prvAddCurrentTaskToDelayedList+0x58>)
  409b08:	681b      	ldr	r3, [r3, #0]
  409b0a:	3304      	adds	r3, #4
  409b0c:	4610      	mov	r0, r2
  409b0e:	4619      	mov	r1, r3
  409b10:	4b0e      	ldr	r3, [pc, #56]	; (409b4c <prvAddCurrentTaskToDelayedList+0x64>)
  409b12:	4798      	blx	r3
  409b14:	e010      	b.n	409b38 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  409b16:	4b0e      	ldr	r3, [pc, #56]	; (409b50 <prvAddCurrentTaskToDelayedList+0x68>)
  409b18:	681a      	ldr	r2, [r3, #0]
  409b1a:	4b09      	ldr	r3, [pc, #36]	; (409b40 <prvAddCurrentTaskToDelayedList+0x58>)
  409b1c:	681b      	ldr	r3, [r3, #0]
  409b1e:	3304      	adds	r3, #4
  409b20:	4610      	mov	r0, r2
  409b22:	4619      	mov	r1, r3
  409b24:	4b09      	ldr	r3, [pc, #36]	; (409b4c <prvAddCurrentTaskToDelayedList+0x64>)
  409b26:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  409b28:	4b0a      	ldr	r3, [pc, #40]	; (409b54 <prvAddCurrentTaskToDelayedList+0x6c>)
  409b2a:	681b      	ldr	r3, [r3, #0]
  409b2c:	687a      	ldr	r2, [r7, #4]
  409b2e:	429a      	cmp	r2, r3
  409b30:	d202      	bcs.n	409b38 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
  409b32:	4b08      	ldr	r3, [pc, #32]	; (409b54 <prvAddCurrentTaskToDelayedList+0x6c>)
  409b34:	687a      	ldr	r2, [r7, #4]
  409b36:	601a      	str	r2, [r3, #0]
		}
	}
}
  409b38:	3708      	adds	r7, #8
  409b3a:	46bd      	mov	sp, r7
  409b3c:	bd80      	pop	{r7, pc}
  409b3e:	bf00      	nop
  409b40:	20008694 	.word	0x20008694
  409b44:	20008838 	.word	0x20008838
  409b48:	200087f0 	.word	0x200087f0
  409b4c:	00408271 	.word	0x00408271
  409b50:	200087ec 	.word	0x200087ec
  409b54:	20000360 	.word	0x20000360

00409b58 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  409b58:	b580      	push	{r7, lr}
  409b5a:	b084      	sub	sp, #16
  409b5c:	af00      	add	r7, sp, #0
  409b5e:	4603      	mov	r3, r0
  409b60:	6039      	str	r1, [r7, #0]
  409b62:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  409b64:	204c      	movs	r0, #76	; 0x4c
  409b66:	4b15      	ldr	r3, [pc, #84]	; (409bbc <prvAllocateTCBAndStack+0x64>)
  409b68:	4798      	blx	r3
  409b6a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  409b6c:	68fb      	ldr	r3, [r7, #12]
  409b6e:	2b00      	cmp	r3, #0
  409b70:	d01f      	beq.n	409bb2 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  409b72:	683b      	ldr	r3, [r7, #0]
  409b74:	2b00      	cmp	r3, #0
  409b76:	d106      	bne.n	409b86 <prvAllocateTCBAndStack+0x2e>
  409b78:	88fb      	ldrh	r3, [r7, #6]
  409b7a:	009b      	lsls	r3, r3, #2
  409b7c:	4618      	mov	r0, r3
  409b7e:	4b0f      	ldr	r3, [pc, #60]	; (409bbc <prvAllocateTCBAndStack+0x64>)
  409b80:	4798      	blx	r3
  409b82:	4603      	mov	r3, r0
  409b84:	e000      	b.n	409b88 <prvAllocateTCBAndStack+0x30>
  409b86:	683b      	ldr	r3, [r7, #0]
  409b88:	68fa      	ldr	r2, [r7, #12]
  409b8a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  409b8c:	68fb      	ldr	r3, [r7, #12]
  409b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409b90:	2b00      	cmp	r3, #0
  409b92:	d105      	bne.n	409ba0 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  409b94:	68f8      	ldr	r0, [r7, #12]
  409b96:	4b0a      	ldr	r3, [pc, #40]	; (409bc0 <prvAllocateTCBAndStack+0x68>)
  409b98:	4798      	blx	r3
			pxNewTCB = NULL;
  409b9a:	2300      	movs	r3, #0
  409b9c:	60fb      	str	r3, [r7, #12]
  409b9e:	e008      	b.n	409bb2 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  409ba0:	68fb      	ldr	r3, [r7, #12]
  409ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  409ba4:	88fb      	ldrh	r3, [r7, #6]
  409ba6:	009b      	lsls	r3, r3, #2
  409ba8:	4610      	mov	r0, r2
  409baa:	21a5      	movs	r1, #165	; 0xa5
  409bac:	461a      	mov	r2, r3
  409bae:	4b05      	ldr	r3, [pc, #20]	; (409bc4 <prvAllocateTCBAndStack+0x6c>)
  409bb0:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  409bb2:	68fb      	ldr	r3, [r7, #12]
}
  409bb4:	4618      	mov	r0, r3
  409bb6:	3710      	adds	r7, #16
  409bb8:	46bd      	mov	sp, r7
  409bba:	bd80      	pop	{r7, pc}
  409bbc:	004085b5 	.word	0x004085b5
  409bc0:	004086bd 	.word	0x004086bd
  409bc4:	0040cb95 	.word	0x0040cb95

00409bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  409bc8:	b580      	push	{r7, lr}
  409bca:	b082      	sub	sp, #8
  409bcc:	af00      	add	r7, sp, #0
  409bce:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  409bd0:	687b      	ldr	r3, [r7, #4]
  409bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409bd4:	4618      	mov	r0, r3
  409bd6:	4b04      	ldr	r3, [pc, #16]	; (409be8 <prvDeleteTCB+0x20>)
  409bd8:	4798      	blx	r3
		vPortFree( pxTCB );
  409bda:	6878      	ldr	r0, [r7, #4]
  409bdc:	4b02      	ldr	r3, [pc, #8]	; (409be8 <prvDeleteTCB+0x20>)
  409bde:	4798      	blx	r3
	}
  409be0:	3708      	adds	r7, #8
  409be2:	46bd      	mov	sp, r7
  409be4:	bd80      	pop	{r7, pc}
  409be6:	bf00      	nop
  409be8:	004086bd 	.word	0x004086bd

00409bec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  409bec:	b480      	push	{r7}
  409bee:	b083      	sub	sp, #12
  409bf0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  409bf2:	4b05      	ldr	r3, [pc, #20]	; (409c08 <xTaskGetCurrentTaskHandle+0x1c>)
  409bf4:	681b      	ldr	r3, [r3, #0]
  409bf6:	607b      	str	r3, [r7, #4]

		return xReturn;
  409bf8:	687b      	ldr	r3, [r7, #4]
	}
  409bfa:	4618      	mov	r0, r3
  409bfc:	370c      	adds	r7, #12
  409bfe:	46bd      	mov	sp, r7
  409c00:	f85d 7b04 	ldr.w	r7, [sp], #4
  409c04:	4770      	bx	lr
  409c06:	bf00      	nop
  409c08:	20008694 	.word	0x20008694

00409c0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  409c0c:	b480      	push	{r7}
  409c0e:	b083      	sub	sp, #12
  409c10:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  409c12:	4b0b      	ldr	r3, [pc, #44]	; (409c40 <xTaskGetSchedulerState+0x34>)
  409c14:	681b      	ldr	r3, [r3, #0]
  409c16:	2b00      	cmp	r3, #0
  409c18:	d102      	bne.n	409c20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  409c1a:	2300      	movs	r3, #0
  409c1c:	607b      	str	r3, [r7, #4]
  409c1e:	e008      	b.n	409c32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  409c20:	4b08      	ldr	r3, [pc, #32]	; (409c44 <xTaskGetSchedulerState+0x38>)
  409c22:	681b      	ldr	r3, [r3, #0]
  409c24:	2b00      	cmp	r3, #0
  409c26:	d102      	bne.n	409c2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  409c28:	2301      	movs	r3, #1
  409c2a:	607b      	str	r3, [r7, #4]
  409c2c:	e001      	b.n	409c32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  409c2e:	2302      	movs	r3, #2
  409c30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  409c32:	687b      	ldr	r3, [r7, #4]
	}
  409c34:	4618      	mov	r0, r3
  409c36:	370c      	adds	r7, #12
  409c38:	46bd      	mov	sp, r7
  409c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  409c3e:	4770      	bx	lr
  409c40:	20008844 	.word	0x20008844
  409c44:	20008848 	.word	0x20008848

00409c48 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  409c48:	b580      	push	{r7, lr}
  409c4a:	b084      	sub	sp, #16
  409c4c:	af00      	add	r7, sp, #0
  409c4e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  409c50:	687b      	ldr	r3, [r7, #4]
  409c52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  409c54:	687b      	ldr	r3, [r7, #4]
  409c56:	2b00      	cmp	r3, #0
  409c58:	d041      	beq.n	409cde <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  409c5a:	68fb      	ldr	r3, [r7, #12]
  409c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409c5e:	4b21      	ldr	r3, [pc, #132]	; (409ce4 <vTaskPriorityInherit+0x9c>)
  409c60:	681b      	ldr	r3, [r3, #0]
  409c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  409c64:	429a      	cmp	r2, r3
  409c66:	d23a      	bcs.n	409cde <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  409c68:	4b1e      	ldr	r3, [pc, #120]	; (409ce4 <vTaskPriorityInherit+0x9c>)
  409c6a:	681b      	ldr	r3, [r3, #0]
  409c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  409c6e:	f1c3 020f 	rsb	r2, r3, #15
  409c72:	68fb      	ldr	r3, [r7, #12]
  409c74:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  409c76:	68fb      	ldr	r3, [r7, #12]
  409c78:	6959      	ldr	r1, [r3, #20]
  409c7a:	68fb      	ldr	r3, [r7, #12]
  409c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409c7e:	4613      	mov	r3, r2
  409c80:	009b      	lsls	r3, r3, #2
  409c82:	4413      	add	r3, r2
  409c84:	009b      	lsls	r3, r3, #2
  409c86:	4a18      	ldr	r2, [pc, #96]	; (409ce8 <vTaskPriorityInherit+0xa0>)
  409c88:	4413      	add	r3, r2
  409c8a:	4299      	cmp	r1, r3
  409c8c:	d122      	bne.n	409cd4 <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  409c8e:	68fb      	ldr	r3, [r7, #12]
  409c90:	3304      	adds	r3, #4
  409c92:	4618      	mov	r0, r3
  409c94:	4b15      	ldr	r3, [pc, #84]	; (409cec <vTaskPriorityInherit+0xa4>)
  409c96:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  409c98:	4b12      	ldr	r3, [pc, #72]	; (409ce4 <vTaskPriorityInherit+0x9c>)
  409c9a:	681b      	ldr	r3, [r3, #0]
  409c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409c9e:	68fb      	ldr	r3, [r7, #12]
  409ca0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  409ca2:	68fb      	ldr	r3, [r7, #12]
  409ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409ca6:	4b12      	ldr	r3, [pc, #72]	; (409cf0 <vTaskPriorityInherit+0xa8>)
  409ca8:	681b      	ldr	r3, [r3, #0]
  409caa:	429a      	cmp	r2, r3
  409cac:	d903      	bls.n	409cb6 <vTaskPriorityInherit+0x6e>
  409cae:	68fb      	ldr	r3, [r7, #12]
  409cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409cb2:	4b0f      	ldr	r3, [pc, #60]	; (409cf0 <vTaskPriorityInherit+0xa8>)
  409cb4:	601a      	str	r2, [r3, #0]
  409cb6:	68fb      	ldr	r3, [r7, #12]
  409cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409cba:	4613      	mov	r3, r2
  409cbc:	009b      	lsls	r3, r3, #2
  409cbe:	4413      	add	r3, r2
  409cc0:	009b      	lsls	r3, r3, #2
  409cc2:	4a09      	ldr	r2, [pc, #36]	; (409ce8 <vTaskPriorityInherit+0xa0>)
  409cc4:	441a      	add	r2, r3
  409cc6:	68fb      	ldr	r3, [r7, #12]
  409cc8:	3304      	adds	r3, #4
  409cca:	4610      	mov	r0, r2
  409ccc:	4619      	mov	r1, r3
  409cce:	4b09      	ldr	r3, [pc, #36]	; (409cf4 <vTaskPriorityInherit+0xac>)
  409cd0:	4798      	blx	r3
  409cd2:	e004      	b.n	409cde <vTaskPriorityInherit+0x96>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  409cd4:	4b03      	ldr	r3, [pc, #12]	; (409ce4 <vTaskPriorityInherit+0x9c>)
  409cd6:	681b      	ldr	r3, [r3, #0]
  409cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409cda:	68fb      	ldr	r3, [r7, #12]
  409cdc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  409cde:	3710      	adds	r7, #16
  409ce0:	46bd      	mov	sp, r7
  409ce2:	bd80      	pop	{r7, pc}
  409ce4:	20008694 	.word	0x20008694
  409ce8:	20008698 	.word	0x20008698
  409cec:	004082e1 	.word	0x004082e1
  409cf0:	20008840 	.word	0x20008840
  409cf4:	00408221 	.word	0x00408221

00409cf8 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  409cf8:	b580      	push	{r7, lr}
  409cfa:	b084      	sub	sp, #16
  409cfc:	af00      	add	r7, sp, #0
  409cfe:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  409d00:	687b      	ldr	r3, [r7, #4]
  409d02:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  409d04:	687b      	ldr	r3, [r7, #4]
  409d06:	2b00      	cmp	r3, #0
  409d08:	d02c      	beq.n	409d64 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  409d0a:	68fb      	ldr	r3, [r7, #12]
  409d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409d0e:	68fb      	ldr	r3, [r7, #12]
  409d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  409d12:	429a      	cmp	r2, r3
  409d14:	d026      	beq.n	409d64 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  409d16:	68fb      	ldr	r3, [r7, #12]
  409d18:	3304      	adds	r3, #4
  409d1a:	4618      	mov	r0, r3
  409d1c:	4b13      	ldr	r3, [pc, #76]	; (409d6c <vTaskPriorityDisinherit+0x74>)
  409d1e:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  409d20:	68fb      	ldr	r3, [r7, #12]
  409d22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  409d24:	68fb      	ldr	r3, [r7, #12]
  409d26:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  409d28:	68fb      	ldr	r3, [r7, #12]
  409d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  409d2c:	f1c3 020f 	rsb	r2, r3, #15
  409d30:	68fb      	ldr	r3, [r7, #12]
  409d32:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  409d34:	68fb      	ldr	r3, [r7, #12]
  409d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409d38:	4b0d      	ldr	r3, [pc, #52]	; (409d70 <vTaskPriorityDisinherit+0x78>)
  409d3a:	681b      	ldr	r3, [r3, #0]
  409d3c:	429a      	cmp	r2, r3
  409d3e:	d903      	bls.n	409d48 <vTaskPriorityDisinherit+0x50>
  409d40:	68fb      	ldr	r3, [r7, #12]
  409d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409d44:	4b0a      	ldr	r3, [pc, #40]	; (409d70 <vTaskPriorityDisinherit+0x78>)
  409d46:	601a      	str	r2, [r3, #0]
  409d48:	68fb      	ldr	r3, [r7, #12]
  409d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409d4c:	4613      	mov	r3, r2
  409d4e:	009b      	lsls	r3, r3, #2
  409d50:	4413      	add	r3, r2
  409d52:	009b      	lsls	r3, r3, #2
  409d54:	4a07      	ldr	r2, [pc, #28]	; (409d74 <vTaskPriorityDisinherit+0x7c>)
  409d56:	441a      	add	r2, r3
  409d58:	68fb      	ldr	r3, [r7, #12]
  409d5a:	3304      	adds	r3, #4
  409d5c:	4610      	mov	r0, r2
  409d5e:	4619      	mov	r1, r3
  409d60:	4b05      	ldr	r3, [pc, #20]	; (409d78 <vTaskPriorityDisinherit+0x80>)
  409d62:	4798      	blx	r3
			}
		}
	}
  409d64:	3710      	adds	r7, #16
  409d66:	46bd      	mov	sp, r7
  409d68:	bd80      	pop	{r7, pc}
  409d6a:	bf00      	nop
  409d6c:	004082e1 	.word	0x004082e1
  409d70:	20008840 	.word	0x20008840
  409d74:	20008698 	.word	0x20008698
  409d78:	00408221 	.word	0x00408221

00409d7c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  409d7c:	b590      	push	{r4, r7, lr}
  409d7e:	b087      	sub	sp, #28
  409d80:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  409d82:	2300      	movs	r3, #0
  409d84:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  409d86:	4b11      	ldr	r3, [pc, #68]	; (409dcc <xTimerCreateTimerTask+0x50>)
  409d88:	4798      	blx	r3

	if( xTimerQueue != NULL )
  409d8a:	4b11      	ldr	r3, [pc, #68]	; (409dd0 <xTimerCreateTimerTask+0x54>)
  409d8c:	681b      	ldr	r3, [r3, #0]
  409d8e:	2b00      	cmp	r3, #0
  409d90:	d00f      	beq.n	409db2 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  409d92:	230e      	movs	r3, #14
  409d94:	9300      	str	r3, [sp, #0]
  409d96:	2300      	movs	r3, #0
  409d98:	9301      	str	r3, [sp, #4]
  409d9a:	2300      	movs	r3, #0
  409d9c:	9302      	str	r3, [sp, #8]
  409d9e:	2300      	movs	r3, #0
  409da0:	9303      	str	r3, [sp, #12]
  409da2:	480c      	ldr	r0, [pc, #48]	; (409dd4 <xTimerCreateTimerTask+0x58>)
  409da4:	490c      	ldr	r1, [pc, #48]	; (409dd8 <xTimerCreateTimerTask+0x5c>)
  409da6:	f240 228a 	movw	r2, #650	; 0x28a
  409daa:	2300      	movs	r3, #0
  409dac:	4c0b      	ldr	r4, [pc, #44]	; (409ddc <xTimerCreateTimerTask+0x60>)
  409dae:	47a0      	blx	r4
  409db0:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  409db2:	687b      	ldr	r3, [r7, #4]
  409db4:	2b00      	cmp	r3, #0
  409db6:	d103      	bne.n	409dc0 <xTimerCreateTimerTask+0x44>
  409db8:	4b09      	ldr	r3, [pc, #36]	; (409de0 <xTimerCreateTimerTask+0x64>)
  409dba:	4798      	blx	r3
  409dbc:	bf00      	nop
  409dbe:	e7fd      	b.n	409dbc <xTimerCreateTimerTask+0x40>
	return xReturn;
  409dc0:	687b      	ldr	r3, [r7, #4]
}
  409dc2:	4618      	mov	r0, r3
  409dc4:	370c      	adds	r7, #12
  409dc6:	46bd      	mov	sp, r7
  409dc8:	bd90      	pop	{r4, r7, pc}
  409dca:	bf00      	nop
  409dcc:	0040a329 	.word	0x0040a329
  409dd0:	2000888c 	.word	0x2000888c
  409dd4:	00409f7d 	.word	0x00409f7d
  409dd8:	00416138 	.word	0x00416138
  409ddc:	00409079 	.word	0x00409079
  409de0:	00408501 	.word	0x00408501

00409de4 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
  409de4:	b580      	push	{r7, lr}
  409de6:	b086      	sub	sp, #24
  409de8:	af00      	add	r7, sp, #0
  409dea:	60f8      	str	r0, [r7, #12]
  409dec:	60b9      	str	r1, [r7, #8]
  409dee:	607a      	str	r2, [r7, #4]
  409df0:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
  409df2:	68bb      	ldr	r3, [r7, #8]
  409df4:	2b00      	cmp	r3, #0
  409df6:	d108      	bne.n	409e0a <xTimerCreate+0x26>
	{
		pxNewTimer = NULL;
  409df8:	2300      	movs	r3, #0
  409dfa:	617b      	str	r3, [r7, #20]
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
  409dfc:	68bb      	ldr	r3, [r7, #8]
  409dfe:	2b00      	cmp	r3, #0
  409e00:	d120      	bne.n	409e44 <xTimerCreate+0x60>
  409e02:	4b13      	ldr	r3, [pc, #76]	; (409e50 <xTimerCreate+0x6c>)
  409e04:	4798      	blx	r3
  409e06:	bf00      	nop
  409e08:	e7fd      	b.n	409e06 <xTimerCreate+0x22>
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
  409e0a:	2028      	movs	r0, #40	; 0x28
  409e0c:	4b11      	ldr	r3, [pc, #68]	; (409e54 <xTimerCreate+0x70>)
  409e0e:	4798      	blx	r3
  409e10:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
  409e12:	697b      	ldr	r3, [r7, #20]
  409e14:	2b00      	cmp	r3, #0
  409e16:	d015      	beq.n	409e44 <xTimerCreate+0x60>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
  409e18:	4b0f      	ldr	r3, [pc, #60]	; (409e58 <xTimerCreate+0x74>)
  409e1a:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
  409e1c:	697b      	ldr	r3, [r7, #20]
  409e1e:	68fa      	ldr	r2, [r7, #12]
  409e20:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  409e22:	697b      	ldr	r3, [r7, #20]
  409e24:	68ba      	ldr	r2, [r7, #8]
  409e26:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  409e28:	697b      	ldr	r3, [r7, #20]
  409e2a:	687a      	ldr	r2, [r7, #4]
  409e2c:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  409e2e:	697b      	ldr	r3, [r7, #20]
  409e30:	683a      	ldr	r2, [r7, #0]
  409e32:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  409e34:	697b      	ldr	r3, [r7, #20]
  409e36:	6a3a      	ldr	r2, [r7, #32]
  409e38:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  409e3a:	697b      	ldr	r3, [r7, #20]
  409e3c:	3304      	adds	r3, #4
  409e3e:	4618      	mov	r0, r3
  409e40:	4b06      	ldr	r3, [pc, #24]	; (409e5c <xTimerCreate+0x78>)
  409e42:	4798      	blx	r3
		{
			traceTIMER_CREATE_FAILED();
		}
	}

	return ( xTimerHandle ) pxNewTimer;
  409e44:	697b      	ldr	r3, [r7, #20]
}
  409e46:	4618      	mov	r0, r3
  409e48:	3718      	adds	r7, #24
  409e4a:	46bd      	mov	sp, r7
  409e4c:	bd80      	pop	{r7, pc}
  409e4e:	bf00      	nop
  409e50:	00408501 	.word	0x00408501
  409e54:	004085b5 	.word	0x004085b5
  409e58:	0040a329 	.word	0x0040a329
  409e5c:	00408209 	.word	0x00408209

00409e60 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  409e60:	b590      	push	{r4, r7, lr}
  409e62:	b089      	sub	sp, #36	; 0x24
  409e64:	af00      	add	r7, sp, #0
  409e66:	60f8      	str	r0, [r7, #12]
  409e68:	60b9      	str	r1, [r7, #8]
  409e6a:	607a      	str	r2, [r7, #4]
  409e6c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  409e6e:	2300      	movs	r3, #0
  409e70:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  409e72:	4b1d      	ldr	r3, [pc, #116]	; (409ee8 <xTimerGenericCommand+0x88>)
  409e74:	681b      	ldr	r3, [r3, #0]
  409e76:	2b00      	cmp	r3, #0
  409e78:	d030      	beq.n	409edc <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  409e7a:	68bb      	ldr	r3, [r7, #8]
  409e7c:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  409e7e:	687b      	ldr	r3, [r7, #4]
  409e80:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  409e82:	68fb      	ldr	r3, [r7, #12]
  409e84:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  409e86:	683b      	ldr	r3, [r7, #0]
  409e88:	2b00      	cmp	r3, #0
  409e8a:	d11c      	bne.n	409ec6 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  409e8c:	4b17      	ldr	r3, [pc, #92]	; (409eec <xTimerGenericCommand+0x8c>)
  409e8e:	4798      	blx	r3
  409e90:	4603      	mov	r3, r0
  409e92:	2b01      	cmp	r3, #1
  409e94:	d10b      	bne.n	409eae <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  409e96:	4b14      	ldr	r3, [pc, #80]	; (409ee8 <xTimerGenericCommand+0x88>)
  409e98:	681a      	ldr	r2, [r3, #0]
  409e9a:	f107 0310 	add.w	r3, r7, #16
  409e9e:	4610      	mov	r0, r2
  409ea0:	4619      	mov	r1, r3
  409ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  409ea4:	2300      	movs	r3, #0
  409ea6:	4c12      	ldr	r4, [pc, #72]	; (409ef0 <xTimerGenericCommand+0x90>)
  409ea8:	47a0      	blx	r4
  409eaa:	61f8      	str	r0, [r7, #28]
  409eac:	e016      	b.n	409edc <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  409eae:	4b0e      	ldr	r3, [pc, #56]	; (409ee8 <xTimerGenericCommand+0x88>)
  409eb0:	681a      	ldr	r2, [r3, #0]
  409eb2:	f107 0310 	add.w	r3, r7, #16
  409eb6:	4610      	mov	r0, r2
  409eb8:	4619      	mov	r1, r3
  409eba:	2200      	movs	r2, #0
  409ebc:	2300      	movs	r3, #0
  409ebe:	4c0c      	ldr	r4, [pc, #48]	; (409ef0 <xTimerGenericCommand+0x90>)
  409ec0:	47a0      	blx	r4
  409ec2:	61f8      	str	r0, [r7, #28]
  409ec4:	e00a      	b.n	409edc <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  409ec6:	4b08      	ldr	r3, [pc, #32]	; (409ee8 <xTimerGenericCommand+0x88>)
  409ec8:	681a      	ldr	r2, [r3, #0]
  409eca:	f107 0310 	add.w	r3, r7, #16
  409ece:	4610      	mov	r0, r2
  409ed0:	4619      	mov	r1, r3
  409ed2:	683a      	ldr	r2, [r7, #0]
  409ed4:	2300      	movs	r3, #0
  409ed6:	4c07      	ldr	r4, [pc, #28]	; (409ef4 <xTimerGenericCommand+0x94>)
  409ed8:	47a0      	blx	r4
  409eda:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  409edc:	69fb      	ldr	r3, [r7, #28]
}
  409ede:	4618      	mov	r0, r3
  409ee0:	3724      	adds	r7, #36	; 0x24
  409ee2:	46bd      	mov	sp, r7
  409ee4:	bd90      	pop	{r4, r7, pc}
  409ee6:	bf00      	nop
  409ee8:	2000888c 	.word	0x2000888c
  409eec:	00409c0d 	.word	0x00409c0d
  409ef0:	004089b1 	.word	0x004089b1
  409ef4:	00408b21 	.word	0x00408b21

00409ef8 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  409ef8:	b590      	push	{r4, r7, lr}
  409efa:	b087      	sub	sp, #28
  409efc:	af02      	add	r7, sp, #8
  409efe:	6078      	str	r0, [r7, #4]
  409f00:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  409f02:	4b19      	ldr	r3, [pc, #100]	; (409f68 <prvProcessExpiredTimer+0x70>)
  409f04:	681b      	ldr	r3, [r3, #0]
  409f06:	68db      	ldr	r3, [r3, #12]
  409f08:	68db      	ldr	r3, [r3, #12]
  409f0a:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  409f0c:	68fb      	ldr	r3, [r7, #12]
  409f0e:	3304      	adds	r3, #4
  409f10:	4618      	mov	r0, r3
  409f12:	4b16      	ldr	r3, [pc, #88]	; (409f6c <prvProcessExpiredTimer+0x74>)
  409f14:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  409f16:	68fb      	ldr	r3, [r7, #12]
  409f18:	69db      	ldr	r3, [r3, #28]
  409f1a:	2b01      	cmp	r3, #1
  409f1c:	d11c      	bne.n	409f58 <prvProcessExpiredTimer+0x60>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  409f1e:	68fb      	ldr	r3, [r7, #12]
  409f20:	699a      	ldr	r2, [r3, #24]
  409f22:	687b      	ldr	r3, [r7, #4]
  409f24:	4413      	add	r3, r2
  409f26:	68f8      	ldr	r0, [r7, #12]
  409f28:	4619      	mov	r1, r3
  409f2a:	683a      	ldr	r2, [r7, #0]
  409f2c:	687b      	ldr	r3, [r7, #4]
  409f2e:	4c10      	ldr	r4, [pc, #64]	; (409f70 <prvProcessExpiredTimer+0x78>)
  409f30:	47a0      	blx	r4
  409f32:	4603      	mov	r3, r0
  409f34:	2b01      	cmp	r3, #1
  409f36:	d10f      	bne.n	409f58 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  409f38:	2300      	movs	r3, #0
  409f3a:	9300      	str	r3, [sp, #0]
  409f3c:	68f8      	ldr	r0, [r7, #12]
  409f3e:	2100      	movs	r1, #0
  409f40:	687a      	ldr	r2, [r7, #4]
  409f42:	2300      	movs	r3, #0
  409f44:	4c0b      	ldr	r4, [pc, #44]	; (409f74 <prvProcessExpiredTimer+0x7c>)
  409f46:	47a0      	blx	r4
  409f48:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  409f4a:	68bb      	ldr	r3, [r7, #8]
  409f4c:	2b00      	cmp	r3, #0
  409f4e:	d103      	bne.n	409f58 <prvProcessExpiredTimer+0x60>
  409f50:	4b09      	ldr	r3, [pc, #36]	; (409f78 <prvProcessExpiredTimer+0x80>)
  409f52:	4798      	blx	r3
  409f54:	bf00      	nop
  409f56:	e7fd      	b.n	409f54 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  409f58:	68fb      	ldr	r3, [r7, #12]
  409f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  409f5c:	68f8      	ldr	r0, [r7, #12]
  409f5e:	4798      	blx	r3
}
  409f60:	3714      	adds	r7, #20
  409f62:	46bd      	mov	sp, r7
  409f64:	bd90      	pop	{r4, r7, pc}
  409f66:	bf00      	nop
  409f68:	20008884 	.word	0x20008884
  409f6c:	004082e1 	.word	0x004082e1
  409f70:	0040a0c5 	.word	0x0040a0c5
  409f74:	00409e61 	.word	0x00409e61
  409f78:	00408501 	.word	0x00408501

00409f7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  409f7c:	b580      	push	{r7, lr}
  409f7e:	b084      	sub	sp, #16
  409f80:	af00      	add	r7, sp, #0
  409f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  409f84:	f107 0308 	add.w	r3, r7, #8
  409f88:	4618      	mov	r0, r3
  409f8a:	4b05      	ldr	r3, [pc, #20]	; (409fa0 <prvTimerTask+0x24>)
  409f8c:	4798      	blx	r3
  409f8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  409f90:	68bb      	ldr	r3, [r7, #8]
  409f92:	68f8      	ldr	r0, [r7, #12]
  409f94:	4619      	mov	r1, r3
  409f96:	4b03      	ldr	r3, [pc, #12]	; (409fa4 <prvTimerTask+0x28>)
  409f98:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  409f9a:	4b03      	ldr	r3, [pc, #12]	; (409fa8 <prvTimerTask+0x2c>)
  409f9c:	4798      	blx	r3
	}
  409f9e:	e7f1      	b.n	409f84 <prvTimerTask+0x8>
  409fa0:	0040a031 	.word	0x0040a031
  409fa4:	00409fad 	.word	0x00409fad
  409fa8:	0040a14d 	.word	0x0040a14d

00409fac <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  409fac:	b580      	push	{r7, lr}
  409fae:	b084      	sub	sp, #16
  409fb0:	af00      	add	r7, sp, #0
  409fb2:	6078      	str	r0, [r7, #4]
  409fb4:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  409fb6:	4b17      	ldr	r3, [pc, #92]	; (40a014 <prvProcessTimerOrBlockTask+0x68>)
  409fb8:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  409fba:	f107 0308 	add.w	r3, r7, #8
  409fbe:	4618      	mov	r0, r3
  409fc0:	4b15      	ldr	r3, [pc, #84]	; (40a018 <prvProcessTimerOrBlockTask+0x6c>)
  409fc2:	4798      	blx	r3
  409fc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  409fc6:	68bb      	ldr	r3, [r7, #8]
  409fc8:	2b00      	cmp	r3, #0
  409fca:	d11e      	bne.n	40a00a <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  409fcc:	683b      	ldr	r3, [r7, #0]
  409fce:	2b00      	cmp	r3, #0
  409fd0:	d10a      	bne.n	409fe8 <prvProcessTimerOrBlockTask+0x3c>
  409fd2:	687a      	ldr	r2, [r7, #4]
  409fd4:	68fb      	ldr	r3, [r7, #12]
  409fd6:	429a      	cmp	r2, r3
  409fd8:	d806      	bhi.n	409fe8 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  409fda:	4b10      	ldr	r3, [pc, #64]	; (40a01c <prvProcessTimerOrBlockTask+0x70>)
  409fdc:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  409fde:	6878      	ldr	r0, [r7, #4]
  409fe0:	68f9      	ldr	r1, [r7, #12]
  409fe2:	4b0f      	ldr	r3, [pc, #60]	; (40a020 <prvProcessTimerOrBlockTask+0x74>)
  409fe4:	4798      	blx	r3
  409fe6:	e012      	b.n	40a00e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  409fe8:	4b0e      	ldr	r3, [pc, #56]	; (40a024 <prvProcessTimerOrBlockTask+0x78>)
  409fea:	681a      	ldr	r2, [r3, #0]
  409fec:	6879      	ldr	r1, [r7, #4]
  409fee:	68fb      	ldr	r3, [r7, #12]
  409ff0:	1acb      	subs	r3, r1, r3
  409ff2:	4610      	mov	r0, r2
  409ff4:	4619      	mov	r1, r3
  409ff6:	4b0c      	ldr	r3, [pc, #48]	; (40a028 <prvProcessTimerOrBlockTask+0x7c>)
  409ff8:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  409ffa:	4b08      	ldr	r3, [pc, #32]	; (40a01c <prvProcessTimerOrBlockTask+0x70>)
  409ffc:	4798      	blx	r3
  409ffe:	4603      	mov	r3, r0
  40a000:	2b00      	cmp	r3, #0
  40a002:	d104      	bne.n	40a00e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  40a004:	4b09      	ldr	r3, [pc, #36]	; (40a02c <prvProcessTimerOrBlockTask+0x80>)
  40a006:	4798      	blx	r3
  40a008:	e001      	b.n	40a00e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  40a00a:	4b04      	ldr	r3, [pc, #16]	; (40a01c <prvProcessTimerOrBlockTask+0x70>)
  40a00c:	4798      	blx	r3
		}
	}
}
  40a00e:	3710      	adds	r7, #16
  40a010:	46bd      	mov	sp, r7
  40a012:	bd80      	pop	{r7, pc}
  40a014:	0040931d 	.word	0x0040931d
  40a018:	0040a079 	.word	0x0040a079
  40a01c:	00409339 	.word	0x00409339
  40a020:	00409ef9 	.word	0x00409ef9
  40a024:	2000888c 	.word	0x2000888c
  40a028:	00409015 	.word	0x00409015
  40a02c:	004084a5 	.word	0x004084a5

0040a030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  40a030:	b480      	push	{r7}
  40a032:	b085      	sub	sp, #20
  40a034:	af00      	add	r7, sp, #0
  40a036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40a038:	4b0e      	ldr	r3, [pc, #56]	; (40a074 <prvGetNextExpireTime+0x44>)
  40a03a:	681b      	ldr	r3, [r3, #0]
  40a03c:	681b      	ldr	r3, [r3, #0]
  40a03e:	2b00      	cmp	r3, #0
  40a040:	bf14      	ite	ne
  40a042:	2300      	movne	r3, #0
  40a044:	2301      	moveq	r3, #1
  40a046:	b2db      	uxtb	r3, r3
  40a048:	461a      	mov	r2, r3
  40a04a:	687b      	ldr	r3, [r7, #4]
  40a04c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40a04e:	687b      	ldr	r3, [r7, #4]
  40a050:	681b      	ldr	r3, [r3, #0]
  40a052:	2b00      	cmp	r3, #0
  40a054:	d105      	bne.n	40a062 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40a056:	4b07      	ldr	r3, [pc, #28]	; (40a074 <prvGetNextExpireTime+0x44>)
  40a058:	681b      	ldr	r3, [r3, #0]
  40a05a:	68db      	ldr	r3, [r3, #12]
  40a05c:	681b      	ldr	r3, [r3, #0]
  40a05e:	60fb      	str	r3, [r7, #12]
  40a060:	e001      	b.n	40a066 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  40a062:	2300      	movs	r3, #0
  40a064:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  40a066:	68fb      	ldr	r3, [r7, #12]
}
  40a068:	4618      	mov	r0, r3
  40a06a:	3714      	adds	r7, #20
  40a06c:	46bd      	mov	sp, r7
  40a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a072:	4770      	bx	lr
  40a074:	20008884 	.word	0x20008884

0040a078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  40a078:	b580      	push	{r7, lr}
  40a07a:	b084      	sub	sp, #16
  40a07c:	af00      	add	r7, sp, #0
  40a07e:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  40a080:	4b0d      	ldr	r3, [pc, #52]	; (40a0b8 <prvSampleTimeNow+0x40>)
  40a082:	4798      	blx	r3
  40a084:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  40a086:	4b0d      	ldr	r3, [pc, #52]	; (40a0bc <prvSampleTimeNow+0x44>)
  40a088:	681b      	ldr	r3, [r3, #0]
  40a08a:	68fa      	ldr	r2, [r7, #12]
  40a08c:	429a      	cmp	r2, r3
  40a08e:	d208      	bcs.n	40a0a2 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  40a090:	4b0a      	ldr	r3, [pc, #40]	; (40a0bc <prvSampleTimeNow+0x44>)
  40a092:	681b      	ldr	r3, [r3, #0]
  40a094:	4618      	mov	r0, r3
  40a096:	4b0a      	ldr	r3, [pc, #40]	; (40a0c0 <prvSampleTimeNow+0x48>)
  40a098:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  40a09a:	687b      	ldr	r3, [r7, #4]
  40a09c:	2201      	movs	r2, #1
  40a09e:	601a      	str	r2, [r3, #0]
  40a0a0:	e002      	b.n	40a0a8 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  40a0a2:	687b      	ldr	r3, [r7, #4]
  40a0a4:	2200      	movs	r2, #0
  40a0a6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  40a0a8:	4b04      	ldr	r3, [pc, #16]	; (40a0bc <prvSampleTimeNow+0x44>)
  40a0aa:	68fa      	ldr	r2, [r7, #12]
  40a0ac:	601a      	str	r2, [r3, #0]

	return xTimeNow;
  40a0ae:	68fb      	ldr	r3, [r7, #12]
}
  40a0b0:	4618      	mov	r0, r3
  40a0b2:	3710      	adds	r7, #16
  40a0b4:	46bd      	mov	sp, r7
  40a0b6:	bd80      	pop	{r7, pc}
  40a0b8:	00409459 	.word	0x00409459
  40a0bc:	20008890 	.word	0x20008890
  40a0c0:	0040a265 	.word	0x0040a265

0040a0c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  40a0c4:	b580      	push	{r7, lr}
  40a0c6:	b086      	sub	sp, #24
  40a0c8:	af00      	add	r7, sp, #0
  40a0ca:	60f8      	str	r0, [r7, #12]
  40a0cc:	60b9      	str	r1, [r7, #8]
  40a0ce:	607a      	str	r2, [r7, #4]
  40a0d0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  40a0d2:	2300      	movs	r3, #0
  40a0d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40a0d6:	68fb      	ldr	r3, [r7, #12]
  40a0d8:	68ba      	ldr	r2, [r7, #8]
  40a0da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40a0dc:	68fb      	ldr	r3, [r7, #12]
  40a0de:	68fa      	ldr	r2, [r7, #12]
  40a0e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  40a0e2:	68ba      	ldr	r2, [r7, #8]
  40a0e4:	687b      	ldr	r3, [r7, #4]
  40a0e6:	429a      	cmp	r2, r3
  40a0e8:	d812      	bhi.n	40a110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  40a0ea:	687a      	ldr	r2, [r7, #4]
  40a0ec:	683b      	ldr	r3, [r7, #0]
  40a0ee:	1ad2      	subs	r2, r2, r3
  40a0f0:	68fb      	ldr	r3, [r7, #12]
  40a0f2:	699b      	ldr	r3, [r3, #24]
  40a0f4:	429a      	cmp	r2, r3
  40a0f6:	d302      	bcc.n	40a0fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40a0f8:	2301      	movs	r3, #1
  40a0fa:	617b      	str	r3, [r7, #20]
  40a0fc:	e01b      	b.n	40a136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40a0fe:	4b10      	ldr	r3, [pc, #64]	; (40a140 <prvInsertTimerInActiveList+0x7c>)
  40a100:	681a      	ldr	r2, [r3, #0]
  40a102:	68fb      	ldr	r3, [r7, #12]
  40a104:	3304      	adds	r3, #4
  40a106:	4610      	mov	r0, r2
  40a108:	4619      	mov	r1, r3
  40a10a:	4b0e      	ldr	r3, [pc, #56]	; (40a144 <prvInsertTimerInActiveList+0x80>)
  40a10c:	4798      	blx	r3
  40a10e:	e012      	b.n	40a136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40a110:	687a      	ldr	r2, [r7, #4]
  40a112:	683b      	ldr	r3, [r7, #0]
  40a114:	429a      	cmp	r2, r3
  40a116:	d206      	bcs.n	40a126 <prvInsertTimerInActiveList+0x62>
  40a118:	68ba      	ldr	r2, [r7, #8]
  40a11a:	683b      	ldr	r3, [r7, #0]
  40a11c:	429a      	cmp	r2, r3
  40a11e:	d302      	bcc.n	40a126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40a120:	2301      	movs	r3, #1
  40a122:	617b      	str	r3, [r7, #20]
  40a124:	e007      	b.n	40a136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40a126:	4b08      	ldr	r3, [pc, #32]	; (40a148 <prvInsertTimerInActiveList+0x84>)
  40a128:	681a      	ldr	r2, [r3, #0]
  40a12a:	68fb      	ldr	r3, [r7, #12]
  40a12c:	3304      	adds	r3, #4
  40a12e:	4610      	mov	r0, r2
  40a130:	4619      	mov	r1, r3
  40a132:	4b04      	ldr	r3, [pc, #16]	; (40a144 <prvInsertTimerInActiveList+0x80>)
  40a134:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  40a136:	697b      	ldr	r3, [r7, #20]
}
  40a138:	4618      	mov	r0, r3
  40a13a:	3718      	adds	r7, #24
  40a13c:	46bd      	mov	sp, r7
  40a13e:	bd80      	pop	{r7, pc}
  40a140:	20008888 	.word	0x20008888
  40a144:	00408271 	.word	0x00408271
  40a148:	20008884 	.word	0x20008884

0040a14c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  40a14c:	b590      	push	{r4, r7, lr}
  40a14e:	b08b      	sub	sp, #44	; 0x2c
  40a150:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40a152:	1d3b      	adds	r3, r7, #4
  40a154:	4618      	mov	r0, r3
  40a156:	4b3b      	ldr	r3, [pc, #236]	; (40a244 <prvProcessReceivedCommands+0xf8>)
  40a158:	4798      	blx	r3
  40a15a:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40a15c:	e061      	b.n	40a222 <prvProcessReceivedCommands+0xd6>
	{
		pxTimer = xMessage.pxTimer;
  40a15e:	693b      	ldr	r3, [r7, #16]
  40a160:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  40a162:	69bb      	ldr	r3, [r7, #24]
  40a164:	2b00      	cmp	r3, #0
  40a166:	d008      	beq.n	40a17a <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40a168:	69bb      	ldr	r3, [r7, #24]
  40a16a:	695b      	ldr	r3, [r3, #20]
  40a16c:	2b00      	cmp	r3, #0
  40a16e:	d004      	beq.n	40a17a <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  40a170:	69bb      	ldr	r3, [r7, #24]
  40a172:	3304      	adds	r3, #4
  40a174:	4618      	mov	r0, r3
  40a176:	4b34      	ldr	r3, [pc, #208]	; (40a248 <prvProcessReceivedCommands+0xfc>)
  40a178:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  40a17a:	68bb      	ldr	r3, [r7, #8]
  40a17c:	2b03      	cmp	r3, #3
  40a17e:	d84f      	bhi.n	40a220 <prvProcessReceivedCommands+0xd4>
  40a180:	a201      	add	r2, pc, #4	; (adr r2, 40a188 <prvProcessReceivedCommands+0x3c>)
  40a182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40a186:	bf00      	nop
  40a188:	0040a199 	.word	0x0040a199
  40a18c:	0040a221 	.word	0x0040a221
  40a190:	0040a1ed 	.word	0x0040a1ed
  40a194:	0040a219 	.word	0x0040a219
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  40a198:	68fa      	ldr	r2, [r7, #12]
  40a19a:	69bb      	ldr	r3, [r7, #24]
  40a19c:	699b      	ldr	r3, [r3, #24]
  40a19e:	441a      	add	r2, r3
  40a1a0:	68fb      	ldr	r3, [r7, #12]
  40a1a2:	69b8      	ldr	r0, [r7, #24]
  40a1a4:	4611      	mov	r1, r2
  40a1a6:	69fa      	ldr	r2, [r7, #28]
  40a1a8:	4c28      	ldr	r4, [pc, #160]	; (40a24c <prvProcessReceivedCommands+0x100>)
  40a1aa:	47a0      	blx	r4
  40a1ac:	4603      	mov	r3, r0
  40a1ae:	2b01      	cmp	r3, #1
  40a1b0:	d11b      	bne.n	40a1ea <prvProcessReceivedCommands+0x9e>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40a1b2:	69bb      	ldr	r3, [r7, #24]
  40a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40a1b6:	69b8      	ldr	r0, [r7, #24]
  40a1b8:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40a1ba:	69bb      	ldr	r3, [r7, #24]
  40a1bc:	69db      	ldr	r3, [r3, #28]
  40a1be:	2b01      	cmp	r3, #1
  40a1c0:	d113      	bne.n	40a1ea <prvProcessReceivedCommands+0x9e>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40a1c2:	68fa      	ldr	r2, [r7, #12]
  40a1c4:	69bb      	ldr	r3, [r7, #24]
  40a1c6:	699b      	ldr	r3, [r3, #24]
  40a1c8:	4413      	add	r3, r2
  40a1ca:	2200      	movs	r2, #0
  40a1cc:	9200      	str	r2, [sp, #0]
  40a1ce:	69b8      	ldr	r0, [r7, #24]
  40a1d0:	2100      	movs	r1, #0
  40a1d2:	461a      	mov	r2, r3
  40a1d4:	2300      	movs	r3, #0
  40a1d6:	4c1e      	ldr	r4, [pc, #120]	; (40a250 <prvProcessReceivedCommands+0x104>)
  40a1d8:	47a0      	blx	r4
  40a1da:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  40a1dc:	697b      	ldr	r3, [r7, #20]
  40a1de:	2b00      	cmp	r3, #0
  40a1e0:	d103      	bne.n	40a1ea <prvProcessReceivedCommands+0x9e>
  40a1e2:	4b1c      	ldr	r3, [pc, #112]	; (40a254 <prvProcessReceivedCommands+0x108>)
  40a1e4:	4798      	blx	r3
  40a1e6:	bf00      	nop
  40a1e8:	e7fd      	b.n	40a1e6 <prvProcessReceivedCommands+0x9a>
						( void ) xResult;
					}
				}
				break;
  40a1ea:	e01a      	b.n	40a222 <prvProcessReceivedCommands+0xd6>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  40a1ec:	68fa      	ldr	r2, [r7, #12]
  40a1ee:	69bb      	ldr	r3, [r7, #24]
  40a1f0:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40a1f2:	69bb      	ldr	r3, [r7, #24]
  40a1f4:	699b      	ldr	r3, [r3, #24]
  40a1f6:	2b00      	cmp	r3, #0
  40a1f8:	d103      	bne.n	40a202 <prvProcessReceivedCommands+0xb6>
  40a1fa:	4b16      	ldr	r3, [pc, #88]	; (40a254 <prvProcessReceivedCommands+0x108>)
  40a1fc:	4798      	blx	r3
  40a1fe:	bf00      	nop
  40a200:	e7fd      	b.n	40a1fe <prvProcessReceivedCommands+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40a202:	69bb      	ldr	r3, [r7, #24]
  40a204:	699a      	ldr	r2, [r3, #24]
  40a206:	69fb      	ldr	r3, [r7, #28]
  40a208:	4413      	add	r3, r2
  40a20a:	69b8      	ldr	r0, [r7, #24]
  40a20c:	4619      	mov	r1, r3
  40a20e:	69fa      	ldr	r2, [r7, #28]
  40a210:	69fb      	ldr	r3, [r7, #28]
  40a212:	4c0e      	ldr	r4, [pc, #56]	; (40a24c <prvProcessReceivedCommands+0x100>)
  40a214:	47a0      	blx	r4
				break;
  40a216:	e004      	b.n	40a222 <prvProcessReceivedCommands+0xd6>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  40a218:	69b8      	ldr	r0, [r7, #24]
  40a21a:	4b0f      	ldr	r3, [pc, #60]	; (40a258 <prvProcessReceivedCommands+0x10c>)
  40a21c:	4798      	blx	r3
				break;
  40a21e:	e000      	b.n	40a222 <prvProcessReceivedCommands+0xd6>

			default	:
				/* Don't expect to get here. */
				break;
  40a220:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40a222:	4b0e      	ldr	r3, [pc, #56]	; (40a25c <prvProcessReceivedCommands+0x110>)
  40a224:	681a      	ldr	r2, [r3, #0]
  40a226:	f107 0308 	add.w	r3, r7, #8
  40a22a:	4610      	mov	r0, r2
  40a22c:	4619      	mov	r1, r3
  40a22e:	2200      	movs	r2, #0
  40a230:	2300      	movs	r3, #0
  40a232:	4c0b      	ldr	r4, [pc, #44]	; (40a260 <prvProcessReceivedCommands+0x114>)
  40a234:	47a0      	blx	r4
  40a236:	4603      	mov	r3, r0
  40a238:	2b00      	cmp	r3, #0
  40a23a:	d190      	bne.n	40a15e <prvProcessReceivedCommands+0x12>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
  40a23c:	3724      	adds	r7, #36	; 0x24
  40a23e:	46bd      	mov	sp, r7
  40a240:	bd90      	pop	{r4, r7, pc}
  40a242:	bf00      	nop
  40a244:	0040a079 	.word	0x0040a079
  40a248:	004082e1 	.word	0x004082e1
  40a24c:	0040a0c5 	.word	0x0040a0c5
  40a250:	00409e61 	.word	0x00409e61
  40a254:	00408501 	.word	0x00408501
  40a258:	004086bd 	.word	0x004086bd
  40a25c:	2000888c 	.word	0x2000888c
  40a260:	00408bdd 	.word	0x00408bdd

0040a264 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  40a264:	b590      	push	{r4, r7, lr}
  40a266:	b08b      	sub	sp, #44	; 0x2c
  40a268:	af02      	add	r7, sp, #8
  40a26a:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40a26c:	e03e      	b.n	40a2ec <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40a26e:	4b28      	ldr	r3, [pc, #160]	; (40a310 <prvSwitchTimerLists+0xac>)
  40a270:	681b      	ldr	r3, [r3, #0]
  40a272:	68db      	ldr	r3, [r3, #12]
  40a274:	681b      	ldr	r3, [r3, #0]
  40a276:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40a278:	4b25      	ldr	r3, [pc, #148]	; (40a310 <prvSwitchTimerLists+0xac>)
  40a27a:	681b      	ldr	r3, [r3, #0]
  40a27c:	68db      	ldr	r3, [r3, #12]
  40a27e:	68db      	ldr	r3, [r3, #12]
  40a280:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  40a282:	69bb      	ldr	r3, [r7, #24]
  40a284:	3304      	adds	r3, #4
  40a286:	4618      	mov	r0, r3
  40a288:	4b22      	ldr	r3, [pc, #136]	; (40a314 <prvSwitchTimerLists+0xb0>)
  40a28a:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40a28c:	69bb      	ldr	r3, [r7, #24]
  40a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40a290:	69b8      	ldr	r0, [r7, #24]
  40a292:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40a294:	69bb      	ldr	r3, [r7, #24]
  40a296:	69db      	ldr	r3, [r3, #28]
  40a298:	2b01      	cmp	r3, #1
  40a29a:	d127      	bne.n	40a2ec <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  40a29c:	69bb      	ldr	r3, [r7, #24]
  40a29e:	699a      	ldr	r2, [r3, #24]
  40a2a0:	69fb      	ldr	r3, [r7, #28]
  40a2a2:	4413      	add	r3, r2
  40a2a4:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  40a2a6:	697a      	ldr	r2, [r7, #20]
  40a2a8:	69fb      	ldr	r3, [r7, #28]
  40a2aa:	429a      	cmp	r2, r3
  40a2ac:	d90e      	bls.n	40a2cc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40a2ae:	69bb      	ldr	r3, [r7, #24]
  40a2b0:	697a      	ldr	r2, [r7, #20]
  40a2b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40a2b4:	69bb      	ldr	r3, [r7, #24]
  40a2b6:	69ba      	ldr	r2, [r7, #24]
  40a2b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40a2ba:	4b15      	ldr	r3, [pc, #84]	; (40a310 <prvSwitchTimerLists+0xac>)
  40a2bc:	681a      	ldr	r2, [r3, #0]
  40a2be:	69bb      	ldr	r3, [r7, #24]
  40a2c0:	3304      	adds	r3, #4
  40a2c2:	4610      	mov	r0, r2
  40a2c4:	4619      	mov	r1, r3
  40a2c6:	4b14      	ldr	r3, [pc, #80]	; (40a318 <prvSwitchTimerLists+0xb4>)
  40a2c8:	4798      	blx	r3
  40a2ca:	e00f      	b.n	40a2ec <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  40a2cc:	2300      	movs	r3, #0
  40a2ce:	9300      	str	r3, [sp, #0]
  40a2d0:	69b8      	ldr	r0, [r7, #24]
  40a2d2:	2100      	movs	r1, #0
  40a2d4:	69fa      	ldr	r2, [r7, #28]
  40a2d6:	2300      	movs	r3, #0
  40a2d8:	4c10      	ldr	r4, [pc, #64]	; (40a31c <prvSwitchTimerLists+0xb8>)
  40a2da:	47a0      	blx	r4
  40a2dc:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  40a2de:	693b      	ldr	r3, [r7, #16]
  40a2e0:	2b00      	cmp	r3, #0
  40a2e2:	d103      	bne.n	40a2ec <prvSwitchTimerLists+0x88>
  40a2e4:	4b0e      	ldr	r3, [pc, #56]	; (40a320 <prvSwitchTimerLists+0xbc>)
  40a2e6:	4798      	blx	r3
  40a2e8:	bf00      	nop
  40a2ea:	e7fd      	b.n	40a2e8 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40a2ec:	4b08      	ldr	r3, [pc, #32]	; (40a310 <prvSwitchTimerLists+0xac>)
  40a2ee:	681b      	ldr	r3, [r3, #0]
  40a2f0:	681b      	ldr	r3, [r3, #0]
  40a2f2:	2b00      	cmp	r3, #0
  40a2f4:	d1bb      	bne.n	40a26e <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  40a2f6:	4b06      	ldr	r3, [pc, #24]	; (40a310 <prvSwitchTimerLists+0xac>)
  40a2f8:	681b      	ldr	r3, [r3, #0]
  40a2fa:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  40a2fc:	4b09      	ldr	r3, [pc, #36]	; (40a324 <prvSwitchTimerLists+0xc0>)
  40a2fe:	681a      	ldr	r2, [r3, #0]
  40a300:	4b03      	ldr	r3, [pc, #12]	; (40a310 <prvSwitchTimerLists+0xac>)
  40a302:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
  40a304:	4b07      	ldr	r3, [pc, #28]	; (40a324 <prvSwitchTimerLists+0xc0>)
  40a306:	68fa      	ldr	r2, [r7, #12]
  40a308:	601a      	str	r2, [r3, #0]
}
  40a30a:	3724      	adds	r7, #36	; 0x24
  40a30c:	46bd      	mov	sp, r7
  40a30e:	bd90      	pop	{r4, r7, pc}
  40a310:	20008884 	.word	0x20008884
  40a314:	004082e1 	.word	0x004082e1
  40a318:	00408271 	.word	0x00408271
  40a31c:	00409e61 	.word	0x00409e61
  40a320:	00408501 	.word	0x00408501
  40a324:	20008888 	.word	0x20008888

0040a328 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  40a328:	b580      	push	{r7, lr}
  40a32a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40a32c:	4b0e      	ldr	r3, [pc, #56]	; (40a368 <prvCheckForValidListAndQueue+0x40>)
  40a32e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40a330:	4b0e      	ldr	r3, [pc, #56]	; (40a36c <prvCheckForValidListAndQueue+0x44>)
  40a332:	681b      	ldr	r3, [r3, #0]
  40a334:	2b00      	cmp	r3, #0
  40a336:	d113      	bne.n	40a360 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  40a338:	480d      	ldr	r0, [pc, #52]	; (40a370 <prvCheckForValidListAndQueue+0x48>)
  40a33a:	4b0e      	ldr	r3, [pc, #56]	; (40a374 <prvCheckForValidListAndQueue+0x4c>)
  40a33c:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  40a33e:	480e      	ldr	r0, [pc, #56]	; (40a378 <prvCheckForValidListAndQueue+0x50>)
  40a340:	4b0c      	ldr	r3, [pc, #48]	; (40a374 <prvCheckForValidListAndQueue+0x4c>)
  40a342:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  40a344:	4b0d      	ldr	r3, [pc, #52]	; (40a37c <prvCheckForValidListAndQueue+0x54>)
  40a346:	4a0a      	ldr	r2, [pc, #40]	; (40a370 <prvCheckForValidListAndQueue+0x48>)
  40a348:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40a34a:	4b0d      	ldr	r3, [pc, #52]	; (40a380 <prvCheckForValidListAndQueue+0x58>)
  40a34c:	4a0a      	ldr	r2, [pc, #40]	; (40a378 <prvCheckForValidListAndQueue+0x50>)
  40a34e:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  40a350:	200a      	movs	r0, #10
  40a352:	210c      	movs	r1, #12
  40a354:	2200      	movs	r2, #0
  40a356:	4b0b      	ldr	r3, [pc, #44]	; (40a384 <prvCheckForValidListAndQueue+0x5c>)
  40a358:	4798      	blx	r3
  40a35a:	4602      	mov	r2, r0
  40a35c:	4b03      	ldr	r3, [pc, #12]	; (40a36c <prvCheckForValidListAndQueue+0x44>)
  40a35e:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  40a360:	4b09      	ldr	r3, [pc, #36]	; (40a388 <prvCheckForValidListAndQueue+0x60>)
  40a362:	4798      	blx	r3
}
  40a364:	bd80      	pop	{r7, pc}
  40a366:	bf00      	nop
  40a368:	004084bd 	.word	0x004084bd
  40a36c:	2000888c 	.word	0x2000888c
  40a370:	2000885c 	.word	0x2000885c
  40a374:	004081c9 	.word	0x004081c9
  40a378:	20008870 	.word	0x20008870
  40a37c:	20008884 	.word	0x20008884
  40a380:	20008888 	.word	0x20008888
  40a384:	00408919 	.word	0x00408919
  40a388:	004084d9 	.word	0x004084d9

0040a38c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer )
{
  40a38c:	b580      	push	{r7, lr}
  40a38e:	b084      	sub	sp, #16
  40a390:	af00      	add	r7, sp, #0
  40a392:	6078      	str	r0, [r7, #4]
portBASE_TYPE xTimerIsInActiveList;
xTIMER *pxTimer = ( xTIMER * ) xTimer;
  40a394:	687b      	ldr	r3, [r7, #4]
  40a396:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
  40a398:	4b08      	ldr	r3, [pc, #32]	; (40a3bc <xTimerIsTimerActive+0x30>)
  40a39a:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
  40a39c:	68fb      	ldr	r3, [r7, #12]
  40a39e:	695b      	ldr	r3, [r3, #20]
  40a3a0:	2b00      	cmp	r3, #0
  40a3a2:	bf0c      	ite	eq
  40a3a4:	2300      	moveq	r3, #0
  40a3a6:	2301      	movne	r3, #1
  40a3a8:	b2db      	uxtb	r3, r3
  40a3aa:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
  40a3ac:	4b04      	ldr	r3, [pc, #16]	; (40a3c0 <xTimerIsTimerActive+0x34>)
  40a3ae:	4798      	blx	r3

	return xTimerIsInActiveList;
  40a3b0:	68bb      	ldr	r3, [r7, #8]
}
  40a3b2:	4618      	mov	r0, r3
  40a3b4:	3710      	adds	r7, #16
  40a3b6:	46bd      	mov	sp, r7
  40a3b8:	bd80      	pop	{r7, pc}
  40a3ba:	bf00      	nop
  40a3bc:	004084bd 	.word	0x004084bd
  40a3c0:	004084d9 	.word	0x004084d9

0040a3c4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40a3c4:	b580      	push	{r7, lr}
  40a3c6:	b086      	sub	sp, #24
  40a3c8:	af00      	add	r7, sp, #0
  40a3ca:	60f8      	str	r0, [r7, #12]
  40a3cc:	60b9      	str	r1, [r7, #8]
  40a3ce:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40a3d0:	2300      	movs	r3, #0
  40a3d2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40a3d4:	68fb      	ldr	r3, [r7, #12]
  40a3d6:	2b01      	cmp	r3, #1
  40a3d8:	d008      	beq.n	40a3ec <_write+0x28>
  40a3da:	68fb      	ldr	r3, [r7, #12]
  40a3dc:	2b02      	cmp	r3, #2
  40a3de:	d005      	beq.n	40a3ec <_write+0x28>
  40a3e0:	68fb      	ldr	r3, [r7, #12]
  40a3e2:	2b03      	cmp	r3, #3
  40a3e4:	d002      	beq.n	40a3ec <_write+0x28>
		return -1;
  40a3e6:	f04f 33ff 	mov.w	r3, #4294967295
  40a3ea:	e01b      	b.n	40a424 <_write+0x60>
	}

	for (; len != 0; --len) {
  40a3ec:	e016      	b.n	40a41c <_write+0x58>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40a3ee:	4b0f      	ldr	r3, [pc, #60]	; (40a42c <_write+0x68>)
  40a3f0:	681a      	ldr	r2, [r3, #0]
  40a3f2:	4b0f      	ldr	r3, [pc, #60]	; (40a430 <_write+0x6c>)
  40a3f4:	6819      	ldr	r1, [r3, #0]
  40a3f6:	68bb      	ldr	r3, [r7, #8]
  40a3f8:	1c58      	adds	r0, r3, #1
  40a3fa:	60b8      	str	r0, [r7, #8]
  40a3fc:	781b      	ldrb	r3, [r3, #0]
  40a3fe:	4608      	mov	r0, r1
  40a400:	4619      	mov	r1, r3
  40a402:	4790      	blx	r2
  40a404:	4603      	mov	r3, r0
  40a406:	2b00      	cmp	r3, #0
  40a408:	da02      	bge.n	40a410 <_write+0x4c>
			return -1;
  40a40a:	f04f 33ff 	mov.w	r3, #4294967295
  40a40e:	e009      	b.n	40a424 <_write+0x60>
		}
		++nChars;
  40a410:	697b      	ldr	r3, [r7, #20]
  40a412:	3301      	adds	r3, #1
  40a414:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40a416:	687b      	ldr	r3, [r7, #4]
  40a418:	3b01      	subs	r3, #1
  40a41a:	607b      	str	r3, [r7, #4]
  40a41c:	687b      	ldr	r3, [r7, #4]
  40a41e:	2b00      	cmp	r3, #0
  40a420:	d1e5      	bne.n	40a3ee <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  40a422:	697b      	ldr	r3, [r7, #20]
}
  40a424:	4618      	mov	r0, r3
  40a426:	3718      	adds	r7, #24
  40a428:	46bd      	mov	sp, r7
  40a42a:	bd80      	pop	{r7, pc}
  40a42c:	200099c4 	.word	0x200099c4
  40a430:	200099c8 	.word	0x200099c8

0040a434 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  40a434:	b480      	push	{r7}
  40a436:	b083      	sub	sp, #12
  40a438:	af00      	add	r7, sp, #0
  40a43a:	6078      	str	r0, [r7, #4]
  40a43c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  40a43e:	683a      	ldr	r2, [r7, #0]
  40a440:	f240 2302 	movw	r3, #514	; 0x202
  40a444:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  40a446:	687a      	ldr	r2, [r7, #4]
  40a448:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
  40a44a:	370c      	adds	r7, #12
  40a44c:	46bd      	mov	sp, r7
  40a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a452:	4770      	bx	lr

0040a454 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  40a454:	b480      	push	{r7}
  40a456:	b083      	sub	sp, #12
  40a458:	af00      	add	r7, sp, #0
  40a45a:	6078      	str	r0, [r7, #4]
  40a45c:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  40a45e:	683b      	ldr	r3, [r7, #0]
  40a460:	2b00      	cmp	r3, #0
  40a462:	d006      	beq.n	40a472 <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  40a464:	687b      	ldr	r3, [r7, #4]
  40a466:	685b      	ldr	r3, [r3, #4]
  40a468:	f043 0201 	orr.w	r2, r3, #1
  40a46c:	687b      	ldr	r3, [r7, #4]
  40a46e:	605a      	str	r2, [r3, #4]
  40a470:	e005      	b.n	40a47e <rtc_set_hour_mode+0x2a>
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40a472:	687b      	ldr	r3, [r7, #4]
  40a474:	685b      	ldr	r3, [r3, #4]
  40a476:	f023 0201 	bic.w	r2, r3, #1
  40a47a:	687b      	ldr	r3, [r7, #4]
  40a47c:	605a      	str	r2, [r3, #4]
	}
}
  40a47e:	370c      	adds	r7, #12
  40a480:	46bd      	mov	sp, r7
  40a482:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a486:	4770      	bx	lr

0040a488 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  40a488:	b480      	push	{r7}
  40a48a:	b087      	sub	sp, #28
  40a48c:	af00      	add	r7, sp, #0
  40a48e:	60f8      	str	r0, [r7, #12]
  40a490:	60b9      	str	r1, [r7, #8]
  40a492:	607a      	str	r2, [r7, #4]
  40a494:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  40a496:	68fb      	ldr	r3, [r7, #12]
  40a498:	689b      	ldr	r3, [r3, #8]
  40a49a:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  40a49c:	e002      	b.n	40a4a4 <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  40a49e:	68fb      	ldr	r3, [r7, #12]
  40a4a0:	689b      	ldr	r3, [r3, #8]
  40a4a2:	617b      	str	r3, [r7, #20]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  40a4a4:	68fb      	ldr	r3, [r7, #12]
  40a4a6:	689a      	ldr	r2, [r3, #8]
  40a4a8:	697b      	ldr	r3, [r7, #20]
  40a4aa:	429a      	cmp	r2, r3
  40a4ac:	d1f7      	bne.n	40a49e <rtc_get_time+0x16>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  40a4ae:	68bb      	ldr	r3, [r7, #8]
  40a4b0:	2b00      	cmp	r3, #0
  40a4b2:	d01c      	beq.n	40a4ee <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  40a4b4:	697b      	ldr	r3, [r7, #20]
  40a4b6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
  40a4ba:	0c1b      	lsrs	r3, r3, #16
  40a4bc:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a4be:	693b      	ldr	r3, [r7, #16]
  40a4c0:	091a      	lsrs	r2, r3, #4
  40a4c2:	4613      	mov	r3, r2
  40a4c4:	009b      	lsls	r3, r3, #2
  40a4c6:	4413      	add	r3, r2
  40a4c8:	005b      	lsls	r3, r3, #1
  40a4ca:	461a      	mov	r2, r3
  40a4cc:	693b      	ldr	r3, [r7, #16]
  40a4ce:	f003 030f 	and.w	r3, r3, #15
  40a4d2:	441a      	add	r2, r3
  40a4d4:	68bb      	ldr	r3, [r7, #8]
  40a4d6:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  40a4d8:	697b      	ldr	r3, [r7, #20]
  40a4da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  40a4de:	2b00      	cmp	r3, #0
  40a4e0:	d005      	beq.n	40a4ee <rtc_get_time+0x66>
			*pul_hour += 12;
  40a4e2:	68bb      	ldr	r3, [r7, #8]
  40a4e4:	681b      	ldr	r3, [r3, #0]
  40a4e6:	f103 020c 	add.w	r2, r3, #12
  40a4ea:	68bb      	ldr	r3, [r7, #8]
  40a4ec:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  40a4ee:	687b      	ldr	r3, [r7, #4]
  40a4f0:	2b00      	cmp	r3, #0
  40a4f2:	d011      	beq.n	40a518 <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  40a4f4:	697b      	ldr	r3, [r7, #20]
  40a4f6:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
  40a4fa:	0a1b      	lsrs	r3, r3, #8
  40a4fc:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  40a4fe:	693b      	ldr	r3, [r7, #16]
  40a500:	091a      	lsrs	r2, r3, #4
  40a502:	4613      	mov	r3, r2
  40a504:	009b      	lsls	r3, r3, #2
  40a506:	4413      	add	r3, r2
  40a508:	005b      	lsls	r3, r3, #1
  40a50a:	461a      	mov	r2, r3
  40a50c:	693b      	ldr	r3, [r7, #16]
  40a50e:	f003 030f 	and.w	r3, r3, #15
  40a512:	441a      	add	r2, r3
  40a514:	687b      	ldr	r3, [r7, #4]
  40a516:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  40a518:	683b      	ldr	r3, [r7, #0]
  40a51a:	2b00      	cmp	r3, #0
  40a51c:	d010      	beq.n	40a540 <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  40a51e:	697b      	ldr	r3, [r7, #20]
  40a520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40a524:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a526:	693b      	ldr	r3, [r7, #16]
  40a528:	091a      	lsrs	r2, r3, #4
  40a52a:	4613      	mov	r3, r2
  40a52c:	009b      	lsls	r3, r3, #2
  40a52e:	4413      	add	r3, r2
  40a530:	005b      	lsls	r3, r3, #1
  40a532:	461a      	mov	r2, r3
  40a534:	693b      	ldr	r3, [r7, #16]
  40a536:	f003 030f 	and.w	r3, r3, #15
  40a53a:	441a      	add	r2, r3
  40a53c:	683b      	ldr	r3, [r7, #0]
  40a53e:	601a      	str	r2, [r3, #0]
	}
}
  40a540:	371c      	adds	r7, #28
  40a542:	46bd      	mov	sp, r7
  40a544:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a548:	4770      	bx	lr
  40a54a:	bf00      	nop

0040a54c <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  40a54c:	b480      	push	{r7}
  40a54e:	b087      	sub	sp, #28
  40a550:	af00      	add	r7, sp, #0
  40a552:	60f8      	str	r0, [r7, #12]
  40a554:	60b9      	str	r1, [r7, #8]
  40a556:	607a      	str	r2, [r7, #4]
  40a558:	603b      	str	r3, [r7, #0]
	uint32_t ul_time = 0;
  40a55a:	2300      	movs	r3, #0
  40a55c:	617b      	str	r3, [r7, #20]

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  40a55e:	68fb      	ldr	r3, [r7, #12]
  40a560:	685b      	ldr	r3, [r3, #4]
  40a562:	f003 0301 	and.w	r3, r3, #1
  40a566:	2b00      	cmp	r3, #0
  40a568:	d009      	beq.n	40a57e <rtc_set_time+0x32>
		if (ul_hour > 12) {
  40a56a:	68bb      	ldr	r3, [r7, #8]
  40a56c:	2b0c      	cmp	r3, #12
  40a56e:	d906      	bls.n	40a57e <rtc_set_time+0x32>
			ul_hour -= 12;
  40a570:	68bb      	ldr	r3, [r7, #8]
  40a572:	3b0c      	subs	r3, #12
  40a574:	60bb      	str	r3, [r7, #8]
			ul_time |= RTC_TIMR_AMPM;
  40a576:	697b      	ldr	r3, [r7, #20]
  40a578:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40a57c:	617b      	str	r3, [r7, #20]
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40a57e:	68ba      	ldr	r2, [r7, #8]
  40a580:	4b33      	ldr	r3, [pc, #204]	; (40a650 <rtc_set_time+0x104>)
  40a582:	fba3 1302 	umull	r1, r3, r3, r2
  40a586:	08db      	lsrs	r3, r3, #3
  40a588:	0518      	lsls	r0, r3, #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40a58a:	68b9      	ldr	r1, [r7, #8]
  40a58c:	4b30      	ldr	r3, [pc, #192]	; (40a650 <rtc_set_time+0x104>)
  40a58e:	fba3 2301 	umull	r2, r3, r3, r1
  40a592:	08da      	lsrs	r2, r3, #3
  40a594:	4613      	mov	r3, r2
  40a596:	009b      	lsls	r3, r3, #2
  40a598:	4413      	add	r3, r2
  40a59a:	005b      	lsls	r3, r3, #1
  40a59c:	1aca      	subs	r2, r1, r3
  40a59e:	0413      	lsls	r3, r2, #16
			ul_time |= RTC_TIMR_AMPM;
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40a5a0:	4303      	orrs	r3, r0
  40a5a2:	697a      	ldr	r2, [r7, #20]
  40a5a4:	4313      	orrs	r3, r2
  40a5a6:	617b      	str	r3, [r7, #20]
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40a5a8:	687a      	ldr	r2, [r7, #4]
  40a5aa:	4b29      	ldr	r3, [pc, #164]	; (40a650 <rtc_set_time+0x104>)
  40a5ac:	fba3 1302 	umull	r1, r3, r3, r2
  40a5b0:	08db      	lsrs	r3, r3, #3
  40a5b2:	0318      	lsls	r0, r3, #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  40a5b4:	6879      	ldr	r1, [r7, #4]
  40a5b6:	4b26      	ldr	r3, [pc, #152]	; (40a650 <rtc_set_time+0x104>)
  40a5b8:	fba3 2301 	umull	r2, r3, r3, r1
  40a5bc:	08da      	lsrs	r2, r3, #3
  40a5be:	4613      	mov	r3, r2
  40a5c0:	009b      	lsls	r3, r3, #2
  40a5c2:	4413      	add	r3, r2
  40a5c4:	005b      	lsls	r3, r3, #1
  40a5c6:	1aca      	subs	r2, r1, r3
  40a5c8:	0213      	lsls	r3, r2, #8
	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40a5ca:	4303      	orrs	r3, r0
  40a5cc:	697a      	ldr	r2, [r7, #20]
  40a5ce:	4313      	orrs	r3, r2
  40a5d0:	617b      	str	r3, [r7, #20]
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40a5d2:	683a      	ldr	r2, [r7, #0]
  40a5d4:	4b1e      	ldr	r3, [pc, #120]	; (40a650 <rtc_set_time+0x104>)
  40a5d6:	fba3 1302 	umull	r1, r3, r3, r2
  40a5da:	08db      	lsrs	r3, r3, #3
  40a5dc:	0118      	lsls	r0, r3, #4
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40a5de:	6839      	ldr	r1, [r7, #0]
  40a5e0:	4b1b      	ldr	r3, [pc, #108]	; (40a650 <rtc_set_time+0x104>)
  40a5e2:	fba3 2301 	umull	r2, r3, r3, r1
  40a5e6:	08da      	lsrs	r2, r3, #3
  40a5e8:	4613      	mov	r3, r2
  40a5ea:	009b      	lsls	r3, r3, #2
  40a5ec:	4413      	add	r3, r2
  40a5ee:	005b      	lsls	r3, r3, #1
  40a5f0:	1aca      	subs	r2, r1, r3
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40a5f2:	ea40 0302 	orr.w	r3, r0, r2
  40a5f6:	697a      	ldr	r2, [r7, #20]
  40a5f8:	4313      	orrs	r3, r2
  40a5fa:	617b      	str	r3, [r7, #20]
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);

	/* Update time register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  40a5fc:	68fb      	ldr	r3, [r7, #12]
  40a5fe:	681b      	ldr	r3, [r3, #0]
  40a600:	f043 0201 	orr.w	r2, r3, #1
  40a604:	68fb      	ldr	r3, [r7, #12]
  40a606:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40a608:	bf00      	nop
  40a60a:	68fb      	ldr	r3, [r7, #12]
  40a60c:	699b      	ldr	r3, [r3, #24]
  40a60e:	f003 0301 	and.w	r3, r3, #1
  40a612:	2b00      	cmp	r3, #0
  40a614:	d0f9      	beq.n	40a60a <rtc_set_time+0xbe>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40a616:	68fb      	ldr	r3, [r7, #12]
  40a618:	2201      	movs	r2, #1
  40a61a:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_TIMR = ul_time;
  40a61c:	68fb      	ldr	r3, [r7, #12]
  40a61e:	697a      	ldr	r2, [r7, #20]
  40a620:	609a      	str	r2, [r3, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  40a622:	68fb      	ldr	r3, [r7, #12]
  40a624:	681b      	ldr	r3, [r3, #0]
  40a626:	f023 0201 	bic.w	r2, r3, #1
  40a62a:	68fb      	ldr	r3, [r7, #12]
  40a62c:	601a      	str	r2, [r3, #0]
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  40a62e:	68fb      	ldr	r3, [r7, #12]
  40a630:	69db      	ldr	r3, [r3, #28]
  40a632:	f043 0204 	orr.w	r2, r3, #4
  40a636:	68fb      	ldr	r3, [r7, #12]
  40a638:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  40a63a:	68fb      	ldr	r3, [r7, #12]
  40a63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40a63e:	f003 0301 	and.w	r3, r3, #1
}
  40a642:	4618      	mov	r0, r3
  40a644:	371c      	adds	r7, #28
  40a646:	46bd      	mov	sp, r7
  40a648:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a64c:	4770      	bx	lr
  40a64e:	bf00      	nop
  40a650:	cccccccd 	.word	0xcccccccd

0040a654 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  40a654:	b480      	push	{r7}
  40a656:	b089      	sub	sp, #36	; 0x24
  40a658:	af00      	add	r7, sp, #0
  40a65a:	60f8      	str	r0, [r7, #12]
  40a65c:	60b9      	str	r1, [r7, #8]
  40a65e:	607a      	str	r2, [r7, #4]
  40a660:	603b      	str	r3, [r7, #0]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  40a662:	68fb      	ldr	r3, [r7, #12]
  40a664:	68db      	ldr	r3, [r3, #12]
  40a666:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  40a668:	e002      	b.n	40a670 <rtc_get_date+0x1c>
		ul_date = p_rtc->RTC_CALR;
  40a66a:	68fb      	ldr	r3, [r7, #12]
  40a66c:	68db      	ldr	r3, [r3, #12]
  40a66e:	61fb      	str	r3, [r7, #28]
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
	while (ul_date != p_rtc->RTC_CALR) {
  40a670:	68fb      	ldr	r3, [r7, #12]
  40a672:	68da      	ldr	r2, [r3, #12]
  40a674:	69fb      	ldr	r3, [r7, #28]
  40a676:	429a      	cmp	r2, r3
  40a678:	d1f7      	bne.n	40a66a <rtc_get_date+0x16>
		ul_date = p_rtc->RTC_CALR;
	}

	/* Retrieve year */
	if (pul_year) {
  40a67a:	68bb      	ldr	r3, [r7, #8]
  40a67c:	2b00      	cmp	r3, #0
  40a67e:	d025      	beq.n	40a6cc <rtc_get_date+0x78>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
  40a680:	69fb      	ldr	r3, [r7, #28]
  40a682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40a686:	61bb      	str	r3, [r7, #24]
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a688:	69bb      	ldr	r3, [r7, #24]
  40a68a:	091a      	lsrs	r2, r3, #4
  40a68c:	4613      	mov	r3, r2
  40a68e:	009b      	lsls	r3, r3, #2
  40a690:	4413      	add	r3, r2
  40a692:	005b      	lsls	r3, r3, #1
  40a694:	461a      	mov	r2, r3
  40a696:	69bb      	ldr	r3, [r7, #24]
  40a698:	f003 030f 	and.w	r3, r3, #15
  40a69c:	4413      	add	r3, r2
  40a69e:	617b      	str	r3, [r7, #20]
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  40a6a0:	69fb      	ldr	r3, [r7, #28]
  40a6a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  40a6a6:	0a1b      	lsrs	r3, r3, #8
  40a6a8:	61bb      	str	r3, [r7, #24]
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40a6aa:	697b      	ldr	r3, [r7, #20]
  40a6ac:	2264      	movs	r2, #100	; 0x64
  40a6ae:	fb02 f103 	mul.w	r1, r2, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a6b2:	69bb      	ldr	r3, [r7, #24]
  40a6b4:	091a      	lsrs	r2, r3, #4
  40a6b6:	4613      	mov	r3, r2
  40a6b8:	009b      	lsls	r3, r3, #2
  40a6ba:	4413      	add	r3, r2
  40a6bc:	005b      	lsls	r3, r3, #1
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40a6be:	18ca      	adds	r2, r1, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a6c0:	69bb      	ldr	r3, [r7, #24]
  40a6c2:	f003 030f 	and.w	r3, r3, #15
  40a6c6:	441a      	add	r2, r3
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40a6c8:	68bb      	ldr	r3, [r7, #8]
  40a6ca:	601a      	str	r2, [r3, #0]
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
	}

	/* Retrieve month */
	if (pul_month) {
  40a6cc:	687b      	ldr	r3, [r7, #4]
  40a6ce:	2b00      	cmp	r3, #0
  40a6d0:	d011      	beq.n	40a6f6 <rtc_get_date+0xa2>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  40a6d2:	69fb      	ldr	r3, [r7, #28]
  40a6d4:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
  40a6d8:	0c1b      	lsrs	r3, r3, #16
  40a6da:	61bb      	str	r3, [r7, #24]
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a6dc:	69bb      	ldr	r3, [r7, #24]
  40a6de:	091a      	lsrs	r2, r3, #4
  40a6e0:	4613      	mov	r3, r2
  40a6e2:	009b      	lsls	r3, r3, #2
  40a6e4:	4413      	add	r3, r2
  40a6e6:	005b      	lsls	r3, r3, #1
  40a6e8:	461a      	mov	r2, r3
  40a6ea:	69bb      	ldr	r3, [r7, #24]
  40a6ec:	f003 030f 	and.w	r3, r3, #15
  40a6f0:	441a      	add	r2, r3
  40a6f2:	687b      	ldr	r3, [r7, #4]
  40a6f4:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  40a6f6:	683b      	ldr	r3, [r7, #0]
  40a6f8:	2b00      	cmp	r3, #0
  40a6fa:	d011      	beq.n	40a720 <rtc_get_date+0xcc>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  40a6fc:	69fb      	ldr	r3, [r7, #28]
  40a6fe:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  40a702:	0e1b      	lsrs	r3, r3, #24
  40a704:	61bb      	str	r3, [r7, #24]
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40a706:	69bb      	ldr	r3, [r7, #24]
  40a708:	091a      	lsrs	r2, r3, #4
  40a70a:	4613      	mov	r3, r2
  40a70c:	009b      	lsls	r3, r3, #2
  40a70e:	4413      	add	r3, r2
  40a710:	005b      	lsls	r3, r3, #1
  40a712:	461a      	mov	r2, r3
  40a714:	69bb      	ldr	r3, [r7, #24]
  40a716:	f003 030f 	and.w	r3, r3, #15
  40a71a:	441a      	add	r2, r3
  40a71c:	683b      	ldr	r3, [r7, #0]
  40a71e:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  40a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40a722:	2b00      	cmp	r3, #0
  40a724:	d005      	beq.n	40a732 <rtc_get_date+0xde>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  40a726:	69fb      	ldr	r3, [r7, #28]
  40a728:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
  40a72c:	0d5a      	lsrs	r2, r3, #21
  40a72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40a730:	601a      	str	r2, [r3, #0]
	}
}
  40a732:	3724      	adds	r7, #36	; 0x24
  40a734:	46bd      	mov	sp, r7
  40a736:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a73a:	4770      	bx	lr

0040a73c <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  40a73c:	b480      	push	{r7}
  40a73e:	b087      	sub	sp, #28
  40a740:	af00      	add	r7, sp, #0
  40a742:	60f8      	str	r0, [r7, #12]
  40a744:	60b9      	str	r1, [r7, #8]
  40a746:	607a      	str	r2, [r7, #4]
  40a748:	603b      	str	r3, [r7, #0]
	uint32_t ul_date = 0;
  40a74a:	2300      	movs	r3, #0
  40a74c:	617b      	str	r3, [r7, #20]

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  40a74e:	68ba      	ldr	r2, [r7, #8]
  40a750:	4b46      	ldr	r3, [pc, #280]	; (40a86c <rtc_set_date+0x130>)
  40a752:	fba3 1302 	umull	r1, r3, r3, r2
  40a756:	099b      	lsrs	r3, r3, #6
  40a758:	0118      	lsls	r0, r3, #4
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  40a75a:	68ba      	ldr	r2, [r7, #8]
  40a75c:	4b44      	ldr	r3, [pc, #272]	; (40a870 <rtc_set_date+0x134>)
  40a75e:	fba3 1302 	umull	r1, r3, r3, r2
  40a762:	0959      	lsrs	r1, r3, #5
  40a764:	4b43      	ldr	r3, [pc, #268]	; (40a874 <rtc_set_date+0x138>)
  40a766:	fba3 2301 	umull	r2, r3, r3, r1
  40a76a:	08da      	lsrs	r2, r3, #3
  40a76c:	4613      	mov	r3, r2
  40a76e:	009b      	lsls	r3, r3, #2
  40a770:	4413      	add	r3, r2
  40a772:	005b      	lsls	r3, r3, #1
  40a774:	1aca      	subs	r2, r1, r3
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  40a776:	ea40 0302 	orr.w	r3, r0, r2
		uint32_t ul_day, uint32_t ul_week)
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  40a77a:	697a      	ldr	r2, [r7, #20]
  40a77c:	4313      	orrs	r3, r2
  40a77e:	617b      	str	r3, [r7, #20]
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40a780:	68ba      	ldr	r2, [r7, #8]
  40a782:	4b3c      	ldr	r3, [pc, #240]	; (40a874 <rtc_set_date+0x138>)
  40a784:	fba3 1302 	umull	r1, r3, r3, r2
  40a788:	08d9      	lsrs	r1, r3, #3
  40a78a:	4b3a      	ldr	r3, [pc, #232]	; (40a874 <rtc_set_date+0x138>)
  40a78c:	fba3 2301 	umull	r2, r3, r3, r1
  40a790:	08da      	lsrs	r2, r3, #3
  40a792:	4613      	mov	r3, r2
  40a794:	009b      	lsls	r3, r3, #2
  40a796:	4413      	add	r3, r2
  40a798:	005b      	lsls	r3, r3, #1
  40a79a:	1aca      	subs	r2, r1, r3
  40a79c:	0310      	lsls	r0, r2, #12
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  40a79e:	68b9      	ldr	r1, [r7, #8]
  40a7a0:	4b34      	ldr	r3, [pc, #208]	; (40a874 <rtc_set_date+0x138>)
  40a7a2:	fba3 2301 	umull	r2, r3, r3, r1
  40a7a6:	08da      	lsrs	r2, r3, #3
  40a7a8:	4613      	mov	r3, r2
  40a7aa:	009b      	lsls	r3, r3, #2
  40a7ac:	4413      	add	r3, r2
  40a7ae:	005b      	lsls	r3, r3, #1
  40a7b0:	1aca      	subs	r2, r1, r3
  40a7b2:	0213      	lsls	r3, r2, #8
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  40a7b4:	4303      	orrs	r3, r0
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40a7b6:	697a      	ldr	r2, [r7, #20]
  40a7b8:	4313      	orrs	r3, r2
  40a7ba:	617b      	str	r3, [r7, #20]
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40a7bc:	687a      	ldr	r2, [r7, #4]
  40a7be:	4b2d      	ldr	r3, [pc, #180]	; (40a874 <rtc_set_date+0x138>)
  40a7c0:	fba3 1302 	umull	r1, r3, r3, r2
  40a7c4:	08db      	lsrs	r3, r3, #3
  40a7c6:	0518      	lsls	r0, r3, #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40a7c8:	6879      	ldr	r1, [r7, #4]
  40a7ca:	4b2a      	ldr	r3, [pc, #168]	; (40a874 <rtc_set_date+0x138>)
  40a7cc:	fba3 2301 	umull	r2, r3, r3, r1
  40a7d0:	08da      	lsrs	r2, r3, #3
  40a7d2:	4613      	mov	r3, r2
  40a7d4:	009b      	lsls	r3, r3, #2
  40a7d6:	4413      	add	r3, r2
  40a7d8:	005b      	lsls	r3, r3, #1
  40a7da:	1aca      	subs	r2, r1, r3
  40a7dc:	0413      	lsls	r3, r2, #16
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40a7de:	4303      	orrs	r3, r0
  40a7e0:	697a      	ldr	r2, [r7, #20]
  40a7e2:	4313      	orrs	r3, r2
  40a7e4:	617b      	str	r3, [r7, #20]
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40a7e6:	6a3b      	ldr	r3, [r7, #32]
  40a7e8:	055b      	lsls	r3, r3, #21
  40a7ea:	697a      	ldr	r2, [r7, #20]
  40a7ec:	4313      	orrs	r3, r2
  40a7ee:	617b      	str	r3, [r7, #20]

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40a7f0:	683a      	ldr	r2, [r7, #0]
  40a7f2:	4b20      	ldr	r3, [pc, #128]	; (40a874 <rtc_set_date+0x138>)
  40a7f4:	fba3 1302 	umull	r1, r3, r3, r2
  40a7f8:	08db      	lsrs	r3, r3, #3
  40a7fa:	0718      	lsls	r0, r3, #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40a7fc:	6839      	ldr	r1, [r7, #0]
  40a7fe:	4b1d      	ldr	r3, [pc, #116]	; (40a874 <rtc_set_date+0x138>)
  40a800:	fba3 2301 	umull	r2, r3, r3, r1
  40a804:	08da      	lsrs	r2, r3, #3
  40a806:	4613      	mov	r3, r2
  40a808:	009b      	lsls	r3, r3, #2
  40a80a:	4413      	add	r3, r2
  40a80c:	005b      	lsls	r3, r3, #1
  40a80e:	1aca      	subs	r2, r1, r3
  40a810:	0613      	lsls	r3, r2, #24

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40a812:	4303      	orrs	r3, r0
  40a814:	697a      	ldr	r2, [r7, #20]
  40a816:	4313      	orrs	r3, r2
  40a818:	617b      	str	r3, [r7, #20]
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);

	/* Update calendar register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40a81a:	68fb      	ldr	r3, [r7, #12]
  40a81c:	681b      	ldr	r3, [r3, #0]
  40a81e:	f043 0202 	orr.w	r2, r3, #2
  40a822:	68fb      	ldr	r3, [r7, #12]
  40a824:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40a826:	bf00      	nop
  40a828:	68fb      	ldr	r3, [r7, #12]
  40a82a:	699b      	ldr	r3, [r3, #24]
  40a82c:	f003 0301 	and.w	r3, r3, #1
  40a830:	2b00      	cmp	r3, #0
  40a832:	d0f9      	beq.n	40a828 <rtc_set_date+0xec>

	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40a834:	68fb      	ldr	r3, [r7, #12]
  40a836:	2201      	movs	r2, #1
  40a838:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_CALR = ul_date;
  40a83a:	68fb      	ldr	r3, [r7, #12]
  40a83c:	697a      	ldr	r2, [r7, #20]
  40a83e:	60da      	str	r2, [r3, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40a840:	68fb      	ldr	r3, [r7, #12]
  40a842:	681b      	ldr	r3, [r3, #0]
  40a844:	f023 0202 	bic.w	r2, r3, #2
  40a848:	68fb      	ldr	r3, [r7, #12]
  40a84a:	601a      	str	r2, [r3, #0]
	/* Clear SECENV in SCCR */
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  40a84c:	68fb      	ldr	r3, [r7, #12]
  40a84e:	69db      	ldr	r3, [r3, #28]
  40a850:	f043 0204 	orr.w	r2, r3, #4
  40a854:	68fb      	ldr	r3, [r7, #12]
  40a856:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40a858:	68fb      	ldr	r3, [r7, #12]
  40a85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40a85c:	f003 0302 	and.w	r3, r3, #2
}
  40a860:	4618      	mov	r0, r3
  40a862:	371c      	adds	r7, #28
  40a864:	46bd      	mov	sp, r7
  40a866:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a86a:	4770      	bx	lr
  40a86c:	10624dd3 	.word	0x10624dd3
  40a870:	51eb851f 	.word	0x51eb851f
  40a874:	cccccccd 	.word	0xcccccccd

0040a878 <rtc_clear_time_alarm>:
 * \brief Clear the RTC time alarm setting.
 *
 * \param p_rtc Pointer to an RTC instance.
 */
void rtc_clear_time_alarm(Rtc *p_rtc)
{
  40a878:	b480      	push	{r7}
  40a87a:	b083      	sub	sp, #12
  40a87c:	af00      	add	r7, sp, #0
  40a87e:	6078      	str	r0, [r7, #4]
	p_rtc->RTC_TIMALR = 0;
  40a880:	687b      	ldr	r3, [r7, #4]
  40a882:	2200      	movs	r2, #0
  40a884:	611a      	str	r2, [r3, #16]
}
  40a886:	370c      	adds	r7, #12
  40a888:	46bd      	mov	sp, r7
  40a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a88e:	4770      	bx	lr

0040a890 <rtc_clear_date_alarm>:
 * \brief Clear the RTC date alarm setting.
 *
 * \param p_rtc Pointer to an RTC instance.
 */
void rtc_clear_date_alarm(Rtc *p_rtc)
{
  40a890:	b480      	push	{r7}
  40a892:	b083      	sub	sp, #12
  40a894:	af00      	add	r7, sp, #0
  40a896:	6078      	str	r0, [r7, #4]
	/* Need a valid value without enabling */
	p_rtc->RTC_CALALR = RTC_CALALR_MONTH(0x01) | RTC_CALALR_DATE(0x01);
  40a898:	687b      	ldr	r3, [r7, #4]
  40a89a:	4a03      	ldr	r2, [pc, #12]	; (40a8a8 <rtc_clear_date_alarm+0x18>)
  40a89c:	615a      	str	r2, [r3, #20]
}
  40a89e:	370c      	adds	r7, #12
  40a8a0:	46bd      	mov	sp, r7
  40a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a8a6:	4770      	bx	lr
  40a8a8:	01010000 	.word	0x01010000

0040a8ac <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40a8ac:	b480      	push	{r7}
  40a8ae:	b085      	sub	sp, #20
  40a8b0:	af00      	add	r7, sp, #0
  40a8b2:	6078      	str	r0, [r7, #4]
  40a8b4:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40a8b6:	2300      	movs	r3, #0
  40a8b8:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40a8ba:	687b      	ldr	r3, [r7, #4]
  40a8bc:	22ac      	movs	r2, #172	; 0xac
  40a8be:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40a8c0:	683b      	ldr	r3, [r7, #0]
  40a8c2:	681a      	ldr	r2, [r3, #0]
  40a8c4:	683b      	ldr	r3, [r7, #0]
  40a8c6:	685b      	ldr	r3, [r3, #4]
  40a8c8:	fbb2 f3f3 	udiv	r3, r2, r3
  40a8cc:	091b      	lsrs	r3, r3, #4
  40a8ce:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40a8d0:	68fb      	ldr	r3, [r7, #12]
  40a8d2:	2b00      	cmp	r3, #0
  40a8d4:	d003      	beq.n	40a8de <uart_init+0x32>
  40a8d6:	68fb      	ldr	r3, [r7, #12]
  40a8d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40a8dc:	d301      	bcc.n	40a8e2 <uart_init+0x36>
		return 1;
  40a8de:	2301      	movs	r3, #1
  40a8e0:	e00f      	b.n	40a902 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  40a8e2:	687b      	ldr	r3, [r7, #4]
  40a8e4:	68fa      	ldr	r2, [r7, #12]
  40a8e6:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40a8e8:	683b      	ldr	r3, [r7, #0]
  40a8ea:	689a      	ldr	r2, [r3, #8]
  40a8ec:	687b      	ldr	r3, [r7, #4]
  40a8ee:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40a8f0:	687b      	ldr	r3, [r7, #4]
  40a8f2:	f240 2202 	movw	r2, #514	; 0x202
  40a8f6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40a8fa:	687b      	ldr	r3, [r7, #4]
  40a8fc:	2250      	movs	r2, #80	; 0x50
  40a8fe:	601a      	str	r2, [r3, #0]

	return 0;
  40a900:	2300      	movs	r3, #0
}
  40a902:	4618      	mov	r0, r3
  40a904:	3714      	adds	r7, #20
  40a906:	46bd      	mov	sp, r7
  40a908:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a90c:	4770      	bx	lr
  40a90e:	bf00      	nop

0040a910 <uart_disable>:
 * \brief Disable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_disable(Uart *p_uart)
{
  40a910:	b480      	push	{r7}
  40a912:	b083      	sub	sp, #12
  40a914:	af00      	add	r7, sp, #0
  40a916:	6078      	str	r0, [r7, #4]
	/* Disable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXDIS | UART_CR_TXDIS;
  40a918:	687b      	ldr	r3, [r7, #4]
  40a91a:	22a0      	movs	r2, #160	; 0xa0
  40a91c:	601a      	str	r2, [r3, #0]
}
  40a91e:	370c      	adds	r7, #12
  40a920:	46bd      	mov	sp, r7
  40a922:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a926:	4770      	bx	lr

0040a928 <uart_disable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
  40a928:	b480      	push	{r7}
  40a92a:	b083      	sub	sp, #12
  40a92c:	af00      	add	r7, sp, #0
  40a92e:	6078      	str	r0, [r7, #4]
  40a930:	6039      	str	r1, [r7, #0]
	p_uart->UART_IDR = ul_sources;
  40a932:	687b      	ldr	r3, [r7, #4]
  40a934:	683a      	ldr	r2, [r7, #0]
  40a936:	60da      	str	r2, [r3, #12]
}
  40a938:	370c      	adds	r7, #12
  40a93a:	46bd      	mov	sp, r7
  40a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a940:	4770      	bx	lr
  40a942:	bf00      	nop

0040a944 <uart_get_status>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
  40a944:	b480      	push	{r7}
  40a946:	b083      	sub	sp, #12
  40a948:	af00      	add	r7, sp, #0
  40a94a:	6078      	str	r0, [r7, #4]
	return p_uart->UART_SR;
  40a94c:	687b      	ldr	r3, [r7, #4]
  40a94e:	695b      	ldr	r3, [r3, #20]
}
  40a950:	4618      	mov	r0, r3
  40a952:	370c      	adds	r7, #12
  40a954:	46bd      	mov	sp, r7
  40a956:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a95a:	4770      	bx	lr

0040a95c <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  40a95c:	b480      	push	{r7}
  40a95e:	b083      	sub	sp, #12
  40a960:	af00      	add	r7, sp, #0
  40a962:	6078      	str	r0, [r7, #4]
  40a964:	460b      	mov	r3, r1
  40a966:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40a968:	687b      	ldr	r3, [r7, #4]
  40a96a:	695b      	ldr	r3, [r3, #20]
  40a96c:	f003 0302 	and.w	r3, r3, #2
  40a970:	2b00      	cmp	r3, #0
  40a972:	d101      	bne.n	40a978 <uart_write+0x1c>
		return 1;
  40a974:	2301      	movs	r3, #1
  40a976:	e003      	b.n	40a980 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  40a978:	78fa      	ldrb	r2, [r7, #3]
  40a97a:	687b      	ldr	r3, [r7, #4]
  40a97c:	61da      	str	r2, [r3, #28]
	return 0;
  40a97e:	2300      	movs	r3, #0
}
  40a980:	4618      	mov	r0, r3
  40a982:	370c      	adds	r7, #12
  40a984:	46bd      	mov	sp, r7
  40a986:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a98a:	4770      	bx	lr

0040a98c <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  40a98c:	b480      	push	{r7}
  40a98e:	b083      	sub	sp, #12
  40a990:	af00      	add	r7, sp, #0
  40a992:	6078      	str	r0, [r7, #4]
  40a994:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40a996:	687b      	ldr	r3, [r7, #4]
  40a998:	695b      	ldr	r3, [r3, #20]
  40a99a:	f003 0301 	and.w	r3, r3, #1
  40a99e:	2b00      	cmp	r3, #0
  40a9a0:	d101      	bne.n	40a9a6 <uart_read+0x1a>
		return 1;
  40a9a2:	2301      	movs	r3, #1
  40a9a4:	e005      	b.n	40a9b2 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40a9a6:	687b      	ldr	r3, [r7, #4]
  40a9a8:	699b      	ldr	r3, [r3, #24]
  40a9aa:	b2da      	uxtb	r2, r3
  40a9ac:	683b      	ldr	r3, [r7, #0]
  40a9ae:	701a      	strb	r2, [r3, #0]
	return 0;
  40a9b0:	2300      	movs	r3, #0
}
  40a9b2:	4618      	mov	r0, r3
  40a9b4:	370c      	adds	r7, #12
  40a9b6:	46bd      	mov	sp, r7
  40a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a9bc:	4770      	bx	lr
  40a9be:	bf00      	nop

0040a9c0 <rstc_start_software_reset>:
 *
 * \param[out] p_rstc Module hardware register base address pointer
 */
void rstc_start_software_reset(
		Rstc *p_rstc)
{
  40a9c0:	b480      	push	{r7}
  40a9c2:	b083      	sub	sp, #12
  40a9c4:	af00      	add	r7, sp, #0
  40a9c6:	6078      	str	r0, [r7, #4]
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
  40a9c8:	687b      	ldr	r3, [r7, #4]
  40a9ca:	4a03      	ldr	r2, [pc, #12]	; (40a9d8 <rstc_start_software_reset+0x18>)
  40a9cc:	601a      	str	r2, [r3, #0]
}
  40a9ce:	370c      	adds	r7, #12
  40a9d0:	46bd      	mov	sp, r7
  40a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a9d6:	4770      	bx	lr
  40a9d8:	a5000005 	.word	0xa5000005

0040a9dc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40a9dc:	b580      	push	{r7, lr}
  40a9de:	b082      	sub	sp, #8
  40a9e0:	af00      	add	r7, sp, #0
  40a9e2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40a9e4:	687b      	ldr	r3, [r7, #4]
  40a9e6:	2b07      	cmp	r3, #7
  40a9e8:	d830      	bhi.n	40aa4c <osc_enable+0x70>
  40a9ea:	a201      	add	r2, pc, #4	; (adr r2, 40a9f0 <osc_enable+0x14>)
  40a9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40a9f0:	0040aa4d 	.word	0x0040aa4d
  40a9f4:	0040aa11 	.word	0x0040aa11
  40a9f8:	0040aa19 	.word	0x0040aa19
  40a9fc:	0040aa21 	.word	0x0040aa21
  40aa00:	0040aa29 	.word	0x0040aa29
  40aa04:	0040aa31 	.word	0x0040aa31
  40aa08:	0040aa39 	.word	0x0040aa39
  40aa0c:	0040aa43 	.word	0x0040aa43
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40aa10:	2000      	movs	r0, #0
  40aa12:	4b10      	ldr	r3, [pc, #64]	; (40aa54 <osc_enable+0x78>)
  40aa14:	4798      	blx	r3
		break;
  40aa16:	e019      	b.n	40aa4c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  40aa18:	2001      	movs	r0, #1
  40aa1a:	4b0e      	ldr	r3, [pc, #56]	; (40aa54 <osc_enable+0x78>)
  40aa1c:	4798      	blx	r3
		break;
  40aa1e:	e015      	b.n	40aa4c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40aa20:	2000      	movs	r0, #0
  40aa22:	4b0d      	ldr	r3, [pc, #52]	; (40aa58 <osc_enable+0x7c>)
  40aa24:	4798      	blx	r3
		break;
  40aa26:	e011      	b.n	40aa4c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40aa28:	2010      	movs	r0, #16
  40aa2a:	4b0b      	ldr	r3, [pc, #44]	; (40aa58 <osc_enable+0x7c>)
  40aa2c:	4798      	blx	r3
		break;
  40aa2e:	e00d      	b.n	40aa4c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40aa30:	2020      	movs	r0, #32
  40aa32:	4b09      	ldr	r3, [pc, #36]	; (40aa58 <osc_enable+0x7c>)
  40aa34:	4798      	blx	r3
		break;
  40aa36:	e009      	b.n	40aa4c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40aa38:	2000      	movs	r0, #0
  40aa3a:	213e      	movs	r1, #62	; 0x3e
  40aa3c:	4b07      	ldr	r3, [pc, #28]	; (40aa5c <osc_enable+0x80>)
  40aa3e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40aa40:	e004      	b.n	40aa4c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40aa42:	2001      	movs	r0, #1
  40aa44:	213e      	movs	r1, #62	; 0x3e
  40aa46:	4b05      	ldr	r3, [pc, #20]	; (40aa5c <osc_enable+0x80>)
  40aa48:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40aa4a:	bf00      	nop
	}
}
  40aa4c:	3708      	adds	r7, #8
  40aa4e:	46bd      	mov	sp, r7
  40aa50:	bd80      	pop	{r7, pc}
  40aa52:	bf00      	nop
  40aa54:	0040b631 	.word	0x0040b631
  40aa58:	0040b69d 	.word	0x0040b69d
  40aa5c:	0040b70d 	.word	0x0040b70d

0040aa60 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  40aa60:	b580      	push	{r7, lr}
  40aa62:	b082      	sub	sp, #8
  40aa64:	af00      	add	r7, sp, #0
  40aa66:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40aa68:	687b      	ldr	r3, [r7, #4]
  40aa6a:	2b07      	cmp	r3, #7
  40aa6c:	d826      	bhi.n	40aabc <osc_is_ready+0x5c>
  40aa6e:	a201      	add	r2, pc, #4	; (adr r2, 40aa74 <osc_is_ready+0x14>)
  40aa70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40aa74:	0040aa95 	.word	0x0040aa95
  40aa78:	0040aa99 	.word	0x0040aa99
  40aa7c:	0040aa99 	.word	0x0040aa99
  40aa80:	0040aaab 	.word	0x0040aaab
  40aa84:	0040aaab 	.word	0x0040aaab
  40aa88:	0040aaab 	.word	0x0040aaab
  40aa8c:	0040aaab 	.word	0x0040aaab
  40aa90:	0040aaab 	.word	0x0040aaab
	case OSC_SLCK_32K_RC:
		return 1;
  40aa94:	2301      	movs	r3, #1
  40aa96:	e012      	b.n	40aabe <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40aa98:	4b0b      	ldr	r3, [pc, #44]	; (40aac8 <osc_is_ready+0x68>)
  40aa9a:	4798      	blx	r3
  40aa9c:	4603      	mov	r3, r0
  40aa9e:	2b00      	cmp	r3, #0
  40aaa0:	bf0c      	ite	eq
  40aaa2:	2300      	moveq	r3, #0
  40aaa4:	2301      	movne	r3, #1
  40aaa6:	b2db      	uxtb	r3, r3
  40aaa8:	e009      	b.n	40aabe <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40aaaa:	4b08      	ldr	r3, [pc, #32]	; (40aacc <osc_is_ready+0x6c>)
  40aaac:	4798      	blx	r3
  40aaae:	4603      	mov	r3, r0
  40aab0:	2b00      	cmp	r3, #0
  40aab2:	bf0c      	ite	eq
  40aab4:	2300      	moveq	r3, #0
  40aab6:	2301      	movne	r3, #1
  40aab8:	b2db      	uxtb	r3, r3
  40aaba:	e000      	b.n	40aabe <osc_is_ready+0x5e>
	}

	return 0;
  40aabc:	2300      	movs	r3, #0
}
  40aabe:	4618      	mov	r0, r3
  40aac0:	3708      	adds	r7, #8
  40aac2:	46bd      	mov	sp, r7
  40aac4:	bd80      	pop	{r7, pc}
  40aac6:	bf00      	nop
  40aac8:	0040b669 	.word	0x0040b669
  40aacc:	0040b785 	.word	0x0040b785

0040aad0 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40aad0:	b480      	push	{r7}
  40aad2:	b083      	sub	sp, #12
  40aad4:	af00      	add	r7, sp, #0
  40aad6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40aad8:	687b      	ldr	r3, [r7, #4]
  40aada:	2b07      	cmp	r3, #7
  40aadc:	d825      	bhi.n	40ab2a <osc_get_rate+0x5a>
  40aade:	a201      	add	r2, pc, #4	; (adr r2, 40aae4 <osc_get_rate+0x14>)
  40aae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40aae4:	0040ab05 	.word	0x0040ab05
  40aae8:	0040ab0b 	.word	0x0040ab0b
  40aaec:	0040ab11 	.word	0x0040ab11
  40aaf0:	0040ab17 	.word	0x0040ab17
  40aaf4:	0040ab1b 	.word	0x0040ab1b
  40aaf8:	0040ab1f 	.word	0x0040ab1f
  40aafc:	0040ab23 	.word	0x0040ab23
  40ab00:	0040ab27 	.word	0x0040ab27
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40ab04:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40ab08:	e010      	b.n	40ab2c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40ab0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40ab0e:	e00d      	b.n	40ab2c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40ab10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40ab14:	e00a      	b.n	40ab2c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40ab16:	4b08      	ldr	r3, [pc, #32]	; (40ab38 <osc_get_rate+0x68>)
  40ab18:	e008      	b.n	40ab2c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40ab1a:	4b08      	ldr	r3, [pc, #32]	; (40ab3c <osc_get_rate+0x6c>)
  40ab1c:	e006      	b.n	40ab2c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40ab1e:	4b08      	ldr	r3, [pc, #32]	; (40ab40 <osc_get_rate+0x70>)
  40ab20:	e004      	b.n	40ab2c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40ab22:	4b08      	ldr	r3, [pc, #32]	; (40ab44 <osc_get_rate+0x74>)
  40ab24:	e002      	b.n	40ab2c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40ab26:	4b07      	ldr	r3, [pc, #28]	; (40ab44 <osc_get_rate+0x74>)
  40ab28:	e000      	b.n	40ab2c <osc_get_rate+0x5c>
	}

	return 0;
  40ab2a:	2300      	movs	r3, #0
}
  40ab2c:	4618      	mov	r0, r3
  40ab2e:	370c      	adds	r7, #12
  40ab30:	46bd      	mov	sp, r7
  40ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ab36:	4770      	bx	lr
  40ab38:	003d0900 	.word	0x003d0900
  40ab3c:	007a1200 	.word	0x007a1200
  40ab40:	00b71b00 	.word	0x00b71b00
  40ab44:	00f42400 	.word	0x00f42400

0040ab48 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  40ab48:	b580      	push	{r7, lr}
  40ab4a:	b082      	sub	sp, #8
  40ab4c:	af00      	add	r7, sp, #0
  40ab4e:	4603      	mov	r3, r0
  40ab50:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40ab52:	bf00      	nop
  40ab54:	79fb      	ldrb	r3, [r7, #7]
  40ab56:	4618      	mov	r0, r3
  40ab58:	4b05      	ldr	r3, [pc, #20]	; (40ab70 <osc_wait_ready+0x28>)
  40ab5a:	4798      	blx	r3
  40ab5c:	4603      	mov	r3, r0
  40ab5e:	f083 0301 	eor.w	r3, r3, #1
  40ab62:	b2db      	uxtb	r3, r3
  40ab64:	2b00      	cmp	r3, #0
  40ab66:	d1f5      	bne.n	40ab54 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  40ab68:	3708      	adds	r7, #8
  40ab6a:	46bd      	mov	sp, r7
  40ab6c:	bd80      	pop	{r7, pc}
  40ab6e:	bf00      	nop
  40ab70:	0040aa61 	.word	0x0040aa61

0040ab74 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40ab74:	b580      	push	{r7, lr}
  40ab76:	b086      	sub	sp, #24
  40ab78:	af00      	add	r7, sp, #0
  40ab7a:	60f8      	str	r0, [r7, #12]
  40ab7c:	607a      	str	r2, [r7, #4]
  40ab7e:	603b      	str	r3, [r7, #0]
  40ab80:	460b      	mov	r3, r1
  40ab82:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40ab84:	7afb      	ldrb	r3, [r7, #11]
  40ab86:	4618      	mov	r0, r3
  40ab88:	4b0d      	ldr	r3, [pc, #52]	; (40abc0 <pll_config_init+0x4c>)
  40ab8a:	4798      	blx	r3
  40ab8c:	4602      	mov	r2, r0
  40ab8e:	687b      	ldr	r3, [r7, #4]
  40ab90:	fbb2 f3f3 	udiv	r3, r2, r3
  40ab94:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40ab96:	697b      	ldr	r3, [r7, #20]
  40ab98:	683a      	ldr	r2, [r7, #0]
  40ab9a:	fb02 f303 	mul.w	r3, r2, r3
  40ab9e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40aba0:	683b      	ldr	r3, [r7, #0]
  40aba2:	3b01      	subs	r3, #1
  40aba4:	041a      	lsls	r2, r3, #16
  40aba6:	4b07      	ldr	r3, [pc, #28]	; (40abc4 <pll_config_init+0x50>)
  40aba8:	4013      	ands	r3, r2
  40abaa:	687a      	ldr	r2, [r7, #4]
  40abac:	b2d2      	uxtb	r2, r2
  40abae:	4313      	orrs	r3, r2
  40abb0:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40abb4:	68fb      	ldr	r3, [r7, #12]
  40abb6:	601a      	str	r2, [r3, #0]
}
  40abb8:	3718      	adds	r7, #24
  40abba:	46bd      	mov	sp, r7
  40abbc:	bd80      	pop	{r7, pc}
  40abbe:	bf00      	nop
  40abc0:	0040aad1 	.word	0x0040aad1
  40abc4:	07ff0000 	.word	0x07ff0000

0040abc8 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40abc8:	b580      	push	{r7, lr}
  40abca:	b082      	sub	sp, #8
  40abcc:	af00      	add	r7, sp, #0
  40abce:	6078      	str	r0, [r7, #4]
  40abd0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40abd2:	683b      	ldr	r3, [r7, #0]
  40abd4:	2b00      	cmp	r3, #0
  40abd6:	d108      	bne.n	40abea <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  40abd8:	4b08      	ldr	r3, [pc, #32]	; (40abfc <pll_enable+0x34>)
  40abda:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40abdc:	4b08      	ldr	r3, [pc, #32]	; (40ac00 <pll_enable+0x38>)
  40abde:	687a      	ldr	r2, [r7, #4]
  40abe0:	6812      	ldr	r2, [r2, #0]
  40abe2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40abe6:	629a      	str	r2, [r3, #40]	; 0x28
  40abe8:	e005      	b.n	40abf6 <pll_enable+0x2e>
	} else {
		pmc_disable_pllbck();
  40abea:	4b06      	ldr	r3, [pc, #24]	; (40ac04 <pll_enable+0x3c>)
  40abec:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40abee:	4b04      	ldr	r3, [pc, #16]	; (40ac00 <pll_enable+0x38>)
  40abf0:	687a      	ldr	r2, [r7, #4]
  40abf2:	6812      	ldr	r2, [r2, #0]
  40abf4:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
  40abf6:	3708      	adds	r7, #8
  40abf8:	46bd      	mov	sp, r7
  40abfa:	bd80      	pop	{r7, pc}
  40abfc:	0040b7a1 	.word	0x0040b7a1
  40ac00:	400e0400 	.word	0x400e0400
  40ac04:	0040b7d5 	.word	0x0040b7d5

0040ac08 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  40ac08:	b580      	push	{r7, lr}
  40ac0a:	b082      	sub	sp, #8
  40ac0c:	af00      	add	r7, sp, #0
  40ac0e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40ac10:	687b      	ldr	r3, [r7, #4]
  40ac12:	2b00      	cmp	r3, #0
  40ac14:	d103      	bne.n	40ac1e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40ac16:	4b05      	ldr	r3, [pc, #20]	; (40ac2c <pll_is_locked+0x24>)
  40ac18:	4798      	blx	r3
  40ac1a:	4603      	mov	r3, r0
  40ac1c:	e002      	b.n	40ac24 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40ac1e:	4b04      	ldr	r3, [pc, #16]	; (40ac30 <pll_is_locked+0x28>)
  40ac20:	4798      	blx	r3
  40ac22:	4603      	mov	r3, r0
	}
}
  40ac24:	4618      	mov	r0, r3
  40ac26:	3708      	adds	r7, #8
  40ac28:	46bd      	mov	sp, r7
  40ac2a:	bd80      	pop	{r7, pc}
  40ac2c:	0040b7b9 	.word	0x0040b7b9
  40ac30:	0040b7ed 	.word	0x0040b7ed

0040ac34 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40ac34:	b580      	push	{r7, lr}
  40ac36:	b082      	sub	sp, #8
  40ac38:	af00      	add	r7, sp, #0
  40ac3a:	4603      	mov	r3, r0
  40ac3c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40ac3e:	79fb      	ldrb	r3, [r7, #7]
  40ac40:	3b03      	subs	r3, #3
  40ac42:	2b04      	cmp	r3, #4
  40ac44:	d808      	bhi.n	40ac58 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40ac46:	79fb      	ldrb	r3, [r7, #7]
  40ac48:	4618      	mov	r0, r3
  40ac4a:	4b05      	ldr	r3, [pc, #20]	; (40ac60 <pll_enable_source+0x2c>)
  40ac4c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40ac4e:	79fb      	ldrb	r3, [r7, #7]
  40ac50:	4618      	mov	r0, r3
  40ac52:	4b04      	ldr	r3, [pc, #16]	; (40ac64 <pll_enable_source+0x30>)
  40ac54:	4798      	blx	r3
		break;
  40ac56:	e000      	b.n	40ac5a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40ac58:	bf00      	nop
	}
}
  40ac5a:	3708      	adds	r7, #8
  40ac5c:	46bd      	mov	sp, r7
  40ac5e:	bd80      	pop	{r7, pc}
  40ac60:	0040a9dd 	.word	0x0040a9dd
  40ac64:	0040ab49 	.word	0x0040ab49

0040ac68 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  40ac68:	b580      	push	{r7, lr}
  40ac6a:	b082      	sub	sp, #8
  40ac6c:	af00      	add	r7, sp, #0
  40ac6e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40ac70:	bf00      	nop
  40ac72:	6878      	ldr	r0, [r7, #4]
  40ac74:	4b04      	ldr	r3, [pc, #16]	; (40ac88 <pll_wait_for_lock+0x20>)
  40ac76:	4798      	blx	r3
  40ac78:	4603      	mov	r3, r0
  40ac7a:	2b00      	cmp	r3, #0
  40ac7c:	d0f9      	beq.n	40ac72 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40ac7e:	2300      	movs	r3, #0
}
  40ac80:	4618      	mov	r0, r3
  40ac82:	3708      	adds	r7, #8
  40ac84:	46bd      	mov	sp, r7
  40ac86:	bd80      	pop	{r7, pc}
  40ac88:	0040ac09 	.word	0x0040ac09

0040ac8c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40ac8c:	b580      	push	{r7, lr}
  40ac8e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40ac90:	2006      	movs	r0, #6
  40ac92:	4b04      	ldr	r3, [pc, #16]	; (40aca4 <sysclk_get_main_hz+0x18>)
  40ac94:	4798      	blx	r3
  40ac96:	4602      	mov	r2, r0
  40ac98:	4613      	mov	r3, r2
  40ac9a:	011b      	lsls	r3, r3, #4
  40ac9c:	1a9b      	subs	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40ac9e:	4618      	mov	r0, r3
  40aca0:	bd80      	pop	{r7, pc}
  40aca2:	bf00      	nop
  40aca4:	0040aad1 	.word	0x0040aad1

0040aca8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40aca8:	b580      	push	{r7, lr}
  40acaa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40acac:	4b02      	ldr	r3, [pc, #8]	; (40acb8 <sysclk_get_cpu_hz+0x10>)
  40acae:	4798      	blx	r3
  40acb0:	4603      	mov	r3, r0
  40acb2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40acb4:	4618      	mov	r0, r3
  40acb6:	bd80      	pop	{r7, pc}
  40acb8:	0040ac8d 	.word	0x0040ac8d

0040acbc <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  40acbc:	b590      	push	{r4, r7, lr}
  40acbe:	b083      	sub	sp, #12
  40acc0:	af00      	add	r7, sp, #0

#ifdef CONFIG_PLL1_SOURCE
	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_PLL1) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL1_SOURCE);
  40acc2:	2006      	movs	r0, #6
  40acc4:	4b0c      	ldr	r3, [pc, #48]	; (40acf8 <sysclk_enable_usb+0x3c>)
  40acc6:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 1);
  40acc8:	463b      	mov	r3, r7
  40acca:	4618      	mov	r0, r3
  40accc:	2106      	movs	r1, #6
  40acce:	2202      	movs	r2, #2
  40acd0:	230c      	movs	r3, #12
  40acd2:	4c0a      	ldr	r4, [pc, #40]	; (40acfc <sysclk_enable_usb+0x40>)
  40acd4:	47a0      	blx	r4
		pll_enable(&pllcfg, 1);
  40acd6:	463b      	mov	r3, r7
  40acd8:	4618      	mov	r0, r3
  40acda:	2101      	movs	r1, #1
  40acdc:	4b08      	ldr	r3, [pc, #32]	; (40ad00 <sysclk_enable_usb+0x44>)
  40acde:	4798      	blx	r3
		pll_wait_for_lock(1);
  40ace0:	2001      	movs	r0, #1
  40ace2:	4b08      	ldr	r3, [pc, #32]	; (40ad04 <sysclk_enable_usb+0x48>)
  40ace4:	4798      	blx	r3
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  40ace6:	2001      	movs	r0, #1
  40ace8:	4b07      	ldr	r3, [pc, #28]	; (40ad08 <sysclk_enable_usb+0x4c>)
  40acea:	4798      	blx	r3
		pmc_enable_udpck();
  40acec:	4b07      	ldr	r3, [pc, #28]	; (40ad0c <sysclk_enable_usb+0x50>)
  40acee:	4798      	blx	r3
		return;
  40acf0:	bf00      	nop
	}
#endif
}
  40acf2:	370c      	adds	r7, #12
  40acf4:	46bd      	mov	sp, r7
  40acf6:	bd90      	pop	{r4, r7, pc}
  40acf8:	0040ac35 	.word	0x0040ac35
  40acfc:	0040ab75 	.word	0x0040ab75
  40ad00:	0040abc9 	.word	0x0040abc9
  40ad04:	0040ac69 	.word	0x0040ac69
  40ad08:	0040b911 	.word	0x0040b911
  40ad0c:	0040b939 	.word	0x0040b939

0040ad10 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40ad10:	b590      	push	{r4, r7, lr}
  40ad12:	b083      	sub	sp, #12
  40ad14:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40ad16:	4811      	ldr	r0, [pc, #68]	; (40ad5c <sysclk_init+0x4c>)
  40ad18:	4b11      	ldr	r3, [pc, #68]	; (40ad60 <sysclk_init+0x50>)
  40ad1a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40ad1c:	2006      	movs	r0, #6
  40ad1e:	4b11      	ldr	r3, [pc, #68]	; (40ad64 <sysclk_init+0x54>)
  40ad20:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40ad22:	1d3b      	adds	r3, r7, #4
  40ad24:	4618      	mov	r0, r3
  40ad26:	2106      	movs	r1, #6
  40ad28:	2201      	movs	r2, #1
  40ad2a:	230f      	movs	r3, #15
  40ad2c:	4c0e      	ldr	r4, [pc, #56]	; (40ad68 <sysclk_init+0x58>)
  40ad2e:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40ad30:	1d3b      	adds	r3, r7, #4
  40ad32:	4618      	mov	r0, r3
  40ad34:	2100      	movs	r1, #0
  40ad36:	4b0d      	ldr	r3, [pc, #52]	; (40ad6c <sysclk_init+0x5c>)
  40ad38:	4798      	blx	r3
		pll_wait_for_lock(0);
  40ad3a:	2000      	movs	r0, #0
  40ad3c:	4b0c      	ldr	r3, [pc, #48]	; (40ad70 <sysclk_init+0x60>)
  40ad3e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40ad40:	2010      	movs	r0, #16
  40ad42:	4b0c      	ldr	r3, [pc, #48]	; (40ad74 <sysclk_init+0x64>)
  40ad44:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40ad46:	4b0c      	ldr	r3, [pc, #48]	; (40ad78 <sysclk_init+0x68>)
  40ad48:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40ad4a:	4b0c      	ldr	r3, [pc, #48]	; (40ad7c <sysclk_init+0x6c>)
  40ad4c:	4798      	blx	r3
  40ad4e:	4603      	mov	r3, r0
  40ad50:	4618      	mov	r0, r3
  40ad52:	4b03      	ldr	r3, [pc, #12]	; (40ad60 <sysclk_init+0x50>)
  40ad54:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40ad56:	370c      	adds	r7, #12
  40ad58:	46bd      	mov	sp, r7
  40ad5a:	bd90      	pop	{r4, r7, pc}
  40ad5c:	07270e00 	.word	0x07270e00
  40ad60:	0040c159 	.word	0x0040c159
  40ad64:	0040ac35 	.word	0x0040ac35
  40ad68:	0040ab75 	.word	0x0040ab75
  40ad6c:	0040abc9 	.word	0x0040abc9
  40ad70:	0040ac69 	.word	0x0040ac69
  40ad74:	0040b5ad 	.word	0x0040b5ad
  40ad78:	0040bfbd 	.word	0x0040bfbd
  40ad7c:	0040aca9 	.word	0x0040aca9

0040ad80 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40ad80:	b580      	push	{r7, lr}
  40ad82:	b082      	sub	sp, #8
  40ad84:	af00      	add	r7, sp, #0
  40ad86:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40ad88:	6878      	ldr	r0, [r7, #4]
  40ad8a:	4b02      	ldr	r3, [pc, #8]	; (40ad94 <sysclk_enable_peripheral_clock+0x14>)
  40ad8c:	4798      	blx	r3
}
  40ad8e:	3708      	adds	r7, #8
  40ad90:	46bd      	mov	sp, r7
  40ad92:	bd80      	pop	{r7, pc}
  40ad94:	0040b809 	.word	0x0040b809

0040ad98 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40ad98:	b580      	push	{r7, lr}
  40ad9a:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  40ad9c:	200b      	movs	r0, #11
  40ad9e:	4b03      	ldr	r3, [pc, #12]	; (40adac <ioport_init+0x14>)
  40ada0:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40ada2:	200c      	movs	r0, #12
  40ada4:	4b01      	ldr	r3, [pc, #4]	; (40adac <ioport_init+0x14>)
  40ada6:	4798      	blx	r3
	arch_ioport_init();
}
  40ada8:	bd80      	pop	{r7, pc}
  40adaa:	bf00      	nop
  40adac:	0040ad81 	.word	0x0040ad81

0040adb0 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  40adb0:	b580      	push	{r7, lr}
  40adb2:	af00      	add	r7, sp, #0

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  40adb4:	4b01      	ldr	r3, [pc, #4]	; (40adbc <board_init+0xc>)
  40adb6:	4798      	blx	r3

#endif  



}
  40adb8:	bd80      	pop	{r7, pc}
  40adba:	bf00      	nop
  40adbc:	0040ad99 	.word	0x0040ad99

0040adc0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  40adc0:	b480      	push	{r7}
  40adc2:	b085      	sub	sp, #20
  40adc4:	af00      	add	r7, sp, #0
  40adc6:	60f8      	str	r0, [r7, #12]
  40adc8:	60b9      	str	r1, [r7, #8]
  40adca:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40adcc:	687b      	ldr	r3, [r7, #4]
  40adce:	2b00      	cmp	r3, #0
  40add0:	d003      	beq.n	40adda <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40add2:	68fb      	ldr	r3, [r7, #12]
  40add4:	68ba      	ldr	r2, [r7, #8]
  40add6:	665a      	str	r2, [r3, #100]	; 0x64
  40add8:	e002      	b.n	40ade0 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40adda:	68fb      	ldr	r3, [r7, #12]
  40addc:	68ba      	ldr	r2, [r7, #8]
  40adde:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  40ade0:	3714      	adds	r7, #20
  40ade2:	46bd      	mov	sp, r7
  40ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ade8:	4770      	bx	lr
  40adea:	bf00      	nop

0040adec <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  40adec:	b480      	push	{r7}
  40adee:	b085      	sub	sp, #20
  40adf0:	af00      	add	r7, sp, #0
  40adf2:	60f8      	str	r0, [r7, #12]
  40adf4:	60b9      	str	r1, [r7, #8]
  40adf6:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  40adf8:	68fb      	ldr	r3, [r7, #12]
  40adfa:	68ba      	ldr	r2, [r7, #8]
  40adfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40ae00:	687b      	ldr	r3, [r7, #4]
  40ae02:	005b      	lsls	r3, r3, #1
  40ae04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40ae08:	fbb2 f3f3 	udiv	r3, r2, r3
  40ae0c:	3b01      	subs	r3, #1
  40ae0e:	f3c3 020d 	ubfx	r2, r3, #0, #14
  40ae12:	68fb      	ldr	r3, [r7, #12]
  40ae14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  40ae18:	3714      	adds	r7, #20
  40ae1a:	46bd      	mov	sp, r7
  40ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ae20:	4770      	bx	lr
  40ae22:	bf00      	nop

0040ae24 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40ae24:	b480      	push	{r7}
  40ae26:	b087      	sub	sp, #28
  40ae28:	af00      	add	r7, sp, #0
  40ae2a:	60f8      	str	r0, [r7, #12]
  40ae2c:	60b9      	str	r1, [r7, #8]
  40ae2e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40ae30:	68fb      	ldr	r3, [r7, #12]
  40ae32:	687a      	ldr	r2, [r7, #4]
  40ae34:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  40ae36:	68bb      	ldr	r3, [r7, #8]
  40ae38:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40ae3c:	d04a      	beq.n	40aed4 <pio_set_peripheral+0xb0>
  40ae3e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40ae42:	d808      	bhi.n	40ae56 <pio_set_peripheral+0x32>
  40ae44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40ae48:	d016      	beq.n	40ae78 <pio_set_peripheral+0x54>
  40ae4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40ae4e:	d02c      	beq.n	40aeaa <pio_set_peripheral+0x86>
  40ae50:	2b00      	cmp	r3, #0
  40ae52:	d069      	beq.n	40af28 <pio_set_peripheral+0x104>
  40ae54:	e064      	b.n	40af20 <pio_set_peripheral+0xfc>
  40ae56:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40ae5a:	d065      	beq.n	40af28 <pio_set_peripheral+0x104>
  40ae5c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40ae60:	d803      	bhi.n	40ae6a <pio_set_peripheral+0x46>
  40ae62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40ae66:	d04a      	beq.n	40aefe <pio_set_peripheral+0xda>
  40ae68:	e05a      	b.n	40af20 <pio_set_peripheral+0xfc>
  40ae6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40ae6e:	d05b      	beq.n	40af28 <pio_set_peripheral+0x104>
  40ae70:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40ae74:	d058      	beq.n	40af28 <pio_set_peripheral+0x104>
  40ae76:	e053      	b.n	40af20 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40ae78:	68fb      	ldr	r3, [r7, #12]
  40ae7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40ae7c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40ae7e:	68fb      	ldr	r3, [r7, #12]
  40ae80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40ae82:	687b      	ldr	r3, [r7, #4]
  40ae84:	43d9      	mvns	r1, r3
  40ae86:	697b      	ldr	r3, [r7, #20]
  40ae88:	400b      	ands	r3, r1
  40ae8a:	401a      	ands	r2, r3
  40ae8c:	68fb      	ldr	r3, [r7, #12]
  40ae8e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40ae90:	68fb      	ldr	r3, [r7, #12]
  40ae92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40ae94:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40ae96:	68fb      	ldr	r3, [r7, #12]
  40ae98:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40ae9a:	687b      	ldr	r3, [r7, #4]
  40ae9c:	43d9      	mvns	r1, r3
  40ae9e:	697b      	ldr	r3, [r7, #20]
  40aea0:	400b      	ands	r3, r1
  40aea2:	401a      	ands	r2, r3
  40aea4:	68fb      	ldr	r3, [r7, #12]
  40aea6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40aea8:	e03a      	b.n	40af20 <pio_set_peripheral+0xfc>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40aeaa:	68fb      	ldr	r3, [r7, #12]
  40aeac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40aeae:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40aeb0:	687a      	ldr	r2, [r7, #4]
  40aeb2:	697b      	ldr	r3, [r7, #20]
  40aeb4:	431a      	orrs	r2, r3
  40aeb6:	68fb      	ldr	r3, [r7, #12]
  40aeb8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40aeba:	68fb      	ldr	r3, [r7, #12]
  40aebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40aebe:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40aec0:	68fb      	ldr	r3, [r7, #12]
  40aec2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40aec4:	687b      	ldr	r3, [r7, #4]
  40aec6:	43d9      	mvns	r1, r3
  40aec8:	697b      	ldr	r3, [r7, #20]
  40aeca:	400b      	ands	r3, r1
  40aecc:	401a      	ands	r2, r3
  40aece:	68fb      	ldr	r3, [r7, #12]
  40aed0:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40aed2:	e025      	b.n	40af20 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40aed4:	68fb      	ldr	r3, [r7, #12]
  40aed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40aed8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40aeda:	68fb      	ldr	r3, [r7, #12]
  40aedc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40aede:	687b      	ldr	r3, [r7, #4]
  40aee0:	43d9      	mvns	r1, r3
  40aee2:	697b      	ldr	r3, [r7, #20]
  40aee4:	400b      	ands	r3, r1
  40aee6:	401a      	ands	r2, r3
  40aee8:	68fb      	ldr	r3, [r7, #12]
  40aeea:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40aeec:	68fb      	ldr	r3, [r7, #12]
  40aeee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40aef0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40aef2:	687a      	ldr	r2, [r7, #4]
  40aef4:	697b      	ldr	r3, [r7, #20]
  40aef6:	431a      	orrs	r2, r3
  40aef8:	68fb      	ldr	r3, [r7, #12]
  40aefa:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40aefc:	e010      	b.n	40af20 <pio_set_peripheral+0xfc>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40aefe:	68fb      	ldr	r3, [r7, #12]
  40af00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40af02:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40af04:	687a      	ldr	r2, [r7, #4]
  40af06:	697b      	ldr	r3, [r7, #20]
  40af08:	431a      	orrs	r2, r3
  40af0a:	68fb      	ldr	r3, [r7, #12]
  40af0c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40af0e:	68fb      	ldr	r3, [r7, #12]
  40af10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40af12:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40af14:	687a      	ldr	r2, [r7, #4]
  40af16:	697b      	ldr	r3, [r7, #20]
  40af18:	431a      	orrs	r2, r3
  40af1a:	68fb      	ldr	r3, [r7, #12]
  40af1c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40af1e:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40af20:	68fb      	ldr	r3, [r7, #12]
  40af22:	687a      	ldr	r2, [r7, #4]
  40af24:	605a      	str	r2, [r3, #4]
  40af26:	e000      	b.n	40af2a <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  40af28:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  40af2a:	371c      	adds	r7, #28
  40af2c:	46bd      	mov	sp, r7
  40af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40af32:	4770      	bx	lr

0040af34 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40af34:	b580      	push	{r7, lr}
  40af36:	b084      	sub	sp, #16
  40af38:	af00      	add	r7, sp, #0
  40af3a:	60f8      	str	r0, [r7, #12]
  40af3c:	60b9      	str	r1, [r7, #8]
  40af3e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40af40:	68f8      	ldr	r0, [r7, #12]
  40af42:	68b9      	ldr	r1, [r7, #8]
  40af44:	4b18      	ldr	r3, [pc, #96]	; (40afa8 <pio_set_input+0x74>)
  40af46:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  40af48:	687b      	ldr	r3, [r7, #4]
  40af4a:	f003 0301 	and.w	r3, r3, #1
  40af4e:	68f8      	ldr	r0, [r7, #12]
  40af50:	68b9      	ldr	r1, [r7, #8]
  40af52:	461a      	mov	r2, r3
  40af54:	4b15      	ldr	r3, [pc, #84]	; (40afac <pio_set_input+0x78>)
  40af56:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40af58:	687b      	ldr	r3, [r7, #4]
  40af5a:	f003 030a 	and.w	r3, r3, #10
  40af5e:	2b00      	cmp	r3, #0
  40af60:	d003      	beq.n	40af6a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40af62:	68fb      	ldr	r3, [r7, #12]
  40af64:	68ba      	ldr	r2, [r7, #8]
  40af66:	621a      	str	r2, [r3, #32]
  40af68:	e002      	b.n	40af70 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40af6a:	68fb      	ldr	r3, [r7, #12]
  40af6c:	68ba      	ldr	r2, [r7, #8]
  40af6e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40af70:	687b      	ldr	r3, [r7, #4]
  40af72:	f003 0302 	and.w	r3, r3, #2
  40af76:	2b00      	cmp	r3, #0
  40af78:	d004      	beq.n	40af84 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40af7a:	68fb      	ldr	r3, [r7, #12]
  40af7c:	68ba      	ldr	r2, [r7, #8]
  40af7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40af82:	e008      	b.n	40af96 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40af84:	687b      	ldr	r3, [r7, #4]
  40af86:	f003 0308 	and.w	r3, r3, #8
  40af8a:	2b00      	cmp	r3, #0
  40af8c:	d003      	beq.n	40af96 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40af8e:	68fb      	ldr	r3, [r7, #12]
  40af90:	68ba      	ldr	r2, [r7, #8]
  40af92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40af96:	68fb      	ldr	r3, [r7, #12]
  40af98:	68ba      	ldr	r2, [r7, #8]
  40af9a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40af9c:	68fb      	ldr	r3, [r7, #12]
  40af9e:	68ba      	ldr	r2, [r7, #8]
  40afa0:	601a      	str	r2, [r3, #0]
}
  40afa2:	3710      	adds	r7, #16
  40afa4:	46bd      	mov	sp, r7
  40afa6:	bd80      	pop	{r7, pc}
  40afa8:	0040b0a1 	.word	0x0040b0a1
  40afac:	0040adc1 	.word	0x0040adc1

0040afb0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40afb0:	b580      	push	{r7, lr}
  40afb2:	b084      	sub	sp, #16
  40afb4:	af00      	add	r7, sp, #0
  40afb6:	60f8      	str	r0, [r7, #12]
  40afb8:	60b9      	str	r1, [r7, #8]
  40afba:	607a      	str	r2, [r7, #4]
  40afbc:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40afbe:	68f8      	ldr	r0, [r7, #12]
  40afc0:	68b9      	ldr	r1, [r7, #8]
  40afc2:	4b12      	ldr	r3, [pc, #72]	; (40b00c <pio_set_output+0x5c>)
  40afc4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40afc6:	68f8      	ldr	r0, [r7, #12]
  40afc8:	68b9      	ldr	r1, [r7, #8]
  40afca:	69ba      	ldr	r2, [r7, #24]
  40afcc:	4b10      	ldr	r3, [pc, #64]	; (40b010 <pio_set_output+0x60>)
  40afce:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40afd0:	683b      	ldr	r3, [r7, #0]
  40afd2:	2b00      	cmp	r3, #0
  40afd4:	d003      	beq.n	40afde <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40afd6:	68fb      	ldr	r3, [r7, #12]
  40afd8:	68ba      	ldr	r2, [r7, #8]
  40afda:	651a      	str	r2, [r3, #80]	; 0x50
  40afdc:	e002      	b.n	40afe4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40afde:	68fb      	ldr	r3, [r7, #12]
  40afe0:	68ba      	ldr	r2, [r7, #8]
  40afe2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40afe4:	687b      	ldr	r3, [r7, #4]
  40afe6:	2b00      	cmp	r3, #0
  40afe8:	d003      	beq.n	40aff2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40afea:	68fb      	ldr	r3, [r7, #12]
  40afec:	68ba      	ldr	r2, [r7, #8]
  40afee:	631a      	str	r2, [r3, #48]	; 0x30
  40aff0:	e002      	b.n	40aff8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40aff2:	68fb      	ldr	r3, [r7, #12]
  40aff4:	68ba      	ldr	r2, [r7, #8]
  40aff6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40aff8:	68fb      	ldr	r3, [r7, #12]
  40affa:	68ba      	ldr	r2, [r7, #8]
  40affc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40affe:	68fb      	ldr	r3, [r7, #12]
  40b000:	68ba      	ldr	r2, [r7, #8]
  40b002:	601a      	str	r2, [r3, #0]
}
  40b004:	3710      	adds	r7, #16
  40b006:	46bd      	mov	sp, r7
  40b008:	bd80      	pop	{r7, pc}
  40b00a:	bf00      	nop
  40b00c:	0040b0a1 	.word	0x0040b0a1
  40b010:	0040adc1 	.word	0x0040adc1

0040b014 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  40b014:	b480      	push	{r7}
  40b016:	b085      	sub	sp, #20
  40b018:	af00      	add	r7, sp, #0
  40b01a:	60f8      	str	r0, [r7, #12]
  40b01c:	60b9      	str	r1, [r7, #8]
  40b01e:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40b020:	687b      	ldr	r3, [r7, #4]
  40b022:	f003 0310 	and.w	r3, r3, #16
  40b026:	2b00      	cmp	r3, #0
  40b028:	d020      	beq.n	40b06c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40b02a:	68fb      	ldr	r3, [r7, #12]
  40b02c:	68ba      	ldr	r2, [r7, #8]
  40b02e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40b032:	687b      	ldr	r3, [r7, #4]
  40b034:	f003 0320 	and.w	r3, r3, #32
  40b038:	2b00      	cmp	r3, #0
  40b03a:	d004      	beq.n	40b046 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40b03c:	68fb      	ldr	r3, [r7, #12]
  40b03e:	68ba      	ldr	r2, [r7, #8]
  40b040:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40b044:	e003      	b.n	40b04e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40b046:	68fb      	ldr	r3, [r7, #12]
  40b048:	68ba      	ldr	r2, [r7, #8]
  40b04a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40b04e:	687b      	ldr	r3, [r7, #4]
  40b050:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40b054:	2b00      	cmp	r3, #0
  40b056:	d004      	beq.n	40b062 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40b058:	68fb      	ldr	r3, [r7, #12]
  40b05a:	68ba      	ldr	r2, [r7, #8]
  40b05c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  40b060:	e008      	b.n	40b074 <pio_configure_interrupt+0x60>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40b062:	68fb      	ldr	r3, [r7, #12]
  40b064:	68ba      	ldr	r2, [r7, #8]
  40b066:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  40b06a:	e003      	b.n	40b074 <pio_configure_interrupt+0x60>
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  40b06c:	68fb      	ldr	r3, [r7, #12]
  40b06e:	68ba      	ldr	r2, [r7, #8]
  40b070:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  40b074:	3714      	adds	r7, #20
  40b076:	46bd      	mov	sp, r7
  40b078:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b07c:	4770      	bx	lr
  40b07e:	bf00      	nop

0040b080 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40b080:	b480      	push	{r7}
  40b082:	b083      	sub	sp, #12
  40b084:	af00      	add	r7, sp, #0
  40b086:	6078      	str	r0, [r7, #4]
  40b088:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ISR;
  40b08a:	687b      	ldr	r3, [r7, #4]
  40b08c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  40b08e:	687b      	ldr	r3, [r7, #4]
  40b090:	683a      	ldr	r2, [r7, #0]
  40b092:	641a      	str	r2, [r3, #64]	; 0x40
}
  40b094:	370c      	adds	r7, #12
  40b096:	46bd      	mov	sp, r7
  40b098:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b09c:	4770      	bx	lr
  40b09e:	bf00      	nop

0040b0a0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40b0a0:	b480      	push	{r7}
  40b0a2:	b083      	sub	sp, #12
  40b0a4:	af00      	add	r7, sp, #0
  40b0a6:	6078      	str	r0, [r7, #4]
  40b0a8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40b0aa:	687b      	ldr	r3, [r7, #4]
  40b0ac:	683a      	ldr	r2, [r7, #0]
  40b0ae:	645a      	str	r2, [r3, #68]	; 0x44
}
  40b0b0:	370c      	adds	r7, #12
  40b0b2:	46bd      	mov	sp, r7
  40b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b0b8:	4770      	bx	lr
  40b0ba:	bf00      	nop

0040b0bc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40b0bc:	b480      	push	{r7}
  40b0be:	b083      	sub	sp, #12
  40b0c0:	af00      	add	r7, sp, #0
  40b0c2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40b0c4:	687b      	ldr	r3, [r7, #4]
  40b0c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40b0c8:	4618      	mov	r0, r3
  40b0ca:	370c      	adds	r7, #12
  40b0cc:	46bd      	mov	sp, r7
  40b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b0d2:	4770      	bx	lr

0040b0d4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40b0d4:	b480      	push	{r7}
  40b0d6:	b083      	sub	sp, #12
  40b0d8:	af00      	add	r7, sp, #0
  40b0da:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  40b0dc:	687b      	ldr	r3, [r7, #4]
  40b0de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40b0e0:	4618      	mov	r0, r3
  40b0e2:	370c      	adds	r7, #12
  40b0e4:	46bd      	mov	sp, r7
  40b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b0ea:	4770      	bx	lr

0040b0ec <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
  40b0ec:	b580      	push	{r7, lr}
  40b0ee:	b084      	sub	sp, #16
  40b0f0:	af00      	add	r7, sp, #0
  40b0f2:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40b0f4:	6878      	ldr	r0, [r7, #4]
  40b0f6:	4b08      	ldr	r3, [pc, #32]	; (40b118 <pio_get_pin_value+0x2c>)
  40b0f8:	4798      	blx	r3
  40b0fa:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  40b0fc:	68fb      	ldr	r3, [r7, #12]
  40b0fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40b100:	687b      	ldr	r3, [r7, #4]
  40b102:	f003 031f 	and.w	r3, r3, #31
  40b106:	fa22 f303 	lsr.w	r3, r2, r3
  40b10a:	f003 0301 	and.w	r3, r3, #1
}
  40b10e:	4618      	mov	r0, r3
  40b110:	3710      	adds	r7, #16
  40b112:	46bd      	mov	sp, r7
  40b114:	bd80      	pop	{r7, pc}
  40b116:	bf00      	nop
  40b118:	0040b381 	.word	0x0040b381

0040b11c <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  40b11c:	b580      	push	{r7, lr}
  40b11e:	b084      	sub	sp, #16
  40b120:	af00      	add	r7, sp, #0
  40b122:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40b124:	6878      	ldr	r0, [r7, #4]
  40b126:	4b07      	ldr	r3, [pc, #28]	; (40b144 <pio_set_pin_high+0x28>)
  40b128:	4798      	blx	r3
  40b12a:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40b12c:	687b      	ldr	r3, [r7, #4]
  40b12e:	f003 031f 	and.w	r3, r3, #31
  40b132:	2201      	movs	r2, #1
  40b134:	fa02 f303 	lsl.w	r3, r2, r3
  40b138:	461a      	mov	r2, r3
  40b13a:	68fb      	ldr	r3, [r7, #12]
  40b13c:	631a      	str	r2, [r3, #48]	; 0x30
}
  40b13e:	3710      	adds	r7, #16
  40b140:	46bd      	mov	sp, r7
  40b142:	bd80      	pop	{r7, pc}
  40b144:	0040b381 	.word	0x0040b381

0040b148 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  40b148:	b580      	push	{r7, lr}
  40b14a:	b084      	sub	sp, #16
  40b14c:	af00      	add	r7, sp, #0
  40b14e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40b150:	6878      	ldr	r0, [r7, #4]
  40b152:	4b07      	ldr	r3, [pc, #28]	; (40b170 <pio_set_pin_low+0x28>)
  40b154:	4798      	blx	r3
  40b156:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40b158:	687b      	ldr	r3, [r7, #4]
  40b15a:	f003 031f 	and.w	r3, r3, #31
  40b15e:	2201      	movs	r2, #1
  40b160:	fa02 f303 	lsl.w	r3, r2, r3
  40b164:	461a      	mov	r2, r3
  40b166:	68fb      	ldr	r3, [r7, #12]
  40b168:	635a      	str	r2, [r3, #52]	; 0x34
}
  40b16a:	3710      	adds	r7, #16
  40b16c:	46bd      	mov	sp, r7
  40b16e:	bd80      	pop	{r7, pc}
  40b170:	0040b381 	.word	0x0040b381

0040b174 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
  40b174:	b580      	push	{r7, lr}
  40b176:	b084      	sub	sp, #16
  40b178:	af00      	add	r7, sp, #0
  40b17a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40b17c:	6878      	ldr	r0, [r7, #4]
  40b17e:	4b12      	ldr	r3, [pc, #72]	; (40b1c8 <pio_toggle_pin+0x54>)
  40b180:	4798      	blx	r3
  40b182:	60f8      	str	r0, [r7, #12]

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  40b184:	68fb      	ldr	r3, [r7, #12]
  40b186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40b188:	687b      	ldr	r3, [r7, #4]
  40b18a:	f003 031f 	and.w	r3, r3, #31
  40b18e:	2101      	movs	r1, #1
  40b190:	fa01 f303 	lsl.w	r3, r1, r3
  40b194:	4013      	ands	r3, r2
  40b196:	2b00      	cmp	r3, #0
  40b198:	d009      	beq.n	40b1ae <pio_toggle_pin+0x3a>
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40b19a:	687b      	ldr	r3, [r7, #4]
  40b19c:	f003 031f 	and.w	r3, r3, #31
  40b1a0:	2201      	movs	r2, #1
  40b1a2:	fa02 f303 	lsl.w	r3, r2, r3
  40b1a6:	461a      	mov	r2, r3
  40b1a8:	68fb      	ldr	r3, [r7, #12]
  40b1aa:	635a      	str	r2, [r3, #52]	; 0x34
  40b1ac:	e008      	b.n	40b1c0 <pio_toggle_pin+0x4c>
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40b1ae:	687b      	ldr	r3, [r7, #4]
  40b1b0:	f003 031f 	and.w	r3, r3, #31
  40b1b4:	2201      	movs	r2, #1
  40b1b6:	fa02 f303 	lsl.w	r3, r2, r3
  40b1ba:	461a      	mov	r2, r3
  40b1bc:	68fb      	ldr	r3, [r7, #12]
  40b1be:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
  40b1c0:	3710      	adds	r7, #16
  40b1c2:	46bd      	mov	sp, r7
  40b1c4:	bd80      	pop	{r7, pc}
  40b1c6:	bf00      	nop
  40b1c8:	0040b381 	.word	0x0040b381

0040b1cc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40b1cc:	b590      	push	{r4, r7, lr}
  40b1ce:	b087      	sub	sp, #28
  40b1d0:	af02      	add	r7, sp, #8
  40b1d2:	6078      	str	r0, [r7, #4]
  40b1d4:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40b1d6:	6878      	ldr	r0, [r7, #4]
  40b1d8:	4b64      	ldr	r3, [pc, #400]	; (40b36c <pio_configure_pin+0x1a0>)
  40b1da:	4798      	blx	r3
  40b1dc:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40b1de:	683b      	ldr	r3, [r7, #0]
  40b1e0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40b1e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40b1e8:	d06b      	beq.n	40b2c2 <pio_configure_pin+0xf6>
  40b1ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40b1ee:	d809      	bhi.n	40b204 <pio_configure_pin+0x38>
  40b1f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40b1f4:	d02d      	beq.n	40b252 <pio_configure_pin+0x86>
  40b1f6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40b1fa:	d046      	beq.n	40b28a <pio_configure_pin+0xbe>
  40b1fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40b200:	d00b      	beq.n	40b21a <pio_configure_pin+0x4e>
  40b202:	e0ac      	b.n	40b35e <pio_configure_pin+0x192>
  40b204:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40b208:	f000 8083 	beq.w	40b312 <pio_configure_pin+0x146>
  40b20c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40b210:	d07f      	beq.n	40b312 <pio_configure_pin+0x146>
  40b212:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40b216:	d070      	beq.n	40b2fa <pio_configure_pin+0x12e>
  40b218:	e0a1      	b.n	40b35e <pio_configure_pin+0x192>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40b21a:	687b      	ldr	r3, [r7, #4]
  40b21c:	f003 031f 	and.w	r3, r3, #31
  40b220:	2201      	movs	r2, #1
  40b222:	fa02 f303 	lsl.w	r3, r2, r3
  40b226:	68f8      	ldr	r0, [r7, #12]
  40b228:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40b22c:	461a      	mov	r2, r3
  40b22e:	4b50      	ldr	r3, [pc, #320]	; (40b370 <pio_configure_pin+0x1a4>)
  40b230:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40b232:	687b      	ldr	r3, [r7, #4]
  40b234:	f003 031f 	and.w	r3, r3, #31
  40b238:	2201      	movs	r2, #1
  40b23a:	fa02 f303 	lsl.w	r3, r2, r3
  40b23e:	461a      	mov	r2, r3
  40b240:	683b      	ldr	r3, [r7, #0]
  40b242:	f003 0301 	and.w	r3, r3, #1
  40b246:	68f8      	ldr	r0, [r7, #12]
  40b248:	4611      	mov	r1, r2
  40b24a:	461a      	mov	r2, r3
  40b24c:	4b49      	ldr	r3, [pc, #292]	; (40b374 <pio_configure_pin+0x1a8>)
  40b24e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40b250:	e087      	b.n	40b362 <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40b252:	687b      	ldr	r3, [r7, #4]
  40b254:	f003 031f 	and.w	r3, r3, #31
  40b258:	2201      	movs	r2, #1
  40b25a:	fa02 f303 	lsl.w	r3, r2, r3
  40b25e:	68f8      	ldr	r0, [r7, #12]
  40b260:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40b264:	461a      	mov	r2, r3
  40b266:	4b42      	ldr	r3, [pc, #264]	; (40b370 <pio_configure_pin+0x1a4>)
  40b268:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40b26a:	687b      	ldr	r3, [r7, #4]
  40b26c:	f003 031f 	and.w	r3, r3, #31
  40b270:	2201      	movs	r2, #1
  40b272:	fa02 f303 	lsl.w	r3, r2, r3
  40b276:	461a      	mov	r2, r3
  40b278:	683b      	ldr	r3, [r7, #0]
  40b27a:	f003 0301 	and.w	r3, r3, #1
  40b27e:	68f8      	ldr	r0, [r7, #12]
  40b280:	4611      	mov	r1, r2
  40b282:	461a      	mov	r2, r3
  40b284:	4b3b      	ldr	r3, [pc, #236]	; (40b374 <pio_configure_pin+0x1a8>)
  40b286:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40b288:	e06b      	b.n	40b362 <pio_configure_pin+0x196>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40b28a:	687b      	ldr	r3, [r7, #4]
  40b28c:	f003 031f 	and.w	r3, r3, #31
  40b290:	2201      	movs	r2, #1
  40b292:	fa02 f303 	lsl.w	r3, r2, r3
  40b296:	68f8      	ldr	r0, [r7, #12]
  40b298:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40b29c:	461a      	mov	r2, r3
  40b29e:	4b34      	ldr	r3, [pc, #208]	; (40b370 <pio_configure_pin+0x1a4>)
  40b2a0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40b2a2:	687b      	ldr	r3, [r7, #4]
  40b2a4:	f003 031f 	and.w	r3, r3, #31
  40b2a8:	2201      	movs	r2, #1
  40b2aa:	fa02 f303 	lsl.w	r3, r2, r3
  40b2ae:	461a      	mov	r2, r3
  40b2b0:	683b      	ldr	r3, [r7, #0]
  40b2b2:	f003 0301 	and.w	r3, r3, #1
  40b2b6:	68f8      	ldr	r0, [r7, #12]
  40b2b8:	4611      	mov	r1, r2
  40b2ba:	461a      	mov	r2, r3
  40b2bc:	4b2d      	ldr	r3, [pc, #180]	; (40b374 <pio_configure_pin+0x1a8>)
  40b2be:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40b2c0:	e04f      	b.n	40b362 <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40b2c2:	687b      	ldr	r3, [r7, #4]
  40b2c4:	f003 031f 	and.w	r3, r3, #31
  40b2c8:	2201      	movs	r2, #1
  40b2ca:	fa02 f303 	lsl.w	r3, r2, r3
  40b2ce:	68f8      	ldr	r0, [r7, #12]
  40b2d0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40b2d4:	461a      	mov	r2, r3
  40b2d6:	4b26      	ldr	r3, [pc, #152]	; (40b370 <pio_configure_pin+0x1a4>)
  40b2d8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40b2da:	687b      	ldr	r3, [r7, #4]
  40b2dc:	f003 031f 	and.w	r3, r3, #31
  40b2e0:	2201      	movs	r2, #1
  40b2e2:	fa02 f303 	lsl.w	r3, r2, r3
  40b2e6:	461a      	mov	r2, r3
  40b2e8:	683b      	ldr	r3, [r7, #0]
  40b2ea:	f003 0301 	and.w	r3, r3, #1
  40b2ee:	68f8      	ldr	r0, [r7, #12]
  40b2f0:	4611      	mov	r1, r2
  40b2f2:	461a      	mov	r2, r3
  40b2f4:	4b1f      	ldr	r3, [pc, #124]	; (40b374 <pio_configure_pin+0x1a8>)
  40b2f6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40b2f8:	e033      	b.n	40b362 <pio_configure_pin+0x196>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40b2fa:	687b      	ldr	r3, [r7, #4]
  40b2fc:	f003 031f 	and.w	r3, r3, #31
  40b300:	2201      	movs	r2, #1
  40b302:	fa02 f303 	lsl.w	r3, r2, r3
  40b306:	68f8      	ldr	r0, [r7, #12]
  40b308:	4619      	mov	r1, r3
  40b30a:	683a      	ldr	r2, [r7, #0]
  40b30c:	4b1a      	ldr	r3, [pc, #104]	; (40b378 <pio_configure_pin+0x1ac>)
  40b30e:	4798      	blx	r3
		break;
  40b310:	e027      	b.n	40b362 <pio_configure_pin+0x196>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40b312:	687b      	ldr	r3, [r7, #4]
  40b314:	f003 031f 	and.w	r3, r3, #31
  40b318:	2201      	movs	r2, #1
  40b31a:	fa02 f303 	lsl.w	r3, r2, r3
  40b31e:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40b320:	683b      	ldr	r3, [r7, #0]
  40b322:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40b326:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40b32a:	bf14      	ite	ne
  40b32c:	2300      	movne	r3, #0
  40b32e:	2301      	moveq	r3, #1
  40b330:	b2db      	uxtb	r3, r3
  40b332:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40b334:	683b      	ldr	r3, [r7, #0]
  40b336:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40b33a:	2b00      	cmp	r3, #0
  40b33c:	bf0c      	ite	eq
  40b33e:	2300      	moveq	r3, #0
  40b340:	2301      	movne	r3, #1
  40b342:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  40b344:	6838      	ldr	r0, [r7, #0]
  40b346:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40b34a:	2800      	cmp	r0, #0
  40b34c:	bf0c      	ite	eq
  40b34e:	2000      	moveq	r0, #0
  40b350:	2001      	movne	r0, #1
  40b352:	b2c0      	uxtb	r0, r0
  40b354:	9000      	str	r0, [sp, #0]
  40b356:	68f8      	ldr	r0, [r7, #12]
  40b358:	4c08      	ldr	r4, [pc, #32]	; (40b37c <pio_configure_pin+0x1b0>)
  40b35a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40b35c:	e001      	b.n	40b362 <pio_configure_pin+0x196>

	default:
		return 0;
  40b35e:	2300      	movs	r3, #0
  40b360:	e000      	b.n	40b364 <pio_configure_pin+0x198>
	}

	return 1;
  40b362:	2301      	movs	r3, #1
}
  40b364:	4618      	mov	r0, r3
  40b366:	3714      	adds	r7, #20
  40b368:	46bd      	mov	sp, r7
  40b36a:	bd90      	pop	{r4, r7, pc}
  40b36c:	0040b381 	.word	0x0040b381
  40b370:	0040ae25 	.word	0x0040ae25
  40b374:	0040adc1 	.word	0x0040adc1
  40b378:	0040af35 	.word	0x0040af35
  40b37c:	0040afb1 	.word	0x0040afb1

0040b380 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  40b380:	b480      	push	{r7}
  40b382:	b085      	sub	sp, #20
  40b384:	af00      	add	r7, sp, #0
  40b386:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40b388:	687b      	ldr	r3, [r7, #4]
  40b38a:	095b      	lsrs	r3, r3, #5
  40b38c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40b390:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40b394:	025b      	lsls	r3, r3, #9
  40b396:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  40b398:	68fb      	ldr	r3, [r7, #12]
}
  40b39a:	4618      	mov	r0, r3
  40b39c:	3714      	adds	r7, #20
  40b39e:	46bd      	mov	sp, r7
  40b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b3a4:	4770      	bx	lr
  40b3a6:	bf00      	nop

0040b3a8 <pio_get_pin_group_id>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port peripheral ID.
 */
uint32_t pio_get_pin_group_id(uint32_t ul_pin)
{
  40b3a8:	b480      	push	{r7}
  40b3aa:	b085      	sub	sp, #20
  40b3ac:	af00      	add	r7, sp, #0
  40b3ae:	6078      	str	r0, [r7, #4]
		ul_id = ID_PIOC;
	} else {
		ul_id = ID_PIOA + (ul_pin >> 5);
	}
#else
	ul_id = ID_PIOA + (ul_pin >> 5);
  40b3b0:	687b      	ldr	r3, [r7, #4]
  40b3b2:	095b      	lsrs	r3, r3, #5
  40b3b4:	330b      	adds	r3, #11
  40b3b6:	60fb      	str	r3, [r7, #12]
#endif
	return ul_id;
  40b3b8:	68fb      	ldr	r3, [r7, #12]
}
  40b3ba:	4618      	mov	r0, r3
  40b3bc:	3714      	adds	r7, #20
  40b3be:	46bd      	mov	sp, r7
  40b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b3c4:	4770      	bx	lr
  40b3c6:	bf00      	nop

0040b3c8 <pio_get_pin_group_mask>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port pin mask.
 */
uint32_t pio_get_pin_group_mask(uint32_t ul_pin)
{
  40b3c8:	b480      	push	{r7}
  40b3ca:	b085      	sub	sp, #20
  40b3cc:	af00      	add	r7, sp, #0
  40b3ce:	6078      	str	r0, [r7, #4]
	uint32_t ul_mask = 1 << (ul_pin & 0x1F);
  40b3d0:	687b      	ldr	r3, [r7, #4]
  40b3d2:	f003 031f 	and.w	r3, r3, #31
  40b3d6:	2201      	movs	r2, #1
  40b3d8:	fa02 f303 	lsl.w	r3, r2, r3
  40b3dc:	60fb      	str	r3, [r7, #12]
	return ul_mask;
  40b3de:	68fb      	ldr	r3, [r7, #12]
}
  40b3e0:	4618      	mov	r0, r3
  40b3e2:	3714      	adds	r7, #20
  40b3e4:	46bd      	mov	sp, r7
  40b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b3ea:	4770      	bx	lr

0040b3ec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40b3ec:	b580      	push	{r7, lr}
  40b3ee:	b084      	sub	sp, #16
  40b3f0:	af00      	add	r7, sp, #0
  40b3f2:	6078      	str	r0, [r7, #4]
  40b3f4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40b3f6:	6878      	ldr	r0, [r7, #4]
  40b3f8:	4b2a      	ldr	r3, [pc, #168]	; (40b4a4 <pio_handler_process+0xb8>)
  40b3fa:	4798      	blx	r3
  40b3fc:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40b3fe:	6878      	ldr	r0, [r7, #4]
  40b400:	4b29      	ldr	r3, [pc, #164]	; (40b4a8 <pio_handler_process+0xbc>)
  40b402:	4798      	blx	r3
  40b404:	4603      	mov	r3, r0
  40b406:	68fa      	ldr	r2, [r7, #12]
  40b408:	4013      	ands	r3, r2
  40b40a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40b40c:	68fb      	ldr	r3, [r7, #12]
  40b40e:	2b00      	cmp	r3, #0
  40b410:	d039      	beq.n	40b486 <pio_handler_process+0x9a>
		/* Find triggering source */
		i = 0;
  40b412:	2300      	movs	r3, #0
  40b414:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40b416:	e033      	b.n	40b480 <pio_handler_process+0x94>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40b418:	4a24      	ldr	r2, [pc, #144]	; (40b4ac <pio_handler_process+0xc0>)
  40b41a:	68bb      	ldr	r3, [r7, #8]
  40b41c:	011b      	lsls	r3, r3, #4
  40b41e:	4413      	add	r3, r2
  40b420:	681a      	ldr	r2, [r3, #0]
  40b422:	683b      	ldr	r3, [r7, #0]
  40b424:	429a      	cmp	r2, r3
  40b426:	d124      	bne.n	40b472 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40b428:	4a20      	ldr	r2, [pc, #128]	; (40b4ac <pio_handler_process+0xc0>)
  40b42a:	68bb      	ldr	r3, [r7, #8]
  40b42c:	011b      	lsls	r3, r3, #4
  40b42e:	4413      	add	r3, r2
  40b430:	685a      	ldr	r2, [r3, #4]
  40b432:	68fb      	ldr	r3, [r7, #12]
  40b434:	4013      	ands	r3, r2
  40b436:	2b00      	cmp	r3, #0
  40b438:	d01b      	beq.n	40b472 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40b43a:	4a1c      	ldr	r2, [pc, #112]	; (40b4ac <pio_handler_process+0xc0>)
  40b43c:	68bb      	ldr	r3, [r7, #8]
  40b43e:	011b      	lsls	r3, r3, #4
  40b440:	4413      	add	r3, r2
  40b442:	3308      	adds	r3, #8
  40b444:	685b      	ldr	r3, [r3, #4]
  40b446:	4919      	ldr	r1, [pc, #100]	; (40b4ac <pio_handler_process+0xc0>)
  40b448:	68ba      	ldr	r2, [r7, #8]
  40b44a:	0112      	lsls	r2, r2, #4
  40b44c:	440a      	add	r2, r1
  40b44e:	6811      	ldr	r1, [r2, #0]
  40b450:	4816      	ldr	r0, [pc, #88]	; (40b4ac <pio_handler_process+0xc0>)
  40b452:	68ba      	ldr	r2, [r7, #8]
  40b454:	0112      	lsls	r2, r2, #4
  40b456:	4402      	add	r2, r0
  40b458:	6852      	ldr	r2, [r2, #4]
  40b45a:	4608      	mov	r0, r1
  40b45c:	4611      	mov	r1, r2
  40b45e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40b460:	4a12      	ldr	r2, [pc, #72]	; (40b4ac <pio_handler_process+0xc0>)
  40b462:	68bb      	ldr	r3, [r7, #8]
  40b464:	011b      	lsls	r3, r3, #4
  40b466:	4413      	add	r3, r2
  40b468:	685b      	ldr	r3, [r3, #4]
  40b46a:	43db      	mvns	r3, r3
  40b46c:	68fa      	ldr	r2, [r7, #12]
  40b46e:	4013      	ands	r3, r2
  40b470:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40b472:	68bb      	ldr	r3, [r7, #8]
  40b474:	3301      	adds	r3, #1
  40b476:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40b478:	68bb      	ldr	r3, [r7, #8]
  40b47a:	2b06      	cmp	r3, #6
  40b47c:	d900      	bls.n	40b480 <pio_handler_process+0x94>
				break;
  40b47e:	e002      	b.n	40b486 <pio_handler_process+0x9a>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40b480:	68fb      	ldr	r3, [r7, #12]
  40b482:	2b00      	cmp	r3, #0
  40b484:	d1c8      	bne.n	40b418 <pio_handler_process+0x2c>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40b486:	4b0a      	ldr	r3, [pc, #40]	; (40b4b0 <pio_handler_process+0xc4>)
  40b488:	681b      	ldr	r3, [r3, #0]
  40b48a:	2b00      	cmp	r3, #0
  40b48c:	d007      	beq.n	40b49e <pio_handler_process+0xb2>
		if (pio_capture_handler) {
  40b48e:	4b09      	ldr	r3, [pc, #36]	; (40b4b4 <pio_handler_process+0xc8>)
  40b490:	681b      	ldr	r3, [r3, #0]
  40b492:	2b00      	cmp	r3, #0
  40b494:	d003      	beq.n	40b49e <pio_handler_process+0xb2>
			pio_capture_handler(p_pio);
  40b496:	4b07      	ldr	r3, [pc, #28]	; (40b4b4 <pio_handler_process+0xc8>)
  40b498:	681b      	ldr	r3, [r3, #0]
  40b49a:	6878      	ldr	r0, [r7, #4]
  40b49c:	4798      	blx	r3
		}
	}
#endif
}
  40b49e:	3710      	adds	r7, #16
  40b4a0:	46bd      	mov	sp, r7
  40b4a2:	bd80      	pop	{r7, pc}
  40b4a4:	0040b0bd 	.word	0x0040b0bd
  40b4a8:	0040b0d5 	.word	0x0040b0d5
  40b4ac:	20008894 	.word	0x20008894
  40b4b0:	200099cc 	.word	0x200099cc
  40b4b4:	20008908 	.word	0x20008908

0040b4b8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40b4b8:	b580      	push	{r7, lr}
  40b4ba:	b086      	sub	sp, #24
  40b4bc:	af00      	add	r7, sp, #0
  40b4be:	60f8      	str	r0, [r7, #12]
  40b4c0:	60b9      	str	r1, [r7, #8]
  40b4c2:	607a      	str	r2, [r7, #4]
  40b4c4:	603b      	str	r3, [r7, #0]
	struct s_interrupt_source *pSource;
	
	//search to see if there's already an entry. 
	int i = 0;
  40b4c6:	2300      	movs	r3, #0
  40b4c8:	617b      	str	r3, [r7, #20]
	for(i=0;i<gs_ul_nb_sources; i++)
  40b4ca:	2300      	movs	r3, #0
  40b4cc:	617b      	str	r3, [r7, #20]
  40b4ce:	e022      	b.n	40b516 <pio_handler_set+0x5e>
	{
		if(gs_interrupt_sources[i].id == ul_id)
  40b4d0:	4a27      	ldr	r2, [pc, #156]	; (40b570 <pio_handler_set+0xb8>)
  40b4d2:	697b      	ldr	r3, [r7, #20]
  40b4d4:	011b      	lsls	r3, r3, #4
  40b4d6:	4413      	add	r3, r2
  40b4d8:	681a      	ldr	r2, [r3, #0]
  40b4da:	68bb      	ldr	r3, [r7, #8]
  40b4dc:	429a      	cmp	r2, r3
  40b4de:	d117      	bne.n	40b510 <pio_handler_set+0x58>
		{
			pSource = &(gs_interrupt_sources[i]);
  40b4e0:	697b      	ldr	r3, [r7, #20]
  40b4e2:	011a      	lsls	r2, r3, #4
  40b4e4:	4b22      	ldr	r3, [pc, #136]	; (40b570 <pio_handler_set+0xb8>)
  40b4e6:	4413      	add	r3, r2
  40b4e8:	613b      	str	r3, [r7, #16]
			pSource->id = ul_id;
  40b4ea:	693b      	ldr	r3, [r7, #16]
  40b4ec:	68ba      	ldr	r2, [r7, #8]
  40b4ee:	601a      	str	r2, [r3, #0]
			pSource->mask = ul_mask;
  40b4f0:	693b      	ldr	r3, [r7, #16]
  40b4f2:	687a      	ldr	r2, [r7, #4]
  40b4f4:	605a      	str	r2, [r3, #4]
			pSource->attr = ul_attr;
  40b4f6:	693b      	ldr	r3, [r7, #16]
  40b4f8:	683a      	ldr	r2, [r7, #0]
  40b4fa:	609a      	str	r2, [r3, #8]
			pSource->handler = p_handler;	
  40b4fc:	693b      	ldr	r3, [r7, #16]
  40b4fe:	6a3a      	ldr	r2, [r7, #32]
  40b500:	60da      	str	r2, [r3, #12]
			/* Configure interrupt mode */
			pio_configure_interrupt(p_pio, ul_mask, ul_attr);	
  40b502:	68f8      	ldr	r0, [r7, #12]
  40b504:	6879      	ldr	r1, [r7, #4]
  40b506:	683a      	ldr	r2, [r7, #0]
  40b508:	4b1a      	ldr	r3, [pc, #104]	; (40b574 <pio_handler_set+0xbc>)
  40b50a:	4798      	blx	r3
			return 0;
  40b50c:	2300      	movs	r3, #0
  40b50e:	e02a      	b.n	40b566 <pio_handler_set+0xae>
{
	struct s_interrupt_source *pSource;
	
	//search to see if there's already an entry. 
	int i = 0;
	for(i=0;i<gs_ul_nb_sources; i++)
  40b510:	697b      	ldr	r3, [r7, #20]
  40b512:	3301      	adds	r3, #1
  40b514:	617b      	str	r3, [r7, #20]
  40b516:	697a      	ldr	r2, [r7, #20]
  40b518:	4b17      	ldr	r3, [pc, #92]	; (40b578 <pio_handler_set+0xc0>)
  40b51a:	681b      	ldr	r3, [r3, #0]
  40b51c:	429a      	cmp	r2, r3
  40b51e:	d3d7      	bcc.n	40b4d0 <pio_handler_set+0x18>
			pio_configure_interrupt(p_pio, ul_mask, ul_attr);	
			return 0;
		}
	}
	
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40b520:	4b15      	ldr	r3, [pc, #84]	; (40b578 <pio_handler_set+0xc0>)
  40b522:	681b      	ldr	r3, [r3, #0]
  40b524:	2b06      	cmp	r3, #6
  40b526:	d901      	bls.n	40b52c <pio_handler_set+0x74>
		return 1;
  40b528:	2301      	movs	r3, #1
  40b52a:	e01c      	b.n	40b566 <pio_handler_set+0xae>

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  40b52c:	4b12      	ldr	r3, [pc, #72]	; (40b578 <pio_handler_set+0xc0>)
  40b52e:	681b      	ldr	r3, [r3, #0]
  40b530:	011a      	lsls	r2, r3, #4
  40b532:	4b0f      	ldr	r3, [pc, #60]	; (40b570 <pio_handler_set+0xb8>)
  40b534:	4413      	add	r3, r2
  40b536:	613b      	str	r3, [r7, #16]
	pSource->id = ul_id;
  40b538:	693b      	ldr	r3, [r7, #16]
  40b53a:	68ba      	ldr	r2, [r7, #8]
  40b53c:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  40b53e:	693b      	ldr	r3, [r7, #16]
  40b540:	687a      	ldr	r2, [r7, #4]
  40b542:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40b544:	693b      	ldr	r3, [r7, #16]
  40b546:	683a      	ldr	r2, [r7, #0]
  40b548:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  40b54a:	693b      	ldr	r3, [r7, #16]
  40b54c:	6a3a      	ldr	r2, [r7, #32]
  40b54e:	60da      	str	r2, [r3, #12]
	gs_ul_nb_sources++;
  40b550:	4b09      	ldr	r3, [pc, #36]	; (40b578 <pio_handler_set+0xc0>)
  40b552:	681b      	ldr	r3, [r3, #0]
  40b554:	1c5a      	adds	r2, r3, #1
  40b556:	4b08      	ldr	r3, [pc, #32]	; (40b578 <pio_handler_set+0xc0>)
  40b558:	601a      	str	r2, [r3, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40b55a:	68f8      	ldr	r0, [r7, #12]
  40b55c:	6879      	ldr	r1, [r7, #4]
  40b55e:	683a      	ldr	r2, [r7, #0]
  40b560:	4b04      	ldr	r3, [pc, #16]	; (40b574 <pio_handler_set+0xbc>)
  40b562:	4798      	blx	r3

	return 0;
  40b564:	2300      	movs	r3, #0
}
  40b566:	4618      	mov	r0, r3
  40b568:	3718      	adds	r7, #24
  40b56a:	46bd      	mov	sp, r7
  40b56c:	bd80      	pop	{r7, pc}
  40b56e:	bf00      	nop
  40b570:	20008894 	.word	0x20008894
  40b574:	0040b015 	.word	0x0040b015
  40b578:	20008904 	.word	0x20008904

0040b57c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40b57c:	b580      	push	{r7, lr}
  40b57e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40b580:	4802      	ldr	r0, [pc, #8]	; (40b58c <PIOA_Handler+0x10>)
  40b582:	210b      	movs	r1, #11
  40b584:	4b02      	ldr	r3, [pc, #8]	; (40b590 <PIOA_Handler+0x14>)
  40b586:	4798      	blx	r3
}
  40b588:	bd80      	pop	{r7, pc}
  40b58a:	bf00      	nop
  40b58c:	400e0e00 	.word	0x400e0e00
  40b590:	0040b3ed 	.word	0x0040b3ed

0040b594 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40b594:	b580      	push	{r7, lr}
  40b596:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40b598:	4802      	ldr	r0, [pc, #8]	; (40b5a4 <PIOB_Handler+0x10>)
  40b59a:	210c      	movs	r1, #12
  40b59c:	4b02      	ldr	r3, [pc, #8]	; (40b5a8 <PIOB_Handler+0x14>)
  40b59e:	4798      	blx	r3
}
  40b5a0:	bd80      	pop	{r7, pc}
  40b5a2:	bf00      	nop
  40b5a4:	400e1000 	.word	0x400e1000
  40b5a8:	0040b3ed 	.word	0x0040b3ed

0040b5ac <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40b5ac:	b480      	push	{r7}
  40b5ae:	b085      	sub	sp, #20
  40b5b0:	af00      	add	r7, sp, #0
  40b5b2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40b5b4:	4b1d      	ldr	r3, [pc, #116]	; (40b62c <pmc_switch_mck_to_pllack+0x80>)
  40b5b6:	4a1d      	ldr	r2, [pc, #116]	; (40b62c <pmc_switch_mck_to_pllack+0x80>)
  40b5b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40b5ba:	f022 0170 	bic.w	r1, r2, #112	; 0x70
  40b5be:	687a      	ldr	r2, [r7, #4]
  40b5c0:	430a      	orrs	r2, r1
  40b5c2:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40b5c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40b5c8:	60fb      	str	r3, [r7, #12]
  40b5ca:	e007      	b.n	40b5dc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40b5cc:	68fb      	ldr	r3, [r7, #12]
  40b5ce:	2b00      	cmp	r3, #0
  40b5d0:	d101      	bne.n	40b5d6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40b5d2:	2301      	movs	r3, #1
  40b5d4:	e023      	b.n	40b61e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40b5d6:	68fb      	ldr	r3, [r7, #12]
  40b5d8:	3b01      	subs	r3, #1
  40b5da:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40b5dc:	4b13      	ldr	r3, [pc, #76]	; (40b62c <pmc_switch_mck_to_pllack+0x80>)
  40b5de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b5e0:	f003 0308 	and.w	r3, r3, #8
  40b5e4:	2b00      	cmp	r3, #0
  40b5e6:	d0f1      	beq.n	40b5cc <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40b5e8:	4b10      	ldr	r3, [pc, #64]	; (40b62c <pmc_switch_mck_to_pllack+0x80>)
  40b5ea:	4a10      	ldr	r2, [pc, #64]	; (40b62c <pmc_switch_mck_to_pllack+0x80>)
  40b5ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40b5ee:	f022 0203 	bic.w	r2, r2, #3
  40b5f2:	f042 0202 	orr.w	r2, r2, #2
  40b5f6:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40b5f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40b5fc:	60fb      	str	r3, [r7, #12]
  40b5fe:	e007      	b.n	40b610 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40b600:	68fb      	ldr	r3, [r7, #12]
  40b602:	2b00      	cmp	r3, #0
  40b604:	d101      	bne.n	40b60a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40b606:	2301      	movs	r3, #1
  40b608:	e009      	b.n	40b61e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40b60a:	68fb      	ldr	r3, [r7, #12]
  40b60c:	3b01      	subs	r3, #1
  40b60e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40b610:	4b06      	ldr	r3, [pc, #24]	; (40b62c <pmc_switch_mck_to_pllack+0x80>)
  40b612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b614:	f003 0308 	and.w	r3, r3, #8
  40b618:	2b00      	cmp	r3, #0
  40b61a:	d0f1      	beq.n	40b600 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40b61c:	2300      	movs	r3, #0
}
  40b61e:	4618      	mov	r0, r3
  40b620:	3714      	adds	r7, #20
  40b622:	46bd      	mov	sp, r7
  40b624:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b628:	4770      	bx	lr
  40b62a:	bf00      	nop
  40b62c:	400e0400 	.word	0x400e0400

0040b630 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40b630:	b480      	push	{r7}
  40b632:	b083      	sub	sp, #12
  40b634:	af00      	add	r7, sp, #0
  40b636:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40b638:	687b      	ldr	r3, [r7, #4]
  40b63a:	2b01      	cmp	r3, #1
  40b63c:	d107      	bne.n	40b64e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40b63e:	4a08      	ldr	r2, [pc, #32]	; (40b660 <pmc_switch_sclk_to_32kxtal+0x30>)
  40b640:	4b07      	ldr	r3, [pc, #28]	; (40b660 <pmc_switch_sclk_to_32kxtal+0x30>)
  40b642:	689b      	ldr	r3, [r3, #8]
  40b644:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  40b648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40b64c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40b64e:	4b04      	ldr	r3, [pc, #16]	; (40b660 <pmc_switch_sclk_to_32kxtal+0x30>)
  40b650:	4a04      	ldr	r2, [pc, #16]	; (40b664 <pmc_switch_sclk_to_32kxtal+0x34>)
  40b652:	601a      	str	r2, [r3, #0]
}
  40b654:	370c      	adds	r7, #12
  40b656:	46bd      	mov	sp, r7
  40b658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b65c:	4770      	bx	lr
  40b65e:	bf00      	nop
  40b660:	400e1410 	.word	0x400e1410
  40b664:	a5000008 	.word	0xa5000008

0040b668 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  40b668:	b480      	push	{r7}
  40b66a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40b66c:	4b09      	ldr	r3, [pc, #36]	; (40b694 <pmc_osc_is_ready_32kxtal+0x2c>)
  40b66e:	695b      	ldr	r3, [r3, #20]
  40b670:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40b674:	2b00      	cmp	r3, #0
  40b676:	d007      	beq.n	40b688 <pmc_osc_is_ready_32kxtal+0x20>
  40b678:	4b07      	ldr	r3, [pc, #28]	; (40b698 <pmc_osc_is_ready_32kxtal+0x30>)
  40b67a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b67c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40b680:	2b00      	cmp	r3, #0
  40b682:	d001      	beq.n	40b688 <pmc_osc_is_ready_32kxtal+0x20>
  40b684:	2301      	movs	r3, #1
  40b686:	e000      	b.n	40b68a <pmc_osc_is_ready_32kxtal+0x22>
  40b688:	2300      	movs	r3, #0
}
  40b68a:	4618      	mov	r0, r3
  40b68c:	46bd      	mov	sp, r7
  40b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b692:	4770      	bx	lr
  40b694:	400e1410 	.word	0x400e1410
  40b698:	400e0400 	.word	0x400e0400

0040b69c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40b69c:	b480      	push	{r7}
  40b69e:	b083      	sub	sp, #12
  40b6a0:	af00      	add	r7, sp, #0
  40b6a2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40b6a4:	4a18      	ldr	r2, [pc, #96]	; (40b708 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b6a6:	4b18      	ldr	r3, [pc, #96]	; (40b708 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b6a8:	6a1b      	ldr	r3, [r3, #32]
  40b6aa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40b6ae:	f043 0308 	orr.w	r3, r3, #8
  40b6b2:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40b6b4:	bf00      	nop
  40b6b6:	4b14      	ldr	r3, [pc, #80]	; (40b708 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b6b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b6ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40b6be:	2b00      	cmp	r3, #0
  40b6c0:	d0f9      	beq.n	40b6b6 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40b6c2:	4a11      	ldr	r2, [pc, #68]	; (40b708 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b6c4:	4b10      	ldr	r3, [pc, #64]	; (40b708 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b6c6:	6a1b      	ldr	r3, [r3, #32]
  40b6c8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40b6cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40b6d0:	6879      	ldr	r1, [r7, #4]
  40b6d2:	430b      	orrs	r3, r1
  40b6d4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40b6d8:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40b6da:	bf00      	nop
  40b6dc:	4b0a      	ldr	r3, [pc, #40]	; (40b708 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b6de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b6e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40b6e4:	2b00      	cmp	r3, #0
  40b6e6:	d0f9      	beq.n	40b6dc <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40b6e8:	4a07      	ldr	r2, [pc, #28]	; (40b708 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b6ea:	4b07      	ldr	r3, [pc, #28]	; (40b708 <pmc_switch_mainck_to_fastrc+0x6c>)
  40b6ec:	6a1b      	ldr	r3, [r3, #32]
  40b6ee:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40b6f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40b6f6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40b6fa:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40b6fc:	370c      	adds	r7, #12
  40b6fe:	46bd      	mov	sp, r7
  40b700:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b704:	4770      	bx	lr
  40b706:	bf00      	nop
  40b708:	400e0400 	.word	0x400e0400

0040b70c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40b70c:	b480      	push	{r7}
  40b70e:	b083      	sub	sp, #12
  40b710:	af00      	add	r7, sp, #0
  40b712:	6078      	str	r0, [r7, #4]
  40b714:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40b716:	687b      	ldr	r3, [r7, #4]
  40b718:	2b00      	cmp	r3, #0
  40b71a:	d008      	beq.n	40b72e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40b71c:	4916      	ldr	r1, [pc, #88]	; (40b778 <pmc_switch_mainck_to_xtal+0x6c>)
  40b71e:	4b16      	ldr	r3, [pc, #88]	; (40b778 <pmc_switch_mainck_to_xtal+0x6c>)
  40b720:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40b722:	4a16      	ldr	r2, [pc, #88]	; (40b77c <pmc_switch_mainck_to_xtal+0x70>)
  40b724:	401a      	ands	r2, r3
  40b726:	4b16      	ldr	r3, [pc, #88]	; (40b780 <pmc_switch_mainck_to_xtal+0x74>)
  40b728:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40b72a:	620b      	str	r3, [r1, #32]
  40b72c:	e01e      	b.n	40b76c <pmc_switch_mainck_to_xtal+0x60>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40b72e:	4a12      	ldr	r2, [pc, #72]	; (40b778 <pmc_switch_mainck_to_xtal+0x6c>)
  40b730:	4b11      	ldr	r3, [pc, #68]	; (40b778 <pmc_switch_mainck_to_xtal+0x6c>)
  40b732:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40b734:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40b738:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40b73c:	6839      	ldr	r1, [r7, #0]
  40b73e:	0209      	lsls	r1, r1, #8
  40b740:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40b742:	430b      	orrs	r3, r1
  40b744:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40b748:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40b74c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40b74e:	bf00      	nop
  40b750:	4b09      	ldr	r3, [pc, #36]	; (40b778 <pmc_switch_mainck_to_xtal+0x6c>)
  40b752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b754:	f003 0301 	and.w	r3, r3, #1
  40b758:	2b00      	cmp	r3, #0
  40b75a:	d0f9      	beq.n	40b750 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40b75c:	4a06      	ldr	r2, [pc, #24]	; (40b778 <pmc_switch_mainck_to_xtal+0x6c>)
  40b75e:	4b06      	ldr	r3, [pc, #24]	; (40b778 <pmc_switch_mainck_to_xtal+0x6c>)
  40b760:	6a1b      	ldr	r3, [r3, #32]
  40b762:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40b766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40b76a:	6213      	str	r3, [r2, #32]
	}
}
  40b76c:	370c      	adds	r7, #12
  40b76e:	46bd      	mov	sp, r7
  40b770:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b774:	4770      	bx	lr
  40b776:	bf00      	nop
  40b778:	400e0400 	.word	0x400e0400
  40b77c:	fec8fffc 	.word	0xfec8fffc
  40b780:	01370002 	.word	0x01370002

0040b784 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40b784:	b480      	push	{r7}
  40b786:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40b788:	4b04      	ldr	r3, [pc, #16]	; (40b79c <pmc_osc_is_ready_mainck+0x18>)
  40b78a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b78c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40b790:	4618      	mov	r0, r3
  40b792:	46bd      	mov	sp, r7
  40b794:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b798:	4770      	bx	lr
  40b79a:	bf00      	nop
  40b79c:	400e0400 	.word	0x400e0400

0040b7a0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40b7a0:	b480      	push	{r7}
  40b7a2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40b7a4:	4b03      	ldr	r3, [pc, #12]	; (40b7b4 <pmc_disable_pllack+0x14>)
  40b7a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40b7aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40b7ac:	46bd      	mov	sp, r7
  40b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b7b2:	4770      	bx	lr
  40b7b4:	400e0400 	.word	0x400e0400

0040b7b8 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40b7b8:	b480      	push	{r7}
  40b7ba:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40b7bc:	4b04      	ldr	r3, [pc, #16]	; (40b7d0 <pmc_is_locked_pllack+0x18>)
  40b7be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b7c0:	f003 0302 	and.w	r3, r3, #2
}
  40b7c4:	4618      	mov	r0, r3
  40b7c6:	46bd      	mov	sp, r7
  40b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b7cc:	4770      	bx	lr
  40b7ce:	bf00      	nop
  40b7d0:	400e0400 	.word	0x400e0400

0040b7d4 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  40b7d4:	b480      	push	{r7}
  40b7d6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40b7d8:	4b03      	ldr	r3, [pc, #12]	; (40b7e8 <pmc_disable_pllbck+0x14>)
  40b7da:	2200      	movs	r2, #0
  40b7dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40b7de:	46bd      	mov	sp, r7
  40b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b7e4:	4770      	bx	lr
  40b7e6:	bf00      	nop
  40b7e8:	400e0400 	.word	0x400e0400

0040b7ec <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  40b7ec:	b480      	push	{r7}
  40b7ee:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40b7f0:	4b04      	ldr	r3, [pc, #16]	; (40b804 <pmc_is_locked_pllbck+0x18>)
  40b7f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b7f4:	f003 0304 	and.w	r3, r3, #4
}
  40b7f8:	4618      	mov	r0, r3
  40b7fa:	46bd      	mov	sp, r7
  40b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b800:	4770      	bx	lr
  40b802:	bf00      	nop
  40b804:	400e0400 	.word	0x400e0400

0040b808 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40b808:	b480      	push	{r7}
  40b80a:	b083      	sub	sp, #12
  40b80c:	af00      	add	r7, sp, #0
  40b80e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40b810:	687b      	ldr	r3, [r7, #4]
  40b812:	2b22      	cmp	r3, #34	; 0x22
  40b814:	d901      	bls.n	40b81a <pmc_enable_periph_clk+0x12>
		return 1;
  40b816:	2301      	movs	r3, #1
  40b818:	e02f      	b.n	40b87a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40b81a:	687b      	ldr	r3, [r7, #4]
  40b81c:	2b1f      	cmp	r3, #31
  40b81e:	d813      	bhi.n	40b848 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40b820:	4b19      	ldr	r3, [pc, #100]	; (40b888 <pmc_enable_periph_clk+0x80>)
  40b822:	699a      	ldr	r2, [r3, #24]
  40b824:	687b      	ldr	r3, [r7, #4]
  40b826:	2101      	movs	r1, #1
  40b828:	fa01 f303 	lsl.w	r3, r1, r3
  40b82c:	401a      	ands	r2, r3
  40b82e:	687b      	ldr	r3, [r7, #4]
  40b830:	2101      	movs	r1, #1
  40b832:	fa01 f303 	lsl.w	r3, r1, r3
  40b836:	429a      	cmp	r2, r3
  40b838:	d01e      	beq.n	40b878 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40b83a:	4b13      	ldr	r3, [pc, #76]	; (40b888 <pmc_enable_periph_clk+0x80>)
  40b83c:	687a      	ldr	r2, [r7, #4]
  40b83e:	2101      	movs	r1, #1
  40b840:	fa01 f202 	lsl.w	r2, r1, r2
  40b844:	611a      	str	r2, [r3, #16]
  40b846:	e017      	b.n	40b878 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
  40b848:	687b      	ldr	r3, [r7, #4]
  40b84a:	3b20      	subs	r3, #32
  40b84c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40b84e:	4b0e      	ldr	r3, [pc, #56]	; (40b888 <pmc_enable_periph_clk+0x80>)
  40b850:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40b854:	687b      	ldr	r3, [r7, #4]
  40b856:	2101      	movs	r1, #1
  40b858:	fa01 f303 	lsl.w	r3, r1, r3
  40b85c:	401a      	ands	r2, r3
  40b85e:	687b      	ldr	r3, [r7, #4]
  40b860:	2101      	movs	r1, #1
  40b862:	fa01 f303 	lsl.w	r3, r1, r3
  40b866:	429a      	cmp	r2, r3
  40b868:	d006      	beq.n	40b878 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40b86a:	4b07      	ldr	r3, [pc, #28]	; (40b888 <pmc_enable_periph_clk+0x80>)
  40b86c:	687a      	ldr	r2, [r7, #4]
  40b86e:	2101      	movs	r1, #1
  40b870:	fa01 f202 	lsl.w	r2, r1, r2
  40b874:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40b878:	2300      	movs	r3, #0
}
  40b87a:	4618      	mov	r0, r3
  40b87c:	370c      	adds	r7, #12
  40b87e:	46bd      	mov	sp, r7
  40b880:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b884:	4770      	bx	lr
  40b886:	bf00      	nop
  40b888:	400e0400 	.word	0x400e0400

0040b88c <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
  40b88c:	b480      	push	{r7}
  40b88e:	b083      	sub	sp, #12
  40b890:	af00      	add	r7, sp, #0
  40b892:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40b894:	687b      	ldr	r3, [r7, #4]
  40b896:	2b22      	cmp	r3, #34	; 0x22
  40b898:	d901      	bls.n	40b89e <pmc_disable_periph_clk+0x12>
		return 1;
  40b89a:	2301      	movs	r3, #1
  40b89c:	e02f      	b.n	40b8fe <pmc_disable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40b89e:	687b      	ldr	r3, [r7, #4]
  40b8a0:	2b1f      	cmp	r3, #31
  40b8a2:	d813      	bhi.n	40b8cc <pmc_disable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  40b8a4:	4b19      	ldr	r3, [pc, #100]	; (40b90c <pmc_disable_periph_clk+0x80>)
  40b8a6:	699a      	ldr	r2, [r3, #24]
  40b8a8:	687b      	ldr	r3, [r7, #4]
  40b8aa:	2101      	movs	r1, #1
  40b8ac:	fa01 f303 	lsl.w	r3, r1, r3
  40b8b0:	401a      	ands	r2, r3
  40b8b2:	687b      	ldr	r3, [r7, #4]
  40b8b4:	2101      	movs	r1, #1
  40b8b6:	fa01 f303 	lsl.w	r3, r1, r3
  40b8ba:	429a      	cmp	r2, r3
  40b8bc:	d11e      	bne.n	40b8fc <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR0 = 1 << ul_id;
  40b8be:	4b13      	ldr	r3, [pc, #76]	; (40b90c <pmc_disable_periph_clk+0x80>)
  40b8c0:	687a      	ldr	r2, [r7, #4]
  40b8c2:	2101      	movs	r1, #1
  40b8c4:	fa01 f202 	lsl.w	r2, r1, r2
  40b8c8:	615a      	str	r2, [r3, #20]
  40b8ca:	e017      	b.n	40b8fc <pmc_disable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
  40b8cc:	687b      	ldr	r3, [r7, #4]
  40b8ce:	3b20      	subs	r3, #32
  40b8d0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40b8d2:	4b0e      	ldr	r3, [pc, #56]	; (40b90c <pmc_disable_periph_clk+0x80>)
  40b8d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40b8d8:	687b      	ldr	r3, [r7, #4]
  40b8da:	2101      	movs	r1, #1
  40b8dc:	fa01 f303 	lsl.w	r3, r1, r3
  40b8e0:	401a      	ands	r2, r3
  40b8e2:	687b      	ldr	r3, [r7, #4]
  40b8e4:	2101      	movs	r1, #1
  40b8e6:	fa01 f303 	lsl.w	r3, r1, r3
  40b8ea:	429a      	cmp	r2, r3
  40b8ec:	d106      	bne.n	40b8fc <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR1 = 1 << ul_id;
  40b8ee:	4b07      	ldr	r3, [pc, #28]	; (40b90c <pmc_disable_periph_clk+0x80>)
  40b8f0:	687a      	ldr	r2, [r7, #4]
  40b8f2:	2101      	movs	r1, #1
  40b8f4:	fa01 f202 	lsl.w	r2, r1, r2
  40b8f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		}
#endif
	}
	return 0;
  40b8fc:	2300      	movs	r3, #0
}
  40b8fe:	4618      	mov	r0, r3
  40b900:	370c      	adds	r7, #12
  40b902:	46bd      	mov	sp, r7
  40b904:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b908:	4770      	bx	lr
  40b90a:	bf00      	nop
  40b90c:	400e0400 	.word	0x400e0400

0040b910 <pmc_switch_udpck_to_pllbck>:
 * \brief Switch UDP (USB) clock source selection to PLLB clock.
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
  40b910:	b480      	push	{r7}
  40b912:	b083      	sub	sp, #12
  40b914:	af00      	add	r7, sp, #0
  40b916:	6078      	str	r0, [r7, #4]
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  40b918:	4b06      	ldr	r3, [pc, #24]	; (40b934 <pmc_switch_udpck_to_pllbck+0x24>)
  40b91a:	687a      	ldr	r2, [r7, #4]
  40b91c:	0212      	lsls	r2, r2, #8
  40b91e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  40b922:	f042 0201 	orr.w	r2, r2, #1
  40b926:	639a      	str	r2, [r3, #56]	; 0x38
}
  40b928:	370c      	adds	r7, #12
  40b92a:	46bd      	mov	sp, r7
  40b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b930:	4770      	bx	lr
  40b932:	bf00      	nop
  40b934:	400e0400 	.word	0x400e0400

0040b938 <pmc_enable_udpck>:
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55)
/**
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
  40b938:	b480      	push	{r7}
  40b93a:	af00      	add	r7, sp, #0
# if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  40b93c:	4b03      	ldr	r3, [pc, #12]	; (40b94c <pmc_enable_udpck+0x14>)
  40b93e:	2280      	movs	r2, #128	; 0x80
  40b940:	601a      	str	r2, [r3, #0]
# else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
# endif
}
  40b942:	46bd      	mov	sp, r7
  40b944:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b948:	4770      	bx	lr
  40b94a:	bf00      	nop
  40b94c:	400e0400 	.word	0x400e0400

0040b950 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
  40b950:	b480      	push	{r7}
  40b952:	b083      	sub	sp, #12
  40b954:	af00      	add	r7, sp, #0
  40b956:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  40b958:	687b      	ldr	r3, [r7, #4]
  40b95a:	f3c3 0312 	ubfx	r3, r3, #0, #19
  40b95e:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
  40b960:	4b05      	ldr	r3, [pc, #20]	; (40b978 <pmc_set_fast_startup_input+0x28>)
  40b962:	4a05      	ldr	r2, [pc, #20]	; (40b978 <pmc_set_fast_startup_input+0x28>)
  40b964:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40b966:	687a      	ldr	r2, [r7, #4]
  40b968:	430a      	orrs	r2, r1
  40b96a:	671a      	str	r2, [r3, #112]	; 0x70
}
  40b96c:	370c      	adds	r7, #12
  40b96e:	46bd      	mov	sp, r7
  40b970:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b974:	4770      	bx	lr
  40b976:	bf00      	nop
  40b978:	400e0400 	.word	0x400e0400

0040b97c <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  40b97c:	b480      	push	{r7}
  40b97e:	b083      	sub	sp, #12
  40b980:	af00      	add	r7, sp, #0
  40b982:	6078      	str	r0, [r7, #4]
	ul_flash_in_wait_mode = ul_flash_state;
  40b984:	4b03      	ldr	r3, [pc, #12]	; (40b994 <pmc_set_flash_in_wait_mode+0x18>)
  40b986:	687a      	ldr	r2, [r7, #4]
  40b988:	601a      	str	r2, [r3, #0]
}
  40b98a:	370c      	adds	r7, #12
  40b98c:	46bd      	mov	sp, r7
  40b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b992:	4770      	bx	lr
  40b994:	20000368 	.word	0x20000368

0040b998 <pmc_enable_waitmode>:
 * Generally, this function will be called by pmc_sleep() in order to 
 * complete all sequence entering wait mode.
 * See \ref pmc_sleep() for entering different sleep modes.
 */
void pmc_enable_waitmode(void)
{
  40b998:	b480      	push	{r7}
  40b99a:	b083      	sub	sp, #12
  40b99c:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  40b99e:	4b21      	ldr	r3, [pc, #132]	; (40ba24 <pmc_enable_waitmode+0x8c>)
  40b9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40b9a2:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  40b9a4:	687b      	ldr	r3, [r7, #4]
  40b9a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  40b9aa:	607b      	str	r3, [r7, #4]
	i |= ul_flash_in_wait_mode;
  40b9ac:	4b1e      	ldr	r3, [pc, #120]	; (40ba28 <pmc_enable_waitmode+0x90>)
  40b9ae:	681b      	ldr	r3, [r3, #0]
  40b9b0:	687a      	ldr	r2, [r7, #4]
  40b9b2:	4313      	orrs	r3, r2
  40b9b4:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  40b9b6:	4b1b      	ldr	r3, [pc, #108]	; (40ba24 <pmc_enable_waitmode+0x8c>)
  40b9b8:	687a      	ldr	r2, [r7, #4]
  40b9ba:	671a      	str	r2, [r3, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  40b9bc:	4a19      	ldr	r2, [pc, #100]	; (40ba24 <pmc_enable_waitmode+0x8c>)
  40b9be:	4b19      	ldr	r3, [pc, #100]	; (40ba24 <pmc_enable_waitmode+0x8c>)
  40b9c0:	6a1b      	ldr	r3, [r3, #32]
  40b9c2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40b9c6:	f043 0304 	orr.w	r3, r3, #4
  40b9ca:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40b9cc:	bf00      	nop
  40b9ce:	4b15      	ldr	r3, [pc, #84]	; (40ba24 <pmc_enable_waitmode+0x8c>)
  40b9d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40b9d2:	f003 0308 	and.w	r3, r3, #8
  40b9d6:	2b00      	cmp	r3, #0
  40b9d8:	d0f9      	beq.n	40b9ce <pmc_enable_waitmode+0x36>

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  40b9da:	2300      	movs	r3, #0
  40b9dc:	607b      	str	r3, [r7, #4]
  40b9de:	e003      	b.n	40b9e8 <pmc_enable_waitmode+0x50>
  40b9e0:	bf00      	nop
  40b9e2:	687b      	ldr	r3, [r7, #4]
  40b9e4:	3301      	adds	r3, #1
  40b9e6:	607b      	str	r3, [r7, #4]
  40b9e8:	687b      	ldr	r3, [r7, #4]
  40b9ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40b9ee:	d3f7      	bcc.n	40b9e0 <pmc_enable_waitmode+0x48>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  40b9f0:	bf00      	nop
  40b9f2:	4b0c      	ldr	r3, [pc, #48]	; (40ba24 <pmc_enable_waitmode+0x8c>)
  40b9f4:	6a1b      	ldr	r3, [r3, #32]
  40b9f6:	f003 0308 	and.w	r3, r3, #8
  40b9fa:	2b00      	cmp	r3, #0
  40b9fc:	d0f9      	beq.n	40b9f2 <pmc_enable_waitmode+0x5a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  40b9fe:	4b09      	ldr	r3, [pc, #36]	; (40ba24 <pmc_enable_waitmode+0x8c>)
  40ba00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40ba02:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  40ba04:	687b      	ldr	r3, [r7, #4]
  40ba06:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  40ba0a:	607b      	str	r3, [r7, #4]
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40ba0c:	687b      	ldr	r3, [r7, #4]
  40ba0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40ba12:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  40ba14:	4b03      	ldr	r3, [pc, #12]	; (40ba24 <pmc_enable_waitmode+0x8c>)
  40ba16:	687a      	ldr	r2, [r7, #4]
  40ba18:	671a      	str	r2, [r3, #112]	; 0x70
#endif
}
  40ba1a:	370c      	adds	r7, #12
  40ba1c:	46bd      	mov	sp, r7
  40ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ba22:	4770      	bx	lr
  40ba24:	400e0400 	.word	0x400e0400
  40ba28:	20000368 	.word	0x20000368

0040ba2c <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  40ba2c:	b590      	push	{r4, r7, lr}
  40ba2e:	b099      	sub	sp, #100	; 0x64
  40ba30:	af00      	add	r7, sp, #0
  40ba32:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
  40ba34:	687b      	ldr	r3, [r7, #4]
  40ba36:	3b01      	subs	r3, #1
  40ba38:	2b04      	cmp	r3, #4
  40ba3a:	f200 81c5 	bhi.w	40bdc8 <pmc_sleep+0x39c>
  40ba3e:	a201      	add	r2, pc, #4	; (adr r2, 40ba44 <pmc_sleep+0x18>)
  40ba40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40ba44:	0040ba59 	.word	0x0040ba59
  40ba48:	0040ba59 	.word	0x0040ba59
  40ba4c:	0040ba75 	.word	0x0040ba75
  40ba50:	0040ba75 	.word	0x0040ba75
  40ba54:	0040bda7 	.word	0x0040bda7
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  40ba58:	4b76      	ldr	r3, [pc, #472]	; (40bc34 <pmc_sleep+0x208>)
  40ba5a:	4a76      	ldr	r2, [pc, #472]	; (40bc34 <pmc_sleep+0x208>)
  40ba5c:	6912      	ldr	r2, [r2, #16]
  40ba5e:	f022 0204 	bic.w	r2, r2, #4
  40ba62:	611a      	str	r2, [r3, #16]
		cpu_irq_enable();
  40ba64:	4b74      	ldr	r3, [pc, #464]	; (40bc38 <pmc_sleep+0x20c>)
  40ba66:	2201      	movs	r2, #1
  40ba68:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40ba6a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40ba6e:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  40ba70:	bf30      	wfi
		__WFI();
		break;
  40ba72:	e1a9      	b.n	40bdc8 <pmc_sleep+0x39c>
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  40ba74:	687b      	ldr	r3, [r7, #4]
  40ba76:	2b03      	cmp	r3, #3
  40ba78:	d103      	bne.n	40ba82 <pmc_sleep+0x56>
  40ba7a:	2000      	movs	r0, #0
  40ba7c:	4b6f      	ldr	r3, [pc, #444]	; (40bc3c <pmc_sleep+0x210>)
  40ba7e:	4798      	blx	r3
  40ba80:	e003      	b.n	40ba8a <pmc_sleep+0x5e>
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40ba82:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40ba86:	4b6d      	ldr	r3, [pc, #436]	; (40bc3c <pmc_sleep+0x210>)
  40ba88:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40ba8a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40ba8c:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40ba90:	4b69      	ldr	r3, [pc, #420]	; (40bc38 <pmc_sleep+0x20c>)
  40ba92:	2200      	movs	r2, #0
  40ba94:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  40ba96:	4b6a      	ldr	r3, [pc, #424]	; (40bc40 <pmc_sleep+0x214>)
  40ba98:	2201      	movs	r2, #1
  40ba9a:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
  40ba9c:	687b      	ldr	r3, [r7, #4]
  40ba9e:	2b04      	cmp	r3, #4
  40baa0:	bf14      	ite	ne
  40baa2:	2300      	movne	r3, #0
  40baa4:	2301      	moveq	r3, #1
  40baa6:	b2db      	uxtb	r3, r3
  40baa8:	f107 021c 	add.w	r2, r7, #28
  40baac:	65fa      	str	r2, [r7, #92]	; 0x5c
  40baae:	f107 0218 	add.w	r2, r7, #24
  40bab2:	65ba      	str	r2, [r7, #88]	; 0x58
  40bab4:	f107 0214 	add.w	r2, r7, #20
  40bab8:	657a      	str	r2, [r7, #84]	; 0x54
  40baba:	f107 0210 	add.w	r2, r7, #16
  40babe:	653a      	str	r2, [r7, #80]	; 0x50
  40bac0:	f107 020c 	add.w	r2, r7, #12
  40bac4:	64fa      	str	r2, [r7, #76]	; 0x4c
  40bac6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#if defined(EFC1)
		uint32_t *p_fmr_setting1,
#endif
		const bool disable_xtal)
{
	uint32_t mor  = PMC->CKGR_MOR;
  40baca:	4b5e      	ldr	r3, [pc, #376]	; (40bc44 <pmc_sleep+0x218>)
  40bacc:	6a1b      	ldr	r3, [r3, #32]
  40bace:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t mckr = PMC->PMC_MCKR;
  40bad0:	4b5c      	ldr	r3, [pc, #368]	; (40bc44 <pmc_sleep+0x218>)
  40bad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bad4:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t fmr  = EFC0->EEFC_FMR;
  40bad6:	4b5c      	ldr	r3, [pc, #368]	; (40bc48 <pmc_sleep+0x21c>)
  40bad8:	681b      	ldr	r3, [r3, #0]
  40bada:	63fb      	str	r3, [r7, #60]	; 0x3c
# if defined(EFC1)
	uint32_t fmr1 = EFC1->EEFC_FMR;
# endif

	if (p_osc_setting) {
  40badc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  40bade:	2b00      	cmp	r3, #0
  40bae0:	d002      	beq.n	40bae8 <pmc_sleep+0xbc>
		*p_osc_setting = mor;
  40bae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  40bae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
  40bae6:	601a      	str	r2, [r3, #0]
	}
	if (p_pll0_setting) {
  40bae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40baea:	2b00      	cmp	r3, #0
  40baec:	d003      	beq.n	40baf6 <pmc_sleep+0xca>
		*p_pll0_setting = PMC->CKGR_PLLAR;
  40baee:	4b55      	ldr	r3, [pc, #340]	; (40bc44 <pmc_sleep+0x218>)
  40baf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40baf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40baf4:	601a      	str	r2, [r3, #0]
	}
	if (p_pll1_setting) {
  40baf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  40baf8:	2b00      	cmp	r3, #0
  40bafa:	d003      	beq.n	40bb04 <pmc_sleep+0xd8>
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
		*p_pll1_setting = PMC->CKGR_PLLBR;
  40bafc:	4b51      	ldr	r3, [pc, #324]	; (40bc44 <pmc_sleep+0x218>)
  40bafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40bb00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  40bb02:	601a      	str	r2, [r3, #0]
		*p_pll1_setting = PMC->CKGR_UCKR;
#else
		*p_pll1_setting = 0;
#endif
	}
	if (p_mck_setting) {
  40bb04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40bb06:	2b00      	cmp	r3, #0
  40bb08:	d002      	beq.n	40bb10 <pmc_sleep+0xe4>
		*p_mck_setting  = mckr;
  40bb0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40bb0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  40bb0e:	601a      	str	r2, [r3, #0]
	}
	if (p_fmr_setting) {
  40bb10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40bb12:	2b00      	cmp	r3, #0
  40bb14:	d002      	beq.n	40bb1c <pmc_sleep+0xf0>
		*p_fmr_setting  = fmr;
  40bb16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40bb18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  40bb1a:	601a      	str	r2, [r3, #0]
		*p_fmr_setting1 = fmr1;
	}
#endif

	/* Enable FAST RC */
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  40bb1c:	4a49      	ldr	r2, [pc, #292]	; (40bc44 <pmc_sleep+0x218>)
  40bb1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  40bb20:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40bb24:	f043 0308 	orr.w	r3, r3, #8
  40bb28:	6213      	str	r3, [r2, #32]
	/* if MCK source is PLL, switch to mainck */
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40bb2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40bb2c:	f003 0303 	and.w	r3, r3, #3
  40bb30:	2b01      	cmp	r3, #1
  40bb32:	d90e      	bls.n	40bb52 <pmc_sleep+0x126>
		/* MCK -> MAINCK */
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  40bb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40bb36:	f023 0303 	bic.w	r3, r3, #3
  40bb3a:	f043 0301 	orr.w	r3, r3, #1
  40bb3e:	643b      	str	r3, [r7, #64]	; 0x40
		PMC->PMC_MCKR = mckr;
  40bb40:	4b40      	ldr	r3, [pc, #256]	; (40bc44 <pmc_sleep+0x218>)
  40bb42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  40bb44:	631a      	str	r2, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40bb46:	4b3f      	ldr	r3, [pc, #252]	; (40bc44 <pmc_sleep+0x218>)
  40bb48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bb4a:	f003 0308 	and.w	r3, r3, #8
  40bb4e:	2b00      	cmp	r3, #0
  40bb50:	d0f9      	beq.n	40bb46 <pmc_sleep+0x11a>
	}
	/* MCK prescale -> 1 */
	if (mckr & PMC_MCKR_PRES_Msk) {
  40bb52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40bb54:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40bb58:	2b00      	cmp	r3, #0
  40bb5a:	d00c      	beq.n	40bb76 <pmc_sleep+0x14a>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  40bb5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40bb5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40bb62:	643b      	str	r3, [r7, #64]	; 0x40
		PMC->PMC_MCKR = mckr;
  40bb64:	4b37      	ldr	r3, [pc, #220]	; (40bc44 <pmc_sleep+0x218>)
  40bb66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
  40bb68:	631a      	str	r2, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40bb6a:	4b36      	ldr	r3, [pc, #216]	; (40bc44 <pmc_sleep+0x218>)
  40bb6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bb6e:	f003 0308 	and.w	r3, r3, #8
  40bb72:	2b00      	cmp	r3, #0
  40bb74:	d0f9      	beq.n	40bb6a <pmc_sleep+0x13e>
	}
	/* Disable PLLs */
	pmc_disable_pllack();
  40bb76:	4b35      	ldr	r3, [pc, #212]	; (40bc4c <pmc_sleep+0x220>)
  40bb78:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	pmc_disable_pllbck();
  40bb7a:	4b35      	ldr	r3, [pc, #212]	; (40bc50 <pmc_sleep+0x224>)
  40bb7c:	4798      	blx	r3
	pmc_disable_upll_clock();
#endif

	/* Prepare for entering WAIT mode */
	/* Wait fast RC ready */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40bb7e:	4b31      	ldr	r3, [pc, #196]	; (40bc44 <pmc_sleep+0x218>)
  40bb80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bb82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40bb86:	2b00      	cmp	r3, #0
  40bb88:	d0f9      	beq.n	40bb7e <pmc_sleep+0x152>
	EFC0->EEFC_FMR = (fmr & (~EEFC_FMR_FWS_Msk)) | EEFC_FMR_FWS(1);

	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | CKGR_MOR_MOSCRCF_24_MHz |
			CKGR_MOR_KEY_PASSWD;
#else
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40bb8a:	4a2e      	ldr	r2, [pc, #184]	; (40bc44 <pmc_sleep+0x218>)
  40bb8c:	4b2d      	ldr	r3, [pc, #180]	; (40bc44 <pmc_sleep+0x218>)
  40bb8e:	6a1b      	ldr	r3, [r3, #32]
  40bb90:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40bb94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40bb98:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40bb9c:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
#endif
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40bb9e:	4b29      	ldr	r3, [pc, #164]	; (40bc44 <pmc_sleep+0x218>)
  40bba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40bba6:	2b00      	cmp	r3, #0
  40bba8:	d0f9      	beq.n	40bb9e <pmc_sleep+0x172>

#if (!SAMG)
	/* FWS update */
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  40bbaa:	4b27      	ldr	r3, [pc, #156]	; (40bc48 <pmc_sleep+0x21c>)
  40bbac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  40bbae:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  40bbb2:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
#endif
#endif

	/* Disable XTALs */
	if (disable_xtal) {
  40bbb4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
  40bbb8:	2b00      	cmp	r3, #0
  40bbba:	d009      	beq.n	40bbd0 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40bbbc:	4a21      	ldr	r2, [pc, #132]	; (40bc44 <pmc_sleep+0x218>)
  40bbbe:	4b21      	ldr	r3, [pc, #132]	; (40bc44 <pmc_sleep+0x218>)
  40bbc0:	6a1b      	ldr	r3, [r3, #32]
  40bbc2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40bbc6:	f023 0301 	bic.w	r3, r3, #1
  40bbca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40bbce:	6213      	str	r3, [r2, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  40bbd0:	4b19      	ldr	r3, [pc, #100]	; (40bc38 <pmc_sleep+0x20c>)
  40bbd2:	2201      	movs	r2, #1
  40bbd4:	701a      	strb	r2, [r3, #0]
  40bbd6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40bbda:	b662      	cpsie	i

		pmc_enable_waitmode();
  40bbdc:	4b1d      	ldr	r3, [pc, #116]	; (40bc54 <pmc_sleep+0x228>)
  40bbde:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40bbe0:	b672      	cpsid	i
  40bbe2:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  40bbe6:	4b14      	ldr	r3, [pc, #80]	; (40bc38 <pmc_sleep+0x20c>)
  40bbe8:	2200      	movs	r2, #0
  40bbea:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
  40bbec:	69fc      	ldr	r4, [r7, #28]
  40bbee:	69b8      	ldr	r0, [r7, #24]
  40bbf0:	6979      	ldr	r1, [r7, #20]
  40bbf2:	693a      	ldr	r2, [r7, #16]
  40bbf4:	68fb      	ldr	r3, [r7, #12]
  40bbf6:	63bc      	str	r4, [r7, #56]	; 0x38
  40bbf8:	6378      	str	r0, [r7, #52]	; 0x34
  40bbfa:	6339      	str	r1, [r7, #48]	; 0x30
  40bbfc:	62fa      	str	r2, [r7, #44]	; 0x2c
  40bbfe:	62bb      	str	r3, [r7, #40]	; 0x28
		, const uint32_t fmr_setting1
#endif
		)
{
	uint32_t mckr;
	uint32_t pll_sr = 0;
  40bc00:	2300      	movs	r3, #0
  40bc02:	627b      	str	r3, [r7, #36]	; 0x24

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  40bc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40bc06:	f003 0302 	and.w	r3, r3, #2
  40bc0a:	2b00      	cmp	r3, #0
  40bc0c:	d028      	beq.n	40bc60 <pmc_sleep+0x234>
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40bc0e:	490d      	ldr	r1, [pc, #52]	; (40bc44 <pmc_sleep+0x218>)
  40bc10:	4b0c      	ldr	r3, [pc, #48]	; (40bc44 <pmc_sleep+0x218>)
  40bc12:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40bc14:	4a10      	ldr	r2, [pc, #64]	; (40bc58 <pmc_sleep+0x22c>)
  40bc16:	401a      	ands	r2, r3
  40bc18:	4b10      	ldr	r3, [pc, #64]	; (40bc5c <pmc_sleep+0x230>)
  40bc1a:	4313      	orrs	r3, r2
	uint32_t pll_sr = 0;

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40bc1c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40bc1e:	4a09      	ldr	r2, [pc, #36]	; (40bc44 <pmc_sleep+0x218>)
  40bc20:	4b08      	ldr	r3, [pc, #32]	; (40bc44 <pmc_sleep+0x218>)
  40bc22:	6a1b      	ldr	r3, [r3, #32]
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
  40bc24:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40bc28:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  40bc2c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40bc30:	6213      	str	r3, [r2, #32]
  40bc32:	e050      	b.n	40bcd6 <pmc_sleep+0x2aa>
  40bc34:	e000ed00 	.word	0xe000ed00
  40bc38:	20000364 	.word	0x20000364
  40bc3c:	0040b97d 	.word	0x0040b97d
  40bc40:	2000890c 	.word	0x2000890c
  40bc44:	400e0400 	.word	0x400e0400
  40bc48:	400e0a00 	.word	0x400e0a00
  40bc4c:	0040b7a1 	.word	0x0040b7a1
  40bc50:	0040b7d5 	.word	0x0040b7d5
  40bc54:	0040b999 	.word	0x0040b999
  40bc58:	fec8fffc 	.word	0xfec8fffc
  40bc5c:	01370002 	.word	0x01370002
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  40bc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40bc62:	f003 0301 	and.w	r3, r3, #1
  40bc66:	2b00      	cmp	r3, #0
  40bc68:	d035      	beq.n	40bcd6 <pmc_sleep+0x2aa>
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  40bc6a:	4b59      	ldr	r3, [pc, #356]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bc6c:	6a1b      	ldr	r3, [r3, #32]
  40bc6e:	f003 0301 	and.w	r3, r3, #1
  40bc72:	2b00      	cmp	r3, #0
  40bc74:	d111      	bne.n	40bc9a <pmc_sleep+0x26e>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40bc76:	4a56      	ldr	r2, [pc, #344]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bc78:	4b55      	ldr	r3, [pc, #340]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bc7a:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  40bc7c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40bc80:	f023 0303 	bic.w	r3, r3, #3
  40bc84:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40bc88:	f043 0301 	orr.w	r3, r3, #1
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40bc8c:	6213      	str	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
			/* Wait the Xtal to stabilize */
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40bc8e:	4b50      	ldr	r3, [pc, #320]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bc90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bc92:	f003 0301 	and.w	r3, r3, #1
  40bc96:	2b00      	cmp	r3, #0
  40bc98:	d0f9      	beq.n	40bc8e <pmc_sleep+0x262>
		}
		/* Select External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  40bc9a:	4b4d      	ldr	r3, [pc, #308]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bc9c:	6a1b      	ldr	r3, [r3, #32]
  40bc9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40bca2:	2b00      	cmp	r3, #0
  40bca4:	d10d      	bne.n	40bcc2 <pmc_sleep+0x296>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40bca6:	4a4a      	ldr	r2, [pc, #296]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bca8:	4b49      	ldr	r3, [pc, #292]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bcaa:	6a1b      	ldr	r3, [r3, #32]
  40bcac:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40bcb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40bcb4:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40bcb6:	4b46      	ldr	r3, [pc, #280]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bcb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bcba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40bcbe:	2b00      	cmp	r3, #0
  40bcc0:	d0f9      	beq.n	40bcb6 <pmc_sleep+0x28a>
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40bcc2:	4a43      	ldr	r2, [pc, #268]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bcc4:	4b42      	ldr	r3, [pc, #264]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bcc6:	6a1b      	ldr	r3, [r3, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
  40bcc8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40bccc:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  40bcd0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40bcd4:	6213      	str	r3, [r2, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
	}

	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40bcd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40bcd8:	4b3e      	ldr	r3, [pc, #248]	; (40bdd4 <pmc_sleep+0x3a8>)
  40bcda:	4013      	ands	r3, r2
  40bcdc:	2b00      	cmp	r3, #0
  40bcde:	d008      	beq.n	40bcf2 <pmc_sleep+0x2c6>
#if (SAM4C || SAM4CM || SAMG || SAM4CP)
		PMC->CKGR_PLLAR = pll0_setting;
#else
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  40bce0:	4b3b      	ldr	r3, [pc, #236]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40bce4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40bce8:	629a      	str	r2, [r3, #40]	; 0x28
#endif
		pll_sr |= PMC_SR_LOCKA;
  40bcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bcec:	f043 0302 	orr.w	r3, r3, #2
  40bcf0:	627b      	str	r3, [r7, #36]	; 0x24
	}
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	if (pll1_setting & CKGR_PLLBR_MULB_Msk) {
  40bcf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40bcf4:	4b37      	ldr	r3, [pc, #220]	; (40bdd4 <pmc_sleep+0x3a8>)
  40bcf6:	4013      	ands	r3, r2
  40bcf8:	2b00      	cmp	r3, #0
  40bcfa:	d006      	beq.n	40bd0a <pmc_sleep+0x2de>
		PMC->CKGR_PLLBR = pll1_setting;
  40bcfc:	4b34      	ldr	r3, [pc, #208]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bcfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40bd00:	62da      	str	r2, [r3, #44]	; 0x2c
		pll_sr |= PMC_SR_LOCKB;
  40bd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bd04:	f043 0304 	orr.w	r3, r3, #4
  40bd08:	627b      	str	r3, [r7, #36]	; 0x24
	}
#else
	UNUSED(pll1_setting);
#endif
	/* Wait MCK source ready */
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  40bd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40bd0c:	f003 0303 	and.w	r3, r3, #3
  40bd10:	2b02      	cmp	r3, #2
  40bd12:	d002      	beq.n	40bd1a <pmc_sleep+0x2ee>
  40bd14:	2b03      	cmp	r3, #3
  40bd16:	d007      	beq.n	40bd28 <pmc_sleep+0x2fc>
  40bd18:	e00c      	b.n	40bd34 <pmc_sleep+0x308>
	case PMC_MCKR_CSS_PLLA_CLK:
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  40bd1a:	4b2d      	ldr	r3, [pc, #180]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bd1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bd1e:	f003 0302 	and.w	r3, r3, #2
  40bd22:	2b00      	cmp	r3, #0
  40bd24:	d0f9      	beq.n	40bd1a <pmc_sleep+0x2ee>
  40bd26:	e005      	b.n	40bd34 <pmc_sleep+0x308>
		break;
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	case PMC_MCKR_CSS_PLLB_CLK:
		while (!(PMC->PMC_SR & PMC_SR_LOCKB));
  40bd28:	4b29      	ldr	r3, [pc, #164]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bd2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bd2c:	f003 0304 	and.w	r3, r3, #4
  40bd30:	2b00      	cmp	r3, #0
  40bd32:	d0f9      	beq.n	40bd28 <pmc_sleep+0x2fc>
		break;
#endif
	}

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;
  40bd34:	4b26      	ldr	r3, [pc, #152]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bd38:	623b      	str	r3, [r7, #32]

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40bd3a:	4b25      	ldr	r3, [pc, #148]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bd3c:	6a3a      	ldr	r2, [r7, #32]
  40bd3e:	f022 0170 	bic.w	r1, r2, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  40bd42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40bd44:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40bd48:	430a      	orrs	r2, r1

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40bd4a:	631a      	str	r2, [r3, #48]	; 0x30
		| (mck_setting & PMC_MCKR_PRES_Msk);
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40bd4c:	4b20      	ldr	r3, [pc, #128]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bd4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bd50:	f003 0308 	and.w	r3, r3, #8
  40bd54:	2b00      	cmp	r3, #0
  40bd56:	d0f9      	beq.n	40bd4c <pmc_sleep+0x320>

	/* Restore flash wait states */
	EFC0->EEFC_FMR = fmr_setting;
  40bd58:	4b1f      	ldr	r3, [pc, #124]	; (40bdd8 <pmc_sleep+0x3ac>)
  40bd5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40bd5c:	601a      	str	r2, [r3, #0]
#if defined(EFC1)
	EFC1->EEFC_FMR = fmr_setting1;
#endif

	/* Set CSS and others */
	PMC->PMC_MCKR = mck_setting;
  40bd5e:	4b1c      	ldr	r3, [pc, #112]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bd60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40bd62:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40bd64:	4b1a      	ldr	r3, [pc, #104]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bd66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40bd68:	f003 0308 	and.w	r3, r3, #8
  40bd6c:	2b00      	cmp	r3, #0
  40bd6e:	d0f9      	beq.n	40bd64 <pmc_sleep+0x338>

	/* Waiting all restored PLLs ready */
	while (!(PMC->PMC_SR & pll_sr));
  40bd70:	4b17      	ldr	r3, [pc, #92]	; (40bdd0 <pmc_sleep+0x3a4>)
  40bd72:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40bd76:	4013      	ands	r3, r2
  40bd78:	2b00      	cmp	r3, #0
  40bd7a:	d0f9      	beq.n	40bd70 <pmc_sleep+0x344>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  40bd7c:	4b17      	ldr	r3, [pc, #92]	; (40bddc <pmc_sleep+0x3b0>)
  40bd7e:	2200      	movs	r2, #0
  40bd80:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  40bd82:	4b17      	ldr	r3, [pc, #92]	; (40bde0 <pmc_sleep+0x3b4>)
  40bd84:	681b      	ldr	r3, [r3, #0]
  40bd86:	2b00      	cmp	r3, #0
  40bd88:	d005      	beq.n	40bd96 <pmc_sleep+0x36a>
			callback_clocks_restored();
  40bd8a:	4b15      	ldr	r3, [pc, #84]	; (40bde0 <pmc_sleep+0x3b4>)
  40bd8c:	681b      	ldr	r3, [r3, #0]
  40bd8e:	4798      	blx	r3
			callback_clocks_restored = NULL;
  40bd90:	4b13      	ldr	r3, [pc, #76]	; (40bde0 <pmc_sleep+0x3b4>)
  40bd92:	2200      	movs	r2, #0
  40bd94:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40bd96:	4b13      	ldr	r3, [pc, #76]	; (40bde4 <pmc_sleep+0x3b8>)
  40bd98:	2201      	movs	r2, #1
  40bd9a:	701a      	strb	r2, [r3, #0]
  40bd9c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40bda0:	b662      	cpsie	i

		break;
  40bda2:	bf00      	nop
  40bda4:	e010      	b.n	40bdc8 <pmc_sleep+0x39c>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  40bda6:	4b10      	ldr	r3, [pc, #64]	; (40bde8 <pmc_sleep+0x3bc>)
  40bda8:	4a0f      	ldr	r2, [pc, #60]	; (40bde8 <pmc_sleep+0x3bc>)
  40bdaa:	6912      	ldr	r2, [r2, #16]
  40bdac:	f042 0204 	orr.w	r2, r2, #4
  40bdb0:	611a      	str	r2, [r3, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  40bdb2:	4b0e      	ldr	r3, [pc, #56]	; (40bdec <pmc_sleep+0x3c0>)
  40bdb4:	4a0e      	ldr	r2, [pc, #56]	; (40bdf0 <pmc_sleep+0x3c4>)
  40bdb6:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  40bdb8:	4b0a      	ldr	r3, [pc, #40]	; (40bde4 <pmc_sleep+0x3b8>)
  40bdba:	2201      	movs	r2, #1
  40bdbc:	701a      	strb	r2, [r3, #0]
  40bdbe:	f3bf 8f5f 	dmb	sy
  40bdc2:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  40bdc4:	bf30      	wfi
		__WFI() ;
#else
		cpu_irq_enable();
		__WFE() ;
#endif
		break;
  40bdc6:	bf00      	nop
#endif
	}
}
  40bdc8:	3764      	adds	r7, #100	; 0x64
  40bdca:	46bd      	mov	sp, r7
  40bdcc:	bd90      	pop	{r4, r7, pc}
  40bdce:	bf00      	nop
  40bdd0:	400e0400 	.word	0x400e0400
  40bdd4:	07ff0000 	.word	0x07ff0000
  40bdd8:	400e0a00 	.word	0x400e0a00
  40bddc:	2000890c 	.word	0x2000890c
  40bde0:	20008910 	.word	0x20008910
  40bde4:	20000364 	.word	0x20000364
  40bde8:	e000ed00 	.word	0xe000ed00
  40bdec:	400e1410 	.word	0x400e1410
  40bdf0:	a5000004 	.word	0xa5000004

0040bdf4 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
  40bdf4:	b480      	push	{r7}
  40bdf6:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
  40bdf8:	4b09      	ldr	r3, [pc, #36]	; (40be20 <pmc_is_wakeup_clocks_restored+0x2c>)
  40bdfa:	781b      	ldrb	r3, [r3, #0]
  40bdfc:	b2db      	uxtb	r3, r3
  40bdfe:	2b00      	cmp	r3, #0
  40be00:	bf0c      	ite	eq
  40be02:	2300      	moveq	r3, #0
  40be04:	2301      	movne	r3, #1
  40be06:	b2db      	uxtb	r3, r3
  40be08:	f083 0301 	eor.w	r3, r3, #1
  40be0c:	b2db      	uxtb	r3, r3
  40be0e:	f003 0301 	and.w	r3, r3, #1
  40be12:	b2db      	uxtb	r3, r3
}
  40be14:	4618      	mov	r0, r3
  40be16:	46bd      	mov	sp, r7
  40be18:	f85d 7b04 	ldr.w	r7, [sp], #4
  40be1c:	4770      	bx	lr
  40be1e:	bf00      	nop
  40be20:	2000890c 	.word	0x2000890c

0040be24 <wdt_get_timeout_value>:
 *
 * \return If the desired period is beyond the watchdog period, this function
 * returns WDT_INVALID_ARGUMENT. Otherwise it returns valid value.
 */
uint32_t wdt_get_timeout_value(uint32_t ul_us, uint32_t ul_sclk)
{
  40be24:	b480      	push	{r7}
  40be26:	b085      	sub	sp, #20
  40be28:	af00      	add	r7, sp, #0
  40be2a:	6078      	str	r0, [r7, #4]
  40be2c:	6039      	str	r1, [r7, #0]
	uint32_t max, min;

	min = WDT_SLCK_DIV * 1000000 / ul_sclk;
  40be2e:	4a10      	ldr	r2, [pc, #64]	; (40be70 <wdt_get_timeout_value+0x4c>)
  40be30:	683b      	ldr	r3, [r7, #0]
  40be32:	fbb2 f3f3 	udiv	r3, r2, r3
  40be36:	60fb      	str	r3, [r7, #12]
	max = min * WDT_MAX_VALUE;
  40be38:	68fa      	ldr	r2, [r7, #12]
  40be3a:	4613      	mov	r3, r2
  40be3c:	031b      	lsls	r3, r3, #12
  40be3e:	1a9b      	subs	r3, r3, r2
  40be40:	60bb      	str	r3, [r7, #8]

	if ((ul_us < min) || (ul_us > max)) {
  40be42:	687a      	ldr	r2, [r7, #4]
  40be44:	68fb      	ldr	r3, [r7, #12]
  40be46:	429a      	cmp	r2, r3
  40be48:	d303      	bcc.n	40be52 <wdt_get_timeout_value+0x2e>
  40be4a:	687a      	ldr	r2, [r7, #4]
  40be4c:	68bb      	ldr	r3, [r7, #8]
  40be4e:	429a      	cmp	r2, r3
  40be50:	d902      	bls.n	40be58 <wdt_get_timeout_value+0x34>
		return WDT_INVALID_ARGUMENT;
  40be52:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40be56:	e005      	b.n	40be64 <wdt_get_timeout_value+0x40>
	}

	return WDT_MR_WDV(ul_us / min);
  40be58:	687a      	ldr	r2, [r7, #4]
  40be5a:	68fb      	ldr	r3, [r7, #12]
  40be5c:	fbb2 f3f3 	udiv	r3, r2, r3
  40be60:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
  40be64:	4618      	mov	r0, r3
  40be66:	3714      	adds	r7, #20
  40be68:	46bd      	mov	sp, r7
  40be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40be6e:	4770      	bx	lr
  40be70:	07a12000 	.word	0x07a12000

0040be74 <wdt_init>:
 * \param us_counter The value loaded in the 12-bit Watchdog Counter.
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
  40be74:	b480      	push	{r7}
  40be76:	b085      	sub	sp, #20
  40be78:	af00      	add	r7, sp, #0
  40be7a:	60f8      	str	r0, [r7, #12]
  40be7c:	60b9      	str	r1, [r7, #8]
  40be7e:	80fa      	strh	r2, [r7, #6]
  40be80:	80bb      	strh	r3, [r7, #4]
	p_wdt->WDT_MR = ul_mode |
  40be82:	88fb      	ldrh	r3, [r7, #6]
  40be84:	f3c3 020b 	ubfx	r2, r3, #0, #12
  40be88:	68bb      	ldr	r3, [r7, #8]
  40be8a:	431a      	orrs	r2, r3
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
  40be8c:	88bb      	ldrh	r3, [r7, #4]
  40be8e:	041b      	lsls	r3, r3, #16
  40be90:	4619      	mov	r1, r3
  40be92:	4b05      	ldr	r3, [pc, #20]	; (40bea8 <wdt_init+0x34>)
  40be94:	400b      	ands	r3, r1
  40be96:	431a      	orrs	r2, r3
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
	p_wdt->WDT_MR = ul_mode |
  40be98:	68fb      	ldr	r3, [r7, #12]
  40be9a:	605a      	str	r2, [r3, #4]
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
}
  40be9c:	3714      	adds	r7, #20
  40be9e:	46bd      	mov	sp, r7
  40bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bea4:	4770      	bx	lr
  40bea6:	bf00      	nop
  40bea8:	0fff0000 	.word	0x0fff0000

0040beac <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
  40beac:	b480      	push	{r7}
  40beae:	b083      	sub	sp, #12
  40beb0:	af00      	add	r7, sp, #0
  40beb2:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
  40beb4:	687a      	ldr	r2, [r7, #4]
  40beb6:	4b05      	ldr	r3, [pc, #20]	; (40becc <wdt_restart+0x20>)
  40beb8:	429a      	cmp	r2, r3
  40beba:	d102      	bne.n	40bec2 <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
  40bebc:	687b      	ldr	r3, [r7, #4]
  40bebe:	4a04      	ldr	r2, [pc, #16]	; (40bed0 <wdt_restart+0x24>)
  40bec0:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
  40bec2:	370c      	adds	r7, #12
  40bec4:	46bd      	mov	sp, r7
  40bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40beca:	4770      	bx	lr
  40becc:	400e1450 	.word	0x400e1450
  40bed0:	a5000001 	.word	0xa5000001

0040bed4 <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
  40bed4:	b480      	push	{r7}
  40bed6:	b083      	sub	sp, #12
  40bed8:	af00      	add	r7, sp, #0
  40beda:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
  40bedc:	687b      	ldr	r3, [r7, #4]
  40bede:	689b      	ldr	r3, [r3, #8]
}
  40bee0:	4618      	mov	r0, r3
  40bee2:	370c      	adds	r7, #12
  40bee4:	46bd      	mov	sp, r7
  40bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40beea:	4770      	bx	lr

0040beec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40beec:	b580      	push	{r7, lr}
  40beee:	b084      	sub	sp, #16
  40bef0:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40bef2:	4b27      	ldr	r3, [pc, #156]	; (40bf90 <Reset_Handler+0xa4>)
  40bef4:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  40bef6:	4b27      	ldr	r3, [pc, #156]	; (40bf94 <Reset_Handler+0xa8>)
  40bef8:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40befa:	68fa      	ldr	r2, [r7, #12]
  40befc:	68bb      	ldr	r3, [r7, #8]
  40befe:	429a      	cmp	r2, r3
  40bf00:	d90d      	bls.n	40bf1e <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40bf02:	e007      	b.n	40bf14 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  40bf04:	68bb      	ldr	r3, [r7, #8]
  40bf06:	1d1a      	adds	r2, r3, #4
  40bf08:	60ba      	str	r2, [r7, #8]
  40bf0a:	68fa      	ldr	r2, [r7, #12]
  40bf0c:	1d11      	adds	r1, r2, #4
  40bf0e:	60f9      	str	r1, [r7, #12]
  40bf10:	6812      	ldr	r2, [r2, #0]
  40bf12:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40bf14:	68ba      	ldr	r2, [r7, #8]
  40bf16:	4b20      	ldr	r3, [pc, #128]	; (40bf98 <Reset_Handler+0xac>)
  40bf18:	429a      	cmp	r2, r3
  40bf1a:	d3f3      	bcc.n	40bf04 <Reset_Handler+0x18>
  40bf1c:	e020      	b.n	40bf60 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40bf1e:	68fa      	ldr	r2, [r7, #12]
  40bf20:	68bb      	ldr	r3, [r7, #8]
  40bf22:	429a      	cmp	r2, r3
  40bf24:	d21c      	bcs.n	40bf60 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40bf26:	4a1c      	ldr	r2, [pc, #112]	; (40bf98 <Reset_Handler+0xac>)
  40bf28:	4b1a      	ldr	r3, [pc, #104]	; (40bf94 <Reset_Handler+0xa8>)
  40bf2a:	1ad3      	subs	r3, r2, r3
  40bf2c:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40bf2e:	68fa      	ldr	r2, [r7, #12]
  40bf30:	687b      	ldr	r3, [r7, #4]
  40bf32:	4413      	add	r3, r2
  40bf34:	3b04      	subs	r3, #4
  40bf36:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  40bf38:	68ba      	ldr	r2, [r7, #8]
  40bf3a:	687b      	ldr	r3, [r7, #4]
  40bf3c:	4413      	add	r3, r2
  40bf3e:	3b04      	subs	r3, #4
  40bf40:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40bf42:	e00a      	b.n	40bf5a <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  40bf44:	68bb      	ldr	r3, [r7, #8]
  40bf46:	1f1a      	subs	r2, r3, #4
  40bf48:	60ba      	str	r2, [r7, #8]
  40bf4a:	68fa      	ldr	r2, [r7, #12]
  40bf4c:	1f11      	subs	r1, r2, #4
  40bf4e:	60f9      	str	r1, [r7, #12]
  40bf50:	6812      	ldr	r2, [r2, #0]
  40bf52:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40bf54:	687b      	ldr	r3, [r7, #4]
  40bf56:	3b04      	subs	r3, #4
  40bf58:	607b      	str	r3, [r7, #4]
  40bf5a:	687b      	ldr	r3, [r7, #4]
  40bf5c:	2b00      	cmp	r3, #0
  40bf5e:	d1f1      	bne.n	40bf44 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40bf60:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40bf62:	4b0e      	ldr	r3, [pc, #56]	; (40bf9c <Reset_Handler+0xb0>)
  40bf64:	60bb      	str	r3, [r7, #8]
  40bf66:	e004      	b.n	40bf72 <Reset_Handler+0x86>
		*pDest++ = 0;
  40bf68:	68bb      	ldr	r3, [r7, #8]
  40bf6a:	1d1a      	adds	r2, r3, #4
  40bf6c:	60ba      	str	r2, [r7, #8]
  40bf6e:	2200      	movs	r2, #0
  40bf70:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40bf72:	68ba      	ldr	r2, [r7, #8]
  40bf74:	4b0a      	ldr	r3, [pc, #40]	; (40bfa0 <Reset_Handler+0xb4>)
  40bf76:	429a      	cmp	r2, r3
  40bf78:	d3f6      	bcc.n	40bf68 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40bf7a:	4b0a      	ldr	r3, [pc, #40]	; (40bfa4 <Reset_Handler+0xb8>)
  40bf7c:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40bf7e:	4b0a      	ldr	r3, [pc, #40]	; (40bfa8 <Reset_Handler+0xbc>)
  40bf80:	68fa      	ldr	r2, [r7, #12]
  40bf82:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40bf84:	4b09      	ldr	r3, [pc, #36]	; (40bfac <Reset_Handler+0xc0>)
  40bf86:	4798      	blx	r3

	/* Branch to main function */
	main();
  40bf88:	4b09      	ldr	r3, [pc, #36]	; (40bfb0 <Reset_Handler+0xc4>)
  40bf8a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40bf8c:	e7fe      	b.n	40bf8c <Reset_Handler+0xa0>
  40bf8e:	bf00      	nop
  40bf90:	004165d4 	.word	0x004165d4
  40bf94:	20000000 	.word	0x20000000
  40bf98:	20000c14 	.word	0x20000c14
  40bf9c:	20000c18 	.word	0x20000c18
  40bfa0:	200099d4 	.word	0x200099d4
  40bfa4:	00400000 	.word	0x00400000
  40bfa8:	e000ed00 	.word	0xe000ed00
  40bfac:	0040c9e9 	.word	0x0040c9e9
  40bfb0:	0040c395 	.word	0x0040c395

0040bfb4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40bfb4:	b480      	push	{r7}
  40bfb6:	af00      	add	r7, sp, #0
	while (1) {
	}
  40bfb8:	e7fe      	b.n	40bfb8 <Dummy_Handler+0x4>
  40bfba:	bf00      	nop

0040bfbc <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40bfbc:	b480      	push	{r7}
  40bfbe:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40bfc0:	4b5d      	ldr	r3, [pc, #372]	; (40c138 <SystemCoreClockUpdate+0x17c>)
  40bfc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bfc4:	f003 0303 	and.w	r3, r3, #3
  40bfc8:	2b03      	cmp	r3, #3
  40bfca:	f200 8096 	bhi.w	40c0fa <SystemCoreClockUpdate+0x13e>
  40bfce:	a101      	add	r1, pc, #4	; (adr r1, 40bfd4 <SystemCoreClockUpdate+0x18>)
  40bfd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  40bfd4:	0040bfe5 	.word	0x0040bfe5
  40bfd8:	0040c005 	.word	0x0040c005
  40bfdc:	0040c04f 	.word	0x0040c04f
  40bfe0:	0040c04f 	.word	0x0040c04f
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40bfe4:	4b55      	ldr	r3, [pc, #340]	; (40c13c <SystemCoreClockUpdate+0x180>)
  40bfe6:	695b      	ldr	r3, [r3, #20]
  40bfe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40bfec:	2b00      	cmp	r3, #0
  40bfee:	d004      	beq.n	40bffa <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40bff0:	4b53      	ldr	r3, [pc, #332]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40bff2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40bff6:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  40bff8:	e080      	b.n	40c0fc <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40bffa:	4b51      	ldr	r3, [pc, #324]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40bffc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40c000:	601a      	str	r2, [r3, #0]
			}
		break;
  40c002:	e07b      	b.n	40c0fc <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40c004:	4b4c      	ldr	r3, [pc, #304]	; (40c138 <SystemCoreClockUpdate+0x17c>)
  40c006:	6a1b      	ldr	r3, [r3, #32]
  40c008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40c00c:	2b00      	cmp	r3, #0
  40c00e:	d003      	beq.n	40c018 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40c010:	4b4b      	ldr	r3, [pc, #300]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c012:	4a4c      	ldr	r2, [pc, #304]	; (40c144 <SystemCoreClockUpdate+0x188>)
  40c014:	601a      	str	r2, [r3, #0]
  40c016:	e019      	b.n	40c04c <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40c018:	4b49      	ldr	r3, [pc, #292]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c01a:	4a4b      	ldr	r2, [pc, #300]	; (40c148 <SystemCoreClockUpdate+0x18c>)
  40c01c:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40c01e:	4b46      	ldr	r3, [pc, #280]	; (40c138 <SystemCoreClockUpdate+0x17c>)
  40c020:	6a1b      	ldr	r3, [r3, #32]
  40c022:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40c026:	2b10      	cmp	r3, #16
  40c028:	d008      	beq.n	40c03c <SystemCoreClockUpdate+0x80>
  40c02a:	2b20      	cmp	r3, #32
  40c02c:	d00a      	beq.n	40c044 <SystemCoreClockUpdate+0x88>
  40c02e:	2b00      	cmp	r3, #0
  40c030:	d000      	beq.n	40c034 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  40c032:	e00b      	b.n	40c04c <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40c034:	4b42      	ldr	r3, [pc, #264]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c036:	4a44      	ldr	r2, [pc, #272]	; (40c148 <SystemCoreClockUpdate+0x18c>)
  40c038:	601a      	str	r2, [r3, #0]
			break;
  40c03a:	e007      	b.n	40c04c <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40c03c:	4b40      	ldr	r3, [pc, #256]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c03e:	4a43      	ldr	r2, [pc, #268]	; (40c14c <SystemCoreClockUpdate+0x190>)
  40c040:	601a      	str	r2, [r3, #0]
			break;
  40c042:	e003      	b.n	40c04c <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40c044:	4b3e      	ldr	r3, [pc, #248]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c046:	4a3f      	ldr	r2, [pc, #252]	; (40c144 <SystemCoreClockUpdate+0x188>)
  40c048:	601a      	str	r2, [r3, #0]
			break;
  40c04a:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  40c04c:	e056      	b.n	40c0fc <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40c04e:	4b3a      	ldr	r3, [pc, #232]	; (40c138 <SystemCoreClockUpdate+0x17c>)
  40c050:	6a1b      	ldr	r3, [r3, #32]
  40c052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40c056:	2b00      	cmp	r3, #0
  40c058:	d003      	beq.n	40c062 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40c05a:	4b39      	ldr	r3, [pc, #228]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c05c:	4a39      	ldr	r2, [pc, #228]	; (40c144 <SystemCoreClockUpdate+0x188>)
  40c05e:	601a      	str	r2, [r3, #0]
  40c060:	e019      	b.n	40c096 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40c062:	4b37      	ldr	r3, [pc, #220]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c064:	4a38      	ldr	r2, [pc, #224]	; (40c148 <SystemCoreClockUpdate+0x18c>)
  40c066:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40c068:	4b33      	ldr	r3, [pc, #204]	; (40c138 <SystemCoreClockUpdate+0x17c>)
  40c06a:	6a1b      	ldr	r3, [r3, #32]
  40c06c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40c070:	2b10      	cmp	r3, #16
  40c072:	d008      	beq.n	40c086 <SystemCoreClockUpdate+0xca>
  40c074:	2b20      	cmp	r3, #32
  40c076:	d00a      	beq.n	40c08e <SystemCoreClockUpdate+0xd2>
  40c078:	2b00      	cmp	r3, #0
  40c07a:	d000      	beq.n	40c07e <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  40c07c:	e00b      	b.n	40c096 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40c07e:	4b30      	ldr	r3, [pc, #192]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c080:	4a31      	ldr	r2, [pc, #196]	; (40c148 <SystemCoreClockUpdate+0x18c>)
  40c082:	601a      	str	r2, [r3, #0]
					break;
  40c084:	e007      	b.n	40c096 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40c086:	4b2e      	ldr	r3, [pc, #184]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c088:	4a30      	ldr	r2, [pc, #192]	; (40c14c <SystemCoreClockUpdate+0x190>)
  40c08a:	601a      	str	r2, [r3, #0]
					break;
  40c08c:	e003      	b.n	40c096 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40c08e:	4b2c      	ldr	r3, [pc, #176]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c090:	4a2c      	ldr	r2, [pc, #176]	; (40c144 <SystemCoreClockUpdate+0x188>)
  40c092:	601a      	str	r2, [r3, #0]
					break;
  40c094:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40c096:	4b28      	ldr	r3, [pc, #160]	; (40c138 <SystemCoreClockUpdate+0x17c>)
  40c098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40c09a:	f003 0303 	and.w	r3, r3, #3
  40c09e:	2b02      	cmp	r3, #2
  40c0a0:	d115      	bne.n	40c0ce <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40c0a2:	4b25      	ldr	r3, [pc, #148]	; (40c138 <SystemCoreClockUpdate+0x17c>)
  40c0a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40c0a6:	4b2a      	ldr	r3, [pc, #168]	; (40c150 <SystemCoreClockUpdate+0x194>)
  40c0a8:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40c0aa:	0c1b      	lsrs	r3, r3, #16
  40c0ac:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40c0ae:	4a24      	ldr	r2, [pc, #144]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c0b0:	6812      	ldr	r2, [r2, #0]
  40c0b2:	fb02 f203 	mul.w	r2, r2, r3
  40c0b6:	4b22      	ldr	r3, [pc, #136]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c0b8:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40c0ba:	4b21      	ldr	r3, [pc, #132]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c0bc:	681a      	ldr	r2, [r3, #0]
  40c0be:	4b1e      	ldr	r3, [pc, #120]	; (40c138 <SystemCoreClockUpdate+0x17c>)
  40c0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40c0c2:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40c0c4:	fbb2 f2f3 	udiv	r2, r2, r3
  40c0c8:	4b1d      	ldr	r3, [pc, #116]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c0ca:	601a      	str	r2, [r3, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40c0cc:	e016      	b.n	40c0fc <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40c0ce:	4b1a      	ldr	r3, [pc, #104]	; (40c138 <SystemCoreClockUpdate+0x17c>)
  40c0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40c0d2:	4b1f      	ldr	r3, [pc, #124]	; (40c150 <SystemCoreClockUpdate+0x194>)
  40c0d4:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40c0d6:	0c1b      	lsrs	r3, r3, #16
  40c0d8:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40c0da:	4a19      	ldr	r2, [pc, #100]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c0dc:	6812      	ldr	r2, [r2, #0]
  40c0de:	fb02 f203 	mul.w	r2, r2, r3
  40c0e2:	4b17      	ldr	r3, [pc, #92]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c0e4:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40c0e6:	4b16      	ldr	r3, [pc, #88]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c0e8:	681a      	ldr	r2, [r3, #0]
  40c0ea:	4b13      	ldr	r3, [pc, #76]	; (40c138 <SystemCoreClockUpdate+0x17c>)
  40c0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40c0ee:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40c0f0:	fbb2 f2f3 	udiv	r2, r2, r3
  40c0f4:	4b12      	ldr	r3, [pc, #72]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c0f6:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40c0f8:	e000      	b.n	40c0fc <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40c0fa:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40c0fc:	4b0e      	ldr	r3, [pc, #56]	; (40c138 <SystemCoreClockUpdate+0x17c>)
  40c0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40c100:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40c104:	2b70      	cmp	r3, #112	; 0x70
  40c106:	d108      	bne.n	40c11a <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  40c108:	4b0d      	ldr	r3, [pc, #52]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c10a:	681a      	ldr	r2, [r3, #0]
  40c10c:	4b11      	ldr	r3, [pc, #68]	; (40c154 <SystemCoreClockUpdate+0x198>)
  40c10e:	fba3 1302 	umull	r1, r3, r3, r2
  40c112:	085a      	lsrs	r2, r3, #1
  40c114:	4b0a      	ldr	r3, [pc, #40]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c116:	601a      	str	r2, [r3, #0]
  40c118:	e009      	b.n	40c12e <SystemCoreClockUpdate+0x172>
	} else {
		SystemCoreClock >>=
  40c11a:	4b09      	ldr	r3, [pc, #36]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c11c:	681a      	ldr	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40c11e:	4b06      	ldr	r3, [pc, #24]	; (40c138 <SystemCoreClockUpdate+0x17c>)
  40c120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40c122:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40c126:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40c128:	40da      	lsrs	r2, r3
  40c12a:	4b05      	ldr	r3, [pc, #20]	; (40c140 <SystemCoreClockUpdate+0x184>)
  40c12c:	601a      	str	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  40c12e:	46bd      	mov	sp, r7
  40c130:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c134:	4770      	bx	lr
  40c136:	bf00      	nop
  40c138:	400e0400 	.word	0x400e0400
  40c13c:	400e1410 	.word	0x400e1410
  40c140:	2000036c 	.word	0x2000036c
  40c144:	00b71b00 	.word	0x00b71b00
  40c148:	003d0900 	.word	0x003d0900
  40c14c:	007a1200 	.word	0x007a1200
  40c150:	07ff0000 	.word	0x07ff0000
  40c154:	aaaaaaab 	.word	0xaaaaaaab

0040c158 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  40c158:	b480      	push	{r7}
  40c15a:	b083      	sub	sp, #12
  40c15c:	af00      	add	r7, sp, #0
  40c15e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40c160:	687a      	ldr	r2, [r7, #4]
  40c162:	4b18      	ldr	r3, [pc, #96]	; (40c1c4 <system_init_flash+0x6c>)
  40c164:	429a      	cmp	r2, r3
  40c166:	d804      	bhi.n	40c172 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40c168:	4b17      	ldr	r3, [pc, #92]	; (40c1c8 <system_init_flash+0x70>)
  40c16a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40c16e:	601a      	str	r2, [r3, #0]
  40c170:	e023      	b.n	40c1ba <system_init_flash+0x62>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40c172:	687a      	ldr	r2, [r7, #4]
  40c174:	4b15      	ldr	r3, [pc, #84]	; (40c1cc <system_init_flash+0x74>)
  40c176:	429a      	cmp	r2, r3
  40c178:	d803      	bhi.n	40c182 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40c17a:	4b13      	ldr	r3, [pc, #76]	; (40c1c8 <system_init_flash+0x70>)
  40c17c:	4a14      	ldr	r2, [pc, #80]	; (40c1d0 <system_init_flash+0x78>)
  40c17e:	601a      	str	r2, [r3, #0]
  40c180:	e01b      	b.n	40c1ba <system_init_flash+0x62>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40c182:	687a      	ldr	r2, [r7, #4]
  40c184:	4b13      	ldr	r3, [pc, #76]	; (40c1d4 <system_init_flash+0x7c>)
  40c186:	429a      	cmp	r2, r3
  40c188:	d803      	bhi.n	40c192 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40c18a:	4b0f      	ldr	r3, [pc, #60]	; (40c1c8 <system_init_flash+0x70>)
  40c18c:	4a12      	ldr	r2, [pc, #72]	; (40c1d8 <system_init_flash+0x80>)
  40c18e:	601a      	str	r2, [r3, #0]
  40c190:	e013      	b.n	40c1ba <system_init_flash+0x62>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40c192:	687a      	ldr	r2, [r7, #4]
  40c194:	4b11      	ldr	r3, [pc, #68]	; (40c1dc <system_init_flash+0x84>)
  40c196:	429a      	cmp	r2, r3
  40c198:	d803      	bhi.n	40c1a2 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40c19a:	4b0b      	ldr	r3, [pc, #44]	; (40c1c8 <system_init_flash+0x70>)
  40c19c:	4a10      	ldr	r2, [pc, #64]	; (40c1e0 <system_init_flash+0x88>)
  40c19e:	601a      	str	r2, [r3, #0]
  40c1a0:	e00b      	b.n	40c1ba <system_init_flash+0x62>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40c1a2:	687a      	ldr	r2, [r7, #4]
  40c1a4:	4b0f      	ldr	r3, [pc, #60]	; (40c1e4 <system_init_flash+0x8c>)
  40c1a6:	429a      	cmp	r2, r3
  40c1a8:	d804      	bhi.n	40c1b4 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40c1aa:	4b07      	ldr	r3, [pc, #28]	; (40c1c8 <system_init_flash+0x70>)
  40c1ac:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40c1b0:	601a      	str	r2, [r3, #0]
  40c1b2:	e002      	b.n	40c1ba <system_init_flash+0x62>
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40c1b4:	4b04      	ldr	r3, [pc, #16]	; (40c1c8 <system_init_flash+0x70>)
  40c1b6:	4a0c      	ldr	r2, [pc, #48]	; (40c1e8 <system_init_flash+0x90>)
  40c1b8:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40c1ba:	370c      	adds	r7, #12
  40c1bc:	46bd      	mov	sp, r7
  40c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c1c2:	4770      	bx	lr
  40c1c4:	01ba813f 	.word	0x01ba813f
  40c1c8:	400e0a00 	.word	0x400e0a00
  40c1cc:	0375027f 	.word	0x0375027f
  40c1d0:	04000100 	.word	0x04000100
  40c1d4:	053ec5ff 	.word	0x053ec5ff
  40c1d8:	04000200 	.word	0x04000200
  40c1dc:	00a4cb7f 	.word	0x00a4cb7f
  40c1e0:	04000300 	.word	0x04000300
  40c1e4:	07270dff 	.word	0x07270dff
  40c1e8:	04000500 	.word	0x04000500

0040c1ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40c1ec:	b480      	push	{r7}
  40c1ee:	b085      	sub	sp, #20
  40c1f0:	af00      	add	r7, sp, #0
  40c1f2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40c1f4:	4b10      	ldr	r3, [pc, #64]	; (40c238 <_sbrk+0x4c>)
  40c1f6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  40c1f8:	4b10      	ldr	r3, [pc, #64]	; (40c23c <_sbrk+0x50>)
  40c1fa:	681b      	ldr	r3, [r3, #0]
  40c1fc:	2b00      	cmp	r3, #0
  40c1fe:	d102      	bne.n	40c206 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  40c200:	4b0e      	ldr	r3, [pc, #56]	; (40c23c <_sbrk+0x50>)
  40c202:	4a0f      	ldr	r2, [pc, #60]	; (40c240 <_sbrk+0x54>)
  40c204:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40c206:	4b0d      	ldr	r3, [pc, #52]	; (40c23c <_sbrk+0x50>)
  40c208:	681b      	ldr	r3, [r3, #0]
  40c20a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40c20c:	68ba      	ldr	r2, [r7, #8]
  40c20e:	687b      	ldr	r3, [r7, #4]
  40c210:	441a      	add	r2, r3
  40c212:	68fb      	ldr	r3, [r7, #12]
  40c214:	429a      	cmp	r2, r3
  40c216:	dd02      	ble.n	40c21e <_sbrk+0x32>
		return (caddr_t) -1;	
  40c218:	f04f 33ff 	mov.w	r3, #4294967295
  40c21c:	e006      	b.n	40c22c <_sbrk+0x40>
	}

	heap += incr;
  40c21e:	4b07      	ldr	r3, [pc, #28]	; (40c23c <_sbrk+0x50>)
  40c220:	681a      	ldr	r2, [r3, #0]
  40c222:	687b      	ldr	r3, [r7, #4]
  40c224:	441a      	add	r2, r3
  40c226:	4b05      	ldr	r3, [pc, #20]	; (40c23c <_sbrk+0x50>)
  40c228:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
  40c22a:	68bb      	ldr	r3, [r7, #8]
}
  40c22c:	4618      	mov	r0, r3
  40c22e:	3714      	adds	r7, #20
  40c230:	46bd      	mov	sp, r7
  40c232:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c236:	4770      	bx	lr
  40c238:	2000fffc 	.word	0x2000fffc
  40c23c:	20008914 	.word	0x20008914
  40c240:	2000c9d8 	.word	0x2000c9d8

0040c244 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  40c244:	b480      	push	{r7}
  40c246:	b083      	sub	sp, #12
  40c248:	af00      	add	r7, sp, #0
  40c24a:	6078      	str	r0, [r7, #4]
	return -1;
  40c24c:	f04f 33ff 	mov.w	r3, #4294967295
}
  40c250:	4618      	mov	r0, r3
  40c252:	370c      	adds	r7, #12
  40c254:	46bd      	mov	sp, r7
  40c256:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c25a:	4770      	bx	lr

0040c25c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40c25c:	b480      	push	{r7}
  40c25e:	b083      	sub	sp, #12
  40c260:	af00      	add	r7, sp, #0
  40c262:	6078      	str	r0, [r7, #4]
  40c264:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  40c266:	683b      	ldr	r3, [r7, #0]
  40c268:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40c26c:	605a      	str	r2, [r3, #4]

	return 0;
  40c26e:	2300      	movs	r3, #0
}
  40c270:	4618      	mov	r0, r3
  40c272:	370c      	adds	r7, #12
  40c274:	46bd      	mov	sp, r7
  40c276:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c27a:	4770      	bx	lr

0040c27c <_isatty>:

extern int _isatty(int file)
{
  40c27c:	b480      	push	{r7}
  40c27e:	b083      	sub	sp, #12
  40c280:	af00      	add	r7, sp, #0
  40c282:	6078      	str	r0, [r7, #4]
	return 1;
  40c284:	2301      	movs	r3, #1
}
  40c286:	4618      	mov	r0, r3
  40c288:	370c      	adds	r7, #12
  40c28a:	46bd      	mov	sp, r7
  40c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c290:	4770      	bx	lr
  40c292:	bf00      	nop

0040c294 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  40c294:	b480      	push	{r7}
  40c296:	b085      	sub	sp, #20
  40c298:	af00      	add	r7, sp, #0
  40c29a:	60f8      	str	r0, [r7, #12]
  40c29c:	60b9      	str	r1, [r7, #8]
  40c29e:	607a      	str	r2, [r7, #4]
	return 0;
  40c2a0:	2300      	movs	r3, #0
}
  40c2a2:	4618      	mov	r0, r3
  40c2a4:	3714      	adds	r7, #20
  40c2a6:	46bd      	mov	sp, r7
  40c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c2ac:	4770      	bx	lr
  40c2ae:	bf00      	nop

0040c2b0 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  40c2b0:	b480      	push	{r7}
  40c2b2:	b08b      	sub	sp, #44	; 0x2c
  40c2b4:	af00      	add	r7, sp, #0
  40c2b6:	6078      	str	r0, [r7, #4]
  40c2b8:	460b      	mov	r3, r1
  40c2ba:	70fb      	strb	r3, [r7, #3]
  40c2bc:	687b      	ldr	r3, [r7, #4]
  40c2be:	627b      	str	r3, [r7, #36]	; 0x24
  40c2c0:	78fb      	ldrb	r3, [r7, #3]
  40c2c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40c2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40c2c8:	61fb      	str	r3, [r7, #28]
  40c2ca:	69fb      	ldr	r3, [r7, #28]
  40c2cc:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40c2ce:	69bb      	ldr	r3, [r7, #24]
  40c2d0:	095b      	lsrs	r3, r3, #5
  40c2d2:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40c2d4:	697b      	ldr	r3, [r7, #20]
  40c2d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40c2da:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40c2de:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40c2e0:	613b      	str	r3, [r7, #16]

	if (level) {
  40c2e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40c2e6:	2b00      	cmp	r3, #0
  40c2e8:	d009      	beq.n	40c2fe <ioport_set_pin_level+0x4e>
  40c2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40c2ec:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40c2ee:	68fb      	ldr	r3, [r7, #12]
  40c2f0:	f003 031f 	and.w	r3, r3, #31
  40c2f4:	2201      	movs	r2, #1
  40c2f6:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40c2f8:	693b      	ldr	r3, [r7, #16]
  40c2fa:	631a      	str	r2, [r3, #48]	; 0x30
  40c2fc:	e008      	b.n	40c310 <ioport_set_pin_level+0x60>
  40c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40c300:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40c302:	68bb      	ldr	r3, [r7, #8]
  40c304:	f003 031f 	and.w	r3, r3, #31
  40c308:	2201      	movs	r2, #1
  40c30a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40c30c:	693b      	ldr	r3, [r7, #16]
  40c30e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  40c310:	372c      	adds	r7, #44	; 0x2c
  40c312:	46bd      	mov	sp, r7
  40c314:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c318:	4770      	bx	lr
  40c31a:	bf00      	nop

0040c31c <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  40c31c:	b480      	push	{r7}
  40c31e:	b089      	sub	sp, #36	; 0x24
  40c320:	af00      	add	r7, sp, #0
  40c322:	6078      	str	r0, [r7, #4]
  40c324:	687b      	ldr	r3, [r7, #4]
  40c326:	61fb      	str	r3, [r7, #28]
  40c328:	69fb      	ldr	r3, [r7, #28]
  40c32a:	61bb      	str	r3, [r7, #24]
  40c32c:	69bb      	ldr	r3, [r7, #24]
  40c32e:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40c330:	697b      	ldr	r3, [r7, #20]
  40c332:	095b      	lsrs	r3, r3, #5
  40c334:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40c336:	693b      	ldr	r3, [r7, #16]
  40c338:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40c33c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40c340:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40c342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40c344:	69fb      	ldr	r3, [r7, #28]
  40c346:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40c348:	68fb      	ldr	r3, [r7, #12]
  40c34a:	f003 031f 	and.w	r3, r3, #31
  40c34e:	2101      	movs	r1, #1
  40c350:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40c354:	4013      	ands	r3, r2
  40c356:	2b00      	cmp	r3, #0
  40c358:	bf0c      	ite	eq
  40c35a:	2300      	moveq	r3, #0
  40c35c:	2301      	movne	r3, #1
  40c35e:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  40c360:	4618      	mov	r0, r3
  40c362:	3724      	adds	r7, #36	; 0x24
  40c364:	46bd      	mov	sp, r7
  40c366:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c36a:	4770      	bx	lr

0040c36c <HardFault_Handler>:
#include "chrg_chargeMonitor.h"

extern void xPortSysTickHandler(void);
extern void vApplicationMallocFailedHook( void );
void HardFault_Handler()
{
  40c36c:	b480      	push	{r7}
  40c36e:	af00      	add	r7, sp, #0
	while(1); 
  40c370:	e7fe      	b.n	40c370 <HardFault_Handler+0x4>
  40c372:	bf00      	nop

0040c374 <MemManage_Handler>:
}
void MemManage_Handler()
{
  40c374:	b480      	push	{r7}
  40c376:	af00      	add	r7, sp, #0
	while(1); 
  40c378:	e7fe      	b.n	40c378 <MemManage_Handler+0x4>
  40c37a:	bf00      	nop

0040c37c <BusFault_Handler>:
}
void BusFault_Handler()
{
  40c37c:	b480      	push	{r7}
  40c37e:	af00      	add	r7, sp, #0
	while(1); 
  40c380:	e7fe      	b.n	40c380 <BusFault_Handler+0x4>
  40c382:	bf00      	nop

0040c384 <UsageFault_Handler>:
}
void UsageFault_Handler()
{
  40c384:	b480      	push	{r7}
  40c386:	af00      	add	r7, sp, #0
	while(1); 
  40c388:	e7fe      	b.n	40c388 <UsageFault_Handler+0x4>
  40c38a:	bf00      	nop

0040c38c <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
  40c38c:	b480      	push	{r7}
  40c38e:	af00      	add	r7, sp, #0
	while(1);
  40c390:	e7fe      	b.n	40c390 <vApplicationMallocFailedHook+0x4>
  40c392:	bf00      	nop

0040c394 <main>:
	////sgSysTickCount++;
	//xPortSysTickHandler();
//}

int main (void)
{
  40c394:	b590      	push	{r4, r7, lr}
  40c396:	b087      	sub	sp, #28
  40c398:	af04      	add	r7, sp, #16
	irq_initialize_vectors();
	cpu_irq_enable();
  40c39a:	4b1c      	ldr	r3, [pc, #112]	; (40c40c <main+0x78>)
  40c39c:	2201      	movs	r2, #1
  40c39e:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40c3a0:	f3bf 8f5f 	dmb	sy
  40c3a4:	b662      	cpsie	i
	////Initialize system clock and peripherals
	sysclk_init();	
  40c3a6:	4b1a      	ldr	r3, [pc, #104]	; (40c410 <main+0x7c>)
  40c3a8:	4798      	blx	r3
	
	board_init();
  40c3aa:	4b1a      	ldr	r3, [pc, #104]	; (40c414 <main+0x80>)
  40c3ac:	4798      	blx	r3
	brd_enableWatchdog();
  40c3ae:	4b1a      	ldr	r3, [pc, #104]	; (40c418 <main+0x84>)
  40c3b0:	4798      	blx	r3
	//drv_gpio_setPinState(DRV_GPIO_PIN_LED_RED, DRV_GPIO_PIN_STATE_LOW);
	//drv_gpio_setPinState(DRV_GPIO_PIN_LED_BLUE, DRV_GPIO_PIN_STATE_LOW);
	//drv_gpio_setPinState(DRV_GPIO_PIN_LED_GREEN, DRV_GPIO_PIN_STATE_LOW);
	// Insert application code here, after the board has been initialized.
	//start all the tasks
	int retCode = xTaskCreate(mgr_managerTask, "MGR", TASK_MANAGER_STACK_SIZE, NULL, TASK_MANAGER_PRIORITY, NULL);
  40c3b2:	2304      	movs	r3, #4
  40c3b4:	9300      	str	r3, [sp, #0]
  40c3b6:	2300      	movs	r3, #0
  40c3b8:	9301      	str	r3, [sp, #4]
  40c3ba:	2300      	movs	r3, #0
  40c3bc:	9302      	str	r3, [sp, #8]
  40c3be:	2300      	movs	r3, #0
  40c3c0:	9303      	str	r3, [sp, #12]
  40c3c2:	4816      	ldr	r0, [pc, #88]	; (40c41c <main+0x88>)
  40c3c4:	4916      	ldr	r1, [pc, #88]	; (40c420 <main+0x8c>)
  40c3c6:	f44f 7200 	mov.w	r2, #512	; 0x200
  40c3ca:	2300      	movs	r3, #0
  40c3cc:	4c15      	ldr	r4, [pc, #84]	; (40c424 <main+0x90>)
  40c3ce:	47a0      	blx	r4
  40c3d0:	6078      	str	r0, [r7, #4]
	if (retCode != pdPASS)
  40c3d2:	687b      	ldr	r3, [r7, #4]
  40c3d4:	2b01      	cmp	r3, #1
  40c3d6:	d003      	beq.n	40c3e0 <main+0x4c>
	{
		printf("Failed to create MGR task code %d\r\n", retCode);
  40c3d8:	4813      	ldr	r0, [pc, #76]	; (40c428 <main+0x94>)
  40c3da:	6879      	ldr	r1, [r7, #4]
  40c3dc:	4b13      	ldr	r3, [pc, #76]	; (40c42c <main+0x98>)
  40c3de:	4798      	blx	r3
	}	
	/* Start the scheduler. */
	vTaskStartScheduler();	
  40c3e0:	4b13      	ldr	r3, [pc, #76]	; (40c430 <main+0x9c>)
  40c3e2:	4798      	blx	r3
	
	// This skeleton code simply sets the LED to the state of the button.
	while (1) 
	{
		// Is button pressed?
		if (ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) 
  40c3e4:	2002      	movs	r0, #2
  40c3e6:	4b13      	ldr	r3, [pc, #76]	; (40c434 <main+0xa0>)
  40c3e8:	4798      	blx	r3
  40c3ea:	4603      	mov	r3, r0
  40c3ec:	f083 0301 	eor.w	r3, r3, #1
  40c3f0:	b2db      	uxtb	r3, r3
  40c3f2:	2b00      	cmp	r3, #0
  40c3f4:	d004      	beq.n	40c400 <main+0x6c>
		{
			// Yes, so turn LED on.
			ioport_set_pin_level(LED_0_PIN, LED_0_ACTIVE);
  40c3f6:	2057      	movs	r0, #87	; 0x57
  40c3f8:	2100      	movs	r1, #0
  40c3fa:	4b0f      	ldr	r3, [pc, #60]	; (40c438 <main+0xa4>)
  40c3fc:	4798      	blx	r3
		{
			// No, so turn LED off.
			ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
		}

	}
  40c3fe:	e7f1      	b.n	40c3e4 <main+0x50>
			ioport_set_pin_level(LED_0_PIN, LED_0_ACTIVE);
		}
		else 
		{
			// No, so turn LED off.
			ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  40c400:	2057      	movs	r0, #87	; 0x57
  40c402:	2101      	movs	r1, #1
  40c404:	4b0c      	ldr	r3, [pc, #48]	; (40c438 <main+0xa4>)
  40c406:	4798      	blx	r3
		}

	}
  40c408:	e7ec      	b.n	40c3e4 <main+0x50>
  40c40a:	bf00      	nop
  40c40c:	20000364 	.word	0x20000364
  40c410:	0040ad11 	.word	0x0040ad11
  40c414:	0040adb1 	.word	0x0040adb1
  40c418:	004043c1 	.word	0x004043c1
  40c41c:	00405e09 	.word	0x00405e09
  40c420:	00416140 	.word	0x00416140
  40c424:	00409079 	.word	0x00409079
  40c428:	00416144 	.word	0x00416144
  40c42c:	0040ca39 	.word	0x0040ca39
  40c430:	0040929d 	.word	0x0040929d
  40c434:	0040c31d 	.word	0x0040c31d
  40c438:	0040c2b1 	.word	0x0040c2b1

0040c43c <__aeabi_uldivmod>:
  40c43c:	b94b      	cbnz	r3, 40c452 <__aeabi_uldivmod+0x16>
  40c43e:	b942      	cbnz	r2, 40c452 <__aeabi_uldivmod+0x16>
  40c440:	2900      	cmp	r1, #0
  40c442:	bf08      	it	eq
  40c444:	2800      	cmpeq	r0, #0
  40c446:	d002      	beq.n	40c44e <__aeabi_uldivmod+0x12>
  40c448:	f04f 31ff 	mov.w	r1, #4294967295
  40c44c:	4608      	mov	r0, r1
  40c44e:	f000 b83b 	b.w	40c4c8 <__aeabi_idiv0>
  40c452:	b082      	sub	sp, #8
  40c454:	46ec      	mov	ip, sp
  40c456:	e92d 5000 	stmdb	sp!, {ip, lr}
  40c45a:	f000 f81d 	bl	40c498 <__gnu_uldivmod_helper>
  40c45e:	f8dd e004 	ldr.w	lr, [sp, #4]
  40c462:	b002      	add	sp, #8
  40c464:	bc0c      	pop	{r2, r3}
  40c466:	4770      	bx	lr

0040c468 <__gnu_ldivmod_helper>:
  40c468:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40c46c:	9e06      	ldr	r6, [sp, #24]
  40c46e:	4614      	mov	r4, r2
  40c470:	461d      	mov	r5, r3
  40c472:	4680      	mov	r8, r0
  40c474:	4689      	mov	r9, r1
  40c476:	f000 f829 	bl	40c4cc <__divdi3>
  40c47a:	fb04 f301 	mul.w	r3, r4, r1
  40c47e:	fb00 3305 	mla	r3, r0, r5, r3
  40c482:	fba4 4500 	umull	r4, r5, r4, r0
  40c486:	441d      	add	r5, r3
  40c488:	ebb8 0404 	subs.w	r4, r8, r4
  40c48c:	eb69 0505 	sbc.w	r5, r9, r5
  40c490:	e9c6 4500 	strd	r4, r5, [r6]
  40c494:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0040c498 <__gnu_uldivmod_helper>:
  40c498:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40c49c:	9e06      	ldr	r6, [sp, #24]
  40c49e:	4614      	mov	r4, r2
  40c4a0:	4680      	mov	r8, r0
  40c4a2:	4689      	mov	r9, r1
  40c4a4:	461d      	mov	r5, r3
  40c4a6:	f000 f95d 	bl	40c764 <__udivdi3>
  40c4aa:	fb00 f505 	mul.w	r5, r0, r5
  40c4ae:	fb04 5301 	mla	r3, r4, r1, r5
  40c4b2:	fba0 4504 	umull	r4, r5, r0, r4
  40c4b6:	441d      	add	r5, r3
  40c4b8:	ebb8 0404 	subs.w	r4, r8, r4
  40c4bc:	eb69 0505 	sbc.w	r5, r9, r5
  40c4c0:	e9c6 4500 	strd	r4, r5, [r6]
  40c4c4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0040c4c8 <__aeabi_idiv0>:
  40c4c8:	4770      	bx	lr
  40c4ca:	bf00      	nop

0040c4cc <__divdi3>:
  40c4cc:	2900      	cmp	r1, #0
  40c4ce:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c4d2:	f2c0 809f 	blt.w	40c614 <__divdi3+0x148>
  40c4d6:	2400      	movs	r4, #0
  40c4d8:	2b00      	cmp	r3, #0
  40c4da:	f2c0 8096 	blt.w	40c60a <__divdi3+0x13e>
  40c4de:	4615      	mov	r5, r2
  40c4e0:	4606      	mov	r6, r0
  40c4e2:	460f      	mov	r7, r1
  40c4e4:	2b00      	cmp	r3, #0
  40c4e6:	d13e      	bne.n	40c566 <__divdi3+0x9a>
  40c4e8:	428a      	cmp	r2, r1
  40c4ea:	d957      	bls.n	40c59c <__divdi3+0xd0>
  40c4ec:	fab2 f382 	clz	r3, r2
  40c4f0:	b14b      	cbz	r3, 40c506 <__divdi3+0x3a>
  40c4f2:	f1c3 0220 	rsb	r2, r3, #32
  40c4f6:	fa01 f703 	lsl.w	r7, r1, r3
  40c4fa:	fa20 f202 	lsr.w	r2, r0, r2
  40c4fe:	409d      	lsls	r5, r3
  40c500:	4317      	orrs	r7, r2
  40c502:	fa00 f603 	lsl.w	r6, r0, r3
  40c506:	0c29      	lsrs	r1, r5, #16
  40c508:	fbb7 f2f1 	udiv	r2, r7, r1
  40c50c:	0c33      	lsrs	r3, r6, #16
  40c50e:	fb01 7c12 	mls	ip, r1, r2, r7
  40c512:	b2a8      	uxth	r0, r5
  40c514:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  40c518:	fb00 f302 	mul.w	r3, r0, r2
  40c51c:	42bb      	cmp	r3, r7
  40c51e:	d909      	bls.n	40c534 <__divdi3+0x68>
  40c520:	197f      	adds	r7, r7, r5
  40c522:	f102 3cff 	add.w	ip, r2, #4294967295
  40c526:	f080 8101 	bcs.w	40c72c <__divdi3+0x260>
  40c52a:	42bb      	cmp	r3, r7
  40c52c:	f240 80fe 	bls.w	40c72c <__divdi3+0x260>
  40c530:	3a02      	subs	r2, #2
  40c532:	442f      	add	r7, r5
  40c534:	1aff      	subs	r7, r7, r3
  40c536:	fbb7 f3f1 	udiv	r3, r7, r1
  40c53a:	b2b6      	uxth	r6, r6
  40c53c:	fb01 7113 	mls	r1, r1, r3, r7
  40c540:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  40c544:	fb00 f003 	mul.w	r0, r0, r3
  40c548:	4288      	cmp	r0, r1
  40c54a:	d908      	bls.n	40c55e <__divdi3+0x92>
  40c54c:	1949      	adds	r1, r1, r5
  40c54e:	f103 37ff 	add.w	r7, r3, #4294967295
  40c552:	f080 80ed 	bcs.w	40c730 <__divdi3+0x264>
  40c556:	4288      	cmp	r0, r1
  40c558:	f240 80ea 	bls.w	40c730 <__divdi3+0x264>
  40c55c:	3b02      	subs	r3, #2
  40c55e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40c562:	2300      	movs	r3, #0
  40c564:	e003      	b.n	40c56e <__divdi3+0xa2>
  40c566:	428b      	cmp	r3, r1
  40c568:	d90a      	bls.n	40c580 <__divdi3+0xb4>
  40c56a:	2300      	movs	r3, #0
  40c56c:	461a      	mov	r2, r3
  40c56e:	4610      	mov	r0, r2
  40c570:	4619      	mov	r1, r3
  40c572:	b114      	cbz	r4, 40c57a <__divdi3+0xae>
  40c574:	4240      	negs	r0, r0
  40c576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c57a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c57e:	4770      	bx	lr
  40c580:	fab3 f883 	clz	r8, r3
  40c584:	f1b8 0f00 	cmp.w	r8, #0
  40c588:	f040 8084 	bne.w	40c694 <__divdi3+0x1c8>
  40c58c:	428b      	cmp	r3, r1
  40c58e:	d302      	bcc.n	40c596 <__divdi3+0xca>
  40c590:	4282      	cmp	r2, r0
  40c592:	f200 80de 	bhi.w	40c752 <__divdi3+0x286>
  40c596:	2300      	movs	r3, #0
  40c598:	2201      	movs	r2, #1
  40c59a:	e7e8      	b.n	40c56e <__divdi3+0xa2>
  40c59c:	b912      	cbnz	r2, 40c5a4 <__divdi3+0xd8>
  40c59e:	2301      	movs	r3, #1
  40c5a0:	fbb3 f5f2 	udiv	r5, r3, r2
  40c5a4:	fab5 f285 	clz	r2, r5
  40c5a8:	2a00      	cmp	r2, #0
  40c5aa:	d139      	bne.n	40c620 <__divdi3+0x154>
  40c5ac:	1b7f      	subs	r7, r7, r5
  40c5ae:	0c28      	lsrs	r0, r5, #16
  40c5b0:	fa1f fc85 	uxth.w	ip, r5
  40c5b4:	2301      	movs	r3, #1
  40c5b6:	fbb7 f1f0 	udiv	r1, r7, r0
  40c5ba:	0c32      	lsrs	r2, r6, #16
  40c5bc:	fb00 7711 	mls	r7, r0, r1, r7
  40c5c0:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40c5c4:	fb0c f201 	mul.w	r2, ip, r1
  40c5c8:	42ba      	cmp	r2, r7
  40c5ca:	d907      	bls.n	40c5dc <__divdi3+0x110>
  40c5cc:	197f      	adds	r7, r7, r5
  40c5ce:	f101 38ff 	add.w	r8, r1, #4294967295
  40c5d2:	d202      	bcs.n	40c5da <__divdi3+0x10e>
  40c5d4:	42ba      	cmp	r2, r7
  40c5d6:	f200 80c1 	bhi.w	40c75c <__divdi3+0x290>
  40c5da:	4641      	mov	r1, r8
  40c5dc:	1abf      	subs	r7, r7, r2
  40c5de:	fbb7 f2f0 	udiv	r2, r7, r0
  40c5e2:	b2b6      	uxth	r6, r6
  40c5e4:	fb00 7012 	mls	r0, r0, r2, r7
  40c5e8:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  40c5ec:	fb0c fc02 	mul.w	ip, ip, r2
  40c5f0:	4584      	cmp	ip, r0
  40c5f2:	d907      	bls.n	40c604 <__divdi3+0x138>
  40c5f4:	1940      	adds	r0, r0, r5
  40c5f6:	f102 37ff 	add.w	r7, r2, #4294967295
  40c5fa:	d202      	bcs.n	40c602 <__divdi3+0x136>
  40c5fc:	4584      	cmp	ip, r0
  40c5fe:	f200 80ab 	bhi.w	40c758 <__divdi3+0x28c>
  40c602:	463a      	mov	r2, r7
  40c604:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  40c608:	e7b1      	b.n	40c56e <__divdi3+0xa2>
  40c60a:	43e4      	mvns	r4, r4
  40c60c:	4252      	negs	r2, r2
  40c60e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40c612:	e764      	b.n	40c4de <__divdi3+0x12>
  40c614:	4240      	negs	r0, r0
  40c616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c61a:	f04f 34ff 	mov.w	r4, #4294967295
  40c61e:	e75b      	b.n	40c4d8 <__divdi3+0xc>
  40c620:	4095      	lsls	r5, r2
  40c622:	f1c2 0320 	rsb	r3, r2, #32
  40c626:	fa27 f103 	lsr.w	r1, r7, r3
  40c62a:	0c28      	lsrs	r0, r5, #16
  40c62c:	fa26 f303 	lsr.w	r3, r6, r3
  40c630:	4097      	lsls	r7, r2
  40c632:	fbb1 f8f0 	udiv	r8, r1, r0
  40c636:	431f      	orrs	r7, r3
  40c638:	0c3b      	lsrs	r3, r7, #16
  40c63a:	fb00 1118 	mls	r1, r0, r8, r1
  40c63e:	fa1f fc85 	uxth.w	ip, r5
  40c642:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40c646:	fb0c f308 	mul.w	r3, ip, r8
  40c64a:	428b      	cmp	r3, r1
  40c64c:	fa06 f602 	lsl.w	r6, r6, r2
  40c650:	d908      	bls.n	40c664 <__divdi3+0x198>
  40c652:	1949      	adds	r1, r1, r5
  40c654:	f108 32ff 	add.w	r2, r8, #4294967295
  40c658:	d279      	bcs.n	40c74e <__divdi3+0x282>
  40c65a:	428b      	cmp	r3, r1
  40c65c:	d977      	bls.n	40c74e <__divdi3+0x282>
  40c65e:	f1a8 0802 	sub.w	r8, r8, #2
  40c662:	4429      	add	r1, r5
  40c664:	1ac9      	subs	r1, r1, r3
  40c666:	fbb1 f3f0 	udiv	r3, r1, r0
  40c66a:	b2bf      	uxth	r7, r7
  40c66c:	fb00 1113 	mls	r1, r0, r3, r1
  40c670:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  40c674:	fb0c f203 	mul.w	r2, ip, r3
  40c678:	42ba      	cmp	r2, r7
  40c67a:	d907      	bls.n	40c68c <__divdi3+0x1c0>
  40c67c:	197f      	adds	r7, r7, r5
  40c67e:	f103 31ff 	add.w	r1, r3, #4294967295
  40c682:	d260      	bcs.n	40c746 <__divdi3+0x27a>
  40c684:	42ba      	cmp	r2, r7
  40c686:	d95e      	bls.n	40c746 <__divdi3+0x27a>
  40c688:	3b02      	subs	r3, #2
  40c68a:	442f      	add	r7, r5
  40c68c:	1abf      	subs	r7, r7, r2
  40c68e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40c692:	e790      	b.n	40c5b6 <__divdi3+0xea>
  40c694:	f1c8 0220 	rsb	r2, r8, #32
  40c698:	fa03 fc08 	lsl.w	ip, r3, r8
  40c69c:	fa25 f302 	lsr.w	r3, r5, r2
  40c6a0:	ea43 0c0c 	orr.w	ip, r3, ip
  40c6a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
  40c6a8:	fa21 f302 	lsr.w	r3, r1, r2
  40c6ac:	fa01 f708 	lsl.w	r7, r1, r8
  40c6b0:	fa20 f202 	lsr.w	r2, r0, r2
  40c6b4:	fbb3 f1f9 	udiv	r1, r3, r9
  40c6b8:	4317      	orrs	r7, r2
  40c6ba:	fb09 3311 	mls	r3, r9, r1, r3
  40c6be:	0c3a      	lsrs	r2, r7, #16
  40c6c0:	fa1f fb8c 	uxth.w	fp, ip
  40c6c4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  40c6c8:	fb0b fa01 	mul.w	sl, fp, r1
  40c6cc:	459a      	cmp	sl, r3
  40c6ce:	fa05 f008 	lsl.w	r0, r5, r8
  40c6d2:	d908      	bls.n	40c6e6 <__divdi3+0x21a>
  40c6d4:	eb13 030c 	adds.w	r3, r3, ip
  40c6d8:	f101 32ff 	add.w	r2, r1, #4294967295
  40c6dc:	d235      	bcs.n	40c74a <__divdi3+0x27e>
  40c6de:	459a      	cmp	sl, r3
  40c6e0:	d933      	bls.n	40c74a <__divdi3+0x27e>
  40c6e2:	3902      	subs	r1, #2
  40c6e4:	4463      	add	r3, ip
  40c6e6:	ebca 0303 	rsb	r3, sl, r3
  40c6ea:	fbb3 f2f9 	udiv	r2, r3, r9
  40c6ee:	fb09 3312 	mls	r3, r9, r2, r3
  40c6f2:	b2bf      	uxth	r7, r7
  40c6f4:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40c6f8:	fb0b f902 	mul.w	r9, fp, r2
  40c6fc:	45b9      	cmp	r9, r7
  40c6fe:	d908      	bls.n	40c712 <__divdi3+0x246>
  40c700:	eb17 070c 	adds.w	r7, r7, ip
  40c704:	f102 33ff 	add.w	r3, r2, #4294967295
  40c708:	d21b      	bcs.n	40c742 <__divdi3+0x276>
  40c70a:	45b9      	cmp	r9, r7
  40c70c:	d919      	bls.n	40c742 <__divdi3+0x276>
  40c70e:	3a02      	subs	r2, #2
  40c710:	4467      	add	r7, ip
  40c712:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  40c716:	fba5 0100 	umull	r0, r1, r5, r0
  40c71a:	ebc9 0707 	rsb	r7, r9, r7
  40c71e:	428f      	cmp	r7, r1
  40c720:	f04f 0300 	mov.w	r3, #0
  40c724:	d30a      	bcc.n	40c73c <__divdi3+0x270>
  40c726:	d005      	beq.n	40c734 <__divdi3+0x268>
  40c728:	462a      	mov	r2, r5
  40c72a:	e720      	b.n	40c56e <__divdi3+0xa2>
  40c72c:	4662      	mov	r2, ip
  40c72e:	e701      	b.n	40c534 <__divdi3+0x68>
  40c730:	463b      	mov	r3, r7
  40c732:	e714      	b.n	40c55e <__divdi3+0x92>
  40c734:	fa06 f608 	lsl.w	r6, r6, r8
  40c738:	4286      	cmp	r6, r0
  40c73a:	d2f5      	bcs.n	40c728 <__divdi3+0x25c>
  40c73c:	1e6a      	subs	r2, r5, #1
  40c73e:	2300      	movs	r3, #0
  40c740:	e715      	b.n	40c56e <__divdi3+0xa2>
  40c742:	461a      	mov	r2, r3
  40c744:	e7e5      	b.n	40c712 <__divdi3+0x246>
  40c746:	460b      	mov	r3, r1
  40c748:	e7a0      	b.n	40c68c <__divdi3+0x1c0>
  40c74a:	4611      	mov	r1, r2
  40c74c:	e7cb      	b.n	40c6e6 <__divdi3+0x21a>
  40c74e:	4690      	mov	r8, r2
  40c750:	e788      	b.n	40c664 <__divdi3+0x198>
  40c752:	4643      	mov	r3, r8
  40c754:	4642      	mov	r2, r8
  40c756:	e70a      	b.n	40c56e <__divdi3+0xa2>
  40c758:	3a02      	subs	r2, #2
  40c75a:	e753      	b.n	40c604 <__divdi3+0x138>
  40c75c:	3902      	subs	r1, #2
  40c75e:	442f      	add	r7, r5
  40c760:	e73c      	b.n	40c5dc <__divdi3+0x110>
  40c762:	bf00      	nop

0040c764 <__udivdi3>:
  40c764:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c768:	4614      	mov	r4, r2
  40c76a:	4605      	mov	r5, r0
  40c76c:	460e      	mov	r6, r1
  40c76e:	2b00      	cmp	r3, #0
  40c770:	d143      	bne.n	40c7fa <__udivdi3+0x96>
  40c772:	428a      	cmp	r2, r1
  40c774:	d953      	bls.n	40c81e <__udivdi3+0xba>
  40c776:	fab2 f782 	clz	r7, r2
  40c77a:	b157      	cbz	r7, 40c792 <__udivdi3+0x2e>
  40c77c:	f1c7 0620 	rsb	r6, r7, #32
  40c780:	fa20 f606 	lsr.w	r6, r0, r6
  40c784:	fa01 f307 	lsl.w	r3, r1, r7
  40c788:	fa02 f407 	lsl.w	r4, r2, r7
  40c78c:	431e      	orrs	r6, r3
  40c78e:	fa00 f507 	lsl.w	r5, r0, r7
  40c792:	0c21      	lsrs	r1, r4, #16
  40c794:	fbb6 f2f1 	udiv	r2, r6, r1
  40c798:	0c2b      	lsrs	r3, r5, #16
  40c79a:	fb01 6712 	mls	r7, r1, r2, r6
  40c79e:	b2a0      	uxth	r0, r4
  40c7a0:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  40c7a4:	fb00 f302 	mul.w	r3, r0, r2
  40c7a8:	42b3      	cmp	r3, r6
  40c7aa:	d909      	bls.n	40c7c0 <__udivdi3+0x5c>
  40c7ac:	1936      	adds	r6, r6, r4
  40c7ae:	f102 37ff 	add.w	r7, r2, #4294967295
  40c7b2:	f080 80f6 	bcs.w	40c9a2 <__udivdi3+0x23e>
  40c7b6:	42b3      	cmp	r3, r6
  40c7b8:	f240 80f3 	bls.w	40c9a2 <__udivdi3+0x23e>
  40c7bc:	3a02      	subs	r2, #2
  40c7be:	4426      	add	r6, r4
  40c7c0:	1af6      	subs	r6, r6, r3
  40c7c2:	fbb6 f3f1 	udiv	r3, r6, r1
  40c7c6:	b2ad      	uxth	r5, r5
  40c7c8:	fb01 6113 	mls	r1, r1, r3, r6
  40c7cc:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  40c7d0:	fb00 f003 	mul.w	r0, r0, r3
  40c7d4:	4288      	cmp	r0, r1
  40c7d6:	d908      	bls.n	40c7ea <__udivdi3+0x86>
  40c7d8:	1909      	adds	r1, r1, r4
  40c7da:	f103 36ff 	add.w	r6, r3, #4294967295
  40c7de:	f080 80e2 	bcs.w	40c9a6 <__udivdi3+0x242>
  40c7e2:	4288      	cmp	r0, r1
  40c7e4:	f240 80df 	bls.w	40c9a6 <__udivdi3+0x242>
  40c7e8:	3b02      	subs	r3, #2
  40c7ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40c7ee:	2300      	movs	r3, #0
  40c7f0:	4610      	mov	r0, r2
  40c7f2:	4619      	mov	r1, r3
  40c7f4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c7f8:	4770      	bx	lr
  40c7fa:	428b      	cmp	r3, r1
  40c7fc:	d84a      	bhi.n	40c894 <__udivdi3+0x130>
  40c7fe:	fab3 f683 	clz	r6, r3
  40c802:	2e00      	cmp	r6, #0
  40c804:	d14d      	bne.n	40c8a2 <__udivdi3+0x13e>
  40c806:	428b      	cmp	r3, r1
  40c808:	d302      	bcc.n	40c810 <__udivdi3+0xac>
  40c80a:	4282      	cmp	r2, r0
  40c80c:	f200 80d6 	bhi.w	40c9bc <__udivdi3+0x258>
  40c810:	2300      	movs	r3, #0
  40c812:	2201      	movs	r2, #1
  40c814:	4610      	mov	r0, r2
  40c816:	4619      	mov	r1, r3
  40c818:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c81c:	4770      	bx	lr
  40c81e:	b912      	cbnz	r2, 40c826 <__udivdi3+0xc2>
  40c820:	2401      	movs	r4, #1
  40c822:	fbb4 f4f2 	udiv	r4, r4, r2
  40c826:	fab4 f284 	clz	r2, r4
  40c82a:	2a00      	cmp	r2, #0
  40c82c:	d17c      	bne.n	40c928 <__udivdi3+0x1c4>
  40c82e:	1b09      	subs	r1, r1, r4
  40c830:	0c26      	lsrs	r6, r4, #16
  40c832:	b2a7      	uxth	r7, r4
  40c834:	2301      	movs	r3, #1
  40c836:	fbb1 f0f6 	udiv	r0, r1, r6
  40c83a:	0c2a      	lsrs	r2, r5, #16
  40c83c:	fb06 1110 	mls	r1, r6, r0, r1
  40c840:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  40c844:	fb07 f200 	mul.w	r2, r7, r0
  40c848:	428a      	cmp	r2, r1
  40c84a:	d907      	bls.n	40c85c <__udivdi3+0xf8>
  40c84c:	1909      	adds	r1, r1, r4
  40c84e:	f100 3cff 	add.w	ip, r0, #4294967295
  40c852:	d202      	bcs.n	40c85a <__udivdi3+0xf6>
  40c854:	428a      	cmp	r2, r1
  40c856:	f200 80c3 	bhi.w	40c9e0 <__udivdi3+0x27c>
  40c85a:	4660      	mov	r0, ip
  40c85c:	1a89      	subs	r1, r1, r2
  40c85e:	fbb1 f2f6 	udiv	r2, r1, r6
  40c862:	b2ad      	uxth	r5, r5
  40c864:	fb06 1112 	mls	r1, r6, r2, r1
  40c868:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  40c86c:	fb07 f702 	mul.w	r7, r7, r2
  40c870:	42af      	cmp	r7, r5
  40c872:	d908      	bls.n	40c886 <__udivdi3+0x122>
  40c874:	192c      	adds	r4, r5, r4
  40c876:	f102 31ff 	add.w	r1, r2, #4294967295
  40c87a:	f080 8096 	bcs.w	40c9aa <__udivdi3+0x246>
  40c87e:	42a7      	cmp	r7, r4
  40c880:	f240 8093 	bls.w	40c9aa <__udivdi3+0x246>
  40c884:	3a02      	subs	r2, #2
  40c886:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  40c88a:	4610      	mov	r0, r2
  40c88c:	4619      	mov	r1, r3
  40c88e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c892:	4770      	bx	lr
  40c894:	2300      	movs	r3, #0
  40c896:	461a      	mov	r2, r3
  40c898:	4610      	mov	r0, r2
  40c89a:	4619      	mov	r1, r3
  40c89c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c8a0:	4770      	bx	lr
  40c8a2:	f1c6 0520 	rsb	r5, r6, #32
  40c8a6:	fa22 f405 	lsr.w	r4, r2, r5
  40c8aa:	40b3      	lsls	r3, r6
  40c8ac:	431c      	orrs	r4, r3
  40c8ae:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40c8b2:	fa21 f305 	lsr.w	r3, r1, r5
  40c8b6:	fa01 f706 	lsl.w	r7, r1, r6
  40c8ba:	fa20 f505 	lsr.w	r5, r0, r5
  40c8be:	fbb3 fcf8 	udiv	ip, r3, r8
  40c8c2:	432f      	orrs	r7, r5
  40c8c4:	fb08 331c 	mls	r3, r8, ip, r3
  40c8c8:	0c3d      	lsrs	r5, r7, #16
  40c8ca:	fa1f fa84 	uxth.w	sl, r4
  40c8ce:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  40c8d2:	fb0a f90c 	mul.w	r9, sl, ip
  40c8d6:	4599      	cmp	r9, r3
  40c8d8:	fa02 fb06 	lsl.w	fp, r2, r6
  40c8dc:	d904      	bls.n	40c8e8 <__udivdi3+0x184>
  40c8de:	191b      	adds	r3, r3, r4
  40c8e0:	f10c 32ff 	add.w	r2, ip, #4294967295
  40c8e4:	d36d      	bcc.n	40c9c2 <__udivdi3+0x25e>
  40c8e6:	4694      	mov	ip, r2
  40c8e8:	ebc9 0303 	rsb	r3, r9, r3
  40c8ec:	fbb3 f5f8 	udiv	r5, r3, r8
  40c8f0:	fb08 3315 	mls	r3, r8, r5, r3
  40c8f4:	b2bf      	uxth	r7, r7
  40c8f6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40c8fa:	fb0a f805 	mul.w	r8, sl, r5
  40c8fe:	45b8      	cmp	r8, r7
  40c900:	d904      	bls.n	40c90c <__udivdi3+0x1a8>
  40c902:	193f      	adds	r7, r7, r4
  40c904:	f105 33ff 	add.w	r3, r5, #4294967295
  40c908:	d361      	bcc.n	40c9ce <__udivdi3+0x26a>
  40c90a:	461d      	mov	r5, r3
  40c90c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  40c910:	fbac 230b 	umull	r2, r3, ip, fp
  40c914:	ebc8 0707 	rsb	r7, r8, r7
  40c918:	429f      	cmp	r7, r3
  40c91a:	f04f 0500 	mov.w	r5, #0
  40c91e:	d349      	bcc.n	40c9b4 <__udivdi3+0x250>
  40c920:	d045      	beq.n	40c9ae <__udivdi3+0x24a>
  40c922:	4662      	mov	r2, ip
  40c924:	462b      	mov	r3, r5
  40c926:	e763      	b.n	40c7f0 <__udivdi3+0x8c>
  40c928:	4094      	lsls	r4, r2
  40c92a:	f1c2 0320 	rsb	r3, r2, #32
  40c92e:	fa21 fc03 	lsr.w	ip, r1, r3
  40c932:	0c26      	lsrs	r6, r4, #16
  40c934:	fa20 f303 	lsr.w	r3, r0, r3
  40c938:	fa01 f502 	lsl.w	r5, r1, r2
  40c93c:	fbbc f8f6 	udiv	r8, ip, r6
  40c940:	ea43 0105 	orr.w	r1, r3, r5
  40c944:	0c0b      	lsrs	r3, r1, #16
  40c946:	fb06 cc18 	mls	ip, r6, r8, ip
  40c94a:	b2a7      	uxth	r7, r4
  40c94c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  40c950:	fb07 f308 	mul.w	r3, r7, r8
  40c954:	4563      	cmp	r3, ip
  40c956:	fa00 f502 	lsl.w	r5, r0, r2
  40c95a:	d909      	bls.n	40c970 <__udivdi3+0x20c>
  40c95c:	eb1c 0c04 	adds.w	ip, ip, r4
  40c960:	f108 32ff 	add.w	r2, r8, #4294967295
  40c964:	d23a      	bcs.n	40c9dc <__udivdi3+0x278>
  40c966:	4563      	cmp	r3, ip
  40c968:	d938      	bls.n	40c9dc <__udivdi3+0x278>
  40c96a:	f1a8 0802 	sub.w	r8, r8, #2
  40c96e:	44a4      	add	ip, r4
  40c970:	ebc3 0c0c 	rsb	ip, r3, ip
  40c974:	fbbc f3f6 	udiv	r3, ip, r6
  40c978:	b289      	uxth	r1, r1
  40c97a:	fb06 cc13 	mls	ip, r6, r3, ip
  40c97e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  40c982:	fb07 f203 	mul.w	r2, r7, r3
  40c986:	428a      	cmp	r2, r1
  40c988:	d907      	bls.n	40c99a <__udivdi3+0x236>
  40c98a:	1909      	adds	r1, r1, r4
  40c98c:	f103 30ff 	add.w	r0, r3, #4294967295
  40c990:	d222      	bcs.n	40c9d8 <__udivdi3+0x274>
  40c992:	428a      	cmp	r2, r1
  40c994:	d920      	bls.n	40c9d8 <__udivdi3+0x274>
  40c996:	3b02      	subs	r3, #2
  40c998:	4421      	add	r1, r4
  40c99a:	1a89      	subs	r1, r1, r2
  40c99c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40c9a0:	e749      	b.n	40c836 <__udivdi3+0xd2>
  40c9a2:	463a      	mov	r2, r7
  40c9a4:	e70c      	b.n	40c7c0 <__udivdi3+0x5c>
  40c9a6:	4633      	mov	r3, r6
  40c9a8:	e71f      	b.n	40c7ea <__udivdi3+0x86>
  40c9aa:	460a      	mov	r2, r1
  40c9ac:	e76b      	b.n	40c886 <__udivdi3+0x122>
  40c9ae:	40b0      	lsls	r0, r6
  40c9b0:	4290      	cmp	r0, r2
  40c9b2:	d2b6      	bcs.n	40c922 <__udivdi3+0x1be>
  40c9b4:	f10c 32ff 	add.w	r2, ip, #4294967295
  40c9b8:	2300      	movs	r3, #0
  40c9ba:	e719      	b.n	40c7f0 <__udivdi3+0x8c>
  40c9bc:	4633      	mov	r3, r6
  40c9be:	4632      	mov	r2, r6
  40c9c0:	e716      	b.n	40c7f0 <__udivdi3+0x8c>
  40c9c2:	4599      	cmp	r9, r3
  40c9c4:	d98f      	bls.n	40c8e6 <__udivdi3+0x182>
  40c9c6:	f1ac 0c02 	sub.w	ip, ip, #2
  40c9ca:	4423      	add	r3, r4
  40c9cc:	e78c      	b.n	40c8e8 <__udivdi3+0x184>
  40c9ce:	45b8      	cmp	r8, r7
  40c9d0:	d99b      	bls.n	40c90a <__udivdi3+0x1a6>
  40c9d2:	3d02      	subs	r5, #2
  40c9d4:	4427      	add	r7, r4
  40c9d6:	e799      	b.n	40c90c <__udivdi3+0x1a8>
  40c9d8:	4603      	mov	r3, r0
  40c9da:	e7de      	b.n	40c99a <__udivdi3+0x236>
  40c9dc:	4690      	mov	r8, r2
  40c9de:	e7c7      	b.n	40c970 <__udivdi3+0x20c>
  40c9e0:	3802      	subs	r0, #2
  40c9e2:	4421      	add	r1, r4
  40c9e4:	e73a      	b.n	40c85c <__udivdi3+0xf8>
  40c9e6:	bf00      	nop

0040c9e8 <__libc_init_array>:
  40c9e8:	b570      	push	{r4, r5, r6, lr}
  40c9ea:	4e0f      	ldr	r6, [pc, #60]	; (40ca28 <__libc_init_array+0x40>)
  40c9ec:	4d0f      	ldr	r5, [pc, #60]	; (40ca2c <__libc_init_array+0x44>)
  40c9ee:	1b76      	subs	r6, r6, r5
  40c9f0:	10b6      	asrs	r6, r6, #2
  40c9f2:	d007      	beq.n	40ca04 <__libc_init_array+0x1c>
  40c9f4:	3d04      	subs	r5, #4
  40c9f6:	2400      	movs	r4, #0
  40c9f8:	3401      	adds	r4, #1
  40c9fa:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40c9fe:	4798      	blx	r3
  40ca00:	42a6      	cmp	r6, r4
  40ca02:	d1f9      	bne.n	40c9f8 <__libc_init_array+0x10>
  40ca04:	4e0a      	ldr	r6, [pc, #40]	; (40ca30 <__libc_init_array+0x48>)
  40ca06:	4d0b      	ldr	r5, [pc, #44]	; (40ca34 <__libc_init_array+0x4c>)
  40ca08:	1b76      	subs	r6, r6, r5
  40ca0a:	f009 fdcd 	bl	4165a8 <_init>
  40ca0e:	10b6      	asrs	r6, r6, #2
  40ca10:	d008      	beq.n	40ca24 <__libc_init_array+0x3c>
  40ca12:	3d04      	subs	r5, #4
  40ca14:	2400      	movs	r4, #0
  40ca16:	3401      	adds	r4, #1
  40ca18:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40ca1c:	4798      	blx	r3
  40ca1e:	42a6      	cmp	r6, r4
  40ca20:	d1f9      	bne.n	40ca16 <__libc_init_array+0x2e>
  40ca22:	bd70      	pop	{r4, r5, r6, pc}
  40ca24:	bd70      	pop	{r4, r5, r6, pc}
  40ca26:	bf00      	nop
  40ca28:	004165b4 	.word	0x004165b4
  40ca2c:	004165b4 	.word	0x004165b4
  40ca30:	004165bc 	.word	0x004165bc
  40ca34:	004165b4 	.word	0x004165b4

0040ca38 <iprintf>:
  40ca38:	b40f      	push	{r0, r1, r2, r3}
  40ca3a:	b500      	push	{lr}
  40ca3c:	4a07      	ldr	r2, [pc, #28]	; (40ca5c <iprintf+0x24>)
  40ca3e:	b083      	sub	sp, #12
  40ca40:	ab04      	add	r3, sp, #16
  40ca42:	6810      	ldr	r0, [r2, #0]
  40ca44:	f853 2b04 	ldr.w	r2, [r3], #4
  40ca48:	6881      	ldr	r1, [r0, #8]
  40ca4a:	9301      	str	r3, [sp, #4]
  40ca4c:	f002 fcf2 	bl	40f434 <_vfiprintf_r>
  40ca50:	b003      	add	sp, #12
  40ca52:	f85d eb04 	ldr.w	lr, [sp], #4
  40ca56:	b004      	add	sp, #16
  40ca58:	4770      	bx	lr
  40ca5a:	bf00      	nop
  40ca5c:	20000798 	.word	0x20000798

0040ca60 <memcpy>:
  40ca60:	4684      	mov	ip, r0
  40ca62:	ea41 0300 	orr.w	r3, r1, r0
  40ca66:	f013 0303 	ands.w	r3, r3, #3
  40ca6a:	d16d      	bne.n	40cb48 <memcpy+0xe8>
  40ca6c:	3a40      	subs	r2, #64	; 0x40
  40ca6e:	d341      	bcc.n	40caf4 <memcpy+0x94>
  40ca70:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca74:	f840 3b04 	str.w	r3, [r0], #4
  40ca78:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca7c:	f840 3b04 	str.w	r3, [r0], #4
  40ca80:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca84:	f840 3b04 	str.w	r3, [r0], #4
  40ca88:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca8c:	f840 3b04 	str.w	r3, [r0], #4
  40ca90:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca94:	f840 3b04 	str.w	r3, [r0], #4
  40ca98:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca9c:	f840 3b04 	str.w	r3, [r0], #4
  40caa0:	f851 3b04 	ldr.w	r3, [r1], #4
  40caa4:	f840 3b04 	str.w	r3, [r0], #4
  40caa8:	f851 3b04 	ldr.w	r3, [r1], #4
  40caac:	f840 3b04 	str.w	r3, [r0], #4
  40cab0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cab4:	f840 3b04 	str.w	r3, [r0], #4
  40cab8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cabc:	f840 3b04 	str.w	r3, [r0], #4
  40cac0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cac4:	f840 3b04 	str.w	r3, [r0], #4
  40cac8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cacc:	f840 3b04 	str.w	r3, [r0], #4
  40cad0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cad4:	f840 3b04 	str.w	r3, [r0], #4
  40cad8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cadc:	f840 3b04 	str.w	r3, [r0], #4
  40cae0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cae4:	f840 3b04 	str.w	r3, [r0], #4
  40cae8:	f851 3b04 	ldr.w	r3, [r1], #4
  40caec:	f840 3b04 	str.w	r3, [r0], #4
  40caf0:	3a40      	subs	r2, #64	; 0x40
  40caf2:	d2bd      	bcs.n	40ca70 <memcpy+0x10>
  40caf4:	3230      	adds	r2, #48	; 0x30
  40caf6:	d311      	bcc.n	40cb1c <memcpy+0xbc>
  40caf8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cafc:	f840 3b04 	str.w	r3, [r0], #4
  40cb00:	f851 3b04 	ldr.w	r3, [r1], #4
  40cb04:	f840 3b04 	str.w	r3, [r0], #4
  40cb08:	f851 3b04 	ldr.w	r3, [r1], #4
  40cb0c:	f840 3b04 	str.w	r3, [r0], #4
  40cb10:	f851 3b04 	ldr.w	r3, [r1], #4
  40cb14:	f840 3b04 	str.w	r3, [r0], #4
  40cb18:	3a10      	subs	r2, #16
  40cb1a:	d2ed      	bcs.n	40caf8 <memcpy+0x98>
  40cb1c:	320c      	adds	r2, #12
  40cb1e:	d305      	bcc.n	40cb2c <memcpy+0xcc>
  40cb20:	f851 3b04 	ldr.w	r3, [r1], #4
  40cb24:	f840 3b04 	str.w	r3, [r0], #4
  40cb28:	3a04      	subs	r2, #4
  40cb2a:	d2f9      	bcs.n	40cb20 <memcpy+0xc0>
  40cb2c:	3204      	adds	r2, #4
  40cb2e:	d008      	beq.n	40cb42 <memcpy+0xe2>
  40cb30:	07d2      	lsls	r2, r2, #31
  40cb32:	bf1c      	itt	ne
  40cb34:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40cb38:	f800 3b01 	strbne.w	r3, [r0], #1
  40cb3c:	d301      	bcc.n	40cb42 <memcpy+0xe2>
  40cb3e:	880b      	ldrh	r3, [r1, #0]
  40cb40:	8003      	strh	r3, [r0, #0]
  40cb42:	4660      	mov	r0, ip
  40cb44:	4770      	bx	lr
  40cb46:	bf00      	nop
  40cb48:	2a08      	cmp	r2, #8
  40cb4a:	d313      	bcc.n	40cb74 <memcpy+0x114>
  40cb4c:	078b      	lsls	r3, r1, #30
  40cb4e:	d08d      	beq.n	40ca6c <memcpy+0xc>
  40cb50:	f010 0303 	ands.w	r3, r0, #3
  40cb54:	d08a      	beq.n	40ca6c <memcpy+0xc>
  40cb56:	f1c3 0304 	rsb	r3, r3, #4
  40cb5a:	1ad2      	subs	r2, r2, r3
  40cb5c:	07db      	lsls	r3, r3, #31
  40cb5e:	bf1c      	itt	ne
  40cb60:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40cb64:	f800 3b01 	strbne.w	r3, [r0], #1
  40cb68:	d380      	bcc.n	40ca6c <memcpy+0xc>
  40cb6a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40cb6e:	f820 3b02 	strh.w	r3, [r0], #2
  40cb72:	e77b      	b.n	40ca6c <memcpy+0xc>
  40cb74:	3a04      	subs	r2, #4
  40cb76:	d3d9      	bcc.n	40cb2c <memcpy+0xcc>
  40cb78:	3a01      	subs	r2, #1
  40cb7a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40cb7e:	f800 3b01 	strb.w	r3, [r0], #1
  40cb82:	d2f9      	bcs.n	40cb78 <memcpy+0x118>
  40cb84:	780b      	ldrb	r3, [r1, #0]
  40cb86:	7003      	strb	r3, [r0, #0]
  40cb88:	784b      	ldrb	r3, [r1, #1]
  40cb8a:	7043      	strb	r3, [r0, #1]
  40cb8c:	788b      	ldrb	r3, [r1, #2]
  40cb8e:	7083      	strb	r3, [r0, #2]
  40cb90:	4660      	mov	r0, ip
  40cb92:	4770      	bx	lr

0040cb94 <memset>:
  40cb94:	b4f0      	push	{r4, r5, r6, r7}
  40cb96:	0784      	lsls	r4, r0, #30
  40cb98:	d043      	beq.n	40cc22 <memset+0x8e>
  40cb9a:	1e54      	subs	r4, r2, #1
  40cb9c:	2a00      	cmp	r2, #0
  40cb9e:	d03e      	beq.n	40cc1e <memset+0x8a>
  40cba0:	b2cd      	uxtb	r5, r1
  40cba2:	4603      	mov	r3, r0
  40cba4:	e003      	b.n	40cbae <memset+0x1a>
  40cba6:	1e62      	subs	r2, r4, #1
  40cba8:	2c00      	cmp	r4, #0
  40cbaa:	d038      	beq.n	40cc1e <memset+0x8a>
  40cbac:	4614      	mov	r4, r2
  40cbae:	f803 5b01 	strb.w	r5, [r3], #1
  40cbb2:	079a      	lsls	r2, r3, #30
  40cbb4:	d1f7      	bne.n	40cba6 <memset+0x12>
  40cbb6:	2c03      	cmp	r4, #3
  40cbb8:	d92a      	bls.n	40cc10 <memset+0x7c>
  40cbba:	b2cd      	uxtb	r5, r1
  40cbbc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40cbc0:	2c0f      	cmp	r4, #15
  40cbc2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40cbc6:	d915      	bls.n	40cbf4 <memset+0x60>
  40cbc8:	f1a4 0710 	sub.w	r7, r4, #16
  40cbcc:	093f      	lsrs	r7, r7, #4
  40cbce:	f103 0610 	add.w	r6, r3, #16
  40cbd2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  40cbd6:	461a      	mov	r2, r3
  40cbd8:	6015      	str	r5, [r2, #0]
  40cbda:	6055      	str	r5, [r2, #4]
  40cbdc:	6095      	str	r5, [r2, #8]
  40cbde:	60d5      	str	r5, [r2, #12]
  40cbe0:	3210      	adds	r2, #16
  40cbe2:	42b2      	cmp	r2, r6
  40cbe4:	d1f8      	bne.n	40cbd8 <memset+0x44>
  40cbe6:	f004 040f 	and.w	r4, r4, #15
  40cbea:	3701      	adds	r7, #1
  40cbec:	2c03      	cmp	r4, #3
  40cbee:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  40cbf2:	d90d      	bls.n	40cc10 <memset+0x7c>
  40cbf4:	461e      	mov	r6, r3
  40cbf6:	4622      	mov	r2, r4
  40cbf8:	3a04      	subs	r2, #4
  40cbfa:	2a03      	cmp	r2, #3
  40cbfc:	f846 5b04 	str.w	r5, [r6], #4
  40cc00:	d8fa      	bhi.n	40cbf8 <memset+0x64>
  40cc02:	1f22      	subs	r2, r4, #4
  40cc04:	f022 0203 	bic.w	r2, r2, #3
  40cc08:	3204      	adds	r2, #4
  40cc0a:	4413      	add	r3, r2
  40cc0c:	f004 0403 	and.w	r4, r4, #3
  40cc10:	b12c      	cbz	r4, 40cc1e <memset+0x8a>
  40cc12:	b2c9      	uxtb	r1, r1
  40cc14:	441c      	add	r4, r3
  40cc16:	f803 1b01 	strb.w	r1, [r3], #1
  40cc1a:	42a3      	cmp	r3, r4
  40cc1c:	d1fb      	bne.n	40cc16 <memset+0x82>
  40cc1e:	bcf0      	pop	{r4, r5, r6, r7}
  40cc20:	4770      	bx	lr
  40cc22:	4614      	mov	r4, r2
  40cc24:	4603      	mov	r3, r0
  40cc26:	e7c6      	b.n	40cbb6 <memset+0x22>

0040cc28 <_puts_r>:
  40cc28:	b5f0      	push	{r4, r5, r6, r7, lr}
  40cc2a:	4604      	mov	r4, r0
  40cc2c:	b089      	sub	sp, #36	; 0x24
  40cc2e:	4608      	mov	r0, r1
  40cc30:	460d      	mov	r5, r1
  40cc32:	f000 f94d 	bl	40ced0 <strlen>
  40cc36:	68a3      	ldr	r3, [r4, #8]
  40cc38:	4f11      	ldr	r7, [pc, #68]	; (40cc80 <_puts_r+0x58>)
  40cc3a:	899a      	ldrh	r2, [r3, #12]
  40cc3c:	9504      	str	r5, [sp, #16]
  40cc3e:	2102      	movs	r1, #2
  40cc40:	f100 0e01 	add.w	lr, r0, #1
  40cc44:	2601      	movs	r6, #1
  40cc46:	ad04      	add	r5, sp, #16
  40cc48:	9102      	str	r1, [sp, #8]
  40cc4a:	0491      	lsls	r1, r2, #18
  40cc4c:	9005      	str	r0, [sp, #20]
  40cc4e:	f8cd e00c 	str.w	lr, [sp, #12]
  40cc52:	9706      	str	r7, [sp, #24]
  40cc54:	9607      	str	r6, [sp, #28]
  40cc56:	9501      	str	r5, [sp, #4]
  40cc58:	d406      	bmi.n	40cc68 <_puts_r+0x40>
  40cc5a:	6e59      	ldr	r1, [r3, #100]	; 0x64
  40cc5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40cc60:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40cc64:	819a      	strh	r2, [r3, #12]
  40cc66:	6659      	str	r1, [r3, #100]	; 0x64
  40cc68:	4620      	mov	r0, r4
  40cc6a:	4619      	mov	r1, r3
  40cc6c:	aa01      	add	r2, sp, #4
  40cc6e:	f004 fd69 	bl	411744 <__sfvwrite_r>
  40cc72:	2800      	cmp	r0, #0
  40cc74:	bf0c      	ite	eq
  40cc76:	200a      	moveq	r0, #10
  40cc78:	f04f 30ff 	movne.w	r0, #4294967295
  40cc7c:	b009      	add	sp, #36	; 0x24
  40cc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40cc80:	00416170 	.word	0x00416170

0040cc84 <puts>:
  40cc84:	4b02      	ldr	r3, [pc, #8]	; (40cc90 <puts+0xc>)
  40cc86:	4601      	mov	r1, r0
  40cc88:	6818      	ldr	r0, [r3, #0]
  40cc8a:	f7ff bfcd 	b.w	40cc28 <_puts_r>
  40cc8e:	bf00      	nop
  40cc90:	20000798 	.word	0x20000798

0040cc94 <setbuf>:
  40cc94:	2900      	cmp	r1, #0
  40cc96:	bf0c      	ite	eq
  40cc98:	2202      	moveq	r2, #2
  40cc9a:	2200      	movne	r2, #0
  40cc9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40cca0:	f000 b800 	b.w	40cca4 <setvbuf>

0040cca4 <setvbuf>:
  40cca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cca8:	4c3c      	ldr	r4, [pc, #240]	; (40cd9c <setvbuf+0xf8>)
  40ccaa:	6825      	ldr	r5, [r4, #0]
  40ccac:	4688      	mov	r8, r1
  40ccae:	4604      	mov	r4, r0
  40ccb0:	4616      	mov	r6, r2
  40ccb2:	461f      	mov	r7, r3
  40ccb4:	b115      	cbz	r5, 40ccbc <setvbuf+0x18>
  40ccb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40ccb8:	2b00      	cmp	r3, #0
  40ccba:	d04f      	beq.n	40cd5c <setvbuf+0xb8>
  40ccbc:	2e02      	cmp	r6, #2
  40ccbe:	d830      	bhi.n	40cd22 <setvbuf+0x7e>
  40ccc0:	2f00      	cmp	r7, #0
  40ccc2:	db2e      	blt.n	40cd22 <setvbuf+0x7e>
  40ccc4:	4628      	mov	r0, r5
  40ccc6:	4621      	mov	r1, r4
  40ccc8:	f004 fb10 	bl	4112ec <_fflush_r>
  40cccc:	89a3      	ldrh	r3, [r4, #12]
  40ccce:	2200      	movs	r2, #0
  40ccd0:	6062      	str	r2, [r4, #4]
  40ccd2:	61a2      	str	r2, [r4, #24]
  40ccd4:	061a      	lsls	r2, r3, #24
  40ccd6:	d428      	bmi.n	40cd2a <setvbuf+0x86>
  40ccd8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40ccdc:	b29b      	uxth	r3, r3
  40ccde:	2e02      	cmp	r6, #2
  40cce0:	81a3      	strh	r3, [r4, #12]
  40cce2:	d02d      	beq.n	40cd40 <setvbuf+0x9c>
  40cce4:	f1b8 0f00 	cmp.w	r8, #0
  40cce8:	d03c      	beq.n	40cd64 <setvbuf+0xc0>
  40ccea:	2e01      	cmp	r6, #1
  40ccec:	d013      	beq.n	40cd16 <setvbuf+0x72>
  40ccee:	b29b      	uxth	r3, r3
  40ccf0:	f003 0008 	and.w	r0, r3, #8
  40ccf4:	4a2a      	ldr	r2, [pc, #168]	; (40cda0 <setvbuf+0xfc>)
  40ccf6:	63ea      	str	r2, [r5, #60]	; 0x3c
  40ccf8:	b280      	uxth	r0, r0
  40ccfa:	f8c4 8000 	str.w	r8, [r4]
  40ccfe:	f8c4 8010 	str.w	r8, [r4, #16]
  40cd02:	6167      	str	r7, [r4, #20]
  40cd04:	b178      	cbz	r0, 40cd26 <setvbuf+0x82>
  40cd06:	f013 0f03 	tst.w	r3, #3
  40cd0a:	bf18      	it	ne
  40cd0c:	2700      	movne	r7, #0
  40cd0e:	60a7      	str	r7, [r4, #8]
  40cd10:	2000      	movs	r0, #0
  40cd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cd16:	f043 0301 	orr.w	r3, r3, #1
  40cd1a:	427a      	negs	r2, r7
  40cd1c:	81a3      	strh	r3, [r4, #12]
  40cd1e:	61a2      	str	r2, [r4, #24]
  40cd20:	e7e5      	b.n	40ccee <setvbuf+0x4a>
  40cd22:	f04f 30ff 	mov.w	r0, #4294967295
  40cd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cd2a:	4628      	mov	r0, r5
  40cd2c:	6921      	ldr	r1, [r4, #16]
  40cd2e:	f004 fc3b 	bl	4115a8 <_free_r>
  40cd32:	89a3      	ldrh	r3, [r4, #12]
  40cd34:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40cd38:	b29b      	uxth	r3, r3
  40cd3a:	2e02      	cmp	r6, #2
  40cd3c:	81a3      	strh	r3, [r4, #12]
  40cd3e:	d1d1      	bne.n	40cce4 <setvbuf+0x40>
  40cd40:	2000      	movs	r0, #0
  40cd42:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40cd46:	f043 0302 	orr.w	r3, r3, #2
  40cd4a:	2500      	movs	r5, #0
  40cd4c:	2101      	movs	r1, #1
  40cd4e:	81a3      	strh	r3, [r4, #12]
  40cd50:	60a5      	str	r5, [r4, #8]
  40cd52:	6022      	str	r2, [r4, #0]
  40cd54:	6122      	str	r2, [r4, #16]
  40cd56:	6161      	str	r1, [r4, #20]
  40cd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cd5c:	4628      	mov	r0, r5
  40cd5e:	f004 fae1 	bl	411324 <__sinit>
  40cd62:	e7ab      	b.n	40ccbc <setvbuf+0x18>
  40cd64:	2f00      	cmp	r7, #0
  40cd66:	bf08      	it	eq
  40cd68:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40cd6c:	4638      	mov	r0, r7
  40cd6e:	f004 ff3b 	bl	411be8 <malloc>
  40cd72:	4680      	mov	r8, r0
  40cd74:	b128      	cbz	r0, 40cd82 <setvbuf+0xde>
  40cd76:	89a3      	ldrh	r3, [r4, #12]
  40cd78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40cd7c:	b29b      	uxth	r3, r3
  40cd7e:	81a3      	strh	r3, [r4, #12]
  40cd80:	e7b3      	b.n	40ccea <setvbuf+0x46>
  40cd82:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40cd86:	f004 ff2f 	bl	411be8 <malloc>
  40cd8a:	4680      	mov	r8, r0
  40cd8c:	b918      	cbnz	r0, 40cd96 <setvbuf+0xf2>
  40cd8e:	89a3      	ldrh	r3, [r4, #12]
  40cd90:	f04f 30ff 	mov.w	r0, #4294967295
  40cd94:	e7d5      	b.n	40cd42 <setvbuf+0x9e>
  40cd96:	f44f 6780 	mov.w	r7, #1024	; 0x400
  40cd9a:	e7ec      	b.n	40cd76 <setvbuf+0xd2>
  40cd9c:	20000798 	.word	0x20000798
  40cda0:	00411319 	.word	0x00411319

0040cda4 <sprintf>:
  40cda4:	b40e      	push	{r1, r2, r3}
  40cda6:	b5f0      	push	{r4, r5, r6, r7, lr}
  40cda8:	b09c      	sub	sp, #112	; 0x70
  40cdaa:	ab21      	add	r3, sp, #132	; 0x84
  40cdac:	490f      	ldr	r1, [pc, #60]	; (40cdec <sprintf+0x48>)
  40cdae:	f853 2b04 	ldr.w	r2, [r3], #4
  40cdb2:	9301      	str	r3, [sp, #4]
  40cdb4:	4605      	mov	r5, r0
  40cdb6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40cdba:	6808      	ldr	r0, [r1, #0]
  40cdbc:	9502      	str	r5, [sp, #8]
  40cdbe:	f44f 7702 	mov.w	r7, #520	; 0x208
  40cdc2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40cdc6:	a902      	add	r1, sp, #8
  40cdc8:	9506      	str	r5, [sp, #24]
  40cdca:	f8ad 7014 	strh.w	r7, [sp, #20]
  40cdce:	9404      	str	r4, [sp, #16]
  40cdd0:	9407      	str	r4, [sp, #28]
  40cdd2:	f8ad 6016 	strh.w	r6, [sp, #22]
  40cdd6:	f000 f937 	bl	40d048 <_svfprintf_r>
  40cdda:	9b02      	ldr	r3, [sp, #8]
  40cddc:	2200      	movs	r2, #0
  40cdde:	701a      	strb	r2, [r3, #0]
  40cde0:	b01c      	add	sp, #112	; 0x70
  40cde2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40cde6:	b003      	add	sp, #12
  40cde8:	4770      	bx	lr
  40cdea:	bf00      	nop
  40cdec:	20000798 	.word	0x20000798

0040cdf0 <sscanf>:
  40cdf0:	b40e      	push	{r1, r2, r3}
  40cdf2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40cdf4:	b09c      	sub	sp, #112	; 0x70
  40cdf6:	ac21      	add	r4, sp, #132	; 0x84
  40cdf8:	f44f 7201 	mov.w	r2, #516	; 0x204
  40cdfc:	f854 6b04 	ldr.w	r6, [r4], #4
  40ce00:	f8ad 2014 	strh.w	r2, [sp, #20]
  40ce04:	9002      	str	r0, [sp, #8]
  40ce06:	9006      	str	r0, [sp, #24]
  40ce08:	f000 f862 	bl	40ced0 <strlen>
  40ce0c:	4b0c      	ldr	r3, [pc, #48]	; (40ce40 <sscanf+0x50>)
  40ce0e:	9401      	str	r4, [sp, #4]
  40ce10:	4605      	mov	r5, r0
  40ce12:	4632      	mov	r2, r6
  40ce14:	4f0b      	ldr	r7, [pc, #44]	; (40ce44 <sscanf+0x54>)
  40ce16:	6818      	ldr	r0, [r3, #0]
  40ce18:	9503      	str	r5, [sp, #12]
  40ce1a:	4623      	mov	r3, r4
  40ce1c:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40ce20:	2400      	movs	r4, #0
  40ce22:	a902      	add	r1, sp, #8
  40ce24:	9507      	str	r5, [sp, #28]
  40ce26:	970a      	str	r7, [sp, #40]	; 0x28
  40ce28:	940e      	str	r4, [sp, #56]	; 0x38
  40ce2a:	9413      	str	r4, [sp, #76]	; 0x4c
  40ce2c:	f8ad 6016 	strh.w	r6, [sp, #22]
  40ce30:	f001 fb86 	bl	40e540 <__ssvfscanf_r>
  40ce34:	b01c      	add	sp, #112	; 0x70
  40ce36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40ce3a:	b003      	add	sp, #12
  40ce3c:	4770      	bx	lr
  40ce3e:	bf00      	nop
  40ce40:	20000798 	.word	0x20000798
  40ce44:	0040ce6d 	.word	0x0040ce6d

0040ce48 <__sread>:
  40ce48:	b510      	push	{r4, lr}
  40ce4a:	460c      	mov	r4, r1
  40ce4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ce50:	f005 feaa 	bl	412ba8 <_read_r>
  40ce54:	2800      	cmp	r0, #0
  40ce56:	db03      	blt.n	40ce60 <__sread+0x18>
  40ce58:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40ce5a:	4403      	add	r3, r0
  40ce5c:	6523      	str	r3, [r4, #80]	; 0x50
  40ce5e:	bd10      	pop	{r4, pc}
  40ce60:	89a3      	ldrh	r3, [r4, #12]
  40ce62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40ce66:	81a3      	strh	r3, [r4, #12]
  40ce68:	bd10      	pop	{r4, pc}
  40ce6a:	bf00      	nop

0040ce6c <__seofread>:
  40ce6c:	2000      	movs	r0, #0
  40ce6e:	4770      	bx	lr

0040ce70 <__swrite>:
  40ce70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ce74:	460c      	mov	r4, r1
  40ce76:	8989      	ldrh	r1, [r1, #12]
  40ce78:	461d      	mov	r5, r3
  40ce7a:	05cb      	lsls	r3, r1, #23
  40ce7c:	4616      	mov	r6, r2
  40ce7e:	4607      	mov	r7, r0
  40ce80:	d506      	bpl.n	40ce90 <__swrite+0x20>
  40ce82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40ce86:	2200      	movs	r2, #0
  40ce88:	2302      	movs	r3, #2
  40ce8a:	f004 fe29 	bl	411ae0 <_lseek_r>
  40ce8e:	89a1      	ldrh	r1, [r4, #12]
  40ce90:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40ce94:	81a1      	strh	r1, [r4, #12]
  40ce96:	4638      	mov	r0, r7
  40ce98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40ce9c:	4632      	mov	r2, r6
  40ce9e:	462b      	mov	r3, r5
  40cea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40cea4:	f003 b92c 	b.w	410100 <_write_r>

0040cea8 <__sseek>:
  40cea8:	b510      	push	{r4, lr}
  40ceaa:	460c      	mov	r4, r1
  40ceac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ceb0:	f004 fe16 	bl	411ae0 <_lseek_r>
  40ceb4:	89a3      	ldrh	r3, [r4, #12]
  40ceb6:	1c42      	adds	r2, r0, #1
  40ceb8:	bf0e      	itee	eq
  40ceba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40cebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40cec2:	6520      	strne	r0, [r4, #80]	; 0x50
  40cec4:	81a3      	strh	r3, [r4, #12]
  40cec6:	bd10      	pop	{r4, pc}

0040cec8 <__sclose>:
  40cec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cecc:	f003 b99e 	b.w	41020c <_close_r>

0040ced0 <strlen>:
  40ced0:	f020 0103 	bic.w	r1, r0, #3
  40ced4:	f010 0003 	ands.w	r0, r0, #3
  40ced8:	f1c0 0000 	rsb	r0, r0, #0
  40cedc:	f851 3b04 	ldr.w	r3, [r1], #4
  40cee0:	f100 0c04 	add.w	ip, r0, #4
  40cee4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40cee8:	f06f 0200 	mvn.w	r2, #0
  40ceec:	bf1c      	itt	ne
  40ceee:	fa22 f20c 	lsrne.w	r2, r2, ip
  40cef2:	4313      	orrne	r3, r2
  40cef4:	f04f 0c01 	mov.w	ip, #1
  40cef8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40cefc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40cf00:	eba3 020c 	sub.w	r2, r3, ip
  40cf04:	ea22 0203 	bic.w	r2, r2, r3
  40cf08:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  40cf0c:	bf04      	itt	eq
  40cf0e:	f851 3b04 	ldreq.w	r3, [r1], #4
  40cf12:	3004      	addeq	r0, #4
  40cf14:	d0f4      	beq.n	40cf00 <strlen+0x30>
  40cf16:	f013 0fff 	tst.w	r3, #255	; 0xff
  40cf1a:	bf1f      	itttt	ne
  40cf1c:	3001      	addne	r0, #1
  40cf1e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  40cf22:	3001      	addne	r0, #1
  40cf24:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  40cf28:	bf18      	it	ne
  40cf2a:	3001      	addne	r0, #1
  40cf2c:	4770      	bx	lr
  40cf2e:	bf00      	nop

0040cf30 <strncmp>:
  40cf30:	b430      	push	{r4, r5}
  40cf32:	2a00      	cmp	r2, #0
  40cf34:	d04a      	beq.n	40cfcc <strncmp+0x9c>
  40cf36:	ea40 0301 	orr.w	r3, r0, r1
  40cf3a:	f013 0303 	ands.w	r3, r3, #3
  40cf3e:	d12d      	bne.n	40cf9c <strncmp+0x6c>
  40cf40:	2a03      	cmp	r2, #3
  40cf42:	d92b      	bls.n	40cf9c <strncmp+0x6c>
  40cf44:	6804      	ldr	r4, [r0, #0]
  40cf46:	680d      	ldr	r5, [r1, #0]
  40cf48:	42ac      	cmp	r4, r5
  40cf4a:	d127      	bne.n	40cf9c <strncmp+0x6c>
  40cf4c:	3a04      	subs	r2, #4
  40cf4e:	d03d      	beq.n	40cfcc <strncmp+0x9c>
  40cf50:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  40cf54:	ea25 0404 	bic.w	r4, r5, r4
  40cf58:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40cf5c:	d13c      	bne.n	40cfd8 <strncmp+0xa8>
  40cf5e:	460c      	mov	r4, r1
  40cf60:	4603      	mov	r3, r0
  40cf62:	e00e      	b.n	40cf82 <strncmp+0x52>
  40cf64:	685b      	ldr	r3, [r3, #4]
  40cf66:	6864      	ldr	r4, [r4, #4]
  40cf68:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40cf6c:	42a3      	cmp	r3, r4
  40cf6e:	ea25 0503 	bic.w	r5, r5, r3
  40cf72:	d113      	bne.n	40cf9c <strncmp+0x6c>
  40cf74:	3a04      	subs	r2, #4
  40cf76:	d029      	beq.n	40cfcc <strncmp+0x9c>
  40cf78:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  40cf7c:	d129      	bne.n	40cfd2 <strncmp+0xa2>
  40cf7e:	4603      	mov	r3, r0
  40cf80:	460c      	mov	r4, r1
  40cf82:	2a03      	cmp	r2, #3
  40cf84:	f100 0004 	add.w	r0, r0, #4
  40cf88:	f101 0104 	add.w	r1, r1, #4
  40cf8c:	d8ea      	bhi.n	40cf64 <strncmp+0x34>
  40cf8e:	1e55      	subs	r5, r2, #1
  40cf90:	b92a      	cbnz	r2, 40cf9e <strncmp+0x6e>
  40cf92:	7918      	ldrb	r0, [r3, #4]
  40cf94:	7922      	ldrb	r2, [r4, #4]
  40cf96:	1a80      	subs	r0, r0, r2
  40cf98:	bc30      	pop	{r4, r5}
  40cf9a:	4770      	bx	lr
  40cf9c:	1e55      	subs	r5, r2, #1
  40cf9e:	7803      	ldrb	r3, [r0, #0]
  40cfa0:	780a      	ldrb	r2, [r1, #0]
  40cfa2:	4293      	cmp	r3, r2
  40cfa4:	d11a      	bne.n	40cfdc <strncmp+0xac>
  40cfa6:	b1dd      	cbz	r5, 40cfe0 <strncmp+0xb0>
  40cfa8:	b1b3      	cbz	r3, 40cfd8 <strncmp+0xa8>
  40cfaa:	1c6c      	adds	r4, r5, #1
  40cfac:	440c      	add	r4, r1
  40cfae:	1c8b      	adds	r3, r1, #2
  40cfb0:	4601      	mov	r1, r0
  40cfb2:	e004      	b.n	40cfbe <strncmp+0x8e>
  40cfb4:	42a3      	cmp	r3, r4
  40cfb6:	d00c      	beq.n	40cfd2 <strncmp+0xa2>
  40cfb8:	3301      	adds	r3, #1
  40cfba:	2800      	cmp	r0, #0
  40cfbc:	d0ec      	beq.n	40cf98 <strncmp+0x68>
  40cfbe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40cfc2:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  40cfc6:	4290      	cmp	r0, r2
  40cfc8:	d0f4      	beq.n	40cfb4 <strncmp+0x84>
  40cfca:	e7e4      	b.n	40cf96 <strncmp+0x66>
  40cfcc:	4610      	mov	r0, r2
  40cfce:	bc30      	pop	{r4, r5}
  40cfd0:	4770      	bx	lr
  40cfd2:	2000      	movs	r0, #0
  40cfd4:	bc30      	pop	{r4, r5}
  40cfd6:	4770      	bx	lr
  40cfd8:	4618      	mov	r0, r3
  40cfda:	e7dd      	b.n	40cf98 <strncmp+0x68>
  40cfdc:	4618      	mov	r0, r3
  40cfde:	e7da      	b.n	40cf96 <strncmp+0x66>
  40cfe0:	4628      	mov	r0, r5
  40cfe2:	e7d9      	b.n	40cf98 <strncmp+0x68>

0040cfe4 <strncpy>:
  40cfe4:	ea40 0301 	orr.w	r3, r0, r1
  40cfe8:	079b      	lsls	r3, r3, #30
  40cfea:	b470      	push	{r4, r5, r6}
  40cfec:	d12a      	bne.n	40d044 <strncpy+0x60>
  40cfee:	2a03      	cmp	r2, #3
  40cff0:	d928      	bls.n	40d044 <strncpy+0x60>
  40cff2:	460c      	mov	r4, r1
  40cff4:	4603      	mov	r3, r0
  40cff6:	4621      	mov	r1, r4
  40cff8:	f854 5b04 	ldr.w	r5, [r4], #4
  40cffc:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
  40d000:	ea26 0605 	bic.w	r6, r6, r5
  40d004:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
  40d008:	d105      	bne.n	40d016 <strncpy+0x32>
  40d00a:	3a04      	subs	r2, #4
  40d00c:	2a03      	cmp	r2, #3
  40d00e:	f843 5b04 	str.w	r5, [r3], #4
  40d012:	4621      	mov	r1, r4
  40d014:	d8ef      	bhi.n	40cff6 <strncpy+0x12>
  40d016:	b19a      	cbz	r2, 40d040 <strncpy+0x5c>
  40d018:	780c      	ldrb	r4, [r1, #0]
  40d01a:	701c      	strb	r4, [r3, #0]
  40d01c:	3a01      	subs	r2, #1
  40d01e:	3301      	adds	r3, #1
  40d020:	b13c      	cbz	r4, 40d032 <strncpy+0x4e>
  40d022:	b16a      	cbz	r2, 40d040 <strncpy+0x5c>
  40d024:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  40d028:	f803 4b01 	strb.w	r4, [r3], #1
  40d02c:	3a01      	subs	r2, #1
  40d02e:	2c00      	cmp	r4, #0
  40d030:	d1f7      	bne.n	40d022 <strncpy+0x3e>
  40d032:	b12a      	cbz	r2, 40d040 <strncpy+0x5c>
  40d034:	441a      	add	r2, r3
  40d036:	2100      	movs	r1, #0
  40d038:	f803 1b01 	strb.w	r1, [r3], #1
  40d03c:	4293      	cmp	r3, r2
  40d03e:	d1fb      	bne.n	40d038 <strncpy+0x54>
  40d040:	bc70      	pop	{r4, r5, r6}
  40d042:	4770      	bx	lr
  40d044:	4603      	mov	r3, r0
  40d046:	e7e6      	b.n	40d016 <strncpy+0x32>

0040d048 <_svfprintf_r>:
  40d048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d04c:	b0c9      	sub	sp, #292	; 0x124
  40d04e:	4691      	mov	r9, r2
  40d050:	9310      	str	r3, [sp, #64]	; 0x40
  40d052:	910c      	str	r1, [sp, #48]	; 0x30
  40d054:	900d      	str	r0, [sp, #52]	; 0x34
  40d056:	f004 fd3f 	bl	411ad8 <_localeconv_r>
  40d05a:	6800      	ldr	r0, [r0, #0]
  40d05c:	9015      	str	r0, [sp, #84]	; 0x54
  40d05e:	f7ff ff37 	bl	40ced0 <strlen>
  40d062:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40d064:	9018      	str	r0, [sp, #96]	; 0x60
  40d066:	89a3      	ldrh	r3, [r4, #12]
  40d068:	061a      	lsls	r2, r3, #24
  40d06a:	d503      	bpl.n	40d074 <_svfprintf_r+0x2c>
  40d06c:	6923      	ldr	r3, [r4, #16]
  40d06e:	2b00      	cmp	r3, #0
  40d070:	f001 808d 	beq.w	40e18e <_svfprintf_r+0x1146>
  40d074:	ac38      	add	r4, sp, #224	; 0xe0
  40d076:	46a4      	mov	ip, r4
  40d078:	9408      	str	r4, [sp, #32]
  40d07a:	942b      	str	r4, [sp, #172]	; 0xac
  40d07c:	2500      	movs	r5, #0
  40d07e:	2400      	movs	r4, #0
  40d080:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40d084:	2300      	movs	r3, #0
  40d086:	9311      	str	r3, [sp, #68]	; 0x44
  40d088:	932d      	str	r3, [sp, #180]	; 0xb4
  40d08a:	932c      	str	r3, [sp, #176]	; 0xb0
  40d08c:	931a      	str	r3, [sp, #104]	; 0x68
  40d08e:	9319      	str	r3, [sp, #100]	; 0x64
  40d090:	930e      	str	r3, [sp, #56]	; 0x38
  40d092:	4666      	mov	r6, ip
  40d094:	f899 3000 	ldrb.w	r3, [r9]
  40d098:	2b00      	cmp	r3, #0
  40d09a:	f000 80f8 	beq.w	40d28e <_svfprintf_r+0x246>
  40d09e:	2b25      	cmp	r3, #37	; 0x25
  40d0a0:	f000 80f5 	beq.w	40d28e <_svfprintf_r+0x246>
  40d0a4:	f109 0201 	add.w	r2, r9, #1
  40d0a8:	e001      	b.n	40d0ae <_svfprintf_r+0x66>
  40d0aa:	2b25      	cmp	r3, #37	; 0x25
  40d0ac:	d004      	beq.n	40d0b8 <_svfprintf_r+0x70>
  40d0ae:	4614      	mov	r4, r2
  40d0b0:	3201      	adds	r2, #1
  40d0b2:	7823      	ldrb	r3, [r4, #0]
  40d0b4:	2b00      	cmp	r3, #0
  40d0b6:	d1f8      	bne.n	40d0aa <_svfprintf_r+0x62>
  40d0b8:	ebc9 0504 	rsb	r5, r9, r4
  40d0bc:	b17d      	cbz	r5, 40d0de <_svfprintf_r+0x96>
  40d0be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d0c0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40d0c2:	f8c6 9000 	str.w	r9, [r6]
  40d0c6:	3301      	adds	r3, #1
  40d0c8:	442a      	add	r2, r5
  40d0ca:	2b07      	cmp	r3, #7
  40d0cc:	6075      	str	r5, [r6, #4]
  40d0ce:	922d      	str	r2, [sp, #180]	; 0xb4
  40d0d0:	932c      	str	r3, [sp, #176]	; 0xb0
  40d0d2:	f300 80c2 	bgt.w	40d25a <_svfprintf_r+0x212>
  40d0d6:	3608      	adds	r6, #8
  40d0d8:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d0da:	4428      	add	r0, r5
  40d0dc:	900e      	str	r0, [sp, #56]	; 0x38
  40d0de:	7823      	ldrb	r3, [r4, #0]
  40d0e0:	2b00      	cmp	r3, #0
  40d0e2:	f000 80c2 	beq.w	40d26a <_svfprintf_r+0x222>
  40d0e6:	2300      	movs	r3, #0
  40d0e8:	f894 8001 	ldrb.w	r8, [r4, #1]
  40d0ec:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40d0f0:	461a      	mov	r2, r3
  40d0f2:	930f      	str	r3, [sp, #60]	; 0x3c
  40d0f4:	9309      	str	r3, [sp, #36]	; 0x24
  40d0f6:	f104 0901 	add.w	r9, r4, #1
  40d0fa:	f04f 34ff 	mov.w	r4, #4294967295
  40d0fe:	940a      	str	r4, [sp, #40]	; 0x28
  40d100:	f109 0901 	add.w	r9, r9, #1
  40d104:	f1a8 0320 	sub.w	r3, r8, #32
  40d108:	2b58      	cmp	r3, #88	; 0x58
  40d10a:	f200 83c7 	bhi.w	40d89c <_svfprintf_r+0x854>
  40d10e:	e8df f013 	tbh	[pc, r3, lsl #1]
  40d112:	026a      	.short	0x026a
  40d114:	03c503c5 	.word	0x03c503c5
  40d118:	03c50271 	.word	0x03c50271
  40d11c:	03c503c5 	.word	0x03c503c5
  40d120:	03c503c5 	.word	0x03c503c5
  40d124:	031403c5 	.word	0x031403c5
  40d128:	03c50364 	.word	0x03c50364
  40d12c:	00c0009d 	.word	0x00c0009d
  40d130:	027803c5 	.word	0x027803c5
  40d134:	027f027f 	.word	0x027f027f
  40d138:	027f027f 	.word	0x027f027f
  40d13c:	027f027f 	.word	0x027f027f
  40d140:	027f027f 	.word	0x027f027f
  40d144:	03c5027f 	.word	0x03c5027f
  40d148:	03c503c5 	.word	0x03c503c5
  40d14c:	03c503c5 	.word	0x03c503c5
  40d150:	03c503c5 	.word	0x03c503c5
  40d154:	03c503c5 	.word	0x03c503c5
  40d158:	029003c5 	.word	0x029003c5
  40d15c:	03c5036f 	.word	0x03c5036f
  40d160:	03c5036f 	.word	0x03c5036f
  40d164:	03c503c5 	.word	0x03c503c5
  40d168:	036803c5 	.word	0x036803c5
  40d16c:	03c503c5 	.word	0x03c503c5
  40d170:	03c50078 	.word	0x03c50078
  40d174:	03c503c5 	.word	0x03c503c5
  40d178:	03c503c5 	.word	0x03c503c5
  40d17c:	03c50059 	.word	0x03c50059
  40d180:	02af03c5 	.word	0x02af03c5
  40d184:	03c503c5 	.word	0x03c503c5
  40d188:	03c503c5 	.word	0x03c503c5
  40d18c:	03c503c5 	.word	0x03c503c5
  40d190:	03c503c5 	.word	0x03c503c5
  40d194:	03c503c5 	.word	0x03c503c5
  40d198:	03480337 	.word	0x03480337
  40d19c:	036f036f 	.word	0x036f036f
  40d1a0:	02ff036f 	.word	0x02ff036f
  40d1a4:	03c50348 	.word	0x03c50348
  40d1a8:	030803c5 	.word	0x030803c5
  40d1ac:	02c503c5 	.word	0x02c503c5
  40d1b0:	0321007c 	.word	0x0321007c
  40d1b4:	03c503a5 	.word	0x03c503a5
  40d1b8:	03c502d9 	.word	0x03c502d9
  40d1bc:	03c5005f 	.word	0x03c5005f
  40d1c0:	00de03c5 	.word	0x00de03c5
  40d1c4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d1c8:	f04c 0c10 	orr.w	ip, ip, #16
  40d1cc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40d1d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d1d2:	06a2      	lsls	r2, r4, #26
  40d1d4:	f100 8356 	bmi.w	40d884 <_svfprintf_r+0x83c>
  40d1d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d1da:	06e3      	lsls	r3, r4, #27
  40d1dc:	f100 85e0 	bmi.w	40dda0 <_svfprintf_r+0xd58>
  40d1e0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d1e4:	f01c 0f40 	tst.w	ip, #64	; 0x40
  40d1e8:	f000 85da 	beq.w	40dda0 <_svfprintf_r+0xd58>
  40d1ec:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40d1f0:	f8bc 4000 	ldrh.w	r4, [ip]
  40d1f4:	f10c 0c04 	add.w	ip, ip, #4
  40d1f8:	2500      	movs	r5, #0
  40d1fa:	2301      	movs	r3, #1
  40d1fc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d200:	e08c      	b.n	40d31c <_svfprintf_r+0x2d4>
  40d202:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d204:	f045 0510 	orr.w	r5, r5, #16
  40d208:	9509      	str	r5, [sp, #36]	; 0x24
  40d20a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d20e:	f01c 0320 	ands.w	r3, ip, #32
  40d212:	f040 832c 	bne.w	40d86e <_svfprintf_r+0x826>
  40d216:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d21a:	f01c 0210 	ands.w	r2, ip, #16
  40d21e:	f040 85b8 	bne.w	40dd92 <_svfprintf_r+0xd4a>
  40d222:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d226:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  40d22a:	f000 85b2 	beq.w	40dd92 <_svfprintf_r+0xd4a>
  40d22e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40d232:	f8bc 4000 	ldrh.w	r4, [ip]
  40d236:	f10c 0c04 	add.w	ip, ip, #4
  40d23a:	4613      	mov	r3, r2
  40d23c:	2500      	movs	r5, #0
  40d23e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d242:	e06b      	b.n	40d31c <_svfprintf_r+0x2d4>
  40d244:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40d246:	9310      	str	r3, [sp, #64]	; 0x40
  40d248:	4264      	negs	r4, r4
  40d24a:	940f      	str	r4, [sp, #60]	; 0x3c
  40d24c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d24e:	f045 0504 	orr.w	r5, r5, #4
  40d252:	9509      	str	r5, [sp, #36]	; 0x24
  40d254:	f899 8000 	ldrb.w	r8, [r9]
  40d258:	e752      	b.n	40d100 <_svfprintf_r+0xb8>
  40d25a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d25c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d25e:	aa2b      	add	r2, sp, #172	; 0xac
  40d260:	f007 f982 	bl	414568 <__ssprint_r>
  40d264:	b940      	cbnz	r0, 40d278 <_svfprintf_r+0x230>
  40d266:	ae38      	add	r6, sp, #224	; 0xe0
  40d268:	e736      	b.n	40d0d8 <_svfprintf_r+0x90>
  40d26a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40d26c:	b123      	cbz	r3, 40d278 <_svfprintf_r+0x230>
  40d26e:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d270:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d272:	aa2b      	add	r2, sp, #172	; 0xac
  40d274:	f007 f978 	bl	414568 <__ssprint_r>
  40d278:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40d27a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d27c:	89a3      	ldrh	r3, [r4, #12]
  40d27e:	f013 0f40 	tst.w	r3, #64	; 0x40
  40d282:	bf18      	it	ne
  40d284:	f04f 30ff 	movne.w	r0, #4294967295
  40d288:	b049      	add	sp, #292	; 0x124
  40d28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d28e:	464c      	mov	r4, r9
  40d290:	e725      	b.n	40d0de <_svfprintf_r+0x96>
  40d292:	f899 8000 	ldrb.w	r8, [r9]
  40d296:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  40d29a:	f109 0001 	add.w	r0, r9, #1
  40d29e:	f001 8118 	beq.w	40e4d2 <_svfprintf_r+0x148a>
  40d2a2:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40d2a6:	2b09      	cmp	r3, #9
  40d2a8:	bf98      	it	ls
  40d2aa:	2100      	movls	r1, #0
  40d2ac:	f201 8077 	bhi.w	40e39e <_svfprintf_r+0x1356>
  40d2b0:	f810 8b01 	ldrb.w	r8, [r0], #1
  40d2b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40d2b8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40d2bc:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40d2c0:	2b09      	cmp	r3, #9
  40d2c2:	d9f5      	bls.n	40d2b0 <_svfprintf_r+0x268>
  40d2c4:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  40d2c8:	910a      	str	r1, [sp, #40]	; 0x28
  40d2ca:	4681      	mov	r9, r0
  40d2cc:	e71a      	b.n	40d104 <_svfprintf_r+0xbc>
  40d2ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d2d0:	4ca1      	ldr	r4, [pc, #644]	; (40d558 <_svfprintf_r+0x510>)
  40d2d2:	941a      	str	r4, [sp, #104]	; 0x68
  40d2d4:	06af      	lsls	r7, r5, #26
  40d2d6:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d2da:	f140 81d1 	bpl.w	40d680 <_svfprintf_r+0x638>
  40d2de:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40d2e2:	f10c 0307 	add.w	r3, ip, #7
  40d2e6:	f023 0307 	bic.w	r3, r3, #7
  40d2ea:	f103 0408 	add.w	r4, r3, #8
  40d2ee:	9410      	str	r4, [sp, #64]	; 0x40
  40d2f0:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d2f4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d2f8:	f01c 0f01 	tst.w	ip, #1
  40d2fc:	f000 8464 	beq.w	40dbc8 <_svfprintf_r+0xb80>
  40d300:	ea54 0005 	orrs.w	r0, r4, r5
  40d304:	f000 8460 	beq.w	40dbc8 <_svfprintf_r+0xb80>
  40d308:	2330      	movs	r3, #48	; 0x30
  40d30a:	f04c 0c02 	orr.w	ip, ip, #2
  40d30e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40d312:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  40d316:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40d31a:	2302      	movs	r3, #2
  40d31c:	f04f 0a00 	mov.w	sl, #0
  40d320:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40d324:	990a      	ldr	r1, [sp, #40]	; 0x28
  40d326:	2900      	cmp	r1, #0
  40d328:	db05      	blt.n	40d336 <_svfprintf_r+0x2ee>
  40d32a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d32e:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40d332:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40d336:	ea54 0005 	orrs.w	r0, r4, r5
  40d33a:	f040 82c7 	bne.w	40d8cc <_svfprintf_r+0x884>
  40d33e:	990a      	ldr	r1, [sp, #40]	; 0x28
  40d340:	2900      	cmp	r1, #0
  40d342:	f040 82c3 	bne.w	40d8cc <_svfprintf_r+0x884>
  40d346:	2b00      	cmp	r3, #0
  40d348:	f040 843a 	bne.w	40dbc0 <_svfprintf_r+0xb78>
  40d34c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d350:	f01c 0f01 	tst.w	ip, #1
  40d354:	f000 8434 	beq.w	40dbc0 <_svfprintf_r+0xb78>
  40d358:	af48      	add	r7, sp, #288	; 0x120
  40d35a:	2330      	movs	r3, #48	; 0x30
  40d35c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40d360:	9d08      	ldr	r5, [sp, #32]
  40d362:	1bec      	subs	r4, r5, r7
  40d364:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40d368:	2500      	movs	r5, #0
  40d36a:	4564      	cmp	r4, ip
  40d36c:	bfa8      	it	ge
  40d36e:	46a4      	movge	ip, r4
  40d370:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40d374:	9514      	str	r5, [sp, #80]	; 0x50
  40d376:	f1ba 0f00 	cmp.w	sl, #0
  40d37a:	d002      	beq.n	40d382 <_svfprintf_r+0x33a>
  40d37c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40d37e:	3501      	adds	r5, #1
  40d380:	950b      	str	r5, [sp, #44]	; 0x2c
  40d382:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d384:	f013 0302 	ands.w	r3, r3, #2
  40d388:	9312      	str	r3, [sp, #72]	; 0x48
  40d38a:	d002      	beq.n	40d392 <_svfprintf_r+0x34a>
  40d38c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40d38e:	3502      	adds	r5, #2
  40d390:	950b      	str	r5, [sp, #44]	; 0x2c
  40d392:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d396:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  40d39a:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  40d39e:	f040 8292 	bne.w	40d8c6 <_svfprintf_r+0x87e>
  40d3a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40d3a4:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40d3a8:	ebcc 0b05 	rsb	fp, ip, r5
  40d3ac:	f1bb 0f00 	cmp.w	fp, #0
  40d3b0:	f340 8289 	ble.w	40d8c6 <_svfprintf_r+0x87e>
  40d3b4:	f1bb 0f10 	cmp.w	fp, #16
  40d3b8:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40d3ba:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40d3bc:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 40d560 <_svfprintf_r+0x518>
  40d3c0:	dd2c      	ble.n	40d41c <_svfprintf_r+0x3d4>
  40d3c2:	971b      	str	r7, [sp, #108]	; 0x6c
  40d3c4:	4630      	mov	r0, r6
  40d3c6:	4657      	mov	r7, sl
  40d3c8:	2510      	movs	r5, #16
  40d3ca:	46ca      	mov	sl, r9
  40d3cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40d3ce:	46a1      	mov	r9, r4
  40d3d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40d3d2:	e006      	b.n	40d3e2 <_svfprintf_r+0x39a>
  40d3d4:	f1ab 0b10 	sub.w	fp, fp, #16
  40d3d8:	f1bb 0f10 	cmp.w	fp, #16
  40d3dc:	f100 0008 	add.w	r0, r0, #8
  40d3e0:	dd17      	ble.n	40d412 <_svfprintf_r+0x3ca>
  40d3e2:	3201      	adds	r2, #1
  40d3e4:	3110      	adds	r1, #16
  40d3e6:	2a07      	cmp	r2, #7
  40d3e8:	912d      	str	r1, [sp, #180]	; 0xb4
  40d3ea:	922c      	str	r2, [sp, #176]	; 0xb0
  40d3ec:	6007      	str	r7, [r0, #0]
  40d3ee:	6045      	str	r5, [r0, #4]
  40d3f0:	ddf0      	ble.n	40d3d4 <_svfprintf_r+0x38c>
  40d3f2:	4620      	mov	r0, r4
  40d3f4:	4631      	mov	r1, r6
  40d3f6:	aa2b      	add	r2, sp, #172	; 0xac
  40d3f8:	f007 f8b6 	bl	414568 <__ssprint_r>
  40d3fc:	2800      	cmp	r0, #0
  40d3fe:	f47f af3b 	bne.w	40d278 <_svfprintf_r+0x230>
  40d402:	f1ab 0b10 	sub.w	fp, fp, #16
  40d406:	f1bb 0f10 	cmp.w	fp, #16
  40d40a:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40d40c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40d40e:	a838      	add	r0, sp, #224	; 0xe0
  40d410:	dce7      	bgt.n	40d3e2 <_svfprintf_r+0x39a>
  40d412:	464c      	mov	r4, r9
  40d414:	46d1      	mov	r9, sl
  40d416:	46ba      	mov	sl, r7
  40d418:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40d41a:	4606      	mov	r6, r0
  40d41c:	3201      	adds	r2, #1
  40d41e:	eb0b 0c01 	add.w	ip, fp, r1
  40d422:	2a07      	cmp	r2, #7
  40d424:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d428:	922c      	str	r2, [sp, #176]	; 0xb0
  40d42a:	e886 0c00 	stmia.w	r6, {sl, fp}
  40d42e:	f300 841c 	bgt.w	40dc6a <_svfprintf_r+0xc22>
  40d432:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40d436:	3608      	adds	r6, #8
  40d438:	f1ba 0f00 	cmp.w	sl, #0
  40d43c:	d00f      	beq.n	40d45e <_svfprintf_r+0x416>
  40d43e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d440:	3301      	adds	r3, #1
  40d442:	f10c 0c01 	add.w	ip, ip, #1
  40d446:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  40d44a:	2201      	movs	r2, #1
  40d44c:	2b07      	cmp	r3, #7
  40d44e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d452:	932c      	str	r3, [sp, #176]	; 0xb0
  40d454:	e886 0006 	stmia.w	r6, {r1, r2}
  40d458:	f300 839a 	bgt.w	40db90 <_svfprintf_r+0xb48>
  40d45c:	3608      	adds	r6, #8
  40d45e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d460:	b173      	cbz	r3, 40d480 <_svfprintf_r+0x438>
  40d462:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d464:	3301      	adds	r3, #1
  40d466:	f10c 0c02 	add.w	ip, ip, #2
  40d46a:	a924      	add	r1, sp, #144	; 0x90
  40d46c:	2202      	movs	r2, #2
  40d46e:	2b07      	cmp	r3, #7
  40d470:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d474:	932c      	str	r3, [sp, #176]	; 0xb0
  40d476:	e886 0006 	stmia.w	r6, {r1, r2}
  40d47a:	f300 8395 	bgt.w	40dba8 <_svfprintf_r+0xb60>
  40d47e:	3608      	adds	r6, #8
  40d480:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  40d482:	2d80      	cmp	r5, #128	; 0x80
  40d484:	f000 82cc 	beq.w	40da20 <_svfprintf_r+0x9d8>
  40d488:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40d48a:	ebc4 0a05 	rsb	sl, r4, r5
  40d48e:	f1ba 0f00 	cmp.w	sl, #0
  40d492:	dd3b      	ble.n	40d50c <_svfprintf_r+0x4c4>
  40d494:	f1ba 0f10 	cmp.w	sl, #16
  40d498:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d49a:	4d30      	ldr	r5, [pc, #192]	; (40d55c <_svfprintf_r+0x514>)
  40d49c:	dd2b      	ble.n	40d4f6 <_svfprintf_r+0x4ae>
  40d49e:	940a      	str	r4, [sp, #40]	; 0x28
  40d4a0:	4632      	mov	r2, r6
  40d4a2:	f04f 0b10 	mov.w	fp, #16
  40d4a6:	462e      	mov	r6, r5
  40d4a8:	4661      	mov	r1, ip
  40d4aa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40d4ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40d4ae:	e006      	b.n	40d4be <_svfprintf_r+0x476>
  40d4b0:	f1aa 0a10 	sub.w	sl, sl, #16
  40d4b4:	f1ba 0f10 	cmp.w	sl, #16
  40d4b8:	f102 0208 	add.w	r2, r2, #8
  40d4bc:	dd17      	ble.n	40d4ee <_svfprintf_r+0x4a6>
  40d4be:	3301      	adds	r3, #1
  40d4c0:	3110      	adds	r1, #16
  40d4c2:	2b07      	cmp	r3, #7
  40d4c4:	912d      	str	r1, [sp, #180]	; 0xb4
  40d4c6:	932c      	str	r3, [sp, #176]	; 0xb0
  40d4c8:	e882 0840 	stmia.w	r2, {r6, fp}
  40d4cc:	ddf0      	ble.n	40d4b0 <_svfprintf_r+0x468>
  40d4ce:	4620      	mov	r0, r4
  40d4d0:	4629      	mov	r1, r5
  40d4d2:	aa2b      	add	r2, sp, #172	; 0xac
  40d4d4:	f007 f848 	bl	414568 <__ssprint_r>
  40d4d8:	2800      	cmp	r0, #0
  40d4da:	f47f aecd 	bne.w	40d278 <_svfprintf_r+0x230>
  40d4de:	f1aa 0a10 	sub.w	sl, sl, #16
  40d4e2:	f1ba 0f10 	cmp.w	sl, #16
  40d4e6:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40d4e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d4ea:	aa38      	add	r2, sp, #224	; 0xe0
  40d4ec:	dce7      	bgt.n	40d4be <_svfprintf_r+0x476>
  40d4ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40d4f0:	4635      	mov	r5, r6
  40d4f2:	468c      	mov	ip, r1
  40d4f4:	4616      	mov	r6, r2
  40d4f6:	3301      	adds	r3, #1
  40d4f8:	44d4      	add	ip, sl
  40d4fa:	2b07      	cmp	r3, #7
  40d4fc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d500:	932c      	str	r3, [sp, #176]	; 0xb0
  40d502:	e886 0420 	stmia.w	r6, {r5, sl}
  40d506:	f300 8337 	bgt.w	40db78 <_svfprintf_r+0xb30>
  40d50a:	3608      	adds	r6, #8
  40d50c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d50e:	05ed      	lsls	r5, r5, #23
  40d510:	f100 8226 	bmi.w	40d960 <_svfprintf_r+0x918>
  40d514:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d516:	6037      	str	r7, [r6, #0]
  40d518:	3301      	adds	r3, #1
  40d51a:	44a4      	add	ip, r4
  40d51c:	2b07      	cmp	r3, #7
  40d51e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d522:	6074      	str	r4, [r6, #4]
  40d524:	932c      	str	r3, [sp, #176]	; 0xb0
  40d526:	f300 8311 	bgt.w	40db4c <_svfprintf_r+0xb04>
  40d52a:	3608      	adds	r6, #8
  40d52c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d52e:	0763      	lsls	r3, r4, #29
  40d530:	d549      	bpl.n	40d5c6 <_svfprintf_r+0x57e>
  40d532:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40d534:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d536:	1a2c      	subs	r4, r5, r0
  40d538:	2c00      	cmp	r4, #0
  40d53a:	dd44      	ble.n	40d5c6 <_svfprintf_r+0x57e>
  40d53c:	2c10      	cmp	r4, #16
  40d53e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d540:	f8df a01c 	ldr.w	sl, [pc, #28]	; 40d560 <_svfprintf_r+0x518>
  40d544:	dd2b      	ble.n	40d59e <_svfprintf_r+0x556>
  40d546:	4657      	mov	r7, sl
  40d548:	2510      	movs	r5, #16
  40d54a:	4662      	mov	r2, ip
  40d54c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  40d550:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  40d554:	e00b      	b.n	40d56e <_svfprintf_r+0x526>
  40d556:	bf00      	nop
  40d558:	004161a8 	.word	0x004161a8
  40d55c:	00416174 	.word	0x00416174
  40d560:	004161c8 	.word	0x004161c8
  40d564:	3c10      	subs	r4, #16
  40d566:	2c10      	cmp	r4, #16
  40d568:	f106 0608 	add.w	r6, r6, #8
  40d56c:	dd15      	ble.n	40d59a <_svfprintf_r+0x552>
  40d56e:	3301      	adds	r3, #1
  40d570:	3210      	adds	r2, #16
  40d572:	2b07      	cmp	r3, #7
  40d574:	922d      	str	r2, [sp, #180]	; 0xb4
  40d576:	932c      	str	r3, [sp, #176]	; 0xb0
  40d578:	6037      	str	r7, [r6, #0]
  40d57a:	6075      	str	r5, [r6, #4]
  40d57c:	ddf2      	ble.n	40d564 <_svfprintf_r+0x51c>
  40d57e:	4650      	mov	r0, sl
  40d580:	4641      	mov	r1, r8
  40d582:	aa2b      	add	r2, sp, #172	; 0xac
  40d584:	f006 fff0 	bl	414568 <__ssprint_r>
  40d588:	2800      	cmp	r0, #0
  40d58a:	f47f ae75 	bne.w	40d278 <_svfprintf_r+0x230>
  40d58e:	3c10      	subs	r4, #16
  40d590:	2c10      	cmp	r4, #16
  40d592:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40d594:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d596:	ae38      	add	r6, sp, #224	; 0xe0
  40d598:	dce9      	bgt.n	40d56e <_svfprintf_r+0x526>
  40d59a:	4694      	mov	ip, r2
  40d59c:	46ba      	mov	sl, r7
  40d59e:	3301      	adds	r3, #1
  40d5a0:	44a4      	add	ip, r4
  40d5a2:	2b07      	cmp	r3, #7
  40d5a4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d5a8:	932c      	str	r3, [sp, #176]	; 0xb0
  40d5aa:	f8c6 a000 	str.w	sl, [r6]
  40d5ae:	6074      	str	r4, [r6, #4]
  40d5b0:	dd09      	ble.n	40d5c6 <_svfprintf_r+0x57e>
  40d5b2:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d5b4:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d5b6:	aa2b      	add	r2, sp, #172	; 0xac
  40d5b8:	f006 ffd6 	bl	414568 <__ssprint_r>
  40d5bc:	2800      	cmp	r0, #0
  40d5be:	f47f ae5b 	bne.w	40d278 <_svfprintf_r+0x230>
  40d5c2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40d5c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40d5c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d5ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40d5cc:	42a8      	cmp	r0, r5
  40d5ce:	bfac      	ite	ge
  40d5d0:	1824      	addge	r4, r4, r0
  40d5d2:	1964      	addlt	r4, r4, r5
  40d5d4:	940e      	str	r4, [sp, #56]	; 0x38
  40d5d6:	f1bc 0f00 	cmp.w	ip, #0
  40d5da:	f040 82c3 	bne.w	40db64 <_svfprintf_r+0xb1c>
  40d5de:	2300      	movs	r3, #0
  40d5e0:	932c      	str	r3, [sp, #176]	; 0xb0
  40d5e2:	ae38      	add	r6, sp, #224	; 0xe0
  40d5e4:	e556      	b.n	40d094 <_svfprintf_r+0x4c>
  40d5e6:	f899 8000 	ldrb.w	r8, [r9]
  40d5ea:	2a00      	cmp	r2, #0
  40d5ec:	f47f ad88 	bne.w	40d100 <_svfprintf_r+0xb8>
  40d5f0:	2220      	movs	r2, #32
  40d5f2:	e585      	b.n	40d100 <_svfprintf_r+0xb8>
  40d5f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d5f6:	f045 0501 	orr.w	r5, r5, #1
  40d5fa:	9509      	str	r5, [sp, #36]	; 0x24
  40d5fc:	f899 8000 	ldrb.w	r8, [r9]
  40d600:	e57e      	b.n	40d100 <_svfprintf_r+0xb8>
  40d602:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d604:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  40d608:	9509      	str	r5, [sp, #36]	; 0x24
  40d60a:	f899 8000 	ldrb.w	r8, [r9]
  40d60e:	e577      	b.n	40d100 <_svfprintf_r+0xb8>
  40d610:	2400      	movs	r4, #0
  40d612:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40d616:	940f      	str	r4, [sp, #60]	; 0x3c
  40d618:	4621      	mov	r1, r4
  40d61a:	f819 8b01 	ldrb.w	r8, [r9], #1
  40d61e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40d622:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40d626:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40d62a:	2b09      	cmp	r3, #9
  40d62c:	d9f5      	bls.n	40d61a <_svfprintf_r+0x5d2>
  40d62e:	910f      	str	r1, [sp, #60]	; 0x3c
  40d630:	e568      	b.n	40d104 <_svfprintf_r+0xbc>
  40d632:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d636:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d63a:	f04c 0c10 	orr.w	ip, ip, #16
  40d63e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40d642:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d644:	06a3      	lsls	r3, r4, #26
  40d646:	f140 80b2 	bpl.w	40d7ae <_svfprintf_r+0x766>
  40d64a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d64c:	1de9      	adds	r1, r5, #7
  40d64e:	f021 0107 	bic.w	r1, r1, #7
  40d652:	e9d1 2300 	ldrd	r2, r3, [r1]
  40d656:	3108      	adds	r1, #8
  40d658:	9110      	str	r1, [sp, #64]	; 0x40
  40d65a:	4614      	mov	r4, r2
  40d65c:	461d      	mov	r5, r3
  40d65e:	2a00      	cmp	r2, #0
  40d660:	f173 0000 	sbcs.w	r0, r3, #0
  40d664:	f2c0 838b 	blt.w	40dd7e <_svfprintf_r+0xd36>
  40d668:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40d66c:	2301      	movs	r3, #1
  40d66e:	e659      	b.n	40d324 <_svfprintf_r+0x2dc>
  40d670:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d672:	4cb7      	ldr	r4, [pc, #732]	; (40d950 <_svfprintf_r+0x908>)
  40d674:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d678:	06af      	lsls	r7, r5, #26
  40d67a:	941a      	str	r4, [sp, #104]	; 0x68
  40d67c:	f53f ae2f 	bmi.w	40d2de <_svfprintf_r+0x296>
  40d680:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d682:	06ed      	lsls	r5, r5, #27
  40d684:	f140 845d 	bpl.w	40df42 <_svfprintf_r+0xefa>
  40d688:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40d68c:	f8dc 4000 	ldr.w	r4, [ip]
  40d690:	f10c 0c04 	add.w	ip, ip, #4
  40d694:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d698:	2500      	movs	r5, #0
  40d69a:	e62b      	b.n	40d2f4 <_svfprintf_r+0x2ac>
  40d69c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d6a0:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d6a4:	f01c 0f20 	tst.w	ip, #32
  40d6a8:	f000 843d 	beq.w	40df26 <_svfprintf_r+0xede>
  40d6ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40d6ae:	6821      	ldr	r1, [r4, #0]
  40d6b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40d6b2:	17e5      	asrs	r5, r4, #31
  40d6b4:	462b      	mov	r3, r5
  40d6b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d6b8:	4622      	mov	r2, r4
  40d6ba:	3504      	adds	r5, #4
  40d6bc:	9510      	str	r5, [sp, #64]	; 0x40
  40d6be:	e9c1 2300 	strd	r2, r3, [r1]
  40d6c2:	e4e7      	b.n	40d094 <_svfprintf_r+0x4c>
  40d6c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40d6c6:	6827      	ldr	r7, [r4, #0]
  40d6c8:	f04f 0a00 	mov.w	sl, #0
  40d6cc:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40d6d0:	1d25      	adds	r5, r4, #4
  40d6d2:	2f00      	cmp	r7, #0
  40d6d4:	f000 85f5 	beq.w	40e2c2 <_svfprintf_r+0x127a>
  40d6d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40d6da:	2c00      	cmp	r4, #0
  40d6dc:	4638      	mov	r0, r7
  40d6de:	f2c0 85a7 	blt.w	40e230 <_svfprintf_r+0x11e8>
  40d6e2:	4651      	mov	r1, sl
  40d6e4:	4622      	mov	r2, r4
  40d6e6:	f004 fd67 	bl	4121b8 <memchr>
  40d6ea:	2800      	cmp	r0, #0
  40d6ec:	f000 861f 	beq.w	40e32e <_svfprintf_r+0x12e6>
  40d6f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40d6f2:	9510      	str	r5, [sp, #64]	; 0x40
  40d6f4:	1bc0      	subs	r0, r0, r7
  40d6f6:	42a0      	cmp	r0, r4
  40d6f8:	bfb8      	it	lt
  40d6fa:	4604      	movlt	r4, r0
  40d6fc:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  40d700:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40d704:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  40d708:	950b      	str	r5, [sp, #44]	; 0x2c
  40d70a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40d70e:	e632      	b.n	40d376 <_svfprintf_r+0x32e>
  40d710:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d714:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  40d718:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40d71c:	f899 8000 	ldrb.w	r8, [r9]
  40d720:	e4ee      	b.n	40d100 <_svfprintf_r+0xb8>
  40d722:	f899 8000 	ldrb.w	r8, [r9]
  40d726:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  40d72a:	464b      	mov	r3, r9
  40d72c:	f000 848b 	beq.w	40e046 <_svfprintf_r+0xffe>
  40d730:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d732:	f045 0510 	orr.w	r5, r5, #16
  40d736:	9509      	str	r5, [sp, #36]	; 0x24
  40d738:	e4e2      	b.n	40d100 <_svfprintf_r+0xb8>
  40d73a:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40d73c:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d73e:	6824      	ldr	r4, [r4, #0]
  40d740:	940f      	str	r4, [sp, #60]	; 0x3c
  40d742:	2c00      	cmp	r4, #0
  40d744:	f105 0304 	add.w	r3, r5, #4
  40d748:	f6ff ad7c 	blt.w	40d244 <_svfprintf_r+0x1fc>
  40d74c:	9310      	str	r3, [sp, #64]	; 0x40
  40d74e:	f899 8000 	ldrb.w	r8, [r9]
  40d752:	e4d5      	b.n	40d100 <_svfprintf_r+0xb8>
  40d754:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40d756:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d75a:	487e      	ldr	r0, [pc, #504]	; (40d954 <_svfprintf_r+0x90c>)
  40d75c:	6814      	ldr	r4, [r2, #0]
  40d75e:	901a      	str	r0, [sp, #104]	; 0x68
  40d760:	2330      	movs	r3, #48	; 0x30
  40d762:	1d15      	adds	r5, r2, #4
  40d764:	f04f 0878 	mov.w	r8, #120	; 0x78
  40d768:	f04c 0c02 	orr.w	ip, ip, #2
  40d76c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40d770:	9510      	str	r5, [sp, #64]	; 0x40
  40d772:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40d776:	2500      	movs	r5, #0
  40d778:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  40d77c:	2302      	movs	r3, #2
  40d77e:	e5cd      	b.n	40d31c <_svfprintf_r+0x2d4>
  40d780:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40d782:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d784:	6812      	ldr	r2, [r2, #0]
  40d786:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  40d78a:	2300      	movs	r3, #0
  40d78c:	2401      	movs	r4, #1
  40d78e:	3504      	adds	r5, #4
  40d790:	469a      	mov	sl, r3
  40d792:	940b      	str	r4, [sp, #44]	; 0x2c
  40d794:	9510      	str	r5, [sp, #64]	; 0x40
  40d796:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40d79a:	930a      	str	r3, [sp, #40]	; 0x28
  40d79c:	9314      	str	r3, [sp, #80]	; 0x50
  40d79e:	af2e      	add	r7, sp, #184	; 0xb8
  40d7a0:	e5ef      	b.n	40d382 <_svfprintf_r+0x33a>
  40d7a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d7a4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d7a8:	06a3      	lsls	r3, r4, #26
  40d7aa:	f53f af4e 	bmi.w	40d64a <_svfprintf_r+0x602>
  40d7ae:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d7b2:	f01c 0f10 	tst.w	ip, #16
  40d7b6:	f040 82d2 	bne.w	40dd5e <_svfprintf_r+0xd16>
  40d7ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d7bc:	0667      	lsls	r7, r4, #25
  40d7be:	f140 82ce 	bpl.w	40dd5e <_svfprintf_r+0xd16>
  40d7c2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40d7c6:	f9bc 4000 	ldrsh.w	r4, [ip]
  40d7ca:	f10c 0c04 	add.w	ip, ip, #4
  40d7ce:	17e5      	asrs	r5, r4, #31
  40d7d0:	4622      	mov	r2, r4
  40d7d2:	462b      	mov	r3, r5
  40d7d4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d7d8:	e741      	b.n	40d65e <_svfprintf_r+0x616>
  40d7da:	f899 8000 	ldrb.w	r8, [r9]
  40d7de:	222b      	movs	r2, #43	; 0x2b
  40d7e0:	e48e      	b.n	40d100 <_svfprintf_r+0xb8>
  40d7e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d7e4:	f045 0508 	orr.w	r5, r5, #8
  40d7e8:	9509      	str	r5, [sp, #36]	; 0x24
  40d7ea:	f899 8000 	ldrb.w	r8, [r9]
  40d7ee:	e487      	b.n	40d100 <_svfprintf_r+0xb8>
  40d7f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d7f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d7f4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d7f8:	1deb      	adds	r3, r5, #7
  40d7fa:	0725      	lsls	r5, r4, #28
  40d7fc:	f023 0307 	bic.w	r3, r3, #7
  40d800:	f140 838a 	bpl.w	40df18 <_svfprintf_r+0xed0>
  40d804:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d808:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40d80c:	f103 0c08 	add.w	ip, r3, #8
  40d810:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d814:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40d818:	f005 fbc0 	bl	412f9c <__fpclassifyd>
  40d81c:	2801      	cmp	r0, #1
  40d81e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40d822:	f040 835f 	bne.w	40dee4 <_svfprintf_r+0xe9c>
  40d826:	2200      	movs	r2, #0
  40d828:	2300      	movs	r3, #0
  40d82a:	f008 f94f 	bl	415acc <__aeabi_dcmplt>
  40d82e:	2800      	cmp	r0, #0
  40d830:	f040 856d 	bne.w	40e30e <_svfprintf_r+0x12c6>
  40d834:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40d838:	2503      	movs	r5, #3
  40d83a:	950b      	str	r5, [sp, #44]	; 0x2c
  40d83c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d83e:	4f46      	ldr	r7, [pc, #280]	; (40d958 <_svfprintf_r+0x910>)
  40d840:	4b46      	ldr	r3, [pc, #280]	; (40d95c <_svfprintf_r+0x914>)
  40d842:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  40d846:	2400      	movs	r4, #0
  40d848:	9509      	str	r5, [sp, #36]	; 0x24
  40d84a:	2500      	movs	r5, #0
  40d84c:	940a      	str	r4, [sp, #40]	; 0x28
  40d84e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40d852:	bfd8      	it	le
  40d854:	461f      	movle	r7, r3
  40d856:	2403      	movs	r4, #3
  40d858:	9514      	str	r5, [sp, #80]	; 0x50
  40d85a:	e58c      	b.n	40d376 <_svfprintf_r+0x32e>
  40d85c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40d860:	f04c 0c20 	orr.w	ip, ip, #32
  40d864:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40d868:	f899 8000 	ldrb.w	r8, [r9]
  40d86c:	e448      	b.n	40d100 <_svfprintf_r+0xb8>
  40d86e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40d870:	1de3      	adds	r3, r4, #7
  40d872:	f023 0307 	bic.w	r3, r3, #7
  40d876:	f103 0508 	add.w	r5, r3, #8
  40d87a:	9510      	str	r5, [sp, #64]	; 0x40
  40d87c:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d880:	2300      	movs	r3, #0
  40d882:	e54b      	b.n	40d31c <_svfprintf_r+0x2d4>
  40d884:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40d886:	1deb      	adds	r3, r5, #7
  40d888:	f023 0307 	bic.w	r3, r3, #7
  40d88c:	f103 0c08 	add.w	ip, r3, #8
  40d890:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d894:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d898:	2301      	movs	r3, #1
  40d89a:	e53f      	b.n	40d31c <_svfprintf_r+0x2d4>
  40d89c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40d8a0:	f1b8 0f00 	cmp.w	r8, #0
  40d8a4:	f43f ace1 	beq.w	40d26a <_svfprintf_r+0x222>
  40d8a8:	2300      	movs	r3, #0
  40d8aa:	f04f 0c01 	mov.w	ip, #1
  40d8ae:	469a      	mov	sl, r3
  40d8b0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40d8b4:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  40d8b8:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40d8bc:	930a      	str	r3, [sp, #40]	; 0x28
  40d8be:	9314      	str	r3, [sp, #80]	; 0x50
  40d8c0:	4664      	mov	r4, ip
  40d8c2:	af2e      	add	r7, sp, #184	; 0xb8
  40d8c4:	e55d      	b.n	40d382 <_svfprintf_r+0x33a>
  40d8c6:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40d8ca:	e5b5      	b.n	40d438 <_svfprintf_r+0x3f0>
  40d8cc:	2b01      	cmp	r3, #1
  40d8ce:	f000 80ec 	beq.w	40daaa <_svfprintf_r+0xa62>
  40d8d2:	2b02      	cmp	r3, #2
  40d8d4:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  40d8d8:	d118      	bne.n	40d90c <_svfprintf_r+0x8c4>
  40d8da:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  40d8de:	4619      	mov	r1, r3
  40d8e0:	f004 000f 	and.w	r0, r4, #15
  40d8e4:	0922      	lsrs	r2, r4, #4
  40d8e6:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  40d8ea:	460f      	mov	r7, r1
  40d8ec:	092b      	lsrs	r3, r5, #4
  40d8ee:	f81c 1000 	ldrb.w	r1, [ip, r0]
  40d8f2:	7039      	strb	r1, [r7, #0]
  40d8f4:	ea52 0003 	orrs.w	r0, r2, r3
  40d8f8:	4614      	mov	r4, r2
  40d8fa:	461d      	mov	r5, r3
  40d8fc:	f107 31ff 	add.w	r1, r7, #4294967295
  40d900:	d1ee      	bne.n	40d8e0 <_svfprintf_r+0x898>
  40d902:	9d08      	ldr	r5, [sp, #32]
  40d904:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  40d908:	1bec      	subs	r4, r5, r7
  40d90a:	e52b      	b.n	40d364 <_svfprintf_r+0x31c>
  40d90c:	08e0      	lsrs	r0, r4, #3
  40d90e:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  40d912:	f004 0207 	and.w	r2, r4, #7
  40d916:	08e9      	lsrs	r1, r5, #3
  40d918:	3230      	adds	r2, #48	; 0x30
  40d91a:	ea50 0c01 	orrs.w	ip, r0, r1
  40d91e:	461f      	mov	r7, r3
  40d920:	701a      	strb	r2, [r3, #0]
  40d922:	4604      	mov	r4, r0
  40d924:	460d      	mov	r5, r1
  40d926:	f103 33ff 	add.w	r3, r3, #4294967295
  40d92a:	d1ef      	bne.n	40d90c <_svfprintf_r+0x8c4>
  40d92c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d92e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  40d932:	07e0      	lsls	r0, r4, #31
  40d934:	4639      	mov	r1, r7
  40d936:	f140 80c1 	bpl.w	40dabc <_svfprintf_r+0xa74>
  40d93a:	2a30      	cmp	r2, #48	; 0x30
  40d93c:	f000 80be 	beq.w	40dabc <_svfprintf_r+0xa74>
  40d940:	9d08      	ldr	r5, [sp, #32]
  40d942:	461f      	mov	r7, r3
  40d944:	2330      	movs	r3, #48	; 0x30
  40d946:	1bec      	subs	r4, r5, r7
  40d948:	f801 3c01 	strb.w	r3, [r1, #-1]
  40d94c:	e50a      	b.n	40d364 <_svfprintf_r+0x31c>
  40d94e:	bf00      	nop
  40d950:	00416194 	.word	0x00416194
  40d954:	004161a8 	.word	0x004161a8
  40d958:	00416188 	.word	0x00416188
  40d95c:	00416184 	.word	0x00416184
  40d960:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40d964:	f340 80ad 	ble.w	40dac2 <_svfprintf_r+0xa7a>
  40d968:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40d96c:	2200      	movs	r2, #0
  40d96e:	2300      	movs	r3, #0
  40d970:	f8cd c01c 	str.w	ip, [sp, #28]
  40d974:	f008 f8a0 	bl	415ab8 <__aeabi_dcmpeq>
  40d978:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40d97c:	2800      	cmp	r0, #0
  40d97e:	f000 8126 	beq.w	40dbce <_svfprintf_r+0xb86>
  40d982:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d984:	4aaa      	ldr	r2, [pc, #680]	; (40dc30 <_svfprintf_r+0xbe8>)
  40d986:	6032      	str	r2, [r6, #0]
  40d988:	3301      	adds	r3, #1
  40d98a:	f10c 0c01 	add.w	ip, ip, #1
  40d98e:	2201      	movs	r2, #1
  40d990:	2b07      	cmp	r3, #7
  40d992:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d996:	932c      	str	r3, [sp, #176]	; 0xb0
  40d998:	6072      	str	r2, [r6, #4]
  40d99a:	f300 82f7 	bgt.w	40df8c <_svfprintf_r+0xf44>
  40d99e:	3608      	adds	r6, #8
  40d9a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40d9a2:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40d9a4:	42a3      	cmp	r3, r4
  40d9a6:	db03      	blt.n	40d9b0 <_svfprintf_r+0x968>
  40d9a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d9aa:	07ec      	lsls	r4, r5, #31
  40d9ac:	f57f adbe 	bpl.w	40d52c <_svfprintf_r+0x4e4>
  40d9b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d9b2:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40d9b4:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40d9b6:	6034      	str	r4, [r6, #0]
  40d9b8:	3301      	adds	r3, #1
  40d9ba:	44ac      	add	ip, r5
  40d9bc:	2b07      	cmp	r3, #7
  40d9be:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40d9c2:	6075      	str	r5, [r6, #4]
  40d9c4:	932c      	str	r3, [sp, #176]	; 0xb0
  40d9c6:	f300 8348 	bgt.w	40e05a <_svfprintf_r+0x1012>
  40d9ca:	3608      	adds	r6, #8
  40d9cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40d9ce:	1e6c      	subs	r4, r5, #1
  40d9d0:	2c00      	cmp	r4, #0
  40d9d2:	f77f adab 	ble.w	40d52c <_svfprintf_r+0x4e4>
  40d9d6:	2c10      	cmp	r4, #16
  40d9d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40d9da:	4d96      	ldr	r5, [pc, #600]	; (40dc34 <_svfprintf_r+0xbec>)
  40d9dc:	f340 8197 	ble.w	40dd0e <_svfprintf_r+0xcc6>
  40d9e0:	2710      	movs	r7, #16
  40d9e2:	4662      	mov	r2, ip
  40d9e4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40d9e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40d9ec:	e004      	b.n	40d9f8 <_svfprintf_r+0x9b0>
  40d9ee:	3608      	adds	r6, #8
  40d9f0:	3c10      	subs	r4, #16
  40d9f2:	2c10      	cmp	r4, #16
  40d9f4:	f340 818a 	ble.w	40dd0c <_svfprintf_r+0xcc4>
  40d9f8:	3301      	adds	r3, #1
  40d9fa:	3210      	adds	r2, #16
  40d9fc:	2b07      	cmp	r3, #7
  40d9fe:	922d      	str	r2, [sp, #180]	; 0xb4
  40da00:	932c      	str	r3, [sp, #176]	; 0xb0
  40da02:	e886 00a0 	stmia.w	r6, {r5, r7}
  40da06:	ddf2      	ble.n	40d9ee <_svfprintf_r+0x9a6>
  40da08:	4640      	mov	r0, r8
  40da0a:	4651      	mov	r1, sl
  40da0c:	aa2b      	add	r2, sp, #172	; 0xac
  40da0e:	f006 fdab 	bl	414568 <__ssprint_r>
  40da12:	2800      	cmp	r0, #0
  40da14:	f47f ac30 	bne.w	40d278 <_svfprintf_r+0x230>
  40da18:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40da1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40da1c:	ae38      	add	r6, sp, #224	; 0xe0
  40da1e:	e7e7      	b.n	40d9f0 <_svfprintf_r+0x9a8>
  40da20:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40da22:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40da24:	ebc0 0a05 	rsb	sl, r0, r5
  40da28:	f1ba 0f00 	cmp.w	sl, #0
  40da2c:	f77f ad2c 	ble.w	40d488 <_svfprintf_r+0x440>
  40da30:	f1ba 0f10 	cmp.w	sl, #16
  40da34:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40da36:	4d7f      	ldr	r5, [pc, #508]	; (40dc34 <_svfprintf_r+0xbec>)
  40da38:	dd2b      	ble.n	40da92 <_svfprintf_r+0xa4a>
  40da3a:	9412      	str	r4, [sp, #72]	; 0x48
  40da3c:	4632      	mov	r2, r6
  40da3e:	f04f 0b10 	mov.w	fp, #16
  40da42:	462e      	mov	r6, r5
  40da44:	4661      	mov	r1, ip
  40da46:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40da48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40da4a:	e006      	b.n	40da5a <_svfprintf_r+0xa12>
  40da4c:	f1aa 0a10 	sub.w	sl, sl, #16
  40da50:	f1ba 0f10 	cmp.w	sl, #16
  40da54:	f102 0208 	add.w	r2, r2, #8
  40da58:	dd17      	ble.n	40da8a <_svfprintf_r+0xa42>
  40da5a:	3301      	adds	r3, #1
  40da5c:	3110      	adds	r1, #16
  40da5e:	2b07      	cmp	r3, #7
  40da60:	912d      	str	r1, [sp, #180]	; 0xb4
  40da62:	932c      	str	r3, [sp, #176]	; 0xb0
  40da64:	e882 0840 	stmia.w	r2, {r6, fp}
  40da68:	ddf0      	ble.n	40da4c <_svfprintf_r+0xa04>
  40da6a:	4620      	mov	r0, r4
  40da6c:	4629      	mov	r1, r5
  40da6e:	aa2b      	add	r2, sp, #172	; 0xac
  40da70:	f006 fd7a 	bl	414568 <__ssprint_r>
  40da74:	2800      	cmp	r0, #0
  40da76:	f47f abff 	bne.w	40d278 <_svfprintf_r+0x230>
  40da7a:	f1aa 0a10 	sub.w	sl, sl, #16
  40da7e:	f1ba 0f10 	cmp.w	sl, #16
  40da82:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40da84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40da86:	aa38      	add	r2, sp, #224	; 0xe0
  40da88:	dce7      	bgt.n	40da5a <_svfprintf_r+0xa12>
  40da8a:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40da8c:	4635      	mov	r5, r6
  40da8e:	468c      	mov	ip, r1
  40da90:	4616      	mov	r6, r2
  40da92:	3301      	adds	r3, #1
  40da94:	44d4      	add	ip, sl
  40da96:	2b07      	cmp	r3, #7
  40da98:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40da9c:	932c      	str	r3, [sp, #176]	; 0xb0
  40da9e:	e886 0420 	stmia.w	r6, {r5, sl}
  40daa2:	f300 8212 	bgt.w	40deca <_svfprintf_r+0xe82>
  40daa6:	3608      	adds	r6, #8
  40daa8:	e4ee      	b.n	40d488 <_svfprintf_r+0x440>
  40daaa:	2d00      	cmp	r5, #0
  40daac:	bf08      	it	eq
  40daae:	2c0a      	cmpeq	r4, #10
  40dab0:	f080 8138 	bcs.w	40dd24 <_svfprintf_r+0xcdc>
  40dab4:	af48      	add	r7, sp, #288	; 0x120
  40dab6:	3430      	adds	r4, #48	; 0x30
  40dab8:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40dabc:	9d08      	ldr	r5, [sp, #32]
  40dabe:	1bec      	subs	r4, r5, r7
  40dac0:	e450      	b.n	40d364 <_svfprintf_r+0x31c>
  40dac2:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40dac4:	2c01      	cmp	r4, #1
  40dac6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40dac8:	f340 81d5 	ble.w	40de76 <_svfprintf_r+0xe2e>
  40dacc:	3401      	adds	r4, #1
  40dace:	f10c 0301 	add.w	r3, ip, #1
  40dad2:	2201      	movs	r2, #1
  40dad4:	2c07      	cmp	r4, #7
  40dad6:	6037      	str	r7, [r6, #0]
  40dad8:	932d      	str	r3, [sp, #180]	; 0xb4
  40dada:	942c      	str	r4, [sp, #176]	; 0xb0
  40dadc:	6072      	str	r2, [r6, #4]
  40dade:	f300 81db 	bgt.w	40de98 <_svfprintf_r+0xe50>
  40dae2:	3608      	adds	r6, #8
  40dae4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  40dae8:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40daea:	6035      	str	r5, [r6, #0]
  40daec:	3401      	adds	r4, #1
  40daee:	4498      	add	r8, r3
  40daf0:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40daf2:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40daf6:	2c07      	cmp	r4, #7
  40daf8:	942c      	str	r4, [sp, #176]	; 0xb0
  40dafa:	6075      	str	r5, [r6, #4]
  40dafc:	f300 81d8 	bgt.w	40deb0 <_svfprintf_r+0xe68>
  40db00:	3608      	adds	r6, #8
  40db02:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40db06:	2200      	movs	r2, #0
  40db08:	2300      	movs	r3, #0
  40db0a:	f007 ffd5 	bl	415ab8 <__aeabi_dcmpeq>
  40db0e:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40db10:	2800      	cmp	r0, #0
  40db12:	f040 80b9 	bne.w	40dc88 <_svfprintf_r+0xc40>
  40db16:	1e6b      	subs	r3, r5, #1
  40db18:	3401      	adds	r4, #1
  40db1a:	3701      	adds	r7, #1
  40db1c:	4498      	add	r8, r3
  40db1e:	2c07      	cmp	r4, #7
  40db20:	942c      	str	r4, [sp, #176]	; 0xb0
  40db22:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40db26:	6037      	str	r7, [r6, #0]
  40db28:	6073      	str	r3, [r6, #4]
  40db2a:	f300 80e2 	bgt.w	40dcf2 <_svfprintf_r+0xcaa>
  40db2e:	3608      	adds	r6, #8
  40db30:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  40db34:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40db36:	3401      	adds	r4, #1
  40db38:	44c4      	add	ip, r8
  40db3a:	ab27      	add	r3, sp, #156	; 0x9c
  40db3c:	2c07      	cmp	r4, #7
  40db3e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40db42:	942c      	str	r4, [sp, #176]	; 0xb0
  40db44:	e886 0028 	stmia.w	r6, {r3, r5}
  40db48:	f77f acef 	ble.w	40d52a <_svfprintf_r+0x4e2>
  40db4c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40db4e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40db50:	aa2b      	add	r2, sp, #172	; 0xac
  40db52:	f006 fd09 	bl	414568 <__ssprint_r>
  40db56:	2800      	cmp	r0, #0
  40db58:	f47f ab8e 	bne.w	40d278 <_svfprintf_r+0x230>
  40db5c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40db60:	ae38      	add	r6, sp, #224	; 0xe0
  40db62:	e4e3      	b.n	40d52c <_svfprintf_r+0x4e4>
  40db64:	980d      	ldr	r0, [sp, #52]	; 0x34
  40db66:	990c      	ldr	r1, [sp, #48]	; 0x30
  40db68:	aa2b      	add	r2, sp, #172	; 0xac
  40db6a:	f006 fcfd 	bl	414568 <__ssprint_r>
  40db6e:	2800      	cmp	r0, #0
  40db70:	f43f ad35 	beq.w	40d5de <_svfprintf_r+0x596>
  40db74:	f7ff bb80 	b.w	40d278 <_svfprintf_r+0x230>
  40db78:	980d      	ldr	r0, [sp, #52]	; 0x34
  40db7a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40db7c:	aa2b      	add	r2, sp, #172	; 0xac
  40db7e:	f006 fcf3 	bl	414568 <__ssprint_r>
  40db82:	2800      	cmp	r0, #0
  40db84:	f47f ab78 	bne.w	40d278 <_svfprintf_r+0x230>
  40db88:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40db8c:	ae38      	add	r6, sp, #224	; 0xe0
  40db8e:	e4bd      	b.n	40d50c <_svfprintf_r+0x4c4>
  40db90:	980d      	ldr	r0, [sp, #52]	; 0x34
  40db92:	990c      	ldr	r1, [sp, #48]	; 0x30
  40db94:	aa2b      	add	r2, sp, #172	; 0xac
  40db96:	f006 fce7 	bl	414568 <__ssprint_r>
  40db9a:	2800      	cmp	r0, #0
  40db9c:	f47f ab6c 	bne.w	40d278 <_svfprintf_r+0x230>
  40dba0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40dba4:	ae38      	add	r6, sp, #224	; 0xe0
  40dba6:	e45a      	b.n	40d45e <_svfprintf_r+0x416>
  40dba8:	980d      	ldr	r0, [sp, #52]	; 0x34
  40dbaa:	990c      	ldr	r1, [sp, #48]	; 0x30
  40dbac:	aa2b      	add	r2, sp, #172	; 0xac
  40dbae:	f006 fcdb 	bl	414568 <__ssprint_r>
  40dbb2:	2800      	cmp	r0, #0
  40dbb4:	f47f ab60 	bne.w	40d278 <_svfprintf_r+0x230>
  40dbb8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40dbbc:	ae38      	add	r6, sp, #224	; 0xe0
  40dbbe:	e45f      	b.n	40d480 <_svfprintf_r+0x438>
  40dbc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40dbc2:	af38      	add	r7, sp, #224	; 0xe0
  40dbc4:	f7ff bbce 	b.w	40d364 <_svfprintf_r+0x31c>
  40dbc8:	2302      	movs	r3, #2
  40dbca:	f7ff bba7 	b.w	40d31c <_svfprintf_r+0x2d4>
  40dbce:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40dbd0:	2b00      	cmp	r3, #0
  40dbd2:	f340 81e7 	ble.w	40dfa4 <_svfprintf_r+0xf5c>
  40dbd6:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40dbd8:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40dbda:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  40dbde:	42ac      	cmp	r4, r5
  40dbe0:	bfa8      	it	ge
  40dbe2:	462c      	movge	r4, r5
  40dbe4:	2c00      	cmp	r4, #0
  40dbe6:	44ba      	add	sl, r7
  40dbe8:	dd0b      	ble.n	40dc02 <_svfprintf_r+0xbba>
  40dbea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dbec:	6037      	str	r7, [r6, #0]
  40dbee:	3301      	adds	r3, #1
  40dbf0:	44a4      	add	ip, r4
  40dbf2:	2b07      	cmp	r3, #7
  40dbf4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40dbf8:	6074      	str	r4, [r6, #4]
  40dbfa:	932c      	str	r3, [sp, #176]	; 0xb0
  40dbfc:	f300 8328 	bgt.w	40e250 <_svfprintf_r+0x1208>
  40dc00:	3608      	adds	r6, #8
  40dc02:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40dc04:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  40dc08:	1b2c      	subs	r4, r5, r4
  40dc0a:	2c00      	cmp	r4, #0
  40dc0c:	f340 80db 	ble.w	40ddc6 <_svfprintf_r+0xd7e>
  40dc10:	2c10      	cmp	r4, #16
  40dc12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dc14:	4d07      	ldr	r5, [pc, #28]	; (40dc34 <_svfprintf_r+0xbec>)
  40dc16:	f340 81ad 	ble.w	40df74 <_svfprintf_r+0xf2c>
  40dc1a:	970a      	str	r7, [sp, #40]	; 0x28
  40dc1c:	f04f 0810 	mov.w	r8, #16
  40dc20:	462f      	mov	r7, r5
  40dc22:	4662      	mov	r2, ip
  40dc24:	4625      	mov	r5, r4
  40dc26:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  40dc2a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40dc2c:	e009      	b.n	40dc42 <_svfprintf_r+0xbfa>
  40dc2e:	bf00      	nop
  40dc30:	004161c4 	.word	0x004161c4
  40dc34:	00416174 	.word	0x00416174
  40dc38:	3608      	adds	r6, #8
  40dc3a:	3d10      	subs	r5, #16
  40dc3c:	2d10      	cmp	r5, #16
  40dc3e:	f340 8195 	ble.w	40df6c <_svfprintf_r+0xf24>
  40dc42:	3301      	adds	r3, #1
  40dc44:	3210      	adds	r2, #16
  40dc46:	2b07      	cmp	r3, #7
  40dc48:	922d      	str	r2, [sp, #180]	; 0xb4
  40dc4a:	932c      	str	r3, [sp, #176]	; 0xb0
  40dc4c:	e886 0180 	stmia.w	r6, {r7, r8}
  40dc50:	ddf2      	ble.n	40dc38 <_svfprintf_r+0xbf0>
  40dc52:	4658      	mov	r0, fp
  40dc54:	4621      	mov	r1, r4
  40dc56:	aa2b      	add	r2, sp, #172	; 0xac
  40dc58:	f006 fc86 	bl	414568 <__ssprint_r>
  40dc5c:	2800      	cmp	r0, #0
  40dc5e:	f47f ab0b 	bne.w	40d278 <_svfprintf_r+0x230>
  40dc62:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40dc64:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dc66:	ae38      	add	r6, sp, #224	; 0xe0
  40dc68:	e7e7      	b.n	40dc3a <_svfprintf_r+0xbf2>
  40dc6a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40dc6c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40dc6e:	aa2b      	add	r2, sp, #172	; 0xac
  40dc70:	f006 fc7a 	bl	414568 <__ssprint_r>
  40dc74:	2800      	cmp	r0, #0
  40dc76:	f47f aaff 	bne.w	40d278 <_svfprintf_r+0x230>
  40dc7a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40dc7e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40dc82:	ae38      	add	r6, sp, #224	; 0xe0
  40dc84:	f7ff bbd8 	b.w	40d438 <_svfprintf_r+0x3f0>
  40dc88:	1e6f      	subs	r7, r5, #1
  40dc8a:	2f00      	cmp	r7, #0
  40dc8c:	f77f af50 	ble.w	40db30 <_svfprintf_r+0xae8>
  40dc90:	2f10      	cmp	r7, #16
  40dc92:	4db3      	ldr	r5, [pc, #716]	; (40df60 <_svfprintf_r+0xf18>)
  40dc94:	dd23      	ble.n	40dcde <_svfprintf_r+0xc96>
  40dc96:	4643      	mov	r3, r8
  40dc98:	f04f 0a10 	mov.w	sl, #16
  40dc9c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40dca0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40dca4:	e004      	b.n	40dcb0 <_svfprintf_r+0xc68>
  40dca6:	3f10      	subs	r7, #16
  40dca8:	2f10      	cmp	r7, #16
  40dcaa:	f106 0608 	add.w	r6, r6, #8
  40dcae:	dd15      	ble.n	40dcdc <_svfprintf_r+0xc94>
  40dcb0:	3401      	adds	r4, #1
  40dcb2:	3310      	adds	r3, #16
  40dcb4:	2c07      	cmp	r4, #7
  40dcb6:	932d      	str	r3, [sp, #180]	; 0xb4
  40dcb8:	942c      	str	r4, [sp, #176]	; 0xb0
  40dcba:	e886 0420 	stmia.w	r6, {r5, sl}
  40dcbe:	ddf2      	ble.n	40dca6 <_svfprintf_r+0xc5e>
  40dcc0:	4640      	mov	r0, r8
  40dcc2:	4659      	mov	r1, fp
  40dcc4:	aa2b      	add	r2, sp, #172	; 0xac
  40dcc6:	f006 fc4f 	bl	414568 <__ssprint_r>
  40dcca:	2800      	cmp	r0, #0
  40dccc:	f47f aad4 	bne.w	40d278 <_svfprintf_r+0x230>
  40dcd0:	3f10      	subs	r7, #16
  40dcd2:	2f10      	cmp	r7, #16
  40dcd4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40dcd6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40dcd8:	ae38      	add	r6, sp, #224	; 0xe0
  40dcda:	dce9      	bgt.n	40dcb0 <_svfprintf_r+0xc68>
  40dcdc:	4698      	mov	r8, r3
  40dcde:	3401      	adds	r4, #1
  40dce0:	44b8      	add	r8, r7
  40dce2:	2c07      	cmp	r4, #7
  40dce4:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40dce8:	942c      	str	r4, [sp, #176]	; 0xb0
  40dcea:	e886 00a0 	stmia.w	r6, {r5, r7}
  40dcee:	f77f af1e 	ble.w	40db2e <_svfprintf_r+0xae6>
  40dcf2:	980d      	ldr	r0, [sp, #52]	; 0x34
  40dcf4:	990c      	ldr	r1, [sp, #48]	; 0x30
  40dcf6:	aa2b      	add	r2, sp, #172	; 0xac
  40dcf8:	f006 fc36 	bl	414568 <__ssprint_r>
  40dcfc:	2800      	cmp	r0, #0
  40dcfe:	f47f aabb 	bne.w	40d278 <_svfprintf_r+0x230>
  40dd02:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  40dd06:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40dd08:	ae38      	add	r6, sp, #224	; 0xe0
  40dd0a:	e711      	b.n	40db30 <_svfprintf_r+0xae8>
  40dd0c:	4694      	mov	ip, r2
  40dd0e:	3301      	adds	r3, #1
  40dd10:	44a4      	add	ip, r4
  40dd12:	2b07      	cmp	r3, #7
  40dd14:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40dd18:	932c      	str	r3, [sp, #176]	; 0xb0
  40dd1a:	6035      	str	r5, [r6, #0]
  40dd1c:	6074      	str	r4, [r6, #4]
  40dd1e:	f77f ac04 	ble.w	40d52a <_svfprintf_r+0x4e2>
  40dd22:	e713      	b.n	40db4c <_svfprintf_r+0xb04>
  40dd24:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  40dd28:	4620      	mov	r0, r4
  40dd2a:	4629      	mov	r1, r5
  40dd2c:	220a      	movs	r2, #10
  40dd2e:	2300      	movs	r3, #0
  40dd30:	f7fe fb84 	bl	40c43c <__aeabi_uldivmod>
  40dd34:	3230      	adds	r2, #48	; 0x30
  40dd36:	f88b 2000 	strb.w	r2, [fp]
  40dd3a:	4620      	mov	r0, r4
  40dd3c:	4629      	mov	r1, r5
  40dd3e:	220a      	movs	r2, #10
  40dd40:	2300      	movs	r3, #0
  40dd42:	f7fe fb7b 	bl	40c43c <__aeabi_uldivmod>
  40dd46:	4604      	mov	r4, r0
  40dd48:	460d      	mov	r5, r1
  40dd4a:	ea54 0c05 	orrs.w	ip, r4, r5
  40dd4e:	465f      	mov	r7, fp
  40dd50:	f10b 3bff 	add.w	fp, fp, #4294967295
  40dd54:	d1e8      	bne.n	40dd28 <_svfprintf_r+0xce0>
  40dd56:	9d08      	ldr	r5, [sp, #32]
  40dd58:	1bec      	subs	r4, r5, r7
  40dd5a:	f7ff bb03 	b.w	40d364 <_svfprintf_r+0x31c>
  40dd5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40dd60:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40dd64:	682c      	ldr	r4, [r5, #0]
  40dd66:	17e5      	asrs	r5, r4, #31
  40dd68:	4622      	mov	r2, r4
  40dd6a:	462b      	mov	r3, r5
  40dd6c:	f10c 0c04 	add.w	ip, ip, #4
  40dd70:	2a00      	cmp	r2, #0
  40dd72:	f173 0000 	sbcs.w	r0, r3, #0
  40dd76:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40dd7a:	f6bf ac75 	bge.w	40d668 <_svfprintf_r+0x620>
  40dd7e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40dd82:	4264      	negs	r4, r4
  40dd84:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40dd88:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40dd8c:	2301      	movs	r3, #1
  40dd8e:	f7ff bac9 	b.w	40d324 <_svfprintf_r+0x2dc>
  40dd92:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40dd94:	682c      	ldr	r4, [r5, #0]
  40dd96:	3504      	adds	r5, #4
  40dd98:	9510      	str	r5, [sp, #64]	; 0x40
  40dd9a:	2500      	movs	r5, #0
  40dd9c:	f7ff babe 	b.w	40d31c <_svfprintf_r+0x2d4>
  40dda0:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40dda2:	682c      	ldr	r4, [r5, #0]
  40dda4:	3504      	adds	r5, #4
  40dda6:	9510      	str	r5, [sp, #64]	; 0x40
  40dda8:	2301      	movs	r3, #1
  40ddaa:	2500      	movs	r5, #0
  40ddac:	f7ff bab6 	b.w	40d31c <_svfprintf_r+0x2d4>
  40ddb0:	980d      	ldr	r0, [sp, #52]	; 0x34
  40ddb2:	990c      	ldr	r1, [sp, #48]	; 0x30
  40ddb4:	aa2b      	add	r2, sp, #172	; 0xac
  40ddb6:	f006 fbd7 	bl	414568 <__ssprint_r>
  40ddba:	2800      	cmp	r0, #0
  40ddbc:	f47f aa5c 	bne.w	40d278 <_svfprintf_r+0x230>
  40ddc0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40ddc4:	ae38      	add	r6, sp, #224	; 0xe0
  40ddc6:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40ddc8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ddca:	442f      	add	r7, r5
  40ddcc:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40ddce:	42ac      	cmp	r4, r5
  40ddd0:	db42      	blt.n	40de58 <_svfprintf_r+0xe10>
  40ddd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ddd4:	07e9      	lsls	r1, r5, #31
  40ddd6:	d43f      	bmi.n	40de58 <_svfprintf_r+0xe10>
  40ddd8:	9811      	ldr	r0, [sp, #68]	; 0x44
  40ddda:	ebc7 050a 	rsb	r5, r7, sl
  40ddde:	1b04      	subs	r4, r0, r4
  40dde0:	42ac      	cmp	r4, r5
  40dde2:	bfb8      	it	lt
  40dde4:	4625      	movlt	r5, r4
  40dde6:	2d00      	cmp	r5, #0
  40dde8:	dd0b      	ble.n	40de02 <_svfprintf_r+0xdba>
  40ddea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40ddec:	6037      	str	r7, [r6, #0]
  40ddee:	3301      	adds	r3, #1
  40ddf0:	44ac      	add	ip, r5
  40ddf2:	2b07      	cmp	r3, #7
  40ddf4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40ddf8:	6075      	str	r5, [r6, #4]
  40ddfa:	932c      	str	r3, [sp, #176]	; 0xb0
  40ddfc:	f300 8252 	bgt.w	40e2a4 <_svfprintf_r+0x125c>
  40de00:	3608      	adds	r6, #8
  40de02:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  40de06:	1b64      	subs	r4, r4, r5
  40de08:	2c00      	cmp	r4, #0
  40de0a:	f77f ab8f 	ble.w	40d52c <_svfprintf_r+0x4e4>
  40de0e:	2c10      	cmp	r4, #16
  40de10:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40de12:	4d53      	ldr	r5, [pc, #332]	; (40df60 <_svfprintf_r+0xf18>)
  40de14:	f77f af7b 	ble.w	40dd0e <_svfprintf_r+0xcc6>
  40de18:	2710      	movs	r7, #16
  40de1a:	4662      	mov	r2, ip
  40de1c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40de20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40de24:	e004      	b.n	40de30 <_svfprintf_r+0xde8>
  40de26:	3608      	adds	r6, #8
  40de28:	3c10      	subs	r4, #16
  40de2a:	2c10      	cmp	r4, #16
  40de2c:	f77f af6e 	ble.w	40dd0c <_svfprintf_r+0xcc4>
  40de30:	3301      	adds	r3, #1
  40de32:	3210      	adds	r2, #16
  40de34:	2b07      	cmp	r3, #7
  40de36:	922d      	str	r2, [sp, #180]	; 0xb4
  40de38:	932c      	str	r3, [sp, #176]	; 0xb0
  40de3a:	e886 00a0 	stmia.w	r6, {r5, r7}
  40de3e:	ddf2      	ble.n	40de26 <_svfprintf_r+0xdde>
  40de40:	4640      	mov	r0, r8
  40de42:	4651      	mov	r1, sl
  40de44:	aa2b      	add	r2, sp, #172	; 0xac
  40de46:	f006 fb8f 	bl	414568 <__ssprint_r>
  40de4a:	2800      	cmp	r0, #0
  40de4c:	f47f aa14 	bne.w	40d278 <_svfprintf_r+0x230>
  40de50:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40de52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40de54:	ae38      	add	r6, sp, #224	; 0xe0
  40de56:	e7e7      	b.n	40de28 <_svfprintf_r+0xde0>
  40de58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40de5a:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40de5c:	6035      	str	r5, [r6, #0]
  40de5e:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40de60:	6075      	str	r5, [r6, #4]
  40de62:	3301      	adds	r3, #1
  40de64:	44ac      	add	ip, r5
  40de66:	2b07      	cmp	r3, #7
  40de68:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40de6c:	932c      	str	r3, [sp, #176]	; 0xb0
  40de6e:	f300 81fb 	bgt.w	40e268 <_svfprintf_r+0x1220>
  40de72:	3608      	adds	r6, #8
  40de74:	e7b0      	b.n	40ddd8 <_svfprintf_r+0xd90>
  40de76:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40de78:	07ea      	lsls	r2, r5, #31
  40de7a:	f53f ae27 	bmi.w	40dacc <_svfprintf_r+0xa84>
  40de7e:	3401      	adds	r4, #1
  40de80:	f10c 0801 	add.w	r8, ip, #1
  40de84:	2301      	movs	r3, #1
  40de86:	2c07      	cmp	r4, #7
  40de88:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40de8c:	942c      	str	r4, [sp, #176]	; 0xb0
  40de8e:	6037      	str	r7, [r6, #0]
  40de90:	6073      	str	r3, [r6, #4]
  40de92:	f77f ae4c 	ble.w	40db2e <_svfprintf_r+0xae6>
  40de96:	e72c      	b.n	40dcf2 <_svfprintf_r+0xcaa>
  40de98:	980d      	ldr	r0, [sp, #52]	; 0x34
  40de9a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40de9c:	aa2b      	add	r2, sp, #172	; 0xac
  40de9e:	f006 fb63 	bl	414568 <__ssprint_r>
  40dea2:	2800      	cmp	r0, #0
  40dea4:	f47f a9e8 	bne.w	40d278 <_svfprintf_r+0x230>
  40dea8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40deaa:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40deac:	ae38      	add	r6, sp, #224	; 0xe0
  40deae:	e619      	b.n	40dae4 <_svfprintf_r+0xa9c>
  40deb0:	980d      	ldr	r0, [sp, #52]	; 0x34
  40deb2:	990c      	ldr	r1, [sp, #48]	; 0x30
  40deb4:	aa2b      	add	r2, sp, #172	; 0xac
  40deb6:	f006 fb57 	bl	414568 <__ssprint_r>
  40deba:	2800      	cmp	r0, #0
  40debc:	f47f a9dc 	bne.w	40d278 <_svfprintf_r+0x230>
  40dec0:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  40dec4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40dec6:	ae38      	add	r6, sp, #224	; 0xe0
  40dec8:	e61b      	b.n	40db02 <_svfprintf_r+0xaba>
  40deca:	980d      	ldr	r0, [sp, #52]	; 0x34
  40decc:	990c      	ldr	r1, [sp, #48]	; 0x30
  40dece:	aa2b      	add	r2, sp, #172	; 0xac
  40ded0:	f006 fb4a 	bl	414568 <__ssprint_r>
  40ded4:	2800      	cmp	r0, #0
  40ded6:	f47f a9cf 	bne.w	40d278 <_svfprintf_r+0x230>
  40deda:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40dede:	ae38      	add	r6, sp, #224	; 0xe0
  40dee0:	f7ff bad2 	b.w	40d488 <_svfprintf_r+0x440>
  40dee4:	f005 f85a 	bl	412f9c <__fpclassifyd>
  40dee8:	2800      	cmp	r0, #0
  40deea:	f040 80c2 	bne.w	40e072 <_svfprintf_r+0x102a>
  40deee:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40def0:	4f1c      	ldr	r7, [pc, #112]	; (40df64 <_svfprintf_r+0xf1c>)
  40def2:	4b1d      	ldr	r3, [pc, #116]	; (40df68 <_svfprintf_r+0xf20>)
  40def4:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40def8:	900a      	str	r0, [sp, #40]	; 0x28
  40defa:	f04f 0c03 	mov.w	ip, #3
  40defe:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40df02:	9409      	str	r4, [sp, #36]	; 0x24
  40df04:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40df08:	9014      	str	r0, [sp, #80]	; 0x50
  40df0a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40df0e:	bfd8      	it	le
  40df10:	461f      	movle	r7, r3
  40df12:	4664      	mov	r4, ip
  40df14:	f7ff ba2f 	b.w	40d376 <_svfprintf_r+0x32e>
  40df18:	e9d3 4500 	ldrd	r4, r5, [r3]
  40df1c:	3308      	adds	r3, #8
  40df1e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40df22:	9310      	str	r3, [sp, #64]	; 0x40
  40df24:	e476      	b.n	40d814 <_svfprintf_r+0x7cc>
  40df26:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40df2a:	f01c 0f10 	tst.w	ip, #16
  40df2e:	f000 8155 	beq.w	40e1dc <_svfprintf_r+0x1194>
  40df32:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40df34:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40df36:	6823      	ldr	r3, [r4, #0]
  40df38:	3404      	adds	r4, #4
  40df3a:	9410      	str	r4, [sp, #64]	; 0x40
  40df3c:	601d      	str	r5, [r3, #0]
  40df3e:	f7ff b8a9 	b.w	40d094 <_svfprintf_r+0x4c>
  40df42:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40df44:	0664      	lsls	r4, r4, #25
  40df46:	f140 8142 	bpl.w	40e1ce <_svfprintf_r+0x1186>
  40df4a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40df4e:	f8bc 4000 	ldrh.w	r4, [ip]
  40df52:	f10c 0c04 	add.w	ip, ip, #4
  40df56:	2500      	movs	r5, #0
  40df58:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40df5c:	f7ff b9ca 	b.w	40d2f4 <_svfprintf_r+0x2ac>
  40df60:	00416174 	.word	0x00416174
  40df64:	00416190 	.word	0x00416190
  40df68:	0041618c 	.word	0x0041618c
  40df6c:	462c      	mov	r4, r5
  40df6e:	463d      	mov	r5, r7
  40df70:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40df72:	4694      	mov	ip, r2
  40df74:	3301      	adds	r3, #1
  40df76:	44a4      	add	ip, r4
  40df78:	2b07      	cmp	r3, #7
  40df7a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40df7e:	932c      	str	r3, [sp, #176]	; 0xb0
  40df80:	6035      	str	r5, [r6, #0]
  40df82:	6074      	str	r4, [r6, #4]
  40df84:	f73f af14 	bgt.w	40ddb0 <_svfprintf_r+0xd68>
  40df88:	3608      	adds	r6, #8
  40df8a:	e71c      	b.n	40ddc6 <_svfprintf_r+0xd7e>
  40df8c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40df8e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40df90:	aa2b      	add	r2, sp, #172	; 0xac
  40df92:	f006 fae9 	bl	414568 <__ssprint_r>
  40df96:	2800      	cmp	r0, #0
  40df98:	f47f a96e 	bne.w	40d278 <_svfprintf_r+0x230>
  40df9c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40dfa0:	ae38      	add	r6, sp, #224	; 0xe0
  40dfa2:	e4fd      	b.n	40d9a0 <_svfprintf_r+0x958>
  40dfa4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40dfa6:	49b7      	ldr	r1, [pc, #732]	; (40e284 <_svfprintf_r+0x123c>)
  40dfa8:	6031      	str	r1, [r6, #0]
  40dfaa:	3201      	adds	r2, #1
  40dfac:	f10c 0c01 	add.w	ip, ip, #1
  40dfb0:	2101      	movs	r1, #1
  40dfb2:	2a07      	cmp	r2, #7
  40dfb4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40dfb8:	922c      	str	r2, [sp, #176]	; 0xb0
  40dfba:	6071      	str	r1, [r6, #4]
  40dfbc:	f300 80f7 	bgt.w	40e1ae <_svfprintf_r+0x1166>
  40dfc0:	3608      	adds	r6, #8
  40dfc2:	461c      	mov	r4, r3
  40dfc4:	b92c      	cbnz	r4, 40dfd2 <_svfprintf_r+0xf8a>
  40dfc6:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40dfc8:	b91d      	cbnz	r5, 40dfd2 <_svfprintf_r+0xf8a>
  40dfca:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40dfcc:	07e8      	lsls	r0, r5, #31
  40dfce:	f57f aaad 	bpl.w	40d52c <_svfprintf_r+0x4e4>
  40dfd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40dfd4:	9918      	ldr	r1, [sp, #96]	; 0x60
  40dfd6:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40dfd8:	6035      	str	r5, [r6, #0]
  40dfda:	3301      	adds	r3, #1
  40dfdc:	4461      	add	r1, ip
  40dfde:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40dfe0:	912d      	str	r1, [sp, #180]	; 0xb4
  40dfe2:	2b07      	cmp	r3, #7
  40dfe4:	6075      	str	r5, [r6, #4]
  40dfe6:	932c      	str	r3, [sp, #176]	; 0xb0
  40dfe8:	f300 81de 	bgt.w	40e3a8 <_svfprintf_r+0x1360>
  40dfec:	f106 0208 	add.w	r2, r6, #8
  40dff0:	4264      	negs	r4, r4
  40dff2:	2c00      	cmp	r4, #0
  40dff4:	f340 810b 	ble.w	40e20e <_svfprintf_r+0x11c6>
  40dff8:	2c10      	cmp	r4, #16
  40dffa:	4da3      	ldr	r5, [pc, #652]	; (40e288 <_svfprintf_r+0x1240>)
  40dffc:	f340 8148 	ble.w	40e290 <_svfprintf_r+0x1248>
  40e000:	46a3      	mov	fp, r4
  40e002:	2610      	movs	r6, #16
  40e004:	460c      	mov	r4, r1
  40e006:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40e00a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40e00e:	e006      	b.n	40e01e <_svfprintf_r+0xfd6>
  40e010:	3208      	adds	r2, #8
  40e012:	f1ab 0b10 	sub.w	fp, fp, #16
  40e016:	f1bb 0f10 	cmp.w	fp, #16
  40e01a:	f340 8137 	ble.w	40e28c <_svfprintf_r+0x1244>
  40e01e:	3301      	adds	r3, #1
  40e020:	3410      	adds	r4, #16
  40e022:	2b07      	cmp	r3, #7
  40e024:	942d      	str	r4, [sp, #180]	; 0xb4
  40e026:	932c      	str	r3, [sp, #176]	; 0xb0
  40e028:	e882 0060 	stmia.w	r2, {r5, r6}
  40e02c:	ddf0      	ble.n	40e010 <_svfprintf_r+0xfc8>
  40e02e:	4640      	mov	r0, r8
  40e030:	4651      	mov	r1, sl
  40e032:	aa2b      	add	r2, sp, #172	; 0xac
  40e034:	f006 fa98 	bl	414568 <__ssprint_r>
  40e038:	2800      	cmp	r0, #0
  40e03a:	f47f a91d 	bne.w	40d278 <_svfprintf_r+0x230>
  40e03e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
  40e040:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e042:	aa38      	add	r2, sp, #224	; 0xe0
  40e044:	e7e5      	b.n	40e012 <_svfprintf_r+0xfca>
  40e046:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40e048:	f893 8001 	ldrb.w	r8, [r3, #1]
  40e04c:	f044 0420 	orr.w	r4, r4, #32
  40e050:	f109 0901 	add.w	r9, r9, #1
  40e054:	9409      	str	r4, [sp, #36]	; 0x24
  40e056:	f7ff b853 	b.w	40d100 <_svfprintf_r+0xb8>
  40e05a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e05c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e05e:	aa2b      	add	r2, sp, #172	; 0xac
  40e060:	f006 fa82 	bl	414568 <__ssprint_r>
  40e064:	2800      	cmp	r0, #0
  40e066:	f47f a907 	bne.w	40d278 <_svfprintf_r+0x230>
  40e06a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e06e:	ae38      	add	r6, sp, #224	; 0xe0
  40e070:	e4ac      	b.n	40d9cc <_svfprintf_r+0x984>
  40e072:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e074:	3501      	adds	r5, #1
  40e076:	f028 0a20 	bic.w	sl, r8, #32
  40e07a:	f000 80a5 	beq.w	40e1c8 <_svfprintf_r+0x1180>
  40e07e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40e082:	d104      	bne.n	40e08e <_svfprintf_r+0x1046>
  40e084:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e086:	2d00      	cmp	r5, #0
  40e088:	bf08      	it	eq
  40e08a:	2501      	moveq	r5, #1
  40e08c:	950a      	str	r5, [sp, #40]	; 0x28
  40e08e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40e092:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e096:	2b00      	cmp	r3, #0
  40e098:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  40e09c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40e0a0:	f2c0 819c 	blt.w	40e3dc <_svfprintf_r+0x1394>
  40e0a4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  40e0a8:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  40e0ac:	f04f 0b00 	mov.w	fp, #0
  40e0b0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40e0b4:	f000 819b 	beq.w	40e3ee <_svfprintf_r+0x13a6>
  40e0b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  40e0bc:	f000 81a9 	beq.w	40e412 <_svfprintf_r+0x13ca>
  40e0c0:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  40e0c4:	bf0a      	itet	eq
  40e0c6:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
  40e0c8:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40e0ca:	1c65      	addeq	r5, r4, #1
  40e0cc:	2002      	movs	r0, #2
  40e0ce:	a925      	add	r1, sp, #148	; 0x94
  40e0d0:	aa26      	add	r2, sp, #152	; 0x98
  40e0d2:	ab29      	add	r3, sp, #164	; 0xa4
  40e0d4:	e88d 0021 	stmia.w	sp, {r0, r5}
  40e0d8:	9203      	str	r2, [sp, #12]
  40e0da:	9304      	str	r3, [sp, #16]
  40e0dc:	9102      	str	r1, [sp, #8]
  40e0de:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e0e0:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  40e0e4:	f002 f93c 	bl	410360 <_dtoa_r>
  40e0e8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  40e0ec:	4607      	mov	r7, r0
  40e0ee:	d002      	beq.n	40e0f6 <_svfprintf_r+0x10ae>
  40e0f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40e0f4:	d105      	bne.n	40e102 <_svfprintf_r+0x10ba>
  40e0f6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e0fa:	f01c 0f01 	tst.w	ip, #1
  40e0fe:	f000 819c 	beq.w	40e43a <_svfprintf_r+0x13f2>
  40e102:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  40e106:	eb07 0405 	add.w	r4, r7, r5
  40e10a:	f000 811c 	beq.w	40e346 <_svfprintf_r+0x12fe>
  40e10e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  40e112:	2200      	movs	r2, #0
  40e114:	2300      	movs	r3, #0
  40e116:	f007 fccf 	bl	415ab8 <__aeabi_dcmpeq>
  40e11a:	2800      	cmp	r0, #0
  40e11c:	f040 8105 	bne.w	40e32a <_svfprintf_r+0x12e2>
  40e120:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40e122:	429c      	cmp	r4, r3
  40e124:	d906      	bls.n	40e134 <_svfprintf_r+0x10ec>
  40e126:	2130      	movs	r1, #48	; 0x30
  40e128:	1c5a      	adds	r2, r3, #1
  40e12a:	9229      	str	r2, [sp, #164]	; 0xa4
  40e12c:	7019      	strb	r1, [r3, #0]
  40e12e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40e130:	429c      	cmp	r4, r3
  40e132:	d8f9      	bhi.n	40e128 <_svfprintf_r+0x10e0>
  40e134:	1bdb      	subs	r3, r3, r7
  40e136:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40e13a:	9311      	str	r3, [sp, #68]	; 0x44
  40e13c:	f000 80ed 	beq.w	40e31a <_svfprintf_r+0x12d2>
  40e140:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40e144:	f340 81f2 	ble.w	40e52c <_svfprintf_r+0x14e4>
  40e148:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40e14c:	f000 8168 	beq.w	40e420 <_svfprintf_r+0x13d8>
  40e150:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40e152:	9414      	str	r4, [sp, #80]	; 0x50
  40e154:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40e156:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40e158:	42ac      	cmp	r4, r5
  40e15a:	f300 8132 	bgt.w	40e3c2 <_svfprintf_r+0x137a>
  40e15e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e162:	f01c 0f01 	tst.w	ip, #1
  40e166:	f040 81ad 	bne.w	40e4c4 <_svfprintf_r+0x147c>
  40e16a:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  40e16e:	462c      	mov	r4, r5
  40e170:	f04f 0867 	mov.w	r8, #103	; 0x67
  40e174:	f1bb 0f00 	cmp.w	fp, #0
  40e178:	f040 80b2 	bne.w	40e2e0 <_svfprintf_r+0x1298>
  40e17c:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40e17e:	930b      	str	r3, [sp, #44]	; 0x2c
  40e180:	9509      	str	r5, [sp, #36]	; 0x24
  40e182:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  40e186:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40e18a:	f7ff b8f4 	b.w	40d376 <_svfprintf_r+0x32e>
  40e18e:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e190:	2140      	movs	r1, #64	; 0x40
  40e192:	f003 fd31 	bl	411bf8 <_malloc_r>
  40e196:	6020      	str	r0, [r4, #0]
  40e198:	6120      	str	r0, [r4, #16]
  40e19a:	2800      	cmp	r0, #0
  40e19c:	f000 81bf 	beq.w	40e51e <_svfprintf_r+0x14d6>
  40e1a0:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  40e1a4:	2340      	movs	r3, #64	; 0x40
  40e1a6:	f8cc 3014 	str.w	r3, [ip, #20]
  40e1aa:	f7fe bf63 	b.w	40d074 <_svfprintf_r+0x2c>
  40e1ae:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e1b0:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e1b2:	aa2b      	add	r2, sp, #172	; 0xac
  40e1b4:	f006 f9d8 	bl	414568 <__ssprint_r>
  40e1b8:	2800      	cmp	r0, #0
  40e1ba:	f47f a85d 	bne.w	40d278 <_svfprintf_r+0x230>
  40e1be:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40e1c0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e1c4:	ae38      	add	r6, sp, #224	; 0xe0
  40e1c6:	e6fd      	b.n	40dfc4 <_svfprintf_r+0xf7c>
  40e1c8:	2406      	movs	r4, #6
  40e1ca:	940a      	str	r4, [sp, #40]	; 0x28
  40e1cc:	e75f      	b.n	40e08e <_svfprintf_r+0x1046>
  40e1ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40e1d0:	682c      	ldr	r4, [r5, #0]
  40e1d2:	3504      	adds	r5, #4
  40e1d4:	9510      	str	r5, [sp, #64]	; 0x40
  40e1d6:	2500      	movs	r5, #0
  40e1d8:	f7ff b88c 	b.w	40d2f4 <_svfprintf_r+0x2ac>
  40e1dc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e1e0:	f01c 0f40 	tst.w	ip, #64	; 0x40
  40e1e4:	f000 8087 	beq.w	40e2f6 <_svfprintf_r+0x12ae>
  40e1e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40e1ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40e1ec:	6823      	ldr	r3, [r4, #0]
  40e1ee:	3404      	adds	r4, #4
  40e1f0:	9410      	str	r4, [sp, #64]	; 0x40
  40e1f2:	801d      	strh	r5, [r3, #0]
  40e1f4:	f7fe bf4e 	b.w	40d094 <_svfprintf_r+0x4c>
  40e1f8:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e1fa:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e1fc:	aa2b      	add	r2, sp, #172	; 0xac
  40e1fe:	f006 f9b3 	bl	414568 <__ssprint_r>
  40e202:	2800      	cmp	r0, #0
  40e204:	f47f a838 	bne.w	40d278 <_svfprintf_r+0x230>
  40e208:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40e20a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e20c:	aa38      	add	r2, sp, #224	; 0xe0
  40e20e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  40e212:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40e214:	6017      	str	r7, [r2, #0]
  40e216:	3301      	adds	r3, #1
  40e218:	448c      	add	ip, r1
  40e21a:	2b07      	cmp	r3, #7
  40e21c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40e220:	932c      	str	r3, [sp, #176]	; 0xb0
  40e222:	6054      	str	r4, [r2, #4]
  40e224:	f73f ac92 	bgt.w	40db4c <_svfprintf_r+0xb04>
  40e228:	f102 0608 	add.w	r6, r2, #8
  40e22c:	f7ff b97e 	b.w	40d52c <_svfprintf_r+0x4e4>
  40e230:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40e234:	f7fe fe4c 	bl	40ced0 <strlen>
  40e238:	9510      	str	r5, [sp, #64]	; 0x40
  40e23a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  40e23e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e240:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40e244:	4604      	mov	r4, r0
  40e246:	9514      	str	r5, [sp, #80]	; 0x50
  40e248:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40e24c:	f7ff b893 	b.w	40d376 <_svfprintf_r+0x32e>
  40e250:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e252:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e254:	aa2b      	add	r2, sp, #172	; 0xac
  40e256:	f006 f987 	bl	414568 <__ssprint_r>
  40e25a:	2800      	cmp	r0, #0
  40e25c:	f47f a80c 	bne.w	40d278 <_svfprintf_r+0x230>
  40e260:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e264:	ae38      	add	r6, sp, #224	; 0xe0
  40e266:	e4cc      	b.n	40dc02 <_svfprintf_r+0xbba>
  40e268:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e26a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e26c:	aa2b      	add	r2, sp, #172	; 0xac
  40e26e:	f006 f97b 	bl	414568 <__ssprint_r>
  40e272:	2800      	cmp	r0, #0
  40e274:	f47f a800 	bne.w	40d278 <_svfprintf_r+0x230>
  40e278:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40e27a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e27e:	ae38      	add	r6, sp, #224	; 0xe0
  40e280:	e5aa      	b.n	40ddd8 <_svfprintf_r+0xd90>
  40e282:	bf00      	nop
  40e284:	004161c4 	.word	0x004161c4
  40e288:	00416174 	.word	0x00416174
  40e28c:	4621      	mov	r1, r4
  40e28e:	465c      	mov	r4, fp
  40e290:	3301      	adds	r3, #1
  40e292:	4421      	add	r1, r4
  40e294:	2b07      	cmp	r3, #7
  40e296:	912d      	str	r1, [sp, #180]	; 0xb4
  40e298:	932c      	str	r3, [sp, #176]	; 0xb0
  40e29a:	6015      	str	r5, [r2, #0]
  40e29c:	6054      	str	r4, [r2, #4]
  40e29e:	dcab      	bgt.n	40e1f8 <_svfprintf_r+0x11b0>
  40e2a0:	3208      	adds	r2, #8
  40e2a2:	e7b4      	b.n	40e20e <_svfprintf_r+0x11c6>
  40e2a4:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e2a6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e2a8:	aa2b      	add	r2, sp, #172	; 0xac
  40e2aa:	f006 f95d 	bl	414568 <__ssprint_r>
  40e2ae:	2800      	cmp	r0, #0
  40e2b0:	f47e afe2 	bne.w	40d278 <_svfprintf_r+0x230>
  40e2b4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40e2b6:	9911      	ldr	r1, [sp, #68]	; 0x44
  40e2b8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40e2bc:	1b0c      	subs	r4, r1, r4
  40e2be:	ae38      	add	r6, sp, #224	; 0xe0
  40e2c0:	e59f      	b.n	40de02 <_svfprintf_r+0xdba>
  40e2c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40e2c4:	9714      	str	r7, [sp, #80]	; 0x50
  40e2c6:	2c06      	cmp	r4, #6
  40e2c8:	bf28      	it	cs
  40e2ca:	2406      	movcs	r4, #6
  40e2cc:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40e2d0:	46ba      	mov	sl, r7
  40e2d2:	970a      	str	r7, [sp, #40]	; 0x28
  40e2d4:	9510      	str	r5, [sp, #64]	; 0x40
  40e2d6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40e2da:	4f97      	ldr	r7, [pc, #604]	; (40e538 <_svfprintf_r+0x14f0>)
  40e2dc:	f7ff b84b 	b.w	40d376 <_svfprintf_r+0x32e>
  40e2e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40e2e2:	9509      	str	r5, [sp, #36]	; 0x24
  40e2e4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40e2e8:	2500      	movs	r5, #0
  40e2ea:	930b      	str	r3, [sp, #44]	; 0x2c
  40e2ec:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40e2f0:	950a      	str	r5, [sp, #40]	; 0x28
  40e2f2:	f7ff b843 	b.w	40d37c <_svfprintf_r+0x334>
  40e2f6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40e2fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40e2fc:	f8dc 3000 	ldr.w	r3, [ip]
  40e300:	f10c 0c04 	add.w	ip, ip, #4
  40e304:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40e308:	601c      	str	r4, [r3, #0]
  40e30a:	f7fe bec3 	b.w	40d094 <_svfprintf_r+0x4c>
  40e30e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40e312:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40e316:	f7ff ba8f 	b.w	40d838 <_svfprintf_r+0x7f0>
  40e31a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40e31c:	1cdc      	adds	r4, r3, #3
  40e31e:	db19      	blt.n	40e354 <_svfprintf_r+0x130c>
  40e320:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40e322:	429c      	cmp	r4, r3
  40e324:	db16      	blt.n	40e354 <_svfprintf_r+0x130c>
  40e326:	9314      	str	r3, [sp, #80]	; 0x50
  40e328:	e714      	b.n	40e154 <_svfprintf_r+0x110c>
  40e32a:	4623      	mov	r3, r4
  40e32c:	e702      	b.n	40e134 <_svfprintf_r+0x10ec>
  40e32e:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40e332:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40e336:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40e338:	9510      	str	r5, [sp, #64]	; 0x40
  40e33a:	900a      	str	r0, [sp, #40]	; 0x28
  40e33c:	9014      	str	r0, [sp, #80]	; 0x50
  40e33e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40e342:	f7ff b818 	b.w	40d376 <_svfprintf_r+0x32e>
  40e346:	783b      	ldrb	r3, [r7, #0]
  40e348:	2b30      	cmp	r3, #48	; 0x30
  40e34a:	f000 80ad 	beq.w	40e4a8 <_svfprintf_r+0x1460>
  40e34e:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40e350:	442c      	add	r4, r5
  40e352:	e6dc      	b.n	40e10e <_svfprintf_r+0x10c6>
  40e354:	f1a8 0802 	sub.w	r8, r8, #2
  40e358:	3b01      	subs	r3, #1
  40e35a:	2b00      	cmp	r3, #0
  40e35c:	9325      	str	r3, [sp, #148]	; 0x94
  40e35e:	bfba      	itte	lt
  40e360:	425b      	neglt	r3, r3
  40e362:	222d      	movlt	r2, #45	; 0x2d
  40e364:	222b      	movge	r2, #43	; 0x2b
  40e366:	2b09      	cmp	r3, #9
  40e368:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  40e36c:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  40e370:	dc65      	bgt.n	40e43e <_svfprintf_r+0x13f6>
  40e372:	3330      	adds	r3, #48	; 0x30
  40e374:	2230      	movs	r2, #48	; 0x30
  40e376:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  40e37a:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  40e37e:	ab28      	add	r3, sp, #160	; 0xa0
  40e380:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40e382:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40e384:	aa27      	add	r2, sp, #156	; 0x9c
  40e386:	1a9a      	subs	r2, r3, r2
  40e388:	2d01      	cmp	r5, #1
  40e38a:	9219      	str	r2, [sp, #100]	; 0x64
  40e38c:	4414      	add	r4, r2
  40e38e:	f340 80b7 	ble.w	40e500 <_svfprintf_r+0x14b8>
  40e392:	3401      	adds	r4, #1
  40e394:	2500      	movs	r5, #0
  40e396:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e39a:	9514      	str	r5, [sp, #80]	; 0x50
  40e39c:	e6ea      	b.n	40e174 <_svfprintf_r+0x112c>
  40e39e:	2400      	movs	r4, #0
  40e3a0:	4681      	mov	r9, r0
  40e3a2:	940a      	str	r4, [sp, #40]	; 0x28
  40e3a4:	f7fe beae 	b.w	40d104 <_svfprintf_r+0xbc>
  40e3a8:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e3aa:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e3ac:	aa2b      	add	r2, sp, #172	; 0xac
  40e3ae:	f006 f8db 	bl	414568 <__ssprint_r>
  40e3b2:	2800      	cmp	r0, #0
  40e3b4:	f47e af60 	bne.w	40d278 <_svfprintf_r+0x230>
  40e3b8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40e3ba:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40e3bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40e3be:	aa38      	add	r2, sp, #224	; 0xe0
  40e3c0:	e616      	b.n	40dff0 <_svfprintf_r+0xfa8>
  40e3c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40e3c4:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40e3c6:	2c00      	cmp	r4, #0
  40e3c8:	bfd4      	ite	le
  40e3ca:	f1c4 0402 	rsble	r4, r4, #2
  40e3ce:	2401      	movgt	r4, #1
  40e3d0:	442c      	add	r4, r5
  40e3d2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e3d6:	f04f 0867 	mov.w	r8, #103	; 0x67
  40e3da:	e6cb      	b.n	40e174 <_svfprintf_r+0x112c>
  40e3dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40e3de:	9816      	ldr	r0, [sp, #88]	; 0x58
  40e3e0:	9020      	str	r0, [sp, #128]	; 0x80
  40e3e2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40e3e6:	9121      	str	r1, [sp, #132]	; 0x84
  40e3e8:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40e3ec:	e660      	b.n	40e0b0 <_svfprintf_r+0x1068>
  40e3ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e3f0:	9501      	str	r5, [sp, #4]
  40e3f2:	2003      	movs	r0, #3
  40e3f4:	a925      	add	r1, sp, #148	; 0x94
  40e3f6:	aa26      	add	r2, sp, #152	; 0x98
  40e3f8:	ab29      	add	r3, sp, #164	; 0xa4
  40e3fa:	9000      	str	r0, [sp, #0]
  40e3fc:	9203      	str	r2, [sp, #12]
  40e3fe:	9304      	str	r3, [sp, #16]
  40e400:	9102      	str	r1, [sp, #8]
  40e402:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e404:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  40e408:	f001 ffaa 	bl	410360 <_dtoa_r>
  40e40c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e40e:	4607      	mov	r7, r0
  40e410:	e677      	b.n	40e102 <_svfprintf_r+0x10ba>
  40e412:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40e414:	9401      	str	r4, [sp, #4]
  40e416:	2003      	movs	r0, #3
  40e418:	a925      	add	r1, sp, #148	; 0x94
  40e41a:	aa26      	add	r2, sp, #152	; 0x98
  40e41c:	ab29      	add	r3, sp, #164	; 0xa4
  40e41e:	e7ec      	b.n	40e3fa <_svfprintf_r+0x13b2>
  40e420:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40e422:	9514      	str	r5, [sp, #80]	; 0x50
  40e424:	2d00      	cmp	r5, #0
  40e426:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40e428:	dd63      	ble.n	40e4f2 <_svfprintf_r+0x14aa>
  40e42a:	bbb4      	cbnz	r4, 40e49a <_svfprintf_r+0x1452>
  40e42c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e42e:	07e8      	lsls	r0, r5, #31
  40e430:	d433      	bmi.n	40e49a <_svfprintf_r+0x1452>
  40e432:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40e434:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e438:	e69c      	b.n	40e174 <_svfprintf_r+0x112c>
  40e43a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40e43c:	e67a      	b.n	40e134 <_svfprintf_r+0x10ec>
  40e43e:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
  40e442:	4d3e      	ldr	r5, [pc, #248]	; (40e53c <_svfprintf_r+0x14f4>)
  40e444:	17da      	asrs	r2, r3, #31
  40e446:	fb85 5103 	smull	r5, r1, r5, r3
  40e44a:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
  40e44e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  40e452:	4602      	mov	r2, r0
  40e454:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  40e458:	f103 0030 	add.w	r0, r3, #48	; 0x30
  40e45c:	2909      	cmp	r1, #9
  40e45e:	7010      	strb	r0, [r2, #0]
  40e460:	460b      	mov	r3, r1
  40e462:	f102 30ff 	add.w	r0, r2, #4294967295
  40e466:	dcec      	bgt.n	40e442 <_svfprintf_r+0x13fa>
  40e468:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40e46c:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  40e470:	b2d9      	uxtb	r1, r3
  40e472:	4284      	cmp	r4, r0
  40e474:	f802 1c01 	strb.w	r1, [r2, #-1]
  40e478:	d95a      	bls.n	40e530 <_svfprintf_r+0x14e8>
  40e47a:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  40e47e:	4613      	mov	r3, r2
  40e480:	e001      	b.n	40e486 <_svfprintf_r+0x143e>
  40e482:	f813 1b01 	ldrb.w	r1, [r3], #1
  40e486:	42a3      	cmp	r3, r4
  40e488:	f800 1f01 	strb.w	r1, [r0, #1]!
  40e48c:	d1f9      	bne.n	40e482 <_svfprintf_r+0x143a>
  40e48e:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  40e492:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
  40e496:	3bf6      	subs	r3, #246	; 0xf6
  40e498:	e772      	b.n	40e380 <_svfprintf_r+0x1338>
  40e49a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e49c:	1c6c      	adds	r4, r5, #1
  40e49e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40e4a0:	442c      	add	r4, r5
  40e4a2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e4a6:	e665      	b.n	40e174 <_svfprintf_r+0x112c>
  40e4a8:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  40e4ac:	2200      	movs	r2, #0
  40e4ae:	2300      	movs	r3, #0
  40e4b0:	f007 fb02 	bl	415ab8 <__aeabi_dcmpeq>
  40e4b4:	2800      	cmp	r0, #0
  40e4b6:	f47f af4a 	bne.w	40e34e <_svfprintf_r+0x1306>
  40e4ba:	f1c5 0501 	rsb	r5, r5, #1
  40e4be:	9525      	str	r5, [sp, #148]	; 0x94
  40e4c0:	442c      	add	r4, r5
  40e4c2:	e624      	b.n	40e10e <_svfprintf_r+0x10c6>
  40e4c4:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40e4c6:	1c6c      	adds	r4, r5, #1
  40e4c8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e4cc:	f04f 0867 	mov.w	r8, #103	; 0x67
  40e4d0:	e650      	b.n	40e174 <_svfprintf_r+0x112c>
  40e4d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40e4d4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40e4d8:	682d      	ldr	r5, [r5, #0]
  40e4da:	f899 8001 	ldrb.w	r8, [r9, #1]
  40e4de:	950a      	str	r5, [sp, #40]	; 0x28
  40e4e0:	f10c 0304 	add.w	r3, ip, #4
  40e4e4:	2d00      	cmp	r5, #0
  40e4e6:	9310      	str	r3, [sp, #64]	; 0x40
  40e4e8:	4681      	mov	r9, r0
  40e4ea:	f6be ae09 	bge.w	40d100 <_svfprintf_r+0xb8>
  40e4ee:	f7fe be04 	b.w	40d0fa <_svfprintf_r+0xb2>
  40e4f2:	b97c      	cbnz	r4, 40e514 <_svfprintf_r+0x14cc>
  40e4f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e4f6:	07e9      	lsls	r1, r5, #31
  40e4f8:	d40c      	bmi.n	40e514 <_svfprintf_r+0x14cc>
  40e4fa:	2301      	movs	r3, #1
  40e4fc:	461c      	mov	r4, r3
  40e4fe:	e639      	b.n	40e174 <_svfprintf_r+0x112c>
  40e500:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e504:	f01c 0301 	ands.w	r3, ip, #1
  40e508:	f47f af43 	bne.w	40e392 <_svfprintf_r+0x134a>
  40e50c:	9314      	str	r3, [sp, #80]	; 0x50
  40e50e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e512:	e62f      	b.n	40e174 <_svfprintf_r+0x112c>
  40e514:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40e516:	1cac      	adds	r4, r5, #2
  40e518:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40e51c:	e62a      	b.n	40e174 <_svfprintf_r+0x112c>
  40e51e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  40e520:	230c      	movs	r3, #12
  40e522:	602b      	str	r3, [r5, #0]
  40e524:	f04f 30ff 	mov.w	r0, #4294967295
  40e528:	f7fe beae 	b.w	40d288 <_svfprintf_r+0x240>
  40e52c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40e52e:	e713      	b.n	40e358 <_svfprintf_r+0x1310>
  40e530:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  40e534:	e724      	b.n	40e380 <_svfprintf_r+0x1338>
  40e536:	bf00      	nop
  40e538:	004161bc 	.word	0x004161bc
  40e53c:	66666667 	.word	0x66666667

0040e540 <__ssvfscanf_r>:
  40e540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e544:	460d      	mov	r5, r1
  40e546:	8989      	ldrh	r1, [r1, #12]
  40e548:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
  40e54c:	048c      	lsls	r4, r1, #18
  40e54e:	900e      	str	r0, [sp, #56]	; 0x38
  40e550:	9306      	str	r3, [sp, #24]
  40e552:	d406      	bmi.n	40e562 <__ssvfscanf_r+0x22>
  40e554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40e556:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40e55a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40e55e:	81a9      	strh	r1, [r5, #12]
  40e560:	666b      	str	r3, [r5, #100]	; 0x64
  40e562:	4692      	mov	sl, r2
  40e564:	2400      	movs	r4, #0
  40e566:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40e56a:	9409      	str	r4, [sp, #36]	; 0x24
  40e56c:	940c      	str	r4, [sp, #48]	; 0x30
  40e56e:	46a1      	mov	r9, r4
  40e570:	940b      	str	r4, [sp, #44]	; 0x2c
  40e572:	f8df 83e4 	ldr.w	r8, [pc, #996]	; 40e958 <__ssvfscanf_r+0x418>
  40e576:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40e578:	9313      	str	r3, [sp, #76]	; 0x4c
  40e57a:	b343      	cbz	r3, 40e5ce <__ssvfscanf_r+0x8e>
  40e57c:	f8d8 1000 	ldr.w	r1, [r8]
  40e580:	18c8      	adds	r0, r1, r3
  40e582:	7840      	ldrb	r0, [r0, #1]
  40e584:	f000 0008 	and.w	r0, r0, #8
  40e588:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  40e58c:	b320      	cbz	r0, 40e5d8 <__ssvfscanf_r+0x98>
  40e58e:	686b      	ldr	r3, [r5, #4]
  40e590:	e00e      	b.n	40e5b0 <__ssvfscanf_r+0x70>
  40e592:	682b      	ldr	r3, [r5, #0]
  40e594:	f8d8 2000 	ldr.w	r2, [r8]
  40e598:	7819      	ldrb	r1, [r3, #0]
  40e59a:	440a      	add	r2, r1
  40e59c:	3301      	adds	r3, #1
  40e59e:	7852      	ldrb	r2, [r2, #1]
  40e5a0:	0710      	lsls	r0, r2, #28
  40e5a2:	d50d      	bpl.n	40e5c0 <__ssvfscanf_r+0x80>
  40e5a4:	686a      	ldr	r2, [r5, #4]
  40e5a6:	602b      	str	r3, [r5, #0]
  40e5a8:	1e53      	subs	r3, r2, #1
  40e5aa:	f109 0901 	add.w	r9, r9, #1
  40e5ae:	606b      	str	r3, [r5, #4]
  40e5b0:	2b00      	cmp	r3, #0
  40e5b2:	dcee      	bgt.n	40e592 <__ssvfscanf_r+0x52>
  40e5b4:	4630      	mov	r0, r6
  40e5b6:	4629      	mov	r1, r5
  40e5b8:	f006 f896 	bl	4146e8 <__ssrefill_r>
  40e5bc:	2800      	cmp	r0, #0
  40e5be:	d0e8      	beq.n	40e592 <__ssvfscanf_r+0x52>
  40e5c0:	4652      	mov	r2, sl
  40e5c2:	4692      	mov	sl, r2
  40e5c4:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40e5c8:	9313      	str	r3, [sp, #76]	; 0x4c
  40e5ca:	2b00      	cmp	r3, #0
  40e5cc:	d1d6      	bne.n	40e57c <__ssvfscanf_r+0x3c>
  40e5ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e5d0:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40e5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e5d8:	2b25      	cmp	r3, #37	; 0x25
  40e5da:	f040 8084 	bne.w	40e6e6 <__ssvfscanf_r+0x1a6>
  40e5de:	7853      	ldrb	r3, [r2, #1]
  40e5e0:	463c      	mov	r4, r7
  40e5e2:	f10a 0201 	add.w	r2, sl, #1
  40e5e6:	2b78      	cmp	r3, #120	; 0x78
  40e5e8:	f200 82e5 	bhi.w	40ebb6 <__ssvfscanf_r+0x676>
  40e5ec:	e8df f013 	tbh	[pc, r3, lsl #1]
  40e5f0:	02e3008f 	.word	0x02e3008f
  40e5f4:	02e302e3 	.word	0x02e302e3
  40e5f8:	02e302e3 	.word	0x02e302e3
  40e5fc:	02e302e3 	.word	0x02e302e3
  40e600:	02e302e3 	.word	0x02e302e3
  40e604:	02e302e3 	.word	0x02e302e3
  40e608:	02e302e3 	.word	0x02e302e3
  40e60c:	02e302e3 	.word	0x02e302e3
  40e610:	02e302e3 	.word	0x02e302e3
  40e614:	02e302e3 	.word	0x02e302e3
  40e618:	02e302e3 	.word	0x02e302e3
  40e61c:	02e302e3 	.word	0x02e302e3
  40e620:	02e302e3 	.word	0x02e302e3
  40e624:	02e302e3 	.word	0x02e302e3
  40e628:	02e302e3 	.word	0x02e302e3
  40e62c:	02e302e3 	.word	0x02e302e3
  40e630:	02e302e3 	.word	0x02e302e3
  40e634:	02e302e3 	.word	0x02e302e3
  40e638:	007902e3 	.word	0x007902e3
  40e63c:	02e302e3 	.word	0x02e302e3
  40e640:	02e302e3 	.word	0x02e302e3
  40e644:	02e30226 	.word	0x02e30226
  40e648:	02e302e3 	.word	0x02e302e3
  40e64c:	02e302e3 	.word	0x02e302e3
  40e650:	024f024f 	.word	0x024f024f
  40e654:	024f024f 	.word	0x024f024f
  40e658:	024f024f 	.word	0x024f024f
  40e65c:	024f024f 	.word	0x024f024f
  40e660:	024f024f 	.word	0x024f024f
  40e664:	02e302e3 	.word	0x02e302e3
  40e668:	02e302e3 	.word	0x02e302e3
  40e66c:	02e302e3 	.word	0x02e302e3
  40e670:	02e302e3 	.word	0x02e302e3
  40e674:	02e302e3 	.word	0x02e302e3
  40e678:	0273022c 	.word	0x0273022c
  40e67c:	027302e3 	.word	0x027302e3
  40e680:	02e302e3 	.word	0x02e302e3
  40e684:	02e302e3 	.word	0x02e302e3
  40e688:	02e3026d 	.word	0x02e3026d
  40e68c:	026302e3 	.word	0x026302e3
  40e690:	02e302e3 	.word	0x02e302e3
  40e694:	02e302e3 	.word	0x02e302e3
  40e698:	02e302e3 	.word	0x02e302e3
  40e69c:	02e302e3 	.word	0x02e302e3
  40e6a0:	02e30259 	.word	0x02e30259
  40e6a4:	029302e3 	.word	0x029302e3
  40e6a8:	02e302e3 	.word	0x02e302e3
  40e6ac:	02e302e3 	.word	0x02e302e3
  40e6b0:	02e302e3 	.word	0x02e302e3
  40e6b4:	028d02e3 	.word	0x028d02e3
  40e6b8:	0273029e 	.word	0x0273029e
  40e6bc:	02730273 	.word	0x02730273
  40e6c0:	00950287 	.word	0x00950287
  40e6c4:	02e302e3 	.word	0x02e302e3
  40e6c8:	02e302b6 	.word	0x02e302b6
  40e6cc:	02770279 	.word	0x02770279
  40e6d0:	02e302ac 	.word	0x02e302ac
  40e6d4:	02a802e3 	.word	0x02a802e3
  40e6d8:	02a002e3 	.word	0x02a002e3
  40e6dc:	02e302e3 	.word	0x02e302e3
  40e6e0:	0259      	.short	0x0259
  40e6e2:	9207      	str	r2, [sp, #28]
  40e6e4:	4692      	mov	sl, r2
  40e6e6:	686b      	ldr	r3, [r5, #4]
  40e6e8:	2b00      	cmp	r3, #0
  40e6ea:	f340 8557 	ble.w	40f19c <__ssvfscanf_r+0xc5c>
  40e6ee:	682b      	ldr	r3, [r5, #0]
  40e6f0:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
  40e6f4:	7819      	ldrb	r1, [r3, #0]
  40e6f6:	4291      	cmp	r1, r2
  40e6f8:	f47f af69 	bne.w	40e5ce <__ssvfscanf_r+0x8e>
  40e6fc:	686a      	ldr	r2, [r5, #4]
  40e6fe:	3301      	adds	r3, #1
  40e700:	3a01      	subs	r2, #1
  40e702:	606a      	str	r2, [r5, #4]
  40e704:	602b      	str	r3, [r5, #0]
  40e706:	f109 0901 	add.w	r9, r9, #1
  40e70a:	4652      	mov	r2, sl
  40e70c:	e759      	b.n	40e5c2 <__ssvfscanf_r+0x82>
  40e70e:	f04f 30ff 	mov.w	r0, #4294967295
  40e712:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40e716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e71a:	9207      	str	r2, [sp, #28]
  40e71c:	2300      	movs	r3, #0
  40e71e:	4a8d      	ldr	r2, [pc, #564]	; (40e954 <__ssvfscanf_r+0x414>)
  40e720:	9209      	str	r2, [sp, #36]	; 0x24
  40e722:	930c      	str	r3, [sp, #48]	; 0x30
  40e724:	f04f 0a03 	mov.w	sl, #3
  40e728:	686b      	ldr	r3, [r5, #4]
  40e72a:	2b00      	cmp	r3, #0
  40e72c:	f340 8199 	ble.w	40ea62 <__ssvfscanf_r+0x522>
  40e730:	0679      	lsls	r1, r7, #25
  40e732:	d512      	bpl.n	40e75a <__ssvfscanf_r+0x21a>
  40e734:	f10a 3aff 	add.w	sl, sl, #4294967295
  40e738:	f1ba 0f03 	cmp.w	sl, #3
  40e73c:	f200 80b7 	bhi.w	40e8ae <__ssvfscanf_r+0x36e>
  40e740:	e8df f01a 	tbh	[pc, sl, lsl #1]
  40e744:	008e00da 	.word	0x008e00da
  40e748:	0244001e 	.word	0x0244001e
  40e74c:	4630      	mov	r0, r6
  40e74e:	4629      	mov	r1, r5
  40e750:	f005 ffca 	bl	4146e8 <__ssrefill_r>
  40e754:	2800      	cmp	r0, #0
  40e756:	f040 818b 	bne.w	40ea70 <__ssvfscanf_r+0x530>
  40e75a:	f8d8 1000 	ldr.w	r1, [r8]
  40e75e:	682b      	ldr	r3, [r5, #0]
  40e760:	e000      	b.n	40e764 <__ssvfscanf_r+0x224>
  40e762:	602b      	str	r3, [r5, #0]
  40e764:	781a      	ldrb	r2, [r3, #0]
  40e766:	440a      	add	r2, r1
  40e768:	3301      	adds	r3, #1
  40e76a:	7852      	ldrb	r2, [r2, #1]
  40e76c:	0712      	lsls	r2, r2, #28
  40e76e:	d5e1      	bpl.n	40e734 <__ssvfscanf_r+0x1f4>
  40e770:	686a      	ldr	r2, [r5, #4]
  40e772:	3a01      	subs	r2, #1
  40e774:	2a00      	cmp	r2, #0
  40e776:	f109 0901 	add.w	r9, r9, #1
  40e77a:	606a      	str	r2, [r5, #4]
  40e77c:	dcf1      	bgt.n	40e762 <__ssvfscanf_r+0x222>
  40e77e:	e7e5      	b.n	40e74c <__ssvfscanf_r+0x20c>
  40e780:	1e63      	subs	r3, r4, #1
  40e782:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  40e786:	bf86      	itte	hi
  40e788:	f46f 71ae 	mvnhi.w	r1, #348	; 0x15c
  40e78c:	1863      	addhi	r3, r4, r1
  40e78e:	2300      	movls	r3, #0
  40e790:	f04f 0b00 	mov.w	fp, #0
  40e794:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40e798:	9308      	str	r3, [sp, #32]
  40e79a:	465b      	mov	r3, fp
  40e79c:	46b3      	mov	fp, r6
  40e79e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40e7a0:	f8cd c014 	str.w	ip, [sp, #20]
  40e7a4:	46e2      	mov	sl, ip
  40e7a6:	bf88      	it	hi
  40e7a8:	f240 145d 	movwhi	r4, #349	; 0x15d
  40e7ac:	f447 6758 	orr.w	r7, r7, #3456	; 0xd80
  40e7b0:	46cc      	mov	ip, r9
  40e7b2:	6828      	ldr	r0, [r5, #0]
  40e7b4:	7801      	ldrb	r1, [r0, #0]
  40e7b6:	f1a1 022b 	sub.w	r2, r1, #43	; 0x2b
  40e7ba:	2a4d      	cmp	r2, #77	; 0x4d
  40e7bc:	f200 80e2 	bhi.w	40e984 <__ssvfscanf_r+0x444>
  40e7c0:	e8df f012 	tbh	[pc, r2, lsl #1]
  40e7c4:	00e00126 	.word	0x00e00126
  40e7c8:	00e00126 	.word	0x00e00126
  40e7cc:	00fd00e0 	.word	0x00fd00e0
  40e7d0:	00cc00cc 	.word	0x00cc00cc
  40e7d4:	00cc00cc 	.word	0x00cc00cc
  40e7d8:	00cc00cc 	.word	0x00cc00cc
  40e7dc:	013600cc 	.word	0x013600cc
  40e7e0:	00e00136 	.word	0x00e00136
  40e7e4:	00e000e0 	.word	0x00e000e0
  40e7e8:	00e000e0 	.word	0x00e000e0
  40e7ec:	00e000e0 	.word	0x00e000e0
  40e7f0:	01210121 	.word	0x01210121
  40e7f4:	01210121 	.word	0x01210121
  40e7f8:	01210121 	.word	0x01210121
  40e7fc:	00e000e0 	.word	0x00e000e0
  40e800:	00e000e0 	.word	0x00e000e0
  40e804:	00e000e0 	.word	0x00e000e0
  40e808:	00e000e0 	.word	0x00e000e0
  40e80c:	00e000e0 	.word	0x00e000e0
  40e810:	00e000e0 	.word	0x00e000e0
  40e814:	00e000e0 	.word	0x00e000e0
  40e818:	00e000e0 	.word	0x00e000e0
  40e81c:	012b00e0 	.word	0x012b00e0
  40e820:	00e000e0 	.word	0x00e000e0
  40e824:	00e000e0 	.word	0x00e000e0
  40e828:	00e000e0 	.word	0x00e000e0
  40e82c:	00e000e0 	.word	0x00e000e0
  40e830:	01210121 	.word	0x01210121
  40e834:	01210121 	.word	0x01210121
  40e838:	01210121 	.word	0x01210121
  40e83c:	00e000e0 	.word	0x00e000e0
  40e840:	00e000e0 	.word	0x00e000e0
  40e844:	00e000e0 	.word	0x00e000e0
  40e848:	00e000e0 	.word	0x00e000e0
  40e84c:	00e000e0 	.word	0x00e000e0
  40e850:	00e000e0 	.word	0x00e000e0
  40e854:	00e000e0 	.word	0x00e000e0
  40e858:	00e000e0 	.word	0x00e000e0
  40e85c:	012b00e0 	.word	0x012b00e0
  40e860:	2c00      	cmp	r4, #0
  40e862:	bf08      	it	eq
  40e864:	f04f 34ff 	moveq.w	r4, #4294967295
  40e868:	f017 0301 	ands.w	r3, r7, #1
  40e86c:	f040 817f 	bne.w	40eb6e <__ssvfscanf_r+0x62e>
  40e870:	06f9      	lsls	r1, r7, #27
  40e872:	f140 8390 	bpl.w	40ef96 <__ssvfscanf_r+0xa56>
  40e876:	461f      	mov	r7, r3
  40e878:	f8d8 1000 	ldr.w	r1, [r8]
  40e87c:	682b      	ldr	r3, [r5, #0]
  40e87e:	781a      	ldrb	r2, [r3, #0]
  40e880:	440a      	add	r2, r1
  40e882:	3301      	adds	r3, #1
  40e884:	7852      	ldrb	r2, [r2, #1]
  40e886:	0712      	lsls	r2, r2, #28
  40e888:	d431      	bmi.n	40e8ee <__ssvfscanf_r+0x3ae>
  40e88a:	686a      	ldr	r2, [r5, #4]
  40e88c:	602b      	str	r3, [r5, #0]
  40e88e:	3701      	adds	r7, #1
  40e890:	3a01      	subs	r2, #1
  40e892:	42bc      	cmp	r4, r7
  40e894:	606a      	str	r2, [r5, #4]
  40e896:	d02a      	beq.n	40e8ee <__ssvfscanf_r+0x3ae>
  40e898:	2a00      	cmp	r2, #0
  40e89a:	dcf0      	bgt.n	40e87e <__ssvfscanf_r+0x33e>
  40e89c:	4630      	mov	r0, r6
  40e89e:	4629      	mov	r1, r5
  40e8a0:	f005 ff22 	bl	4146e8 <__ssrefill_r>
  40e8a4:	bb18      	cbnz	r0, 40e8ee <__ssvfscanf_r+0x3ae>
  40e8a6:	f8d8 1000 	ldr.w	r1, [r8]
  40e8aa:	682b      	ldr	r3, [r5, #0]
  40e8ac:	e7e7      	b.n	40e87e <__ssvfscanf_r+0x33e>
  40e8ae:	2c00      	cmp	r4, #0
  40e8b0:	bf08      	it	eq
  40e8b2:	2401      	moveq	r4, #1
  40e8b4:	f017 0301 	ands.w	r3, r7, #1
  40e8b8:	f040 839f 	bne.w	40effa <__ssvfscanf_r+0xaba>
  40e8bc:	06f9      	lsls	r1, r7, #27
  40e8be:	f140 8454 	bpl.w	40f16a <__ssvfscanf_r+0xc2a>
  40e8c2:	461f      	mov	r7, r3
  40e8c4:	e008      	b.n	40e8d8 <__ssvfscanf_r+0x398>
  40e8c6:	441a      	add	r2, r3
  40e8c8:	602a      	str	r2, [r5, #0]
  40e8ca:	441f      	add	r7, r3
  40e8cc:	1ae4      	subs	r4, r4, r3
  40e8ce:	f005 ff0b 	bl	4146e8 <__ssrefill_r>
  40e8d2:	2800      	cmp	r0, #0
  40e8d4:	f040 8441 	bne.w	40f15a <__ssvfscanf_r+0xc1a>
  40e8d8:	686b      	ldr	r3, [r5, #4]
  40e8da:	682a      	ldr	r2, [r5, #0]
  40e8dc:	42a3      	cmp	r3, r4
  40e8de:	4630      	mov	r0, r6
  40e8e0:	4629      	mov	r1, r5
  40e8e2:	dbf0      	blt.n	40e8c6 <__ssvfscanf_r+0x386>
  40e8e4:	1b1b      	subs	r3, r3, r4
  40e8e6:	4422      	add	r2, r4
  40e8e8:	606b      	str	r3, [r5, #4]
  40e8ea:	4427      	add	r7, r4
  40e8ec:	602a      	str	r2, [r5, #0]
  40e8ee:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40e8f2:	44b9      	add	r9, r7
  40e8f4:	4652      	mov	r2, sl
  40e8f6:	e664      	b.n	40e5c2 <__ssvfscanf_r+0x82>
  40e8f8:	2c00      	cmp	r4, #0
  40e8fa:	bf08      	it	eq
  40e8fc:	f04f 34ff 	moveq.w	r4, #4294967295
  40e900:	06fa      	lsls	r2, r7, #27
  40e902:	f140 8315 	bpl.w	40ef30 <__ssvfscanf_r+0x9f0>
  40e906:	682b      	ldr	r3, [r5, #0]
  40e908:	2700      	movs	r7, #0
  40e90a:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  40e90e:	781a      	ldrb	r2, [r3, #0]
  40e910:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40e914:	3301      	adds	r3, #1
  40e916:	b1aa      	cbz	r2, 40e944 <__ssvfscanf_r+0x404>
  40e918:	686a      	ldr	r2, [r5, #4]
  40e91a:	602b      	str	r3, [r5, #0]
  40e91c:	3701      	adds	r7, #1
  40e91e:	3a01      	subs	r2, #1
  40e920:	42bc      	cmp	r4, r7
  40e922:	606a      	str	r2, [r5, #4]
  40e924:	d0e3      	beq.n	40e8ee <__ssvfscanf_r+0x3ae>
  40e926:	2a00      	cmp	r2, #0
  40e928:	dcf1      	bgt.n	40e90e <__ssvfscanf_r+0x3ce>
  40e92a:	4630      	mov	r0, r6
  40e92c:	4629      	mov	r1, r5
  40e92e:	f005 fedb 	bl	4146e8 <__ssrefill_r>
  40e932:	2800      	cmp	r0, #0
  40e934:	d1db      	bne.n	40e8ee <__ssvfscanf_r+0x3ae>
  40e936:	682b      	ldr	r3, [r5, #0]
  40e938:	781a      	ldrb	r2, [r3, #0]
  40e93a:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40e93e:	3301      	adds	r3, #1
  40e940:	2a00      	cmp	r2, #0
  40e942:	d1e9      	bne.n	40e918 <__ssvfscanf_r+0x3d8>
  40e944:	2f00      	cmp	r7, #0
  40e946:	f43f ae42 	beq.w	40e5ce <__ssvfscanf_r+0x8e>
  40e94a:	44b9      	add	r9, r7
  40e94c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40e950:	e7d0      	b.n	40e8f4 <__ssvfscanf_r+0x3b4>
  40e952:	bf00      	nop
  40e954:	00414009 	.word	0x00414009
  40e958:	2000079c 	.word	0x2000079c
  40e95c:	f8df 9364 	ldr.w	r9, [pc, #868]	; 40ecc4 <__ssvfscanf_r+0x784>
  40e960:	f939 6016 	ldrsh.w	r6, [r9, r6, lsl #1]
  40e964:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  40e968:	686a      	ldr	r2, [r5, #4]
  40e96a:	f88a 1000 	strb.w	r1, [sl]
  40e96e:	3a01      	subs	r2, #1
  40e970:	2a00      	cmp	r2, #0
  40e972:	f10a 0a01 	add.w	sl, sl, #1
  40e976:	606a      	str	r2, [r5, #4]
  40e978:	dd38      	ble.n	40e9ec <__ssvfscanf_r+0x4ac>
  40e97a:	3001      	adds	r0, #1
  40e97c:	6028      	str	r0, [r5, #0]
  40e97e:	3c01      	subs	r4, #1
  40e980:	f47f af17 	bne.w	40e7b2 <__ssvfscanf_r+0x272>
  40e984:	05f9      	lsls	r1, r7, #23
  40e986:	960c      	str	r6, [sp, #48]	; 0x30
  40e988:	46e1      	mov	r9, ip
  40e98a:	465e      	mov	r6, fp
  40e98c:	469b      	mov	fp, r3
  40e98e:	d508      	bpl.n	40e9a2 <__ssvfscanf_r+0x462>
  40e990:	9c05      	ldr	r4, [sp, #20]
  40e992:	45a2      	cmp	sl, r4
  40e994:	f200 840a 	bhi.w	40f1ac <__ssvfscanf_r+0xc6c>
  40e998:	f8dd c014 	ldr.w	ip, [sp, #20]
  40e99c:	45e2      	cmp	sl, ip
  40e99e:	f43f ae16 	beq.w	40e5ce <__ssvfscanf_r+0x8e>
  40e9a2:	f017 0410 	ands.w	r4, r7, #16
  40e9a6:	f000 8372 	beq.w	40f08e <__ssvfscanf_r+0xb4e>
  40e9aa:	f8dd c014 	ldr.w	ip, [sp, #20]
  40e9ae:	ebcc 0a0a 	rsb	sl, ip, sl
  40e9b2:	44d3      	add	fp, sl
  40e9b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40e9b8:	44d9      	add	r9, fp
  40e9ba:	4652      	mov	r2, sl
  40e9bc:	e601      	b.n	40e5c2 <__ssvfscanf_r+0x82>
  40e9be:	053a      	lsls	r2, r7, #20
  40e9c0:	d5d2      	bpl.n	40e968 <__ssvfscanf_r+0x428>
  40e9c2:	b916      	cbnz	r6, 40e9ca <__ssvfscanf_r+0x48a>
  40e9c4:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  40e9c8:	2608      	movs	r6, #8
  40e9ca:	057a      	lsls	r2, r7, #21
  40e9cc:	f100 837d 	bmi.w	40f0ca <__ssvfscanf_r+0xb8a>
  40e9d0:	9a08      	ldr	r2, [sp, #32]
  40e9d2:	f427 7760 	bic.w	r7, r7, #896	; 0x380
  40e9d6:	b112      	cbz	r2, 40e9de <__ssvfscanf_r+0x49e>
  40e9d8:	3a01      	subs	r2, #1
  40e9da:	9208      	str	r2, [sp, #32]
  40e9dc:	3401      	adds	r4, #1
  40e9de:	686a      	ldr	r2, [r5, #4]
  40e9e0:	3a01      	subs	r2, #1
  40e9e2:	2a00      	cmp	r2, #0
  40e9e4:	f103 0301 	add.w	r3, r3, #1
  40e9e8:	606a      	str	r2, [r5, #4]
  40e9ea:	dcc6      	bgt.n	40e97a <__ssvfscanf_r+0x43a>
  40e9ec:	4658      	mov	r0, fp
  40e9ee:	4629      	mov	r1, r5
  40e9f0:	9303      	str	r3, [sp, #12]
  40e9f2:	f8cd c010 	str.w	ip, [sp, #16]
  40e9f6:	f005 fe77 	bl	4146e8 <__ssrefill_r>
  40e9fa:	9b03      	ldr	r3, [sp, #12]
  40e9fc:	f8dd c010 	ldr.w	ip, [sp, #16]
  40ea00:	2800      	cmp	r0, #0
  40ea02:	d0bc      	beq.n	40e97e <__ssvfscanf_r+0x43e>
  40ea04:	e7be      	b.n	40e984 <__ssvfscanf_r+0x444>
  40ea06:	2e0a      	cmp	r6, #10
  40ea08:	ddbc      	ble.n	40e984 <__ssvfscanf_r+0x444>
  40ea0a:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  40ea0e:	e7ab      	b.n	40e968 <__ssvfscanf_r+0x428>
  40ea10:	063a      	lsls	r2, r7, #24
  40ea12:	d5b7      	bpl.n	40e984 <__ssvfscanf_r+0x444>
  40ea14:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40ea18:	e7a6      	b.n	40e968 <__ssvfscanf_r+0x428>
  40ea1a:	f407 62c0 	and.w	r2, r7, #1536	; 0x600
  40ea1e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40ea22:	d1af      	bne.n	40e984 <__ssvfscanf_r+0x444>
  40ea24:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  40ea28:	f447 67a0 	orr.w	r7, r7, #1280	; 0x500
  40ea2c:	2610      	movs	r6, #16
  40ea2e:	e79b      	b.n	40e968 <__ssvfscanf_r+0x428>
  40ea30:	4aa4      	ldr	r2, [pc, #656]	; (40ecc4 <__ssvfscanf_r+0x784>)
  40ea32:	f932 6016 	ldrsh.w	r6, [r2, r6, lsl #1]
  40ea36:	2e08      	cmp	r6, #8
  40ea38:	dce7      	bgt.n	40ea0a <__ssvfscanf_r+0x4ca>
  40ea3a:	e7a3      	b.n	40e984 <__ssvfscanf_r+0x444>
  40ea3c:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40ea40:	f047 0710 	orr.w	r7, r7, #16
  40ea44:	4692      	mov	sl, r2
  40ea46:	e5cc      	b.n	40e5e2 <__ssvfscanf_r+0xa2>
  40ea48:	9207      	str	r2, [sp, #28]
  40ea4a:	f047 0701 	orr.w	r7, r7, #1
  40ea4e:	686b      	ldr	r3, [r5, #4]
  40ea50:	489d      	ldr	r0, [pc, #628]	; (40ecc8 <__ssvfscanf_r+0x788>)
  40ea52:	9009      	str	r0, [sp, #36]	; 0x24
  40ea54:	210a      	movs	r1, #10
  40ea56:	2b00      	cmp	r3, #0
  40ea58:	910c      	str	r1, [sp, #48]	; 0x30
  40ea5a:	f04f 0a03 	mov.w	sl, #3
  40ea5e:	f73f ae67 	bgt.w	40e730 <__ssvfscanf_r+0x1f0>
  40ea62:	4630      	mov	r0, r6
  40ea64:	4629      	mov	r1, r5
  40ea66:	f005 fe3f 	bl	4146e8 <__ssrefill_r>
  40ea6a:	2800      	cmp	r0, #0
  40ea6c:	f43f ae60 	beq.w	40e730 <__ssvfscanf_r+0x1f0>
  40ea70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40ea72:	2c00      	cmp	r4, #0
  40ea74:	f43f ae4b 	beq.w	40e70e <__ssvfscanf_r+0x1ce>
  40ea78:	89ab      	ldrh	r3, [r5, #12]
  40ea7a:	4620      	mov	r0, r4
  40ea7c:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ea80:	bf18      	it	ne
  40ea82:	f04f 30ff 	movne.w	r0, #4294967295
  40ea86:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40ea8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ea8e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40ea92:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  40ea96:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  40ea9a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40ea9e:	4692      	mov	sl, r2
  40eaa0:	e59f      	b.n	40e5e2 <__ssvfscanf_r+0xa2>
  40eaa2:	9207      	str	r2, [sp, #28]
  40eaa4:	2310      	movs	r3, #16
  40eaa6:	4a89      	ldr	r2, [pc, #548]	; (40eccc <__ssvfscanf_r+0x78c>)
  40eaa8:	9209      	str	r2, [sp, #36]	; 0x24
  40eaaa:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  40eaae:	930c      	str	r3, [sp, #48]	; 0x30
  40eab0:	f04f 0a03 	mov.w	sl, #3
  40eab4:	e638      	b.n	40e728 <__ssvfscanf_r+0x1e8>
  40eab6:	9207      	str	r2, [sp, #28]
  40eab8:	f047 0701 	orr.w	r7, r7, #1
  40eabc:	4a83      	ldr	r2, [pc, #524]	; (40eccc <__ssvfscanf_r+0x78c>)
  40eabe:	9209      	str	r2, [sp, #36]	; 0x24
  40eac0:	2308      	movs	r3, #8
  40eac2:	930c      	str	r3, [sp, #48]	; 0x30
  40eac4:	f04f 0a03 	mov.w	sl, #3
  40eac8:	e62e      	b.n	40e728 <__ssvfscanf_r+0x1e8>
  40eaca:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40eace:	f047 0702 	orr.w	r7, r7, #2
  40ead2:	4692      	mov	sl, r2
  40ead4:	e585      	b.n	40e5e2 <__ssvfscanf_r+0xa2>
  40ead6:	9207      	str	r2, [sp, #28]
  40ead8:	f04f 0a04 	mov.w	sl, #4
  40eadc:	e624      	b.n	40e728 <__ssvfscanf_r+0x1e8>
  40eade:	9207      	str	r2, [sp, #28]
  40eae0:	e7ec      	b.n	40eabc <__ssvfscanf_r+0x57c>
  40eae2:	06f9      	lsls	r1, r7, #27
  40eae4:	9207      	str	r2, [sp, #28]
  40eae6:	d462      	bmi.n	40ebae <__ssvfscanf_r+0x66e>
  40eae8:	077b      	lsls	r3, r7, #29
  40eaea:	f140 8381 	bpl.w	40f1f0 <__ssvfscanf_r+0xcb0>
  40eaee:	9c06      	ldr	r4, [sp, #24]
  40eaf0:	6823      	ldr	r3, [r4, #0]
  40eaf2:	3404      	adds	r4, #4
  40eaf4:	4692      	mov	sl, r2
  40eaf6:	f8a3 9000 	strh.w	r9, [r3]
  40eafa:	9406      	str	r4, [sp, #24]
  40eafc:	e560      	b.n	40e5c0 <__ssvfscanf_r+0x80>
  40eafe:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40eb02:	f047 0704 	orr.w	r7, r7, #4
  40eb06:	4692      	mov	sl, r2
  40eb08:	e56b      	b.n	40e5e2 <__ssvfscanf_r+0xa2>
  40eb0a:	9207      	str	r2, [sp, #28]
  40eb0c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40eb10:	f04f 0a00 	mov.w	sl, #0
  40eb14:	e608      	b.n	40e728 <__ssvfscanf_r+0x1e8>
  40eb16:	4611      	mov	r1, r2
  40eb18:	a816      	add	r0, sp, #88	; 0x58
  40eb1a:	9207      	str	r2, [sp, #28]
  40eb1c:	f004 fa78 	bl	413010 <__sccl>
  40eb20:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40eb24:	9007      	str	r0, [sp, #28]
  40eb26:	f04f 0a01 	mov.w	sl, #1
  40eb2a:	e5fd      	b.n	40e728 <__ssvfscanf_r+0x1e8>
  40eb2c:	9207      	str	r2, [sp, #28]
  40eb2e:	e78e      	b.n	40ea4e <__ssvfscanf_r+0x50e>
  40eb30:	4866      	ldr	r0, [pc, #408]	; (40eccc <__ssvfscanf_r+0x78c>)
  40eb32:	9207      	str	r2, [sp, #28]
  40eb34:	210a      	movs	r1, #10
  40eb36:	9009      	str	r0, [sp, #36]	; 0x24
  40eb38:	910c      	str	r1, [sp, #48]	; 0x30
  40eb3a:	f04f 0a03 	mov.w	sl, #3
  40eb3e:	e5f3      	b.n	40e728 <__ssvfscanf_r+0x1e8>
  40eb40:	9207      	str	r2, [sp, #28]
  40eb42:	f04f 0a02 	mov.w	sl, #2
  40eb46:	e5ef      	b.n	40e728 <__ssvfscanf_r+0x1e8>
  40eb48:	4860      	ldr	r0, [pc, #384]	; (40eccc <__ssvfscanf_r+0x78c>)
  40eb4a:	9207      	str	r2, [sp, #28]
  40eb4c:	2110      	movs	r1, #16
  40eb4e:	f447 7708 	orr.w	r7, r7, #544	; 0x220
  40eb52:	9009      	str	r0, [sp, #36]	; 0x24
  40eb54:	910c      	str	r1, [sp, #48]	; 0x30
  40eb56:	f04f 0a03 	mov.w	sl, #3
  40eb5a:	e5e5      	b.n	40e728 <__ssvfscanf_r+0x1e8>
  40eb5c:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40eb60:	2b6c      	cmp	r3, #108	; 0x6c
  40eb62:	f000 8336 	beq.w	40f1d2 <__ssvfscanf_r+0xc92>
  40eb66:	f047 0701 	orr.w	r7, r7, #1
  40eb6a:	4692      	mov	sl, r2
  40eb6c:	e539      	b.n	40e5e2 <__ssvfscanf_r+0xa2>
  40eb6e:	a814      	add	r0, sp, #80	; 0x50
  40eb70:	2100      	movs	r1, #0
  40eb72:	2208      	movs	r2, #8
  40eb74:	900a      	str	r0, [sp, #40]	; 0x28
  40eb76:	f7fe f80d 	bl	40cb94 <memset>
  40eb7a:	f017 0b10 	ands.w	fp, r7, #16
  40eb7e:	f000 82bd 	beq.w	40f0fc <__ssvfscanf_r+0xbbc>
  40eb82:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
  40eb86:	2200      	movs	r2, #0
  40eb88:	6829      	ldr	r1, [r5, #0]
  40eb8a:	f8d8 3000 	ldr.w	r3, [r8]
  40eb8e:	7809      	ldrb	r1, [r1, #0]
  40eb90:	440b      	add	r3, r1
  40eb92:	785b      	ldrb	r3, [r3, #1]
  40eb94:	0718      	lsls	r0, r3, #28
  40eb96:	d402      	bmi.n	40eb9e <__ssvfscanf_r+0x65e>
  40eb98:	2c00      	cmp	r4, #0
  40eb9a:	f040 8372 	bne.w	40f282 <__ssvfscanf_r+0xd42>
  40eb9e:	f1bb 0f00 	cmp.w	fp, #0
  40eba2:	d104      	bne.n	40ebae <__ssvfscanf_r+0x66e>
  40eba4:	f8ca b000 	str.w	fp, [sl]
  40eba8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40ebaa:	3401      	adds	r4, #1
  40ebac:	940b      	str	r4, [sp, #44]	; 0x2c
  40ebae:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40ebb2:	4652      	mov	r2, sl
  40ebb4:	e505      	b.n	40e5c2 <__ssvfscanf_r+0x82>
  40ebb6:	440b      	add	r3, r1
  40ebb8:	9207      	str	r2, [sp, #28]
  40ebba:	785b      	ldrb	r3, [r3, #1]
  40ebbc:	f003 0303 	and.w	r3, r3, #3
  40ebc0:	2b01      	cmp	r3, #1
  40ebc2:	f47f af44 	bne.w	40ea4e <__ssvfscanf_r+0x50e>
  40ebc6:	f047 0701 	orr.w	r7, r7, #1
  40ebca:	e740      	b.n	40ea4e <__ssvfscanf_r+0x50e>
  40ebcc:	4630      	mov	r0, r6
  40ebce:	f002 ff83 	bl	411ad8 <_localeconv_r>
  40ebd2:	1e63      	subs	r3, r4, #1
  40ebd4:	6800      	ldr	r0, [r0, #0]
  40ebd6:	900f      	str	r0, [sp, #60]	; 0x3c
  40ebd8:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  40ebdc:	f240 81a5 	bls.w	40ef2a <__ssvfscanf_r+0x9ea>
  40ebe0:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
  40ebe4:	4404      	add	r4, r0
  40ebe6:	940d      	str	r4, [sp, #52]	; 0x34
  40ebe8:	f240 145d 	movw	r4, #349	; 0x15d
  40ebec:	f04f 0a00 	mov.w	sl, #0
  40ebf0:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40ebf4:	960e      	str	r6, [sp, #56]	; 0x38
  40ebf6:	f8cd c014 	str.w	ip, [sp, #20]
  40ebfa:	f447 67f0 	orr.w	r7, r7, #1920	; 0x780
  40ebfe:	4653      	mov	r3, sl
  40ec00:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  40ec04:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  40ec08:	f8cd a020 	str.w	sl, [sp, #32]
  40ec0c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40ec10:	46e3      	mov	fp, ip
  40ec12:	4656      	mov	r6, sl
  40ec14:	6828      	ldr	r0, [r5, #0]
  40ec16:	7802      	ldrb	r2, [r0, #0]
  40ec18:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
  40ec1c:	294e      	cmp	r1, #78	; 0x4e
  40ec1e:	f200 8156 	bhi.w	40eece <__ssvfscanf_r+0x98e>
  40ec22:	e8df f011 	tbh	[pc, r1, lsl #1]
  40ec26:	007e      	.short	0x007e
  40ec28:	007e0154 	.word	0x007e0154
  40ec2c:	01540154 	.word	0x01540154
  40ec30:	00550072 	.word	0x00550072
  40ec34:	00550055 	.word	0x00550055
  40ec38:	00550055 	.word	0x00550055
  40ec3c:	00550055 	.word	0x00550055
  40ec40:	00550055 	.word	0x00550055
  40ec44:	01540154 	.word	0x01540154
  40ec48:	01540154 	.word	0x01540154
  40ec4c:	01540154 	.word	0x01540154
  40ec50:	014f0154 	.word	0x014f0154
  40ec54:	01540154 	.word	0x01540154
  40ec58:	01350154 	.word	0x01350154
  40ec5c:	0154012e 	.word	0x0154012e
  40ec60:	00a40154 	.word	0x00a40154
  40ec64:	01540154 	.word	0x01540154
  40ec68:	01540154 	.word	0x01540154
  40ec6c:	0154008f 	.word	0x0154008f
  40ec70:	01540154 	.word	0x01540154
  40ec74:	01540154 	.word	0x01540154
  40ec78:	01540089 	.word	0x01540089
  40ec7c:	01540154 	.word	0x01540154
  40ec80:	00830154 	.word	0x00830154
  40ec84:	01540154 	.word	0x01540154
  40ec88:	01540154 	.word	0x01540154
  40ec8c:	01540154 	.word	0x01540154
  40ec90:	014f0154 	.word	0x014f0154
  40ec94:	01540154 	.word	0x01540154
  40ec98:	01350154 	.word	0x01350154
  40ec9c:	0154012e 	.word	0x0154012e
  40eca0:	00a40154 	.word	0x00a40154
  40eca4:	01540154 	.word	0x01540154
  40eca8:	01540154 	.word	0x01540154
  40ecac:	0154008f 	.word	0x0154008f
  40ecb0:	01540154 	.word	0x01540154
  40ecb4:	01540154 	.word	0x01540154
  40ecb8:	01540089 	.word	0x01540089
  40ecbc:	01540154 	.word	0x01540154
  40ecc0:	00830154 	.word	0x00830154
  40ecc4:	004161d8 	.word	0x004161d8
  40ecc8:	00414009 	.word	0x00414009
  40eccc:	004142b9 	.word	0x004142b9
  40ecd0:	eb03 010a 	add.w	r1, r3, sl
  40ecd4:	b999      	cbnz	r1, 40ecfe <__ssvfscanf_r+0x7be>
  40ecd6:	f427 77c0 	bic.w	r7, r7, #384	; 0x180
  40ecda:	f88b 2000 	strb.w	r2, [fp]
  40ecde:	f10b 0b01 	add.w	fp, fp, #1
  40ece2:	686a      	ldr	r2, [r5, #4]
  40ece4:	3a01      	subs	r2, #1
  40ece6:	2a00      	cmp	r2, #0
  40ece8:	f104 34ff 	add.w	r4, r4, #4294967295
  40ecec:	f109 0901 	add.w	r9, r9, #1
  40ecf0:	606a      	str	r2, [r5, #4]
  40ecf2:	f340 80fa 	ble.w	40eeea <__ssvfscanf_r+0x9aa>
  40ecf6:	3001      	adds	r0, #1
  40ecf8:	6028      	str	r0, [r5, #0]
  40ecfa:	2c00      	cmp	r4, #0
  40ecfc:	d18a      	bne.n	40ec14 <__ssvfscanf_r+0x6d4>
  40ecfe:	9608      	str	r6, [sp, #32]
  40ed00:	9c08      	ldr	r4, [sp, #32]
  40ed02:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40ed04:	2c00      	cmp	r4, #0
  40ed06:	d041      	beq.n	40ed8c <__ssvfscanf_r+0x84c>
  40ed08:	e10c      	b.n	40ef24 <__ssvfscanf_r+0x9e4>
  40ed0a:	05f9      	lsls	r1, r7, #23
  40ed0c:	d5e0      	bpl.n	40ecd0 <__ssvfscanf_r+0x790>
  40ed0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40ed10:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40ed14:	3601      	adds	r6, #1
  40ed16:	2a00      	cmp	r2, #0
  40ed18:	d0e3      	beq.n	40ece2 <__ssvfscanf_r+0x7a2>
  40ed1a:	3a01      	subs	r2, #1
  40ed1c:	920d      	str	r2, [sp, #52]	; 0x34
  40ed1e:	3401      	adds	r4, #1
  40ed20:	e7df      	b.n	40ece2 <__ssvfscanf_r+0x7a2>
  40ed22:	0639      	lsls	r1, r7, #24
  40ed24:	d5eb      	bpl.n	40ecfe <__ssvfscanf_r+0x7be>
  40ed26:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40ed2a:	e7d6      	b.n	40ecda <__ssvfscanf_r+0x79a>
  40ed2c:	f1ba 0f07 	cmp.w	sl, #7
  40ed30:	d1e5      	bne.n	40ecfe <__ssvfscanf_r+0x7be>
  40ed32:	f04f 0a08 	mov.w	sl, #8
  40ed36:	e7d0      	b.n	40ecda <__ssvfscanf_r+0x79a>
  40ed38:	f1ba 0f06 	cmp.w	sl, #6
  40ed3c:	d1df      	bne.n	40ecfe <__ssvfscanf_r+0x7be>
  40ed3e:	f04f 0a07 	mov.w	sl, #7
  40ed42:	e7ca      	b.n	40ecda <__ssvfscanf_r+0x79a>
  40ed44:	2b00      	cmp	r3, #0
  40ed46:	f040 80e6 	bne.w	40ef16 <__ssvfscanf_r+0x9d6>
  40ed4a:	b92e      	cbnz	r6, 40ed58 <__ssvfscanf_r+0x818>
  40ed4c:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  40ed50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  40ed54:	f000 8239 	beq.w	40f1ca <__ssvfscanf_r+0xc8a>
  40ed58:	f1ba 0f01 	cmp.w	sl, #1
  40ed5c:	d002      	beq.n	40ed64 <__ssvfscanf_r+0x824>
  40ed5e:	f1ba 0f04 	cmp.w	sl, #4
  40ed62:	d1cc      	bne.n	40ecfe <__ssvfscanf_r+0x7be>
  40ed64:	f10a 0a01 	add.w	sl, sl, #1
  40ed68:	fa5f fa8a 	uxtb.w	sl, sl
  40ed6c:	e7b5      	b.n	40ecda <__ssvfscanf_r+0x79a>
  40ed6e:	f1ba 0f00 	cmp.w	sl, #0
  40ed72:	f040 80c7 	bne.w	40ef04 <__ssvfscanf_r+0x9c4>
  40ed76:	2e00      	cmp	r6, #0
  40ed78:	f040 80d2 	bne.w	40ef20 <__ssvfscanf_r+0x9e0>
  40ed7c:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  40ed80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  40ed84:	f000 821c 	beq.w	40f1c0 <__ssvfscanf_r+0xc80>
  40ed88:	9608      	str	r6, [sp, #32]
  40ed8a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40ed8c:	f103 3cff 	add.w	ip, r3, #4294967295
  40ed90:	f1bc 0f01 	cmp.w	ip, #1
  40ed94:	f240 82dc 	bls.w	40f350 <__ssvfscanf_r+0xe10>
  40ed98:	f10a 32ff 	add.w	r2, sl, #4294967295
  40ed9c:	2a06      	cmp	r2, #6
  40ed9e:	d822      	bhi.n	40ede6 <__ssvfscanf_r+0x8a6>
  40eda0:	f1ba 0f02 	cmp.w	sl, #2
  40eda4:	f240 82ad 	bls.w	40f302 <__ssvfscanf_r+0xdc2>
  40eda8:	f1ba 0f03 	cmp.w	sl, #3
  40edac:	d01b      	beq.n	40ede6 <__ssvfscanf_r+0x8a6>
  40edae:	f1aa 0a04 	sub.w	sl, sl, #4
  40edb2:	fa5f fa8a 	uxtb.w	sl, sl
  40edb6:	f10b 34ff 	add.w	r4, fp, #4294967295
  40edba:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40edbe:	ebca 0404 	rsb	r4, sl, r4
  40edc2:	46da      	mov	sl, fp
  40edc4:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
  40edc8:	4630      	mov	r0, r6
  40edca:	462a      	mov	r2, r5
  40edcc:	f005 fc4c 	bl	414668 <_sungetc_r>
  40edd0:	45a2      	cmp	sl, r4
  40edd2:	d1f7      	bne.n	40edc4 <__ssvfscanf_r+0x884>
  40edd4:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40edd8:	f109 39ff 	add.w	r9, r9, #4294967295
  40eddc:	ea6f 020c 	mvn.w	r2, ip
  40ede0:	ebcc 0909 	rsb	r9, ip, r9
  40ede4:	4493      	add	fp, r2
  40ede6:	05f8      	lsls	r0, r7, #23
  40ede8:	d51c      	bpl.n	40ee24 <__ssvfscanf_r+0x8e4>
  40edea:	0579      	lsls	r1, r7, #21
  40edec:	f100 829b 	bmi.w	40f326 <__ssvfscanf_r+0xde6>
  40edf0:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
  40edf4:	2965      	cmp	r1, #101	; 0x65
  40edf6:	f10b 34ff 	add.w	r4, fp, #4294967295
  40edfa:	f109 3aff 	add.w	sl, r9, #4294967295
  40edfe:	d00b      	beq.n	40ee18 <__ssvfscanf_r+0x8d8>
  40ee00:	2945      	cmp	r1, #69	; 0x45
  40ee02:	d009      	beq.n	40ee18 <__ssvfscanf_r+0x8d8>
  40ee04:	4630      	mov	r0, r6
  40ee06:	462a      	mov	r2, r5
  40ee08:	f005 fc2e 	bl	414668 <_sungetc_r>
  40ee0c:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
  40ee10:	f1a9 0a02 	sub.w	sl, r9, #2
  40ee14:	f1ab 0402 	sub.w	r4, fp, #2
  40ee18:	4630      	mov	r0, r6
  40ee1a:	462a      	mov	r2, r5
  40ee1c:	f005 fc24 	bl	414668 <_sungetc_r>
  40ee20:	46d1      	mov	r9, sl
  40ee22:	46a3      	mov	fp, r4
  40ee24:	f017 0210 	ands.w	r2, r7, #16
  40ee28:	f47f aec1 	bne.w	40ebae <__ssvfscanf_r+0x66e>
  40ee2c:	f407 61c0 	and.w	r1, r7, #1536	; 0x600
  40ee30:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  40ee34:	f88b 2000 	strb.w	r2, [fp]
  40ee38:	f000 81d3 	beq.w	40f1e2 <__ssvfscanf_r+0xca2>
  40ee3c:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40ee3e:	2c00      	cmp	r4, #0
  40ee40:	f040 816e 	bne.w	40f120 <__ssvfscanf_r+0xbe0>
  40ee44:	2200      	movs	r2, #0
  40ee46:	9905      	ldr	r1, [sp, #20]
  40ee48:	4630      	mov	r0, r6
  40ee4a:	f004 f93d 	bl	4130c8 <_strtod_r>
  40ee4e:	07fa      	lsls	r2, r7, #31
  40ee50:	4682      	mov	sl, r0
  40ee52:	468b      	mov	fp, r1
  40ee54:	f100 8132 	bmi.w	40f0bc <__ssvfscanf_r+0xb7c>
  40ee58:	07bb      	lsls	r3, r7, #30
  40ee5a:	f140 81e8 	bpl.w	40f22e <__ssvfscanf_r+0xcee>
  40ee5e:	f8dd c018 	ldr.w	ip, [sp, #24]
  40ee62:	f8dc 3000 	ldr.w	r3, [ip]
  40ee66:	f10c 0c04 	add.w	ip, ip, #4
  40ee6a:	f8cd c018 	str.w	ip, [sp, #24]
  40ee6e:	e9c3 ab00 	strd	sl, fp, [r3]
  40ee72:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40ee74:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40ee78:	3401      	adds	r4, #1
  40ee7a:	940b      	str	r4, [sp, #44]	; 0x2c
  40ee7c:	4652      	mov	r2, sl
  40ee7e:	f7ff bba0 	b.w	40e5c2 <__ssvfscanf_r+0x82>
  40ee82:	f1ba 0f02 	cmp.w	sl, #2
  40ee86:	f47f af3a 	bne.w	40ecfe <__ssvfscanf_r+0x7be>
  40ee8a:	f04f 0a03 	mov.w	sl, #3
  40ee8e:	e724      	b.n	40ecda <__ssvfscanf_r+0x79a>
  40ee90:	f407 61a0 	and.w	r1, r7, #1280	; 0x500
  40ee94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  40ee98:	d005      	beq.n	40eea6 <__ssvfscanf_r+0x966>
  40ee9a:	0579      	lsls	r1, r7, #21
  40ee9c:	f57f af2f 	bpl.w	40ecfe <__ssvfscanf_r+0x7be>
  40eea0:	2e00      	cmp	r6, #0
  40eea2:	f43f af71 	beq.w	40ed88 <__ssvfscanf_r+0x848>
  40eea6:	05b9      	lsls	r1, r7, #22
  40eea8:	d406      	bmi.n	40eeb8 <__ssvfscanf_r+0x978>
  40eeaa:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40eeae:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  40eeb2:	ebcc 0606 	rsb	r6, ip, r6
  40eeb6:	9610      	str	r6, [sp, #64]	; 0x40
  40eeb8:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40eebc:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
  40eec0:	2600      	movs	r6, #0
  40eec2:	e70a      	b.n	40ecda <__ssvfscanf_r+0x79a>
  40eec4:	2b01      	cmp	r3, #1
  40eec6:	f47f af1a 	bne.w	40ecfe <__ssvfscanf_r+0x7be>
  40eeca:	2302      	movs	r3, #2
  40eecc:	e705      	b.n	40ecda <__ssvfscanf_r+0x79a>
  40eece:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  40eed2:	f89c 1000 	ldrb.w	r1, [ip]
  40eed6:	4291      	cmp	r1, r2
  40eed8:	f47f af11 	bne.w	40ecfe <__ssvfscanf_r+0x7be>
  40eedc:	05b9      	lsls	r1, r7, #22
  40eede:	f57f af0e 	bpl.w	40ecfe <__ssvfscanf_r+0x7be>
  40eee2:	f427 7720 	bic.w	r7, r7, #640	; 0x280
  40eee6:	960a      	str	r6, [sp, #40]	; 0x28
  40eee8:	e6f7      	b.n	40ecda <__ssvfscanf_r+0x79a>
  40eeea:	980e      	ldr	r0, [sp, #56]	; 0x38
  40eeec:	9303      	str	r3, [sp, #12]
  40eeee:	4629      	mov	r1, r5
  40eef0:	f005 fbfa 	bl	4146e8 <__ssrefill_r>
  40eef4:	9b03      	ldr	r3, [sp, #12]
  40eef6:	2800      	cmp	r0, #0
  40eef8:	f47f af01 	bne.w	40ecfe <__ssvfscanf_r+0x7be>
  40eefc:	2c00      	cmp	r4, #0
  40eefe:	f47f ae89 	bne.w	40ec14 <__ssvfscanf_r+0x6d4>
  40ef02:	e6fc      	b.n	40ecfe <__ssvfscanf_r+0x7be>
  40ef04:	f1ba 0f03 	cmp.w	sl, #3
  40ef08:	f43f af2c 	beq.w	40ed64 <__ssvfscanf_r+0x824>
  40ef0c:	f1ba 0f05 	cmp.w	sl, #5
  40ef10:	f43f af28 	beq.w	40ed64 <__ssvfscanf_r+0x824>
  40ef14:	e6f3      	b.n	40ecfe <__ssvfscanf_r+0x7be>
  40ef16:	2b02      	cmp	r3, #2
  40ef18:	f47f af1e 	bne.w	40ed58 <__ssvfscanf_r+0x818>
  40ef1c:	2303      	movs	r3, #3
  40ef1e:	e6dc      	b.n	40ecda <__ssvfscanf_r+0x79a>
  40ef20:	9608      	str	r6, [sp, #32]
  40ef22:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40ef24:	f427 7780 	bic.w	r7, r7, #256	; 0x100
  40ef28:	e730      	b.n	40ed8c <__ssvfscanf_r+0x84c>
  40ef2a:	2200      	movs	r2, #0
  40ef2c:	920d      	str	r2, [sp, #52]	; 0x34
  40ef2e:	e65d      	b.n	40ebec <__ssvfscanf_r+0x6ac>
  40ef30:	f8dd c018 	ldr.w	ip, [sp, #24]
  40ef34:	f8dc 7000 	ldr.w	r7, [ip]
  40ef38:	f10c 0204 	add.w	r2, ip, #4
  40ef3c:	9206      	str	r2, [sp, #24]
  40ef3e:	46ba      	mov	sl, r7
  40ef40:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  40ef44:	682b      	ldr	r3, [r5, #0]
  40ef46:	781a      	ldrb	r2, [r3, #0]
  40ef48:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40ef4c:	1c59      	adds	r1, r3, #1
  40ef4e:	b1a2      	cbz	r2, 40ef7a <__ssvfscanf_r+0xa3a>
  40ef50:	686a      	ldr	r2, [r5, #4]
  40ef52:	6029      	str	r1, [r5, #0]
  40ef54:	3a01      	subs	r2, #1
  40ef56:	606a      	str	r2, [r5, #4]
  40ef58:	781b      	ldrb	r3, [r3, #0]
  40ef5a:	f80a 3b01 	strb.w	r3, [sl], #1
  40ef5e:	3c01      	subs	r4, #1
  40ef60:	d00b      	beq.n	40ef7a <__ssvfscanf_r+0xa3a>
  40ef62:	686b      	ldr	r3, [r5, #4]
  40ef64:	2b00      	cmp	r3, #0
  40ef66:	dced      	bgt.n	40ef44 <__ssvfscanf_r+0xa04>
  40ef68:	4630      	mov	r0, r6
  40ef6a:	4629      	mov	r1, r5
  40ef6c:	f005 fbbc 	bl	4146e8 <__ssrefill_r>
  40ef70:	2800      	cmp	r0, #0
  40ef72:	d0e7      	beq.n	40ef44 <__ssvfscanf_r+0xa04>
  40ef74:	4557      	cmp	r7, sl
  40ef76:	f43f ad7b 	beq.w	40ea70 <__ssvfscanf_r+0x530>
  40ef7a:	ebba 0707 	subs.w	r7, sl, r7
  40ef7e:	f43f ab26 	beq.w	40e5ce <__ssvfscanf_r+0x8e>
  40ef82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40ef84:	2300      	movs	r3, #0
  40ef86:	3401      	adds	r4, #1
  40ef88:	f88a 3000 	strb.w	r3, [sl]
  40ef8c:	940b      	str	r4, [sp, #44]	; 0x2c
  40ef8e:	44b9      	add	r9, r7
  40ef90:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40ef94:	e4ae      	b.n	40e8f4 <__ssvfscanf_r+0x3b4>
  40ef96:	f8dd c018 	ldr.w	ip, [sp, #24]
  40ef9a:	f8dc 7000 	ldr.w	r7, [ip]
  40ef9e:	f10c 0a04 	add.w	sl, ip, #4
  40efa2:	46bb      	mov	fp, r7
  40efa4:	682b      	ldr	r3, [r5, #0]
  40efa6:	f8d8 2000 	ldr.w	r2, [r8]
  40efaa:	7819      	ldrb	r1, [r3, #0]
  40efac:	440a      	add	r2, r1
  40efae:	1c59      	adds	r1, r3, #1
  40efb0:	7852      	ldrb	r2, [r2, #1]
  40efb2:	0710      	lsls	r0, r2, #28
  40efb4:	d411      	bmi.n	40efda <__ssvfscanf_r+0xa9a>
  40efb6:	686a      	ldr	r2, [r5, #4]
  40efb8:	6029      	str	r1, [r5, #0]
  40efba:	3a01      	subs	r2, #1
  40efbc:	606a      	str	r2, [r5, #4]
  40efbe:	781b      	ldrb	r3, [r3, #0]
  40efc0:	f80b 3b01 	strb.w	r3, [fp], #1
  40efc4:	3c01      	subs	r4, #1
  40efc6:	d008      	beq.n	40efda <__ssvfscanf_r+0xa9a>
  40efc8:	686b      	ldr	r3, [r5, #4]
  40efca:	2b00      	cmp	r3, #0
  40efcc:	dcea      	bgt.n	40efa4 <__ssvfscanf_r+0xa64>
  40efce:	4630      	mov	r0, r6
  40efd0:	4629      	mov	r1, r5
  40efd2:	f005 fb89 	bl	4146e8 <__ssrefill_r>
  40efd6:	2800      	cmp	r0, #0
  40efd8:	d0e4      	beq.n	40efa4 <__ssvfscanf_r+0xa64>
  40efda:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40efdc:	f8cd a018 	str.w	sl, [sp, #24]
  40efe0:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40efe4:	ebc7 070b 	rsb	r7, r7, fp
  40efe8:	2300      	movs	r3, #0
  40efea:	3401      	adds	r4, #1
  40efec:	44b9      	add	r9, r7
  40efee:	940b      	str	r4, [sp, #44]	; 0x2c
  40eff0:	f88b 3000 	strb.w	r3, [fp]
  40eff4:	4652      	mov	r2, sl
  40eff6:	f7ff bae4 	b.w	40e5c2 <__ssvfscanf_r+0x82>
  40effa:	ab14      	add	r3, sp, #80	; 0x50
  40effc:	4618      	mov	r0, r3
  40effe:	2100      	movs	r1, #0
  40f000:	2208      	movs	r2, #8
  40f002:	930a      	str	r3, [sp, #40]	; 0x28
  40f004:	f7fd fdc6 	bl	40cb94 <memset>
  40f008:	f017 0710 	ands.w	r7, r7, #16
  40f00c:	970d      	str	r7, [sp, #52]	; 0x34
  40f00e:	d06c      	beq.n	40f0ea <__ssvfscanf_r+0xbaa>
  40f010:	f04f 0a00 	mov.w	sl, #0
  40f014:	9608      	str	r6, [sp, #32]
  40f016:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40f018:	f8cd 9014 	str.w	r9, [sp, #20]
  40f01c:	f04f 0b00 	mov.w	fp, #0
  40f020:	af56      	add	r7, sp, #344	; 0x158
  40f022:	f002 fd53 	bl	411acc <__locale_mb_cur_max>
  40f026:	4558      	cmp	r0, fp
  40f028:	f43f ad22 	beq.w	40ea70 <__ssvfscanf_r+0x530>
  40f02c:	682b      	ldr	r3, [r5, #0]
  40f02e:	6869      	ldr	r1, [r5, #4]
  40f030:	f813 eb01 	ldrb.w	lr, [r3], #1
  40f034:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f036:	602b      	str	r3, [r5, #0]
  40f038:	3901      	subs	r1, #1
  40f03a:	f10b 0901 	add.w	r9, fp, #1
  40f03e:	9000      	str	r0, [sp, #0]
  40f040:	464b      	mov	r3, r9
  40f042:	6069      	str	r1, [r5, #4]
  40f044:	9808      	ldr	r0, [sp, #32]
  40f046:	f807 e00b 	strb.w	lr, [r7, fp]
  40f04a:	4651      	mov	r1, sl
  40f04c:	463a      	mov	r2, r7
  40f04e:	f003 f86f 	bl	412130 <_mbrtowc_r>
  40f052:	1c43      	adds	r3, r0, #1
  40f054:	f43f ad0c 	beq.w	40ea70 <__ssvfscanf_r+0x530>
  40f058:	2800      	cmp	r0, #0
  40f05a:	d177      	bne.n	40f14c <__ssvfscanf_r+0xc0c>
  40f05c:	b90e      	cbnz	r6, 40f062 <__ssvfscanf_r+0xb22>
  40f05e:	f8ca 6000 	str.w	r6, [sl]
  40f062:	9905      	ldr	r1, [sp, #20]
  40f064:	4449      	add	r1, r9
  40f066:	9105      	str	r1, [sp, #20]
  40f068:	3c01      	subs	r4, #1
  40f06a:	2e00      	cmp	r6, #0
  40f06c:	d172      	bne.n	40f154 <__ssvfscanf_r+0xc14>
  40f06e:	f10a 0a04 	add.w	sl, sl, #4
  40f072:	46b3      	mov	fp, r6
  40f074:	686b      	ldr	r3, [r5, #4]
  40f076:	2b00      	cmp	r3, #0
  40f078:	dd2a      	ble.n	40f0d0 <__ssvfscanf_r+0xb90>
  40f07a:	2c00      	cmp	r4, #0
  40f07c:	d1d1      	bne.n	40f022 <__ssvfscanf_r+0xae2>
  40f07e:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40f082:	9e08      	ldr	r6, [sp, #32]
  40f084:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40f086:	2c00      	cmp	r4, #0
  40f088:	f43f ad8e 	beq.w	40eba8 <__ssvfscanf_r+0x668>
  40f08c:	e58f      	b.n	40ebae <__ssvfscanf_r+0x66e>
  40f08e:	4622      	mov	r2, r4
  40f090:	f88a 4000 	strb.w	r4, [sl]
  40f094:	4630      	mov	r0, r6
  40f096:	9905      	ldr	r1, [sp, #20]
  40f098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f09a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40f09c:	47a0      	blx	r4
  40f09e:	06ba      	lsls	r2, r7, #26
  40f0a0:	d535      	bpl.n	40f10e <__ssvfscanf_r+0xbce>
  40f0a2:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f0a6:	f8dc 3000 	ldr.w	r3, [ip]
  40f0aa:	f10c 0c04 	add.w	ip, ip, #4
  40f0ae:	f8cd c018 	str.w	ip, [sp, #24]
  40f0b2:	6018      	str	r0, [r3, #0]
  40f0b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40f0b6:	3401      	adds	r4, #1
  40f0b8:	940b      	str	r4, [sp, #44]	; 0x2c
  40f0ba:	e476      	b.n	40e9aa <__ssvfscanf_r+0x46a>
  40f0bc:	9c06      	ldr	r4, [sp, #24]
  40f0be:	6823      	ldr	r3, [r4, #0]
  40f0c0:	3404      	adds	r4, #4
  40f0c2:	9406      	str	r4, [sp, #24]
  40f0c4:	e9c3 ab00 	strd	sl, fp, [r3]
  40f0c8:	e6d3      	b.n	40ee72 <__ssvfscanf_r+0x932>
  40f0ca:	f427 67b0 	bic.w	r7, r7, #1408	; 0x580
  40f0ce:	e44b      	b.n	40e968 <__ssvfscanf_r+0x428>
  40f0d0:	9808      	ldr	r0, [sp, #32]
  40f0d2:	4629      	mov	r1, r5
  40f0d4:	f005 fb08 	bl	4146e8 <__ssrefill_r>
  40f0d8:	2800      	cmp	r0, #0
  40f0da:	d0ce      	beq.n	40f07a <__ssvfscanf_r+0xb3a>
  40f0dc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40f0e0:	9e08      	ldr	r6, [sp, #32]
  40f0e2:	f1bb 0f00 	cmp.w	fp, #0
  40f0e6:	d0cd      	beq.n	40f084 <__ssvfscanf_r+0xb44>
  40f0e8:	e4c2      	b.n	40ea70 <__ssvfscanf_r+0x530>
  40f0ea:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f0ee:	f8dc a000 	ldr.w	sl, [ip]
  40f0f2:	f10c 0c04 	add.w	ip, ip, #4
  40f0f6:	f8cd c018 	str.w	ip, [sp, #24]
  40f0fa:	e78b      	b.n	40f014 <__ssvfscanf_r+0xad4>
  40f0fc:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f100:	f8dc a000 	ldr.w	sl, [ip]
  40f104:	f10c 0c04 	add.w	ip, ip, #4
  40f108:	f8cd c018 	str.w	ip, [sp, #24]
  40f10c:	e53b      	b.n	40eb86 <__ssvfscanf_r+0x646>
  40f10e:	077b      	lsls	r3, r7, #29
  40f110:	f140 809b 	bpl.w	40f24a <__ssvfscanf_r+0xd0a>
  40f114:	9c06      	ldr	r4, [sp, #24]
  40f116:	6823      	ldr	r3, [r4, #0]
  40f118:	3404      	adds	r4, #4
  40f11a:	9406      	str	r4, [sp, #24]
  40f11c:	8018      	strh	r0, [r3, #0]
  40f11e:	e7c9      	b.n	40f0b4 <__ssvfscanf_r+0xb74>
  40f120:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  40f124:	4630      	mov	r0, r6
  40f126:	f10c 0101 	add.w	r1, ip, #1
  40f12a:	230a      	movs	r3, #10
  40f12c:	f004 ff6c 	bl	414008 <_strtol_r>
  40f130:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
  40f134:	1b02      	subs	r2, r0, r4
  40f136:	f20d 21ab 	addw	r1, sp, #683	; 0x2ab
  40f13a:	458b      	cmp	fp, r1
  40f13c:	bf28      	it	cs
  40f13e:	f20d 2baa 	addwcs	fp, sp, #682	; 0x2aa
  40f142:	4658      	mov	r0, fp
  40f144:	499b      	ldr	r1, [pc, #620]	; (40f3b4 <__ssvfscanf_r+0xe74>)
  40f146:	f7fd fe2d 	bl	40cda4 <sprintf>
  40f14a:	e67b      	b.n	40ee44 <__ssvfscanf_r+0x904>
  40f14c:	3002      	adds	r0, #2
  40f14e:	d188      	bne.n	40f062 <__ssvfscanf_r+0xb22>
  40f150:	46cb      	mov	fp, r9
  40f152:	e78f      	b.n	40f074 <__ssvfscanf_r+0xb34>
  40f154:	f04f 0b00 	mov.w	fp, #0
  40f158:	e78c      	b.n	40f074 <__ssvfscanf_r+0xb34>
  40f15a:	2f00      	cmp	r7, #0
  40f15c:	f43f ac88 	beq.w	40ea70 <__ssvfscanf_r+0x530>
  40f160:	44b9      	add	r9, r7
  40f162:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f166:	f7ff bbc5 	b.w	40e8f4 <__ssvfscanf_r+0x3b4>
  40f16a:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f16e:	4623      	mov	r3, r4
  40f170:	f8dc 1000 	ldr.w	r1, [ip]
  40f174:	9500      	str	r5, [sp, #0]
  40f176:	4630      	mov	r0, r6
  40f178:	2201      	movs	r2, #1
  40f17a:	f005 fad3 	bl	414724 <_sfread_r>
  40f17e:	9c06      	ldr	r4, [sp, #24]
  40f180:	1d23      	adds	r3, r4, #4
  40f182:	2800      	cmp	r0, #0
  40f184:	f43f ac74 	beq.w	40ea70 <__ssvfscanf_r+0x530>
  40f188:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40f18a:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f18e:	9306      	str	r3, [sp, #24]
  40f190:	3401      	adds	r4, #1
  40f192:	4481      	add	r9, r0
  40f194:	940b      	str	r4, [sp, #44]	; 0x2c
  40f196:	4652      	mov	r2, sl
  40f198:	f7ff ba13 	b.w	40e5c2 <__ssvfscanf_r+0x82>
  40f19c:	4630      	mov	r0, r6
  40f19e:	4629      	mov	r1, r5
  40f1a0:	f005 faa2 	bl	4146e8 <__ssrefill_r>
  40f1a4:	2800      	cmp	r0, #0
  40f1a6:	f43f aaa2 	beq.w	40e6ee <__ssvfscanf_r+0x1ae>
  40f1aa:	e461      	b.n	40ea70 <__ssvfscanf_r+0x530>
  40f1ac:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
  40f1b0:	4630      	mov	r0, r6
  40f1b2:	462a      	mov	r2, r5
  40f1b4:	f005 fa58 	bl	414668 <_sungetc_r>
  40f1b8:	f10a 3aff 	add.w	sl, sl, #4294967295
  40f1bc:	f7ff bbec 	b.w	40e998 <__ssvfscanf_r+0x458>
  40f1c0:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40f1c4:	f04f 0a01 	mov.w	sl, #1
  40f1c8:	e587      	b.n	40ecda <__ssvfscanf_r+0x79a>
  40f1ca:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40f1ce:	2301      	movs	r3, #1
  40f1d0:	e583      	b.n	40ecda <__ssvfscanf_r+0x79a>
  40f1d2:	f89a 3002 	ldrb.w	r3, [sl, #2]
  40f1d6:	f047 0702 	orr.w	r7, r7, #2
  40f1da:	f10a 0a02 	add.w	sl, sl, #2
  40f1de:	f7ff ba00 	b.w	40e5e2 <__ssvfscanf_r+0xa2>
  40f1e2:	9b08      	ldr	r3, [sp, #32]
  40f1e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40f1e6:	1b19      	subs	r1, r3, r4
  40f1e8:	424a      	negs	r2, r1
  40f1ea:	2900      	cmp	r1, #0
  40f1ec:	d1a3      	bne.n	40f136 <__ssvfscanf_r+0xbf6>
  40f1ee:	e629      	b.n	40ee44 <__ssvfscanf_r+0x904>
  40f1f0:	07fc      	lsls	r4, r7, #31
  40f1f2:	d40e      	bmi.n	40f212 <__ssvfscanf_r+0xcd2>
  40f1f4:	07b8      	lsls	r0, r7, #30
  40f1f6:	d50c      	bpl.n	40f212 <__ssvfscanf_r+0xcd2>
  40f1f8:	9c06      	ldr	r4, [sp, #24]
  40f1fa:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f1fe:	6821      	ldr	r1, [r4, #0]
  40f200:	464a      	mov	r2, r9
  40f202:	ea4f 73e9 	mov.w	r3, r9, asr #31
  40f206:	3404      	adds	r4, #4
  40f208:	9406      	str	r4, [sp, #24]
  40f20a:	e9c1 2300 	strd	r2, r3, [r1]
  40f20e:	f7ff b9d7 	b.w	40e5c0 <__ssvfscanf_r+0x80>
  40f212:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f216:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40f21a:	f8dc 3000 	ldr.w	r3, [ip]
  40f21e:	f10c 0c04 	add.w	ip, ip, #4
  40f222:	f8c3 9000 	str.w	r9, [r3]
  40f226:	f8cd c018 	str.w	ip, [sp, #24]
  40f22a:	f7ff b9c9 	b.w	40e5c0 <__ssvfscanf_r+0x80>
  40f22e:	9c06      	ldr	r4, [sp, #24]
  40f230:	1d27      	adds	r7, r4, #4
  40f232:	6824      	ldr	r4, [r4, #0]
  40f234:	f003 feb2 	bl	412f9c <__fpclassifyd>
  40f238:	2800      	cmp	r0, #0
  40f23a:	d056      	beq.n	40f2ea <__ssvfscanf_r+0xdaa>
  40f23c:	4650      	mov	r0, sl
  40f23e:	4659      	mov	r1, fp
  40f240:	f006 fcb4 	bl	415bac <__aeabi_d2f>
  40f244:	9706      	str	r7, [sp, #24]
  40f246:	6020      	str	r0, [r4, #0]
  40f248:	e613      	b.n	40ee72 <__ssvfscanf_r+0x932>
  40f24a:	f017 0201 	ands.w	r2, r7, #1
  40f24e:	f47f af28 	bne.w	40f0a2 <__ssvfscanf_r+0xb62>
  40f252:	07bc      	lsls	r4, r7, #30
  40f254:	f140 8097 	bpl.w	40f386 <__ssvfscanf_r+0xe46>
  40f258:	4b57      	ldr	r3, [pc, #348]	; (40f3b8 <__ssvfscanf_r+0xe78>)
  40f25a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40f25c:	9905      	ldr	r1, [sp, #20]
  40f25e:	429c      	cmp	r4, r3
  40f260:	4630      	mov	r0, r6
  40f262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f264:	f000 80a2 	beq.w	40f3ac <__ssvfscanf_r+0xe6c>
  40f268:	f004 ff58 	bl	41411c <_strtoll_r>
  40f26c:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f270:	f8dc 3000 	ldr.w	r3, [ip]
  40f274:	f10c 0c04 	add.w	ip, ip, #4
  40f278:	f8cd c018 	str.w	ip, [sp, #24]
  40f27c:	e9c3 0100 	strd	r0, r1, [r3]
  40f280:	e718      	b.n	40f0b4 <__ssvfscanf_r+0xb74>
  40f282:	9204      	str	r2, [sp, #16]
  40f284:	f002 fc22 	bl	411acc <__locale_mb_cur_max>
  40f288:	9a04      	ldr	r2, [sp, #16]
  40f28a:	4290      	cmp	r0, r2
  40f28c:	f43f abf0 	beq.w	40ea70 <__ssvfscanf_r+0x530>
  40f290:	682b      	ldr	r3, [r5, #0]
  40f292:	6869      	ldr	r1, [r5, #4]
  40f294:	f813 eb01 	ldrb.w	lr, [r3], #1
  40f298:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f29a:	602b      	str	r3, [r5, #0]
  40f29c:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40f2a0:	1c57      	adds	r7, r2, #1
  40f2a2:	3901      	subs	r1, #1
  40f2a4:	9000      	str	r0, [sp, #0]
  40f2a6:	463b      	mov	r3, r7
  40f2a8:	6069      	str	r1, [r5, #4]
  40f2aa:	f80c e002 	strb.w	lr, [ip, r2]
  40f2ae:	4630      	mov	r0, r6
  40f2b0:	4651      	mov	r1, sl
  40f2b2:	4662      	mov	r2, ip
  40f2b4:	f002 ff3c 	bl	412130 <_mbrtowc_r>
  40f2b8:	1c43      	adds	r3, r0, #1
  40f2ba:	f43f abd9 	beq.w	40ea70 <__ssvfscanf_r+0x530>
  40f2be:	b9c8      	cbnz	r0, 40f2f4 <__ssvfscanf_r+0xdb4>
  40f2c0:	f8ca 0000 	str.w	r0, [sl]
  40f2c4:	f002 fbf0 	bl	411aa8 <iswspace>
  40f2c8:	2800      	cmp	r0, #0
  40f2ca:	d053      	beq.n	40f374 <__ssvfscanf_r+0xe34>
  40f2cc:	2f00      	cmp	r7, #0
  40f2ce:	f43f ac66 	beq.w	40eb9e <__ssvfscanf_r+0x65e>
  40f2d2:	ac56      	add	r4, sp, #344	; 0x158
  40f2d4:	443c      	add	r4, r7
  40f2d6:	3f01      	subs	r7, #1
  40f2d8:	4630      	mov	r0, r6
  40f2da:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40f2de:	462a      	mov	r2, r5
  40f2e0:	f005 f9c2 	bl	414668 <_sungetc_r>
  40f2e4:	2f00      	cmp	r7, #0
  40f2e6:	d1f6      	bne.n	40f2d6 <__ssvfscanf_r+0xd96>
  40f2e8:	e459      	b.n	40eb9e <__ssvfscanf_r+0x65e>
  40f2ea:	f003 fec9 	bl	413080 <nanf>
  40f2ee:	9706      	str	r7, [sp, #24]
  40f2f0:	6020      	str	r0, [r4, #0]
  40f2f2:	e5be      	b.n	40ee72 <__ssvfscanf_r+0x932>
  40f2f4:	3002      	adds	r0, #2
  40f2f6:	d128      	bne.n	40f34a <__ssvfscanf_r+0xe0a>
  40f2f8:	686b      	ldr	r3, [r5, #4]
  40f2fa:	2b00      	cmp	r3, #0
  40f2fc:	dd4b      	ble.n	40f396 <__ssvfscanf_r+0xe56>
  40f2fe:	463a      	mov	r2, r7
  40f300:	e442      	b.n	40eb88 <__ssvfscanf_r+0x648>
  40f302:	9c05      	ldr	r4, [sp, #20]
  40f304:	45a3      	cmp	fp, r4
  40f306:	bf88      	it	hi
  40f308:	465c      	movhi	r4, fp
  40f30a:	f67f a960 	bls.w	40e5ce <__ssvfscanf_r+0x8e>
  40f30e:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40f312:	980e      	ldr	r0, [sp, #56]	; 0x38
  40f314:	462a      	mov	r2, r5
  40f316:	f005 f9a7 	bl	414668 <_sungetc_r>
  40f31a:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40f31e:	454c      	cmp	r4, r9
  40f320:	d1f5      	bne.n	40f30e <__ssvfscanf_r+0xdce>
  40f322:	f7ff b954 	b.w	40e5ce <__ssvfscanf_r+0x8e>
  40f326:	f8dd c014 	ldr.w	ip, [sp, #20]
  40f32a:	45e3      	cmp	fp, ip
  40f32c:	f67f a94f 	bls.w	40e5ce <__ssvfscanf_r+0x8e>
  40f330:	465c      	mov	r4, fp
  40f332:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40f336:	980e      	ldr	r0, [sp, #56]	; 0x38
  40f338:	462a      	mov	r2, r5
  40f33a:	f005 f995 	bl	414668 <_sungetc_r>
  40f33e:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40f342:	454c      	cmp	r4, r9
  40f344:	d1f5      	bne.n	40f332 <__ssvfscanf_r+0xdf2>
  40f346:	f7ff b942 	b.w	40e5ce <__ssvfscanf_r+0x8e>
  40f34a:	f8da 0000 	ldr.w	r0, [sl]
  40f34e:	e7b9      	b.n	40f2c4 <__ssvfscanf_r+0xd84>
  40f350:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40f354:	45cb      	cmp	fp, r9
  40f356:	f67f a93a 	bls.w	40e5ce <__ssvfscanf_r+0x8e>
  40f35a:	465c      	mov	r4, fp
  40f35c:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40f360:	980e      	ldr	r0, [sp, #56]	; 0x38
  40f362:	462a      	mov	r2, r5
  40f364:	f005 f980 	bl	414668 <_sungetc_r>
  40f368:	f8dd c014 	ldr.w	ip, [sp, #20]
  40f36c:	4564      	cmp	r4, ip
  40f36e:	d1f5      	bne.n	40f35c <__ssvfscanf_r+0xe1c>
  40f370:	f7ff b92d 	b.w	40e5ce <__ssvfscanf_r+0x8e>
  40f374:	44b9      	add	r9, r7
  40f376:	3c01      	subs	r4, #1
  40f378:	f1bb 0f00 	cmp.w	fp, #0
  40f37c:	d109      	bne.n	40f392 <__ssvfscanf_r+0xe52>
  40f37e:	f10a 0a04 	add.w	sl, sl, #4
  40f382:	465f      	mov	r7, fp
  40f384:	e7b8      	b.n	40f2f8 <__ssvfscanf_r+0xdb8>
  40f386:	9c06      	ldr	r4, [sp, #24]
  40f388:	6823      	ldr	r3, [r4, #0]
  40f38a:	3404      	adds	r4, #4
  40f38c:	9406      	str	r4, [sp, #24]
  40f38e:	6018      	str	r0, [r3, #0]
  40f390:	e690      	b.n	40f0b4 <__ssvfscanf_r+0xb74>
  40f392:	4607      	mov	r7, r0
  40f394:	e7b0      	b.n	40f2f8 <__ssvfscanf_r+0xdb8>
  40f396:	4630      	mov	r0, r6
  40f398:	4629      	mov	r1, r5
  40f39a:	f005 f9a5 	bl	4146e8 <__ssrefill_r>
  40f39e:	2800      	cmp	r0, #0
  40f3a0:	d0ad      	beq.n	40f2fe <__ssvfscanf_r+0xdbe>
  40f3a2:	2f00      	cmp	r7, #0
  40f3a4:	f47f ab64 	bne.w	40ea70 <__ssvfscanf_r+0x530>
  40f3a8:	f7ff bbf9 	b.w	40eb9e <__ssvfscanf_r+0x65e>
  40f3ac:	f005 f814 	bl	4143d8 <_strtoull_r>
  40f3b0:	e75c      	b.n	40f26c <__ssvfscanf_r+0xd2c>
  40f3b2:	bf00      	nop
  40f3b4:	004161fc 	.word	0x004161fc
  40f3b8:	004142b9 	.word	0x004142b9

0040f3bc <__sprint_r.part.0>:
  40f3bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40f3be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f3c2:	049c      	lsls	r4, r3, #18
  40f3c4:	460e      	mov	r6, r1
  40f3c6:	4680      	mov	r8, r0
  40f3c8:	4691      	mov	r9, r2
  40f3ca:	d52a      	bpl.n	40f422 <__sprint_r.part.0+0x66>
  40f3cc:	6893      	ldr	r3, [r2, #8]
  40f3ce:	6812      	ldr	r2, [r2, #0]
  40f3d0:	f102 0a08 	add.w	sl, r2, #8
  40f3d4:	b31b      	cbz	r3, 40f41e <__sprint_r.part.0+0x62>
  40f3d6:	e91a 00a0 	ldmdb	sl, {r5, r7}
  40f3da:	08bf      	lsrs	r7, r7, #2
  40f3dc:	d017      	beq.n	40f40e <__sprint_r.part.0+0x52>
  40f3de:	3d04      	subs	r5, #4
  40f3e0:	2400      	movs	r4, #0
  40f3e2:	e001      	b.n	40f3e8 <__sprint_r.part.0+0x2c>
  40f3e4:	42a7      	cmp	r7, r4
  40f3e6:	d010      	beq.n	40f40a <__sprint_r.part.0+0x4e>
  40f3e8:	4640      	mov	r0, r8
  40f3ea:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40f3ee:	4632      	mov	r2, r6
  40f3f0:	f002 f82e 	bl	411450 <_fputwc_r>
  40f3f4:	1c43      	adds	r3, r0, #1
  40f3f6:	f104 0401 	add.w	r4, r4, #1
  40f3fa:	d1f3      	bne.n	40f3e4 <__sprint_r.part.0+0x28>
  40f3fc:	2300      	movs	r3, #0
  40f3fe:	f8c9 3008 	str.w	r3, [r9, #8]
  40f402:	f8c9 3004 	str.w	r3, [r9, #4]
  40f406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f40a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40f40e:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
  40f412:	f8c9 3008 	str.w	r3, [r9, #8]
  40f416:	f10a 0a08 	add.w	sl, sl, #8
  40f41a:	2b00      	cmp	r3, #0
  40f41c:	d1db      	bne.n	40f3d6 <__sprint_r.part.0+0x1a>
  40f41e:	2000      	movs	r0, #0
  40f420:	e7ec      	b.n	40f3fc <__sprint_r.part.0+0x40>
  40f422:	f002 f98f 	bl	411744 <__sfvwrite_r>
  40f426:	2300      	movs	r3, #0
  40f428:	f8c9 3008 	str.w	r3, [r9, #8]
  40f42c:	f8c9 3004 	str.w	r3, [r9, #4]
  40f430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040f434 <_vfiprintf_r>:
  40f434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f438:	b0b1      	sub	sp, #196	; 0xc4
  40f43a:	461c      	mov	r4, r3
  40f43c:	9102      	str	r1, [sp, #8]
  40f43e:	4690      	mov	r8, r2
  40f440:	9308      	str	r3, [sp, #32]
  40f442:	9006      	str	r0, [sp, #24]
  40f444:	b118      	cbz	r0, 40f44e <_vfiprintf_r+0x1a>
  40f446:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f448:	2b00      	cmp	r3, #0
  40f44a:	f000 80e8 	beq.w	40f61e <_vfiprintf_r+0x1ea>
  40f44e:	9d02      	ldr	r5, [sp, #8]
  40f450:	89ab      	ldrh	r3, [r5, #12]
  40f452:	b29a      	uxth	r2, r3
  40f454:	0490      	lsls	r0, r2, #18
  40f456:	d407      	bmi.n	40f468 <_vfiprintf_r+0x34>
  40f458:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  40f45a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40f45e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  40f462:	81ab      	strh	r3, [r5, #12]
  40f464:	b29a      	uxth	r2, r3
  40f466:	6669      	str	r1, [r5, #100]	; 0x64
  40f468:	0711      	lsls	r1, r2, #28
  40f46a:	f140 80b7 	bpl.w	40f5dc <_vfiprintf_r+0x1a8>
  40f46e:	f8dd b008 	ldr.w	fp, [sp, #8]
  40f472:	f8db 3010 	ldr.w	r3, [fp, #16]
  40f476:	2b00      	cmp	r3, #0
  40f478:	f000 80b0 	beq.w	40f5dc <_vfiprintf_r+0x1a8>
  40f47c:	f002 021a 	and.w	r2, r2, #26
  40f480:	2a0a      	cmp	r2, #10
  40f482:	f000 80b7 	beq.w	40f5f4 <_vfiprintf_r+0x1c0>
  40f486:	2300      	movs	r3, #0
  40f488:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  40f48c:	930a      	str	r3, [sp, #40]	; 0x28
  40f48e:	9315      	str	r3, [sp, #84]	; 0x54
  40f490:	9314      	str	r3, [sp, #80]	; 0x50
  40f492:	9309      	str	r3, [sp, #36]	; 0x24
  40f494:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  40f498:	464e      	mov	r6, r9
  40f49a:	f898 3000 	ldrb.w	r3, [r8]
  40f49e:	2b00      	cmp	r3, #0
  40f4a0:	f000 84c4 	beq.w	40fe2c <_vfiprintf_r+0x9f8>
  40f4a4:	2b25      	cmp	r3, #37	; 0x25
  40f4a6:	f000 84c1 	beq.w	40fe2c <_vfiprintf_r+0x9f8>
  40f4aa:	f108 0201 	add.w	r2, r8, #1
  40f4ae:	e001      	b.n	40f4b4 <_vfiprintf_r+0x80>
  40f4b0:	2b25      	cmp	r3, #37	; 0x25
  40f4b2:	d004      	beq.n	40f4be <_vfiprintf_r+0x8a>
  40f4b4:	4614      	mov	r4, r2
  40f4b6:	3201      	adds	r2, #1
  40f4b8:	7823      	ldrb	r3, [r4, #0]
  40f4ba:	2b00      	cmp	r3, #0
  40f4bc:	d1f8      	bne.n	40f4b0 <_vfiprintf_r+0x7c>
  40f4be:	ebc8 0504 	rsb	r5, r8, r4
  40f4c2:	b195      	cbz	r5, 40f4ea <_vfiprintf_r+0xb6>
  40f4c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f4c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40f4c8:	f8c6 8000 	str.w	r8, [r6]
  40f4cc:	3301      	adds	r3, #1
  40f4ce:	442a      	add	r2, r5
  40f4d0:	2b07      	cmp	r3, #7
  40f4d2:	6075      	str	r5, [r6, #4]
  40f4d4:	9215      	str	r2, [sp, #84]	; 0x54
  40f4d6:	9314      	str	r3, [sp, #80]	; 0x50
  40f4d8:	dd7b      	ble.n	40f5d2 <_vfiprintf_r+0x19e>
  40f4da:	2a00      	cmp	r2, #0
  40f4dc:	f040 84d4 	bne.w	40fe88 <_vfiprintf_r+0xa54>
  40f4e0:	9809      	ldr	r0, [sp, #36]	; 0x24
  40f4e2:	9214      	str	r2, [sp, #80]	; 0x50
  40f4e4:	4428      	add	r0, r5
  40f4e6:	464e      	mov	r6, r9
  40f4e8:	9009      	str	r0, [sp, #36]	; 0x24
  40f4ea:	7823      	ldrb	r3, [r4, #0]
  40f4ec:	2b00      	cmp	r3, #0
  40f4ee:	f000 83e9 	beq.w	40fcc4 <_vfiprintf_r+0x890>
  40f4f2:	2100      	movs	r1, #0
  40f4f4:	f04f 0200 	mov.w	r2, #0
  40f4f8:	f04f 3cff 	mov.w	ip, #4294967295
  40f4fc:	7863      	ldrb	r3, [r4, #1]
  40f4fe:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
  40f502:	9104      	str	r1, [sp, #16]
  40f504:	468a      	mov	sl, r1
  40f506:	f104 0801 	add.w	r8, r4, #1
  40f50a:	4608      	mov	r0, r1
  40f50c:	4665      	mov	r5, ip
  40f50e:	f108 0801 	add.w	r8, r8, #1
  40f512:	f1a3 0220 	sub.w	r2, r3, #32
  40f516:	2a58      	cmp	r2, #88	; 0x58
  40f518:	f200 82d5 	bhi.w	40fac6 <_vfiprintf_r+0x692>
  40f51c:	e8df f012 	tbh	[pc, r2, lsl #1]
  40f520:	02d302c7 	.word	0x02d302c7
  40f524:	02ce02d3 	.word	0x02ce02d3
  40f528:	02d302d3 	.word	0x02d302d3
  40f52c:	02d302d3 	.word	0x02d302d3
  40f530:	02d302d3 	.word	0x02d302d3
  40f534:	028b027e 	.word	0x028b027e
  40f538:	008402d3 	.word	0x008402d3
  40f53c:	02d3028f 	.word	0x02d3028f
  40f540:	0194012b 	.word	0x0194012b
  40f544:	01940194 	.word	0x01940194
  40f548:	01940194 	.word	0x01940194
  40f54c:	01940194 	.word	0x01940194
  40f550:	01940194 	.word	0x01940194
  40f554:	02d302d3 	.word	0x02d302d3
  40f558:	02d302d3 	.word	0x02d302d3
  40f55c:	02d302d3 	.word	0x02d302d3
  40f560:	02d302d3 	.word	0x02d302d3
  40f564:	02d302d3 	.word	0x02d302d3
  40f568:	02d30130 	.word	0x02d30130
  40f56c:	02d302d3 	.word	0x02d302d3
  40f570:	02d302d3 	.word	0x02d302d3
  40f574:	02d302d3 	.word	0x02d302d3
  40f578:	02d302d3 	.word	0x02d302d3
  40f57c:	017902d3 	.word	0x017902d3
  40f580:	02d302d3 	.word	0x02d302d3
  40f584:	02d302d3 	.word	0x02d302d3
  40f588:	01a202d3 	.word	0x01a202d3
  40f58c:	02d302d3 	.word	0x02d302d3
  40f590:	02d301bd 	.word	0x02d301bd
  40f594:	02d302d3 	.word	0x02d302d3
  40f598:	02d302d3 	.word	0x02d302d3
  40f59c:	02d302d3 	.word	0x02d302d3
  40f5a0:	02d302d3 	.word	0x02d302d3
  40f5a4:	01e202d3 	.word	0x01e202d3
  40f5a8:	02d301f8 	.word	0x02d301f8
  40f5ac:	02d302d3 	.word	0x02d302d3
  40f5b0:	01f80214 	.word	0x01f80214
  40f5b4:	02d302d3 	.word	0x02d302d3
  40f5b8:	02d30219 	.word	0x02d30219
  40f5bc:	00890226 	.word	0x00890226
  40f5c0:	02790264 	.word	0x02790264
  40f5c4:	023802d3 	.word	0x023802d3
  40f5c8:	011902d3 	.word	0x011902d3
  40f5cc:	02d302d3 	.word	0x02d302d3
  40f5d0:	02ab      	.short	0x02ab
  40f5d2:	3608      	adds	r6, #8
  40f5d4:	9809      	ldr	r0, [sp, #36]	; 0x24
  40f5d6:	4428      	add	r0, r5
  40f5d8:	9009      	str	r0, [sp, #36]	; 0x24
  40f5da:	e786      	b.n	40f4ea <_vfiprintf_r+0xb6>
  40f5dc:	9806      	ldr	r0, [sp, #24]
  40f5de:	9902      	ldr	r1, [sp, #8]
  40f5e0:	f000 fda2 	bl	410128 <__swsetup_r>
  40f5e4:	b9b0      	cbnz	r0, 40f614 <_vfiprintf_r+0x1e0>
  40f5e6:	9d02      	ldr	r5, [sp, #8]
  40f5e8:	89aa      	ldrh	r2, [r5, #12]
  40f5ea:	f002 021a 	and.w	r2, r2, #26
  40f5ee:	2a0a      	cmp	r2, #10
  40f5f0:	f47f af49 	bne.w	40f486 <_vfiprintf_r+0x52>
  40f5f4:	f8dd b008 	ldr.w	fp, [sp, #8]
  40f5f8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40f5fc:	2b00      	cmp	r3, #0
  40f5fe:	f6ff af42 	blt.w	40f486 <_vfiprintf_r+0x52>
  40f602:	9806      	ldr	r0, [sp, #24]
  40f604:	4659      	mov	r1, fp
  40f606:	4642      	mov	r2, r8
  40f608:	4623      	mov	r3, r4
  40f60a:	f000 fd3d 	bl	410088 <__sbprintf>
  40f60e:	b031      	add	sp, #196	; 0xc4
  40f610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f614:	f04f 30ff 	mov.w	r0, #4294967295
  40f618:	b031      	add	sp, #196	; 0xc4
  40f61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f61e:	f001 fe81 	bl	411324 <__sinit>
  40f622:	e714      	b.n	40f44e <_vfiprintf_r+0x1a>
  40f624:	4240      	negs	r0, r0
  40f626:	9308      	str	r3, [sp, #32]
  40f628:	f04a 0a04 	orr.w	sl, sl, #4
  40f62c:	f898 3000 	ldrb.w	r3, [r8]
  40f630:	e76d      	b.n	40f50e <_vfiprintf_r+0xda>
  40f632:	f01a 0320 	ands.w	r3, sl, #32
  40f636:	9004      	str	r0, [sp, #16]
  40f638:	46ac      	mov	ip, r5
  40f63a:	f000 80f2 	beq.w	40f822 <_vfiprintf_r+0x3ee>
  40f63e:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f642:	f10b 0307 	add.w	r3, fp, #7
  40f646:	f023 0307 	bic.w	r3, r3, #7
  40f64a:	f103 0408 	add.w	r4, r3, #8
  40f64e:	9408      	str	r4, [sp, #32]
  40f650:	e9d3 4500 	ldrd	r4, r5, [r3]
  40f654:	2300      	movs	r3, #0
  40f656:	f04f 0000 	mov.w	r0, #0
  40f65a:	2100      	movs	r1, #0
  40f65c:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
  40f660:	f8cd c014 	str.w	ip, [sp, #20]
  40f664:	9107      	str	r1, [sp, #28]
  40f666:	f1bc 0f00 	cmp.w	ip, #0
  40f66a:	bfa8      	it	ge
  40f66c:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  40f670:	ea54 0205 	orrs.w	r2, r4, r5
  40f674:	f040 80ad 	bne.w	40f7d2 <_vfiprintf_r+0x39e>
  40f678:	f1bc 0f00 	cmp.w	ip, #0
  40f67c:	f040 80a9 	bne.w	40f7d2 <_vfiprintf_r+0x39e>
  40f680:	2b00      	cmp	r3, #0
  40f682:	f040 83bc 	bne.w	40fdfe <_vfiprintf_r+0x9ca>
  40f686:	f01a 0f01 	tst.w	sl, #1
  40f68a:	f000 83b8 	beq.w	40fdfe <_vfiprintf_r+0x9ca>
  40f68e:	af30      	add	r7, sp, #192	; 0xc0
  40f690:	2330      	movs	r3, #48	; 0x30
  40f692:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40f696:	ebc7 0409 	rsb	r4, r7, r9
  40f69a:	9405      	str	r4, [sp, #20]
  40f69c:	f8dd b014 	ldr.w	fp, [sp, #20]
  40f6a0:	9c07      	ldr	r4, [sp, #28]
  40f6a2:	45e3      	cmp	fp, ip
  40f6a4:	bfb8      	it	lt
  40f6a6:	46e3      	movlt	fp, ip
  40f6a8:	f8cd b00c 	str.w	fp, [sp, #12]
  40f6ac:	b11c      	cbz	r4, 40f6b6 <_vfiprintf_r+0x282>
  40f6ae:	f10b 0b01 	add.w	fp, fp, #1
  40f6b2:	f8cd b00c 	str.w	fp, [sp, #12]
  40f6b6:	f01a 0502 	ands.w	r5, sl, #2
  40f6ba:	9507      	str	r5, [sp, #28]
  40f6bc:	d005      	beq.n	40f6ca <_vfiprintf_r+0x296>
  40f6be:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40f6c2:	f10b 0b02 	add.w	fp, fp, #2
  40f6c6:	f8cd b00c 	str.w	fp, [sp, #12]
  40f6ca:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
  40f6ce:	930b      	str	r3, [sp, #44]	; 0x2c
  40f6d0:	f040 8217 	bne.w	40fb02 <_vfiprintf_r+0x6ce>
  40f6d4:	9d04      	ldr	r5, [sp, #16]
  40f6d6:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40f6da:	ebcb 0405 	rsb	r4, fp, r5
  40f6de:	2c00      	cmp	r4, #0
  40f6e0:	f340 820f 	ble.w	40fb02 <_vfiprintf_r+0x6ce>
  40f6e4:	2c10      	cmp	r4, #16
  40f6e6:	f340 8488 	ble.w	40fffa <_vfiprintf_r+0xbc6>
  40f6ea:	4dbd      	ldr	r5, [pc, #756]	; (40f9e0 <_vfiprintf_r+0x5ac>)
  40f6ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40f6ee:	9814      	ldr	r0, [sp, #80]	; 0x50
  40f6f0:	462b      	mov	r3, r5
  40f6f2:	f04f 0b10 	mov.w	fp, #16
  40f6f6:	4625      	mov	r5, r4
  40f6f8:	4664      	mov	r4, ip
  40f6fa:	46b4      	mov	ip, r6
  40f6fc:	461e      	mov	r6, r3
  40f6fe:	e006      	b.n	40f70e <_vfiprintf_r+0x2da>
  40f700:	1c83      	adds	r3, r0, #2
  40f702:	f10c 0c08 	add.w	ip, ip, #8
  40f706:	4608      	mov	r0, r1
  40f708:	3d10      	subs	r5, #16
  40f70a:	2d10      	cmp	r5, #16
  40f70c:	dd11      	ble.n	40f732 <_vfiprintf_r+0x2fe>
  40f70e:	1c41      	adds	r1, r0, #1
  40f710:	3210      	adds	r2, #16
  40f712:	2907      	cmp	r1, #7
  40f714:	9215      	str	r2, [sp, #84]	; 0x54
  40f716:	e88c 0840 	stmia.w	ip, {r6, fp}
  40f71a:	9114      	str	r1, [sp, #80]	; 0x50
  40f71c:	ddf0      	ble.n	40f700 <_vfiprintf_r+0x2cc>
  40f71e:	2a00      	cmp	r2, #0
  40f720:	f040 81e2 	bne.w	40fae8 <_vfiprintf_r+0x6b4>
  40f724:	3d10      	subs	r5, #16
  40f726:	2d10      	cmp	r5, #16
  40f728:	f04f 0301 	mov.w	r3, #1
  40f72c:	4610      	mov	r0, r2
  40f72e:	46cc      	mov	ip, r9
  40f730:	dced      	bgt.n	40f70e <_vfiprintf_r+0x2da>
  40f732:	4631      	mov	r1, r6
  40f734:	4666      	mov	r6, ip
  40f736:	46a4      	mov	ip, r4
  40f738:	462c      	mov	r4, r5
  40f73a:	460d      	mov	r5, r1
  40f73c:	4422      	add	r2, r4
  40f73e:	2b07      	cmp	r3, #7
  40f740:	9215      	str	r2, [sp, #84]	; 0x54
  40f742:	6035      	str	r5, [r6, #0]
  40f744:	6074      	str	r4, [r6, #4]
  40f746:	9314      	str	r3, [sp, #80]	; 0x50
  40f748:	f300 8369 	bgt.w	40fe1e <_vfiprintf_r+0x9ea>
  40f74c:	3608      	adds	r6, #8
  40f74e:	1c59      	adds	r1, r3, #1
  40f750:	e1da      	b.n	40fb08 <_vfiprintf_r+0x6d4>
  40f752:	f01a 0f20 	tst.w	sl, #32
  40f756:	9004      	str	r0, [sp, #16]
  40f758:	46ac      	mov	ip, r5
  40f75a:	f000 808b 	beq.w	40f874 <_vfiprintf_r+0x440>
  40f75e:	9d08      	ldr	r5, [sp, #32]
  40f760:	1deb      	adds	r3, r5, #7
  40f762:	f023 0307 	bic.w	r3, r3, #7
  40f766:	f103 0b08 	add.w	fp, r3, #8
  40f76a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40f76e:	f8cd b020 	str.w	fp, [sp, #32]
  40f772:	2301      	movs	r3, #1
  40f774:	e76f      	b.n	40f656 <_vfiprintf_r+0x222>
  40f776:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
  40f77a:	f898 3000 	ldrb.w	r3, [r8]
  40f77e:	e6c6      	b.n	40f50e <_vfiprintf_r+0xda>
  40f780:	f04a 0a10 	orr.w	sl, sl, #16
  40f784:	f01a 0f20 	tst.w	sl, #32
  40f788:	9004      	str	r0, [sp, #16]
  40f78a:	46ac      	mov	ip, r5
  40f78c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40f790:	f000 80c6 	beq.w	40f920 <_vfiprintf_r+0x4ec>
  40f794:	9c08      	ldr	r4, [sp, #32]
  40f796:	1de1      	adds	r1, r4, #7
  40f798:	f021 0107 	bic.w	r1, r1, #7
  40f79c:	e9d1 2300 	ldrd	r2, r3, [r1]
  40f7a0:	3108      	adds	r1, #8
  40f7a2:	9108      	str	r1, [sp, #32]
  40f7a4:	4614      	mov	r4, r2
  40f7a6:	461d      	mov	r5, r3
  40f7a8:	2a00      	cmp	r2, #0
  40f7aa:	f173 0000 	sbcs.w	r0, r3, #0
  40f7ae:	f2c0 83cd 	blt.w	40ff4c <_vfiprintf_r+0xb18>
  40f7b2:	f1bc 0f00 	cmp.w	ip, #0
  40f7b6:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
  40f7ba:	9107      	str	r1, [sp, #28]
  40f7bc:	bfa8      	it	ge
  40f7be:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  40f7c2:	ea54 0205 	orrs.w	r2, r4, r5
  40f7c6:	f8cd c014 	str.w	ip, [sp, #20]
  40f7ca:	f04f 0301 	mov.w	r3, #1
  40f7ce:	f43f af53 	beq.w	40f678 <_vfiprintf_r+0x244>
  40f7d2:	2b01      	cmp	r3, #1
  40f7d4:	f000 8315 	beq.w	40fe02 <_vfiprintf_r+0x9ce>
  40f7d8:	2b02      	cmp	r3, #2
  40f7da:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
  40f7de:	f040 8248 	bne.w	40fc72 <_vfiprintf_r+0x83e>
  40f7e2:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f7e4:	4619      	mov	r1, r3
  40f7e6:	0922      	lsrs	r2, r4, #4
  40f7e8:	f004 040f 	and.w	r4, r4, #15
  40f7ec:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  40f7f0:	460f      	mov	r7, r1
  40f7f2:	092b      	lsrs	r3, r5, #4
  40f7f4:	5d01      	ldrb	r1, [r0, r4]
  40f7f6:	7039      	strb	r1, [r7, #0]
  40f7f8:	ea52 0b03 	orrs.w	fp, r2, r3
  40f7fc:	4614      	mov	r4, r2
  40f7fe:	461d      	mov	r5, r3
  40f800:	f107 31ff 	add.w	r1, r7, #4294967295
  40f804:	d1ef      	bne.n	40f7e6 <_vfiprintf_r+0x3b2>
  40f806:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40f80a:	ebc7 0309 	rsb	r3, r7, r9
  40f80e:	9305      	str	r3, [sp, #20]
  40f810:	e744      	b.n	40f69c <_vfiprintf_r+0x268>
  40f812:	f04a 0a10 	orr.w	sl, sl, #16
  40f816:	f01a 0320 	ands.w	r3, sl, #32
  40f81a:	9004      	str	r0, [sp, #16]
  40f81c:	46ac      	mov	ip, r5
  40f81e:	f47f af0e 	bne.w	40f63e <_vfiprintf_r+0x20a>
  40f822:	f01a 0210 	ands.w	r2, sl, #16
  40f826:	f040 830f 	bne.w	40fe48 <_vfiprintf_r+0xa14>
  40f82a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
  40f82e:	f000 830b 	beq.w	40fe48 <_vfiprintf_r+0xa14>
  40f832:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f836:	f8bb 4000 	ldrh.w	r4, [fp]
  40f83a:	f10b 0b04 	add.w	fp, fp, #4
  40f83e:	4613      	mov	r3, r2
  40f840:	2500      	movs	r5, #0
  40f842:	f8cd b020 	str.w	fp, [sp, #32]
  40f846:	e706      	b.n	40f656 <_vfiprintf_r+0x222>
  40f848:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40f84c:	2000      	movs	r0, #0
  40f84e:	f818 3b01 	ldrb.w	r3, [r8], #1
  40f852:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40f856:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  40f85a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40f85e:	2a09      	cmp	r2, #9
  40f860:	d9f5      	bls.n	40f84e <_vfiprintf_r+0x41a>
  40f862:	e656      	b.n	40f512 <_vfiprintf_r+0xde>
  40f864:	f04a 0a10 	orr.w	sl, sl, #16
  40f868:	f01a 0f20 	tst.w	sl, #32
  40f86c:	9004      	str	r0, [sp, #16]
  40f86e:	46ac      	mov	ip, r5
  40f870:	f47f af75 	bne.w	40f75e <_vfiprintf_r+0x32a>
  40f874:	f01a 0f10 	tst.w	sl, #16
  40f878:	f040 82ec 	bne.w	40fe54 <_vfiprintf_r+0xa20>
  40f87c:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40f880:	f000 82e8 	beq.w	40fe54 <_vfiprintf_r+0xa20>
  40f884:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f888:	f8bb 4000 	ldrh.w	r4, [fp]
  40f88c:	f10b 0b04 	add.w	fp, fp, #4
  40f890:	2500      	movs	r5, #0
  40f892:	2301      	movs	r3, #1
  40f894:	f8cd b020 	str.w	fp, [sp, #32]
  40f898:	e6dd      	b.n	40f656 <_vfiprintf_r+0x222>
  40f89a:	46ac      	mov	ip, r5
  40f89c:	f01a 0f20 	tst.w	sl, #32
  40f8a0:	4d50      	ldr	r5, [pc, #320]	; (40f9e4 <_vfiprintf_r+0x5b0>)
  40f8a2:	9004      	str	r0, [sp, #16]
  40f8a4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40f8a8:	950a      	str	r5, [sp, #40]	; 0x28
  40f8aa:	f000 80ee 	beq.w	40fa8a <_vfiprintf_r+0x656>
  40f8ae:	9d08      	ldr	r5, [sp, #32]
  40f8b0:	1dea      	adds	r2, r5, #7
  40f8b2:	f022 0207 	bic.w	r2, r2, #7
  40f8b6:	e9d2 4500 	ldrd	r4, r5, [r2]
  40f8ba:	f102 0b08 	add.w	fp, r2, #8
  40f8be:	f8cd b020 	str.w	fp, [sp, #32]
  40f8c2:	f01a 0f01 	tst.w	sl, #1
  40f8c6:	f000 82a8 	beq.w	40fe1a <_vfiprintf_r+0x9e6>
  40f8ca:	ea54 0b05 	orrs.w	fp, r4, r5
  40f8ce:	f000 82a4 	beq.w	40fe1a <_vfiprintf_r+0x9e6>
  40f8d2:	2230      	movs	r2, #48	; 0x30
  40f8d4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  40f8d8:	f04a 0a02 	orr.w	sl, sl, #2
  40f8dc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40f8e0:	2302      	movs	r3, #2
  40f8e2:	e6b8      	b.n	40f656 <_vfiprintf_r+0x222>
  40f8e4:	9b08      	ldr	r3, [sp, #32]
  40f8e6:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f8ea:	681b      	ldr	r3, [r3, #0]
  40f8ec:	9004      	str	r0, [sp, #16]
  40f8ee:	2401      	movs	r4, #1
  40f8f0:	f04f 0500 	mov.w	r5, #0
  40f8f4:	f10b 0b04 	add.w	fp, fp, #4
  40f8f8:	9403      	str	r4, [sp, #12]
  40f8fa:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  40f8fe:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  40f902:	f8cd b020 	str.w	fp, [sp, #32]
  40f906:	9405      	str	r4, [sp, #20]
  40f908:	af16      	add	r7, sp, #88	; 0x58
  40f90a:	f04f 0c00 	mov.w	ip, #0
  40f90e:	e6d2      	b.n	40f6b6 <_vfiprintf_r+0x282>
  40f910:	f01a 0f20 	tst.w	sl, #32
  40f914:	9004      	str	r0, [sp, #16]
  40f916:	46ac      	mov	ip, r5
  40f918:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40f91c:	f47f af3a 	bne.w	40f794 <_vfiprintf_r+0x360>
  40f920:	f01a 0f10 	tst.w	sl, #16
  40f924:	f040 82a4 	bne.w	40fe70 <_vfiprintf_r+0xa3c>
  40f928:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40f92c:	f000 82a0 	beq.w	40fe70 <_vfiprintf_r+0xa3c>
  40f930:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f934:	f9bb 4000 	ldrsh.w	r4, [fp]
  40f938:	f10b 0b04 	add.w	fp, fp, #4
  40f93c:	17e5      	asrs	r5, r4, #31
  40f93e:	4622      	mov	r2, r4
  40f940:	462b      	mov	r3, r5
  40f942:	f8cd b020 	str.w	fp, [sp, #32]
  40f946:	e72f      	b.n	40f7a8 <_vfiprintf_r+0x374>
  40f948:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
  40f94c:	f898 3000 	ldrb.w	r3, [r8]
  40f950:	e5dd      	b.n	40f50e <_vfiprintf_r+0xda>
  40f952:	f898 3000 	ldrb.w	r3, [r8]
  40f956:	4642      	mov	r2, r8
  40f958:	2b6c      	cmp	r3, #108	; 0x6c
  40f95a:	bf03      	ittte	eq
  40f95c:	f108 0801 	addeq.w	r8, r8, #1
  40f960:	f04a 0a20 	orreq.w	sl, sl, #32
  40f964:	7853      	ldrbeq	r3, [r2, #1]
  40f966:	f04a 0a10 	orrne.w	sl, sl, #16
  40f96a:	e5d0      	b.n	40f50e <_vfiprintf_r+0xda>
  40f96c:	f01a 0f20 	tst.w	sl, #32
  40f970:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40f974:	f000 82f8 	beq.w	40ff68 <_vfiprintf_r+0xb34>
  40f978:	9c08      	ldr	r4, [sp, #32]
  40f97a:	6821      	ldr	r1, [r4, #0]
  40f97c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40f97e:	17e5      	asrs	r5, r4, #31
  40f980:	462b      	mov	r3, r5
  40f982:	9d08      	ldr	r5, [sp, #32]
  40f984:	4622      	mov	r2, r4
  40f986:	3504      	adds	r5, #4
  40f988:	9508      	str	r5, [sp, #32]
  40f98a:	e9c1 2300 	strd	r2, r3, [r1]
  40f98e:	e584      	b.n	40f49a <_vfiprintf_r+0x66>
  40f990:	9c08      	ldr	r4, [sp, #32]
  40f992:	9004      	str	r0, [sp, #16]
  40f994:	6827      	ldr	r7, [r4, #0]
  40f996:	46ac      	mov	ip, r5
  40f998:	f04f 0500 	mov.w	r5, #0
  40f99c:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  40f9a0:	3404      	adds	r4, #4
  40f9a2:	2f00      	cmp	r7, #0
  40f9a4:	f000 8334 	beq.w	410010 <_vfiprintf_r+0xbdc>
  40f9a8:	f1bc 0f00 	cmp.w	ip, #0
  40f9ac:	4638      	mov	r0, r7
  40f9ae:	f2c0 8308 	blt.w	40ffc2 <_vfiprintf_r+0xb8e>
  40f9b2:	4662      	mov	r2, ip
  40f9b4:	2100      	movs	r1, #0
  40f9b6:	f8cd c004 	str.w	ip, [sp, #4]
  40f9ba:	f002 fbfd 	bl	4121b8 <memchr>
  40f9be:	f8dd c004 	ldr.w	ip, [sp, #4]
  40f9c2:	2800      	cmp	r0, #0
  40f9c4:	f000 833c 	beq.w	410040 <_vfiprintf_r+0xc0c>
  40f9c8:	1bc0      	subs	r0, r0, r7
  40f9ca:	4560      	cmp	r0, ip
  40f9cc:	bfa8      	it	ge
  40f9ce:	4660      	movge	r0, ip
  40f9d0:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  40f9d4:	9005      	str	r0, [sp, #20]
  40f9d6:	9408      	str	r4, [sp, #32]
  40f9d8:	9507      	str	r5, [sp, #28]
  40f9da:	f04f 0c00 	mov.w	ip, #0
  40f9de:	e65d      	b.n	40f69c <_vfiprintf_r+0x268>
  40f9e0:	00416214 	.word	0x00416214
  40f9e4:	00416194 	.word	0x00416194
  40f9e8:	9a08      	ldr	r2, [sp, #32]
  40f9ea:	9004      	str	r0, [sp, #16]
  40f9ec:	2330      	movs	r3, #48	; 0x30
  40f9ee:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40f9f2:	f102 0b04 	add.w	fp, r2, #4
  40f9f6:	2378      	movs	r3, #120	; 0x78
  40f9f8:	48af      	ldr	r0, [pc, #700]	; (40fcb8 <_vfiprintf_r+0x884>)
  40f9fa:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  40f9fe:	46ac      	mov	ip, r5
  40fa00:	6814      	ldr	r4, [r2, #0]
  40fa02:	f8cd b020 	str.w	fp, [sp, #32]
  40fa06:	f04a 0a02 	orr.w	sl, sl, #2
  40fa0a:	2500      	movs	r5, #0
  40fa0c:	900a      	str	r0, [sp, #40]	; 0x28
  40fa0e:	2302      	movs	r3, #2
  40fa10:	e621      	b.n	40f656 <_vfiprintf_r+0x222>
  40fa12:	f04a 0a20 	orr.w	sl, sl, #32
  40fa16:	f898 3000 	ldrb.w	r3, [r8]
  40fa1a:	e578      	b.n	40f50e <_vfiprintf_r+0xda>
  40fa1c:	f8dd b020 	ldr.w	fp, [sp, #32]
  40fa20:	f8db 0000 	ldr.w	r0, [fp]
  40fa24:	2800      	cmp	r0, #0
  40fa26:	f10b 0304 	add.w	r3, fp, #4
  40fa2a:	f6ff adfb 	blt.w	40f624 <_vfiprintf_r+0x1f0>
  40fa2e:	9308      	str	r3, [sp, #32]
  40fa30:	f898 3000 	ldrb.w	r3, [r8]
  40fa34:	e56b      	b.n	40f50e <_vfiprintf_r+0xda>
  40fa36:	f898 3000 	ldrb.w	r3, [r8]
  40fa3a:	212b      	movs	r1, #43	; 0x2b
  40fa3c:	e567      	b.n	40f50e <_vfiprintf_r+0xda>
  40fa3e:	f898 3000 	ldrb.w	r3, [r8]
  40fa42:	2b2a      	cmp	r3, #42	; 0x2a
  40fa44:	f108 0401 	add.w	r4, r8, #1
  40fa48:	f000 8309 	beq.w	41005e <_vfiprintf_r+0xc2a>
  40fa4c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40fa50:	2a09      	cmp	r2, #9
  40fa52:	bf98      	it	ls
  40fa54:	2500      	movls	r5, #0
  40fa56:	f200 82fe 	bhi.w	410056 <_vfiprintf_r+0xc22>
  40fa5a:	f814 3b01 	ldrb.w	r3, [r4], #1
  40fa5e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40fa62:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40fa66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40fa6a:	2a09      	cmp	r2, #9
  40fa6c:	d9f5      	bls.n	40fa5a <_vfiprintf_r+0x626>
  40fa6e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  40fa72:	46a0      	mov	r8, r4
  40fa74:	e54d      	b.n	40f512 <_vfiprintf_r+0xde>
  40fa76:	4c90      	ldr	r4, [pc, #576]	; (40fcb8 <_vfiprintf_r+0x884>)
  40fa78:	9004      	str	r0, [sp, #16]
  40fa7a:	f01a 0f20 	tst.w	sl, #32
  40fa7e:	46ac      	mov	ip, r5
  40fa80:	940a      	str	r4, [sp, #40]	; 0x28
  40fa82:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40fa86:	f47f af12 	bne.w	40f8ae <_vfiprintf_r+0x47a>
  40fa8a:	f01a 0f10 	tst.w	sl, #16
  40fa8e:	f040 81e9 	bne.w	40fe64 <_vfiprintf_r+0xa30>
  40fa92:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40fa96:	f000 81e5 	beq.w	40fe64 <_vfiprintf_r+0xa30>
  40fa9a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40fa9e:	f8bb 4000 	ldrh.w	r4, [fp]
  40faa2:	f10b 0b04 	add.w	fp, fp, #4
  40faa6:	2500      	movs	r5, #0
  40faa8:	f8cd b020 	str.w	fp, [sp, #32]
  40faac:	e709      	b.n	40f8c2 <_vfiprintf_r+0x48e>
  40faae:	f898 3000 	ldrb.w	r3, [r8]
  40fab2:	2900      	cmp	r1, #0
  40fab4:	f47f ad2b 	bne.w	40f50e <_vfiprintf_r+0xda>
  40fab8:	2120      	movs	r1, #32
  40faba:	e528      	b.n	40f50e <_vfiprintf_r+0xda>
  40fabc:	f04a 0a01 	orr.w	sl, sl, #1
  40fac0:	f898 3000 	ldrb.w	r3, [r8]
  40fac4:	e523      	b.n	40f50e <_vfiprintf_r+0xda>
  40fac6:	9004      	str	r0, [sp, #16]
  40fac8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40facc:	2b00      	cmp	r3, #0
  40face:	f000 80f9 	beq.w	40fcc4 <_vfiprintf_r+0x890>
  40fad2:	2501      	movs	r5, #1
  40fad4:	f04f 0b00 	mov.w	fp, #0
  40fad8:	9503      	str	r5, [sp, #12]
  40fada:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  40fade:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  40fae2:	9505      	str	r5, [sp, #20]
  40fae4:	af16      	add	r7, sp, #88	; 0x58
  40fae6:	e710      	b.n	40f90a <_vfiprintf_r+0x4d6>
  40fae8:	9806      	ldr	r0, [sp, #24]
  40faea:	9902      	ldr	r1, [sp, #8]
  40faec:	aa13      	add	r2, sp, #76	; 0x4c
  40faee:	f7ff fc65 	bl	40f3bc <__sprint_r.part.0>
  40faf2:	2800      	cmp	r0, #0
  40faf4:	f040 80ed 	bne.w	40fcd2 <_vfiprintf_r+0x89e>
  40faf8:	9814      	ldr	r0, [sp, #80]	; 0x50
  40fafa:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fafc:	1c43      	adds	r3, r0, #1
  40fafe:	46cc      	mov	ip, r9
  40fb00:	e602      	b.n	40f708 <_vfiprintf_r+0x2d4>
  40fb02:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fb04:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fb06:	1c59      	adds	r1, r3, #1
  40fb08:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
  40fb0c:	b168      	cbz	r0, 40fb2a <_vfiprintf_r+0x6f6>
  40fb0e:	3201      	adds	r2, #1
  40fb10:	f10d 0047 	add.w	r0, sp, #71	; 0x47
  40fb14:	2301      	movs	r3, #1
  40fb16:	2907      	cmp	r1, #7
  40fb18:	9215      	str	r2, [sp, #84]	; 0x54
  40fb1a:	9114      	str	r1, [sp, #80]	; 0x50
  40fb1c:	e886 0009 	stmia.w	r6, {r0, r3}
  40fb20:	f300 8160 	bgt.w	40fde4 <_vfiprintf_r+0x9b0>
  40fb24:	460b      	mov	r3, r1
  40fb26:	3608      	adds	r6, #8
  40fb28:	3101      	adds	r1, #1
  40fb2a:	9c07      	ldr	r4, [sp, #28]
  40fb2c:	b164      	cbz	r4, 40fb48 <_vfiprintf_r+0x714>
  40fb2e:	3202      	adds	r2, #2
  40fb30:	a812      	add	r0, sp, #72	; 0x48
  40fb32:	2302      	movs	r3, #2
  40fb34:	2907      	cmp	r1, #7
  40fb36:	9215      	str	r2, [sp, #84]	; 0x54
  40fb38:	9114      	str	r1, [sp, #80]	; 0x50
  40fb3a:	e886 0009 	stmia.w	r6, {r0, r3}
  40fb3e:	f300 8157 	bgt.w	40fdf0 <_vfiprintf_r+0x9bc>
  40fb42:	460b      	mov	r3, r1
  40fb44:	3608      	adds	r6, #8
  40fb46:	3101      	adds	r1, #1
  40fb48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40fb4a:	2d80      	cmp	r5, #128	; 0x80
  40fb4c:	f000 8101 	beq.w	40fd52 <_vfiprintf_r+0x91e>
  40fb50:	9d05      	ldr	r5, [sp, #20]
  40fb52:	ebc5 040c 	rsb	r4, r5, ip
  40fb56:	2c00      	cmp	r4, #0
  40fb58:	dd2f      	ble.n	40fbba <_vfiprintf_r+0x786>
  40fb5a:	2c10      	cmp	r4, #16
  40fb5c:	4d57      	ldr	r5, [pc, #348]	; (40fcbc <_vfiprintf_r+0x888>)
  40fb5e:	dd22      	ble.n	40fba6 <_vfiprintf_r+0x772>
  40fb60:	4630      	mov	r0, r6
  40fb62:	f04f 0b10 	mov.w	fp, #16
  40fb66:	462e      	mov	r6, r5
  40fb68:	4625      	mov	r5, r4
  40fb6a:	9c06      	ldr	r4, [sp, #24]
  40fb6c:	e006      	b.n	40fb7c <_vfiprintf_r+0x748>
  40fb6e:	f103 0c02 	add.w	ip, r3, #2
  40fb72:	3008      	adds	r0, #8
  40fb74:	460b      	mov	r3, r1
  40fb76:	3d10      	subs	r5, #16
  40fb78:	2d10      	cmp	r5, #16
  40fb7a:	dd10      	ble.n	40fb9e <_vfiprintf_r+0x76a>
  40fb7c:	1c59      	adds	r1, r3, #1
  40fb7e:	3210      	adds	r2, #16
  40fb80:	2907      	cmp	r1, #7
  40fb82:	9215      	str	r2, [sp, #84]	; 0x54
  40fb84:	e880 0840 	stmia.w	r0, {r6, fp}
  40fb88:	9114      	str	r1, [sp, #80]	; 0x50
  40fb8a:	ddf0      	ble.n	40fb6e <_vfiprintf_r+0x73a>
  40fb8c:	2a00      	cmp	r2, #0
  40fb8e:	d163      	bne.n	40fc58 <_vfiprintf_r+0x824>
  40fb90:	3d10      	subs	r5, #16
  40fb92:	2d10      	cmp	r5, #16
  40fb94:	f04f 0c01 	mov.w	ip, #1
  40fb98:	4613      	mov	r3, r2
  40fb9a:	4648      	mov	r0, r9
  40fb9c:	dcee      	bgt.n	40fb7c <_vfiprintf_r+0x748>
  40fb9e:	462c      	mov	r4, r5
  40fba0:	4661      	mov	r1, ip
  40fba2:	4635      	mov	r5, r6
  40fba4:	4606      	mov	r6, r0
  40fba6:	4422      	add	r2, r4
  40fba8:	2907      	cmp	r1, #7
  40fbaa:	9215      	str	r2, [sp, #84]	; 0x54
  40fbac:	6035      	str	r5, [r6, #0]
  40fbae:	6074      	str	r4, [r6, #4]
  40fbb0:	9114      	str	r1, [sp, #80]	; 0x50
  40fbb2:	f300 80c1 	bgt.w	40fd38 <_vfiprintf_r+0x904>
  40fbb6:	3608      	adds	r6, #8
  40fbb8:	3101      	adds	r1, #1
  40fbba:	9d05      	ldr	r5, [sp, #20]
  40fbbc:	6037      	str	r7, [r6, #0]
  40fbbe:	442a      	add	r2, r5
  40fbc0:	2907      	cmp	r1, #7
  40fbc2:	9215      	str	r2, [sp, #84]	; 0x54
  40fbc4:	6075      	str	r5, [r6, #4]
  40fbc6:	9114      	str	r1, [sp, #80]	; 0x50
  40fbc8:	f340 80c1 	ble.w	40fd4e <_vfiprintf_r+0x91a>
  40fbcc:	2a00      	cmp	r2, #0
  40fbce:	f040 8130 	bne.w	40fe32 <_vfiprintf_r+0x9fe>
  40fbd2:	9214      	str	r2, [sp, #80]	; 0x50
  40fbd4:	464e      	mov	r6, r9
  40fbd6:	f01a 0f04 	tst.w	sl, #4
  40fbda:	f000 808b 	beq.w	40fcf4 <_vfiprintf_r+0x8c0>
  40fbde:	9d04      	ldr	r5, [sp, #16]
  40fbe0:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40fbe4:	ebcb 0405 	rsb	r4, fp, r5
  40fbe8:	2c00      	cmp	r4, #0
  40fbea:	f340 8083 	ble.w	40fcf4 <_vfiprintf_r+0x8c0>
  40fbee:	2c10      	cmp	r4, #16
  40fbf0:	f340 8222 	ble.w	410038 <_vfiprintf_r+0xc04>
  40fbf4:	9914      	ldr	r1, [sp, #80]	; 0x50
  40fbf6:	4d32      	ldr	r5, [pc, #200]	; (40fcc0 <_vfiprintf_r+0x88c>)
  40fbf8:	f8dd a018 	ldr.w	sl, [sp, #24]
  40fbfc:	f8dd b008 	ldr.w	fp, [sp, #8]
  40fc00:	2710      	movs	r7, #16
  40fc02:	e005      	b.n	40fc10 <_vfiprintf_r+0x7dc>
  40fc04:	1c88      	adds	r0, r1, #2
  40fc06:	3608      	adds	r6, #8
  40fc08:	4619      	mov	r1, r3
  40fc0a:	3c10      	subs	r4, #16
  40fc0c:	2c10      	cmp	r4, #16
  40fc0e:	dd10      	ble.n	40fc32 <_vfiprintf_r+0x7fe>
  40fc10:	1c4b      	adds	r3, r1, #1
  40fc12:	3210      	adds	r2, #16
  40fc14:	2b07      	cmp	r3, #7
  40fc16:	9215      	str	r2, [sp, #84]	; 0x54
  40fc18:	e886 00a0 	stmia.w	r6, {r5, r7}
  40fc1c:	9314      	str	r3, [sp, #80]	; 0x50
  40fc1e:	ddf1      	ble.n	40fc04 <_vfiprintf_r+0x7d0>
  40fc20:	2a00      	cmp	r2, #0
  40fc22:	d17d      	bne.n	40fd20 <_vfiprintf_r+0x8ec>
  40fc24:	3c10      	subs	r4, #16
  40fc26:	2c10      	cmp	r4, #16
  40fc28:	f04f 0001 	mov.w	r0, #1
  40fc2c:	4611      	mov	r1, r2
  40fc2e:	464e      	mov	r6, r9
  40fc30:	dcee      	bgt.n	40fc10 <_vfiprintf_r+0x7dc>
  40fc32:	4422      	add	r2, r4
  40fc34:	2807      	cmp	r0, #7
  40fc36:	9215      	str	r2, [sp, #84]	; 0x54
  40fc38:	6035      	str	r5, [r6, #0]
  40fc3a:	6074      	str	r4, [r6, #4]
  40fc3c:	9014      	str	r0, [sp, #80]	; 0x50
  40fc3e:	dd59      	ble.n	40fcf4 <_vfiprintf_r+0x8c0>
  40fc40:	2a00      	cmp	r2, #0
  40fc42:	d14f      	bne.n	40fce4 <_vfiprintf_r+0x8b0>
  40fc44:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40fc46:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40fc4a:	9d04      	ldr	r5, [sp, #16]
  40fc4c:	45ab      	cmp	fp, r5
  40fc4e:	bfac      	ite	ge
  40fc50:	445c      	addge	r4, fp
  40fc52:	1964      	addlt	r4, r4, r5
  40fc54:	9409      	str	r4, [sp, #36]	; 0x24
  40fc56:	e05e      	b.n	40fd16 <_vfiprintf_r+0x8e2>
  40fc58:	4620      	mov	r0, r4
  40fc5a:	9902      	ldr	r1, [sp, #8]
  40fc5c:	aa13      	add	r2, sp, #76	; 0x4c
  40fc5e:	f7ff fbad 	bl	40f3bc <__sprint_r.part.0>
  40fc62:	2800      	cmp	r0, #0
  40fc64:	d135      	bne.n	40fcd2 <_vfiprintf_r+0x89e>
  40fc66:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fc68:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fc6a:	f103 0c01 	add.w	ip, r3, #1
  40fc6e:	4648      	mov	r0, r9
  40fc70:	e781      	b.n	40fb76 <_vfiprintf_r+0x742>
  40fc72:	08e0      	lsrs	r0, r4, #3
  40fc74:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  40fc78:	f004 0207 	and.w	r2, r4, #7
  40fc7c:	08e9      	lsrs	r1, r5, #3
  40fc7e:	3230      	adds	r2, #48	; 0x30
  40fc80:	ea50 0b01 	orrs.w	fp, r0, r1
  40fc84:	461f      	mov	r7, r3
  40fc86:	701a      	strb	r2, [r3, #0]
  40fc88:	4604      	mov	r4, r0
  40fc8a:	460d      	mov	r5, r1
  40fc8c:	f103 33ff 	add.w	r3, r3, #4294967295
  40fc90:	d1ef      	bne.n	40fc72 <_vfiprintf_r+0x83e>
  40fc92:	f01a 0f01 	tst.w	sl, #1
  40fc96:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40fc9a:	4639      	mov	r1, r7
  40fc9c:	f000 80b9 	beq.w	40fe12 <_vfiprintf_r+0x9de>
  40fca0:	2a30      	cmp	r2, #48	; 0x30
  40fca2:	f43f acf8 	beq.w	40f696 <_vfiprintf_r+0x262>
  40fca6:	461f      	mov	r7, r3
  40fca8:	ebc7 0509 	rsb	r5, r7, r9
  40fcac:	2330      	movs	r3, #48	; 0x30
  40fcae:	9505      	str	r5, [sp, #20]
  40fcb0:	f801 3c01 	strb.w	r3, [r1, #-1]
  40fcb4:	e4f2      	b.n	40f69c <_vfiprintf_r+0x268>
  40fcb6:	bf00      	nop
  40fcb8:	004161a8 	.word	0x004161a8
  40fcbc:	00416204 	.word	0x00416204
  40fcc0:	00416214 	.word	0x00416214
  40fcc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40fcc6:	b123      	cbz	r3, 40fcd2 <_vfiprintf_r+0x89e>
  40fcc8:	9806      	ldr	r0, [sp, #24]
  40fcca:	9902      	ldr	r1, [sp, #8]
  40fccc:	aa13      	add	r2, sp, #76	; 0x4c
  40fcce:	f7ff fb75 	bl	40f3bc <__sprint_r.part.0>
  40fcd2:	9c02      	ldr	r4, [sp, #8]
  40fcd4:	89a3      	ldrh	r3, [r4, #12]
  40fcd6:	065b      	lsls	r3, r3, #25
  40fcd8:	f53f ac9c 	bmi.w	40f614 <_vfiprintf_r+0x1e0>
  40fcdc:	9809      	ldr	r0, [sp, #36]	; 0x24
  40fcde:	b031      	add	sp, #196	; 0xc4
  40fce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fce4:	9806      	ldr	r0, [sp, #24]
  40fce6:	9902      	ldr	r1, [sp, #8]
  40fce8:	aa13      	add	r2, sp, #76	; 0x4c
  40fcea:	f7ff fb67 	bl	40f3bc <__sprint_r.part.0>
  40fcee:	2800      	cmp	r0, #0
  40fcf0:	d1ef      	bne.n	40fcd2 <_vfiprintf_r+0x89e>
  40fcf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fcf4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40fcf6:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40fcfa:	9d04      	ldr	r5, [sp, #16]
  40fcfc:	45ab      	cmp	fp, r5
  40fcfe:	bfac      	ite	ge
  40fd00:	445c      	addge	r4, fp
  40fd02:	1964      	addlt	r4, r4, r5
  40fd04:	9409      	str	r4, [sp, #36]	; 0x24
  40fd06:	b132      	cbz	r2, 40fd16 <_vfiprintf_r+0x8e2>
  40fd08:	9806      	ldr	r0, [sp, #24]
  40fd0a:	9902      	ldr	r1, [sp, #8]
  40fd0c:	aa13      	add	r2, sp, #76	; 0x4c
  40fd0e:	f7ff fb55 	bl	40f3bc <__sprint_r.part.0>
  40fd12:	2800      	cmp	r0, #0
  40fd14:	d1dd      	bne.n	40fcd2 <_vfiprintf_r+0x89e>
  40fd16:	2000      	movs	r0, #0
  40fd18:	9014      	str	r0, [sp, #80]	; 0x50
  40fd1a:	464e      	mov	r6, r9
  40fd1c:	f7ff bbbd 	b.w	40f49a <_vfiprintf_r+0x66>
  40fd20:	4650      	mov	r0, sl
  40fd22:	4659      	mov	r1, fp
  40fd24:	aa13      	add	r2, sp, #76	; 0x4c
  40fd26:	f7ff fb49 	bl	40f3bc <__sprint_r.part.0>
  40fd2a:	2800      	cmp	r0, #0
  40fd2c:	d1d1      	bne.n	40fcd2 <_vfiprintf_r+0x89e>
  40fd2e:	9914      	ldr	r1, [sp, #80]	; 0x50
  40fd30:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fd32:	1c48      	adds	r0, r1, #1
  40fd34:	464e      	mov	r6, r9
  40fd36:	e768      	b.n	40fc0a <_vfiprintf_r+0x7d6>
  40fd38:	2a00      	cmp	r2, #0
  40fd3a:	f040 80fa 	bne.w	40ff32 <_vfiprintf_r+0xafe>
  40fd3e:	9c05      	ldr	r4, [sp, #20]
  40fd40:	9720      	str	r7, [sp, #128]	; 0x80
  40fd42:	2301      	movs	r3, #1
  40fd44:	9421      	str	r4, [sp, #132]	; 0x84
  40fd46:	9415      	str	r4, [sp, #84]	; 0x54
  40fd48:	4622      	mov	r2, r4
  40fd4a:	9314      	str	r3, [sp, #80]	; 0x50
  40fd4c:	464e      	mov	r6, r9
  40fd4e:	3608      	adds	r6, #8
  40fd50:	e741      	b.n	40fbd6 <_vfiprintf_r+0x7a2>
  40fd52:	9d04      	ldr	r5, [sp, #16]
  40fd54:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40fd58:	ebcb 0405 	rsb	r4, fp, r5
  40fd5c:	2c00      	cmp	r4, #0
  40fd5e:	f77f aef7 	ble.w	40fb50 <_vfiprintf_r+0x71c>
  40fd62:	2c10      	cmp	r4, #16
  40fd64:	4da8      	ldr	r5, [pc, #672]	; (410008 <_vfiprintf_r+0xbd4>)
  40fd66:	f340 8174 	ble.w	410052 <_vfiprintf_r+0xc1e>
  40fd6a:	4629      	mov	r1, r5
  40fd6c:	f04f 0b10 	mov.w	fp, #16
  40fd70:	4625      	mov	r5, r4
  40fd72:	4664      	mov	r4, ip
  40fd74:	46b4      	mov	ip, r6
  40fd76:	460e      	mov	r6, r1
  40fd78:	e006      	b.n	40fd88 <_vfiprintf_r+0x954>
  40fd7a:	1c98      	adds	r0, r3, #2
  40fd7c:	f10c 0c08 	add.w	ip, ip, #8
  40fd80:	460b      	mov	r3, r1
  40fd82:	3d10      	subs	r5, #16
  40fd84:	2d10      	cmp	r5, #16
  40fd86:	dd0f      	ble.n	40fda8 <_vfiprintf_r+0x974>
  40fd88:	1c59      	adds	r1, r3, #1
  40fd8a:	3210      	adds	r2, #16
  40fd8c:	2907      	cmp	r1, #7
  40fd8e:	9215      	str	r2, [sp, #84]	; 0x54
  40fd90:	e88c 0840 	stmia.w	ip, {r6, fp}
  40fd94:	9114      	str	r1, [sp, #80]	; 0x50
  40fd96:	ddf0      	ble.n	40fd7a <_vfiprintf_r+0x946>
  40fd98:	b9ba      	cbnz	r2, 40fdca <_vfiprintf_r+0x996>
  40fd9a:	3d10      	subs	r5, #16
  40fd9c:	2d10      	cmp	r5, #16
  40fd9e:	f04f 0001 	mov.w	r0, #1
  40fda2:	4613      	mov	r3, r2
  40fda4:	46cc      	mov	ip, r9
  40fda6:	dcef      	bgt.n	40fd88 <_vfiprintf_r+0x954>
  40fda8:	4633      	mov	r3, r6
  40fdaa:	4666      	mov	r6, ip
  40fdac:	46a4      	mov	ip, r4
  40fdae:	462c      	mov	r4, r5
  40fdb0:	461d      	mov	r5, r3
  40fdb2:	4422      	add	r2, r4
  40fdb4:	2807      	cmp	r0, #7
  40fdb6:	9215      	str	r2, [sp, #84]	; 0x54
  40fdb8:	6035      	str	r5, [r6, #0]
  40fdba:	6074      	str	r4, [r6, #4]
  40fdbc:	9014      	str	r0, [sp, #80]	; 0x50
  40fdbe:	f300 80b2 	bgt.w	40ff26 <_vfiprintf_r+0xaf2>
  40fdc2:	3608      	adds	r6, #8
  40fdc4:	1c41      	adds	r1, r0, #1
  40fdc6:	4603      	mov	r3, r0
  40fdc8:	e6c2      	b.n	40fb50 <_vfiprintf_r+0x71c>
  40fdca:	9806      	ldr	r0, [sp, #24]
  40fdcc:	9902      	ldr	r1, [sp, #8]
  40fdce:	aa13      	add	r2, sp, #76	; 0x4c
  40fdd0:	f7ff faf4 	bl	40f3bc <__sprint_r.part.0>
  40fdd4:	2800      	cmp	r0, #0
  40fdd6:	f47f af7c 	bne.w	40fcd2 <_vfiprintf_r+0x89e>
  40fdda:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fddc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fdde:	1c58      	adds	r0, r3, #1
  40fde0:	46cc      	mov	ip, r9
  40fde2:	e7ce      	b.n	40fd82 <_vfiprintf_r+0x94e>
  40fde4:	2a00      	cmp	r2, #0
  40fde6:	d17c      	bne.n	40fee2 <_vfiprintf_r+0xaae>
  40fde8:	4619      	mov	r1, r3
  40fdea:	464e      	mov	r6, r9
  40fdec:	4613      	mov	r3, r2
  40fdee:	e69c      	b.n	40fb2a <_vfiprintf_r+0x6f6>
  40fdf0:	2a00      	cmp	r2, #0
  40fdf2:	f040 8087 	bne.w	40ff04 <_vfiprintf_r+0xad0>
  40fdf6:	2101      	movs	r1, #1
  40fdf8:	4613      	mov	r3, r2
  40fdfa:	464e      	mov	r6, r9
  40fdfc:	e6a4      	b.n	40fb48 <_vfiprintf_r+0x714>
  40fdfe:	464f      	mov	r7, r9
  40fe00:	e44c      	b.n	40f69c <_vfiprintf_r+0x268>
  40fe02:	2d00      	cmp	r5, #0
  40fe04:	bf08      	it	eq
  40fe06:	2c0a      	cmpeq	r4, #10
  40fe08:	d249      	bcs.n	40fe9e <_vfiprintf_r+0xa6a>
  40fe0a:	af30      	add	r7, sp, #192	; 0xc0
  40fe0c:	3430      	adds	r4, #48	; 0x30
  40fe0e:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40fe12:	ebc7 0309 	rsb	r3, r7, r9
  40fe16:	9305      	str	r3, [sp, #20]
  40fe18:	e440      	b.n	40f69c <_vfiprintf_r+0x268>
  40fe1a:	2302      	movs	r3, #2
  40fe1c:	e41b      	b.n	40f656 <_vfiprintf_r+0x222>
  40fe1e:	2a00      	cmp	r2, #0
  40fe20:	f040 80b2 	bne.w	40ff88 <_vfiprintf_r+0xb54>
  40fe24:	4613      	mov	r3, r2
  40fe26:	2101      	movs	r1, #1
  40fe28:	464e      	mov	r6, r9
  40fe2a:	e66d      	b.n	40fb08 <_vfiprintf_r+0x6d4>
  40fe2c:	4644      	mov	r4, r8
  40fe2e:	f7ff bb5c 	b.w	40f4ea <_vfiprintf_r+0xb6>
  40fe32:	9806      	ldr	r0, [sp, #24]
  40fe34:	9902      	ldr	r1, [sp, #8]
  40fe36:	aa13      	add	r2, sp, #76	; 0x4c
  40fe38:	f7ff fac0 	bl	40f3bc <__sprint_r.part.0>
  40fe3c:	2800      	cmp	r0, #0
  40fe3e:	f47f af48 	bne.w	40fcd2 <_vfiprintf_r+0x89e>
  40fe42:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fe44:	464e      	mov	r6, r9
  40fe46:	e6c6      	b.n	40fbd6 <_vfiprintf_r+0x7a2>
  40fe48:	9d08      	ldr	r5, [sp, #32]
  40fe4a:	682c      	ldr	r4, [r5, #0]
  40fe4c:	3504      	adds	r5, #4
  40fe4e:	9508      	str	r5, [sp, #32]
  40fe50:	2500      	movs	r5, #0
  40fe52:	e400      	b.n	40f656 <_vfiprintf_r+0x222>
  40fe54:	9d08      	ldr	r5, [sp, #32]
  40fe56:	682c      	ldr	r4, [r5, #0]
  40fe58:	3504      	adds	r5, #4
  40fe5a:	9508      	str	r5, [sp, #32]
  40fe5c:	2301      	movs	r3, #1
  40fe5e:	2500      	movs	r5, #0
  40fe60:	f7ff bbf9 	b.w	40f656 <_vfiprintf_r+0x222>
  40fe64:	9d08      	ldr	r5, [sp, #32]
  40fe66:	682c      	ldr	r4, [r5, #0]
  40fe68:	3504      	adds	r5, #4
  40fe6a:	9508      	str	r5, [sp, #32]
  40fe6c:	2500      	movs	r5, #0
  40fe6e:	e528      	b.n	40f8c2 <_vfiprintf_r+0x48e>
  40fe70:	9d08      	ldr	r5, [sp, #32]
  40fe72:	f8dd b020 	ldr.w	fp, [sp, #32]
  40fe76:	682c      	ldr	r4, [r5, #0]
  40fe78:	f10b 0b04 	add.w	fp, fp, #4
  40fe7c:	17e5      	asrs	r5, r4, #31
  40fe7e:	f8cd b020 	str.w	fp, [sp, #32]
  40fe82:	4622      	mov	r2, r4
  40fe84:	462b      	mov	r3, r5
  40fe86:	e48f      	b.n	40f7a8 <_vfiprintf_r+0x374>
  40fe88:	9806      	ldr	r0, [sp, #24]
  40fe8a:	9902      	ldr	r1, [sp, #8]
  40fe8c:	aa13      	add	r2, sp, #76	; 0x4c
  40fe8e:	f7ff fa95 	bl	40f3bc <__sprint_r.part.0>
  40fe92:	2800      	cmp	r0, #0
  40fe94:	f47f af1d 	bne.w	40fcd2 <_vfiprintf_r+0x89e>
  40fe98:	464e      	mov	r6, r9
  40fe9a:	f7ff bb9b 	b.w	40f5d4 <_vfiprintf_r+0x1a0>
  40fe9e:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
  40fea2:	9603      	str	r6, [sp, #12]
  40fea4:	465e      	mov	r6, fp
  40fea6:	46e3      	mov	fp, ip
  40fea8:	4620      	mov	r0, r4
  40feaa:	4629      	mov	r1, r5
  40feac:	220a      	movs	r2, #10
  40feae:	2300      	movs	r3, #0
  40feb0:	f7fc fac4 	bl	40c43c <__aeabi_uldivmod>
  40feb4:	3230      	adds	r2, #48	; 0x30
  40feb6:	7032      	strb	r2, [r6, #0]
  40feb8:	4620      	mov	r0, r4
  40feba:	4629      	mov	r1, r5
  40febc:	220a      	movs	r2, #10
  40febe:	2300      	movs	r3, #0
  40fec0:	f7fc fabc 	bl	40c43c <__aeabi_uldivmod>
  40fec4:	4604      	mov	r4, r0
  40fec6:	460d      	mov	r5, r1
  40fec8:	ea54 0005 	orrs.w	r0, r4, r5
  40fecc:	4637      	mov	r7, r6
  40fece:	f106 36ff 	add.w	r6, r6, #4294967295
  40fed2:	d1e9      	bne.n	40fea8 <_vfiprintf_r+0xa74>
  40fed4:	ebc7 0309 	rsb	r3, r7, r9
  40fed8:	46dc      	mov	ip, fp
  40feda:	9e03      	ldr	r6, [sp, #12]
  40fedc:	9305      	str	r3, [sp, #20]
  40fede:	f7ff bbdd 	b.w	40f69c <_vfiprintf_r+0x268>
  40fee2:	9806      	ldr	r0, [sp, #24]
  40fee4:	9902      	ldr	r1, [sp, #8]
  40fee6:	f8cd c004 	str.w	ip, [sp, #4]
  40feea:	aa13      	add	r2, sp, #76	; 0x4c
  40feec:	f7ff fa66 	bl	40f3bc <__sprint_r.part.0>
  40fef0:	f8dd c004 	ldr.w	ip, [sp, #4]
  40fef4:	2800      	cmp	r0, #0
  40fef6:	f47f aeec 	bne.w	40fcd2 <_vfiprintf_r+0x89e>
  40fefa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fefc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fefe:	1c59      	adds	r1, r3, #1
  40ff00:	464e      	mov	r6, r9
  40ff02:	e612      	b.n	40fb2a <_vfiprintf_r+0x6f6>
  40ff04:	9806      	ldr	r0, [sp, #24]
  40ff06:	9902      	ldr	r1, [sp, #8]
  40ff08:	f8cd c004 	str.w	ip, [sp, #4]
  40ff0c:	aa13      	add	r2, sp, #76	; 0x4c
  40ff0e:	f7ff fa55 	bl	40f3bc <__sprint_r.part.0>
  40ff12:	f8dd c004 	ldr.w	ip, [sp, #4]
  40ff16:	2800      	cmp	r0, #0
  40ff18:	f47f aedb 	bne.w	40fcd2 <_vfiprintf_r+0x89e>
  40ff1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40ff1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40ff20:	1c59      	adds	r1, r3, #1
  40ff22:	464e      	mov	r6, r9
  40ff24:	e610      	b.n	40fb48 <_vfiprintf_r+0x714>
  40ff26:	2a00      	cmp	r2, #0
  40ff28:	d156      	bne.n	40ffd8 <_vfiprintf_r+0xba4>
  40ff2a:	2101      	movs	r1, #1
  40ff2c:	4613      	mov	r3, r2
  40ff2e:	464e      	mov	r6, r9
  40ff30:	e60e      	b.n	40fb50 <_vfiprintf_r+0x71c>
  40ff32:	9806      	ldr	r0, [sp, #24]
  40ff34:	9902      	ldr	r1, [sp, #8]
  40ff36:	aa13      	add	r2, sp, #76	; 0x4c
  40ff38:	f7ff fa40 	bl	40f3bc <__sprint_r.part.0>
  40ff3c:	2800      	cmp	r0, #0
  40ff3e:	f47f aec8 	bne.w	40fcd2 <_vfiprintf_r+0x89e>
  40ff42:	9914      	ldr	r1, [sp, #80]	; 0x50
  40ff44:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40ff46:	3101      	adds	r1, #1
  40ff48:	464e      	mov	r6, r9
  40ff4a:	e636      	b.n	40fbba <_vfiprintf_r+0x786>
  40ff4c:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40ff50:	4264      	negs	r4, r4
  40ff52:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40ff56:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  40ff5a:	f8cd b01c 	str.w	fp, [sp, #28]
  40ff5e:	f8cd c014 	str.w	ip, [sp, #20]
  40ff62:	2301      	movs	r3, #1
  40ff64:	f7ff bb7f 	b.w	40f666 <_vfiprintf_r+0x232>
  40ff68:	f01a 0f10 	tst.w	sl, #16
  40ff6c:	d11d      	bne.n	40ffaa <_vfiprintf_r+0xb76>
  40ff6e:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40ff72:	d059      	beq.n	410028 <_vfiprintf_r+0xbf4>
  40ff74:	9d08      	ldr	r5, [sp, #32]
  40ff76:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40ff7a:	682b      	ldr	r3, [r5, #0]
  40ff7c:	3504      	adds	r5, #4
  40ff7e:	9508      	str	r5, [sp, #32]
  40ff80:	f8a3 b000 	strh.w	fp, [r3]
  40ff84:	f7ff ba89 	b.w	40f49a <_vfiprintf_r+0x66>
  40ff88:	9806      	ldr	r0, [sp, #24]
  40ff8a:	9902      	ldr	r1, [sp, #8]
  40ff8c:	f8cd c004 	str.w	ip, [sp, #4]
  40ff90:	aa13      	add	r2, sp, #76	; 0x4c
  40ff92:	f7ff fa13 	bl	40f3bc <__sprint_r.part.0>
  40ff96:	f8dd c004 	ldr.w	ip, [sp, #4]
  40ff9a:	2800      	cmp	r0, #0
  40ff9c:	f47f ae99 	bne.w	40fcd2 <_vfiprintf_r+0x89e>
  40ffa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40ffa2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40ffa4:	1c59      	adds	r1, r3, #1
  40ffa6:	464e      	mov	r6, r9
  40ffa8:	e5ae      	b.n	40fb08 <_vfiprintf_r+0x6d4>
  40ffaa:	f8dd b020 	ldr.w	fp, [sp, #32]
  40ffae:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ffb0:	f8db 3000 	ldr.w	r3, [fp]
  40ffb4:	f10b 0b04 	add.w	fp, fp, #4
  40ffb8:	f8cd b020 	str.w	fp, [sp, #32]
  40ffbc:	601c      	str	r4, [r3, #0]
  40ffbe:	f7ff ba6c 	b.w	40f49a <_vfiprintf_r+0x66>
  40ffc2:	9408      	str	r4, [sp, #32]
  40ffc4:	f7fc ff84 	bl	40ced0 <strlen>
  40ffc8:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
  40ffcc:	9005      	str	r0, [sp, #20]
  40ffce:	9407      	str	r4, [sp, #28]
  40ffd0:	f04f 0c00 	mov.w	ip, #0
  40ffd4:	f7ff bb62 	b.w	40f69c <_vfiprintf_r+0x268>
  40ffd8:	9806      	ldr	r0, [sp, #24]
  40ffda:	9902      	ldr	r1, [sp, #8]
  40ffdc:	f8cd c004 	str.w	ip, [sp, #4]
  40ffe0:	aa13      	add	r2, sp, #76	; 0x4c
  40ffe2:	f7ff f9eb 	bl	40f3bc <__sprint_r.part.0>
  40ffe6:	f8dd c004 	ldr.w	ip, [sp, #4]
  40ffea:	2800      	cmp	r0, #0
  40ffec:	f47f ae71 	bne.w	40fcd2 <_vfiprintf_r+0x89e>
  40fff0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fff2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fff4:	1c59      	adds	r1, r3, #1
  40fff6:	464e      	mov	r6, r9
  40fff8:	e5aa      	b.n	40fb50 <_vfiprintf_r+0x71c>
  40fffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40fffc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40fffe:	4d03      	ldr	r5, [pc, #12]	; (41000c <_vfiprintf_r+0xbd8>)
  410000:	3301      	adds	r3, #1
  410002:	f7ff bb9b 	b.w	40f73c <_vfiprintf_r+0x308>
  410006:	bf00      	nop
  410008:	00416204 	.word	0x00416204
  41000c:	00416214 	.word	0x00416214
  410010:	f1bc 0f06 	cmp.w	ip, #6
  410014:	bf34      	ite	cc
  410016:	4663      	movcc	r3, ip
  410018:	2306      	movcs	r3, #6
  41001a:	9408      	str	r4, [sp, #32]
  41001c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
  410020:	9305      	str	r3, [sp, #20]
  410022:	9403      	str	r4, [sp, #12]
  410024:	4f16      	ldr	r7, [pc, #88]	; (410080 <_vfiprintf_r+0xc4c>)
  410026:	e470      	b.n	40f90a <_vfiprintf_r+0x4d6>
  410028:	9c08      	ldr	r4, [sp, #32]
  41002a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  41002c:	6823      	ldr	r3, [r4, #0]
  41002e:	3404      	adds	r4, #4
  410030:	9408      	str	r4, [sp, #32]
  410032:	601d      	str	r5, [r3, #0]
  410034:	f7ff ba31 	b.w	40f49a <_vfiprintf_r+0x66>
  410038:	9814      	ldr	r0, [sp, #80]	; 0x50
  41003a:	4d12      	ldr	r5, [pc, #72]	; (410084 <_vfiprintf_r+0xc50>)
  41003c:	3001      	adds	r0, #1
  41003e:	e5f8      	b.n	40fc32 <_vfiprintf_r+0x7fe>
  410040:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  410044:	f8cd c014 	str.w	ip, [sp, #20]
  410048:	9507      	str	r5, [sp, #28]
  41004a:	9408      	str	r4, [sp, #32]
  41004c:	4684      	mov	ip, r0
  41004e:	f7ff bb25 	b.w	40f69c <_vfiprintf_r+0x268>
  410052:	4608      	mov	r0, r1
  410054:	e6ad      	b.n	40fdb2 <_vfiprintf_r+0x97e>
  410056:	46a0      	mov	r8, r4
  410058:	2500      	movs	r5, #0
  41005a:	f7ff ba5a 	b.w	40f512 <_vfiprintf_r+0xde>
  41005e:	f8dd b020 	ldr.w	fp, [sp, #32]
  410062:	f898 3001 	ldrb.w	r3, [r8, #1]
  410066:	f8db 5000 	ldr.w	r5, [fp]
  41006a:	f10b 0204 	add.w	r2, fp, #4
  41006e:	2d00      	cmp	r5, #0
  410070:	9208      	str	r2, [sp, #32]
  410072:	46a0      	mov	r8, r4
  410074:	f6bf aa4b 	bge.w	40f50e <_vfiprintf_r+0xda>
  410078:	f04f 35ff 	mov.w	r5, #4294967295
  41007c:	f7ff ba47 	b.w	40f50e <_vfiprintf_r+0xda>
  410080:	004161bc 	.word	0x004161bc
  410084:	00416214 	.word	0x00416214

00410088 <__sbprintf>:
  410088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41008c:	460c      	mov	r4, r1
  41008e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  410092:	f8b1 900c 	ldrh.w	r9, [r1, #12]
  410096:	69e7      	ldr	r7, [r4, #28]
  410098:	6e49      	ldr	r1, [r1, #100]	; 0x64
  41009a:	f8b4 800e 	ldrh.w	r8, [r4, #14]
  41009e:	9119      	str	r1, [sp, #100]	; 0x64
  4100a0:	ad1a      	add	r5, sp, #104	; 0x68
  4100a2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4100a6:	f04f 0e00 	mov.w	lr, #0
  4100aa:	9707      	str	r7, [sp, #28]
  4100ac:	f029 0902 	bic.w	r9, r9, #2
  4100b0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4100b2:	9500      	str	r5, [sp, #0]
  4100b4:	4669      	mov	r1, sp
  4100b6:	9504      	str	r5, [sp, #16]
  4100b8:	9602      	str	r6, [sp, #8]
  4100ba:	9605      	str	r6, [sp, #20]
  4100bc:	f8ad 900c 	strh.w	r9, [sp, #12]
  4100c0:	f8ad 800e 	strh.w	r8, [sp, #14]
  4100c4:	9709      	str	r7, [sp, #36]	; 0x24
  4100c6:	f8cd e018 	str.w	lr, [sp, #24]
  4100ca:	4606      	mov	r6, r0
  4100cc:	f7ff f9b2 	bl	40f434 <_vfiprintf_r>
  4100d0:	1e05      	subs	r5, r0, #0
  4100d2:	db07      	blt.n	4100e4 <__sbprintf+0x5c>
  4100d4:	4630      	mov	r0, r6
  4100d6:	4669      	mov	r1, sp
  4100d8:	f001 f908 	bl	4112ec <_fflush_r>
  4100dc:	2800      	cmp	r0, #0
  4100de:	bf18      	it	ne
  4100e0:	f04f 35ff 	movne.w	r5, #4294967295
  4100e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4100e8:	065b      	lsls	r3, r3, #25
  4100ea:	d503      	bpl.n	4100f4 <__sbprintf+0x6c>
  4100ec:	89a3      	ldrh	r3, [r4, #12]
  4100ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4100f2:	81a3      	strh	r3, [r4, #12]
  4100f4:	4628      	mov	r0, r5
  4100f6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  4100fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4100fe:	bf00      	nop

00410100 <_write_r>:
  410100:	b570      	push	{r4, r5, r6, lr}
  410102:	4c08      	ldr	r4, [pc, #32]	; (410124 <_write_r+0x24>)
  410104:	4606      	mov	r6, r0
  410106:	2500      	movs	r5, #0
  410108:	4608      	mov	r0, r1
  41010a:	4611      	mov	r1, r2
  41010c:	461a      	mov	r2, r3
  41010e:	6025      	str	r5, [r4, #0]
  410110:	f7fa f958 	bl	40a3c4 <_write>
  410114:	1c43      	adds	r3, r0, #1
  410116:	d000      	beq.n	41011a <_write_r+0x1a>
  410118:	bd70      	pop	{r4, r5, r6, pc}
  41011a:	6823      	ldr	r3, [r4, #0]
  41011c:	2b00      	cmp	r3, #0
  41011e:	d0fb      	beq.n	410118 <_write_r+0x18>
  410120:	6033      	str	r3, [r6, #0]
  410122:	bd70      	pop	{r4, r5, r6, pc}
  410124:	200099d0 	.word	0x200099d0

00410128 <__swsetup_r>:
  410128:	4b2f      	ldr	r3, [pc, #188]	; (4101e8 <__swsetup_r+0xc0>)
  41012a:	681b      	ldr	r3, [r3, #0]
  41012c:	b570      	push	{r4, r5, r6, lr}
  41012e:	4606      	mov	r6, r0
  410130:	460c      	mov	r4, r1
  410132:	b113      	cbz	r3, 41013a <__swsetup_r+0x12>
  410134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  410136:	2a00      	cmp	r2, #0
  410138:	d036      	beq.n	4101a8 <__swsetup_r+0x80>
  41013a:	89a5      	ldrh	r5, [r4, #12]
  41013c:	b2ab      	uxth	r3, r5
  41013e:	0719      	lsls	r1, r3, #28
  410140:	d50c      	bpl.n	41015c <__swsetup_r+0x34>
  410142:	6922      	ldr	r2, [r4, #16]
  410144:	b1aa      	cbz	r2, 410172 <__swsetup_r+0x4a>
  410146:	f013 0101 	ands.w	r1, r3, #1
  41014a:	d01e      	beq.n	41018a <__swsetup_r+0x62>
  41014c:	6963      	ldr	r3, [r4, #20]
  41014e:	2100      	movs	r1, #0
  410150:	425b      	negs	r3, r3
  410152:	61a3      	str	r3, [r4, #24]
  410154:	60a1      	str	r1, [r4, #8]
  410156:	b1f2      	cbz	r2, 410196 <__swsetup_r+0x6e>
  410158:	2000      	movs	r0, #0
  41015a:	bd70      	pop	{r4, r5, r6, pc}
  41015c:	06da      	lsls	r2, r3, #27
  41015e:	d53b      	bpl.n	4101d8 <__swsetup_r+0xb0>
  410160:	075b      	lsls	r3, r3, #29
  410162:	d425      	bmi.n	4101b0 <__swsetup_r+0x88>
  410164:	6922      	ldr	r2, [r4, #16]
  410166:	f045 0308 	orr.w	r3, r5, #8
  41016a:	81a3      	strh	r3, [r4, #12]
  41016c:	b29b      	uxth	r3, r3
  41016e:	2a00      	cmp	r2, #0
  410170:	d1e9      	bne.n	410146 <__swsetup_r+0x1e>
  410172:	f403 7120 	and.w	r1, r3, #640	; 0x280
  410176:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  41017a:	d0e4      	beq.n	410146 <__swsetup_r+0x1e>
  41017c:	4630      	mov	r0, r6
  41017e:	4621      	mov	r1, r4
  410180:	f001 fcc2 	bl	411b08 <__smakebuf_r>
  410184:	89a3      	ldrh	r3, [r4, #12]
  410186:	6922      	ldr	r2, [r4, #16]
  410188:	e7dd      	b.n	410146 <__swsetup_r+0x1e>
  41018a:	0798      	lsls	r0, r3, #30
  41018c:	bf58      	it	pl
  41018e:	6961      	ldrpl	r1, [r4, #20]
  410190:	60a1      	str	r1, [r4, #8]
  410192:	2a00      	cmp	r2, #0
  410194:	d1e0      	bne.n	410158 <__swsetup_r+0x30>
  410196:	89a3      	ldrh	r3, [r4, #12]
  410198:	061a      	lsls	r2, r3, #24
  41019a:	d5dd      	bpl.n	410158 <__swsetup_r+0x30>
  41019c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4101a0:	81a3      	strh	r3, [r4, #12]
  4101a2:	f04f 30ff 	mov.w	r0, #4294967295
  4101a6:	bd70      	pop	{r4, r5, r6, pc}
  4101a8:	4618      	mov	r0, r3
  4101aa:	f001 f8bb 	bl	411324 <__sinit>
  4101ae:	e7c4      	b.n	41013a <__swsetup_r+0x12>
  4101b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4101b2:	b149      	cbz	r1, 4101c8 <__swsetup_r+0xa0>
  4101b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4101b8:	4299      	cmp	r1, r3
  4101ba:	d003      	beq.n	4101c4 <__swsetup_r+0x9c>
  4101bc:	4630      	mov	r0, r6
  4101be:	f001 f9f3 	bl	4115a8 <_free_r>
  4101c2:	89a5      	ldrh	r5, [r4, #12]
  4101c4:	2300      	movs	r3, #0
  4101c6:	6323      	str	r3, [r4, #48]	; 0x30
  4101c8:	f025 0524 	bic.w	r5, r5, #36	; 0x24
  4101cc:	2300      	movs	r3, #0
  4101ce:	6922      	ldr	r2, [r4, #16]
  4101d0:	6063      	str	r3, [r4, #4]
  4101d2:	b2ad      	uxth	r5, r5
  4101d4:	6022      	str	r2, [r4, #0]
  4101d6:	e7c6      	b.n	410166 <__swsetup_r+0x3e>
  4101d8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  4101dc:	2309      	movs	r3, #9
  4101de:	6033      	str	r3, [r6, #0]
  4101e0:	f04f 30ff 	mov.w	r0, #4294967295
  4101e4:	81a5      	strh	r5, [r4, #12]
  4101e6:	bd70      	pop	{r4, r5, r6, pc}
  4101e8:	20000798 	.word	0x20000798

004101ec <register_fini>:
  4101ec:	4b02      	ldr	r3, [pc, #8]	; (4101f8 <register_fini+0xc>)
  4101ee:	b113      	cbz	r3, 4101f6 <register_fini+0xa>
  4101f0:	4802      	ldr	r0, [pc, #8]	; (4101fc <register_fini+0x10>)
  4101f2:	f000 b805 	b.w	410200 <atexit>
  4101f6:	4770      	bx	lr
  4101f8:	00000000 	.word	0x00000000
  4101fc:	00411421 	.word	0x00411421

00410200 <atexit>:
  410200:	4601      	mov	r1, r0
  410202:	2000      	movs	r0, #0
  410204:	4602      	mov	r2, r0
  410206:	4603      	mov	r3, r0
  410208:	f004 bb92 	b.w	414930 <__register_exitproc>

0041020c <_close_r>:
  41020c:	b538      	push	{r3, r4, r5, lr}
  41020e:	4c07      	ldr	r4, [pc, #28]	; (41022c <_close_r+0x20>)
  410210:	2300      	movs	r3, #0
  410212:	4605      	mov	r5, r0
  410214:	4608      	mov	r0, r1
  410216:	6023      	str	r3, [r4, #0]
  410218:	f7fc f814 	bl	40c244 <_close>
  41021c:	1c43      	adds	r3, r0, #1
  41021e:	d000      	beq.n	410222 <_close_r+0x16>
  410220:	bd38      	pop	{r3, r4, r5, pc}
  410222:	6823      	ldr	r3, [r4, #0]
  410224:	2b00      	cmp	r3, #0
  410226:	d0fb      	beq.n	410220 <_close_r+0x14>
  410228:	602b      	str	r3, [r5, #0]
  41022a:	bd38      	pop	{r3, r4, r5, pc}
  41022c:	200099d0 	.word	0x200099d0

00410230 <quorem>:
  410230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410234:	6903      	ldr	r3, [r0, #16]
  410236:	690d      	ldr	r5, [r1, #16]
  410238:	429d      	cmp	r5, r3
  41023a:	b083      	sub	sp, #12
  41023c:	4683      	mov	fp, r0
  41023e:	f300 808b 	bgt.w	410358 <quorem+0x128>
  410242:	3d01      	subs	r5, #1
  410244:	f101 0414 	add.w	r4, r1, #20
  410248:	f100 0a14 	add.w	sl, r0, #20
  41024c:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
  410250:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  410254:	3201      	adds	r2, #1
  410256:	fbb3 f8f2 	udiv	r8, r3, r2
  41025a:	00aa      	lsls	r2, r5, #2
  41025c:	4691      	mov	r9, r2
  41025e:	9200      	str	r2, [sp, #0]
  410260:	4452      	add	r2, sl
  410262:	44a1      	add	r9, r4
  410264:	9201      	str	r2, [sp, #4]
  410266:	f1b8 0f00 	cmp.w	r8, #0
  41026a:	d03d      	beq.n	4102e8 <quorem+0xb8>
  41026c:	f04f 0e00 	mov.w	lr, #0
  410270:	4670      	mov	r0, lr
  410272:	4622      	mov	r2, r4
  410274:	4653      	mov	r3, sl
  410276:	468c      	mov	ip, r1
  410278:	f852 6b04 	ldr.w	r6, [r2], #4
  41027c:	6819      	ldr	r1, [r3, #0]
  41027e:	b2b7      	uxth	r7, r6
  410280:	0c36      	lsrs	r6, r6, #16
  410282:	fb07 ee08 	mla	lr, r7, r8, lr
  410286:	fb06 f608 	mul.w	r6, r6, r8
  41028a:	eb06 461e 	add.w	r6, r6, lr, lsr #16
  41028e:	fa1f f78e 	uxth.w	r7, lr
  410292:	1bc7      	subs	r7, r0, r7
  410294:	b2b0      	uxth	r0, r6
  410296:	fa17 f781 	uxtah	r7, r7, r1
  41029a:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
  41029e:	eb00 4027 	add.w	r0, r0, r7, asr #16
  4102a2:	b2bf      	uxth	r7, r7
  4102a4:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
  4102a8:	4591      	cmp	r9, r2
  4102aa:	f843 7b04 	str.w	r7, [r3], #4
  4102ae:	ea4f 4020 	mov.w	r0, r0, asr #16
  4102b2:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  4102b6:	d2df      	bcs.n	410278 <quorem+0x48>
  4102b8:	9a00      	ldr	r2, [sp, #0]
  4102ba:	f85a 3002 	ldr.w	r3, [sl, r2]
  4102be:	4661      	mov	r1, ip
  4102c0:	b993      	cbnz	r3, 4102e8 <quorem+0xb8>
  4102c2:	9a01      	ldr	r2, [sp, #4]
  4102c4:	1f13      	subs	r3, r2, #4
  4102c6:	459a      	cmp	sl, r3
  4102c8:	d20c      	bcs.n	4102e4 <quorem+0xb4>
  4102ca:	f852 3c04 	ldr.w	r3, [r2, #-4]
  4102ce:	b94b      	cbnz	r3, 4102e4 <quorem+0xb4>
  4102d0:	f1a2 0308 	sub.w	r3, r2, #8
  4102d4:	e002      	b.n	4102dc <quorem+0xac>
  4102d6:	681a      	ldr	r2, [r3, #0]
  4102d8:	3b04      	subs	r3, #4
  4102da:	b91a      	cbnz	r2, 4102e4 <quorem+0xb4>
  4102dc:	459a      	cmp	sl, r3
  4102de:	f105 35ff 	add.w	r5, r5, #4294967295
  4102e2:	d3f8      	bcc.n	4102d6 <quorem+0xa6>
  4102e4:	f8cb 5010 	str.w	r5, [fp, #16]
  4102e8:	4658      	mov	r0, fp
  4102ea:	f002 fa7b 	bl	4127e4 <__mcmp>
  4102ee:	2800      	cmp	r0, #0
  4102f0:	db2e      	blt.n	410350 <quorem+0x120>
  4102f2:	f108 0801 	add.w	r8, r8, #1
  4102f6:	4653      	mov	r3, sl
  4102f8:	2200      	movs	r2, #0
  4102fa:	f854 6b04 	ldr.w	r6, [r4], #4
  4102fe:	6818      	ldr	r0, [r3, #0]
  410300:	b2b1      	uxth	r1, r6
  410302:	1a52      	subs	r2, r2, r1
  410304:	0c36      	lsrs	r6, r6, #16
  410306:	fa12 f180 	uxtah	r1, r2, r0
  41030a:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
  41030e:	eb02 4221 	add.w	r2, r2, r1, asr #16
  410312:	b289      	uxth	r1, r1
  410314:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  410318:	45a1      	cmp	r9, r4
  41031a:	f843 1b04 	str.w	r1, [r3], #4
  41031e:	ea4f 4222 	mov.w	r2, r2, asr #16
  410322:	d2ea      	bcs.n	4102fa <quorem+0xca>
  410324:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
  410328:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
  41032c:	b982      	cbnz	r2, 410350 <quorem+0x120>
  41032e:	1f1a      	subs	r2, r3, #4
  410330:	4592      	cmp	sl, r2
  410332:	d20b      	bcs.n	41034c <quorem+0x11c>
  410334:	f853 2c04 	ldr.w	r2, [r3, #-4]
  410338:	b942      	cbnz	r2, 41034c <quorem+0x11c>
  41033a:	3b08      	subs	r3, #8
  41033c:	e002      	b.n	410344 <quorem+0x114>
  41033e:	681a      	ldr	r2, [r3, #0]
  410340:	3b04      	subs	r3, #4
  410342:	b91a      	cbnz	r2, 41034c <quorem+0x11c>
  410344:	459a      	cmp	sl, r3
  410346:	f105 35ff 	add.w	r5, r5, #4294967295
  41034a:	d3f8      	bcc.n	41033e <quorem+0x10e>
  41034c:	f8cb 5010 	str.w	r5, [fp, #16]
  410350:	4640      	mov	r0, r8
  410352:	b003      	add	sp, #12
  410354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410358:	2000      	movs	r0, #0
  41035a:	b003      	add	sp, #12
  41035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00410360 <_dtoa_r>:
  410360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410364:	6c01      	ldr	r1, [r0, #64]	; 0x40
  410366:	b09b      	sub	sp, #108	; 0x6c
  410368:	4604      	mov	r4, r0
  41036a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
  41036c:	4692      	mov	sl, r2
  41036e:	469b      	mov	fp, r3
  410370:	b149      	cbz	r1, 410386 <_dtoa_r+0x26>
  410372:	6c43      	ldr	r3, [r0, #68]	; 0x44
  410374:	604b      	str	r3, [r1, #4]
  410376:	2201      	movs	r2, #1
  410378:	fa02 f303 	lsl.w	r3, r2, r3
  41037c:	608b      	str	r3, [r1, #8]
  41037e:	f001 ffed 	bl	41235c <_Bfree>
  410382:	2300      	movs	r3, #0
  410384:	6423      	str	r3, [r4, #64]	; 0x40
  410386:	f1bb 0f00 	cmp.w	fp, #0
  41038a:	46d9      	mov	r9, fp
  41038c:	db33      	blt.n	4103f6 <_dtoa_r+0x96>
  41038e:	2300      	movs	r3, #0
  410390:	602b      	str	r3, [r5, #0]
  410392:	4ba5      	ldr	r3, [pc, #660]	; (410628 <_dtoa_r+0x2c8>)
  410394:	461a      	mov	r2, r3
  410396:	ea09 0303 	and.w	r3, r9, r3
  41039a:	4293      	cmp	r3, r2
  41039c:	d014      	beq.n	4103c8 <_dtoa_r+0x68>
  41039e:	4650      	mov	r0, sl
  4103a0:	4659      	mov	r1, fp
  4103a2:	2200      	movs	r2, #0
  4103a4:	2300      	movs	r3, #0
  4103a6:	f005 fb87 	bl	415ab8 <__aeabi_dcmpeq>
  4103aa:	4680      	mov	r8, r0
  4103ac:	b348      	cbz	r0, 410402 <_dtoa_r+0xa2>
  4103ae:	9e26      	ldr	r6, [sp, #152]	; 0x98
  4103b0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  4103b2:	2301      	movs	r3, #1
  4103b4:	6033      	str	r3, [r6, #0]
  4103b6:	2d00      	cmp	r5, #0
  4103b8:	f000 80c9 	beq.w	41054e <_dtoa_r+0x1ee>
  4103bc:	489b      	ldr	r0, [pc, #620]	; (41062c <_dtoa_r+0x2cc>)
  4103be:	6028      	str	r0, [r5, #0]
  4103c0:	3801      	subs	r0, #1
  4103c2:	b01b      	add	sp, #108	; 0x6c
  4103c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4103c8:	9d26      	ldr	r5, [sp, #152]	; 0x98
  4103ca:	f242 730f 	movw	r3, #9999	; 0x270f
  4103ce:	602b      	str	r3, [r5, #0]
  4103d0:	f1ba 0f00 	cmp.w	sl, #0
  4103d4:	f000 80a4 	beq.w	410520 <_dtoa_r+0x1c0>
  4103d8:	4895      	ldr	r0, [pc, #596]	; (410630 <_dtoa_r+0x2d0>)
  4103da:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  4103dc:	2e00      	cmp	r6, #0
  4103de:	d0f0      	beq.n	4103c2 <_dtoa_r+0x62>
  4103e0:	78c3      	ldrb	r3, [r0, #3]
  4103e2:	2b00      	cmp	r3, #0
  4103e4:	f000 80b5 	beq.w	410552 <_dtoa_r+0x1f2>
  4103e8:	f100 0308 	add.w	r3, r0, #8
  4103ec:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  4103ee:	602b      	str	r3, [r5, #0]
  4103f0:	b01b      	add	sp, #108	; 0x6c
  4103f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4103f6:	2301      	movs	r3, #1
  4103f8:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  4103fc:	602b      	str	r3, [r5, #0]
  4103fe:	46cb      	mov	fp, r9
  410400:	e7c7      	b.n	410392 <_dtoa_r+0x32>
  410402:	aa19      	add	r2, sp, #100	; 0x64
  410404:	ab18      	add	r3, sp, #96	; 0x60
  410406:	e88d 000c 	stmia.w	sp, {r2, r3}
  41040a:	4620      	mov	r0, r4
  41040c:	4652      	mov	r2, sl
  41040e:	465b      	mov	r3, fp
  410410:	f002 faf0 	bl	4129f4 <__d2b>
  410414:	ea5f 5519 	movs.w	r5, r9, lsr #20
  410418:	900a      	str	r0, [sp, #40]	; 0x28
  41041a:	f040 808a 	bne.w	410532 <_dtoa_r+0x1d2>
  41041e:	9f18      	ldr	r7, [sp, #96]	; 0x60
  410420:	9d19      	ldr	r5, [sp, #100]	; 0x64
  410422:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  410426:	443d      	add	r5, r7
  410428:	429d      	cmp	r5, r3
  41042a:	f2c0 8294 	blt.w	410956 <_dtoa_r+0x5f6>
  41042e:	331f      	adds	r3, #31
  410430:	f205 4212 	addw	r2, r5, #1042	; 0x412
  410434:	1b5b      	subs	r3, r3, r5
  410436:	fa09 f303 	lsl.w	r3, r9, r3
  41043a:	fa2a f202 	lsr.w	r2, sl, r2
  41043e:	ea43 0002 	orr.w	r0, r3, r2
  410442:	f005 f85b 	bl	4154fc <__aeabi_ui2d>
  410446:	2601      	movs	r6, #1
  410448:	3d01      	subs	r5, #1
  41044a:	46b8      	mov	r8, r7
  41044c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  410450:	9616      	str	r6, [sp, #88]	; 0x58
  410452:	2200      	movs	r2, #0
  410454:	4b77      	ldr	r3, [pc, #476]	; (410634 <_dtoa_r+0x2d4>)
  410456:	f004 ff13 	bl	415280 <__aeabi_dsub>
  41045a:	a36d      	add	r3, pc, #436	; (adr r3, 410610 <_dtoa_r+0x2b0>)
  41045c:	e9d3 2300 	ldrd	r2, r3, [r3]
  410460:	f005 f8c2 	bl	4155e8 <__aeabi_dmul>
  410464:	a36c      	add	r3, pc, #432	; (adr r3, 410618 <_dtoa_r+0x2b8>)
  410466:	e9d3 2300 	ldrd	r2, r3, [r3]
  41046a:	f004 ff0b 	bl	415284 <__adddf3>
  41046e:	4606      	mov	r6, r0
  410470:	4628      	mov	r0, r5
  410472:	460f      	mov	r7, r1
  410474:	f005 f852 	bl	41551c <__aeabi_i2d>
  410478:	a369      	add	r3, pc, #420	; (adr r3, 410620 <_dtoa_r+0x2c0>)
  41047a:	e9d3 2300 	ldrd	r2, r3, [r3]
  41047e:	f005 f8b3 	bl	4155e8 <__aeabi_dmul>
  410482:	4602      	mov	r2, r0
  410484:	460b      	mov	r3, r1
  410486:	4630      	mov	r0, r6
  410488:	4639      	mov	r1, r7
  41048a:	f004 fefb 	bl	415284 <__adddf3>
  41048e:	4606      	mov	r6, r0
  410490:	460f      	mov	r7, r1
  410492:	f005 fb43 	bl	415b1c <__aeabi_d2iz>
  410496:	4639      	mov	r1, r7
  410498:	9007      	str	r0, [sp, #28]
  41049a:	2200      	movs	r2, #0
  41049c:	4630      	mov	r0, r6
  41049e:	2300      	movs	r3, #0
  4104a0:	f005 fb14 	bl	415acc <__aeabi_dcmplt>
  4104a4:	2800      	cmp	r0, #0
  4104a6:	f040 8228 	bne.w	4108fa <_dtoa_r+0x59a>
  4104aa:	9e07      	ldr	r6, [sp, #28]
  4104ac:	2e16      	cmp	r6, #22
  4104ae:	f200 8221 	bhi.w	4108f4 <_dtoa_r+0x594>
  4104b2:	4b61      	ldr	r3, [pc, #388]	; (410638 <_dtoa_r+0x2d8>)
  4104b4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4104b8:	e9d3 0100 	ldrd	r0, r1, [r3]
  4104bc:	4652      	mov	r2, sl
  4104be:	465b      	mov	r3, fp
  4104c0:	f005 fb22 	bl	415b08 <__aeabi_dcmpgt>
  4104c4:	2800      	cmp	r0, #0
  4104c6:	f000 824b 	beq.w	410960 <_dtoa_r+0x600>
  4104ca:	3e01      	subs	r6, #1
  4104cc:	9607      	str	r6, [sp, #28]
  4104ce:	2600      	movs	r6, #0
  4104d0:	960e      	str	r6, [sp, #56]	; 0x38
  4104d2:	ebc5 0508 	rsb	r5, r5, r8
  4104d6:	3d01      	subs	r5, #1
  4104d8:	9506      	str	r5, [sp, #24]
  4104da:	f100 8225 	bmi.w	410928 <_dtoa_r+0x5c8>
  4104de:	2500      	movs	r5, #0
  4104e0:	9508      	str	r5, [sp, #32]
  4104e2:	9e07      	ldr	r6, [sp, #28]
  4104e4:	2e00      	cmp	r6, #0
  4104e6:	f2c0 8216 	blt.w	410916 <_dtoa_r+0x5b6>
  4104ea:	9d06      	ldr	r5, [sp, #24]
  4104ec:	960d      	str	r6, [sp, #52]	; 0x34
  4104ee:	4435      	add	r5, r6
  4104f0:	2600      	movs	r6, #0
  4104f2:	9506      	str	r5, [sp, #24]
  4104f4:	960c      	str	r6, [sp, #48]	; 0x30
  4104f6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4104f8:	2d09      	cmp	r5, #9
  4104fa:	d82c      	bhi.n	410556 <_dtoa_r+0x1f6>
  4104fc:	2d05      	cmp	r5, #5
  4104fe:	bfc4      	itt	gt
  410500:	3d04      	subgt	r5, #4
  410502:	9524      	strgt	r5, [sp, #144]	; 0x90
  410504:	9e24      	ldr	r6, [sp, #144]	; 0x90
  410506:	f1a6 0302 	sub.w	r3, r6, #2
  41050a:	bfcc      	ite	gt
  41050c:	2500      	movgt	r5, #0
  41050e:	2501      	movle	r5, #1
  410510:	2b03      	cmp	r3, #3
  410512:	d822      	bhi.n	41055a <_dtoa_r+0x1fa>
  410514:	e8df f013 	tbh	[pc, r3, lsl #1]
  410518:	029e03b7 	.word	0x029e03b7
  41051c:	049a03c0 	.word	0x049a03c0
  410520:	4a46      	ldr	r2, [pc, #280]	; (41063c <_dtoa_r+0x2dc>)
  410522:	4b43      	ldr	r3, [pc, #268]	; (410630 <_dtoa_r+0x2d0>)
  410524:	f3c9 0013 	ubfx	r0, r9, #0, #20
  410528:	2800      	cmp	r0, #0
  41052a:	bf0c      	ite	eq
  41052c:	4610      	moveq	r0, r2
  41052e:	4618      	movne	r0, r3
  410530:	e753      	b.n	4103da <_dtoa_r+0x7a>
  410532:	f3cb 0313 	ubfx	r3, fp, #0, #20
  410536:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  41053a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  41053e:	4650      	mov	r0, sl
  410540:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  410544:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  410548:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  41054c:	e781      	b.n	410452 <_dtoa_r+0xf2>
  41054e:	483c      	ldr	r0, [pc, #240]	; (410640 <_dtoa_r+0x2e0>)
  410550:	e737      	b.n	4103c2 <_dtoa_r+0x62>
  410552:	1cc3      	adds	r3, r0, #3
  410554:	e74a      	b.n	4103ec <_dtoa_r+0x8c>
  410556:	2500      	movs	r5, #0
  410558:	9524      	str	r5, [sp, #144]	; 0x90
  41055a:	2500      	movs	r5, #0
  41055c:	6465      	str	r5, [r4, #68]	; 0x44
  41055e:	4629      	mov	r1, r5
  410560:	4620      	mov	r0, r4
  410562:	f001 fed5 	bl	412310 <_Balloc>
  410566:	f04f 39ff 	mov.w	r9, #4294967295
  41056a:	2601      	movs	r6, #1
  41056c:	9009      	str	r0, [sp, #36]	; 0x24
  41056e:	9525      	str	r5, [sp, #148]	; 0x94
  410570:	6420      	str	r0, [r4, #64]	; 0x40
  410572:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  410576:	960b      	str	r6, [sp, #44]	; 0x2c
  410578:	9b19      	ldr	r3, [sp, #100]	; 0x64
  41057a:	2b00      	cmp	r3, #0
  41057c:	f2c0 80d2 	blt.w	410724 <_dtoa_r+0x3c4>
  410580:	9e07      	ldr	r6, [sp, #28]
  410582:	2e0e      	cmp	r6, #14
  410584:	f300 80ce 	bgt.w	410724 <_dtoa_r+0x3c4>
  410588:	4b2b      	ldr	r3, [pc, #172]	; (410638 <_dtoa_r+0x2d8>)
  41058a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  41058e:	e9d3 0100 	ldrd	r0, r1, [r3]
  410592:	e9cd 0104 	strd	r0, r1, [sp, #16]
  410596:	9925      	ldr	r1, [sp, #148]	; 0x94
  410598:	2900      	cmp	r1, #0
  41059a:	f2c0 8380 	blt.w	410c9e <_dtoa_r+0x93e>
  41059e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4105a2:	4659      	mov	r1, fp
  4105a4:	4650      	mov	r0, sl
  4105a6:	f005 f949 	bl	41583c <__aeabi_ddiv>
  4105aa:	f005 fab7 	bl	415b1c <__aeabi_d2iz>
  4105ae:	4605      	mov	r5, r0
  4105b0:	f004 ffb4 	bl	41551c <__aeabi_i2d>
  4105b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4105b8:	f005 f816 	bl	4155e8 <__aeabi_dmul>
  4105bc:	4602      	mov	r2, r0
  4105be:	460b      	mov	r3, r1
  4105c0:	4650      	mov	r0, sl
  4105c2:	4659      	mov	r1, fp
  4105c4:	f004 fe5c 	bl	415280 <__aeabi_dsub>
  4105c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4105ca:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4105ce:	f1b9 0f01 	cmp.w	r9, #1
  4105d2:	4606      	mov	r6, r0
  4105d4:	460f      	mov	r7, r1
  4105d6:	7013      	strb	r3, [r2, #0]
  4105d8:	f102 0b01 	add.w	fp, r2, #1
  4105dc:	d064      	beq.n	4106a8 <_dtoa_r+0x348>
  4105de:	2200      	movs	r2, #0
  4105e0:	4b18      	ldr	r3, [pc, #96]	; (410644 <_dtoa_r+0x2e4>)
  4105e2:	f005 f801 	bl	4155e8 <__aeabi_dmul>
  4105e6:	2200      	movs	r2, #0
  4105e8:	2300      	movs	r3, #0
  4105ea:	4606      	mov	r6, r0
  4105ec:	460f      	mov	r7, r1
  4105ee:	f005 fa63 	bl	415ab8 <__aeabi_dcmpeq>
  4105f2:	2800      	cmp	r0, #0
  4105f4:	f040 8081 	bne.w	4106fa <_dtoa_r+0x39a>
  4105f8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  4105fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4105fe:	9403      	str	r4, [sp, #12]
  410600:	44c8      	add	r8, r9
  410602:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  410606:	f105 0902 	add.w	r9, r5, #2
  41060a:	e028      	b.n	41065e <_dtoa_r+0x2fe>
  41060c:	f3af 8000 	nop.w
  410610:	636f4361 	.word	0x636f4361
  410614:	3fd287a7 	.word	0x3fd287a7
  410618:	8b60c8b3 	.word	0x8b60c8b3
  41061c:	3fc68a28 	.word	0x3fc68a28
  410620:	509f79fb 	.word	0x509f79fb
  410624:	3fd34413 	.word	0x3fd34413
  410628:	7ff00000 	.word	0x7ff00000
  41062c:	004161c5 	.word	0x004161c5
  410630:	00416334 	.word	0x00416334
  410634:	3ff80000 	.word	0x3ff80000
  410638:	00416348 	.word	0x00416348
  41063c:	00416328 	.word	0x00416328
  410640:	004161c4 	.word	0x004161c4
  410644:	40240000 	.word	0x40240000
  410648:	f004 ffce 	bl	4155e8 <__aeabi_dmul>
  41064c:	2200      	movs	r2, #0
  41064e:	2300      	movs	r3, #0
  410650:	4606      	mov	r6, r0
  410652:	460f      	mov	r7, r1
  410654:	f005 fa30 	bl	415ab8 <__aeabi_dcmpeq>
  410658:	2800      	cmp	r0, #0
  41065a:	f040 83c1 	bne.w	410de0 <_dtoa_r+0xa80>
  41065e:	4652      	mov	r2, sl
  410660:	465b      	mov	r3, fp
  410662:	4630      	mov	r0, r6
  410664:	4639      	mov	r1, r7
  410666:	f005 f8e9 	bl	41583c <__aeabi_ddiv>
  41066a:	f005 fa57 	bl	415b1c <__aeabi_d2iz>
  41066e:	4605      	mov	r5, r0
  410670:	f004 ff54 	bl	41551c <__aeabi_i2d>
  410674:	4652      	mov	r2, sl
  410676:	465b      	mov	r3, fp
  410678:	f004 ffb6 	bl	4155e8 <__aeabi_dmul>
  41067c:	4602      	mov	r2, r0
  41067e:	460b      	mov	r3, r1
  410680:	4630      	mov	r0, r6
  410682:	4639      	mov	r1, r7
  410684:	f004 fdfc 	bl	415280 <__aeabi_dsub>
  410688:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  41068c:	45c1      	cmp	r9, r8
  41068e:	f809 ec01 	strb.w	lr, [r9, #-1]
  410692:	464c      	mov	r4, r9
  410694:	4606      	mov	r6, r0
  410696:	460f      	mov	r7, r1
  410698:	f04f 0200 	mov.w	r2, #0
  41069c:	4ba7      	ldr	r3, [pc, #668]	; (41093c <_dtoa_r+0x5dc>)
  41069e:	f109 0901 	add.w	r9, r9, #1
  4106a2:	d1d1      	bne.n	410648 <_dtoa_r+0x2e8>
  4106a4:	46a3      	mov	fp, r4
  4106a6:	9c03      	ldr	r4, [sp, #12]
  4106a8:	4632      	mov	r2, r6
  4106aa:	463b      	mov	r3, r7
  4106ac:	4630      	mov	r0, r6
  4106ae:	4639      	mov	r1, r7
  4106b0:	f004 fde8 	bl	415284 <__adddf3>
  4106b4:	4606      	mov	r6, r0
  4106b6:	460f      	mov	r7, r1
  4106b8:	4632      	mov	r2, r6
  4106ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4106be:	463b      	mov	r3, r7
  4106c0:	f005 fa04 	bl	415acc <__aeabi_dcmplt>
  4106c4:	b940      	cbnz	r0, 4106d8 <_dtoa_r+0x378>
  4106c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4106ca:	4632      	mov	r2, r6
  4106cc:	463b      	mov	r3, r7
  4106ce:	f005 f9f3 	bl	415ab8 <__aeabi_dcmpeq>
  4106d2:	b190      	cbz	r0, 4106fa <_dtoa_r+0x39a>
  4106d4:	07eb      	lsls	r3, r5, #31
  4106d6:	d510      	bpl.n	4106fa <_dtoa_r+0x39a>
  4106d8:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  4106dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4106de:	e005      	b.n	4106ec <_dtoa_r+0x38c>
  4106e0:	429a      	cmp	r2, r3
  4106e2:	f000 8428 	beq.w	410f36 <_dtoa_r+0xbd6>
  4106e6:	f813 5c01 	ldrb.w	r5, [r3, #-1]
  4106ea:	469b      	mov	fp, r3
  4106ec:	2d39      	cmp	r5, #57	; 0x39
  4106ee:	f10b 33ff 	add.w	r3, fp, #4294967295
  4106f2:	d0f5      	beq.n	4106e0 <_dtoa_r+0x380>
  4106f4:	1c6a      	adds	r2, r5, #1
  4106f6:	b2d2      	uxtb	r2, r2
  4106f8:	701a      	strb	r2, [r3, #0]
  4106fa:	4620      	mov	r0, r4
  4106fc:	990a      	ldr	r1, [sp, #40]	; 0x28
  4106fe:	f001 fe2d 	bl	41235c <_Bfree>
  410702:	9e07      	ldr	r6, [sp, #28]
  410704:	9d26      	ldr	r5, [sp, #152]	; 0x98
  410706:	1c73      	adds	r3, r6, #1
  410708:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  41070a:	2200      	movs	r2, #0
  41070c:	f88b 2000 	strb.w	r2, [fp]
  410710:	602b      	str	r3, [r5, #0]
  410712:	2e00      	cmp	r6, #0
  410714:	f000 8325 	beq.w	410d62 <_dtoa_r+0xa02>
  410718:	9809      	ldr	r0, [sp, #36]	; 0x24
  41071a:	f8c6 b000 	str.w	fp, [r6]
  41071e:	b01b      	add	sp, #108	; 0x6c
  410720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410724:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410726:	2d00      	cmp	r5, #0
  410728:	f000 8103 	beq.w	410932 <_dtoa_r+0x5d2>
  41072c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  41072e:	2e01      	cmp	r6, #1
  410730:	f340 82dc 	ble.w	410cec <_dtoa_r+0x98c>
  410734:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  410736:	f109 37ff 	add.w	r7, r9, #4294967295
  41073a:	42be      	cmp	r6, r7
  41073c:	f2c0 8389 	blt.w	410e52 <_dtoa_r+0xaf2>
  410740:	1bf7      	subs	r7, r6, r7
  410742:	f1b9 0f00 	cmp.w	r9, #0
  410746:	f2c0 8486 	blt.w	411056 <_dtoa_r+0xcf6>
  41074a:	9d08      	ldr	r5, [sp, #32]
  41074c:	464b      	mov	r3, r9
  41074e:	9e08      	ldr	r6, [sp, #32]
  410750:	441e      	add	r6, r3
  410752:	9608      	str	r6, [sp, #32]
  410754:	9e06      	ldr	r6, [sp, #24]
  410756:	4620      	mov	r0, r4
  410758:	441e      	add	r6, r3
  41075a:	2101      	movs	r1, #1
  41075c:	9606      	str	r6, [sp, #24]
  41075e:	f001 feed 	bl	41253c <__i2b>
  410762:	4606      	mov	r6, r0
  410764:	b165      	cbz	r5, 410780 <_dtoa_r+0x420>
  410766:	9806      	ldr	r0, [sp, #24]
  410768:	2800      	cmp	r0, #0
  41076a:	dd09      	ble.n	410780 <_dtoa_r+0x420>
  41076c:	4603      	mov	r3, r0
  41076e:	9908      	ldr	r1, [sp, #32]
  410770:	42ab      	cmp	r3, r5
  410772:	bfa8      	it	ge
  410774:	462b      	movge	r3, r5
  410776:	1ac9      	subs	r1, r1, r3
  410778:	1ac0      	subs	r0, r0, r3
  41077a:	9108      	str	r1, [sp, #32]
  41077c:	1aed      	subs	r5, r5, r3
  41077e:	9006      	str	r0, [sp, #24]
  410780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410782:	2a00      	cmp	r2, #0
  410784:	dd1d      	ble.n	4107c2 <_dtoa_r+0x462>
  410786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  410788:	2b00      	cmp	r3, #0
  41078a:	f000 8358 	beq.w	410e3e <_dtoa_r+0xade>
  41078e:	2f00      	cmp	r7, #0
  410790:	dd11      	ble.n	4107b6 <_dtoa_r+0x456>
  410792:	4631      	mov	r1, r6
  410794:	463a      	mov	r2, r7
  410796:	4620      	mov	r0, r4
  410798:	f001 ff78 	bl	41268c <__pow5mult>
  41079c:	4606      	mov	r6, r0
  41079e:	4631      	mov	r1, r6
  4107a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4107a2:	4620      	mov	r0, r4
  4107a4:	f001 fed4 	bl	412550 <__multiply>
  4107a8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4107aa:	4680      	mov	r8, r0
  4107ac:	4620      	mov	r0, r4
  4107ae:	f001 fdd5 	bl	41235c <_Bfree>
  4107b2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  4107b6:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  4107ba:	ebbe 0207 	subs.w	r2, lr, r7
  4107be:	f040 828f 	bne.w	410ce0 <_dtoa_r+0x980>
  4107c2:	4620      	mov	r0, r4
  4107c4:	2101      	movs	r1, #1
  4107c6:	f001 feb9 	bl	41253c <__i2b>
  4107ca:	4680      	mov	r8, r0
  4107cc:	980d      	ldr	r0, [sp, #52]	; 0x34
  4107ce:	2800      	cmp	r0, #0
  4107d0:	dd05      	ble.n	4107de <_dtoa_r+0x47e>
  4107d2:	4641      	mov	r1, r8
  4107d4:	4620      	mov	r0, r4
  4107d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4107d8:	f001 ff58 	bl	41268c <__pow5mult>
  4107dc:	4680      	mov	r8, r0
  4107de:	9924      	ldr	r1, [sp, #144]	; 0x90
  4107e0:	2901      	cmp	r1, #1
  4107e2:	f340 82c1 	ble.w	410d68 <_dtoa_r+0xa08>
  4107e6:	2700      	movs	r7, #0
  4107e8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4107ea:	2800      	cmp	r0, #0
  4107ec:	f040 82af 	bne.w	410d4e <_dtoa_r+0x9ee>
  4107f0:	2001      	movs	r0, #1
  4107f2:	9b06      	ldr	r3, [sp, #24]
  4107f4:	4403      	add	r3, r0
  4107f6:	f013 031f 	ands.w	r3, r3, #31
  4107fa:	f000 80a1 	beq.w	410940 <_dtoa_r+0x5e0>
  4107fe:	f1c3 0220 	rsb	r2, r3, #32
  410802:	2a04      	cmp	r2, #4
  410804:	f340 84b5 	ble.w	411172 <_dtoa_r+0xe12>
  410808:	9908      	ldr	r1, [sp, #32]
  41080a:	9a06      	ldr	r2, [sp, #24]
  41080c:	f1c3 031c 	rsb	r3, r3, #28
  410810:	4419      	add	r1, r3
  410812:	441a      	add	r2, r3
  410814:	9108      	str	r1, [sp, #32]
  410816:	441d      	add	r5, r3
  410818:	9206      	str	r2, [sp, #24]
  41081a:	9908      	ldr	r1, [sp, #32]
  41081c:	2900      	cmp	r1, #0
  41081e:	dd05      	ble.n	41082c <_dtoa_r+0x4cc>
  410820:	990a      	ldr	r1, [sp, #40]	; 0x28
  410822:	9a08      	ldr	r2, [sp, #32]
  410824:	4620      	mov	r0, r4
  410826:	f001 ff7f 	bl	412728 <__lshift>
  41082a:	900a      	str	r0, [sp, #40]	; 0x28
  41082c:	9a06      	ldr	r2, [sp, #24]
  41082e:	2a00      	cmp	r2, #0
  410830:	dd04      	ble.n	41083c <_dtoa_r+0x4dc>
  410832:	4641      	mov	r1, r8
  410834:	4620      	mov	r0, r4
  410836:	f001 ff77 	bl	412728 <__lshift>
  41083a:	4680      	mov	r8, r0
  41083c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41083e:	2b00      	cmp	r3, #0
  410840:	f040 826a 	bne.w	410d18 <_dtoa_r+0x9b8>
  410844:	f1b9 0f00 	cmp.w	r9, #0
  410848:	f340 82a6 	ble.w	410d98 <_dtoa_r+0xa38>
  41084c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  41084e:	2800      	cmp	r0, #0
  410850:	f040 8088 	bne.w	410964 <_dtoa_r+0x604>
  410854:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410856:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  410858:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  41085c:	e006      	b.n	41086c <_dtoa_r+0x50c>
  41085e:	4639      	mov	r1, r7
  410860:	4620      	mov	r0, r4
  410862:	220a      	movs	r2, #10
  410864:	2300      	movs	r3, #0
  410866:	f001 fd83 	bl	412370 <__multadd>
  41086a:	4607      	mov	r7, r0
  41086c:	4638      	mov	r0, r7
  41086e:	4641      	mov	r1, r8
  410870:	f7ff fcde 	bl	410230 <quorem>
  410874:	3030      	adds	r0, #48	; 0x30
  410876:	f80b 0005 	strb.w	r0, [fp, r5]
  41087a:	3501      	adds	r5, #1
  41087c:	45a9      	cmp	r9, r5
  41087e:	dcee      	bgt.n	41085e <_dtoa_r+0x4fe>
  410880:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  410884:	970a      	str	r7, [sp, #40]	; 0x28
  410886:	4682      	mov	sl, r0
  410888:	f1b9 0f01 	cmp.w	r9, #1
  41088c:	bfac      	ite	ge
  41088e:	44cb      	addge	fp, r9
  410890:	f10b 0b01 	addlt.w	fp, fp, #1
  410894:	2500      	movs	r5, #0
  410896:	990a      	ldr	r1, [sp, #40]	; 0x28
  410898:	2201      	movs	r2, #1
  41089a:	4620      	mov	r0, r4
  41089c:	f001 ff44 	bl	412728 <__lshift>
  4108a0:	4641      	mov	r1, r8
  4108a2:	900a      	str	r0, [sp, #40]	; 0x28
  4108a4:	f001 ff9e 	bl	4127e4 <__mcmp>
  4108a8:	2800      	cmp	r0, #0
  4108aa:	f340 8309 	ble.w	410ec0 <_dtoa_r+0xb60>
  4108ae:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  4108b2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4108b4:	e005      	b.n	4108c2 <_dtoa_r+0x562>
  4108b6:	4299      	cmp	r1, r3
  4108b8:	f000 828b 	beq.w	410dd2 <_dtoa_r+0xa72>
  4108bc:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  4108c0:	469b      	mov	fp, r3
  4108c2:	2a39      	cmp	r2, #57	; 0x39
  4108c4:	f10b 33ff 	add.w	r3, fp, #4294967295
  4108c8:	d0f5      	beq.n	4108b6 <_dtoa_r+0x556>
  4108ca:	3201      	adds	r2, #1
  4108cc:	701a      	strb	r2, [r3, #0]
  4108ce:	4641      	mov	r1, r8
  4108d0:	4620      	mov	r0, r4
  4108d2:	f001 fd43 	bl	41235c <_Bfree>
  4108d6:	2e00      	cmp	r6, #0
  4108d8:	f43f af0f 	beq.w	4106fa <_dtoa_r+0x39a>
  4108dc:	b12d      	cbz	r5, 4108ea <_dtoa_r+0x58a>
  4108de:	42b5      	cmp	r5, r6
  4108e0:	d003      	beq.n	4108ea <_dtoa_r+0x58a>
  4108e2:	4629      	mov	r1, r5
  4108e4:	4620      	mov	r0, r4
  4108e6:	f001 fd39 	bl	41235c <_Bfree>
  4108ea:	4631      	mov	r1, r6
  4108ec:	4620      	mov	r0, r4
  4108ee:	f001 fd35 	bl	41235c <_Bfree>
  4108f2:	e702      	b.n	4106fa <_dtoa_r+0x39a>
  4108f4:	2601      	movs	r6, #1
  4108f6:	960e      	str	r6, [sp, #56]	; 0x38
  4108f8:	e5eb      	b.n	4104d2 <_dtoa_r+0x172>
  4108fa:	9807      	ldr	r0, [sp, #28]
  4108fc:	f004 fe0e 	bl	41551c <__aeabi_i2d>
  410900:	4632      	mov	r2, r6
  410902:	463b      	mov	r3, r7
  410904:	f005 f8d8 	bl	415ab8 <__aeabi_dcmpeq>
  410908:	2800      	cmp	r0, #0
  41090a:	f47f adce 	bne.w	4104aa <_dtoa_r+0x14a>
  41090e:	9e07      	ldr	r6, [sp, #28]
  410910:	3e01      	subs	r6, #1
  410912:	9607      	str	r6, [sp, #28]
  410914:	e5c9      	b.n	4104aa <_dtoa_r+0x14a>
  410916:	9e07      	ldr	r6, [sp, #28]
  410918:	9d08      	ldr	r5, [sp, #32]
  41091a:	1bad      	subs	r5, r5, r6
  41091c:	9508      	str	r5, [sp, #32]
  41091e:	4275      	negs	r5, r6
  410920:	2600      	movs	r6, #0
  410922:	950c      	str	r5, [sp, #48]	; 0x30
  410924:	960d      	str	r6, [sp, #52]	; 0x34
  410926:	e5e6      	b.n	4104f6 <_dtoa_r+0x196>
  410928:	426d      	negs	r5, r5
  41092a:	2600      	movs	r6, #0
  41092c:	9508      	str	r5, [sp, #32]
  41092e:	9606      	str	r6, [sp, #24]
  410930:	e5d7      	b.n	4104e2 <_dtoa_r+0x182>
  410932:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  410934:	9d08      	ldr	r5, [sp, #32]
  410936:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  410938:	e714      	b.n	410764 <_dtoa_r+0x404>
  41093a:	bf00      	nop
  41093c:	40240000 	.word	0x40240000
  410940:	231c      	movs	r3, #28
  410942:	f8dd e020 	ldr.w	lr, [sp, #32]
  410946:	9806      	ldr	r0, [sp, #24]
  410948:	449e      	add	lr, r3
  41094a:	4418      	add	r0, r3
  41094c:	f8cd e020 	str.w	lr, [sp, #32]
  410950:	441d      	add	r5, r3
  410952:	9006      	str	r0, [sp, #24]
  410954:	e761      	b.n	41081a <_dtoa_r+0x4ba>
  410956:	48a7      	ldr	r0, [pc, #668]	; (410bf4 <_dtoa_r+0x894>)
  410958:	1b40      	subs	r0, r0, r5
  41095a:	fa0a f000 	lsl.w	r0, sl, r0
  41095e:	e570      	b.n	410442 <_dtoa_r+0xe2>
  410960:	900e      	str	r0, [sp, #56]	; 0x38
  410962:	e5b6      	b.n	4104d2 <_dtoa_r+0x172>
  410964:	2d00      	cmp	r5, #0
  410966:	dd05      	ble.n	410974 <_dtoa_r+0x614>
  410968:	4631      	mov	r1, r6
  41096a:	462a      	mov	r2, r5
  41096c:	4620      	mov	r0, r4
  41096e:	f001 fedb 	bl	412728 <__lshift>
  410972:	4606      	mov	r6, r0
  410974:	2f00      	cmp	r7, #0
  410976:	f040 82e8 	bne.w	410f4a <_dtoa_r+0xbea>
  41097a:	4637      	mov	r7, r6
  41097c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  41097e:	9809      	ldr	r0, [sp, #36]	; 0x24
  410980:	444d      	add	r5, r9
  410982:	9508      	str	r5, [sp, #32]
  410984:	f00a 0501 	and.w	r5, sl, #1
  410988:	950b      	str	r5, [sp, #44]	; 0x2c
  41098a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  41098e:	1c45      	adds	r5, r0, #1
  410990:	e00a      	b.n	4109a8 <_dtoa_r+0x648>
  410992:	f001 fced 	bl	412370 <__multadd>
  410996:	4639      	mov	r1, r7
  410998:	4606      	mov	r6, r0
  41099a:	220a      	movs	r2, #10
  41099c:	4620      	mov	r0, r4
  41099e:	2300      	movs	r3, #0
  4109a0:	f001 fce6 	bl	412370 <__multadd>
  4109a4:	4607      	mov	r7, r0
  4109a6:	3501      	adds	r5, #1
  4109a8:	4641      	mov	r1, r8
  4109aa:	4648      	mov	r0, r9
  4109ac:	f7ff fc40 	bl	410230 <quorem>
  4109b0:	4631      	mov	r1, r6
  4109b2:	4683      	mov	fp, r0
  4109b4:	4648      	mov	r0, r9
  4109b6:	f001 ff15 	bl	4127e4 <__mcmp>
  4109ba:	4641      	mov	r1, r8
  4109bc:	9003      	str	r0, [sp, #12]
  4109be:	463a      	mov	r2, r7
  4109c0:	4620      	mov	r0, r4
  4109c2:	f001 ff33 	bl	41282c <__mdiff>
  4109c6:	68c2      	ldr	r2, [r0, #12]
  4109c8:	1e69      	subs	r1, r5, #1
  4109ca:	4603      	mov	r3, r0
  4109cc:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
  4109d0:	9106      	str	r1, [sp, #24]
  4109d2:	2a00      	cmp	r2, #0
  4109d4:	f040 8193 	bne.w	410cfe <_dtoa_r+0x99e>
  4109d8:	4619      	mov	r1, r3
  4109da:	4648      	mov	r0, r9
  4109dc:	9302      	str	r3, [sp, #8]
  4109de:	f001 ff01 	bl	4127e4 <__mcmp>
  4109e2:	9b02      	ldr	r3, [sp, #8]
  4109e4:	4602      	mov	r2, r0
  4109e6:	4619      	mov	r1, r3
  4109e8:	4620      	mov	r0, r4
  4109ea:	9202      	str	r2, [sp, #8]
  4109ec:	f001 fcb6 	bl	41235c <_Bfree>
  4109f0:	9a02      	ldr	r2, [sp, #8]
  4109f2:	b92a      	cbnz	r2, 410a00 <_dtoa_r+0x6a0>
  4109f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4109f6:	b91b      	cbnz	r3, 410a00 <_dtoa_r+0x6a0>
  4109f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4109fa:	2800      	cmp	r0, #0
  4109fc:	f000 8391 	beq.w	411122 <_dtoa_r+0xdc2>
  410a00:	9b03      	ldr	r3, [sp, #12]
  410a02:	2b00      	cmp	r3, #0
  410a04:	f2c0 8234 	blt.w	410e70 <_dtoa_r+0xb10>
  410a08:	d105      	bne.n	410a16 <_dtoa_r+0x6b6>
  410a0a:	9824      	ldr	r0, [sp, #144]	; 0x90
  410a0c:	b918      	cbnz	r0, 410a16 <_dtoa_r+0x6b6>
  410a0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410a10:	2900      	cmp	r1, #0
  410a12:	f000 822d 	beq.w	410e70 <_dtoa_r+0xb10>
  410a16:	2a00      	cmp	r2, #0
  410a18:	f300 82ab 	bgt.w	410f72 <_dtoa_r+0xc12>
  410a1c:	f8dd e020 	ldr.w	lr, [sp, #32]
  410a20:	f805 ac01 	strb.w	sl, [r5, #-1]
  410a24:	4575      	cmp	r5, lr
  410a26:	46ab      	mov	fp, r5
  410a28:	f000 82b3 	beq.w	410f92 <_dtoa_r+0xc32>
  410a2c:	4649      	mov	r1, r9
  410a2e:	220a      	movs	r2, #10
  410a30:	2300      	movs	r3, #0
  410a32:	4620      	mov	r0, r4
  410a34:	f001 fc9c 	bl	412370 <__multadd>
  410a38:	42be      	cmp	r6, r7
  410a3a:	4681      	mov	r9, r0
  410a3c:	4631      	mov	r1, r6
  410a3e:	4620      	mov	r0, r4
  410a40:	f04f 020a 	mov.w	r2, #10
  410a44:	f04f 0300 	mov.w	r3, #0
  410a48:	d1a3      	bne.n	410992 <_dtoa_r+0x632>
  410a4a:	f001 fc91 	bl	412370 <__multadd>
  410a4e:	4606      	mov	r6, r0
  410a50:	4607      	mov	r7, r0
  410a52:	e7a8      	b.n	4109a6 <_dtoa_r+0x646>
  410a54:	2600      	movs	r6, #0
  410a56:	960b      	str	r6, [sp, #44]	; 0x2c
  410a58:	9e07      	ldr	r6, [sp, #28]
  410a5a:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
  410a5e:	44b6      	add	lr, r6
  410a60:	f10e 0901 	add.w	r9, lr, #1
  410a64:	f1b9 0f00 	cmp.w	r9, #0
  410a68:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  410a6c:	464e      	mov	r6, r9
  410a6e:	f340 8150 	ble.w	410d12 <_dtoa_r+0x9b2>
  410a72:	2100      	movs	r1, #0
  410a74:	2e17      	cmp	r6, #23
  410a76:	6461      	str	r1, [r4, #68]	; 0x44
  410a78:	d90a      	bls.n	410a90 <_dtoa_r+0x730>
  410a7a:	2201      	movs	r2, #1
  410a7c:	2304      	movs	r3, #4
  410a7e:	005b      	lsls	r3, r3, #1
  410a80:	f103 0014 	add.w	r0, r3, #20
  410a84:	42b0      	cmp	r0, r6
  410a86:	4611      	mov	r1, r2
  410a88:	f102 0201 	add.w	r2, r2, #1
  410a8c:	d9f7      	bls.n	410a7e <_dtoa_r+0x71e>
  410a8e:	6461      	str	r1, [r4, #68]	; 0x44
  410a90:	4620      	mov	r0, r4
  410a92:	f001 fc3d 	bl	412310 <_Balloc>
  410a96:	2e0e      	cmp	r6, #14
  410a98:	9009      	str	r0, [sp, #36]	; 0x24
  410a9a:	6420      	str	r0, [r4, #64]	; 0x40
  410a9c:	f63f ad6c 	bhi.w	410578 <_dtoa_r+0x218>
  410aa0:	2d00      	cmp	r5, #0
  410aa2:	f43f ad69 	beq.w	410578 <_dtoa_r+0x218>
  410aa6:	9d07      	ldr	r5, [sp, #28]
  410aa8:	2d00      	cmp	r5, #0
  410aaa:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
  410aae:	f340 821b 	ble.w	410ee8 <_dtoa_r+0xb88>
  410ab2:	4b51      	ldr	r3, [pc, #324]	; (410bf8 <_dtoa_r+0x898>)
  410ab4:	f005 020f 	and.w	r2, r5, #15
  410ab8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  410abc:	112d      	asrs	r5, r5, #4
  410abe:	e9d3 6700 	ldrd	r6, r7, [r3]
  410ac2:	06eb      	lsls	r3, r5, #27
  410ac4:	f140 81cd 	bpl.w	410e62 <_dtoa_r+0xb02>
  410ac8:	4b4c      	ldr	r3, [pc, #304]	; (410bfc <_dtoa_r+0x89c>)
  410aca:	4650      	mov	r0, sl
  410acc:	4659      	mov	r1, fp
  410ace:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  410ad2:	f004 feb3 	bl	41583c <__aeabi_ddiv>
  410ad6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  410ada:	f005 050f 	and.w	r5, r5, #15
  410ade:	f04f 0803 	mov.w	r8, #3
  410ae2:	b18d      	cbz	r5, 410b08 <_dtoa_r+0x7a8>
  410ae4:	f8df a114 	ldr.w	sl, [pc, #276]	; 410bfc <_dtoa_r+0x89c>
  410ae8:	4630      	mov	r0, r6
  410aea:	4639      	mov	r1, r7
  410aec:	07ee      	lsls	r6, r5, #31
  410aee:	d505      	bpl.n	410afc <_dtoa_r+0x79c>
  410af0:	e9da 2300 	ldrd	r2, r3, [sl]
  410af4:	f108 0801 	add.w	r8, r8, #1
  410af8:	f004 fd76 	bl	4155e8 <__aeabi_dmul>
  410afc:	106d      	asrs	r5, r5, #1
  410afe:	f10a 0a08 	add.w	sl, sl, #8
  410b02:	d1f3      	bne.n	410aec <_dtoa_r+0x78c>
  410b04:	4606      	mov	r6, r0
  410b06:	460f      	mov	r7, r1
  410b08:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  410b0c:	4632      	mov	r2, r6
  410b0e:	463b      	mov	r3, r7
  410b10:	f004 fe94 	bl	41583c <__aeabi_ddiv>
  410b14:	4682      	mov	sl, r0
  410b16:	468b      	mov	fp, r1
  410b18:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  410b1a:	b145      	cbz	r5, 410b2e <_dtoa_r+0x7ce>
  410b1c:	4650      	mov	r0, sl
  410b1e:	4659      	mov	r1, fp
  410b20:	2200      	movs	r2, #0
  410b22:	4b37      	ldr	r3, [pc, #220]	; (410c00 <_dtoa_r+0x8a0>)
  410b24:	f004 ffd2 	bl	415acc <__aeabi_dcmplt>
  410b28:	2800      	cmp	r0, #0
  410b2a:	f040 82a9 	bne.w	411080 <_dtoa_r+0xd20>
  410b2e:	4640      	mov	r0, r8
  410b30:	f004 fcf4 	bl	41551c <__aeabi_i2d>
  410b34:	4652      	mov	r2, sl
  410b36:	465b      	mov	r3, fp
  410b38:	f004 fd56 	bl	4155e8 <__aeabi_dmul>
  410b3c:	2200      	movs	r2, #0
  410b3e:	4b31      	ldr	r3, [pc, #196]	; (410c04 <_dtoa_r+0x8a4>)
  410b40:	f004 fba0 	bl	415284 <__adddf3>
  410b44:	4606      	mov	r6, r0
  410b46:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  410b4a:	f1b9 0f00 	cmp.w	r9, #0
  410b4e:	f000 815a 	beq.w	410e06 <_dtoa_r+0xaa6>
  410b52:	9d07      	ldr	r5, [sp, #28]
  410b54:	9517      	str	r5, [sp, #92]	; 0x5c
  410b56:	46c8      	mov	r8, r9
  410b58:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410b5a:	2d00      	cmp	r5, #0
  410b5c:	f000 8222 	beq.w	410fa4 <_dtoa_r+0xc44>
  410b60:	4b25      	ldr	r3, [pc, #148]	; (410bf8 <_dtoa_r+0x898>)
  410b62:	4929      	ldr	r1, [pc, #164]	; (410c08 <_dtoa_r+0x8a8>)
  410b64:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  410b68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  410b6c:	2000      	movs	r0, #0
  410b6e:	f004 fe65 	bl	41583c <__aeabi_ddiv>
  410b72:	4632      	mov	r2, r6
  410b74:	463b      	mov	r3, r7
  410b76:	f004 fb83 	bl	415280 <__aeabi_dsub>
  410b7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  410b7e:	4659      	mov	r1, fp
  410b80:	4650      	mov	r0, sl
  410b82:	f004 ffcb 	bl	415b1c <__aeabi_d2iz>
  410b86:	4605      	mov	r5, r0
  410b88:	f004 fcc8 	bl	41551c <__aeabi_i2d>
  410b8c:	4602      	mov	r2, r0
  410b8e:	460b      	mov	r3, r1
  410b90:	4650      	mov	r0, sl
  410b92:	4659      	mov	r1, fp
  410b94:	f004 fb74 	bl	415280 <__aeabi_dsub>
  410b98:	3530      	adds	r5, #48	; 0x30
  410b9a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  410b9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  410ba0:	b2ed      	uxtb	r5, r5
  410ba2:	7035      	strb	r5, [r6, #0]
  410ba4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  410ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  410bac:	f106 0b01 	add.w	fp, r6, #1
  410bb0:	f004 ffaa 	bl	415b08 <__aeabi_dcmpgt>
  410bb4:	2800      	cmp	r0, #0
  410bb6:	f040 82a9 	bne.w	41110c <_dtoa_r+0xdac>
  410bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  410bbe:	2000      	movs	r0, #0
  410bc0:	490f      	ldr	r1, [pc, #60]	; (410c00 <_dtoa_r+0x8a0>)
  410bc2:	f004 fb5d 	bl	415280 <__aeabi_dsub>
  410bc6:	4602      	mov	r2, r0
  410bc8:	460b      	mov	r3, r1
  410bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  410bce:	f004 ff9b 	bl	415b08 <__aeabi_dcmpgt>
  410bd2:	2800      	cmp	r0, #0
  410bd4:	f040 82a0 	bne.w	411118 <_dtoa_r+0xdb8>
  410bd8:	f1b8 0f01 	cmp.w	r8, #1
  410bdc:	f340 8180 	ble.w	410ee0 <_dtoa_r+0xb80>
  410be0:	44b0      	add	r8, r6
  410be2:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  410be6:	46a2      	mov	sl, r4
  410be8:	46c1      	mov	r9, r8
  410bea:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  410bee:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  410bf2:	e019      	b.n	410c28 <_dtoa_r+0x8c8>
  410bf4:	fffffbee 	.word	0xfffffbee
  410bf8:	00416348 	.word	0x00416348
  410bfc:	00416410 	.word	0x00416410
  410c00:	3ff00000 	.word	0x3ff00000
  410c04:	401c0000 	.word	0x401c0000
  410c08:	3fe00000 	.word	0x3fe00000
  410c0c:	2000      	movs	r0, #0
  410c0e:	49a8      	ldr	r1, [pc, #672]	; (410eb0 <_dtoa_r+0xb50>)
  410c10:	f004 fb36 	bl	415280 <__aeabi_dsub>
  410c14:	4622      	mov	r2, r4
  410c16:	462b      	mov	r3, r5
  410c18:	f004 ff58 	bl	415acc <__aeabi_dcmplt>
  410c1c:	2800      	cmp	r0, #0
  410c1e:	f040 8279 	bne.w	411114 <_dtoa_r+0xdb4>
  410c22:	45cb      	cmp	fp, r9
  410c24:	f000 8159 	beq.w	410eda <_dtoa_r+0xb7a>
  410c28:	4620      	mov	r0, r4
  410c2a:	4629      	mov	r1, r5
  410c2c:	2200      	movs	r2, #0
  410c2e:	4ba1      	ldr	r3, [pc, #644]	; (410eb4 <_dtoa_r+0xb54>)
  410c30:	f004 fcda 	bl	4155e8 <__aeabi_dmul>
  410c34:	2200      	movs	r2, #0
  410c36:	4b9f      	ldr	r3, [pc, #636]	; (410eb4 <_dtoa_r+0xb54>)
  410c38:	4604      	mov	r4, r0
  410c3a:	460d      	mov	r5, r1
  410c3c:	4630      	mov	r0, r6
  410c3e:	4639      	mov	r1, r7
  410c40:	f004 fcd2 	bl	4155e8 <__aeabi_dmul>
  410c44:	460f      	mov	r7, r1
  410c46:	4606      	mov	r6, r0
  410c48:	f004 ff68 	bl	415b1c <__aeabi_d2iz>
  410c4c:	4680      	mov	r8, r0
  410c4e:	f004 fc65 	bl	41551c <__aeabi_i2d>
  410c52:	4602      	mov	r2, r0
  410c54:	460b      	mov	r3, r1
  410c56:	4630      	mov	r0, r6
  410c58:	4639      	mov	r1, r7
  410c5a:	f004 fb11 	bl	415280 <__aeabi_dsub>
  410c5e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  410c62:	fa5f f888 	uxtb.w	r8, r8
  410c66:	4622      	mov	r2, r4
  410c68:	462b      	mov	r3, r5
  410c6a:	f80b 8b01 	strb.w	r8, [fp], #1
  410c6e:	4606      	mov	r6, r0
  410c70:	460f      	mov	r7, r1
  410c72:	f004 ff2b 	bl	415acc <__aeabi_dcmplt>
  410c76:	4632      	mov	r2, r6
  410c78:	463b      	mov	r3, r7
  410c7a:	2800      	cmp	r0, #0
  410c7c:	d0c6      	beq.n	410c0c <_dtoa_r+0x8ac>
  410c7e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  410c80:	9607      	str	r6, [sp, #28]
  410c82:	4654      	mov	r4, sl
  410c84:	e539      	b.n	4106fa <_dtoa_r+0x39a>
  410c86:	2600      	movs	r6, #0
  410c88:	960b      	str	r6, [sp, #44]	; 0x2c
  410c8a:	9825      	ldr	r0, [sp, #148]	; 0x94
  410c8c:	2800      	cmp	r0, #0
  410c8e:	dd3c      	ble.n	410d0a <_dtoa_r+0x9aa>
  410c90:	4606      	mov	r6, r0
  410c92:	900f      	str	r0, [sp, #60]	; 0x3c
  410c94:	4681      	mov	r9, r0
  410c96:	e6ec      	b.n	410a72 <_dtoa_r+0x712>
  410c98:	2601      	movs	r6, #1
  410c9a:	960b      	str	r6, [sp, #44]	; 0x2c
  410c9c:	e7f5      	b.n	410c8a <_dtoa_r+0x92a>
  410c9e:	f1b9 0f00 	cmp.w	r9, #0
  410ca2:	f73f ac7c 	bgt.w	41059e <_dtoa_r+0x23e>
  410ca6:	f040 80c6 	bne.w	410e36 <_dtoa_r+0xad6>
  410caa:	2200      	movs	r2, #0
  410cac:	4b82      	ldr	r3, [pc, #520]	; (410eb8 <_dtoa_r+0xb58>)
  410cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  410cb2:	f004 fc99 	bl	4155e8 <__aeabi_dmul>
  410cb6:	4652      	mov	r2, sl
  410cb8:	465b      	mov	r3, fp
  410cba:	f004 ff1b 	bl	415af4 <__aeabi_dcmpge>
  410cbe:	46c8      	mov	r8, r9
  410cc0:	464e      	mov	r6, r9
  410cc2:	2800      	cmp	r0, #0
  410cc4:	d07c      	beq.n	410dc0 <_dtoa_r+0xa60>
  410cc6:	9d25      	ldr	r5, [sp, #148]	; 0x94
  410cc8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  410ccc:	43ed      	mvns	r5, r5
  410cce:	9507      	str	r5, [sp, #28]
  410cd0:	4641      	mov	r1, r8
  410cd2:	4620      	mov	r0, r4
  410cd4:	f001 fb42 	bl	41235c <_Bfree>
  410cd8:	2e00      	cmp	r6, #0
  410cda:	f47f ae06 	bne.w	4108ea <_dtoa_r+0x58a>
  410cde:	e50c      	b.n	4106fa <_dtoa_r+0x39a>
  410ce0:	990a      	ldr	r1, [sp, #40]	; 0x28
  410ce2:	4620      	mov	r0, r4
  410ce4:	f001 fcd2 	bl	41268c <__pow5mult>
  410ce8:	900a      	str	r0, [sp, #40]	; 0x28
  410cea:	e56a      	b.n	4107c2 <_dtoa_r+0x462>
  410cec:	9d16      	ldr	r5, [sp, #88]	; 0x58
  410cee:	2d00      	cmp	r5, #0
  410cf0:	f000 81b7 	beq.w	411062 <_dtoa_r+0xd02>
  410cf4:	f203 4333 	addw	r3, r3, #1075	; 0x433
  410cf8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  410cfa:	9d08      	ldr	r5, [sp, #32]
  410cfc:	e527      	b.n	41074e <_dtoa_r+0x3ee>
  410cfe:	4601      	mov	r1, r0
  410d00:	4620      	mov	r0, r4
  410d02:	f001 fb2b 	bl	41235c <_Bfree>
  410d06:	2201      	movs	r2, #1
  410d08:	e67a      	b.n	410a00 <_dtoa_r+0x6a0>
  410d0a:	2601      	movs	r6, #1
  410d0c:	9625      	str	r6, [sp, #148]	; 0x94
  410d0e:	960f      	str	r6, [sp, #60]	; 0x3c
  410d10:	46b1      	mov	r9, r6
  410d12:	2100      	movs	r1, #0
  410d14:	6461      	str	r1, [r4, #68]	; 0x44
  410d16:	e6bb      	b.n	410a90 <_dtoa_r+0x730>
  410d18:	980a      	ldr	r0, [sp, #40]	; 0x28
  410d1a:	4641      	mov	r1, r8
  410d1c:	f001 fd62 	bl	4127e4 <__mcmp>
  410d20:	2800      	cmp	r0, #0
  410d22:	f6bf ad8f 	bge.w	410844 <_dtoa_r+0x4e4>
  410d26:	f8dd e01c 	ldr.w	lr, [sp, #28]
  410d2a:	990a      	ldr	r1, [sp, #40]	; 0x28
  410d2c:	f10e 3eff 	add.w	lr, lr, #4294967295
  410d30:	4620      	mov	r0, r4
  410d32:	220a      	movs	r2, #10
  410d34:	2300      	movs	r3, #0
  410d36:	f8cd e01c 	str.w	lr, [sp, #28]
  410d3a:	f001 fb19 	bl	412370 <__multadd>
  410d3e:	900a      	str	r0, [sp, #40]	; 0x28
  410d40:	980b      	ldr	r0, [sp, #44]	; 0x2c
  410d42:	2800      	cmp	r0, #0
  410d44:	f040 8207 	bne.w	411156 <_dtoa_r+0xdf6>
  410d48:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  410d4c:	e57a      	b.n	410844 <_dtoa_r+0x4e4>
  410d4e:	f8d8 3010 	ldr.w	r3, [r8, #16]
  410d52:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  410d56:	6918      	ldr	r0, [r3, #16]
  410d58:	f001 fba2 	bl	4124a0 <__hi0bits>
  410d5c:	f1c0 0020 	rsb	r0, r0, #32
  410d60:	e547      	b.n	4107f2 <_dtoa_r+0x492>
  410d62:	9809      	ldr	r0, [sp, #36]	; 0x24
  410d64:	f7ff bb2d 	b.w	4103c2 <_dtoa_r+0x62>
  410d68:	f1ba 0f00 	cmp.w	sl, #0
  410d6c:	f47f ad3b 	bne.w	4107e6 <_dtoa_r+0x486>
  410d70:	f3cb 0313 	ubfx	r3, fp, #0, #20
  410d74:	2b00      	cmp	r3, #0
  410d76:	f040 817b 	bne.w	411070 <_dtoa_r+0xd10>
  410d7a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  410d7e:	0d3f      	lsrs	r7, r7, #20
  410d80:	053f      	lsls	r7, r7, #20
  410d82:	2f00      	cmp	r7, #0
  410d84:	f43f ad30 	beq.w	4107e8 <_dtoa_r+0x488>
  410d88:	9a08      	ldr	r2, [sp, #32]
  410d8a:	9b06      	ldr	r3, [sp, #24]
  410d8c:	3201      	adds	r2, #1
  410d8e:	3301      	adds	r3, #1
  410d90:	9208      	str	r2, [sp, #32]
  410d92:	9306      	str	r3, [sp, #24]
  410d94:	2701      	movs	r7, #1
  410d96:	e527      	b.n	4107e8 <_dtoa_r+0x488>
  410d98:	9924      	ldr	r1, [sp, #144]	; 0x90
  410d9a:	2902      	cmp	r1, #2
  410d9c:	f77f ad56 	ble.w	41084c <_dtoa_r+0x4ec>
  410da0:	f1b9 0f00 	cmp.w	r9, #0
  410da4:	d18f      	bne.n	410cc6 <_dtoa_r+0x966>
  410da6:	4641      	mov	r1, r8
  410da8:	464b      	mov	r3, r9
  410daa:	2205      	movs	r2, #5
  410dac:	4620      	mov	r0, r4
  410dae:	f001 fadf 	bl	412370 <__multadd>
  410db2:	4680      	mov	r8, r0
  410db4:	4641      	mov	r1, r8
  410db6:	980a      	ldr	r0, [sp, #40]	; 0x28
  410db8:	f001 fd14 	bl	4127e4 <__mcmp>
  410dbc:	2800      	cmp	r0, #0
  410dbe:	dd82      	ble.n	410cc6 <_dtoa_r+0x966>
  410dc0:	9d07      	ldr	r5, [sp, #28]
  410dc2:	3501      	adds	r5, #1
  410dc4:	9507      	str	r5, [sp, #28]
  410dc6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410dc8:	2331      	movs	r3, #49	; 0x31
  410dca:	702b      	strb	r3, [r5, #0]
  410dcc:	f105 0b01 	add.w	fp, r5, #1
  410dd0:	e77e      	b.n	410cd0 <_dtoa_r+0x970>
  410dd2:	9807      	ldr	r0, [sp, #28]
  410dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
  410dd6:	2331      	movs	r3, #49	; 0x31
  410dd8:	3001      	adds	r0, #1
  410dda:	9007      	str	r0, [sp, #28]
  410ddc:	700b      	strb	r3, [r1, #0]
  410dde:	e576      	b.n	4108ce <_dtoa_r+0x56e>
  410de0:	46a3      	mov	fp, r4
  410de2:	9c03      	ldr	r4, [sp, #12]
  410de4:	e489      	b.n	4106fa <_dtoa_r+0x39a>
  410de6:	4640      	mov	r0, r8
  410de8:	f004 fb98 	bl	41551c <__aeabi_i2d>
  410dec:	4602      	mov	r2, r0
  410dee:	460b      	mov	r3, r1
  410df0:	4650      	mov	r0, sl
  410df2:	4659      	mov	r1, fp
  410df4:	f004 fbf8 	bl	4155e8 <__aeabi_dmul>
  410df8:	2200      	movs	r2, #0
  410dfa:	4b30      	ldr	r3, [pc, #192]	; (410ebc <_dtoa_r+0xb5c>)
  410dfc:	f004 fa42 	bl	415284 <__adddf3>
  410e00:	4606      	mov	r6, r0
  410e02:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  410e06:	4650      	mov	r0, sl
  410e08:	4659      	mov	r1, fp
  410e0a:	2200      	movs	r2, #0
  410e0c:	4b2a      	ldr	r3, [pc, #168]	; (410eb8 <_dtoa_r+0xb58>)
  410e0e:	f004 fa37 	bl	415280 <__aeabi_dsub>
  410e12:	4632      	mov	r2, r6
  410e14:	463b      	mov	r3, r7
  410e16:	4682      	mov	sl, r0
  410e18:	468b      	mov	fp, r1
  410e1a:	f004 fe75 	bl	415b08 <__aeabi_dcmpgt>
  410e1e:	2800      	cmp	r0, #0
  410e20:	f040 80bc 	bne.w	410f9c <_dtoa_r+0xc3c>
  410e24:	4632      	mov	r2, r6
  410e26:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  410e2a:	4650      	mov	r0, sl
  410e2c:	4659      	mov	r1, fp
  410e2e:	f004 fe4d 	bl	415acc <__aeabi_dcmplt>
  410e32:	2800      	cmp	r0, #0
  410e34:	d054      	beq.n	410ee0 <_dtoa_r+0xb80>
  410e36:	f04f 0800 	mov.w	r8, #0
  410e3a:	4646      	mov	r6, r8
  410e3c:	e743      	b.n	410cc6 <_dtoa_r+0x966>
  410e3e:	990a      	ldr	r1, [sp, #40]	; 0x28
  410e40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410e42:	4620      	mov	r0, r4
  410e44:	f001 fc22 	bl	41268c <__pow5mult>
  410e48:	900a      	str	r0, [sp, #40]	; 0x28
  410e4a:	e4ba      	b.n	4107c2 <_dtoa_r+0x462>
  410e4c:	2601      	movs	r6, #1
  410e4e:	960b      	str	r6, [sp, #44]	; 0x2c
  410e50:	e602      	b.n	410a58 <_dtoa_r+0x6f8>
  410e52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  410e54:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  410e56:	970c      	str	r7, [sp, #48]	; 0x30
  410e58:	1b7b      	subs	r3, r7, r5
  410e5a:	441e      	add	r6, r3
  410e5c:	960d      	str	r6, [sp, #52]	; 0x34
  410e5e:	2700      	movs	r7, #0
  410e60:	e46f      	b.n	410742 <_dtoa_r+0x3e2>
  410e62:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  410e66:	f04f 0802 	mov.w	r8, #2
  410e6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  410e6e:	e638      	b.n	410ae2 <_dtoa_r+0x782>
  410e70:	2a00      	cmp	r2, #0
  410e72:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  410e76:	46d9      	mov	r9, fp
  410e78:	dd11      	ble.n	410e9e <_dtoa_r+0xb3e>
  410e7a:	990a      	ldr	r1, [sp, #40]	; 0x28
  410e7c:	2201      	movs	r2, #1
  410e7e:	4620      	mov	r0, r4
  410e80:	f001 fc52 	bl	412728 <__lshift>
  410e84:	4641      	mov	r1, r8
  410e86:	900a      	str	r0, [sp, #40]	; 0x28
  410e88:	f001 fcac 	bl	4127e4 <__mcmp>
  410e8c:	2800      	cmp	r0, #0
  410e8e:	f340 815b 	ble.w	411148 <_dtoa_r+0xde8>
  410e92:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  410e96:	f000 811a 	beq.w	4110ce <_dtoa_r+0xd6e>
  410e9a:	f109 0a31 	add.w	sl, r9, #49	; 0x31
  410e9e:	9b06      	ldr	r3, [sp, #24]
  410ea0:	4635      	mov	r5, r6
  410ea2:	f883 a000 	strb.w	sl, [r3]
  410ea6:	f103 0b01 	add.w	fp, r3, #1
  410eaa:	463e      	mov	r6, r7
  410eac:	e50f      	b.n	4108ce <_dtoa_r+0x56e>
  410eae:	bf00      	nop
  410eb0:	3ff00000 	.word	0x3ff00000
  410eb4:	40240000 	.word	0x40240000
  410eb8:	40140000 	.word	0x40140000
  410ebc:	401c0000 	.word	0x401c0000
  410ec0:	d103      	bne.n	410eca <_dtoa_r+0xb6a>
  410ec2:	f01a 0f01 	tst.w	sl, #1
  410ec6:	f47f acf2 	bne.w	4108ae <_dtoa_r+0x54e>
  410eca:	465b      	mov	r3, fp
  410ecc:	469b      	mov	fp, r3
  410ece:	3b01      	subs	r3, #1
  410ed0:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  410ed4:	2a30      	cmp	r2, #48	; 0x30
  410ed6:	d0f9      	beq.n	410ecc <_dtoa_r+0xb6c>
  410ed8:	e4f9      	b.n	4108ce <_dtoa_r+0x56e>
  410eda:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  410ede:	4654      	mov	r4, sl
  410ee0:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  410ee4:	f7ff bb48 	b.w	410578 <_dtoa_r+0x218>
  410ee8:	9e07      	ldr	r6, [sp, #28]
  410eea:	4275      	negs	r5, r6
  410eec:	2d00      	cmp	r5, #0
  410eee:	f000 80c2 	beq.w	411076 <_dtoa_r+0xd16>
  410ef2:	4ba3      	ldr	r3, [pc, #652]	; (411180 <_dtoa_r+0xe20>)
  410ef4:	f005 020f 	and.w	r2, r5, #15
  410ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  410efc:	e9d3 2300 	ldrd	r2, r3, [r3]
  410f00:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  410f04:	f004 fb70 	bl	4155e8 <__aeabi_dmul>
  410f08:	112d      	asrs	r5, r5, #4
  410f0a:	4682      	mov	sl, r0
  410f0c:	468b      	mov	fp, r1
  410f0e:	f000 812d 	beq.w	41116c <_dtoa_r+0xe0c>
  410f12:	4e9c      	ldr	r6, [pc, #624]	; (411184 <_dtoa_r+0xe24>)
  410f14:	f04f 0802 	mov.w	r8, #2
  410f18:	07ea      	lsls	r2, r5, #31
  410f1a:	d505      	bpl.n	410f28 <_dtoa_r+0xbc8>
  410f1c:	e9d6 2300 	ldrd	r2, r3, [r6]
  410f20:	f108 0801 	add.w	r8, r8, #1
  410f24:	f004 fb60 	bl	4155e8 <__aeabi_dmul>
  410f28:	106d      	asrs	r5, r5, #1
  410f2a:	f106 0608 	add.w	r6, r6, #8
  410f2e:	d1f3      	bne.n	410f18 <_dtoa_r+0xbb8>
  410f30:	4682      	mov	sl, r0
  410f32:	468b      	mov	fp, r1
  410f34:	e5f0      	b.n	410b18 <_dtoa_r+0x7b8>
  410f36:	9e07      	ldr	r6, [sp, #28]
  410f38:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410f3a:	2230      	movs	r2, #48	; 0x30
  410f3c:	702a      	strb	r2, [r5, #0]
  410f3e:	3601      	adds	r6, #1
  410f40:	2231      	movs	r2, #49	; 0x31
  410f42:	9607      	str	r6, [sp, #28]
  410f44:	701a      	strb	r2, [r3, #0]
  410f46:	f7ff bbd8 	b.w	4106fa <_dtoa_r+0x39a>
  410f4a:	6871      	ldr	r1, [r6, #4]
  410f4c:	4620      	mov	r0, r4
  410f4e:	f001 f9df 	bl	412310 <_Balloc>
  410f52:	6933      	ldr	r3, [r6, #16]
  410f54:	1c9a      	adds	r2, r3, #2
  410f56:	4605      	mov	r5, r0
  410f58:	0092      	lsls	r2, r2, #2
  410f5a:	f106 010c 	add.w	r1, r6, #12
  410f5e:	300c      	adds	r0, #12
  410f60:	f7fb fd7e 	bl	40ca60 <memcpy>
  410f64:	4620      	mov	r0, r4
  410f66:	4629      	mov	r1, r5
  410f68:	2201      	movs	r2, #1
  410f6a:	f001 fbdd 	bl	412728 <__lshift>
  410f6e:	4607      	mov	r7, r0
  410f70:	e504      	b.n	41097c <_dtoa_r+0x61c>
  410f72:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  410f76:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  410f7a:	f000 80a8 	beq.w	4110ce <_dtoa_r+0xd6e>
  410f7e:	9d06      	ldr	r5, [sp, #24]
  410f80:	f10a 0301 	add.w	r3, sl, #1
  410f84:	702b      	strb	r3, [r5, #0]
  410f86:	4635      	mov	r5, r6
  410f88:	9e06      	ldr	r6, [sp, #24]
  410f8a:	f106 0b01 	add.w	fp, r6, #1
  410f8e:	463e      	mov	r6, r7
  410f90:	e49d      	b.n	4108ce <_dtoa_r+0x56e>
  410f92:	4635      	mov	r5, r6
  410f94:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  410f98:	463e      	mov	r6, r7
  410f9a:	e47c      	b.n	410896 <_dtoa_r+0x536>
  410f9c:	f04f 0800 	mov.w	r8, #0
  410fa0:	4646      	mov	r6, r8
  410fa2:	e70d      	b.n	410dc0 <_dtoa_r+0xa60>
  410fa4:	4976      	ldr	r1, [pc, #472]	; (411180 <_dtoa_r+0xe20>)
  410fa6:	f108 35ff 	add.w	r5, r8, #4294967295
  410faa:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  410fae:	4632      	mov	r2, r6
  410fb0:	463b      	mov	r3, r7
  410fb2:	e9d1 0100 	ldrd	r0, r1, [r1]
  410fb6:	9510      	str	r5, [sp, #64]	; 0x40
  410fb8:	f004 fb16 	bl	4155e8 <__aeabi_dmul>
  410fbc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  410fc0:	4659      	mov	r1, fp
  410fc2:	4650      	mov	r0, sl
  410fc4:	f004 fdaa 	bl	415b1c <__aeabi_d2iz>
  410fc8:	4605      	mov	r5, r0
  410fca:	f004 faa7 	bl	41551c <__aeabi_i2d>
  410fce:	4602      	mov	r2, r0
  410fd0:	460b      	mov	r3, r1
  410fd2:	4650      	mov	r0, sl
  410fd4:	4659      	mov	r1, fp
  410fd6:	f004 f953 	bl	415280 <__aeabi_dsub>
  410fda:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  410fde:	3530      	adds	r5, #48	; 0x30
  410fe0:	f1b8 0f01 	cmp.w	r8, #1
  410fe4:	4606      	mov	r6, r0
  410fe6:	460f      	mov	r7, r1
  410fe8:	f88e 5000 	strb.w	r5, [lr]
  410fec:	f10e 0b01 	add.w	fp, lr, #1
  410ff0:	d01e      	beq.n	411030 <_dtoa_r+0xcd0>
  410ff2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  410ff4:	1e6b      	subs	r3, r5, #1
  410ff6:	eb03 0a08 	add.w	sl, r3, r8
  410ffa:	2200      	movs	r2, #0
  410ffc:	4b62      	ldr	r3, [pc, #392]	; (411188 <_dtoa_r+0xe28>)
  410ffe:	f004 faf3 	bl	4155e8 <__aeabi_dmul>
  411002:	460f      	mov	r7, r1
  411004:	4606      	mov	r6, r0
  411006:	f004 fd89 	bl	415b1c <__aeabi_d2iz>
  41100a:	4680      	mov	r8, r0
  41100c:	f004 fa86 	bl	41551c <__aeabi_i2d>
  411010:	f108 0830 	add.w	r8, r8, #48	; 0x30
  411014:	4602      	mov	r2, r0
  411016:	460b      	mov	r3, r1
  411018:	4630      	mov	r0, r6
  41101a:	4639      	mov	r1, r7
  41101c:	f004 f930 	bl	415280 <__aeabi_dsub>
  411020:	f805 8f01 	strb.w	r8, [r5, #1]!
  411024:	4555      	cmp	r5, sl
  411026:	d1e8      	bne.n	410ffa <_dtoa_r+0xc9a>
  411028:	9d10      	ldr	r5, [sp, #64]	; 0x40
  41102a:	4606      	mov	r6, r0
  41102c:	460f      	mov	r7, r1
  41102e:	44ab      	add	fp, r5
  411030:	2200      	movs	r2, #0
  411032:	4b56      	ldr	r3, [pc, #344]	; (41118c <_dtoa_r+0xe2c>)
  411034:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  411038:	f004 f924 	bl	415284 <__adddf3>
  41103c:	4632      	mov	r2, r6
  41103e:	463b      	mov	r3, r7
  411040:	f004 fd44 	bl	415acc <__aeabi_dcmplt>
  411044:	2800      	cmp	r0, #0
  411046:	d04d      	beq.n	4110e4 <_dtoa_r+0xd84>
  411048:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  41104a:	9607      	str	r6, [sp, #28]
  41104c:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  411050:	9a09      	ldr	r2, [sp, #36]	; 0x24
  411052:	f7ff bb4b 	b.w	4106ec <_dtoa_r+0x38c>
  411056:	9e08      	ldr	r6, [sp, #32]
  411058:	2300      	movs	r3, #0
  41105a:	ebc9 0506 	rsb	r5, r9, r6
  41105e:	f7ff bb76 	b.w	41074e <_dtoa_r+0x3ee>
  411062:	9b18      	ldr	r3, [sp, #96]	; 0x60
  411064:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  411066:	9d08      	ldr	r5, [sp, #32]
  411068:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  41106c:	f7ff bb6f 	b.w	41074e <_dtoa_r+0x3ee>
  411070:	4657      	mov	r7, sl
  411072:	f7ff bbb9 	b.w	4107e8 <_dtoa_r+0x488>
  411076:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  41107a:	f04f 0802 	mov.w	r8, #2
  41107e:	e54b      	b.n	410b18 <_dtoa_r+0x7b8>
  411080:	f1b9 0f00 	cmp.w	r9, #0
  411084:	f43f aeaf 	beq.w	410de6 <_dtoa_r+0xa86>
  411088:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  41108a:	2e00      	cmp	r6, #0
  41108c:	f77f af28 	ble.w	410ee0 <_dtoa_r+0xb80>
  411090:	2200      	movs	r2, #0
  411092:	4b3d      	ldr	r3, [pc, #244]	; (411188 <_dtoa_r+0xe28>)
  411094:	4650      	mov	r0, sl
  411096:	4659      	mov	r1, fp
  411098:	f004 faa6 	bl	4155e8 <__aeabi_dmul>
  41109c:	4682      	mov	sl, r0
  41109e:	f108 0001 	add.w	r0, r8, #1
  4110a2:	468b      	mov	fp, r1
  4110a4:	f004 fa3a 	bl	41551c <__aeabi_i2d>
  4110a8:	4602      	mov	r2, r0
  4110aa:	460b      	mov	r3, r1
  4110ac:	4650      	mov	r0, sl
  4110ae:	4659      	mov	r1, fp
  4110b0:	f004 fa9a 	bl	4155e8 <__aeabi_dmul>
  4110b4:	2200      	movs	r2, #0
  4110b6:	4b36      	ldr	r3, [pc, #216]	; (411190 <_dtoa_r+0xe30>)
  4110b8:	f004 f8e4 	bl	415284 <__adddf3>
  4110bc:	9d07      	ldr	r5, [sp, #28]
  4110be:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  4110c2:	3d01      	subs	r5, #1
  4110c4:	4606      	mov	r6, r0
  4110c6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4110ca:	9517      	str	r5, [sp, #92]	; 0x5c
  4110cc:	e544      	b.n	410b58 <_dtoa_r+0x7f8>
  4110ce:	4635      	mov	r5, r6
  4110d0:	9b06      	ldr	r3, [sp, #24]
  4110d2:	9e06      	ldr	r6, [sp, #24]
  4110d4:	9909      	ldr	r1, [sp, #36]	; 0x24
  4110d6:	2239      	movs	r2, #57	; 0x39
  4110d8:	7032      	strb	r2, [r6, #0]
  4110da:	f103 0b01 	add.w	fp, r3, #1
  4110de:	463e      	mov	r6, r7
  4110e0:	f7ff bbef 	b.w	4108c2 <_dtoa_r+0x562>
  4110e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  4110e8:	2000      	movs	r0, #0
  4110ea:	4928      	ldr	r1, [pc, #160]	; (41118c <_dtoa_r+0xe2c>)
  4110ec:	f004 f8c8 	bl	415280 <__aeabi_dsub>
  4110f0:	4632      	mov	r2, r6
  4110f2:	463b      	mov	r3, r7
  4110f4:	f004 fd08 	bl	415b08 <__aeabi_dcmpgt>
  4110f8:	2800      	cmp	r0, #0
  4110fa:	f43f aef1 	beq.w	410ee0 <_dtoa_r+0xb80>
  4110fe:	465b      	mov	r3, fp
  411100:	469b      	mov	fp, r3
  411102:	3b01      	subs	r3, #1
  411104:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  411108:	2a30      	cmp	r2, #48	; 0x30
  41110a:	d0f9      	beq.n	411100 <_dtoa_r+0xda0>
  41110c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  41110e:	9507      	str	r5, [sp, #28]
  411110:	f7ff baf3 	b.w	4106fa <_dtoa_r+0x39a>
  411114:	4645      	mov	r5, r8
  411116:	4654      	mov	r4, sl
  411118:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  41111a:	9607      	str	r6, [sp, #28]
  41111c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41111e:	f7ff bae5 	b.w	4106ec <_dtoa_r+0x38c>
  411122:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  411126:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  41112a:	d0d0      	beq.n	4110ce <_dtoa_r+0xd6e>
  41112c:	9b03      	ldr	r3, [sp, #12]
  41112e:	4635      	mov	r5, r6
  411130:	2b00      	cmp	r3, #0
  411132:	9e06      	ldr	r6, [sp, #24]
  411134:	bfc8      	it	gt
  411136:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
  41113a:	f886 a000 	strb.w	sl, [r6]
  41113e:	f106 0b01 	add.w	fp, r6, #1
  411142:	463e      	mov	r6, r7
  411144:	f7ff bbc3 	b.w	4108ce <_dtoa_r+0x56e>
  411148:	f47f aea9 	bne.w	410e9e <_dtoa_r+0xb3e>
  41114c:	f01a 0f01 	tst.w	sl, #1
  411150:	f43f aea5 	beq.w	410e9e <_dtoa_r+0xb3e>
  411154:	e69d      	b.n	410e92 <_dtoa_r+0xb32>
  411156:	4631      	mov	r1, r6
  411158:	4620      	mov	r0, r4
  41115a:	220a      	movs	r2, #10
  41115c:	2300      	movs	r3, #0
  41115e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  411162:	f001 f905 	bl	412370 <__multadd>
  411166:	4606      	mov	r6, r0
  411168:	f7ff bb6c 	b.w	410844 <_dtoa_r+0x4e4>
  41116c:	f04f 0802 	mov.w	r8, #2
  411170:	e4d2      	b.n	410b18 <_dtoa_r+0x7b8>
  411172:	f43f ab52 	beq.w	41081a <_dtoa_r+0x4ba>
  411176:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  41117a:	f7ff bbe2 	b.w	410942 <_dtoa_r+0x5e2>
  41117e:	bf00      	nop
  411180:	00416348 	.word	0x00416348
  411184:	00416410 	.word	0x00416410
  411188:	40240000 	.word	0x40240000
  41118c:	3fe00000 	.word	0x3fe00000
  411190:	401c0000 	.word	0x401c0000
  411194:	f3af 8000 	nop.w

00411198 <__sflush_r>:
  411198:	898b      	ldrh	r3, [r1, #12]
  41119a:	b29a      	uxth	r2, r3
  41119c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4111a0:	460d      	mov	r5, r1
  4111a2:	0711      	lsls	r1, r2, #28
  4111a4:	4680      	mov	r8, r0
  4111a6:	d43c      	bmi.n	411222 <__sflush_r+0x8a>
  4111a8:	686a      	ldr	r2, [r5, #4]
  4111aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4111ae:	2a00      	cmp	r2, #0
  4111b0:	81ab      	strh	r3, [r5, #12]
  4111b2:	dd59      	ble.n	411268 <__sflush_r+0xd0>
  4111b4:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4111b6:	2c00      	cmp	r4, #0
  4111b8:	d04b      	beq.n	411252 <__sflush_r+0xba>
  4111ba:	b29b      	uxth	r3, r3
  4111bc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4111c0:	2100      	movs	r1, #0
  4111c2:	b292      	uxth	r2, r2
  4111c4:	f8d8 6000 	ldr.w	r6, [r8]
  4111c8:	f8c8 1000 	str.w	r1, [r8]
  4111cc:	2a00      	cmp	r2, #0
  4111ce:	d04f      	beq.n	411270 <__sflush_r+0xd8>
  4111d0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4111d2:	075f      	lsls	r7, r3, #29
  4111d4:	d505      	bpl.n	4111e2 <__sflush_r+0x4a>
  4111d6:	6869      	ldr	r1, [r5, #4]
  4111d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4111da:	1a52      	subs	r2, r2, r1
  4111dc:	b10b      	cbz	r3, 4111e2 <__sflush_r+0x4a>
  4111de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4111e0:	1ad2      	subs	r2, r2, r3
  4111e2:	4640      	mov	r0, r8
  4111e4:	69e9      	ldr	r1, [r5, #28]
  4111e6:	2300      	movs	r3, #0
  4111e8:	47a0      	blx	r4
  4111ea:	1c44      	adds	r4, r0, #1
  4111ec:	d04a      	beq.n	411284 <__sflush_r+0xec>
  4111ee:	89aa      	ldrh	r2, [r5, #12]
  4111f0:	692b      	ldr	r3, [r5, #16]
  4111f2:	602b      	str	r3, [r5, #0]
  4111f4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4111f8:	b29b      	uxth	r3, r3
  4111fa:	2200      	movs	r2, #0
  4111fc:	606a      	str	r2, [r5, #4]
  4111fe:	04da      	lsls	r2, r3, #19
  411200:	81ab      	strh	r3, [r5, #12]
  411202:	d44c      	bmi.n	41129e <__sflush_r+0x106>
  411204:	6b29      	ldr	r1, [r5, #48]	; 0x30
  411206:	f8c8 6000 	str.w	r6, [r8]
  41120a:	b311      	cbz	r1, 411252 <__sflush_r+0xba>
  41120c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  411210:	4299      	cmp	r1, r3
  411212:	d002      	beq.n	41121a <__sflush_r+0x82>
  411214:	4640      	mov	r0, r8
  411216:	f000 f9c7 	bl	4115a8 <_free_r>
  41121a:	2000      	movs	r0, #0
  41121c:	6328      	str	r0, [r5, #48]	; 0x30
  41121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411222:	692e      	ldr	r6, [r5, #16]
  411224:	b1ae      	cbz	r6, 411252 <__sflush_r+0xba>
  411226:	682c      	ldr	r4, [r5, #0]
  411228:	602e      	str	r6, [r5, #0]
  41122a:	0791      	lsls	r1, r2, #30
  41122c:	bf0c      	ite	eq
  41122e:	696b      	ldreq	r3, [r5, #20]
  411230:	2300      	movne	r3, #0
  411232:	1ba4      	subs	r4, r4, r6
  411234:	60ab      	str	r3, [r5, #8]
  411236:	e00a      	b.n	41124e <__sflush_r+0xb6>
  411238:	4632      	mov	r2, r6
  41123a:	4623      	mov	r3, r4
  41123c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  41123e:	69e9      	ldr	r1, [r5, #28]
  411240:	4640      	mov	r0, r8
  411242:	47b8      	blx	r7
  411244:	2800      	cmp	r0, #0
  411246:	ebc0 0404 	rsb	r4, r0, r4
  41124a:	4406      	add	r6, r0
  41124c:	dd04      	ble.n	411258 <__sflush_r+0xc0>
  41124e:	2c00      	cmp	r4, #0
  411250:	dcf2      	bgt.n	411238 <__sflush_r+0xa0>
  411252:	2000      	movs	r0, #0
  411254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411258:	89ab      	ldrh	r3, [r5, #12]
  41125a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41125e:	81ab      	strh	r3, [r5, #12]
  411260:	f04f 30ff 	mov.w	r0, #4294967295
  411264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411268:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  41126a:	2a00      	cmp	r2, #0
  41126c:	dca2      	bgt.n	4111b4 <__sflush_r+0x1c>
  41126e:	e7f0      	b.n	411252 <__sflush_r+0xba>
  411270:	2301      	movs	r3, #1
  411272:	4640      	mov	r0, r8
  411274:	69e9      	ldr	r1, [r5, #28]
  411276:	47a0      	blx	r4
  411278:	1c43      	adds	r3, r0, #1
  41127a:	4602      	mov	r2, r0
  41127c:	d01e      	beq.n	4112bc <__sflush_r+0x124>
  41127e:	89ab      	ldrh	r3, [r5, #12]
  411280:	6aac      	ldr	r4, [r5, #40]	; 0x28
  411282:	e7a6      	b.n	4111d2 <__sflush_r+0x3a>
  411284:	f8d8 3000 	ldr.w	r3, [r8]
  411288:	b95b      	cbnz	r3, 4112a2 <__sflush_r+0x10a>
  41128a:	89a9      	ldrh	r1, [r5, #12]
  41128c:	606b      	str	r3, [r5, #4]
  41128e:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
  411292:	b29b      	uxth	r3, r3
  411294:	692a      	ldr	r2, [r5, #16]
  411296:	81ab      	strh	r3, [r5, #12]
  411298:	04db      	lsls	r3, r3, #19
  41129a:	602a      	str	r2, [r5, #0]
  41129c:	d5b2      	bpl.n	411204 <__sflush_r+0x6c>
  41129e:	6528      	str	r0, [r5, #80]	; 0x50
  4112a0:	e7b0      	b.n	411204 <__sflush_r+0x6c>
  4112a2:	2b1d      	cmp	r3, #29
  4112a4:	d001      	beq.n	4112aa <__sflush_r+0x112>
  4112a6:	2b16      	cmp	r3, #22
  4112a8:	d119      	bne.n	4112de <__sflush_r+0x146>
  4112aa:	89aa      	ldrh	r2, [r5, #12]
  4112ac:	692b      	ldr	r3, [r5, #16]
  4112ae:	602b      	str	r3, [r5, #0]
  4112b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4112b4:	2300      	movs	r3, #0
  4112b6:	81aa      	strh	r2, [r5, #12]
  4112b8:	606b      	str	r3, [r5, #4]
  4112ba:	e7a3      	b.n	411204 <__sflush_r+0x6c>
  4112bc:	f8d8 3000 	ldr.w	r3, [r8]
  4112c0:	2b00      	cmp	r3, #0
  4112c2:	d0dc      	beq.n	41127e <__sflush_r+0xe6>
  4112c4:	2b1d      	cmp	r3, #29
  4112c6:	d007      	beq.n	4112d8 <__sflush_r+0x140>
  4112c8:	2b16      	cmp	r3, #22
  4112ca:	d005      	beq.n	4112d8 <__sflush_r+0x140>
  4112cc:	89ab      	ldrh	r3, [r5, #12]
  4112ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4112d2:	81ab      	strh	r3, [r5, #12]
  4112d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4112d8:	f8c8 6000 	str.w	r6, [r8]
  4112dc:	e7b9      	b.n	411252 <__sflush_r+0xba>
  4112de:	89ab      	ldrh	r3, [r5, #12]
  4112e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4112e4:	81ab      	strh	r3, [r5, #12]
  4112e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4112ea:	bf00      	nop

004112ec <_fflush_r>:
  4112ec:	b510      	push	{r4, lr}
  4112ee:	4604      	mov	r4, r0
  4112f0:	b082      	sub	sp, #8
  4112f2:	b108      	cbz	r0, 4112f8 <_fflush_r+0xc>
  4112f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4112f6:	b153      	cbz	r3, 41130e <_fflush_r+0x22>
  4112f8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4112fc:	b908      	cbnz	r0, 411302 <_fflush_r+0x16>
  4112fe:	b002      	add	sp, #8
  411300:	bd10      	pop	{r4, pc}
  411302:	4620      	mov	r0, r4
  411304:	b002      	add	sp, #8
  411306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  41130a:	f7ff bf45 	b.w	411198 <__sflush_r>
  41130e:	9101      	str	r1, [sp, #4]
  411310:	f000 f808 	bl	411324 <__sinit>
  411314:	9901      	ldr	r1, [sp, #4]
  411316:	e7ef      	b.n	4112f8 <_fflush_r+0xc>

00411318 <_cleanup_r>:
  411318:	4901      	ldr	r1, [pc, #4]	; (411320 <_cleanup_r+0x8>)
  41131a:	f000 bb9f 	b.w	411a5c <_fwalk>
  41131e:	bf00      	nop
  411320:	00414ab9 	.word	0x00414ab9

00411324 <__sinit>:
  411324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411328:	6b84      	ldr	r4, [r0, #56]	; 0x38
  41132a:	b083      	sub	sp, #12
  41132c:	4607      	mov	r7, r0
  41132e:	2c00      	cmp	r4, #0
  411330:	d165      	bne.n	4113fe <__sinit+0xda>
  411332:	6845      	ldr	r5, [r0, #4]
  411334:	4833      	ldr	r0, [pc, #204]	; (411404 <__sinit+0xe0>)
  411336:	63f8      	str	r0, [r7, #60]	; 0x3c
  411338:	2304      	movs	r3, #4
  41133a:	2103      	movs	r1, #3
  41133c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  411340:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  411344:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  411348:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  41134c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  411350:	81ab      	strh	r3, [r5, #12]
  411352:	602c      	str	r4, [r5, #0]
  411354:	606c      	str	r4, [r5, #4]
  411356:	60ac      	str	r4, [r5, #8]
  411358:	666c      	str	r4, [r5, #100]	; 0x64
  41135a:	81ec      	strh	r4, [r5, #14]
  41135c:	612c      	str	r4, [r5, #16]
  41135e:	616c      	str	r4, [r5, #20]
  411360:	61ac      	str	r4, [r5, #24]
  411362:	4621      	mov	r1, r4
  411364:	2208      	movs	r2, #8
  411366:	f7fb fc15 	bl	40cb94 <memset>
  41136a:	68be      	ldr	r6, [r7, #8]
  41136c:	f8df b098 	ldr.w	fp, [pc, #152]	; 411408 <__sinit+0xe4>
  411370:	f8df a098 	ldr.w	sl, [pc, #152]	; 41140c <__sinit+0xe8>
  411374:	f8df 9098 	ldr.w	r9, [pc, #152]	; 411410 <__sinit+0xec>
  411378:	f8df 8098 	ldr.w	r8, [pc, #152]	; 411414 <__sinit+0xf0>
  41137c:	61ed      	str	r5, [r5, #28]
  41137e:	2301      	movs	r3, #1
  411380:	2209      	movs	r2, #9
  411382:	f8c5 b020 	str.w	fp, [r5, #32]
  411386:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  41138a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  41138e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  411392:	4621      	mov	r1, r4
  411394:	81f3      	strh	r3, [r6, #14]
  411396:	81b2      	strh	r2, [r6, #12]
  411398:	6034      	str	r4, [r6, #0]
  41139a:	6074      	str	r4, [r6, #4]
  41139c:	60b4      	str	r4, [r6, #8]
  41139e:	6674      	str	r4, [r6, #100]	; 0x64
  4113a0:	6134      	str	r4, [r6, #16]
  4113a2:	6174      	str	r4, [r6, #20]
  4113a4:	61b4      	str	r4, [r6, #24]
  4113a6:	2208      	movs	r2, #8
  4113a8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4113ac:	9301      	str	r3, [sp, #4]
  4113ae:	f7fb fbf1 	bl	40cb94 <memset>
  4113b2:	68fd      	ldr	r5, [r7, #12]
  4113b4:	61f6      	str	r6, [r6, #28]
  4113b6:	2012      	movs	r0, #18
  4113b8:	2202      	movs	r2, #2
  4113ba:	f8c6 b020 	str.w	fp, [r6, #32]
  4113be:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4113c2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4113c6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  4113ca:	4621      	mov	r1, r4
  4113cc:	81a8      	strh	r0, [r5, #12]
  4113ce:	81ea      	strh	r2, [r5, #14]
  4113d0:	602c      	str	r4, [r5, #0]
  4113d2:	606c      	str	r4, [r5, #4]
  4113d4:	60ac      	str	r4, [r5, #8]
  4113d6:	666c      	str	r4, [r5, #100]	; 0x64
  4113d8:	612c      	str	r4, [r5, #16]
  4113da:	616c      	str	r4, [r5, #20]
  4113dc:	61ac      	str	r4, [r5, #24]
  4113de:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4113e2:	2208      	movs	r2, #8
  4113e4:	f7fb fbd6 	bl	40cb94 <memset>
  4113e8:	9b01      	ldr	r3, [sp, #4]
  4113ea:	61ed      	str	r5, [r5, #28]
  4113ec:	f8c5 b020 	str.w	fp, [r5, #32]
  4113f0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4113f4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4113f8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4113fc:	63bb      	str	r3, [r7, #56]	; 0x38
  4113fe:	b003      	add	sp, #12
  411400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411404:	00411319 	.word	0x00411319
  411408:	0040ce49 	.word	0x0040ce49
  41140c:	0040ce71 	.word	0x0040ce71
  411410:	0040cea9 	.word	0x0040cea9
  411414:	0040cec9 	.word	0x0040cec9

00411418 <__sfp_lock_acquire>:
  411418:	4770      	bx	lr
  41141a:	bf00      	nop

0041141c <__sfp_lock_release>:
  41141c:	4770      	bx	lr
  41141e:	bf00      	nop

00411420 <__libc_fini_array>:
  411420:	b538      	push	{r3, r4, r5, lr}
  411422:	4d09      	ldr	r5, [pc, #36]	; (411448 <__libc_fini_array+0x28>)
  411424:	4c09      	ldr	r4, [pc, #36]	; (41144c <__libc_fini_array+0x2c>)
  411426:	1b64      	subs	r4, r4, r5
  411428:	10a4      	asrs	r4, r4, #2
  41142a:	bf18      	it	ne
  41142c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  411430:	d005      	beq.n	41143e <__libc_fini_array+0x1e>
  411432:	3c01      	subs	r4, #1
  411434:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  411438:	4798      	blx	r3
  41143a:	2c00      	cmp	r4, #0
  41143c:	d1f9      	bne.n	411432 <__libc_fini_array+0x12>
  41143e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  411442:	f005 b8bb 	b.w	4165bc <_fini>
  411446:	bf00      	nop
  411448:	004165c8 	.word	0x004165c8
  41144c:	004165cc 	.word	0x004165cc

00411450 <_fputwc_r>:
  411450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411454:	8993      	ldrh	r3, [r2, #12]
  411456:	460f      	mov	r7, r1
  411458:	0499      	lsls	r1, r3, #18
  41145a:	b082      	sub	sp, #8
  41145c:	4614      	mov	r4, r2
  41145e:	4680      	mov	r8, r0
  411460:	d406      	bmi.n	411470 <_fputwc_r+0x20>
  411462:	6e52      	ldr	r2, [r2, #100]	; 0x64
  411464:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  411468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  41146c:	81a3      	strh	r3, [r4, #12]
  41146e:	6662      	str	r2, [r4, #100]	; 0x64
  411470:	f000 fb2c 	bl	411acc <__locale_mb_cur_max>
  411474:	2801      	cmp	r0, #1
  411476:	d03d      	beq.n	4114f4 <_fputwc_r+0xa4>
  411478:	463a      	mov	r2, r7
  41147a:	4640      	mov	r0, r8
  41147c:	a901      	add	r1, sp, #4
  41147e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  411482:	f003 fa1f 	bl	4148c4 <_wcrtomb_r>
  411486:	1c42      	adds	r2, r0, #1
  411488:	4606      	mov	r6, r0
  41148a:	d02c      	beq.n	4114e6 <_fputwc_r+0x96>
  41148c:	2800      	cmp	r0, #0
  41148e:	d039      	beq.n	411504 <_fputwc_r+0xb4>
  411490:	f89d 1004 	ldrb.w	r1, [sp, #4]
  411494:	2500      	movs	r5, #0
  411496:	e009      	b.n	4114ac <_fputwc_r+0x5c>
  411498:	6823      	ldr	r3, [r4, #0]
  41149a:	7019      	strb	r1, [r3, #0]
  41149c:	6823      	ldr	r3, [r4, #0]
  41149e:	3301      	adds	r3, #1
  4114a0:	6023      	str	r3, [r4, #0]
  4114a2:	3501      	adds	r5, #1
  4114a4:	42b5      	cmp	r5, r6
  4114a6:	d22d      	bcs.n	411504 <_fputwc_r+0xb4>
  4114a8:	ab01      	add	r3, sp, #4
  4114aa:	5ce9      	ldrb	r1, [r5, r3]
  4114ac:	68a3      	ldr	r3, [r4, #8]
  4114ae:	3b01      	subs	r3, #1
  4114b0:	2b00      	cmp	r3, #0
  4114b2:	60a3      	str	r3, [r4, #8]
  4114b4:	daf0      	bge.n	411498 <_fputwc_r+0x48>
  4114b6:	69a2      	ldr	r2, [r4, #24]
  4114b8:	4293      	cmp	r3, r2
  4114ba:	db05      	blt.n	4114c8 <_fputwc_r+0x78>
  4114bc:	6823      	ldr	r3, [r4, #0]
  4114be:	7019      	strb	r1, [r3, #0]
  4114c0:	6823      	ldr	r3, [r4, #0]
  4114c2:	7819      	ldrb	r1, [r3, #0]
  4114c4:	290a      	cmp	r1, #10
  4114c6:	d1ea      	bne.n	41149e <_fputwc_r+0x4e>
  4114c8:	4640      	mov	r0, r8
  4114ca:	4622      	mov	r2, r4
  4114cc:	f003 f9a6 	bl	41481c <__swbuf_r>
  4114d0:	f1b0 33ff 	subs.w	r3, r0, #4294967295
  4114d4:	4258      	negs	r0, r3
  4114d6:	4158      	adcs	r0, r3
  4114d8:	2800      	cmp	r0, #0
  4114da:	d0e2      	beq.n	4114a2 <_fputwc_r+0x52>
  4114dc:	f04f 30ff 	mov.w	r0, #4294967295
  4114e0:	b002      	add	sp, #8
  4114e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4114e6:	89a3      	ldrh	r3, [r4, #12]
  4114e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4114ec:	81a3      	strh	r3, [r4, #12]
  4114ee:	b002      	add	sp, #8
  4114f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4114f4:	1e7b      	subs	r3, r7, #1
  4114f6:	2bfe      	cmp	r3, #254	; 0xfe
  4114f8:	d8be      	bhi.n	411478 <_fputwc_r+0x28>
  4114fa:	b2f9      	uxtb	r1, r7
  4114fc:	4606      	mov	r6, r0
  4114fe:	f88d 1004 	strb.w	r1, [sp, #4]
  411502:	e7c7      	b.n	411494 <_fputwc_r+0x44>
  411504:	4638      	mov	r0, r7
  411506:	b002      	add	sp, #8
  411508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041150c <_malloc_trim_r>:
  41150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41150e:	4d23      	ldr	r5, [pc, #140]	; (41159c <_malloc_trim_r+0x90>)
  411510:	460f      	mov	r7, r1
  411512:	4604      	mov	r4, r0
  411514:	f000 fef8 	bl	412308 <__malloc_lock>
  411518:	68ab      	ldr	r3, [r5, #8]
  41151a:	685e      	ldr	r6, [r3, #4]
  41151c:	f026 0603 	bic.w	r6, r6, #3
  411520:	1bf1      	subs	r1, r6, r7
  411522:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  411526:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  41152a:	f021 010f 	bic.w	r1, r1, #15
  41152e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  411532:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  411536:	db07      	blt.n	411548 <_malloc_trim_r+0x3c>
  411538:	4620      	mov	r0, r4
  41153a:	2100      	movs	r1, #0
  41153c:	f001 fd56 	bl	412fec <_sbrk_r>
  411540:	68ab      	ldr	r3, [r5, #8]
  411542:	4433      	add	r3, r6
  411544:	4298      	cmp	r0, r3
  411546:	d004      	beq.n	411552 <_malloc_trim_r+0x46>
  411548:	4620      	mov	r0, r4
  41154a:	f000 fedf 	bl	41230c <__malloc_unlock>
  41154e:	2000      	movs	r0, #0
  411550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  411552:	4620      	mov	r0, r4
  411554:	4279      	negs	r1, r7
  411556:	f001 fd49 	bl	412fec <_sbrk_r>
  41155a:	3001      	adds	r0, #1
  41155c:	d00d      	beq.n	41157a <_malloc_trim_r+0x6e>
  41155e:	4b10      	ldr	r3, [pc, #64]	; (4115a0 <_malloc_trim_r+0x94>)
  411560:	68aa      	ldr	r2, [r5, #8]
  411562:	6819      	ldr	r1, [r3, #0]
  411564:	1bf6      	subs	r6, r6, r7
  411566:	f046 0601 	orr.w	r6, r6, #1
  41156a:	4620      	mov	r0, r4
  41156c:	1bc9      	subs	r1, r1, r7
  41156e:	6056      	str	r6, [r2, #4]
  411570:	6019      	str	r1, [r3, #0]
  411572:	f000 fecb 	bl	41230c <__malloc_unlock>
  411576:	2001      	movs	r0, #1
  411578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41157a:	4620      	mov	r0, r4
  41157c:	2100      	movs	r1, #0
  41157e:	f001 fd35 	bl	412fec <_sbrk_r>
  411582:	68ab      	ldr	r3, [r5, #8]
  411584:	1ac2      	subs	r2, r0, r3
  411586:	2a0f      	cmp	r2, #15
  411588:	ddde      	ble.n	411548 <_malloc_trim_r+0x3c>
  41158a:	4d06      	ldr	r5, [pc, #24]	; (4115a4 <_malloc_trim_r+0x98>)
  41158c:	4904      	ldr	r1, [pc, #16]	; (4115a0 <_malloc_trim_r+0x94>)
  41158e:	682d      	ldr	r5, [r5, #0]
  411590:	f042 0201 	orr.w	r2, r2, #1
  411594:	1b40      	subs	r0, r0, r5
  411596:	605a      	str	r2, [r3, #4]
  411598:	6008      	str	r0, [r1, #0]
  41159a:	e7d5      	b.n	411548 <_malloc_trim_r+0x3c>
  41159c:	200007fc 	.word	0x200007fc
  4115a0:	20008924 	.word	0x20008924
  4115a4:	20000c08 	.word	0x20000c08

004115a8 <_free_r>:
  4115a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4115ac:	460d      	mov	r5, r1
  4115ae:	4606      	mov	r6, r0
  4115b0:	2900      	cmp	r1, #0
  4115b2:	d055      	beq.n	411660 <_free_r+0xb8>
  4115b4:	f000 fea8 	bl	412308 <__malloc_lock>
  4115b8:	f855 1c04 	ldr.w	r1, [r5, #-4]
  4115bc:	f8df c174 	ldr.w	ip, [pc, #372]	; 411734 <_free_r+0x18c>
  4115c0:	f021 0301 	bic.w	r3, r1, #1
  4115c4:	f1a5 0408 	sub.w	r4, r5, #8
  4115c8:	18e2      	adds	r2, r4, r3
  4115ca:	f8dc 0008 	ldr.w	r0, [ip, #8]
  4115ce:	6857      	ldr	r7, [r2, #4]
  4115d0:	4290      	cmp	r0, r2
  4115d2:	f027 0703 	bic.w	r7, r7, #3
  4115d6:	d069      	beq.n	4116ac <_free_r+0x104>
  4115d8:	f011 0101 	ands.w	r1, r1, #1
  4115dc:	6057      	str	r7, [r2, #4]
  4115de:	d032      	beq.n	411646 <_free_r+0x9e>
  4115e0:	2100      	movs	r1, #0
  4115e2:	19d0      	adds	r0, r2, r7
  4115e4:	6840      	ldr	r0, [r0, #4]
  4115e6:	07c0      	lsls	r0, r0, #31
  4115e8:	d406      	bmi.n	4115f8 <_free_r+0x50>
  4115ea:	443b      	add	r3, r7
  4115ec:	6890      	ldr	r0, [r2, #8]
  4115ee:	2900      	cmp	r1, #0
  4115f0:	d04e      	beq.n	411690 <_free_r+0xe8>
  4115f2:	68d2      	ldr	r2, [r2, #12]
  4115f4:	60c2      	str	r2, [r0, #12]
  4115f6:	6090      	str	r0, [r2, #8]
  4115f8:	f043 0201 	orr.w	r2, r3, #1
  4115fc:	6062      	str	r2, [r4, #4]
  4115fe:	50e3      	str	r3, [r4, r3]
  411600:	b9e1      	cbnz	r1, 41163c <_free_r+0x94>
  411602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  411606:	d32d      	bcc.n	411664 <_free_r+0xbc>
  411608:	0a5a      	lsrs	r2, r3, #9
  41160a:	2a04      	cmp	r2, #4
  41160c:	d86a      	bhi.n	4116e4 <_free_r+0x13c>
  41160e:	0998      	lsrs	r0, r3, #6
  411610:	3038      	adds	r0, #56	; 0x38
  411612:	0041      	lsls	r1, r0, #1
  411614:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  411618:	4946      	ldr	r1, [pc, #280]	; (411734 <_free_r+0x18c>)
  41161a:	f8dc 2008 	ldr.w	r2, [ip, #8]
  41161e:	4562      	cmp	r2, ip
  411620:	d066      	beq.n	4116f0 <_free_r+0x148>
  411622:	6851      	ldr	r1, [r2, #4]
  411624:	f021 0103 	bic.w	r1, r1, #3
  411628:	428b      	cmp	r3, r1
  41162a:	d202      	bcs.n	411632 <_free_r+0x8a>
  41162c:	6892      	ldr	r2, [r2, #8]
  41162e:	4594      	cmp	ip, r2
  411630:	d1f7      	bne.n	411622 <_free_r+0x7a>
  411632:	68d3      	ldr	r3, [r2, #12]
  411634:	60e3      	str	r3, [r4, #12]
  411636:	60a2      	str	r2, [r4, #8]
  411638:	609c      	str	r4, [r3, #8]
  41163a:	60d4      	str	r4, [r2, #12]
  41163c:	4630      	mov	r0, r6
  41163e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  411642:	f000 be63 	b.w	41230c <__malloc_unlock>
  411646:	f855 5c08 	ldr.w	r5, [r5, #-8]
  41164a:	1b64      	subs	r4, r4, r5
  41164c:	f10c 0808 	add.w	r8, ip, #8
  411650:	68a0      	ldr	r0, [r4, #8]
  411652:	4540      	cmp	r0, r8
  411654:	442b      	add	r3, r5
  411656:	d043      	beq.n	4116e0 <_free_r+0x138>
  411658:	68e5      	ldr	r5, [r4, #12]
  41165a:	60c5      	str	r5, [r0, #12]
  41165c:	60a8      	str	r0, [r5, #8]
  41165e:	e7c0      	b.n	4115e2 <_free_r+0x3a>
  411660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411664:	08db      	lsrs	r3, r3, #3
  411666:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  41166a:	2501      	movs	r5, #1
  41166c:	f8dc 0004 	ldr.w	r0, [ip, #4]
  411670:	6891      	ldr	r1, [r2, #8]
  411672:	60a1      	str	r1, [r4, #8]
  411674:	109b      	asrs	r3, r3, #2
  411676:	fa05 f303 	lsl.w	r3, r5, r3
  41167a:	4318      	orrs	r0, r3
  41167c:	60e2      	str	r2, [r4, #12]
  41167e:	f8cc 0004 	str.w	r0, [ip, #4]
  411682:	6094      	str	r4, [r2, #8]
  411684:	4630      	mov	r0, r6
  411686:	60cc      	str	r4, [r1, #12]
  411688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  41168c:	f000 be3e 	b.w	41230c <__malloc_unlock>
  411690:	4d29      	ldr	r5, [pc, #164]	; (411738 <_free_r+0x190>)
  411692:	42a8      	cmp	r0, r5
  411694:	d1ad      	bne.n	4115f2 <_free_r+0x4a>
  411696:	f043 0201 	orr.w	r2, r3, #1
  41169a:	f8cc 4014 	str.w	r4, [ip, #20]
  41169e:	f8cc 4010 	str.w	r4, [ip, #16]
  4116a2:	60e0      	str	r0, [r4, #12]
  4116a4:	60a0      	str	r0, [r4, #8]
  4116a6:	6062      	str	r2, [r4, #4]
  4116a8:	50e3      	str	r3, [r4, r3]
  4116aa:	e7c7      	b.n	41163c <_free_r+0x94>
  4116ac:	441f      	add	r7, r3
  4116ae:	07cb      	lsls	r3, r1, #31
  4116b0:	d407      	bmi.n	4116c2 <_free_r+0x11a>
  4116b2:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4116b6:	1ae4      	subs	r4, r4, r3
  4116b8:	441f      	add	r7, r3
  4116ba:	68a2      	ldr	r2, [r4, #8]
  4116bc:	68e3      	ldr	r3, [r4, #12]
  4116be:	60d3      	str	r3, [r2, #12]
  4116c0:	609a      	str	r2, [r3, #8]
  4116c2:	4b1e      	ldr	r3, [pc, #120]	; (41173c <_free_r+0x194>)
  4116c4:	681b      	ldr	r3, [r3, #0]
  4116c6:	f047 0201 	orr.w	r2, r7, #1
  4116ca:	429f      	cmp	r7, r3
  4116cc:	6062      	str	r2, [r4, #4]
  4116ce:	f8cc 4008 	str.w	r4, [ip, #8]
  4116d2:	d3b3      	bcc.n	41163c <_free_r+0x94>
  4116d4:	4b1a      	ldr	r3, [pc, #104]	; (411740 <_free_r+0x198>)
  4116d6:	4630      	mov	r0, r6
  4116d8:	6819      	ldr	r1, [r3, #0]
  4116da:	f7ff ff17 	bl	41150c <_malloc_trim_r>
  4116de:	e7ad      	b.n	41163c <_free_r+0x94>
  4116e0:	2101      	movs	r1, #1
  4116e2:	e77e      	b.n	4115e2 <_free_r+0x3a>
  4116e4:	2a14      	cmp	r2, #20
  4116e6:	d80c      	bhi.n	411702 <_free_r+0x15a>
  4116e8:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  4116ec:	0041      	lsls	r1, r0, #1
  4116ee:	e791      	b.n	411614 <_free_r+0x6c>
  4116f0:	684b      	ldr	r3, [r1, #4]
  4116f2:	1080      	asrs	r0, r0, #2
  4116f4:	2501      	movs	r5, #1
  4116f6:	fa05 f000 	lsl.w	r0, r5, r0
  4116fa:	4303      	orrs	r3, r0
  4116fc:	604b      	str	r3, [r1, #4]
  4116fe:	4613      	mov	r3, r2
  411700:	e798      	b.n	411634 <_free_r+0x8c>
  411702:	2a54      	cmp	r2, #84	; 0x54
  411704:	d803      	bhi.n	41170e <_free_r+0x166>
  411706:	0b18      	lsrs	r0, r3, #12
  411708:	306e      	adds	r0, #110	; 0x6e
  41170a:	0041      	lsls	r1, r0, #1
  41170c:	e782      	b.n	411614 <_free_r+0x6c>
  41170e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  411712:	d803      	bhi.n	41171c <_free_r+0x174>
  411714:	0bd8      	lsrs	r0, r3, #15
  411716:	3077      	adds	r0, #119	; 0x77
  411718:	0041      	lsls	r1, r0, #1
  41171a:	e77b      	b.n	411614 <_free_r+0x6c>
  41171c:	f240 5154 	movw	r1, #1364	; 0x554
  411720:	428a      	cmp	r2, r1
  411722:	d803      	bhi.n	41172c <_free_r+0x184>
  411724:	0c98      	lsrs	r0, r3, #18
  411726:	307c      	adds	r0, #124	; 0x7c
  411728:	0041      	lsls	r1, r0, #1
  41172a:	e773      	b.n	411614 <_free_r+0x6c>
  41172c:	21fc      	movs	r1, #252	; 0xfc
  41172e:	207e      	movs	r0, #126	; 0x7e
  411730:	e770      	b.n	411614 <_free_r+0x6c>
  411732:	bf00      	nop
  411734:	200007fc 	.word	0x200007fc
  411738:	20000804 	.word	0x20000804
  41173c:	20000c04 	.word	0x20000c04
  411740:	20008920 	.word	0x20008920

00411744 <__sfvwrite_r>:
  411744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411748:	6893      	ldr	r3, [r2, #8]
  41174a:	b083      	sub	sp, #12
  41174c:	4616      	mov	r6, r2
  41174e:	4681      	mov	r9, r0
  411750:	460c      	mov	r4, r1
  411752:	b32b      	cbz	r3, 4117a0 <__sfvwrite_r+0x5c>
  411754:	898b      	ldrh	r3, [r1, #12]
  411756:	0719      	lsls	r1, r3, #28
  411758:	d526      	bpl.n	4117a8 <__sfvwrite_r+0x64>
  41175a:	6922      	ldr	r2, [r4, #16]
  41175c:	b322      	cbz	r2, 4117a8 <__sfvwrite_r+0x64>
  41175e:	f003 0202 	and.w	r2, r3, #2
  411762:	b292      	uxth	r2, r2
  411764:	6835      	ldr	r5, [r6, #0]
  411766:	2a00      	cmp	r2, #0
  411768:	d02c      	beq.n	4117c4 <__sfvwrite_r+0x80>
  41176a:	f04f 0a00 	mov.w	sl, #0
  41176e:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 411a58 <__sfvwrite_r+0x314>
  411772:	46d0      	mov	r8, sl
  411774:	45d8      	cmp	r8, fp
  411776:	bf34      	ite	cc
  411778:	4643      	movcc	r3, r8
  41177a:	465b      	movcs	r3, fp
  41177c:	4652      	mov	r2, sl
  41177e:	4648      	mov	r0, r9
  411780:	f1b8 0f00 	cmp.w	r8, #0
  411784:	d04f      	beq.n	411826 <__sfvwrite_r+0xe2>
  411786:	69e1      	ldr	r1, [r4, #28]
  411788:	6a67      	ldr	r7, [r4, #36]	; 0x24
  41178a:	47b8      	blx	r7
  41178c:	2800      	cmp	r0, #0
  41178e:	dd56      	ble.n	41183e <__sfvwrite_r+0xfa>
  411790:	68b3      	ldr	r3, [r6, #8]
  411792:	1a1b      	subs	r3, r3, r0
  411794:	4482      	add	sl, r0
  411796:	ebc0 0808 	rsb	r8, r0, r8
  41179a:	60b3      	str	r3, [r6, #8]
  41179c:	2b00      	cmp	r3, #0
  41179e:	d1e9      	bne.n	411774 <__sfvwrite_r+0x30>
  4117a0:	2000      	movs	r0, #0
  4117a2:	b003      	add	sp, #12
  4117a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4117a8:	4648      	mov	r0, r9
  4117aa:	4621      	mov	r1, r4
  4117ac:	f7fe fcbc 	bl	410128 <__swsetup_r>
  4117b0:	2800      	cmp	r0, #0
  4117b2:	f040 8148 	bne.w	411a46 <__sfvwrite_r+0x302>
  4117b6:	89a3      	ldrh	r3, [r4, #12]
  4117b8:	6835      	ldr	r5, [r6, #0]
  4117ba:	f003 0202 	and.w	r2, r3, #2
  4117be:	b292      	uxth	r2, r2
  4117c0:	2a00      	cmp	r2, #0
  4117c2:	d1d2      	bne.n	41176a <__sfvwrite_r+0x26>
  4117c4:	f013 0a01 	ands.w	sl, r3, #1
  4117c8:	d142      	bne.n	411850 <__sfvwrite_r+0x10c>
  4117ca:	46d0      	mov	r8, sl
  4117cc:	f1b8 0f00 	cmp.w	r8, #0
  4117d0:	d023      	beq.n	41181a <__sfvwrite_r+0xd6>
  4117d2:	059a      	lsls	r2, r3, #22
  4117d4:	68a7      	ldr	r7, [r4, #8]
  4117d6:	d576      	bpl.n	4118c6 <__sfvwrite_r+0x182>
  4117d8:	45b8      	cmp	r8, r7
  4117da:	f0c0 80a4 	bcc.w	411926 <__sfvwrite_r+0x1e2>
  4117de:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4117e2:	f040 80b2 	bne.w	41194a <__sfvwrite_r+0x206>
  4117e6:	6820      	ldr	r0, [r4, #0]
  4117e8:	46bb      	mov	fp, r7
  4117ea:	4651      	mov	r1, sl
  4117ec:	465a      	mov	r2, fp
  4117ee:	f000 fd2b 	bl	412248 <memmove>
  4117f2:	68a2      	ldr	r2, [r4, #8]
  4117f4:	6821      	ldr	r1, [r4, #0]
  4117f6:	1bd2      	subs	r2, r2, r7
  4117f8:	eb01 030b 	add.w	r3, r1, fp
  4117fc:	60a2      	str	r2, [r4, #8]
  4117fe:	6023      	str	r3, [r4, #0]
  411800:	4642      	mov	r2, r8
  411802:	68b3      	ldr	r3, [r6, #8]
  411804:	1a9b      	subs	r3, r3, r2
  411806:	4492      	add	sl, r2
  411808:	ebc2 0808 	rsb	r8, r2, r8
  41180c:	60b3      	str	r3, [r6, #8]
  41180e:	2b00      	cmp	r3, #0
  411810:	d0c6      	beq.n	4117a0 <__sfvwrite_r+0x5c>
  411812:	89a3      	ldrh	r3, [r4, #12]
  411814:	f1b8 0f00 	cmp.w	r8, #0
  411818:	d1db      	bne.n	4117d2 <__sfvwrite_r+0x8e>
  41181a:	f8d5 a000 	ldr.w	sl, [r5]
  41181e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  411822:	3508      	adds	r5, #8
  411824:	e7d2      	b.n	4117cc <__sfvwrite_r+0x88>
  411826:	f8d5 a000 	ldr.w	sl, [r5]
  41182a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  41182e:	3508      	adds	r5, #8
  411830:	e7a0      	b.n	411774 <__sfvwrite_r+0x30>
  411832:	4648      	mov	r0, r9
  411834:	4621      	mov	r1, r4
  411836:	f7ff fd59 	bl	4112ec <_fflush_r>
  41183a:	2800      	cmp	r0, #0
  41183c:	d059      	beq.n	4118f2 <__sfvwrite_r+0x1ae>
  41183e:	89a3      	ldrh	r3, [r4, #12]
  411840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  411844:	f04f 30ff 	mov.w	r0, #4294967295
  411848:	81a3      	strh	r3, [r4, #12]
  41184a:	b003      	add	sp, #12
  41184c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411850:	4692      	mov	sl, r2
  411852:	9201      	str	r2, [sp, #4]
  411854:	4693      	mov	fp, r2
  411856:	4690      	mov	r8, r2
  411858:	f1b8 0f00 	cmp.w	r8, #0
  41185c:	d02b      	beq.n	4118b6 <__sfvwrite_r+0x172>
  41185e:	9f01      	ldr	r7, [sp, #4]
  411860:	2f00      	cmp	r7, #0
  411862:	d064      	beq.n	41192e <__sfvwrite_r+0x1ea>
  411864:	6820      	ldr	r0, [r4, #0]
  411866:	6921      	ldr	r1, [r4, #16]
  411868:	f8d4 c008 	ldr.w	ip, [r4, #8]
  41186c:	6962      	ldr	r2, [r4, #20]
  41186e:	45c2      	cmp	sl, r8
  411870:	bf34      	ite	cc
  411872:	4653      	movcc	r3, sl
  411874:	4643      	movcs	r3, r8
  411876:	4288      	cmp	r0, r1
  411878:	461f      	mov	r7, r3
  41187a:	d903      	bls.n	411884 <__sfvwrite_r+0x140>
  41187c:	4494      	add	ip, r2
  41187e:	4563      	cmp	r3, ip
  411880:	f300 80ae 	bgt.w	4119e0 <__sfvwrite_r+0x29c>
  411884:	4293      	cmp	r3, r2
  411886:	db36      	blt.n	4118f6 <__sfvwrite_r+0x1b2>
  411888:	4613      	mov	r3, r2
  41188a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  41188c:	69e1      	ldr	r1, [r4, #28]
  41188e:	4648      	mov	r0, r9
  411890:	465a      	mov	r2, fp
  411892:	47b8      	blx	r7
  411894:	1e07      	subs	r7, r0, #0
  411896:	ddd2      	ble.n	41183e <__sfvwrite_r+0xfa>
  411898:	ebba 0a07 	subs.w	sl, sl, r7
  41189c:	d03a      	beq.n	411914 <__sfvwrite_r+0x1d0>
  41189e:	68b3      	ldr	r3, [r6, #8]
  4118a0:	1bdb      	subs	r3, r3, r7
  4118a2:	44bb      	add	fp, r7
  4118a4:	ebc7 0808 	rsb	r8, r7, r8
  4118a8:	60b3      	str	r3, [r6, #8]
  4118aa:	2b00      	cmp	r3, #0
  4118ac:	f43f af78 	beq.w	4117a0 <__sfvwrite_r+0x5c>
  4118b0:	f1b8 0f00 	cmp.w	r8, #0
  4118b4:	d1d3      	bne.n	41185e <__sfvwrite_r+0x11a>
  4118b6:	2700      	movs	r7, #0
  4118b8:	f8d5 b000 	ldr.w	fp, [r5]
  4118bc:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4118c0:	9701      	str	r7, [sp, #4]
  4118c2:	3508      	adds	r5, #8
  4118c4:	e7c8      	b.n	411858 <__sfvwrite_r+0x114>
  4118c6:	6820      	ldr	r0, [r4, #0]
  4118c8:	6923      	ldr	r3, [r4, #16]
  4118ca:	4298      	cmp	r0, r3
  4118cc:	d802      	bhi.n	4118d4 <__sfvwrite_r+0x190>
  4118ce:	6963      	ldr	r3, [r4, #20]
  4118d0:	4598      	cmp	r8, r3
  4118d2:	d272      	bcs.n	4119ba <__sfvwrite_r+0x276>
  4118d4:	45b8      	cmp	r8, r7
  4118d6:	bf38      	it	cc
  4118d8:	4647      	movcc	r7, r8
  4118da:	463a      	mov	r2, r7
  4118dc:	4651      	mov	r1, sl
  4118de:	f000 fcb3 	bl	412248 <memmove>
  4118e2:	68a3      	ldr	r3, [r4, #8]
  4118e4:	6822      	ldr	r2, [r4, #0]
  4118e6:	1bdb      	subs	r3, r3, r7
  4118e8:	443a      	add	r2, r7
  4118ea:	60a3      	str	r3, [r4, #8]
  4118ec:	6022      	str	r2, [r4, #0]
  4118ee:	2b00      	cmp	r3, #0
  4118f0:	d09f      	beq.n	411832 <__sfvwrite_r+0xee>
  4118f2:	463a      	mov	r2, r7
  4118f4:	e785      	b.n	411802 <__sfvwrite_r+0xbe>
  4118f6:	461a      	mov	r2, r3
  4118f8:	4659      	mov	r1, fp
  4118fa:	9300      	str	r3, [sp, #0]
  4118fc:	f000 fca4 	bl	412248 <memmove>
  411900:	9b00      	ldr	r3, [sp, #0]
  411902:	68a1      	ldr	r1, [r4, #8]
  411904:	6822      	ldr	r2, [r4, #0]
  411906:	1ac9      	subs	r1, r1, r3
  411908:	ebba 0a07 	subs.w	sl, sl, r7
  41190c:	4413      	add	r3, r2
  41190e:	60a1      	str	r1, [r4, #8]
  411910:	6023      	str	r3, [r4, #0]
  411912:	d1c4      	bne.n	41189e <__sfvwrite_r+0x15a>
  411914:	4648      	mov	r0, r9
  411916:	4621      	mov	r1, r4
  411918:	f7ff fce8 	bl	4112ec <_fflush_r>
  41191c:	2800      	cmp	r0, #0
  41191e:	d18e      	bne.n	41183e <__sfvwrite_r+0xfa>
  411920:	f8cd a004 	str.w	sl, [sp, #4]
  411924:	e7bb      	b.n	41189e <__sfvwrite_r+0x15a>
  411926:	6820      	ldr	r0, [r4, #0]
  411928:	4647      	mov	r7, r8
  41192a:	46c3      	mov	fp, r8
  41192c:	e75d      	b.n	4117ea <__sfvwrite_r+0xa6>
  41192e:	4658      	mov	r0, fp
  411930:	210a      	movs	r1, #10
  411932:	4642      	mov	r2, r8
  411934:	f000 fc40 	bl	4121b8 <memchr>
  411938:	2800      	cmp	r0, #0
  41193a:	d07f      	beq.n	411a3c <__sfvwrite_r+0x2f8>
  41193c:	f100 0a01 	add.w	sl, r0, #1
  411940:	2701      	movs	r7, #1
  411942:	ebcb 0a0a 	rsb	sl, fp, sl
  411946:	9701      	str	r7, [sp, #4]
  411948:	e78c      	b.n	411864 <__sfvwrite_r+0x120>
  41194a:	6822      	ldr	r2, [r4, #0]
  41194c:	6921      	ldr	r1, [r4, #16]
  41194e:	6967      	ldr	r7, [r4, #20]
  411950:	ebc1 0c02 	rsb	ip, r1, r2
  411954:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  411958:	f10c 0201 	add.w	r2, ip, #1
  41195c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  411960:	4442      	add	r2, r8
  411962:	107f      	asrs	r7, r7, #1
  411964:	4297      	cmp	r7, r2
  411966:	bf34      	ite	cc
  411968:	4617      	movcc	r7, r2
  41196a:	463a      	movcs	r2, r7
  41196c:	055b      	lsls	r3, r3, #21
  41196e:	d54f      	bpl.n	411a10 <__sfvwrite_r+0x2cc>
  411970:	4611      	mov	r1, r2
  411972:	4648      	mov	r0, r9
  411974:	f8cd c000 	str.w	ip, [sp]
  411978:	f000 f93e 	bl	411bf8 <_malloc_r>
  41197c:	f8dd c000 	ldr.w	ip, [sp]
  411980:	4683      	mov	fp, r0
  411982:	2800      	cmp	r0, #0
  411984:	d062      	beq.n	411a4c <__sfvwrite_r+0x308>
  411986:	4662      	mov	r2, ip
  411988:	6921      	ldr	r1, [r4, #16]
  41198a:	f8cd c000 	str.w	ip, [sp]
  41198e:	f7fb f867 	bl	40ca60 <memcpy>
  411992:	89a2      	ldrh	r2, [r4, #12]
  411994:	f8dd c000 	ldr.w	ip, [sp]
  411998:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  41199c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4119a0:	81a2      	strh	r2, [r4, #12]
  4119a2:	eb0b 000c 	add.w	r0, fp, ip
  4119a6:	ebcc 0207 	rsb	r2, ip, r7
  4119aa:	f8c4 b010 	str.w	fp, [r4, #16]
  4119ae:	6167      	str	r7, [r4, #20]
  4119b0:	6020      	str	r0, [r4, #0]
  4119b2:	60a2      	str	r2, [r4, #8]
  4119b4:	4647      	mov	r7, r8
  4119b6:	46c3      	mov	fp, r8
  4119b8:	e717      	b.n	4117ea <__sfvwrite_r+0xa6>
  4119ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  4119be:	4590      	cmp	r8, r2
  4119c0:	bf38      	it	cc
  4119c2:	4642      	movcc	r2, r8
  4119c4:	fb92 f2f3 	sdiv	r2, r2, r3
  4119c8:	fb02 f303 	mul.w	r3, r2, r3
  4119cc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4119ce:	69e1      	ldr	r1, [r4, #28]
  4119d0:	4648      	mov	r0, r9
  4119d2:	4652      	mov	r2, sl
  4119d4:	47b8      	blx	r7
  4119d6:	2800      	cmp	r0, #0
  4119d8:	f77f af31 	ble.w	41183e <__sfvwrite_r+0xfa>
  4119dc:	4602      	mov	r2, r0
  4119de:	e710      	b.n	411802 <__sfvwrite_r+0xbe>
  4119e0:	4662      	mov	r2, ip
  4119e2:	4659      	mov	r1, fp
  4119e4:	f8cd c000 	str.w	ip, [sp]
  4119e8:	f000 fc2e 	bl	412248 <memmove>
  4119ec:	f8dd c000 	ldr.w	ip, [sp]
  4119f0:	6823      	ldr	r3, [r4, #0]
  4119f2:	4463      	add	r3, ip
  4119f4:	6023      	str	r3, [r4, #0]
  4119f6:	4648      	mov	r0, r9
  4119f8:	4621      	mov	r1, r4
  4119fa:	f8cd c000 	str.w	ip, [sp]
  4119fe:	f7ff fc75 	bl	4112ec <_fflush_r>
  411a02:	f8dd c000 	ldr.w	ip, [sp]
  411a06:	2800      	cmp	r0, #0
  411a08:	f47f af19 	bne.w	41183e <__sfvwrite_r+0xfa>
  411a0c:	4667      	mov	r7, ip
  411a0e:	e743      	b.n	411898 <__sfvwrite_r+0x154>
  411a10:	4648      	mov	r0, r9
  411a12:	f8cd c000 	str.w	ip, [sp]
  411a16:	f001 f8db 	bl	412bd0 <_realloc_r>
  411a1a:	f8dd c000 	ldr.w	ip, [sp]
  411a1e:	4683      	mov	fp, r0
  411a20:	2800      	cmp	r0, #0
  411a22:	d1be      	bne.n	4119a2 <__sfvwrite_r+0x25e>
  411a24:	4648      	mov	r0, r9
  411a26:	6921      	ldr	r1, [r4, #16]
  411a28:	f7ff fdbe 	bl	4115a8 <_free_r>
  411a2c:	89a3      	ldrh	r3, [r4, #12]
  411a2e:	220c      	movs	r2, #12
  411a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  411a34:	b29b      	uxth	r3, r3
  411a36:	f8c9 2000 	str.w	r2, [r9]
  411a3a:	e701      	b.n	411840 <__sfvwrite_r+0xfc>
  411a3c:	2701      	movs	r7, #1
  411a3e:	f108 0a01 	add.w	sl, r8, #1
  411a42:	9701      	str	r7, [sp, #4]
  411a44:	e70e      	b.n	411864 <__sfvwrite_r+0x120>
  411a46:	f04f 30ff 	mov.w	r0, #4294967295
  411a4a:	e6aa      	b.n	4117a2 <__sfvwrite_r+0x5e>
  411a4c:	230c      	movs	r3, #12
  411a4e:	f8c9 3000 	str.w	r3, [r9]
  411a52:	89a3      	ldrh	r3, [r4, #12]
  411a54:	e6f4      	b.n	411840 <__sfvwrite_r+0xfc>
  411a56:	bf00      	nop
  411a58:	7ffffc00 	.word	0x7ffffc00

00411a5c <_fwalk>:
  411a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411a60:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  411a64:	4688      	mov	r8, r1
  411a66:	d01a      	beq.n	411a9e <_fwalk+0x42>
  411a68:	2600      	movs	r6, #0
  411a6a:	687d      	ldr	r5, [r7, #4]
  411a6c:	68bc      	ldr	r4, [r7, #8]
  411a6e:	3d01      	subs	r5, #1
  411a70:	d40f      	bmi.n	411a92 <_fwalk+0x36>
  411a72:	89a3      	ldrh	r3, [r4, #12]
  411a74:	2b01      	cmp	r3, #1
  411a76:	f105 35ff 	add.w	r5, r5, #4294967295
  411a7a:	d906      	bls.n	411a8a <_fwalk+0x2e>
  411a7c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  411a80:	3301      	adds	r3, #1
  411a82:	4620      	mov	r0, r4
  411a84:	d001      	beq.n	411a8a <_fwalk+0x2e>
  411a86:	47c0      	blx	r8
  411a88:	4306      	orrs	r6, r0
  411a8a:	1c6b      	adds	r3, r5, #1
  411a8c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  411a90:	d1ef      	bne.n	411a72 <_fwalk+0x16>
  411a92:	683f      	ldr	r7, [r7, #0]
  411a94:	2f00      	cmp	r7, #0
  411a96:	d1e8      	bne.n	411a6a <_fwalk+0xe>
  411a98:	4630      	mov	r0, r6
  411a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411a9e:	463e      	mov	r6, r7
  411aa0:	4630      	mov	r0, r6
  411aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411aa6:	bf00      	nop

00411aa8 <iswspace>:
  411aa8:	28ff      	cmp	r0, #255	; 0xff
  411aaa:	d807      	bhi.n	411abc <iswspace+0x14>
  411aac:	4b04      	ldr	r3, [pc, #16]	; (411ac0 <iswspace+0x18>)
  411aae:	681b      	ldr	r3, [r3, #0]
  411ab0:	4418      	add	r0, r3
  411ab2:	7840      	ldrb	r0, [r0, #1]
  411ab4:	f000 0008 	and.w	r0, r0, #8
  411ab8:	b2c0      	uxtb	r0, r0
  411aba:	4770      	bx	lr
  411abc:	2000      	movs	r0, #0
  411abe:	4770      	bx	lr
  411ac0:	2000079c 	.word	0x2000079c

00411ac4 <__locale_charset>:
  411ac4:	4800      	ldr	r0, [pc, #0]	; (411ac8 <__locale_charset+0x4>)
  411ac6:	4770      	bx	lr
  411ac8:	200007d8 	.word	0x200007d8

00411acc <__locale_mb_cur_max>:
  411acc:	4b01      	ldr	r3, [pc, #4]	; (411ad4 <__locale_mb_cur_max+0x8>)
  411ace:	6818      	ldr	r0, [r3, #0]
  411ad0:	4770      	bx	lr
  411ad2:	bf00      	nop
  411ad4:	200007f8 	.word	0x200007f8

00411ad8 <_localeconv_r>:
  411ad8:	4800      	ldr	r0, [pc, #0]	; (411adc <_localeconv_r+0x4>)
  411ada:	4770      	bx	lr
  411adc:	200007a0 	.word	0x200007a0

00411ae0 <_lseek_r>:
  411ae0:	b570      	push	{r4, r5, r6, lr}
  411ae2:	4c08      	ldr	r4, [pc, #32]	; (411b04 <_lseek_r+0x24>)
  411ae4:	4606      	mov	r6, r0
  411ae6:	2500      	movs	r5, #0
  411ae8:	4608      	mov	r0, r1
  411aea:	4611      	mov	r1, r2
  411aec:	461a      	mov	r2, r3
  411aee:	6025      	str	r5, [r4, #0]
  411af0:	f7fa fbd0 	bl	40c294 <_lseek>
  411af4:	1c43      	adds	r3, r0, #1
  411af6:	d000      	beq.n	411afa <_lseek_r+0x1a>
  411af8:	bd70      	pop	{r4, r5, r6, pc}
  411afa:	6823      	ldr	r3, [r4, #0]
  411afc:	2b00      	cmp	r3, #0
  411afe:	d0fb      	beq.n	411af8 <_lseek_r+0x18>
  411b00:	6033      	str	r3, [r6, #0]
  411b02:	bd70      	pop	{r4, r5, r6, pc}
  411b04:	200099d0 	.word	0x200099d0

00411b08 <__smakebuf_r>:
  411b08:	b5f0      	push	{r4, r5, r6, r7, lr}
  411b0a:	898b      	ldrh	r3, [r1, #12]
  411b0c:	b29a      	uxth	r2, r3
  411b0e:	0796      	lsls	r6, r2, #30
  411b10:	b091      	sub	sp, #68	; 0x44
  411b12:	460c      	mov	r4, r1
  411b14:	4605      	mov	r5, r0
  411b16:	d437      	bmi.n	411b88 <__smakebuf_r+0x80>
  411b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  411b1c:	2900      	cmp	r1, #0
  411b1e:	db17      	blt.n	411b50 <__smakebuf_r+0x48>
  411b20:	aa01      	add	r2, sp, #4
  411b22:	f002 ffd1 	bl	414ac8 <_fstat_r>
  411b26:	2800      	cmp	r0, #0
  411b28:	db10      	blt.n	411b4c <__smakebuf_r+0x44>
  411b2a:	9b02      	ldr	r3, [sp, #8]
  411b2c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  411b30:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
  411b34:	424f      	negs	r7, r1
  411b36:	414f      	adcs	r7, r1
  411b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  411b3c:	d02c      	beq.n	411b98 <__smakebuf_r+0x90>
  411b3e:	89a3      	ldrh	r3, [r4, #12]
  411b40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  411b44:	81a3      	strh	r3, [r4, #12]
  411b46:	f44f 6680 	mov.w	r6, #1024	; 0x400
  411b4a:	e00b      	b.n	411b64 <__smakebuf_r+0x5c>
  411b4c:	89a3      	ldrh	r3, [r4, #12]
  411b4e:	b29a      	uxth	r2, r3
  411b50:	f012 0f80 	tst.w	r2, #128	; 0x80
  411b54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  411b58:	81a3      	strh	r3, [r4, #12]
  411b5a:	bf14      	ite	ne
  411b5c:	2640      	movne	r6, #64	; 0x40
  411b5e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  411b62:	2700      	movs	r7, #0
  411b64:	4628      	mov	r0, r5
  411b66:	4631      	mov	r1, r6
  411b68:	f000 f846 	bl	411bf8 <_malloc_r>
  411b6c:	89a3      	ldrh	r3, [r4, #12]
  411b6e:	2800      	cmp	r0, #0
  411b70:	d029      	beq.n	411bc6 <__smakebuf_r+0xbe>
  411b72:	4a1b      	ldr	r2, [pc, #108]	; (411be0 <__smakebuf_r+0xd8>)
  411b74:	63ea      	str	r2, [r5, #60]	; 0x3c
  411b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  411b7a:	81a3      	strh	r3, [r4, #12]
  411b7c:	6020      	str	r0, [r4, #0]
  411b7e:	6120      	str	r0, [r4, #16]
  411b80:	6166      	str	r6, [r4, #20]
  411b82:	b9a7      	cbnz	r7, 411bae <__smakebuf_r+0xa6>
  411b84:	b011      	add	sp, #68	; 0x44
  411b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411b88:	f101 0343 	add.w	r3, r1, #67	; 0x43
  411b8c:	2201      	movs	r2, #1
  411b8e:	600b      	str	r3, [r1, #0]
  411b90:	610b      	str	r3, [r1, #16]
  411b92:	614a      	str	r2, [r1, #20]
  411b94:	b011      	add	sp, #68	; 0x44
  411b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411b98:	4a12      	ldr	r2, [pc, #72]	; (411be4 <__smakebuf_r+0xdc>)
  411b9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  411b9c:	4293      	cmp	r3, r2
  411b9e:	d1ce      	bne.n	411b3e <__smakebuf_r+0x36>
  411ba0:	89a3      	ldrh	r3, [r4, #12]
  411ba2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  411ba6:	4333      	orrs	r3, r6
  411ba8:	81a3      	strh	r3, [r4, #12]
  411baa:	64e6      	str	r6, [r4, #76]	; 0x4c
  411bac:	e7da      	b.n	411b64 <__smakebuf_r+0x5c>
  411bae:	4628      	mov	r0, r5
  411bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  411bb4:	f003 fb4e 	bl	415254 <_isatty_r>
  411bb8:	2800      	cmp	r0, #0
  411bba:	d0e3      	beq.n	411b84 <__smakebuf_r+0x7c>
  411bbc:	89a3      	ldrh	r3, [r4, #12]
  411bbe:	f043 0301 	orr.w	r3, r3, #1
  411bc2:	81a3      	strh	r3, [r4, #12]
  411bc4:	e7de      	b.n	411b84 <__smakebuf_r+0x7c>
  411bc6:	059a      	lsls	r2, r3, #22
  411bc8:	d4dc      	bmi.n	411b84 <__smakebuf_r+0x7c>
  411bca:	f104 0243 	add.w	r2, r4, #67	; 0x43
  411bce:	f043 0302 	orr.w	r3, r3, #2
  411bd2:	2101      	movs	r1, #1
  411bd4:	81a3      	strh	r3, [r4, #12]
  411bd6:	6022      	str	r2, [r4, #0]
  411bd8:	6122      	str	r2, [r4, #16]
  411bda:	6161      	str	r1, [r4, #20]
  411bdc:	e7d2      	b.n	411b84 <__smakebuf_r+0x7c>
  411bde:	bf00      	nop
  411be0:	00411319 	.word	0x00411319
  411be4:	0040cea9 	.word	0x0040cea9

00411be8 <malloc>:
  411be8:	4b02      	ldr	r3, [pc, #8]	; (411bf4 <malloc+0xc>)
  411bea:	4601      	mov	r1, r0
  411bec:	6818      	ldr	r0, [r3, #0]
  411bee:	f000 b803 	b.w	411bf8 <_malloc_r>
  411bf2:	bf00      	nop
  411bf4:	20000798 	.word	0x20000798

00411bf8 <_malloc_r>:
  411bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411bfc:	f101 050b 	add.w	r5, r1, #11
  411c00:	2d16      	cmp	r5, #22
  411c02:	b083      	sub	sp, #12
  411c04:	4606      	mov	r6, r0
  411c06:	d927      	bls.n	411c58 <_malloc_r+0x60>
  411c08:	f035 0507 	bics.w	r5, r5, #7
  411c0c:	d427      	bmi.n	411c5e <_malloc_r+0x66>
  411c0e:	42a9      	cmp	r1, r5
  411c10:	d825      	bhi.n	411c5e <_malloc_r+0x66>
  411c12:	4630      	mov	r0, r6
  411c14:	f000 fb78 	bl	412308 <__malloc_lock>
  411c18:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  411c1c:	d226      	bcs.n	411c6c <_malloc_r+0x74>
  411c1e:	4fc1      	ldr	r7, [pc, #772]	; (411f24 <_malloc_r+0x32c>)
  411c20:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  411c24:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  411c28:	68dc      	ldr	r4, [r3, #12]
  411c2a:	429c      	cmp	r4, r3
  411c2c:	f000 81d2 	beq.w	411fd4 <_malloc_r+0x3dc>
  411c30:	6863      	ldr	r3, [r4, #4]
  411c32:	68e2      	ldr	r2, [r4, #12]
  411c34:	68a1      	ldr	r1, [r4, #8]
  411c36:	f023 0303 	bic.w	r3, r3, #3
  411c3a:	4423      	add	r3, r4
  411c3c:	4630      	mov	r0, r6
  411c3e:	685d      	ldr	r5, [r3, #4]
  411c40:	60ca      	str	r2, [r1, #12]
  411c42:	f045 0501 	orr.w	r5, r5, #1
  411c46:	6091      	str	r1, [r2, #8]
  411c48:	605d      	str	r5, [r3, #4]
  411c4a:	f000 fb5f 	bl	41230c <__malloc_unlock>
  411c4e:	3408      	adds	r4, #8
  411c50:	4620      	mov	r0, r4
  411c52:	b003      	add	sp, #12
  411c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411c58:	2510      	movs	r5, #16
  411c5a:	42a9      	cmp	r1, r5
  411c5c:	d9d9      	bls.n	411c12 <_malloc_r+0x1a>
  411c5e:	2400      	movs	r4, #0
  411c60:	230c      	movs	r3, #12
  411c62:	4620      	mov	r0, r4
  411c64:	6033      	str	r3, [r6, #0]
  411c66:	b003      	add	sp, #12
  411c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411c6c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  411c70:	f000 808a 	beq.w	411d88 <_malloc_r+0x190>
  411c74:	f1bc 0f04 	cmp.w	ip, #4
  411c78:	f200 8160 	bhi.w	411f3c <_malloc_r+0x344>
  411c7c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  411c80:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  411c84:	ea4f 014c 	mov.w	r1, ip, lsl #1
  411c88:	4fa6      	ldr	r7, [pc, #664]	; (411f24 <_malloc_r+0x32c>)
  411c8a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  411c8e:	68cc      	ldr	r4, [r1, #12]
  411c90:	42a1      	cmp	r1, r4
  411c92:	d105      	bne.n	411ca0 <_malloc_r+0xa8>
  411c94:	e00c      	b.n	411cb0 <_malloc_r+0xb8>
  411c96:	2b00      	cmp	r3, #0
  411c98:	da7a      	bge.n	411d90 <_malloc_r+0x198>
  411c9a:	68e4      	ldr	r4, [r4, #12]
  411c9c:	42a1      	cmp	r1, r4
  411c9e:	d007      	beq.n	411cb0 <_malloc_r+0xb8>
  411ca0:	6862      	ldr	r2, [r4, #4]
  411ca2:	f022 0203 	bic.w	r2, r2, #3
  411ca6:	1b53      	subs	r3, r2, r5
  411ca8:	2b0f      	cmp	r3, #15
  411caa:	ddf4      	ble.n	411c96 <_malloc_r+0x9e>
  411cac:	f10c 3cff 	add.w	ip, ip, #4294967295
  411cb0:	f10c 0c01 	add.w	ip, ip, #1
  411cb4:	4b9b      	ldr	r3, [pc, #620]	; (411f24 <_malloc_r+0x32c>)
  411cb6:	693c      	ldr	r4, [r7, #16]
  411cb8:	f103 0e08 	add.w	lr, r3, #8
  411cbc:	4574      	cmp	r4, lr
  411cbe:	f000 817e 	beq.w	411fbe <_malloc_r+0x3c6>
  411cc2:	6861      	ldr	r1, [r4, #4]
  411cc4:	f021 0103 	bic.w	r1, r1, #3
  411cc8:	1b4a      	subs	r2, r1, r5
  411cca:	2a0f      	cmp	r2, #15
  411ccc:	f300 8164 	bgt.w	411f98 <_malloc_r+0x3a0>
  411cd0:	2a00      	cmp	r2, #0
  411cd2:	f8c3 e014 	str.w	lr, [r3, #20]
  411cd6:	f8c3 e010 	str.w	lr, [r3, #16]
  411cda:	da6a      	bge.n	411db2 <_malloc_r+0x1ba>
  411cdc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  411ce0:	f080 813a 	bcs.w	411f58 <_malloc_r+0x360>
  411ce4:	08c9      	lsrs	r1, r1, #3
  411ce6:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  411cea:	ea4f 08a1 	mov.w	r8, r1, asr #2
  411cee:	685a      	ldr	r2, [r3, #4]
  411cf0:	6881      	ldr	r1, [r0, #8]
  411cf2:	60a1      	str	r1, [r4, #8]
  411cf4:	f04f 0901 	mov.w	r9, #1
  411cf8:	fa09 f808 	lsl.w	r8, r9, r8
  411cfc:	ea48 0202 	orr.w	r2, r8, r2
  411d00:	60e0      	str	r0, [r4, #12]
  411d02:	605a      	str	r2, [r3, #4]
  411d04:	6084      	str	r4, [r0, #8]
  411d06:	60cc      	str	r4, [r1, #12]
  411d08:	ea4f 03ac 	mov.w	r3, ip, asr #2
  411d0c:	2001      	movs	r0, #1
  411d0e:	4098      	lsls	r0, r3
  411d10:	4290      	cmp	r0, r2
  411d12:	d85b      	bhi.n	411dcc <_malloc_r+0x1d4>
  411d14:	4202      	tst	r2, r0
  411d16:	d106      	bne.n	411d26 <_malloc_r+0x12e>
  411d18:	f02c 0c03 	bic.w	ip, ip, #3
  411d1c:	0040      	lsls	r0, r0, #1
  411d1e:	4202      	tst	r2, r0
  411d20:	f10c 0c04 	add.w	ip, ip, #4
  411d24:	d0fa      	beq.n	411d1c <_malloc_r+0x124>
  411d26:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  411d2a:	4644      	mov	r4, r8
  411d2c:	46e1      	mov	r9, ip
  411d2e:	68e3      	ldr	r3, [r4, #12]
  411d30:	429c      	cmp	r4, r3
  411d32:	d107      	bne.n	411d44 <_malloc_r+0x14c>
  411d34:	e145      	b.n	411fc2 <_malloc_r+0x3ca>
  411d36:	2a00      	cmp	r2, #0
  411d38:	f280 8156 	bge.w	411fe8 <_malloc_r+0x3f0>
  411d3c:	68db      	ldr	r3, [r3, #12]
  411d3e:	429c      	cmp	r4, r3
  411d40:	f000 813f 	beq.w	411fc2 <_malloc_r+0x3ca>
  411d44:	6859      	ldr	r1, [r3, #4]
  411d46:	f021 0103 	bic.w	r1, r1, #3
  411d4a:	1b4a      	subs	r2, r1, r5
  411d4c:	2a0f      	cmp	r2, #15
  411d4e:	ddf2      	ble.n	411d36 <_malloc_r+0x13e>
  411d50:	461c      	mov	r4, r3
  411d52:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  411d56:	f854 8f08 	ldr.w	r8, [r4, #8]!
  411d5a:	1959      	adds	r1, r3, r5
  411d5c:	f045 0901 	orr.w	r9, r5, #1
  411d60:	f042 0501 	orr.w	r5, r2, #1
  411d64:	f8c3 9004 	str.w	r9, [r3, #4]
  411d68:	4630      	mov	r0, r6
  411d6a:	f8c8 c00c 	str.w	ip, [r8, #12]
  411d6e:	f8cc 8008 	str.w	r8, [ip, #8]
  411d72:	6179      	str	r1, [r7, #20]
  411d74:	6139      	str	r1, [r7, #16]
  411d76:	f8c1 e00c 	str.w	lr, [r1, #12]
  411d7a:	f8c1 e008 	str.w	lr, [r1, #8]
  411d7e:	604d      	str	r5, [r1, #4]
  411d80:	508a      	str	r2, [r1, r2]
  411d82:	f000 fac3 	bl	41230c <__malloc_unlock>
  411d86:	e763      	b.n	411c50 <_malloc_r+0x58>
  411d88:	217e      	movs	r1, #126	; 0x7e
  411d8a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  411d8e:	e77b      	b.n	411c88 <_malloc_r+0x90>
  411d90:	4422      	add	r2, r4
  411d92:	68e3      	ldr	r3, [r4, #12]
  411d94:	6850      	ldr	r0, [r2, #4]
  411d96:	68a1      	ldr	r1, [r4, #8]
  411d98:	f040 0501 	orr.w	r5, r0, #1
  411d9c:	60cb      	str	r3, [r1, #12]
  411d9e:	4630      	mov	r0, r6
  411da0:	6099      	str	r1, [r3, #8]
  411da2:	6055      	str	r5, [r2, #4]
  411da4:	f000 fab2 	bl	41230c <__malloc_unlock>
  411da8:	3408      	adds	r4, #8
  411daa:	4620      	mov	r0, r4
  411dac:	b003      	add	sp, #12
  411dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411db2:	4421      	add	r1, r4
  411db4:	4630      	mov	r0, r6
  411db6:	684b      	ldr	r3, [r1, #4]
  411db8:	f043 0301 	orr.w	r3, r3, #1
  411dbc:	604b      	str	r3, [r1, #4]
  411dbe:	f000 faa5 	bl	41230c <__malloc_unlock>
  411dc2:	3408      	adds	r4, #8
  411dc4:	4620      	mov	r0, r4
  411dc6:	b003      	add	sp, #12
  411dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411dcc:	68bc      	ldr	r4, [r7, #8]
  411dce:	6863      	ldr	r3, [r4, #4]
  411dd0:	f023 0903 	bic.w	r9, r3, #3
  411dd4:	45a9      	cmp	r9, r5
  411dd6:	d304      	bcc.n	411de2 <_malloc_r+0x1ea>
  411dd8:	ebc5 0309 	rsb	r3, r5, r9
  411ddc:	2b0f      	cmp	r3, #15
  411dde:	f300 8091 	bgt.w	411f04 <_malloc_r+0x30c>
  411de2:	4b51      	ldr	r3, [pc, #324]	; (411f28 <_malloc_r+0x330>)
  411de4:	4a51      	ldr	r2, [pc, #324]	; (411f2c <_malloc_r+0x334>)
  411de6:	6819      	ldr	r1, [r3, #0]
  411de8:	6813      	ldr	r3, [r2, #0]
  411dea:	3301      	adds	r3, #1
  411dec:	eb05 0a01 	add.w	sl, r5, r1
  411df0:	eb04 0b09 	add.w	fp, r4, r9
  411df4:	f000 8161 	beq.w	4120ba <_malloc_r+0x4c2>
  411df8:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  411dfc:	f10a 0a0f 	add.w	sl, sl, #15
  411e00:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  411e04:	f02a 0a0f 	bic.w	sl, sl, #15
  411e08:	4630      	mov	r0, r6
  411e0a:	4651      	mov	r1, sl
  411e0c:	9201      	str	r2, [sp, #4]
  411e0e:	f001 f8ed 	bl	412fec <_sbrk_r>
  411e12:	f1b0 3fff 	cmp.w	r0, #4294967295
  411e16:	4680      	mov	r8, r0
  411e18:	9a01      	ldr	r2, [sp, #4]
  411e1a:	f000 8100 	beq.w	41201e <_malloc_r+0x426>
  411e1e:	4583      	cmp	fp, r0
  411e20:	f200 80fa 	bhi.w	412018 <_malloc_r+0x420>
  411e24:	f8df c110 	ldr.w	ip, [pc, #272]	; 411f38 <_malloc_r+0x340>
  411e28:	f8dc 3000 	ldr.w	r3, [ip]
  411e2c:	45c3      	cmp	fp, r8
  411e2e:	4453      	add	r3, sl
  411e30:	f8cc 3000 	str.w	r3, [ip]
  411e34:	f000 814a 	beq.w	4120cc <_malloc_r+0x4d4>
  411e38:	6812      	ldr	r2, [r2, #0]
  411e3a:	493c      	ldr	r1, [pc, #240]	; (411f2c <_malloc_r+0x334>)
  411e3c:	3201      	adds	r2, #1
  411e3e:	bf1b      	ittet	ne
  411e40:	ebcb 0b08 	rsbne	fp, fp, r8
  411e44:	445b      	addne	r3, fp
  411e46:	f8c1 8000 	streq.w	r8, [r1]
  411e4a:	f8cc 3000 	strne.w	r3, [ip]
  411e4e:	f018 0307 	ands.w	r3, r8, #7
  411e52:	f000 8113 	beq.w	41207c <_malloc_r+0x484>
  411e56:	f1c3 0208 	rsb	r2, r3, #8
  411e5a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  411e5e:	4490      	add	r8, r2
  411e60:	3308      	adds	r3, #8
  411e62:	44c2      	add	sl, r8
  411e64:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  411e68:	ebca 0a03 	rsb	sl, sl, r3
  411e6c:	4651      	mov	r1, sl
  411e6e:	4630      	mov	r0, r6
  411e70:	f8cd c004 	str.w	ip, [sp, #4]
  411e74:	f001 f8ba 	bl	412fec <_sbrk_r>
  411e78:	1c43      	adds	r3, r0, #1
  411e7a:	f8dd c004 	ldr.w	ip, [sp, #4]
  411e7e:	f000 8135 	beq.w	4120ec <_malloc_r+0x4f4>
  411e82:	ebc8 0200 	rsb	r2, r8, r0
  411e86:	4452      	add	r2, sl
  411e88:	f042 0201 	orr.w	r2, r2, #1
  411e8c:	f8dc 3000 	ldr.w	r3, [ip]
  411e90:	f8c7 8008 	str.w	r8, [r7, #8]
  411e94:	4453      	add	r3, sl
  411e96:	42bc      	cmp	r4, r7
  411e98:	f8c8 2004 	str.w	r2, [r8, #4]
  411e9c:	f8cc 3000 	str.w	r3, [ip]
  411ea0:	f8df a094 	ldr.w	sl, [pc, #148]	; 411f38 <_malloc_r+0x340>
  411ea4:	d015      	beq.n	411ed2 <_malloc_r+0x2da>
  411ea6:	f1b9 0f0f 	cmp.w	r9, #15
  411eaa:	f240 80ea 	bls.w	412082 <_malloc_r+0x48a>
  411eae:	6861      	ldr	r1, [r4, #4]
  411eb0:	f1a9 020c 	sub.w	r2, r9, #12
  411eb4:	f022 0207 	bic.w	r2, r2, #7
  411eb8:	f001 0e01 	and.w	lr, r1, #1
  411ebc:	18a1      	adds	r1, r4, r2
  411ebe:	2005      	movs	r0, #5
  411ec0:	ea42 0e0e 	orr.w	lr, r2, lr
  411ec4:	2a0f      	cmp	r2, #15
  411ec6:	f8c4 e004 	str.w	lr, [r4, #4]
  411eca:	6048      	str	r0, [r1, #4]
  411ecc:	6088      	str	r0, [r1, #8]
  411ece:	f200 8111 	bhi.w	4120f4 <_malloc_r+0x4fc>
  411ed2:	4a17      	ldr	r2, [pc, #92]	; (411f30 <_malloc_r+0x338>)
  411ed4:	68bc      	ldr	r4, [r7, #8]
  411ed6:	6811      	ldr	r1, [r2, #0]
  411ed8:	428b      	cmp	r3, r1
  411eda:	bf88      	it	hi
  411edc:	6013      	strhi	r3, [r2, #0]
  411ede:	4a15      	ldr	r2, [pc, #84]	; (411f34 <_malloc_r+0x33c>)
  411ee0:	6811      	ldr	r1, [r2, #0]
  411ee2:	428b      	cmp	r3, r1
  411ee4:	bf88      	it	hi
  411ee6:	6013      	strhi	r3, [r2, #0]
  411ee8:	6862      	ldr	r2, [r4, #4]
  411eea:	f022 0203 	bic.w	r2, r2, #3
  411eee:	4295      	cmp	r5, r2
  411ef0:	ebc5 0302 	rsb	r3, r5, r2
  411ef4:	d801      	bhi.n	411efa <_malloc_r+0x302>
  411ef6:	2b0f      	cmp	r3, #15
  411ef8:	dc04      	bgt.n	411f04 <_malloc_r+0x30c>
  411efa:	4630      	mov	r0, r6
  411efc:	f000 fa06 	bl	41230c <__malloc_unlock>
  411f00:	2400      	movs	r4, #0
  411f02:	e6a5      	b.n	411c50 <_malloc_r+0x58>
  411f04:	1962      	adds	r2, r4, r5
  411f06:	f043 0301 	orr.w	r3, r3, #1
  411f0a:	f045 0501 	orr.w	r5, r5, #1
  411f0e:	6065      	str	r5, [r4, #4]
  411f10:	4630      	mov	r0, r6
  411f12:	60ba      	str	r2, [r7, #8]
  411f14:	6053      	str	r3, [r2, #4]
  411f16:	f000 f9f9 	bl	41230c <__malloc_unlock>
  411f1a:	3408      	adds	r4, #8
  411f1c:	4620      	mov	r0, r4
  411f1e:	b003      	add	sp, #12
  411f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411f24:	200007fc 	.word	0x200007fc
  411f28:	20008920 	.word	0x20008920
  411f2c:	20000c08 	.word	0x20000c08
  411f30:	2000891c 	.word	0x2000891c
  411f34:	20008918 	.word	0x20008918
  411f38:	20008924 	.word	0x20008924
  411f3c:	f1bc 0f14 	cmp.w	ip, #20
  411f40:	d961      	bls.n	412006 <_malloc_r+0x40e>
  411f42:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  411f46:	f200 808f 	bhi.w	412068 <_malloc_r+0x470>
  411f4a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  411f4e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  411f52:	ea4f 014c 	mov.w	r1, ip, lsl #1
  411f56:	e697      	b.n	411c88 <_malloc_r+0x90>
  411f58:	0a4b      	lsrs	r3, r1, #9
  411f5a:	2b04      	cmp	r3, #4
  411f5c:	d958      	bls.n	412010 <_malloc_r+0x418>
  411f5e:	2b14      	cmp	r3, #20
  411f60:	f200 80ae 	bhi.w	4120c0 <_malloc_r+0x4c8>
  411f64:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  411f68:	0050      	lsls	r0, r2, #1
  411f6a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  411f6e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 41212c <_malloc_r+0x534>
  411f72:	6883      	ldr	r3, [r0, #8]
  411f74:	4283      	cmp	r3, r0
  411f76:	f000 808a 	beq.w	41208e <_malloc_r+0x496>
  411f7a:	685a      	ldr	r2, [r3, #4]
  411f7c:	f022 0203 	bic.w	r2, r2, #3
  411f80:	4291      	cmp	r1, r2
  411f82:	d202      	bcs.n	411f8a <_malloc_r+0x392>
  411f84:	689b      	ldr	r3, [r3, #8]
  411f86:	4298      	cmp	r0, r3
  411f88:	d1f7      	bne.n	411f7a <_malloc_r+0x382>
  411f8a:	68d9      	ldr	r1, [r3, #12]
  411f8c:	687a      	ldr	r2, [r7, #4]
  411f8e:	60e1      	str	r1, [r4, #12]
  411f90:	60a3      	str	r3, [r4, #8]
  411f92:	608c      	str	r4, [r1, #8]
  411f94:	60dc      	str	r4, [r3, #12]
  411f96:	e6b7      	b.n	411d08 <_malloc_r+0x110>
  411f98:	1961      	adds	r1, r4, r5
  411f9a:	f042 0701 	orr.w	r7, r2, #1
  411f9e:	f045 0501 	orr.w	r5, r5, #1
  411fa2:	6065      	str	r5, [r4, #4]
  411fa4:	4630      	mov	r0, r6
  411fa6:	6159      	str	r1, [r3, #20]
  411fa8:	6119      	str	r1, [r3, #16]
  411faa:	f8c1 e00c 	str.w	lr, [r1, #12]
  411fae:	f8c1 e008 	str.w	lr, [r1, #8]
  411fb2:	604f      	str	r7, [r1, #4]
  411fb4:	508a      	str	r2, [r1, r2]
  411fb6:	3408      	adds	r4, #8
  411fb8:	f000 f9a8 	bl	41230c <__malloc_unlock>
  411fbc:	e648      	b.n	411c50 <_malloc_r+0x58>
  411fbe:	685a      	ldr	r2, [r3, #4]
  411fc0:	e6a2      	b.n	411d08 <_malloc_r+0x110>
  411fc2:	f109 0901 	add.w	r9, r9, #1
  411fc6:	f019 0f03 	tst.w	r9, #3
  411fca:	f104 0408 	add.w	r4, r4, #8
  411fce:	f47f aeae 	bne.w	411d2e <_malloc_r+0x136>
  411fd2:	e02d      	b.n	412030 <_malloc_r+0x438>
  411fd4:	f104 0308 	add.w	r3, r4, #8
  411fd8:	6964      	ldr	r4, [r4, #20]
  411fda:	42a3      	cmp	r3, r4
  411fdc:	bf08      	it	eq
  411fde:	f10c 0c02 	addeq.w	ip, ip, #2
  411fe2:	f43f ae67 	beq.w	411cb4 <_malloc_r+0xbc>
  411fe6:	e623      	b.n	411c30 <_malloc_r+0x38>
  411fe8:	4419      	add	r1, r3
  411fea:	461c      	mov	r4, r3
  411fec:	6848      	ldr	r0, [r1, #4]
  411fee:	68db      	ldr	r3, [r3, #12]
  411ff0:	f854 2f08 	ldr.w	r2, [r4, #8]!
  411ff4:	f040 0501 	orr.w	r5, r0, #1
  411ff8:	604d      	str	r5, [r1, #4]
  411ffa:	4630      	mov	r0, r6
  411ffc:	60d3      	str	r3, [r2, #12]
  411ffe:	609a      	str	r2, [r3, #8]
  412000:	f000 f984 	bl	41230c <__malloc_unlock>
  412004:	e624      	b.n	411c50 <_malloc_r+0x58>
  412006:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  41200a:	ea4f 014c 	mov.w	r1, ip, lsl #1
  41200e:	e63b      	b.n	411c88 <_malloc_r+0x90>
  412010:	098a      	lsrs	r2, r1, #6
  412012:	3238      	adds	r2, #56	; 0x38
  412014:	0050      	lsls	r0, r2, #1
  412016:	e7a8      	b.n	411f6a <_malloc_r+0x372>
  412018:	42bc      	cmp	r4, r7
  41201a:	f43f af03 	beq.w	411e24 <_malloc_r+0x22c>
  41201e:	68bc      	ldr	r4, [r7, #8]
  412020:	6862      	ldr	r2, [r4, #4]
  412022:	f022 0203 	bic.w	r2, r2, #3
  412026:	e762      	b.n	411eee <_malloc_r+0x2f6>
  412028:	f8d8 8000 	ldr.w	r8, [r8]
  41202c:	4598      	cmp	r8, r3
  41202e:	d17b      	bne.n	412128 <_malloc_r+0x530>
  412030:	f01c 0f03 	tst.w	ip, #3
  412034:	f1a8 0308 	sub.w	r3, r8, #8
  412038:	f10c 3cff 	add.w	ip, ip, #4294967295
  41203c:	d1f4      	bne.n	412028 <_malloc_r+0x430>
  41203e:	687b      	ldr	r3, [r7, #4]
  412040:	ea23 0300 	bic.w	r3, r3, r0
  412044:	607b      	str	r3, [r7, #4]
  412046:	0040      	lsls	r0, r0, #1
  412048:	4298      	cmp	r0, r3
  41204a:	f63f aebf 	bhi.w	411dcc <_malloc_r+0x1d4>
  41204e:	2800      	cmp	r0, #0
  412050:	f43f aebc 	beq.w	411dcc <_malloc_r+0x1d4>
  412054:	4203      	tst	r3, r0
  412056:	46cc      	mov	ip, r9
  412058:	f47f ae65 	bne.w	411d26 <_malloc_r+0x12e>
  41205c:	0040      	lsls	r0, r0, #1
  41205e:	4203      	tst	r3, r0
  412060:	f10c 0c04 	add.w	ip, ip, #4
  412064:	d0fa      	beq.n	41205c <_malloc_r+0x464>
  412066:	e65e      	b.n	411d26 <_malloc_r+0x12e>
  412068:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  41206c:	d81a      	bhi.n	4120a4 <_malloc_r+0x4ac>
  41206e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  412072:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  412076:	ea4f 014c 	mov.w	r1, ip, lsl #1
  41207a:	e605      	b.n	411c88 <_malloc_r+0x90>
  41207c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  412080:	e6ef      	b.n	411e62 <_malloc_r+0x26a>
  412082:	2301      	movs	r3, #1
  412084:	f8c8 3004 	str.w	r3, [r8, #4]
  412088:	4644      	mov	r4, r8
  41208a:	2200      	movs	r2, #0
  41208c:	e72f      	b.n	411eee <_malloc_r+0x2f6>
  41208e:	1091      	asrs	r1, r2, #2
  412090:	2001      	movs	r0, #1
  412092:	f8d8 2004 	ldr.w	r2, [r8, #4]
  412096:	fa00 f101 	lsl.w	r1, r0, r1
  41209a:	430a      	orrs	r2, r1
  41209c:	f8c8 2004 	str.w	r2, [r8, #4]
  4120a0:	4619      	mov	r1, r3
  4120a2:	e774      	b.n	411f8e <_malloc_r+0x396>
  4120a4:	f240 5354 	movw	r3, #1364	; 0x554
  4120a8:	459c      	cmp	ip, r3
  4120aa:	d81b      	bhi.n	4120e4 <_malloc_r+0x4ec>
  4120ac:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  4120b0:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  4120b4:	ea4f 014c 	mov.w	r1, ip, lsl #1
  4120b8:	e5e6      	b.n	411c88 <_malloc_r+0x90>
  4120ba:	f10a 0a10 	add.w	sl, sl, #16
  4120be:	e6a3      	b.n	411e08 <_malloc_r+0x210>
  4120c0:	2b54      	cmp	r3, #84	; 0x54
  4120c2:	d81f      	bhi.n	412104 <_malloc_r+0x50c>
  4120c4:	0b0a      	lsrs	r2, r1, #12
  4120c6:	326e      	adds	r2, #110	; 0x6e
  4120c8:	0050      	lsls	r0, r2, #1
  4120ca:	e74e      	b.n	411f6a <_malloc_r+0x372>
  4120cc:	f3cb 010b 	ubfx	r1, fp, #0, #12
  4120d0:	2900      	cmp	r1, #0
  4120d2:	f47f aeb1 	bne.w	411e38 <_malloc_r+0x240>
  4120d6:	eb0a 0109 	add.w	r1, sl, r9
  4120da:	68ba      	ldr	r2, [r7, #8]
  4120dc:	f041 0101 	orr.w	r1, r1, #1
  4120e0:	6051      	str	r1, [r2, #4]
  4120e2:	e6f6      	b.n	411ed2 <_malloc_r+0x2da>
  4120e4:	21fc      	movs	r1, #252	; 0xfc
  4120e6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  4120ea:	e5cd      	b.n	411c88 <_malloc_r+0x90>
  4120ec:	2201      	movs	r2, #1
  4120ee:	f04f 0a00 	mov.w	sl, #0
  4120f2:	e6cb      	b.n	411e8c <_malloc_r+0x294>
  4120f4:	f104 0108 	add.w	r1, r4, #8
  4120f8:	4630      	mov	r0, r6
  4120fa:	f7ff fa55 	bl	4115a8 <_free_r>
  4120fe:	f8da 3000 	ldr.w	r3, [sl]
  412102:	e6e6      	b.n	411ed2 <_malloc_r+0x2da>
  412104:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  412108:	d803      	bhi.n	412112 <_malloc_r+0x51a>
  41210a:	0bca      	lsrs	r2, r1, #15
  41210c:	3277      	adds	r2, #119	; 0x77
  41210e:	0050      	lsls	r0, r2, #1
  412110:	e72b      	b.n	411f6a <_malloc_r+0x372>
  412112:	f240 5254 	movw	r2, #1364	; 0x554
  412116:	4293      	cmp	r3, r2
  412118:	d803      	bhi.n	412122 <_malloc_r+0x52a>
  41211a:	0c8a      	lsrs	r2, r1, #18
  41211c:	327c      	adds	r2, #124	; 0x7c
  41211e:	0050      	lsls	r0, r2, #1
  412120:	e723      	b.n	411f6a <_malloc_r+0x372>
  412122:	20fc      	movs	r0, #252	; 0xfc
  412124:	227e      	movs	r2, #126	; 0x7e
  412126:	e720      	b.n	411f6a <_malloc_r+0x372>
  412128:	687b      	ldr	r3, [r7, #4]
  41212a:	e78c      	b.n	412046 <_malloc_r+0x44e>
  41212c:	200007fc 	.word	0x200007fc

00412130 <_mbrtowc_r>:
  412130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  412134:	b083      	sub	sp, #12
  412136:	461f      	mov	r7, r3
  412138:	4614      	mov	r4, r2
  41213a:	4605      	mov	r5, r0
  41213c:	4688      	mov	r8, r1
  41213e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  412140:	4b10      	ldr	r3, [pc, #64]	; (412184 <_mbrtowc_r+0x54>)
  412142:	b19a      	cbz	r2, 41216c <_mbrtowc_r+0x3c>
  412144:	f8d3 9000 	ldr.w	r9, [r3]
  412148:	f7ff fcbc 	bl	411ac4 <__locale_charset>
  41214c:	4641      	mov	r1, r8
  41214e:	e88d 0041 	stmia.w	sp, {r0, r6}
  412152:	4622      	mov	r2, r4
  412154:	463b      	mov	r3, r7
  412156:	4628      	mov	r0, r5
  412158:	47c8      	blx	r9
  41215a:	1c43      	adds	r3, r0, #1
  41215c:	d103      	bne.n	412166 <_mbrtowc_r+0x36>
  41215e:	2200      	movs	r2, #0
  412160:	238a      	movs	r3, #138	; 0x8a
  412162:	6032      	str	r2, [r6, #0]
  412164:	602b      	str	r3, [r5, #0]
  412166:	b003      	add	sp, #12
  412168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41216c:	681f      	ldr	r7, [r3, #0]
  41216e:	f7ff fca9 	bl	411ac4 <__locale_charset>
  412172:	4621      	mov	r1, r4
  412174:	e88d 0041 	stmia.w	sp, {r0, r6}
  412178:	4a03      	ldr	r2, [pc, #12]	; (412188 <_mbrtowc_r+0x58>)
  41217a:	4628      	mov	r0, r5
  41217c:	2301      	movs	r3, #1
  41217e:	47b8      	blx	r7
  412180:	e7eb      	b.n	41215a <_mbrtowc_r+0x2a>
  412182:	bf00      	nop
  412184:	20000c0c 	.word	0x20000c0c
  412188:	004161a4 	.word	0x004161a4

0041218c <__ascii_mbtowc>:
  41218c:	b082      	sub	sp, #8
  41218e:	b149      	cbz	r1, 4121a4 <__ascii_mbtowc+0x18>
  412190:	b15a      	cbz	r2, 4121aa <__ascii_mbtowc+0x1e>
  412192:	b16b      	cbz	r3, 4121b0 <__ascii_mbtowc+0x24>
  412194:	7813      	ldrb	r3, [r2, #0]
  412196:	600b      	str	r3, [r1, #0]
  412198:	7810      	ldrb	r0, [r2, #0]
  41219a:	3000      	adds	r0, #0
  41219c:	bf18      	it	ne
  41219e:	2001      	movne	r0, #1
  4121a0:	b002      	add	sp, #8
  4121a2:	4770      	bx	lr
  4121a4:	a901      	add	r1, sp, #4
  4121a6:	2a00      	cmp	r2, #0
  4121a8:	d1f3      	bne.n	412192 <__ascii_mbtowc+0x6>
  4121aa:	4610      	mov	r0, r2
  4121ac:	b002      	add	sp, #8
  4121ae:	4770      	bx	lr
  4121b0:	f06f 0001 	mvn.w	r0, #1
  4121b4:	e7f4      	b.n	4121a0 <__ascii_mbtowc+0x14>
  4121b6:	bf00      	nop

004121b8 <memchr>:
  4121b8:	0783      	lsls	r3, r0, #30
  4121ba:	b470      	push	{r4, r5, r6}
  4121bc:	b2c9      	uxtb	r1, r1
  4121be:	d03f      	beq.n	412240 <memchr+0x88>
  4121c0:	1e54      	subs	r4, r2, #1
  4121c2:	b32a      	cbz	r2, 412210 <memchr+0x58>
  4121c4:	7803      	ldrb	r3, [r0, #0]
  4121c6:	428b      	cmp	r3, r1
  4121c8:	d023      	beq.n	412212 <memchr+0x5a>
  4121ca:	1c43      	adds	r3, r0, #1
  4121cc:	e004      	b.n	4121d8 <memchr+0x20>
  4121ce:	b1fc      	cbz	r4, 412210 <memchr+0x58>
  4121d0:	7804      	ldrb	r4, [r0, #0]
  4121d2:	428c      	cmp	r4, r1
  4121d4:	d01d      	beq.n	412212 <memchr+0x5a>
  4121d6:	4614      	mov	r4, r2
  4121d8:	f013 0f03 	tst.w	r3, #3
  4121dc:	4618      	mov	r0, r3
  4121de:	f104 32ff 	add.w	r2, r4, #4294967295
  4121e2:	f103 0301 	add.w	r3, r3, #1
  4121e6:	d1f2      	bne.n	4121ce <memchr+0x16>
  4121e8:	2c03      	cmp	r4, #3
  4121ea:	d814      	bhi.n	412216 <memchr+0x5e>
  4121ec:	1e65      	subs	r5, r4, #1
  4121ee:	b34c      	cbz	r4, 412244 <memchr+0x8c>
  4121f0:	7803      	ldrb	r3, [r0, #0]
  4121f2:	428b      	cmp	r3, r1
  4121f4:	d00d      	beq.n	412212 <memchr+0x5a>
  4121f6:	1c42      	adds	r2, r0, #1
  4121f8:	2300      	movs	r3, #0
  4121fa:	e002      	b.n	412202 <memchr+0x4a>
  4121fc:	7804      	ldrb	r4, [r0, #0]
  4121fe:	428c      	cmp	r4, r1
  412200:	d007      	beq.n	412212 <memchr+0x5a>
  412202:	42ab      	cmp	r3, r5
  412204:	4610      	mov	r0, r2
  412206:	f103 0301 	add.w	r3, r3, #1
  41220a:	f102 0201 	add.w	r2, r2, #1
  41220e:	d1f5      	bne.n	4121fc <memchr+0x44>
  412210:	2000      	movs	r0, #0
  412212:	bc70      	pop	{r4, r5, r6}
  412214:	4770      	bx	lr
  412216:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  41221a:	4603      	mov	r3, r0
  41221c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  412220:	4618      	mov	r0, r3
  412222:	3304      	adds	r3, #4
  412224:	6802      	ldr	r2, [r0, #0]
  412226:	4072      	eors	r2, r6
  412228:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  41222c:	ea25 0202 	bic.w	r2, r5, r2
  412230:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  412234:	d1da      	bne.n	4121ec <memchr+0x34>
  412236:	3c04      	subs	r4, #4
  412238:	2c03      	cmp	r4, #3
  41223a:	4618      	mov	r0, r3
  41223c:	d8f0      	bhi.n	412220 <memchr+0x68>
  41223e:	e7d5      	b.n	4121ec <memchr+0x34>
  412240:	4614      	mov	r4, r2
  412242:	e7d1      	b.n	4121e8 <memchr+0x30>
  412244:	4620      	mov	r0, r4
  412246:	e7e4      	b.n	412212 <memchr+0x5a>

00412248 <memmove>:
  412248:	4288      	cmp	r0, r1
  41224a:	b4f0      	push	{r4, r5, r6, r7}
  41224c:	d910      	bls.n	412270 <memmove+0x28>
  41224e:	188c      	adds	r4, r1, r2
  412250:	42a0      	cmp	r0, r4
  412252:	d20d      	bcs.n	412270 <memmove+0x28>
  412254:	1885      	adds	r5, r0, r2
  412256:	1e53      	subs	r3, r2, #1
  412258:	b142      	cbz	r2, 41226c <memmove+0x24>
  41225a:	4621      	mov	r1, r4
  41225c:	462a      	mov	r2, r5
  41225e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  412262:	f802 4d01 	strb.w	r4, [r2, #-1]!
  412266:	3b01      	subs	r3, #1
  412268:	1c5c      	adds	r4, r3, #1
  41226a:	d1f8      	bne.n	41225e <memmove+0x16>
  41226c:	bcf0      	pop	{r4, r5, r6, r7}
  41226e:	4770      	bx	lr
  412270:	2a0f      	cmp	r2, #15
  412272:	d93f      	bls.n	4122f4 <memmove+0xac>
  412274:	ea40 0301 	orr.w	r3, r0, r1
  412278:	079b      	lsls	r3, r3, #30
  41227a:	d13f      	bne.n	4122fc <memmove+0xb4>
  41227c:	f1a2 0710 	sub.w	r7, r2, #16
  412280:	093f      	lsrs	r7, r7, #4
  412282:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  412286:	3610      	adds	r6, #16
  412288:	460c      	mov	r4, r1
  41228a:	4603      	mov	r3, r0
  41228c:	6825      	ldr	r5, [r4, #0]
  41228e:	601d      	str	r5, [r3, #0]
  412290:	6865      	ldr	r5, [r4, #4]
  412292:	605d      	str	r5, [r3, #4]
  412294:	68a5      	ldr	r5, [r4, #8]
  412296:	609d      	str	r5, [r3, #8]
  412298:	68e5      	ldr	r5, [r4, #12]
  41229a:	60dd      	str	r5, [r3, #12]
  41229c:	3310      	adds	r3, #16
  41229e:	42b3      	cmp	r3, r6
  4122a0:	f104 0410 	add.w	r4, r4, #16
  4122a4:	d1f2      	bne.n	41228c <memmove+0x44>
  4122a6:	1c7b      	adds	r3, r7, #1
  4122a8:	f002 0c0f 	and.w	ip, r2, #15
  4122ac:	011b      	lsls	r3, r3, #4
  4122ae:	f1bc 0f03 	cmp.w	ip, #3
  4122b2:	4419      	add	r1, r3
  4122b4:	4403      	add	r3, r0
  4122b6:	d923      	bls.n	412300 <memmove+0xb8>
  4122b8:	460e      	mov	r6, r1
  4122ba:	461d      	mov	r5, r3
  4122bc:	4664      	mov	r4, ip
  4122be:	3c04      	subs	r4, #4
  4122c0:	f856 7b04 	ldr.w	r7, [r6], #4
  4122c4:	f845 7b04 	str.w	r7, [r5], #4
  4122c8:	2c03      	cmp	r4, #3
  4122ca:	d8f8      	bhi.n	4122be <memmove+0x76>
  4122cc:	f1ac 0404 	sub.w	r4, ip, #4
  4122d0:	f024 0403 	bic.w	r4, r4, #3
  4122d4:	3404      	adds	r4, #4
  4122d6:	f002 0203 	and.w	r2, r2, #3
  4122da:	4423      	add	r3, r4
  4122dc:	4421      	add	r1, r4
  4122de:	2a00      	cmp	r2, #0
  4122e0:	d0c4      	beq.n	41226c <memmove+0x24>
  4122e2:	441a      	add	r2, r3
  4122e4:	f811 4b01 	ldrb.w	r4, [r1], #1
  4122e8:	f803 4b01 	strb.w	r4, [r3], #1
  4122ec:	4293      	cmp	r3, r2
  4122ee:	d1f9      	bne.n	4122e4 <memmove+0x9c>
  4122f0:	bcf0      	pop	{r4, r5, r6, r7}
  4122f2:	4770      	bx	lr
  4122f4:	4603      	mov	r3, r0
  4122f6:	2a00      	cmp	r2, #0
  4122f8:	d1f3      	bne.n	4122e2 <memmove+0x9a>
  4122fa:	e7b7      	b.n	41226c <memmove+0x24>
  4122fc:	4603      	mov	r3, r0
  4122fe:	e7f0      	b.n	4122e2 <memmove+0x9a>
  412300:	4662      	mov	r2, ip
  412302:	2a00      	cmp	r2, #0
  412304:	d1ed      	bne.n	4122e2 <memmove+0x9a>
  412306:	e7b1      	b.n	41226c <memmove+0x24>

00412308 <__malloc_lock>:
  412308:	4770      	bx	lr
  41230a:	bf00      	nop

0041230c <__malloc_unlock>:
  41230c:	4770      	bx	lr
  41230e:	bf00      	nop

00412310 <_Balloc>:
  412310:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  412312:	b570      	push	{r4, r5, r6, lr}
  412314:	4605      	mov	r5, r0
  412316:	460c      	mov	r4, r1
  412318:	b14a      	cbz	r2, 41232e <_Balloc+0x1e>
  41231a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  41231e:	b180      	cbz	r0, 412342 <_Balloc+0x32>
  412320:	6801      	ldr	r1, [r0, #0]
  412322:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  412326:	2200      	movs	r2, #0
  412328:	6102      	str	r2, [r0, #16]
  41232a:	60c2      	str	r2, [r0, #12]
  41232c:	bd70      	pop	{r4, r5, r6, pc}
  41232e:	2221      	movs	r2, #33	; 0x21
  412330:	2104      	movs	r1, #4
  412332:	f002 fb51 	bl	4149d8 <_calloc_r>
  412336:	64e8      	str	r0, [r5, #76]	; 0x4c
  412338:	4602      	mov	r2, r0
  41233a:	2800      	cmp	r0, #0
  41233c:	d1ed      	bne.n	41231a <_Balloc+0xa>
  41233e:	2000      	movs	r0, #0
  412340:	bd70      	pop	{r4, r5, r6, pc}
  412342:	2101      	movs	r1, #1
  412344:	fa01 f604 	lsl.w	r6, r1, r4
  412348:	1d72      	adds	r2, r6, #5
  41234a:	4628      	mov	r0, r5
  41234c:	0092      	lsls	r2, r2, #2
  41234e:	f002 fb43 	bl	4149d8 <_calloc_r>
  412352:	2800      	cmp	r0, #0
  412354:	d0f3      	beq.n	41233e <_Balloc+0x2e>
  412356:	6044      	str	r4, [r0, #4]
  412358:	6086      	str	r6, [r0, #8]
  41235a:	e7e4      	b.n	412326 <_Balloc+0x16>

0041235c <_Bfree>:
  41235c:	b131      	cbz	r1, 41236c <_Bfree+0x10>
  41235e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  412360:	684a      	ldr	r2, [r1, #4]
  412362:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  412366:	6008      	str	r0, [r1, #0]
  412368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  41236c:	4770      	bx	lr
  41236e:	bf00      	nop

00412370 <__multadd>:
  412370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  412374:	f8d1 8010 	ldr.w	r8, [r1, #16]
  412378:	b082      	sub	sp, #8
  41237a:	4689      	mov	r9, r1
  41237c:	4682      	mov	sl, r0
  41237e:	f101 0514 	add.w	r5, r1, #20
  412382:	2400      	movs	r4, #0
  412384:	682f      	ldr	r7, [r5, #0]
  412386:	b2be      	uxth	r6, r7
  412388:	0c3f      	lsrs	r7, r7, #16
  41238a:	fb02 3606 	mla	r6, r2, r6, r3
  41238e:	fb02 f307 	mul.w	r3, r2, r7
  412392:	eb03 4316 	add.w	r3, r3, r6, lsr #16
  412396:	3401      	adds	r4, #1
  412398:	b2b6      	uxth	r6, r6
  41239a:	eb06 4603 	add.w	r6, r6, r3, lsl #16
  41239e:	45a0      	cmp	r8, r4
  4123a0:	f845 6b04 	str.w	r6, [r5], #4
  4123a4:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4123a8:	dcec      	bgt.n	412384 <__multadd+0x14>
  4123aa:	b153      	cbz	r3, 4123c2 <__multadd+0x52>
  4123ac:	f8d9 2008 	ldr.w	r2, [r9, #8]
  4123b0:	4590      	cmp	r8, r2
  4123b2:	da0a      	bge.n	4123ca <__multadd+0x5a>
  4123b4:	eb09 0188 	add.w	r1, r9, r8, lsl #2
  4123b8:	f108 0201 	add.w	r2, r8, #1
  4123bc:	614b      	str	r3, [r1, #20]
  4123be:	f8c9 2010 	str.w	r2, [r9, #16]
  4123c2:	4648      	mov	r0, r9
  4123c4:	b002      	add	sp, #8
  4123c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4123ca:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4123ce:	9301      	str	r3, [sp, #4]
  4123d0:	3101      	adds	r1, #1
  4123d2:	4650      	mov	r0, sl
  4123d4:	f7ff ff9c 	bl	412310 <_Balloc>
  4123d8:	f8d9 2010 	ldr.w	r2, [r9, #16]
  4123dc:	3202      	adds	r2, #2
  4123de:	f109 010c 	add.w	r1, r9, #12
  4123e2:	4604      	mov	r4, r0
  4123e4:	0092      	lsls	r2, r2, #2
  4123e6:	300c      	adds	r0, #12
  4123e8:	f7fa fb3a 	bl	40ca60 <memcpy>
  4123ec:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
  4123f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4123f4:	9b01      	ldr	r3, [sp, #4]
  4123f6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4123fa:	f8c9 0000 	str.w	r0, [r9]
  4123fe:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
  412402:	46a1      	mov	r9, r4
  412404:	e7d6      	b.n	4123b4 <__multadd+0x44>
  412406:	bf00      	nop

00412408 <__s2b>:
  412408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41240c:	4699      	mov	r9, r3
  41240e:	4b23      	ldr	r3, [pc, #140]	; (41249c <__s2b+0x94>)
  412410:	9e08      	ldr	r6, [sp, #32]
  412412:	f109 0408 	add.w	r4, r9, #8
  412416:	fb83 5304 	smull	r5, r3, r3, r4
  41241a:	17e4      	asrs	r4, r4, #31
  41241c:	ebc4 0363 	rsb	r3, r4, r3, asr #1
  412420:	2b01      	cmp	r3, #1
  412422:	4607      	mov	r7, r0
  412424:	460c      	mov	r4, r1
  412426:	4690      	mov	r8, r2
  412428:	dd35      	ble.n	412496 <__s2b+0x8e>
  41242a:	2501      	movs	r5, #1
  41242c:	2100      	movs	r1, #0
  41242e:	006d      	lsls	r5, r5, #1
  412430:	42ab      	cmp	r3, r5
  412432:	f101 0101 	add.w	r1, r1, #1
  412436:	dcfa      	bgt.n	41242e <__s2b+0x26>
  412438:	4638      	mov	r0, r7
  41243a:	f7ff ff69 	bl	412310 <_Balloc>
  41243e:	2301      	movs	r3, #1
  412440:	f1b8 0f09 	cmp.w	r8, #9
  412444:	6146      	str	r6, [r0, #20]
  412446:	6103      	str	r3, [r0, #16]
  412448:	dd21      	ble.n	41248e <__s2b+0x86>
  41244a:	f104 0609 	add.w	r6, r4, #9
  41244e:	4635      	mov	r5, r6
  412450:	4444      	add	r4, r8
  412452:	f815 3b01 	ldrb.w	r3, [r5], #1
  412456:	4601      	mov	r1, r0
  412458:	3b30      	subs	r3, #48	; 0x30
  41245a:	4638      	mov	r0, r7
  41245c:	220a      	movs	r2, #10
  41245e:	f7ff ff87 	bl	412370 <__multadd>
  412462:	42a5      	cmp	r5, r4
  412464:	d1f5      	bne.n	412452 <__s2b+0x4a>
  412466:	eb06 0408 	add.w	r4, r6, r8
  41246a:	3c08      	subs	r4, #8
  41246c:	45c1      	cmp	r9, r8
  41246e:	dd0c      	ble.n	41248a <__s2b+0x82>
  412470:	ebc8 0809 	rsb	r8, r8, r9
  412474:	44a0      	add	r8, r4
  412476:	f814 3b01 	ldrb.w	r3, [r4], #1
  41247a:	4601      	mov	r1, r0
  41247c:	3b30      	subs	r3, #48	; 0x30
  41247e:	4638      	mov	r0, r7
  412480:	220a      	movs	r2, #10
  412482:	f7ff ff75 	bl	412370 <__multadd>
  412486:	4544      	cmp	r4, r8
  412488:	d1f5      	bne.n	412476 <__s2b+0x6e>
  41248a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41248e:	340a      	adds	r4, #10
  412490:	f04f 0809 	mov.w	r8, #9
  412494:	e7ea      	b.n	41246c <__s2b+0x64>
  412496:	2100      	movs	r1, #0
  412498:	e7ce      	b.n	412438 <__s2b+0x30>
  41249a:	bf00      	nop
  41249c:	38e38e39 	.word	0x38e38e39

004124a0 <__hi0bits>:
  4124a0:	0c03      	lsrs	r3, r0, #16
  4124a2:	041b      	lsls	r3, r3, #16
  4124a4:	b9b3      	cbnz	r3, 4124d4 <__hi0bits+0x34>
  4124a6:	0400      	lsls	r0, r0, #16
  4124a8:	2310      	movs	r3, #16
  4124aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4124ae:	bf04      	itt	eq
  4124b0:	0200      	lsleq	r0, r0, #8
  4124b2:	3308      	addeq	r3, #8
  4124b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4124b8:	bf04      	itt	eq
  4124ba:	0100      	lsleq	r0, r0, #4
  4124bc:	3304      	addeq	r3, #4
  4124be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4124c2:	bf04      	itt	eq
  4124c4:	0080      	lsleq	r0, r0, #2
  4124c6:	3302      	addeq	r3, #2
  4124c8:	2800      	cmp	r0, #0
  4124ca:	db07      	blt.n	4124dc <__hi0bits+0x3c>
  4124cc:	0042      	lsls	r2, r0, #1
  4124ce:	d403      	bmi.n	4124d8 <__hi0bits+0x38>
  4124d0:	2020      	movs	r0, #32
  4124d2:	4770      	bx	lr
  4124d4:	2300      	movs	r3, #0
  4124d6:	e7e8      	b.n	4124aa <__hi0bits+0xa>
  4124d8:	1c58      	adds	r0, r3, #1
  4124da:	4770      	bx	lr
  4124dc:	4618      	mov	r0, r3
  4124de:	4770      	bx	lr

004124e0 <__lo0bits>:
  4124e0:	6803      	ldr	r3, [r0, #0]
  4124e2:	f013 0207 	ands.w	r2, r3, #7
  4124e6:	d007      	beq.n	4124f8 <__lo0bits+0x18>
  4124e8:	07d9      	lsls	r1, r3, #31
  4124ea:	d420      	bmi.n	41252e <__lo0bits+0x4e>
  4124ec:	079a      	lsls	r2, r3, #30
  4124ee:	d420      	bmi.n	412532 <__lo0bits+0x52>
  4124f0:	089b      	lsrs	r3, r3, #2
  4124f2:	6003      	str	r3, [r0, #0]
  4124f4:	2002      	movs	r0, #2
  4124f6:	4770      	bx	lr
  4124f8:	b299      	uxth	r1, r3
  4124fa:	b909      	cbnz	r1, 412500 <__lo0bits+0x20>
  4124fc:	0c1b      	lsrs	r3, r3, #16
  4124fe:	2210      	movs	r2, #16
  412500:	f013 0fff 	tst.w	r3, #255	; 0xff
  412504:	bf04      	itt	eq
  412506:	0a1b      	lsreq	r3, r3, #8
  412508:	3208      	addeq	r2, #8
  41250a:	0719      	lsls	r1, r3, #28
  41250c:	bf04      	itt	eq
  41250e:	091b      	lsreq	r3, r3, #4
  412510:	3204      	addeq	r2, #4
  412512:	0799      	lsls	r1, r3, #30
  412514:	bf04      	itt	eq
  412516:	089b      	lsreq	r3, r3, #2
  412518:	3202      	addeq	r2, #2
  41251a:	07d9      	lsls	r1, r3, #31
  41251c:	d404      	bmi.n	412528 <__lo0bits+0x48>
  41251e:	085b      	lsrs	r3, r3, #1
  412520:	d101      	bne.n	412526 <__lo0bits+0x46>
  412522:	2020      	movs	r0, #32
  412524:	4770      	bx	lr
  412526:	3201      	adds	r2, #1
  412528:	6003      	str	r3, [r0, #0]
  41252a:	4610      	mov	r0, r2
  41252c:	4770      	bx	lr
  41252e:	2000      	movs	r0, #0
  412530:	4770      	bx	lr
  412532:	085b      	lsrs	r3, r3, #1
  412534:	6003      	str	r3, [r0, #0]
  412536:	2001      	movs	r0, #1
  412538:	4770      	bx	lr
  41253a:	bf00      	nop

0041253c <__i2b>:
  41253c:	b510      	push	{r4, lr}
  41253e:	460c      	mov	r4, r1
  412540:	2101      	movs	r1, #1
  412542:	f7ff fee5 	bl	412310 <_Balloc>
  412546:	2201      	movs	r2, #1
  412548:	6144      	str	r4, [r0, #20]
  41254a:	6102      	str	r2, [r0, #16]
  41254c:	bd10      	pop	{r4, pc}
  41254e:	bf00      	nop

00412550 <__multiply>:
  412550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412554:	690d      	ldr	r5, [r1, #16]
  412556:	f8d2 9010 	ldr.w	r9, [r2, #16]
  41255a:	454d      	cmp	r5, r9
  41255c:	b085      	sub	sp, #20
  41255e:	460c      	mov	r4, r1
  412560:	4692      	mov	sl, r2
  412562:	da04      	bge.n	41256e <__multiply+0x1e>
  412564:	462a      	mov	r2, r5
  412566:	4654      	mov	r4, sl
  412568:	464d      	mov	r5, r9
  41256a:	468a      	mov	sl, r1
  41256c:	4691      	mov	r9, r2
  41256e:	68a3      	ldr	r3, [r4, #8]
  412570:	6861      	ldr	r1, [r4, #4]
  412572:	eb05 0709 	add.w	r7, r5, r9
  412576:	429f      	cmp	r7, r3
  412578:	bfc8      	it	gt
  41257a:	3101      	addgt	r1, #1
  41257c:	f7ff fec8 	bl	412310 <_Balloc>
  412580:	f100 0614 	add.w	r6, r0, #20
  412584:	eb06 0887 	add.w	r8, r6, r7, lsl #2
  412588:	4546      	cmp	r6, r8
  41258a:	9001      	str	r0, [sp, #4]
  41258c:	d205      	bcs.n	41259a <__multiply+0x4a>
  41258e:	4633      	mov	r3, r6
  412590:	2000      	movs	r0, #0
  412592:	f843 0b04 	str.w	r0, [r3], #4
  412596:	4598      	cmp	r8, r3
  412598:	d8fb      	bhi.n	412592 <__multiply+0x42>
  41259a:	f10a 0c14 	add.w	ip, sl, #20
  41259e:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
  4125a2:	3414      	adds	r4, #20
  4125a4:	45cc      	cmp	ip, r9
  4125a6:	9400      	str	r4, [sp, #0]
  4125a8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  4125ac:	d25b      	bcs.n	412666 <__multiply+0x116>
  4125ae:	f8cd 8008 	str.w	r8, [sp, #8]
  4125b2:	9703      	str	r7, [sp, #12]
  4125b4:	46c8      	mov	r8, r9
  4125b6:	f85c 3b04 	ldr.w	r3, [ip], #4
  4125ba:	b29c      	uxth	r4, r3
  4125bc:	b324      	cbz	r4, 412608 <__multiply+0xb8>
  4125be:	9a00      	ldr	r2, [sp, #0]
  4125c0:	4633      	mov	r3, r6
  4125c2:	f04f 0900 	mov.w	r9, #0
  4125c6:	e000      	b.n	4125ca <__multiply+0x7a>
  4125c8:	460b      	mov	r3, r1
  4125ca:	f852 7b04 	ldr.w	r7, [r2], #4
  4125ce:	6819      	ldr	r1, [r3, #0]
  4125d0:	fa1f fb87 	uxth.w	fp, r7
  4125d4:	fa1f fa81 	uxth.w	sl, r1
  4125d8:	0c38      	lsrs	r0, r7, #16
  4125da:	0c09      	lsrs	r1, r1, #16
  4125dc:	fb04 a70b 	mla	r7, r4, fp, sl
  4125e0:	44b9      	add	r9, r7
  4125e2:	fb04 1000 	mla	r0, r4, r0, r1
  4125e6:	eb00 4019 	add.w	r0, r0, r9, lsr #16
  4125ea:	4619      	mov	r1, r3
  4125ec:	fa1f f989 	uxth.w	r9, r9
  4125f0:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
  4125f4:	4295      	cmp	r5, r2
  4125f6:	ea4f 4910 	mov.w	r9, r0, lsr #16
  4125fa:	f841 7b04 	str.w	r7, [r1], #4
  4125fe:	d8e3      	bhi.n	4125c8 <__multiply+0x78>
  412600:	f8c3 9004 	str.w	r9, [r3, #4]
  412604:	f85c 3c04 	ldr.w	r3, [ip, #-4]
  412608:	ea5f 4913 	movs.w	r9, r3, lsr #16
  41260c:	d024      	beq.n	412658 <__multiply+0x108>
  41260e:	f8d6 a000 	ldr.w	sl, [r6]
  412612:	9b00      	ldr	r3, [sp, #0]
  412614:	4650      	mov	r0, sl
  412616:	4631      	mov	r1, r6
  412618:	f04f 0b00 	mov.w	fp, #0
  41261c:	e000      	b.n	412620 <__multiply+0xd0>
  41261e:	4611      	mov	r1, r2
  412620:	881a      	ldrh	r2, [r3, #0]
  412622:	0c00      	lsrs	r0, r0, #16
  412624:	fb09 0002 	mla	r0, r9, r2, r0
  412628:	4483      	add	fp, r0
  41262a:	fa1f fa8a 	uxth.w	sl, sl
  41262e:	460a      	mov	r2, r1
  412630:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
  412634:	f842 0b04 	str.w	r0, [r2], #4
  412638:	f853 7b04 	ldr.w	r7, [r3], #4
  41263c:	6848      	ldr	r0, [r1, #4]
  41263e:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  412642:	b284      	uxth	r4, r0
  412644:	fb09 4a0a 	mla	sl, r9, sl, r4
  412648:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
  41264c:	429d      	cmp	r5, r3
  41264e:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
  412652:	d8e4      	bhi.n	41261e <__multiply+0xce>
  412654:	f8c1 a004 	str.w	sl, [r1, #4]
  412658:	45e0      	cmp	r8, ip
  41265a:	f106 0604 	add.w	r6, r6, #4
  41265e:	d8aa      	bhi.n	4125b6 <__multiply+0x66>
  412660:	f8dd 8008 	ldr.w	r8, [sp, #8]
  412664:	9f03      	ldr	r7, [sp, #12]
  412666:	2f00      	cmp	r7, #0
  412668:	dd0a      	ble.n	412680 <__multiply+0x130>
  41266a:	f858 3c04 	ldr.w	r3, [r8, #-4]
  41266e:	f1a8 0804 	sub.w	r8, r8, #4
  412672:	b11b      	cbz	r3, 41267c <__multiply+0x12c>
  412674:	e004      	b.n	412680 <__multiply+0x130>
  412676:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  41267a:	b90b      	cbnz	r3, 412680 <__multiply+0x130>
  41267c:	3f01      	subs	r7, #1
  41267e:	d1fa      	bne.n	412676 <__multiply+0x126>
  412680:	9b01      	ldr	r3, [sp, #4]
  412682:	4618      	mov	r0, r3
  412684:	611f      	str	r7, [r3, #16]
  412686:	b005      	add	sp, #20
  412688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041268c <__pow5mult>:
  41268c:	f012 0303 	ands.w	r3, r2, #3
  412690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412694:	4614      	mov	r4, r2
  412696:	4607      	mov	r7, r0
  412698:	460e      	mov	r6, r1
  41269a:	d12c      	bne.n	4126f6 <__pow5mult+0x6a>
  41269c:	10a4      	asrs	r4, r4, #2
  41269e:	d01c      	beq.n	4126da <__pow5mult+0x4e>
  4126a0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  4126a2:	2d00      	cmp	r5, #0
  4126a4:	d030      	beq.n	412708 <__pow5mult+0x7c>
  4126a6:	f04f 0800 	mov.w	r8, #0
  4126aa:	e004      	b.n	4126b6 <__pow5mult+0x2a>
  4126ac:	1064      	asrs	r4, r4, #1
  4126ae:	d014      	beq.n	4126da <__pow5mult+0x4e>
  4126b0:	6828      	ldr	r0, [r5, #0]
  4126b2:	b1a8      	cbz	r0, 4126e0 <__pow5mult+0x54>
  4126b4:	4605      	mov	r5, r0
  4126b6:	07e3      	lsls	r3, r4, #31
  4126b8:	d5f8      	bpl.n	4126ac <__pow5mult+0x20>
  4126ba:	4638      	mov	r0, r7
  4126bc:	4631      	mov	r1, r6
  4126be:	462a      	mov	r2, r5
  4126c0:	f7ff ff46 	bl	412550 <__multiply>
  4126c4:	b1ae      	cbz	r6, 4126f2 <__pow5mult+0x66>
  4126c6:	6872      	ldr	r2, [r6, #4]
  4126c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4126ca:	1064      	asrs	r4, r4, #1
  4126cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4126d0:	6031      	str	r1, [r6, #0]
  4126d2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4126d6:	4606      	mov	r6, r0
  4126d8:	d1ea      	bne.n	4126b0 <__pow5mult+0x24>
  4126da:	4630      	mov	r0, r6
  4126dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4126e0:	4638      	mov	r0, r7
  4126e2:	4629      	mov	r1, r5
  4126e4:	462a      	mov	r2, r5
  4126e6:	f7ff ff33 	bl	412550 <__multiply>
  4126ea:	6028      	str	r0, [r5, #0]
  4126ec:	f8c0 8000 	str.w	r8, [r0]
  4126f0:	e7e0      	b.n	4126b4 <__pow5mult+0x28>
  4126f2:	4606      	mov	r6, r0
  4126f4:	e7da      	b.n	4126ac <__pow5mult+0x20>
  4126f6:	1e5d      	subs	r5, r3, #1
  4126f8:	4a0a      	ldr	r2, [pc, #40]	; (412724 <__pow5mult+0x98>)
  4126fa:	2300      	movs	r3, #0
  4126fc:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
  412700:	f7ff fe36 	bl	412370 <__multadd>
  412704:	4606      	mov	r6, r0
  412706:	e7c9      	b.n	41269c <__pow5mult+0x10>
  412708:	2101      	movs	r1, #1
  41270a:	4638      	mov	r0, r7
  41270c:	f7ff fe00 	bl	412310 <_Balloc>
  412710:	f240 2171 	movw	r1, #625	; 0x271
  412714:	2201      	movs	r2, #1
  412716:	2300      	movs	r3, #0
  412718:	6141      	str	r1, [r0, #20]
  41271a:	6102      	str	r2, [r0, #16]
  41271c:	4605      	mov	r5, r0
  41271e:	64b8      	str	r0, [r7, #72]	; 0x48
  412720:	6003      	str	r3, [r0, #0]
  412722:	e7c0      	b.n	4126a6 <__pow5mult+0x1a>
  412724:	00416438 	.word	0x00416438

00412728 <__lshift>:
  412728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41272c:	4693      	mov	fp, r2
  41272e:	690a      	ldr	r2, [r1, #16]
  412730:	688b      	ldr	r3, [r1, #8]
  412732:	ea4f 1a6b 	mov.w	sl, fp, asr #5
  412736:	eb0a 0902 	add.w	r9, sl, r2
  41273a:	f109 0601 	add.w	r6, r9, #1
  41273e:	429e      	cmp	r6, r3
  412740:	460f      	mov	r7, r1
  412742:	4680      	mov	r8, r0
  412744:	6849      	ldr	r1, [r1, #4]
  412746:	dd04      	ble.n	412752 <__lshift+0x2a>
  412748:	005b      	lsls	r3, r3, #1
  41274a:	429e      	cmp	r6, r3
  41274c:	f101 0101 	add.w	r1, r1, #1
  412750:	dcfa      	bgt.n	412748 <__lshift+0x20>
  412752:	4640      	mov	r0, r8
  412754:	f7ff fddc 	bl	412310 <_Balloc>
  412758:	f1ba 0f00 	cmp.w	sl, #0
  41275c:	f100 0414 	add.w	r4, r0, #20
  412760:	dd09      	ble.n	412776 <__lshift+0x4e>
  412762:	2300      	movs	r3, #0
  412764:	461a      	mov	r2, r3
  412766:	4625      	mov	r5, r4
  412768:	3301      	adds	r3, #1
  41276a:	4553      	cmp	r3, sl
  41276c:	f845 2b04 	str.w	r2, [r5], #4
  412770:	d1fa      	bne.n	412768 <__lshift+0x40>
  412772:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  412776:	693a      	ldr	r2, [r7, #16]
  412778:	f107 0314 	add.w	r3, r7, #20
  41277c:	f01b 0b1f 	ands.w	fp, fp, #31
  412780:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
  412784:	d021      	beq.n	4127ca <__lshift+0xa2>
  412786:	f1cb 0a20 	rsb	sl, fp, #32
  41278a:	2200      	movs	r2, #0
  41278c:	e000      	b.n	412790 <__lshift+0x68>
  41278e:	462c      	mov	r4, r5
  412790:	6819      	ldr	r1, [r3, #0]
  412792:	4625      	mov	r5, r4
  412794:	fa01 f10b 	lsl.w	r1, r1, fp
  412798:	430a      	orrs	r2, r1
  41279a:	f845 2b04 	str.w	r2, [r5], #4
  41279e:	f853 2b04 	ldr.w	r2, [r3], #4
  4127a2:	4563      	cmp	r3, ip
  4127a4:	fa22 f20a 	lsr.w	r2, r2, sl
  4127a8:	d3f1      	bcc.n	41278e <__lshift+0x66>
  4127aa:	6062      	str	r2, [r4, #4]
  4127ac:	b10a      	cbz	r2, 4127b2 <__lshift+0x8a>
  4127ae:	f109 0602 	add.w	r6, r9, #2
  4127b2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  4127b6:	687a      	ldr	r2, [r7, #4]
  4127b8:	3e01      	subs	r6, #1
  4127ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4127be:	6106      	str	r6, [r0, #16]
  4127c0:	6039      	str	r1, [r7, #0]
  4127c2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4127c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4127ca:	f853 2b04 	ldr.w	r2, [r3], #4
  4127ce:	f844 2b04 	str.w	r2, [r4], #4
  4127d2:	459c      	cmp	ip, r3
  4127d4:	d9ed      	bls.n	4127b2 <__lshift+0x8a>
  4127d6:	f853 2b04 	ldr.w	r2, [r3], #4
  4127da:	f844 2b04 	str.w	r2, [r4], #4
  4127de:	459c      	cmp	ip, r3
  4127e0:	d8f3      	bhi.n	4127ca <__lshift+0xa2>
  4127e2:	e7e6      	b.n	4127b2 <__lshift+0x8a>

004127e4 <__mcmp>:
  4127e4:	6902      	ldr	r2, [r0, #16]
  4127e6:	690b      	ldr	r3, [r1, #16]
  4127e8:	1ad2      	subs	r2, r2, r3
  4127ea:	b410      	push	{r4}
  4127ec:	d115      	bne.n	41281a <__mcmp+0x36>
  4127ee:	009b      	lsls	r3, r3, #2
  4127f0:	3014      	adds	r0, #20
  4127f2:	3114      	adds	r1, #20
  4127f4:	4419      	add	r1, r3
  4127f6:	4403      	add	r3, r0
  4127f8:	e001      	b.n	4127fe <__mcmp+0x1a>
  4127fa:	4298      	cmp	r0, r3
  4127fc:	d211      	bcs.n	412822 <__mcmp+0x3e>
  4127fe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  412802:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  412806:	42a2      	cmp	r2, r4
  412808:	d0f7      	beq.n	4127fa <__mcmp+0x16>
  41280a:	4294      	cmp	r4, r2
  41280c:	bf94      	ite	ls
  41280e:	2001      	movls	r0, #1
  412810:	f04f 30ff 	movhi.w	r0, #4294967295
  412814:	f85d 4b04 	ldr.w	r4, [sp], #4
  412818:	4770      	bx	lr
  41281a:	4610      	mov	r0, r2
  41281c:	f85d 4b04 	ldr.w	r4, [sp], #4
  412820:	4770      	bx	lr
  412822:	2000      	movs	r0, #0
  412824:	f85d 4b04 	ldr.w	r4, [sp], #4
  412828:	4770      	bx	lr
  41282a:	bf00      	nop

0041282c <__mdiff>:
  41282c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  412830:	460d      	mov	r5, r1
  412832:	4604      	mov	r4, r0
  412834:	4611      	mov	r1, r2
  412836:	4628      	mov	r0, r5
  412838:	4616      	mov	r6, r2
  41283a:	f7ff ffd3 	bl	4127e4 <__mcmp>
  41283e:	1e07      	subs	r7, r0, #0
  412840:	d055      	beq.n	4128ee <__mdiff+0xc2>
  412842:	db4e      	blt.n	4128e2 <__mdiff+0xb6>
  412844:	f04f 0800 	mov.w	r8, #0
  412848:	6869      	ldr	r1, [r5, #4]
  41284a:	4620      	mov	r0, r4
  41284c:	f7ff fd60 	bl	412310 <_Balloc>
  412850:	692f      	ldr	r7, [r5, #16]
  412852:	6932      	ldr	r2, [r6, #16]
  412854:	f8c0 800c 	str.w	r8, [r0, #12]
  412858:	3514      	adds	r5, #20
  41285a:	3614      	adds	r6, #20
  41285c:	f100 0314 	add.w	r3, r0, #20
  412860:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
  412864:	eb06 0882 	add.w	r8, r6, r2, lsl #2
  412868:	2100      	movs	r1, #0
  41286a:	f856 2b04 	ldr.w	r2, [r6], #4
  41286e:	f855 4b04 	ldr.w	r4, [r5], #4
  412872:	fa1f f982 	uxth.w	r9, r2
  412876:	fa11 fa84 	uxtah	sl, r1, r4
  41287a:	0c11      	lsrs	r1, r2, #16
  41287c:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
  412880:	ebc9 020a 	rsb	r2, r9, sl
  412884:	eb01 4122 	add.w	r1, r1, r2, asr #16
  412888:	b292      	uxth	r2, r2
  41288a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  41288e:	45b0      	cmp	r8, r6
  412890:	f843 2b04 	str.w	r2, [r3], #4
  412894:	ea4f 4121 	mov.w	r1, r1, asr #16
  412898:	462c      	mov	r4, r5
  41289a:	d8e6      	bhi.n	41286a <__mdiff+0x3e>
  41289c:	45ac      	cmp	ip, r5
  41289e:	4698      	mov	r8, r3
  4128a0:	d915      	bls.n	4128ce <__mdiff+0xa2>
  4128a2:	f854 6b04 	ldr.w	r6, [r4], #4
  4128a6:	fa11 f186 	uxtah	r1, r1, r6
  4128aa:	0c36      	lsrs	r6, r6, #16
  4128ac:	eb06 4621 	add.w	r6, r6, r1, asr #16
  4128b0:	b289      	uxth	r1, r1
  4128b2:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
  4128b6:	45a4      	cmp	ip, r4
  4128b8:	f843 2b04 	str.w	r2, [r3], #4
  4128bc:	ea4f 4126 	mov.w	r1, r6, asr #16
  4128c0:	d8ef      	bhi.n	4128a2 <__mdiff+0x76>
  4128c2:	43eb      	mvns	r3, r5
  4128c4:	4463      	add	r3, ip
  4128c6:	f023 0303 	bic.w	r3, r3, #3
  4128ca:	3304      	adds	r3, #4
  4128cc:	4443      	add	r3, r8
  4128ce:	3b04      	subs	r3, #4
  4128d0:	b922      	cbnz	r2, 4128dc <__mdiff+0xb0>
  4128d2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4128d6:	3f01      	subs	r7, #1
  4128d8:	2a00      	cmp	r2, #0
  4128da:	d0fa      	beq.n	4128d2 <__mdiff+0xa6>
  4128dc:	6107      	str	r7, [r0, #16]
  4128de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4128e2:	462b      	mov	r3, r5
  4128e4:	f04f 0801 	mov.w	r8, #1
  4128e8:	4635      	mov	r5, r6
  4128ea:	461e      	mov	r6, r3
  4128ec:	e7ac      	b.n	412848 <__mdiff+0x1c>
  4128ee:	4620      	mov	r0, r4
  4128f0:	4639      	mov	r1, r7
  4128f2:	f7ff fd0d 	bl	412310 <_Balloc>
  4128f6:	2301      	movs	r3, #1
  4128f8:	6147      	str	r7, [r0, #20]
  4128fa:	6103      	str	r3, [r0, #16]
  4128fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00412900 <__ulp>:
  412900:	4b0e      	ldr	r3, [pc, #56]	; (41293c <__ulp+0x3c>)
  412902:	400b      	ands	r3, r1
  412904:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  412908:	2b00      	cmp	r3, #0
  41290a:	dd02      	ble.n	412912 <__ulp+0x12>
  41290c:	4619      	mov	r1, r3
  41290e:	2000      	movs	r0, #0
  412910:	4770      	bx	lr
  412912:	425b      	negs	r3, r3
  412914:	151b      	asrs	r3, r3, #20
  412916:	2b13      	cmp	r3, #19
  412918:	dd0a      	ble.n	412930 <__ulp+0x30>
  41291a:	2b32      	cmp	r3, #50	; 0x32
  41291c:	bfdd      	ittte	le
  41291e:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  412922:	2201      	movle	r2, #1
  412924:	fa02 f303 	lslle.w	r3, r2, r3
  412928:	2301      	movgt	r3, #1
  41292a:	2100      	movs	r1, #0
  41292c:	4618      	mov	r0, r3
  41292e:	4770      	bx	lr
  412930:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  412934:	fa42 f103 	asr.w	r1, r2, r3
  412938:	2000      	movs	r0, #0
  41293a:	4770      	bx	lr
  41293c:	7ff00000 	.word	0x7ff00000

00412940 <__b2d>:
  412940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  412942:	6904      	ldr	r4, [r0, #16]
  412944:	f100 0614 	add.w	r6, r0, #20
  412948:	eb06 0484 	add.w	r4, r6, r4, lsl #2
  41294c:	460f      	mov	r7, r1
  41294e:	f854 5c04 	ldr.w	r5, [r4, #-4]
  412952:	4628      	mov	r0, r5
  412954:	f7ff fda4 	bl	4124a0 <__hi0bits>
  412958:	f1c0 0320 	rsb	r3, r0, #32
  41295c:	280a      	cmp	r0, #10
  41295e:	603b      	str	r3, [r7, #0]
  412960:	f1a4 0104 	sub.w	r1, r4, #4
  412964:	dc19      	bgt.n	41299a <__b2d+0x5a>
  412966:	428e      	cmp	r6, r1
  412968:	f1c0 070b 	rsb	r7, r0, #11
  41296c:	bf38      	it	cc
  41296e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
  412972:	fa25 fc07 	lsr.w	ip, r5, r7
  412976:	f100 0015 	add.w	r0, r0, #21
  41297a:	bf38      	it	cc
  41297c:	fa21 f707 	lsrcc.w	r7, r1, r7
  412980:	fa05 f500 	lsl.w	r5, r5, r0
  412984:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  412988:	bf28      	it	cs
  41298a:	2700      	movcs	r7, #0
  41298c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  412990:	ea47 0205 	orr.w	r2, r7, r5
  412994:	4610      	mov	r0, r2
  412996:	4619      	mov	r1, r3
  412998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41299a:	428e      	cmp	r6, r1
  41299c:	bf36      	itet	cc
  41299e:	f1a4 0108 	subcc.w	r1, r4, #8
  4129a2:	2400      	movcs	r4, #0
  4129a4:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
  4129a8:	f1b0 070b 	subs.w	r7, r0, #11
  4129ac:	d019      	beq.n	4129e2 <__b2d+0xa2>
  4129ae:	42b1      	cmp	r1, r6
  4129b0:	bf88      	it	hi
  4129b2:	f851 1c04 	ldrhi.w	r1, [r1, #-4]
  4129b6:	fa05 f507 	lsl.w	r5, r5, r7
  4129ba:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  4129be:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
  4129c2:	fa24 fc00 	lsr.w	ip, r4, r0
  4129c6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  4129ca:	bf8c      	ite	hi
  4129cc:	fa21 f000 	lsrhi.w	r0, r1, r0
  4129d0:	2000      	movls	r0, #0
  4129d2:	40bc      	lsls	r4, r7
  4129d4:	ea45 030c 	orr.w	r3, r5, ip
  4129d8:	ea40 0204 	orr.w	r2, r0, r4
  4129dc:	4610      	mov	r0, r2
  4129de:	4619      	mov	r1, r3
  4129e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4129e2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
  4129e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  4129ea:	4622      	mov	r2, r4
  4129ec:	4610      	mov	r0, r2
  4129ee:	4619      	mov	r1, r3
  4129f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4129f2:	bf00      	nop

004129f4 <__d2b>:
  4129f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4129f8:	b083      	sub	sp, #12
  4129fa:	2101      	movs	r1, #1
  4129fc:	461d      	mov	r5, r3
  4129fe:	f3c3 560a 	ubfx	r6, r3, #20, #11
  412a02:	4614      	mov	r4, r2
  412a04:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  412a06:	f7ff fc83 	bl	412310 <_Balloc>
  412a0a:	f3c5 0313 	ubfx	r3, r5, #0, #20
  412a0e:	4680      	mov	r8, r0
  412a10:	b10e      	cbz	r6, 412a16 <__d2b+0x22>
  412a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  412a16:	9301      	str	r3, [sp, #4]
  412a18:	b324      	cbz	r4, 412a64 <__d2b+0x70>
  412a1a:	a802      	add	r0, sp, #8
  412a1c:	f840 4d08 	str.w	r4, [r0, #-8]!
  412a20:	4668      	mov	r0, sp
  412a22:	f7ff fd5d 	bl	4124e0 <__lo0bits>
  412a26:	2800      	cmp	r0, #0
  412a28:	d135      	bne.n	412a96 <__d2b+0xa2>
  412a2a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  412a2e:	f8c8 2014 	str.w	r2, [r8, #20]
  412a32:	2b00      	cmp	r3, #0
  412a34:	bf0c      	ite	eq
  412a36:	2401      	moveq	r4, #1
  412a38:	2402      	movne	r4, #2
  412a3a:	f8c8 3018 	str.w	r3, [r8, #24]
  412a3e:	f8c8 4010 	str.w	r4, [r8, #16]
  412a42:	b9de      	cbnz	r6, 412a7c <__d2b+0x88>
  412a44:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  412a48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  412a4c:	6038      	str	r0, [r7, #0]
  412a4e:	6918      	ldr	r0, [r3, #16]
  412a50:	f7ff fd26 	bl	4124a0 <__hi0bits>
  412a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  412a56:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  412a5a:	6018      	str	r0, [r3, #0]
  412a5c:	4640      	mov	r0, r8
  412a5e:	b003      	add	sp, #12
  412a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412a64:	a801      	add	r0, sp, #4
  412a66:	f7ff fd3b 	bl	4124e0 <__lo0bits>
  412a6a:	2401      	movs	r4, #1
  412a6c:	9b01      	ldr	r3, [sp, #4]
  412a6e:	f8c8 3014 	str.w	r3, [r8, #20]
  412a72:	3020      	adds	r0, #32
  412a74:	f8c8 4010 	str.w	r4, [r8, #16]
  412a78:	2e00      	cmp	r6, #0
  412a7a:	d0e3      	beq.n	412a44 <__d2b+0x50>
  412a7c:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
  412a80:	eb09 0300 	add.w	r3, r9, r0
  412a84:	603b      	str	r3, [r7, #0]
  412a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  412a88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  412a8c:	6018      	str	r0, [r3, #0]
  412a8e:	4640      	mov	r0, r8
  412a90:	b003      	add	sp, #12
  412a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412a96:	e89d 000c 	ldmia.w	sp, {r2, r3}
  412a9a:	f1c0 0120 	rsb	r1, r0, #32
  412a9e:	fa03 f101 	lsl.w	r1, r3, r1
  412aa2:	430a      	orrs	r2, r1
  412aa4:	40c3      	lsrs	r3, r0
  412aa6:	9301      	str	r3, [sp, #4]
  412aa8:	f8c8 2014 	str.w	r2, [r8, #20]
  412aac:	e7c1      	b.n	412a32 <__d2b+0x3e>
  412aae:	bf00      	nop

00412ab0 <__ratio>:
  412ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
  412ab2:	b083      	sub	sp, #12
  412ab4:	460e      	mov	r6, r1
  412ab6:	4669      	mov	r1, sp
  412ab8:	4607      	mov	r7, r0
  412aba:	f7ff ff41 	bl	412940 <__b2d>
  412abe:	4604      	mov	r4, r0
  412ac0:	460d      	mov	r5, r1
  412ac2:	4630      	mov	r0, r6
  412ac4:	a901      	add	r1, sp, #4
  412ac6:	f7ff ff3b 	bl	412940 <__b2d>
  412aca:	4602      	mov	r2, r0
  412acc:	460b      	mov	r3, r1
  412ace:	e89d 0003 	ldmia.w	sp, {r0, r1}
  412ad2:	693f      	ldr	r7, [r7, #16]
  412ad4:	6936      	ldr	r6, [r6, #16]
  412ad6:	1a41      	subs	r1, r0, r1
  412ad8:	ebc6 0e07 	rsb	lr, r6, r7
  412adc:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
  412ae0:	f1be 0f00 	cmp.w	lr, #0
  412ae4:	dd08      	ble.n	412af8 <__ratio+0x48>
  412ae6:	eb05 510e 	add.w	r1, r5, lr, lsl #20
  412aea:	460d      	mov	r5, r1
  412aec:	4620      	mov	r0, r4
  412aee:	4629      	mov	r1, r5
  412af0:	f002 fea4 	bl	41583c <__aeabi_ddiv>
  412af4:	b003      	add	sp, #12
  412af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412af8:	eba3 570e 	sub.w	r7, r3, lr, lsl #20
  412afc:	463b      	mov	r3, r7
  412afe:	e7f5      	b.n	412aec <__ratio+0x3c>

00412b00 <__copybits>:
  412b00:	b470      	push	{r4, r5, r6}
  412b02:	6915      	ldr	r5, [r2, #16]
  412b04:	f102 0314 	add.w	r3, r2, #20
  412b08:	3901      	subs	r1, #1
  412b0a:	114e      	asrs	r6, r1, #5
  412b0c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
  412b10:	3601      	adds	r6, #1
  412b12:	42ab      	cmp	r3, r5
  412b14:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  412b18:	d20c      	bcs.n	412b34 <__copybits+0x34>
  412b1a:	4601      	mov	r1, r0
  412b1c:	f853 4b04 	ldr.w	r4, [r3], #4
  412b20:	f841 4b04 	str.w	r4, [r1], #4
  412b24:	429d      	cmp	r5, r3
  412b26:	d8f9      	bhi.n	412b1c <__copybits+0x1c>
  412b28:	1aab      	subs	r3, r5, r2
  412b2a:	3b15      	subs	r3, #21
  412b2c:	f023 0303 	bic.w	r3, r3, #3
  412b30:	3304      	adds	r3, #4
  412b32:	4418      	add	r0, r3
  412b34:	4286      	cmp	r6, r0
  412b36:	d904      	bls.n	412b42 <__copybits+0x42>
  412b38:	2300      	movs	r3, #0
  412b3a:	f840 3b04 	str.w	r3, [r0], #4
  412b3e:	4286      	cmp	r6, r0
  412b40:	d8fb      	bhi.n	412b3a <__copybits+0x3a>
  412b42:	bc70      	pop	{r4, r5, r6}
  412b44:	4770      	bx	lr
  412b46:	bf00      	nop

00412b48 <__any_on>:
  412b48:	6903      	ldr	r3, [r0, #16]
  412b4a:	114a      	asrs	r2, r1, #5
  412b4c:	4293      	cmp	r3, r2
  412b4e:	b410      	push	{r4}
  412b50:	f100 0414 	add.w	r4, r0, #20
  412b54:	da10      	bge.n	412b78 <__any_on+0x30>
  412b56:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  412b5a:	429c      	cmp	r4, r3
  412b5c:	d221      	bcs.n	412ba2 <__any_on+0x5a>
  412b5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
  412b62:	3b04      	subs	r3, #4
  412b64:	b118      	cbz	r0, 412b6e <__any_on+0x26>
  412b66:	e015      	b.n	412b94 <__any_on+0x4c>
  412b68:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  412b6c:	b992      	cbnz	r2, 412b94 <__any_on+0x4c>
  412b6e:	429c      	cmp	r4, r3
  412b70:	d3fa      	bcc.n	412b68 <__any_on+0x20>
  412b72:	f85d 4b04 	ldr.w	r4, [sp], #4
  412b76:	4770      	bx	lr
  412b78:	dd10      	ble.n	412b9c <__any_on+0x54>
  412b7a:	f011 011f 	ands.w	r1, r1, #31
  412b7e:	d00d      	beq.n	412b9c <__any_on+0x54>
  412b80:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  412b84:	fa20 f301 	lsr.w	r3, r0, r1
  412b88:	fa03 f101 	lsl.w	r1, r3, r1
  412b8c:	4281      	cmp	r1, r0
  412b8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  412b92:	d0e2      	beq.n	412b5a <__any_on+0x12>
  412b94:	2001      	movs	r0, #1
  412b96:	f85d 4b04 	ldr.w	r4, [sp], #4
  412b9a:	4770      	bx	lr
  412b9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  412ba0:	e7db      	b.n	412b5a <__any_on+0x12>
  412ba2:	2000      	movs	r0, #0
  412ba4:	e7e5      	b.n	412b72 <__any_on+0x2a>
  412ba6:	bf00      	nop

00412ba8 <_read_r>:
  412ba8:	b570      	push	{r4, r5, r6, lr}
  412baa:	4c08      	ldr	r4, [pc, #32]	; (412bcc <_read_r+0x24>)
  412bac:	4606      	mov	r6, r0
  412bae:	2500      	movs	r5, #0
  412bb0:	4608      	mov	r0, r1
  412bb2:	4611      	mov	r1, r2
  412bb4:	461a      	mov	r2, r3
  412bb6:	6025      	str	r5, [r4, #0]
  412bb8:	f7f3 fd42 	bl	406640 <_read>
  412bbc:	1c43      	adds	r3, r0, #1
  412bbe:	d000      	beq.n	412bc2 <_read_r+0x1a>
  412bc0:	bd70      	pop	{r4, r5, r6, pc}
  412bc2:	6823      	ldr	r3, [r4, #0]
  412bc4:	2b00      	cmp	r3, #0
  412bc6:	d0fb      	beq.n	412bc0 <_read_r+0x18>
  412bc8:	6033      	str	r3, [r6, #0]
  412bca:	bd70      	pop	{r4, r5, r6, pc}
  412bcc:	200099d0 	.word	0x200099d0

00412bd0 <_realloc_r>:
  412bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412bd4:	460c      	mov	r4, r1
  412bd6:	b083      	sub	sp, #12
  412bd8:	4690      	mov	r8, r2
  412bda:	4681      	mov	r9, r0
  412bdc:	2900      	cmp	r1, #0
  412bde:	f000 80e2 	beq.w	412da6 <_realloc_r+0x1d6>
  412be2:	f7ff fb91 	bl	412308 <__malloc_lock>
  412be6:	f108 060b 	add.w	r6, r8, #11
  412bea:	f854 3c04 	ldr.w	r3, [r4, #-4]
  412bee:	2e16      	cmp	r6, #22
  412bf0:	f023 0503 	bic.w	r5, r3, #3
  412bf4:	f1a4 0708 	sub.w	r7, r4, #8
  412bf8:	d84b      	bhi.n	412c92 <_realloc_r+0xc2>
  412bfa:	2110      	movs	r1, #16
  412bfc:	460e      	mov	r6, r1
  412bfe:	45b0      	cmp	r8, r6
  412c00:	d84c      	bhi.n	412c9c <_realloc_r+0xcc>
  412c02:	428d      	cmp	r5, r1
  412c04:	da78      	bge.n	412cf8 <_realloc_r+0x128>
  412c06:	f8df b390 	ldr.w	fp, [pc, #912]	; 412f98 <_realloc_r+0x3c8>
  412c0a:	f8db e008 	ldr.w	lr, [fp, #8]
  412c0e:	1978      	adds	r0, r7, r5
  412c10:	4586      	cmp	lr, r0
  412c12:	f000 80ce 	beq.w	412db2 <_realloc_r+0x1e2>
  412c16:	6842      	ldr	r2, [r0, #4]
  412c18:	f022 0c01 	bic.w	ip, r2, #1
  412c1c:	4484      	add	ip, r0
  412c1e:	f8dc c004 	ldr.w	ip, [ip, #4]
  412c22:	f01c 0f01 	tst.w	ip, #1
  412c26:	d07a      	beq.n	412d1e <_realloc_r+0x14e>
  412c28:	2200      	movs	r2, #0
  412c2a:	4610      	mov	r0, r2
  412c2c:	07db      	lsls	r3, r3, #31
  412c2e:	f100 8092 	bmi.w	412d56 <_realloc_r+0x186>
  412c32:	f854 3c08 	ldr.w	r3, [r4, #-8]
  412c36:	ebc3 0a07 	rsb	sl, r3, r7
  412c3a:	f8da 3004 	ldr.w	r3, [sl, #4]
  412c3e:	f023 0303 	bic.w	r3, r3, #3
  412c42:	442b      	add	r3, r5
  412c44:	b388      	cbz	r0, 412caa <_realloc_r+0xda>
  412c46:	4570      	cmp	r0, lr
  412c48:	f000 80ed 	beq.w	412e26 <_realloc_r+0x256>
  412c4c:	eb02 0e03 	add.w	lr, r2, r3
  412c50:	458e      	cmp	lr, r1
  412c52:	db2a      	blt.n	412caa <_realloc_r+0xda>
  412c54:	68c3      	ldr	r3, [r0, #12]
  412c56:	6882      	ldr	r2, [r0, #8]
  412c58:	4657      	mov	r7, sl
  412c5a:	60d3      	str	r3, [r2, #12]
  412c5c:	609a      	str	r2, [r3, #8]
  412c5e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  412c62:	f8da 300c 	ldr.w	r3, [sl, #12]
  412c66:	60cb      	str	r3, [r1, #12]
  412c68:	1f2a      	subs	r2, r5, #4
  412c6a:	2a24      	cmp	r2, #36	; 0x24
  412c6c:	6099      	str	r1, [r3, #8]
  412c6e:	f200 8126 	bhi.w	412ebe <_realloc_r+0x2ee>
  412c72:	2a13      	cmp	r2, #19
  412c74:	f240 80b3 	bls.w	412dde <_realloc_r+0x20e>
  412c78:	6823      	ldr	r3, [r4, #0]
  412c7a:	f8ca 3008 	str.w	r3, [sl, #8]
  412c7e:	6863      	ldr	r3, [r4, #4]
  412c80:	f8ca 300c 	str.w	r3, [sl, #12]
  412c84:	2a1b      	cmp	r2, #27
  412c86:	f200 8130 	bhi.w	412eea <_realloc_r+0x31a>
  412c8a:	3408      	adds	r4, #8
  412c8c:	f10a 0310 	add.w	r3, sl, #16
  412c90:	e0a6      	b.n	412de0 <_realloc_r+0x210>
  412c92:	f026 0607 	bic.w	r6, r6, #7
  412c96:	2e00      	cmp	r6, #0
  412c98:	4631      	mov	r1, r6
  412c9a:	dab0      	bge.n	412bfe <_realloc_r+0x2e>
  412c9c:	230c      	movs	r3, #12
  412c9e:	2000      	movs	r0, #0
  412ca0:	f8c9 3000 	str.w	r3, [r9]
  412ca4:	b003      	add	sp, #12
  412ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412caa:	428b      	cmp	r3, r1
  412cac:	db53      	blt.n	412d56 <_realloc_r+0x186>
  412cae:	4657      	mov	r7, sl
  412cb0:	f8da 100c 	ldr.w	r1, [sl, #12]
  412cb4:	f857 0f08 	ldr.w	r0, [r7, #8]!
  412cb8:	1f2a      	subs	r2, r5, #4
  412cba:	2a24      	cmp	r2, #36	; 0x24
  412cbc:	60c1      	str	r1, [r0, #12]
  412cbe:	6088      	str	r0, [r1, #8]
  412cc0:	f200 8109 	bhi.w	412ed6 <_realloc_r+0x306>
  412cc4:	2a13      	cmp	r2, #19
  412cc6:	f240 8104 	bls.w	412ed2 <_realloc_r+0x302>
  412cca:	6821      	ldr	r1, [r4, #0]
  412ccc:	f8ca 1008 	str.w	r1, [sl, #8]
  412cd0:	6861      	ldr	r1, [r4, #4]
  412cd2:	f8ca 100c 	str.w	r1, [sl, #12]
  412cd6:	2a1b      	cmp	r2, #27
  412cd8:	f200 811c 	bhi.w	412f14 <_realloc_r+0x344>
  412cdc:	3408      	adds	r4, #8
  412cde:	f10a 0210 	add.w	r2, sl, #16
  412ce2:	6821      	ldr	r1, [r4, #0]
  412ce4:	6011      	str	r1, [r2, #0]
  412ce6:	6861      	ldr	r1, [r4, #4]
  412ce8:	6051      	str	r1, [r2, #4]
  412cea:	68a1      	ldr	r1, [r4, #8]
  412cec:	6091      	str	r1, [r2, #8]
  412cee:	461d      	mov	r5, r3
  412cf0:	f8da 3004 	ldr.w	r3, [sl, #4]
  412cf4:	463c      	mov	r4, r7
  412cf6:	4657      	mov	r7, sl
  412cf8:	1baa      	subs	r2, r5, r6
  412cfa:	2a0f      	cmp	r2, #15
  412cfc:	f003 0301 	and.w	r3, r3, #1
  412d00:	d819      	bhi.n	412d36 <_realloc_r+0x166>
  412d02:	432b      	orrs	r3, r5
  412d04:	443d      	add	r5, r7
  412d06:	607b      	str	r3, [r7, #4]
  412d08:	686b      	ldr	r3, [r5, #4]
  412d0a:	f043 0301 	orr.w	r3, r3, #1
  412d0e:	606b      	str	r3, [r5, #4]
  412d10:	4648      	mov	r0, r9
  412d12:	f7ff fafb 	bl	41230c <__malloc_unlock>
  412d16:	4620      	mov	r0, r4
  412d18:	b003      	add	sp, #12
  412d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412d1e:	f022 0203 	bic.w	r2, r2, #3
  412d22:	eb02 0c05 	add.w	ip, r2, r5
  412d26:	458c      	cmp	ip, r1
  412d28:	db80      	blt.n	412c2c <_realloc_r+0x5c>
  412d2a:	68c2      	ldr	r2, [r0, #12]
  412d2c:	6881      	ldr	r1, [r0, #8]
  412d2e:	4665      	mov	r5, ip
  412d30:	60ca      	str	r2, [r1, #12]
  412d32:	6091      	str	r1, [r2, #8]
  412d34:	e7e0      	b.n	412cf8 <_realloc_r+0x128>
  412d36:	19b9      	adds	r1, r7, r6
  412d38:	f042 0001 	orr.w	r0, r2, #1
  412d3c:	431e      	orrs	r6, r3
  412d3e:	440a      	add	r2, r1
  412d40:	607e      	str	r6, [r7, #4]
  412d42:	6048      	str	r0, [r1, #4]
  412d44:	6853      	ldr	r3, [r2, #4]
  412d46:	f043 0301 	orr.w	r3, r3, #1
  412d4a:	3108      	adds	r1, #8
  412d4c:	6053      	str	r3, [r2, #4]
  412d4e:	4648      	mov	r0, r9
  412d50:	f7fe fc2a 	bl	4115a8 <_free_r>
  412d54:	e7dc      	b.n	412d10 <_realloc_r+0x140>
  412d56:	4641      	mov	r1, r8
  412d58:	4648      	mov	r0, r9
  412d5a:	f7fe ff4d 	bl	411bf8 <_malloc_r>
  412d5e:	4680      	mov	r8, r0
  412d60:	b1d0      	cbz	r0, 412d98 <_realloc_r+0x1c8>
  412d62:	f854 3c04 	ldr.w	r3, [r4, #-4]
  412d66:	f023 0201 	bic.w	r2, r3, #1
  412d6a:	443a      	add	r2, r7
  412d6c:	f1a0 0108 	sub.w	r1, r0, #8
  412d70:	4291      	cmp	r1, r2
  412d72:	f000 809e 	beq.w	412eb2 <_realloc_r+0x2e2>
  412d76:	1f2a      	subs	r2, r5, #4
  412d78:	2a24      	cmp	r2, #36	; 0x24
  412d7a:	d850      	bhi.n	412e1e <_realloc_r+0x24e>
  412d7c:	2a13      	cmp	r2, #19
  412d7e:	d823      	bhi.n	412dc8 <_realloc_r+0x1f8>
  412d80:	4603      	mov	r3, r0
  412d82:	4622      	mov	r2, r4
  412d84:	6811      	ldr	r1, [r2, #0]
  412d86:	6019      	str	r1, [r3, #0]
  412d88:	6851      	ldr	r1, [r2, #4]
  412d8a:	6059      	str	r1, [r3, #4]
  412d8c:	6892      	ldr	r2, [r2, #8]
  412d8e:	609a      	str	r2, [r3, #8]
  412d90:	4621      	mov	r1, r4
  412d92:	4648      	mov	r0, r9
  412d94:	f7fe fc08 	bl	4115a8 <_free_r>
  412d98:	4648      	mov	r0, r9
  412d9a:	f7ff fab7 	bl	41230c <__malloc_unlock>
  412d9e:	4640      	mov	r0, r8
  412da0:	b003      	add	sp, #12
  412da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412da6:	4611      	mov	r1, r2
  412da8:	b003      	add	sp, #12
  412daa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412dae:	f7fe bf23 	b.w	411bf8 <_malloc_r>
  412db2:	f8de 2004 	ldr.w	r2, [lr, #4]
  412db6:	f022 0203 	bic.w	r2, r2, #3
  412dba:	1950      	adds	r0, r2, r5
  412dbc:	f106 0c10 	add.w	ip, r6, #16
  412dc0:	4560      	cmp	r0, ip
  412dc2:	da19      	bge.n	412df8 <_realloc_r+0x228>
  412dc4:	4670      	mov	r0, lr
  412dc6:	e731      	b.n	412c2c <_realloc_r+0x5c>
  412dc8:	6823      	ldr	r3, [r4, #0]
  412dca:	6003      	str	r3, [r0, #0]
  412dcc:	6863      	ldr	r3, [r4, #4]
  412dce:	6043      	str	r3, [r0, #4]
  412dd0:	2a1b      	cmp	r2, #27
  412dd2:	d863      	bhi.n	412e9c <_realloc_r+0x2cc>
  412dd4:	f100 0308 	add.w	r3, r0, #8
  412dd8:	f104 0208 	add.w	r2, r4, #8
  412ddc:	e7d2      	b.n	412d84 <_realloc_r+0x1b4>
  412dde:	463b      	mov	r3, r7
  412de0:	6822      	ldr	r2, [r4, #0]
  412de2:	601a      	str	r2, [r3, #0]
  412de4:	6862      	ldr	r2, [r4, #4]
  412de6:	605a      	str	r2, [r3, #4]
  412de8:	68a2      	ldr	r2, [r4, #8]
  412dea:	609a      	str	r2, [r3, #8]
  412dec:	463c      	mov	r4, r7
  412dee:	4675      	mov	r5, lr
  412df0:	f8da 3004 	ldr.w	r3, [sl, #4]
  412df4:	4657      	mov	r7, sl
  412df6:	e77f      	b.n	412cf8 <_realloc_r+0x128>
  412df8:	4437      	add	r7, r6
  412dfa:	1b83      	subs	r3, r0, r6
  412dfc:	f043 0301 	orr.w	r3, r3, #1
  412e00:	f8cb 7008 	str.w	r7, [fp, #8]
  412e04:	607b      	str	r3, [r7, #4]
  412e06:	f854 3c04 	ldr.w	r3, [r4, #-4]
  412e0a:	f003 0301 	and.w	r3, r3, #1
  412e0e:	431e      	orrs	r6, r3
  412e10:	4648      	mov	r0, r9
  412e12:	f844 6c04 	str.w	r6, [r4, #-4]
  412e16:	f7ff fa79 	bl	41230c <__malloc_unlock>
  412e1a:	4620      	mov	r0, r4
  412e1c:	e77c      	b.n	412d18 <_realloc_r+0x148>
  412e1e:	4621      	mov	r1, r4
  412e20:	f7ff fa12 	bl	412248 <memmove>
  412e24:	e7b4      	b.n	412d90 <_realloc_r+0x1c0>
  412e26:	eb02 0c03 	add.w	ip, r2, r3
  412e2a:	f106 0210 	add.w	r2, r6, #16
  412e2e:	4594      	cmp	ip, r2
  412e30:	f6ff af3b 	blt.w	412caa <_realloc_r+0xda>
  412e34:	4657      	mov	r7, sl
  412e36:	f8da 300c 	ldr.w	r3, [sl, #12]
  412e3a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  412e3e:	1f2a      	subs	r2, r5, #4
  412e40:	2a24      	cmp	r2, #36	; 0x24
  412e42:	60cb      	str	r3, [r1, #12]
  412e44:	6099      	str	r1, [r3, #8]
  412e46:	f200 8087 	bhi.w	412f58 <_realloc_r+0x388>
  412e4a:	2a13      	cmp	r2, #19
  412e4c:	d978      	bls.n	412f40 <_realloc_r+0x370>
  412e4e:	6823      	ldr	r3, [r4, #0]
  412e50:	f8ca 3008 	str.w	r3, [sl, #8]
  412e54:	6863      	ldr	r3, [r4, #4]
  412e56:	f8ca 300c 	str.w	r3, [sl, #12]
  412e5a:	2a1b      	cmp	r2, #27
  412e5c:	f200 8085 	bhi.w	412f6a <_realloc_r+0x39a>
  412e60:	3408      	adds	r4, #8
  412e62:	f10a 0310 	add.w	r3, sl, #16
  412e66:	6822      	ldr	r2, [r4, #0]
  412e68:	601a      	str	r2, [r3, #0]
  412e6a:	6862      	ldr	r2, [r4, #4]
  412e6c:	605a      	str	r2, [r3, #4]
  412e6e:	68a2      	ldr	r2, [r4, #8]
  412e70:	609a      	str	r2, [r3, #8]
  412e72:	eb0a 0306 	add.w	r3, sl, r6
  412e76:	ebc6 020c 	rsb	r2, r6, ip
  412e7a:	f042 0201 	orr.w	r2, r2, #1
  412e7e:	f8cb 3008 	str.w	r3, [fp, #8]
  412e82:	605a      	str	r2, [r3, #4]
  412e84:	f8da 3004 	ldr.w	r3, [sl, #4]
  412e88:	f003 0301 	and.w	r3, r3, #1
  412e8c:	431e      	orrs	r6, r3
  412e8e:	4648      	mov	r0, r9
  412e90:	f8ca 6004 	str.w	r6, [sl, #4]
  412e94:	f7ff fa3a 	bl	41230c <__malloc_unlock>
  412e98:	4638      	mov	r0, r7
  412e9a:	e73d      	b.n	412d18 <_realloc_r+0x148>
  412e9c:	68a3      	ldr	r3, [r4, #8]
  412e9e:	6083      	str	r3, [r0, #8]
  412ea0:	68e3      	ldr	r3, [r4, #12]
  412ea2:	60c3      	str	r3, [r0, #12]
  412ea4:	2a24      	cmp	r2, #36	; 0x24
  412ea6:	d02c      	beq.n	412f02 <_realloc_r+0x332>
  412ea8:	f100 0310 	add.w	r3, r0, #16
  412eac:	f104 0210 	add.w	r2, r4, #16
  412eb0:	e768      	b.n	412d84 <_realloc_r+0x1b4>
  412eb2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  412eb6:	f022 0203 	bic.w	r2, r2, #3
  412eba:	4415      	add	r5, r2
  412ebc:	e71c      	b.n	412cf8 <_realloc_r+0x128>
  412ebe:	4621      	mov	r1, r4
  412ec0:	4638      	mov	r0, r7
  412ec2:	4675      	mov	r5, lr
  412ec4:	463c      	mov	r4, r7
  412ec6:	f7ff f9bf 	bl	412248 <memmove>
  412eca:	4657      	mov	r7, sl
  412ecc:	f8da 3004 	ldr.w	r3, [sl, #4]
  412ed0:	e712      	b.n	412cf8 <_realloc_r+0x128>
  412ed2:	463a      	mov	r2, r7
  412ed4:	e705      	b.n	412ce2 <_realloc_r+0x112>
  412ed6:	4621      	mov	r1, r4
  412ed8:	4638      	mov	r0, r7
  412eda:	461d      	mov	r5, r3
  412edc:	463c      	mov	r4, r7
  412ede:	f7ff f9b3 	bl	412248 <memmove>
  412ee2:	4657      	mov	r7, sl
  412ee4:	f8da 3004 	ldr.w	r3, [sl, #4]
  412ee8:	e706      	b.n	412cf8 <_realloc_r+0x128>
  412eea:	68a3      	ldr	r3, [r4, #8]
  412eec:	f8ca 3010 	str.w	r3, [sl, #16]
  412ef0:	68e3      	ldr	r3, [r4, #12]
  412ef2:	f8ca 3014 	str.w	r3, [sl, #20]
  412ef6:	2a24      	cmp	r2, #36	; 0x24
  412ef8:	d018      	beq.n	412f2c <_realloc_r+0x35c>
  412efa:	3410      	adds	r4, #16
  412efc:	f10a 0318 	add.w	r3, sl, #24
  412f00:	e76e      	b.n	412de0 <_realloc_r+0x210>
  412f02:	6923      	ldr	r3, [r4, #16]
  412f04:	6103      	str	r3, [r0, #16]
  412f06:	6963      	ldr	r3, [r4, #20]
  412f08:	6143      	str	r3, [r0, #20]
  412f0a:	f104 0218 	add.w	r2, r4, #24
  412f0e:	f100 0318 	add.w	r3, r0, #24
  412f12:	e737      	b.n	412d84 <_realloc_r+0x1b4>
  412f14:	68a1      	ldr	r1, [r4, #8]
  412f16:	f8ca 1010 	str.w	r1, [sl, #16]
  412f1a:	68e1      	ldr	r1, [r4, #12]
  412f1c:	f8ca 1014 	str.w	r1, [sl, #20]
  412f20:	2a24      	cmp	r2, #36	; 0x24
  412f22:	d00f      	beq.n	412f44 <_realloc_r+0x374>
  412f24:	3410      	adds	r4, #16
  412f26:	f10a 0218 	add.w	r2, sl, #24
  412f2a:	e6da      	b.n	412ce2 <_realloc_r+0x112>
  412f2c:	6923      	ldr	r3, [r4, #16]
  412f2e:	f8ca 3018 	str.w	r3, [sl, #24]
  412f32:	6963      	ldr	r3, [r4, #20]
  412f34:	f8ca 301c 	str.w	r3, [sl, #28]
  412f38:	3418      	adds	r4, #24
  412f3a:	f10a 0320 	add.w	r3, sl, #32
  412f3e:	e74f      	b.n	412de0 <_realloc_r+0x210>
  412f40:	463b      	mov	r3, r7
  412f42:	e790      	b.n	412e66 <_realloc_r+0x296>
  412f44:	6922      	ldr	r2, [r4, #16]
  412f46:	f8ca 2018 	str.w	r2, [sl, #24]
  412f4a:	6962      	ldr	r2, [r4, #20]
  412f4c:	f8ca 201c 	str.w	r2, [sl, #28]
  412f50:	3418      	adds	r4, #24
  412f52:	f10a 0220 	add.w	r2, sl, #32
  412f56:	e6c4      	b.n	412ce2 <_realloc_r+0x112>
  412f58:	4621      	mov	r1, r4
  412f5a:	4638      	mov	r0, r7
  412f5c:	f8cd c004 	str.w	ip, [sp, #4]
  412f60:	f7ff f972 	bl	412248 <memmove>
  412f64:	f8dd c004 	ldr.w	ip, [sp, #4]
  412f68:	e783      	b.n	412e72 <_realloc_r+0x2a2>
  412f6a:	68a3      	ldr	r3, [r4, #8]
  412f6c:	f8ca 3010 	str.w	r3, [sl, #16]
  412f70:	68e3      	ldr	r3, [r4, #12]
  412f72:	f8ca 3014 	str.w	r3, [sl, #20]
  412f76:	2a24      	cmp	r2, #36	; 0x24
  412f78:	d003      	beq.n	412f82 <_realloc_r+0x3b2>
  412f7a:	3410      	adds	r4, #16
  412f7c:	f10a 0318 	add.w	r3, sl, #24
  412f80:	e771      	b.n	412e66 <_realloc_r+0x296>
  412f82:	6923      	ldr	r3, [r4, #16]
  412f84:	f8ca 3018 	str.w	r3, [sl, #24]
  412f88:	6963      	ldr	r3, [r4, #20]
  412f8a:	f8ca 301c 	str.w	r3, [sl, #28]
  412f8e:	3418      	adds	r4, #24
  412f90:	f10a 0320 	add.w	r3, sl, #32
  412f94:	e767      	b.n	412e66 <_realloc_r+0x296>
  412f96:	bf00      	nop
  412f98:	200007fc 	.word	0x200007fc

00412f9c <__fpclassifyd>:
  412f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  412fa0:	b410      	push	{r4}
  412fa2:	d008      	beq.n	412fb6 <__fpclassifyd+0x1a>
  412fa4:	4a0f      	ldr	r2, [pc, #60]	; (412fe4 <__fpclassifyd+0x48>)
  412fa6:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  412faa:	4294      	cmp	r4, r2
  412fac:	d80a      	bhi.n	412fc4 <__fpclassifyd+0x28>
  412fae:	2004      	movs	r0, #4
  412fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  412fb4:	4770      	bx	lr
  412fb6:	2800      	cmp	r0, #0
  412fb8:	bf0c      	ite	eq
  412fba:	2002      	moveq	r0, #2
  412fbc:	2003      	movne	r0, #3
  412fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
  412fc2:	4770      	bx	lr
  412fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  412fc8:	d201      	bcs.n	412fce <__fpclassifyd+0x32>
  412fca:	2003      	movs	r0, #3
  412fcc:	e7f7      	b.n	412fbe <__fpclassifyd+0x22>
  412fce:	4a06      	ldr	r2, [pc, #24]	; (412fe8 <__fpclassifyd+0x4c>)
  412fd0:	4293      	cmp	r3, r2
  412fd2:	d001      	beq.n	412fd8 <__fpclassifyd+0x3c>
  412fd4:	2000      	movs	r0, #0
  412fd6:	e7f2      	b.n	412fbe <__fpclassifyd+0x22>
  412fd8:	f1d0 0001 	rsbs	r0, r0, #1
  412fdc:	bf38      	it	cc
  412fde:	2000      	movcc	r0, #0
  412fe0:	e7ed      	b.n	412fbe <__fpclassifyd+0x22>
  412fe2:	bf00      	nop
  412fe4:	7fdfffff 	.word	0x7fdfffff
  412fe8:	7ff00000 	.word	0x7ff00000

00412fec <_sbrk_r>:
  412fec:	b538      	push	{r3, r4, r5, lr}
  412fee:	4c07      	ldr	r4, [pc, #28]	; (41300c <_sbrk_r+0x20>)
  412ff0:	2300      	movs	r3, #0
  412ff2:	4605      	mov	r5, r0
  412ff4:	4608      	mov	r0, r1
  412ff6:	6023      	str	r3, [r4, #0]
  412ff8:	f7f9 f8f8 	bl	40c1ec <_sbrk>
  412ffc:	1c43      	adds	r3, r0, #1
  412ffe:	d000      	beq.n	413002 <_sbrk_r+0x16>
  413000:	bd38      	pop	{r3, r4, r5, pc}
  413002:	6823      	ldr	r3, [r4, #0]
  413004:	2b00      	cmp	r3, #0
  413006:	d0fb      	beq.n	413000 <_sbrk_r+0x14>
  413008:	602b      	str	r3, [r5, #0]
  41300a:	bd38      	pop	{r3, r4, r5, pc}
  41300c:	200099d0 	.word	0x200099d0

00413010 <__sccl>:
  413010:	b470      	push	{r4, r5, r6}
  413012:	780c      	ldrb	r4, [r1, #0]
  413014:	2c5e      	cmp	r4, #94	; 0x5e
  413016:	d02e      	beq.n	413076 <__sccl+0x66>
  413018:	2200      	movs	r2, #0
  41301a:	1c4d      	adds	r5, r1, #1
  41301c:	4616      	mov	r6, r2
  41301e:	2300      	movs	r3, #0
  413020:	54c2      	strb	r2, [r0, r3]
  413022:	3301      	adds	r3, #1
  413024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  413028:	d1fa      	bne.n	413020 <__sccl+0x10>
  41302a:	b184      	cbz	r4, 41304e <__sccl+0x3e>
  41302c:	f086 0201 	eor.w	r2, r6, #1
  413030:	5502      	strb	r2, [r0, r4]
  413032:	1c6e      	adds	r6, r5, #1
  413034:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  413038:	2b2d      	cmp	r3, #45	; 0x2d
  41303a:	d00e      	beq.n	41305a <__sccl+0x4a>
  41303c:	2b5d      	cmp	r3, #93	; 0x5d
  41303e:	d009      	beq.n	413054 <__sccl+0x44>
  413040:	b113      	cbz	r3, 413048 <__sccl+0x38>
  413042:	461c      	mov	r4, r3
  413044:	4635      	mov	r5, r6
  413046:	e7f3      	b.n	413030 <__sccl+0x20>
  413048:	4628      	mov	r0, r5
  41304a:	bc70      	pop	{r4, r5, r6}
  41304c:	4770      	bx	lr
  41304e:	1e68      	subs	r0, r5, #1
  413050:	bc70      	pop	{r4, r5, r6}
  413052:	4770      	bx	lr
  413054:	4630      	mov	r0, r6
  413056:	bc70      	pop	{r4, r5, r6}
  413058:	4770      	bx	lr
  41305a:	7869      	ldrb	r1, [r5, #1]
  41305c:	295d      	cmp	r1, #93	; 0x5d
  41305e:	d0f0      	beq.n	413042 <__sccl+0x32>
  413060:	428c      	cmp	r4, r1
  413062:	dcee      	bgt.n	413042 <__sccl+0x32>
  413064:	3502      	adds	r5, #2
  413066:	1903      	adds	r3, r0, r4
  413068:	3401      	adds	r4, #1
  41306a:	42a1      	cmp	r1, r4
  41306c:	f803 2f01 	strb.w	r2, [r3, #1]!
  413070:	dcfa      	bgt.n	413068 <__sccl+0x58>
  413072:	3602      	adds	r6, #2
  413074:	e7de      	b.n	413034 <__sccl+0x24>
  413076:	2201      	movs	r2, #1
  413078:	784c      	ldrb	r4, [r1, #1]
  41307a:	4616      	mov	r6, r2
  41307c:	1c8d      	adds	r5, r1, #2
  41307e:	e7ce      	b.n	41301e <__sccl+0xe>

00413080 <nanf>:
  413080:	4800      	ldr	r0, [pc, #0]	; (413084 <nanf+0x4>)
  413082:	4770      	bx	lr
  413084:	7fc00000 	.word	0x7fc00000

00413088 <sulp>:
  413088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41308c:	460d      	mov	r5, r1
  41308e:	4690      	mov	r8, r2
  413090:	f7ff fc36 	bl	412900 <__ulp>
  413094:	4606      	mov	r6, r0
  413096:	460f      	mov	r7, r1
  413098:	f1b8 0f00 	cmp.w	r8, #0
  41309c:	d00f      	beq.n	4130be <sulp+0x36>
  41309e:	f3c5 530a 	ubfx	r3, r5, #20, #11
  4130a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  4130a6:	2b00      	cmp	r3, #0
  4130a8:	dd09      	ble.n	4130be <sulp+0x36>
  4130aa:	051c      	lsls	r4, r3, #20
  4130ac:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
  4130b0:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
  4130b4:	2200      	movs	r2, #0
  4130b6:	f002 fa97 	bl	4155e8 <__aeabi_dmul>
  4130ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4130be:	4630      	mov	r0, r6
  4130c0:	4639      	mov	r1, r7
  4130c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4130c6:	bf00      	nop

004130c8 <_strtod_r>:
  4130c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4130cc:	b09f      	sub	sp, #124	; 0x7c
  4130ce:	460d      	mov	r5, r1
  4130d0:	9119      	str	r1, [sp, #100]	; 0x64
  4130d2:	4683      	mov	fp, r0
  4130d4:	9205      	str	r2, [sp, #20]
  4130d6:	2000      	movs	r0, #0
  4130d8:	460a      	mov	r2, r1
  4130da:	2100      	movs	r1, #0
  4130dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4130e0:	2300      	movs	r3, #0
  4130e2:	931a      	str	r3, [sp, #104]	; 0x68
  4130e4:	4616      	mov	r6, r2
  4130e6:	f812 4b01 	ldrb.w	r4, [r2], #1
  4130ea:	2c2d      	cmp	r4, #45	; 0x2d
  4130ec:	f200 8158 	bhi.w	4133a0 <_strtod_r+0x2d8>
  4130f0:	e8df f014 	tbh	[pc, r4, lsl #1]
  4130f4:	01560039 	.word	0x01560039
  4130f8:	01560156 	.word	0x01560156
  4130fc:	01560156 	.word	0x01560156
  413100:	01560156 	.word	0x01560156
  413104:	007d0156 	.word	0x007d0156
  413108:	007d007d 	.word	0x007d007d
  41310c:	007d007d 	.word	0x007d007d
  413110:	01560156 	.word	0x01560156
  413114:	01560156 	.word	0x01560156
  413118:	01560156 	.word	0x01560156
  41311c:	01560156 	.word	0x01560156
  413120:	01560156 	.word	0x01560156
  413124:	01560156 	.word	0x01560156
  413128:	01560156 	.word	0x01560156
  41312c:	01560156 	.word	0x01560156
  413130:	01560156 	.word	0x01560156
  413134:	0156007d 	.word	0x0156007d
  413138:	01560156 	.word	0x01560156
  41313c:	01560156 	.word	0x01560156
  413140:	01560156 	.word	0x01560156
  413144:	01560156 	.word	0x01560156
  413148:	004d0156 	.word	0x004d0156
  41314c:	007f0156 	.word	0x007f0156
  413150:	2300      	movs	r3, #0
  413152:	2101      	movs	r1, #1
  413154:	469a      	mov	sl, r3
  413156:	910b      	str	r1, [sp, #44]	; 0x2c
  413158:	2800      	cmp	r0, #0
  41315a:	f040 8151 	bne.w	413400 <_strtod_r+0x338>
  41315e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  413160:	2a00      	cmp	r2, #0
  413162:	f040 814d 	bne.w	413400 <_strtod_r+0x338>
  413166:	2000      	movs	r0, #0
  413168:	f04f 0800 	mov.w	r8, #0
  41316c:	f04f 0900 	mov.w	r9, #0
  413170:	9519      	str	r5, [sp, #100]	; 0x64
  413172:	9007      	str	r0, [sp, #28]
  413174:	9805      	ldr	r0, [sp, #20]
  413176:	b108      	cbz	r0, 41317c <_strtod_r+0xb4>
  413178:	9b19      	ldr	r3, [sp, #100]	; 0x64
  41317a:	6003      	str	r3, [r0, #0]
  41317c:	9907      	ldr	r1, [sp, #28]
  41317e:	2900      	cmp	r1, #0
  413180:	f040 809e 	bne.w	4132c0 <_strtod_r+0x1f8>
  413184:	4640      	mov	r0, r8
  413186:	4649      	mov	r1, r9
  413188:	b01f      	add	sp, #124	; 0x7c
  41318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41318e:	2300      	movs	r3, #0
  413190:	9307      	str	r3, [sp, #28]
  413192:	1c73      	adds	r3, r6, #1
  413194:	9319      	str	r3, [sp, #100]	; 0x64
  413196:	7874      	ldrb	r4, [r6, #1]
  413198:	2c00      	cmp	r4, #0
  41319a:	d0e4      	beq.n	413166 <_strtod_r+0x9e>
  41319c:	2c30      	cmp	r4, #48	; 0x30
  41319e:	461e      	mov	r6, r3
  4131a0:	f000 8103 	beq.w	4133aa <_strtod_r+0x2e2>
  4131a4:	2300      	movs	r3, #0
  4131a6:	9606      	str	r6, [sp, #24]
  4131a8:	930a      	str	r3, [sp, #40]	; 0x28
  4131aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  4131ae:	2700      	movs	r7, #0
  4131b0:	2b09      	cmp	r3, #9
  4131b2:	46b9      	mov	r9, r7
  4131b4:	463e      	mov	r6, r7
  4131b6:	d81f      	bhi.n	4131f8 <_strtod_r+0x130>
  4131b8:	9806      	ldr	r0, [sp, #24]
  4131ba:	1c43      	adds	r3, r0, #1
  4131bc:	e00f      	b.n	4131de <_strtod_r+0x116>
  4131be:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  4131c2:	eb04 0949 	add.w	r9, r4, r9, lsl #1
  4131c6:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
  4131ca:	9319      	str	r3, [sp, #100]	; 0x64
  4131cc:	4698      	mov	r8, r3
  4131ce:	f813 4b01 	ldrb.w	r4, [r3], #1
  4131d2:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  4131d6:	2a09      	cmp	r2, #9
  4131d8:	f106 0601 	add.w	r6, r6, #1
  4131dc:	d80e      	bhi.n	4131fc <_strtod_r+0x134>
  4131de:	2e08      	cmp	r6, #8
  4131e0:	dded      	ble.n	4131be <_strtod_r+0xf6>
  4131e2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  4131e6:	eb04 0747 	add.w	r7, r4, r7, lsl #1
  4131ea:	3f30      	subs	r7, #48	; 0x30
  4131ec:	e7ed      	b.n	4131ca <_strtod_r+0x102>
  4131ee:	9219      	str	r2, [sp, #100]	; 0x64
  4131f0:	e778      	b.n	4130e4 <_strtod_r+0x1c>
  4131f2:	2201      	movs	r2, #1
  4131f4:	9207      	str	r2, [sp, #28]
  4131f6:	e7cc      	b.n	413192 <_strtod_r+0xca>
  4131f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4131fc:	4658      	mov	r0, fp
  4131fe:	f7fe fc6b 	bl	411ad8 <_localeconv_r>
  413202:	f8d0 a000 	ldr.w	sl, [r0]
  413206:	4658      	mov	r0, fp
  413208:	f7fe fc66 	bl	411ad8 <_localeconv_r>
  41320c:	6800      	ldr	r0, [r0, #0]
  41320e:	f7f9 fe5f 	bl	40ced0 <strlen>
  413212:	4651      	mov	r1, sl
  413214:	4602      	mov	r2, r0
  413216:	4640      	mov	r0, r8
  413218:	f7f9 fe8a 	bl	40cf30 <strncmp>
  41321c:	4680      	mov	r8, r0
  41321e:	2800      	cmp	r0, #0
  413220:	f000 8146 	beq.w	4134b0 <_strtod_r+0x3e8>
  413224:	2000      	movs	r0, #0
  413226:	4603      	mov	r3, r0
  413228:	900b      	str	r0, [sp, #44]	; 0x2c
  41322a:	46b2      	mov	sl, r6
  41322c:	f024 0220 	bic.w	r2, r4, #32
  413230:	2a45      	cmp	r2, #69	; 0x45
  413232:	f000 80e1 	beq.w	4133f8 <_strtod_r+0x330>
  413236:	2100      	movs	r1, #0
  413238:	f1ba 0f00 	cmp.w	sl, #0
  41323c:	d054      	beq.n	4132e8 <_strtod_r+0x220>
  41323e:	1acb      	subs	r3, r1, r3
  413240:	4648      	mov	r0, r9
  413242:	9308      	str	r3, [sp, #32]
  413244:	f002 f95a 	bl	4154fc <__aeabi_ui2d>
  413248:	f1ba 0f10 	cmp.w	sl, #16
  41324c:	bfb4      	ite	lt
  41324e:	46d0      	movlt	r8, sl
  413250:	f04f 0810 	movge.w	r8, #16
  413254:	2e00      	cmp	r6, #0
  413256:	bf08      	it	eq
  413258:	4656      	moveq	r6, sl
  41325a:	f1b8 0f09 	cmp.w	r8, #9
  41325e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413262:	dd13      	ble.n	41328c <_strtod_r+0x1c4>
  413264:	4ba0      	ldr	r3, [pc, #640]	; (4134e8 <_strtod_r+0x420>)
  413266:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  41326a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  41326e:	f002 f9bb 	bl	4155e8 <__aeabi_dmul>
  413272:	4604      	mov	r4, r0
  413274:	4638      	mov	r0, r7
  413276:	460d      	mov	r5, r1
  413278:	f002 f940 	bl	4154fc <__aeabi_ui2d>
  41327c:	4602      	mov	r2, r0
  41327e:	460b      	mov	r3, r1
  413280:	4620      	mov	r0, r4
  413282:	4629      	mov	r1, r5
  413284:	f001 fffe 	bl	415284 <__adddf3>
  413288:	e9cd 0102 	strd	r0, r1, [sp, #8]
  41328c:	f1ba 0f0f 	cmp.w	sl, #15
  413290:	f300 812c 	bgt.w	4134ec <_strtod_r+0x424>
  413294:	9908      	ldr	r1, [sp, #32]
  413296:	2900      	cmp	r1, #0
  413298:	f000 80ab 	beq.w	4133f2 <_strtod_r+0x32a>
  41329c:	f340 8580 	ble.w	413da0 <_strtod_r+0xcd8>
  4132a0:	9a08      	ldr	r2, [sp, #32]
  4132a2:	2a16      	cmp	r2, #22
  4132a4:	f300 84ef 	bgt.w	413c86 <_strtod_r+0xbbe>
  4132a8:	4b8f      	ldr	r3, [pc, #572]	; (4134e8 <_strtod_r+0x420>)
  4132aa:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
  4132ae:	e9da 0100 	ldrd	r0, r1, [sl]
  4132b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4132b6:	f002 f997 	bl	4155e8 <__aeabi_dmul>
  4132ba:	4680      	mov	r8, r0
  4132bc:	4689      	mov	r9, r1
  4132be:	e759      	b.n	413174 <_strtod_r+0xac>
  4132c0:	4640      	mov	r0, r8
  4132c2:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
  4132c6:	b01f      	add	sp, #124	; 0x7c
  4132c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4132cc:	4633      	mov	r3, r6
  4132ce:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  4132d2:	2a08      	cmp	r2, #8
  4132d4:	f240 833c 	bls.w	413950 <_strtod_r+0x888>
  4132d8:	f024 0220 	bic.w	r2, r4, #32
  4132dc:	2a45      	cmp	r2, #69	; 0x45
  4132de:	4618      	mov	r0, r3
  4132e0:	f43f af36 	beq.w	413150 <_strtod_r+0x88>
  4132e4:	2101      	movs	r1, #1
  4132e6:	910b      	str	r1, [sp, #44]	; 0x2c
  4132e8:	2800      	cmp	r0, #0
  4132ea:	d171      	bne.n	4133d0 <_strtod_r+0x308>
  4132ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4132ee:	2b00      	cmp	r3, #0
  4132f0:	d16e      	bne.n	4133d0 <_strtod_r+0x308>
  4132f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4132f4:	2800      	cmp	r0, #0
  4132f6:	f47f af36 	bne.w	413166 <_strtod_r+0x9e>
  4132fa:	3c49      	subs	r4, #73	; 0x49
  4132fc:	2c25      	cmp	r4, #37	; 0x25
  4132fe:	f63f af32 	bhi.w	413166 <_strtod_r+0x9e>
  413302:	a101      	add	r1, pc, #4	; (adr r1, 413308 <_strtod_r+0x240>)
  413304:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
  413308:	004139cb 	.word	0x004139cb
  41330c:	00413167 	.word	0x00413167
  413310:	00413167 	.word	0x00413167
  413314:	00413167 	.word	0x00413167
  413318:	00413167 	.word	0x00413167
  41331c:	00413993 	.word	0x00413993
  413320:	00413167 	.word	0x00413167
  413324:	00413167 	.word	0x00413167
  413328:	00413167 	.word	0x00413167
  41332c:	00413167 	.word	0x00413167
  413330:	00413167 	.word	0x00413167
  413334:	00413167 	.word	0x00413167
  413338:	00413167 	.word	0x00413167
  41333c:	00413167 	.word	0x00413167
  413340:	00413167 	.word	0x00413167
  413344:	00413167 	.word	0x00413167
  413348:	00413167 	.word	0x00413167
  41334c:	00413167 	.word	0x00413167
  413350:	00413167 	.word	0x00413167
  413354:	00413167 	.word	0x00413167
  413358:	00413167 	.word	0x00413167
  41335c:	00413167 	.word	0x00413167
  413360:	00413167 	.word	0x00413167
  413364:	00413167 	.word	0x00413167
  413368:	00413167 	.word	0x00413167
  41336c:	00413167 	.word	0x00413167
  413370:	00413167 	.word	0x00413167
  413374:	00413167 	.word	0x00413167
  413378:	00413167 	.word	0x00413167
  41337c:	00413167 	.word	0x00413167
  413380:	00413167 	.word	0x00413167
  413384:	00413167 	.word	0x00413167
  413388:	004139cb 	.word	0x004139cb
  41338c:	00413167 	.word	0x00413167
  413390:	00413167 	.word	0x00413167
  413394:	00413167 	.word	0x00413167
  413398:	00413167 	.word	0x00413167
  41339c:	00413993 	.word	0x00413993
  4133a0:	2000      	movs	r0, #0
  4133a2:	2c30      	cmp	r4, #48	; 0x30
  4133a4:	9007      	str	r0, [sp, #28]
  4133a6:	f47f aefd 	bne.w	4131a4 <_strtod_r+0xdc>
  4133aa:	7873      	ldrb	r3, [r6, #1]
  4133ac:	2b58      	cmp	r3, #88	; 0x58
  4133ae:	f000 8336 	beq.w	413a1e <_strtod_r+0x956>
  4133b2:	2b78      	cmp	r3, #120	; 0x78
  4133b4:	f000 8333 	beq.w	413a1e <_strtod_r+0x956>
  4133b8:	3601      	adds	r6, #1
  4133ba:	9619      	str	r6, [sp, #100]	; 0x64
  4133bc:	4633      	mov	r3, r6
  4133be:	f816 4b01 	ldrb.w	r4, [r6], #1
  4133c2:	2c30      	cmp	r4, #48	; 0x30
  4133c4:	d0f9      	beq.n	4133ba <_strtod_r+0x2f2>
  4133c6:	b11c      	cbz	r4, 4133d0 <_strtod_r+0x308>
  4133c8:	9306      	str	r3, [sp, #24]
  4133ca:	2301      	movs	r3, #1
  4133cc:	930a      	str	r3, [sp, #40]	; 0x28
  4133ce:	e6ec      	b.n	4131aa <_strtod_r+0xe2>
  4133d0:	f04f 0800 	mov.w	r8, #0
  4133d4:	f04f 0900 	mov.w	r9, #0
  4133d8:	e6cc      	b.n	413174 <_strtod_r+0xac>
  4133da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4133de:	f04f 30ff 	mov.w	r0, #4294967295
  4133e2:	9303      	str	r3, [sp, #12]
  4133e4:	9002      	str	r0, [sp, #8]
  4133e6:	0722      	lsls	r2, r4, #28
  4133e8:	bf42      	ittt	mi
  4133ea:	9903      	ldrmi	r1, [sp, #12]
  4133ec:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
  4133f0:	9103      	strmi	r1, [sp, #12]
  4133f2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4133f6:	e6bd      	b.n	413174 <_strtod_r+0xac>
  4133f8:	f1ba 0f00 	cmp.w	sl, #0
  4133fc:	f43f aeac 	beq.w	413158 <_strtod_r+0x90>
  413400:	9d19      	ldr	r5, [sp, #100]	; 0x64
  413402:	1c6a      	adds	r2, r5, #1
  413404:	9219      	str	r2, [sp, #100]	; 0x64
  413406:	786c      	ldrb	r4, [r5, #1]
  413408:	2c2b      	cmp	r4, #43	; 0x2b
  41340a:	f000 824b 	beq.w	4138a4 <_strtod_r+0x7dc>
  41340e:	2c2d      	cmp	r4, #45	; 0x2d
  413410:	f040 8245 	bne.w	41389e <_strtod_r+0x7d6>
  413414:	2101      	movs	r1, #1
  413416:	9108      	str	r1, [sp, #32]
  413418:	1caa      	adds	r2, r5, #2
  41341a:	9219      	str	r2, [sp, #100]	; 0x64
  41341c:	78ac      	ldrb	r4, [r5, #2]
  41341e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  413422:	2a09      	cmp	r2, #9
  413424:	f200 81e5 	bhi.w	4137f2 <_strtod_r+0x72a>
  413428:	2c30      	cmp	r4, #48	; 0x30
  41342a:	d106      	bne.n	41343a <_strtod_r+0x372>
  41342c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  41342e:	3201      	adds	r2, #1
  413430:	9219      	str	r2, [sp, #100]	; 0x64
  413432:	f812 4b01 	ldrb.w	r4, [r2], #1
  413436:	2c30      	cmp	r4, #48	; 0x30
  413438:	d0fa      	beq.n	413430 <_strtod_r+0x368>
  41343a:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  41343e:	2a08      	cmp	r2, #8
  413440:	f63f aef9 	bhi.w	413236 <_strtod_r+0x16e>
  413444:	9a19      	ldr	r2, [sp, #100]	; 0x64
  413446:	920e      	str	r2, [sp, #56]	; 0x38
  413448:	f102 0801 	add.w	r8, r2, #1
  41344c:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  413450:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
  413454:	7854      	ldrb	r4, [r2, #1]
  413456:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  41345a:	2a09      	cmp	r2, #9
  41345c:	d812      	bhi.n	413484 <_strtod_r+0x3bc>
  41345e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  413460:	f102 0c02 	add.w	ip, r2, #2
  413464:	4662      	mov	r2, ip
  413466:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  41346a:	9219      	str	r2, [sp, #100]	; 0x64
  41346c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
  413470:	4690      	mov	r8, r2
  413472:	f812 4b01 	ldrb.w	r4, [r2], #1
  413476:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  41347a:	f1bc 0f09 	cmp.w	ip, #9
  41347e:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
  413482:	d9f0      	bls.n	413466 <_strtod_r+0x39e>
  413484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  413486:	ebc2 0808 	rsb	r8, r2, r8
  41348a:	f1b8 0f08 	cmp.w	r8, #8
  41348e:	f300 83f2 	bgt.w	413c76 <_strtod_r+0xbae>
  413492:	f644 621f 	movw	r2, #19999	; 0x4e1f
  413496:	4291      	cmp	r1, r2
  413498:	bfa8      	it	ge
  41349a:	4611      	movge	r1, r2
  41349c:	9a08      	ldr	r2, [sp, #32]
  41349e:	2a00      	cmp	r2, #0
  4134a0:	f43f aeca 	beq.w	413238 <_strtod_r+0x170>
  4134a4:	4249      	negs	r1, r1
  4134a6:	f1ba 0f00 	cmp.w	sl, #0
  4134aa:	f47f aec8 	bne.w	41323e <_strtod_r+0x176>
  4134ae:	e71b      	b.n	4132e8 <_strtod_r+0x220>
  4134b0:	4658      	mov	r0, fp
  4134b2:	9c19      	ldr	r4, [sp, #100]	; 0x64
  4134b4:	f7fe fb10 	bl	411ad8 <_localeconv_r>
  4134b8:	6800      	ldr	r0, [r0, #0]
  4134ba:	f7f9 fd09 	bl	40ced0 <strlen>
  4134be:	1823      	adds	r3, r4, r0
  4134c0:	9319      	str	r3, [sp, #100]	; 0x64
  4134c2:	5c24      	ldrb	r4, [r4, r0]
  4134c4:	2e00      	cmp	r6, #0
  4134c6:	f040 81c3 	bne.w	413850 <_strtod_r+0x788>
  4134ca:	2c30      	cmp	r4, #48	; 0x30
  4134cc:	f47f aefe 	bne.w	4132cc <_strtod_r+0x204>
  4134d0:	461a      	mov	r2, r3
  4134d2:	4633      	mov	r3, r6
  4134d4:	e000      	b.n	4134d8 <_strtod_r+0x410>
  4134d6:	460a      	mov	r2, r1
  4134d8:	1c51      	adds	r1, r2, #1
  4134da:	9119      	str	r1, [sp, #100]	; 0x64
  4134dc:	7854      	ldrb	r4, [r2, #1]
  4134de:	2c30      	cmp	r4, #48	; 0x30
  4134e0:	f103 0301 	add.w	r3, r3, #1
  4134e4:	d0f7      	beq.n	4134d6 <_strtod_r+0x40e>
  4134e6:	e6f2      	b.n	4132ce <_strtod_r+0x206>
  4134e8:	00416348 	.word	0x00416348
  4134ec:	9908      	ldr	r1, [sp, #32]
  4134ee:	ebc8 080a 	rsb	r8, r8, sl
  4134f2:	4488      	add	r8, r1
  4134f4:	f1b8 0f00 	cmp.w	r8, #0
  4134f8:	f340 8369 	ble.w	413bce <_strtod_r+0xb06>
  4134fc:	f018 030f 	ands.w	r3, r8, #15
  413500:	d00a      	beq.n	413518 <_strtod_r+0x450>
  413502:	49a7      	ldr	r1, [pc, #668]	; (4137a0 <_strtod_r+0x6d8>)
  413504:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  413508:	e9d1 0100 	ldrd	r0, r1, [r1]
  41350c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  413510:	f002 f86a 	bl	4155e8 <__aeabi_dmul>
  413514:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413518:	f038 040f 	bics.w	r4, r8, #15
  41351c:	f040 81c8 	bne.w	4138b0 <_strtod_r+0x7e8>
  413520:	2200      	movs	r2, #0
  413522:	920a      	str	r2, [sp, #40]	; 0x28
  413524:	f8cd 9000 	str.w	r9, [sp]
  413528:	9906      	ldr	r1, [sp, #24]
  41352a:	4632      	mov	r2, r6
  41352c:	4653      	mov	r3, sl
  41352e:	4658      	mov	r0, fp
  413530:	f7fe ff6a 	bl	412408 <__s2b>
  413534:	900b      	str	r0, [sp, #44]	; 0x2c
  413536:	2800      	cmp	r0, #0
  413538:	f000 82d5 	beq.w	413ae6 <_strtod_r+0xa1e>
  41353c:	9908      	ldr	r1, [sp, #32]
  41353e:	2200      	movs	r2, #0
  413540:	2900      	cmp	r1, #0
  413542:	f1c1 0300 	rsb	r3, r1, #0
  413546:	bfa8      	it	ge
  413548:	4613      	movge	r3, r2
  41354a:	930e      	str	r3, [sp, #56]	; 0x38
  41354c:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  413550:	9206      	str	r2, [sp, #24]
  413552:	930f      	str	r3, [sp, #60]	; 0x3c
  413554:	4617      	mov	r7, r2
  413556:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  413558:	4658      	mov	r0, fp
  41355a:	6851      	ldr	r1, [r2, #4]
  41355c:	f7fe fed8 	bl	412310 <_Balloc>
  413560:	4606      	mov	r6, r0
  413562:	2800      	cmp	r0, #0
  413564:	f000 82cd 	beq.w	413b02 <_strtod_r+0xa3a>
  413568:	980b      	ldr	r0, [sp, #44]	; 0x2c
  41356a:	6903      	ldr	r3, [r0, #16]
  41356c:	1c9a      	adds	r2, r3, #2
  41356e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  413570:	0092      	lsls	r2, r2, #2
  413572:	f103 010c 	add.w	r1, r3, #12
  413576:	f106 000c 	add.w	r0, r6, #12
  41357a:	f7f9 fa71 	bl	40ca60 <memcpy>
  41357e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413582:	e9cd 0108 	strd	r0, r1, [sp, #32]
  413586:	a81b      	add	r0, sp, #108	; 0x6c
  413588:	a91c      	add	r1, sp, #112	; 0x70
  41358a:	e88d 0003 	stmia.w	sp, {r0, r1}
  41358e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  413592:	4658      	mov	r0, fp
  413594:	f7ff fa2e 	bl	4129f4 <__d2b>
  413598:	901a      	str	r0, [sp, #104]	; 0x68
  41359a:	2800      	cmp	r0, #0
  41359c:	f000 8412 	beq.w	413dc4 <_strtod_r+0xcfc>
  4135a0:	4658      	mov	r0, fp
  4135a2:	2101      	movs	r1, #1
  4135a4:	f7fe ffca 	bl	41253c <__i2b>
  4135a8:	4607      	mov	r7, r0
  4135aa:	2800      	cmp	r0, #0
  4135ac:	f000 82a9 	beq.w	413b02 <_strtod_r+0xa3a>
  4135b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4135b2:	2b00      	cmp	r3, #0
  4135b4:	f2c0 8110 	blt.w	4137d8 <_strtod_r+0x710>
  4135b8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  4135bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4135be:	4499      	add	r9, r3
  4135c0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4135c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  4135c4:	1a1b      	subs	r3, r3, r0
  4135c6:	4413      	add	r3, r2
  4135c8:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
  4135cc:	428b      	cmp	r3, r1
  4135ce:	f1c2 0a36 	rsb	sl, r2, #54	; 0x36
  4135d2:	f280 80da 	bge.w	41378a <_strtod_r+0x6c2>
  4135d6:	1aca      	subs	r2, r1, r3
  4135d8:	2a1f      	cmp	r2, #31
  4135da:	ebc2 0a0a 	rsb	sl, r2, sl
  4135de:	f300 8100 	bgt.w	4137e2 <_strtod_r+0x71a>
  4135e2:	f04f 0801 	mov.w	r8, #1
  4135e6:	2300      	movs	r3, #0
  4135e8:	fa08 f802 	lsl.w	r8, r8, r2
  4135ec:	930c      	str	r3, [sp, #48]	; 0x30
  4135ee:	980a      	ldr	r0, [sp, #40]	; 0x28
  4135f0:	4455      	add	r5, sl
  4135f2:	44ca      	add	sl, r9
  4135f4:	45ca      	cmp	sl, r9
  4135f6:	bfb4      	ite	lt
  4135f8:	4653      	movlt	r3, sl
  4135fa:	464b      	movge	r3, r9
  4135fc:	4405      	add	r5, r0
  4135fe:	42ab      	cmp	r3, r5
  413600:	bfa8      	it	ge
  413602:	462b      	movge	r3, r5
  413604:	2b00      	cmp	r3, #0
  413606:	dd04      	ble.n	413612 <_strtod_r+0x54a>
  413608:	ebc3 0a0a 	rsb	sl, r3, sl
  41360c:	1aed      	subs	r5, r5, r3
  41360e:	ebc3 0909 	rsb	r9, r3, r9
  413612:	990e      	ldr	r1, [sp, #56]	; 0x38
  413614:	b1b1      	cbz	r1, 413644 <_strtod_r+0x57c>
  413616:	4639      	mov	r1, r7
  413618:	4658      	mov	r0, fp
  41361a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41361c:	f7ff f836 	bl	41268c <__pow5mult>
  413620:	4607      	mov	r7, r0
  413622:	2800      	cmp	r0, #0
  413624:	f000 826d 	beq.w	413b02 <_strtod_r+0xa3a>
  413628:	4658      	mov	r0, fp
  41362a:	4639      	mov	r1, r7
  41362c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  41362e:	f7fe ff8f 	bl	412550 <__multiply>
  413632:	4604      	mov	r4, r0
  413634:	2800      	cmp	r0, #0
  413636:	f000 8264 	beq.w	413b02 <_strtod_r+0xa3a>
  41363a:	4658      	mov	r0, fp
  41363c:	991a      	ldr	r1, [sp, #104]	; 0x68
  41363e:	f7fe fe8d 	bl	41235c <_Bfree>
  413642:	941a      	str	r4, [sp, #104]	; 0x68
  413644:	f1ba 0f00 	cmp.w	sl, #0
  413648:	dd08      	ble.n	41365c <_strtod_r+0x594>
  41364a:	4652      	mov	r2, sl
  41364c:	4658      	mov	r0, fp
  41364e:	991a      	ldr	r1, [sp, #104]	; 0x68
  413650:	f7ff f86a 	bl	412728 <__lshift>
  413654:	901a      	str	r0, [sp, #104]	; 0x68
  413656:	2800      	cmp	r0, #0
  413658:	f000 83b4 	beq.w	413dc4 <_strtod_r+0xcfc>
  41365c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  41365e:	b142      	cbz	r2, 413672 <_strtod_r+0x5aa>
  413660:	4631      	mov	r1, r6
  413662:	4658      	mov	r0, fp
  413664:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  413666:	f7ff f811 	bl	41268c <__pow5mult>
  41366a:	4606      	mov	r6, r0
  41366c:	2800      	cmp	r0, #0
  41366e:	f000 8248 	beq.w	413b02 <_strtod_r+0xa3a>
  413672:	2d00      	cmp	r5, #0
  413674:	dd08      	ble.n	413688 <_strtod_r+0x5c0>
  413676:	4631      	mov	r1, r6
  413678:	462a      	mov	r2, r5
  41367a:	4658      	mov	r0, fp
  41367c:	f7ff f854 	bl	412728 <__lshift>
  413680:	4606      	mov	r6, r0
  413682:	2800      	cmp	r0, #0
  413684:	f000 823d 	beq.w	413b02 <_strtod_r+0xa3a>
  413688:	f1b9 0f00 	cmp.w	r9, #0
  41368c:	dd08      	ble.n	4136a0 <_strtod_r+0x5d8>
  41368e:	4639      	mov	r1, r7
  413690:	464a      	mov	r2, r9
  413692:	4658      	mov	r0, fp
  413694:	f7ff f848 	bl	412728 <__lshift>
  413698:	4607      	mov	r7, r0
  41369a:	2800      	cmp	r0, #0
  41369c:	f000 8231 	beq.w	413b02 <_strtod_r+0xa3a>
  4136a0:	4658      	mov	r0, fp
  4136a2:	991a      	ldr	r1, [sp, #104]	; 0x68
  4136a4:	4632      	mov	r2, r6
  4136a6:	f7ff f8c1 	bl	41282c <__mdiff>
  4136aa:	9006      	str	r0, [sp, #24]
  4136ac:	2800      	cmp	r0, #0
  4136ae:	f000 8228 	beq.w	413b02 <_strtod_r+0xa3a>
  4136b2:	9906      	ldr	r1, [sp, #24]
  4136b4:	2300      	movs	r3, #0
  4136b6:	f8d1 a00c 	ldr.w	sl, [r1, #12]
  4136ba:	60cb      	str	r3, [r1, #12]
  4136bc:	4639      	mov	r1, r7
  4136be:	f7ff f891 	bl	4127e4 <__mcmp>
  4136c2:	2800      	cmp	r0, #0
  4136c4:	f2c0 83cb 	blt.w	413e5e <_strtod_r+0xd96>
  4136c8:	f000 8388 	beq.w	413ddc <_strtod_r+0xd14>
  4136cc:	9806      	ldr	r0, [sp, #24]
  4136ce:	4639      	mov	r1, r7
  4136d0:	f7ff f9ee 	bl	412ab0 <__ratio>
  4136d4:	2200      	movs	r2, #0
  4136d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4136da:	4604      	mov	r4, r0
  4136dc:	460d      	mov	r5, r1
  4136de:	f002 f9ff 	bl	415ae0 <__aeabi_dcmple>
  4136e2:	2800      	cmp	r0, #0
  4136e4:	d064      	beq.n	4137b0 <_strtod_r+0x6e8>
  4136e6:	f1ba 0f00 	cmp.w	sl, #0
  4136ea:	f000 808e 	beq.w	41380a <_strtod_r+0x742>
  4136ee:	4d2d      	ldr	r5, [pc, #180]	; (4137a4 <_strtod_r+0x6dc>)
  4136f0:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4136f4:	2400      	movs	r4, #0
  4136f6:	4622      	mov	r2, r4
  4136f8:	462b      	mov	r3, r5
  4136fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  4136fe:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 4137ac <_strtod_r+0x6e4>
  413702:	4b29      	ldr	r3, [pc, #164]	; (4137a8 <_strtod_r+0x6e0>)
  413704:	ea09 0808 	and.w	r8, r9, r8
  413708:	4598      	cmp	r8, r3
  41370a:	f000 81bf 	beq.w	413a8c <_strtod_r+0x9c4>
  41370e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  413710:	b182      	cbz	r2, 413734 <_strtod_r+0x66c>
  413712:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
  413716:	d80d      	bhi.n	413734 <_strtod_r+0x66c>
  413718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  41371c:	a31e      	add	r3, pc, #120	; (adr r3, 413798 <_strtod_r+0x6d0>)
  41371e:	e9d3 2300 	ldrd	r2, r3, [r3]
  413722:	f002 f9dd 	bl	415ae0 <__aeabi_dcmple>
  413726:	2800      	cmp	r0, #0
  413728:	f040 811b 	bne.w	413962 <_strtod_r+0x89a>
  41372c:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
  413730:	ebc8 0503 	rsb	r5, r8, r3
  413734:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  413738:	f7ff f8e2 	bl	412900 <__ulp>
  41373c:	4602      	mov	r2, r0
  41373e:	460b      	mov	r3, r1
  413740:	4620      	mov	r0, r4
  413742:	4629      	mov	r1, r5
  413744:	f001 ff50 	bl	4155e8 <__aeabi_dmul>
  413748:	4602      	mov	r2, r0
  41374a:	460b      	mov	r3, r1
  41374c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  413750:	f001 fd98 	bl	415284 <__adddf3>
  413754:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413758:	9c03      	ldr	r4, [sp, #12]
  41375a:	990a      	ldr	r1, [sp, #40]	; 0x28
  41375c:	b921      	cbnz	r1, 413768 <_strtod_r+0x6a0>
  41375e:	4b13      	ldr	r3, [pc, #76]	; (4137ac <_strtod_r+0x6e4>)
  413760:	4023      	ands	r3, r4
  413762:	4598      	cmp	r8, r3
  413764:	f000 81ed 	beq.w	413b42 <_strtod_r+0xa7a>
  413768:	4658      	mov	r0, fp
  41376a:	991a      	ldr	r1, [sp, #104]	; 0x68
  41376c:	f7fe fdf6 	bl	41235c <_Bfree>
  413770:	4658      	mov	r0, fp
  413772:	4631      	mov	r1, r6
  413774:	f7fe fdf2 	bl	41235c <_Bfree>
  413778:	4658      	mov	r0, fp
  41377a:	4639      	mov	r1, r7
  41377c:	f7fe fdee 	bl	41235c <_Bfree>
  413780:	4658      	mov	r0, fp
  413782:	9906      	ldr	r1, [sp, #24]
  413784:	f7fe fdea 	bl	41235c <_Bfree>
  413788:	e6e5      	b.n	413556 <_strtod_r+0x48e>
  41378a:	2300      	movs	r3, #0
  41378c:	930c      	str	r3, [sp, #48]	; 0x30
  41378e:	f04f 0801 	mov.w	r8, #1
  413792:	e72c      	b.n	4135ee <_strtod_r+0x526>
  413794:	f3af 8000 	nop.w
  413798:	ffc00000 	.word	0xffc00000
  41379c:	41dfffff 	.word	0x41dfffff
  4137a0:	00416348 	.word	0x00416348
  4137a4:	3ff00000 	.word	0x3ff00000
  4137a8:	7fe00000 	.word	0x7fe00000
  4137ac:	7ff00000 	.word	0x7ff00000
  4137b0:	4620      	mov	r0, r4
  4137b2:	4629      	mov	r1, r5
  4137b4:	2200      	movs	r2, #0
  4137b6:	4ba8      	ldr	r3, [pc, #672]	; (413a58 <_strtod_r+0x990>)
  4137b8:	f001 ff16 	bl	4155e8 <__aeabi_dmul>
  4137bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4137c0:	f1ba 0f00 	cmp.w	sl, #0
  4137c4:	d11c      	bne.n	413800 <_strtod_r+0x738>
  4137c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4137ca:	9010      	str	r0, [sp, #64]	; 0x40
  4137cc:	9111      	str	r1, [sp, #68]	; 0x44
  4137ce:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  4137d2:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4137d6:	e792      	b.n	4136fe <_strtod_r+0x636>
  4137d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4137da:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  4137de:	1acd      	subs	r5, r1, r3
  4137e0:	e6ee      	b.n	4135c0 <_strtod_r+0x4f8>
  4137e2:	4c9e      	ldr	r4, [pc, #632]	; (413a5c <_strtod_r+0x994>)
  4137e4:	f04f 0801 	mov.w	r8, #1
  4137e8:	1ae4      	subs	r4, r4, r3
  4137ea:	fa08 f404 	lsl.w	r4, r8, r4
  4137ee:	940c      	str	r4, [sp, #48]	; 0x30
  4137f0:	e6fd      	b.n	4135ee <_strtod_r+0x526>
  4137f2:	9519      	str	r5, [sp, #100]	; 0x64
  4137f4:	2100      	movs	r1, #0
  4137f6:	f1ba 0f00 	cmp.w	sl, #0
  4137fa:	f47f ad20 	bne.w	41323e <_strtod_r+0x176>
  4137fe:	e573      	b.n	4132e8 <_strtod_r+0x220>
  413800:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  413804:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  413808:	e7e1      	b.n	4137ce <_strtod_r+0x706>
  41380a:	9b02      	ldr	r3, [sp, #8]
  41380c:	2b00      	cmp	r3, #0
  41380e:	f040 8092 	bne.w	413936 <_strtod_r+0x86e>
  413812:	9803      	ldr	r0, [sp, #12]
  413814:	f3c0 0313 	ubfx	r3, r0, #0, #20
  413818:	4681      	mov	r9, r0
  41381a:	2b00      	cmp	r3, #0
  41381c:	f040 8091 	bne.w	413942 <_strtod_r+0x87a>
  413820:	4620      	mov	r0, r4
  413822:	4629      	mov	r1, r5
  413824:	2200      	movs	r2, #0
  413826:	4b8e      	ldr	r3, [pc, #568]	; (413a60 <_strtod_r+0x998>)
  413828:	f002 f950 	bl	415acc <__aeabi_dcmplt>
  41382c:	2800      	cmp	r0, #0
  41382e:	f040 8356 	bne.w	413ede <_strtod_r+0xe16>
  413832:	4620      	mov	r0, r4
  413834:	4629      	mov	r1, r5
  413836:	2200      	movs	r2, #0
  413838:	4b87      	ldr	r3, [pc, #540]	; (413a58 <_strtod_r+0x990>)
  41383a:	f001 fed5 	bl	4155e8 <__aeabi_dmul>
  41383e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  413842:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  413846:	9016      	str	r0, [sp, #88]	; 0x58
  413848:	9117      	str	r1, [sp, #92]	; 0x5c
  41384a:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  41384e:	e756      	b.n	4136fe <_strtod_r+0x636>
  413850:	4640      	mov	r0, r8
  413852:	4643      	mov	r3, r8
  413854:	46b2      	mov	sl, r6
  413856:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  41385a:	2a09      	cmp	r2, #9
  41385c:	d825      	bhi.n	4138aa <_strtod_r+0x7e2>
  41385e:	9c19      	ldr	r4, [sp, #100]	; 0x64
  413860:	3001      	adds	r0, #1
  413862:	2a00      	cmp	r2, #0
  413864:	f000 81af 	beq.w	413bc6 <_strtod_r+0xafe>
  413868:	2801      	cmp	r0, #1
  41386a:	4403      	add	r3, r0
  41386c:	f000 81a0 	beq.w	413bb0 <_strtod_r+0xae8>
  413870:	4450      	add	r0, sl
  413872:	3801      	subs	r0, #1
  413874:	e006      	b.n	413884 <_strtod_r+0x7bc>
  413876:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  41387a:	ea4f 0949 	mov.w	r9, r9, lsl #1
  41387e:	4582      	cmp	sl, r0
  413880:	f000 8197 	beq.w	413bb2 <_strtod_r+0xaea>
  413884:	f10a 0a01 	add.w	sl, sl, #1
  413888:	f10a 31ff 	add.w	r1, sl, #4294967295
  41388c:	2908      	cmp	r1, #8
  41388e:	ddf2      	ble.n	413876 <_strtod_r+0x7ae>
  413890:	f1ba 0f10 	cmp.w	sl, #16
  413894:	bfdc      	itt	le
  413896:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  41389a:	007f      	lslle	r7, r7, #1
  41389c:	e7ef      	b.n	41387e <_strtod_r+0x7b6>
  41389e:	2200      	movs	r2, #0
  4138a0:	9208      	str	r2, [sp, #32]
  4138a2:	e5bc      	b.n	41341e <_strtod_r+0x356>
  4138a4:	2100      	movs	r1, #0
  4138a6:	9108      	str	r1, [sp, #32]
  4138a8:	e5b6      	b.n	413418 <_strtod_r+0x350>
  4138aa:	2201      	movs	r2, #1
  4138ac:	920b      	str	r2, [sp, #44]	; 0x2c
  4138ae:	e4bd      	b.n	41322c <_strtod_r+0x164>
  4138b0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  4138b4:	f300 8117 	bgt.w	413ae6 <_strtod_r+0xa1e>
  4138b8:	1124      	asrs	r4, r4, #4
  4138ba:	2c01      	cmp	r4, #1
  4138bc:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 413a88 <_strtod_r+0x9c0>
  4138c0:	f340 832a 	ble.w	413f18 <_strtod_r+0xe50>
  4138c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4138c8:	4645      	mov	r5, r8
  4138ca:	2700      	movs	r7, #0
  4138cc:	f014 0f01 	tst.w	r4, #1
  4138d0:	f107 0701 	add.w	r7, r7, #1
  4138d4:	ea4f 0464 	mov.w	r4, r4, asr #1
  4138d8:	d003      	beq.n	4138e2 <_strtod_r+0x81a>
  4138da:	e9d5 2300 	ldrd	r2, r3, [r5]
  4138de:	f001 fe83 	bl	4155e8 <__aeabi_dmul>
  4138e2:	2c01      	cmp	r4, #1
  4138e4:	f105 0508 	add.w	r5, r5, #8
  4138e8:	dcf0      	bgt.n	4138cc <_strtod_r+0x804>
  4138ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4138ee:	9b03      	ldr	r3, [sp, #12]
  4138f0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  4138f4:	9303      	str	r3, [sp, #12]
  4138f6:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
  4138fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4138fe:	e9d7 0100 	ldrd	r0, r1, [r7]
  413902:	f001 fe71 	bl	4155e8 <__aeabi_dmul>
  413906:	e9cd 0102 	strd	r0, r1, [sp, #8]
  41390a:	9803      	ldr	r0, [sp, #12]
  41390c:	4a55      	ldr	r2, [pc, #340]	; (413a64 <_strtod_r+0x99c>)
  41390e:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  413912:	0d1b      	lsrs	r3, r3, #20
  413914:	051b      	lsls	r3, r3, #20
  413916:	4293      	cmp	r3, r2
  413918:	f200 80e5 	bhi.w	413ae6 <_strtod_r+0xa1e>
  41391c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  413920:	4293      	cmp	r3, r2
  413922:	f240 82d5 	bls.w	413ed0 <_strtod_r+0xe08>
  413926:	4950      	ldr	r1, [pc, #320]	; (413a68 <_strtod_r+0x9a0>)
  413928:	9103      	str	r1, [sp, #12]
  41392a:	2200      	movs	r2, #0
  41392c:	f04f 33ff 	mov.w	r3, #4294967295
  413930:	920a      	str	r2, [sp, #40]	; 0x28
  413932:	9302      	str	r3, [sp, #8]
  413934:	e5f6      	b.n	413524 <_strtod_r+0x45c>
  413936:	9902      	ldr	r1, [sp, #8]
  413938:	f8dd 900c 	ldr.w	r9, [sp, #12]
  41393c:	2901      	cmp	r1, #1
  41393e:	f000 81c9 	beq.w	413cd4 <_strtod_r+0xc0c>
  413942:	4947      	ldr	r1, [pc, #284]	; (413a60 <_strtod_r+0x998>)
  413944:	4d49      	ldr	r5, [pc, #292]	; (413a6c <_strtod_r+0x9a4>)
  413946:	2000      	movs	r0, #0
  413948:	2400      	movs	r4, #0
  41394a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  41394e:	e6d6      	b.n	4136fe <_strtod_r+0x636>
  413950:	9919      	ldr	r1, [sp, #100]	; 0x64
  413952:	9106      	str	r1, [sp, #24]
  413954:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  413958:	f04f 0a00 	mov.w	sl, #0
  41395c:	460c      	mov	r4, r1
  41395e:	2001      	movs	r0, #1
  413960:	e77f      	b.n	413862 <_strtod_r+0x79a>
  413962:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  413966:	f002 f901 	bl	415b6c <__aeabi_d2uiz>
  41396a:	2800      	cmp	r0, #0
  41396c:	f000 81ad 	beq.w	413cca <_strtod_r+0xc02>
  413970:	f001 fdc4 	bl	4154fc <__aeabi_ui2d>
  413974:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  413978:	f1ba 0f00 	cmp.w	sl, #0
  41397c:	f040 81a0 	bne.w	413cc0 <_strtod_r+0xbf8>
  413980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  413982:	990c      	ldr	r1, [sp, #48]	; 0x30
  413984:	9114      	str	r1, [sp, #80]	; 0x50
  413986:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  41398a:	9215      	str	r2, [sp, #84]	; 0x54
  41398c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  413990:	e6cc      	b.n	41372c <_strtod_r+0x664>
  413992:	4837      	ldr	r0, [pc, #220]	; (413a70 <_strtod_r+0x9a8>)
  413994:	9919      	ldr	r1, [sp, #100]	; 0x64
  413996:	e009      	b.n	4139ac <_strtod_r+0x8e4>
  413998:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  41399c:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  4139a0:	2c19      	cmp	r4, #25
  4139a2:	bf98      	it	ls
  4139a4:	3320      	addls	r3, #32
  4139a6:	4293      	cmp	r3, r2
  4139a8:	f47f abdd 	bne.w	413166 <_strtod_r+0x9e>
  4139ac:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4139b0:	2a00      	cmp	r2, #0
  4139b2:	d1f1      	bne.n	413998 <_strtod_r+0x8d0>
  4139b4:	1c4b      	adds	r3, r1, #1
  4139b6:	9319      	str	r3, [sp, #100]	; 0x64
  4139b8:	784b      	ldrb	r3, [r1, #1]
  4139ba:	2b28      	cmp	r3, #40	; 0x28
  4139bc:	f000 82e2 	beq.w	413f84 <_strtod_r+0xebc>
  4139c0:	4a2c      	ldr	r2, [pc, #176]	; (413a74 <_strtod_r+0x9ac>)
  4139c2:	9203      	str	r2, [sp, #12]
  4139c4:	2300      	movs	r3, #0
  4139c6:	9302      	str	r3, [sp, #8]
  4139c8:	e513      	b.n	4133f2 <_strtod_r+0x32a>
  4139ca:	482b      	ldr	r0, [pc, #172]	; (413a78 <_strtod_r+0x9b0>)
  4139cc:	9919      	ldr	r1, [sp, #100]	; 0x64
  4139ce:	e009      	b.n	4139e4 <_strtod_r+0x91c>
  4139d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4139d4:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  4139d8:	2c19      	cmp	r4, #25
  4139da:	bf98      	it	ls
  4139dc:	3320      	addls	r3, #32
  4139de:	4293      	cmp	r3, r2
  4139e0:	f47f abc1 	bne.w	413166 <_strtod_r+0x9e>
  4139e4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4139e8:	2a00      	cmp	r2, #0
  4139ea:	d1f1      	bne.n	4139d0 <_strtod_r+0x908>
  4139ec:	9119      	str	r1, [sp, #100]	; 0x64
  4139ee:	4c23      	ldr	r4, [pc, #140]	; (413a7c <_strtod_r+0x9b4>)
  4139f0:	4608      	mov	r0, r1
  4139f2:	e009      	b.n	413a08 <_strtod_r+0x940>
  4139f4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4139f8:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
  4139fc:	2d19      	cmp	r5, #25
  4139fe:	bf98      	it	ls
  413a00:	3320      	addls	r3, #32
  413a02:	4293      	cmp	r3, r2
  413a04:	f040 8285 	bne.w	413f12 <_strtod_r+0xe4a>
  413a08:	f814 2f01 	ldrb.w	r2, [r4, #1]!
  413a0c:	2a00      	cmp	r2, #0
  413a0e:	d1f1      	bne.n	4139f4 <_strtod_r+0x92c>
  413a10:	3001      	adds	r0, #1
  413a12:	9019      	str	r0, [sp, #100]	; 0x64
  413a14:	4a1a      	ldr	r2, [pc, #104]	; (413a80 <_strtod_r+0x9b8>)
  413a16:	9203      	str	r2, [sp, #12]
  413a18:	2300      	movs	r3, #0
  413a1a:	9302      	str	r3, [sp, #8]
  413a1c:	e4e9      	b.n	4133f2 <_strtod_r+0x32a>
  413a1e:	9907      	ldr	r1, [sp, #28]
  413a20:	9101      	str	r1, [sp, #4]
  413a22:	ab1a      	add	r3, sp, #104	; 0x68
  413a24:	9300      	str	r3, [sp, #0]
  413a26:	4658      	mov	r0, fp
  413a28:	a919      	add	r1, sp, #100	; 0x64
  413a2a:	4a16      	ldr	r2, [pc, #88]	; (413a84 <_strtod_r+0x9bc>)
  413a2c:	ab1b      	add	r3, sp, #108	; 0x6c
  413a2e:	f001 f8af 	bl	414b90 <__gethex>
  413a32:	f010 0507 	ands.w	r5, r0, #7
  413a36:	4604      	mov	r4, r0
  413a38:	f43f acca 	beq.w	4133d0 <_strtod_r+0x308>
  413a3c:	2d06      	cmp	r5, #6
  413a3e:	f040 8157 	bne.w	413cf0 <_strtod_r+0xc28>
  413a42:	3601      	adds	r6, #1
  413a44:	2200      	movs	r2, #0
  413a46:	9619      	str	r6, [sp, #100]	; 0x64
  413a48:	f04f 0800 	mov.w	r8, #0
  413a4c:	f04f 0900 	mov.w	r9, #0
  413a50:	9207      	str	r2, [sp, #28]
  413a52:	f7ff bb8f 	b.w	413174 <_strtod_r+0xac>
  413a56:	bf00      	nop
  413a58:	3fe00000 	.word	0x3fe00000
  413a5c:	fffffbe3 	.word	0xfffffbe3
  413a60:	3ff00000 	.word	0x3ff00000
  413a64:	7ca00000 	.word	0x7ca00000
  413a68:	7fefffff 	.word	0x7fefffff
  413a6c:	bff00000 	.word	0xbff00000
  413a70:	00416463 	.word	0x00416463
  413a74:	fff80000 	.word	0xfff80000
  413a78:	00416457 	.word	0x00416457
  413a7c:	0041645b 	.word	0x0041645b
  413a80:	7ff00000 	.word	0x7ff00000
  413a84:	00416444 	.word	0x00416444
  413a88:	00416410 	.word	0x00416410
  413a8c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  413a90:	f8cd 900c 	str.w	r9, [sp, #12]
  413a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413a98:	f7fe ff32 	bl	412900 <__ulp>
  413a9c:	4602      	mov	r2, r0
  413a9e:	460b      	mov	r3, r1
  413aa0:	4620      	mov	r0, r4
  413aa2:	4629      	mov	r1, r5
  413aa4:	f001 fda0 	bl	4155e8 <__aeabi_dmul>
  413aa8:	4602      	mov	r2, r0
  413aaa:	460b      	mov	r3, r1
  413aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413ab0:	f001 fbe8 	bl	415284 <__adddf3>
  413ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413ab8:	9903      	ldr	r1, [sp, #12]
  413aba:	4aad      	ldr	r2, [pc, #692]	; (413d70 <_strtod_r+0xca8>)
  413abc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  413ac0:	0d1b      	lsrs	r3, r3, #20
  413ac2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  413ac6:	051b      	lsls	r3, r3, #20
  413ac8:	4293      	cmp	r3, r2
  413aca:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  413ace:	f240 80d5 	bls.w	413c7c <_strtod_r+0xbb4>
  413ad2:	4ba8      	ldr	r3, [pc, #672]	; (413d74 <_strtod_r+0xcac>)
  413ad4:	9913      	ldr	r1, [sp, #76]	; 0x4c
  413ad6:	4299      	cmp	r1, r3
  413ad8:	d010      	beq.n	413afc <_strtod_r+0xa34>
  413ada:	4ba6      	ldr	r3, [pc, #664]	; (413d74 <_strtod_r+0xcac>)
  413adc:	9303      	str	r3, [sp, #12]
  413ade:	f04f 30ff 	mov.w	r0, #4294967295
  413ae2:	9002      	str	r0, [sp, #8]
  413ae4:	e640      	b.n	413768 <_strtod_r+0x6a0>
  413ae6:	4aa4      	ldr	r2, [pc, #656]	; (413d78 <_strtod_r+0xcb0>)
  413ae8:	9203      	str	r2, [sp, #12]
  413aea:	2000      	movs	r0, #0
  413aec:	2322      	movs	r3, #34	; 0x22
  413aee:	9002      	str	r0, [sp, #8]
  413af0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  413af4:	f8cb 3000 	str.w	r3, [fp]
  413af8:	f7ff bb3c 	b.w	413174 <_strtod_r+0xac>
  413afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  413afe:	3201      	adds	r2, #1
  413b00:	d1eb      	bne.n	413ada <_strtod_r+0xa12>
  413b02:	46b2      	mov	sl, r6
  413b04:	991a      	ldr	r1, [sp, #104]	; 0x68
  413b06:	4a9c      	ldr	r2, [pc, #624]	; (413d78 <_strtod_r+0xcb0>)
  413b08:	9203      	str	r2, [sp, #12]
  413b0a:	2000      	movs	r0, #0
  413b0c:	9002      	str	r0, [sp, #8]
  413b0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  413b12:	2322      	movs	r3, #34	; 0x22
  413b14:	f8cb 3000 	str.w	r3, [fp]
  413b18:	4658      	mov	r0, fp
  413b1a:	f7fe fc1f 	bl	41235c <_Bfree>
  413b1e:	4658      	mov	r0, fp
  413b20:	4651      	mov	r1, sl
  413b22:	f7fe fc1b 	bl	41235c <_Bfree>
  413b26:	4658      	mov	r0, fp
  413b28:	4639      	mov	r1, r7
  413b2a:	f7fe fc17 	bl	41235c <_Bfree>
  413b2e:	4658      	mov	r0, fp
  413b30:	990b      	ldr	r1, [sp, #44]	; 0x2c
  413b32:	f7fe fc13 	bl	41235c <_Bfree>
  413b36:	4658      	mov	r0, fp
  413b38:	9906      	ldr	r1, [sp, #24]
  413b3a:	f7fe fc0f 	bl	41235c <_Bfree>
  413b3e:	f7ff bb19 	b.w	413174 <_strtod_r+0xac>
  413b42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  413b46:	f001 ffe9 	bl	415b1c <__aeabi_d2iz>
  413b4a:	f001 fce7 	bl	41551c <__aeabi_i2d>
  413b4e:	4602      	mov	r2, r0
  413b50:	460b      	mov	r3, r1
  413b52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  413b56:	f001 fb93 	bl	415280 <__aeabi_dsub>
  413b5a:	4680      	mov	r8, r0
  413b5c:	4689      	mov	r9, r1
  413b5e:	f1ba 0f00 	cmp.w	sl, #0
  413b62:	d111      	bne.n	413b88 <_strtod_r+0xac0>
  413b64:	9a02      	ldr	r2, [sp, #8]
  413b66:	b97a      	cbnz	r2, 413b88 <_strtod_r+0xac0>
  413b68:	f3c4 0413 	ubfx	r4, r4, #0, #20
  413b6c:	b964      	cbnz	r4, 413b88 <_strtod_r+0xac0>
  413b6e:	a37a      	add	r3, pc, #488	; (adr r3, 413d58 <_strtod_r+0xc90>)
  413b70:	e9d3 2300 	ldrd	r2, r3, [r3]
  413b74:	f001 ffaa 	bl	415acc <__aeabi_dcmplt>
  413b78:	2800      	cmp	r0, #0
  413b7a:	f43f adf5 	beq.w	413768 <_strtod_r+0x6a0>
  413b7e:	46b2      	mov	sl, r6
  413b80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  413b84:	991a      	ldr	r1, [sp, #104]	; 0x68
  413b86:	e7c7      	b.n	413b18 <_strtod_r+0xa50>
  413b88:	4640      	mov	r0, r8
  413b8a:	4649      	mov	r1, r9
  413b8c:	a374      	add	r3, pc, #464	; (adr r3, 413d60 <_strtod_r+0xc98>)
  413b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
  413b92:	f001 ff9b 	bl	415acc <__aeabi_dcmplt>
  413b96:	2800      	cmp	r0, #0
  413b98:	d1f1      	bne.n	413b7e <_strtod_r+0xab6>
  413b9a:	4640      	mov	r0, r8
  413b9c:	4649      	mov	r1, r9
  413b9e:	a372      	add	r3, pc, #456	; (adr r3, 413d68 <_strtod_r+0xca0>)
  413ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
  413ba4:	f001 ffb0 	bl	415b08 <__aeabi_dcmpgt>
  413ba8:	2800      	cmp	r0, #0
  413baa:	f43f addd 	beq.w	413768 <_strtod_r+0x6a0>
  413bae:	e7e6      	b.n	413b7e <_strtod_r+0xab6>
  413bb0:	4650      	mov	r0, sl
  413bb2:	2808      	cmp	r0, #8
  413bb4:	f100 0a01 	add.w	sl, r0, #1
  413bb8:	f300 8107 	bgt.w	413dca <_strtod_r+0xd02>
  413bbc:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  413bc0:	eb02 0949 	add.w	r9, r2, r9, lsl #1
  413bc4:	2000      	movs	r0, #0
  413bc6:	1c62      	adds	r2, r4, #1
  413bc8:	9219      	str	r2, [sp, #100]	; 0x64
  413bca:	7864      	ldrb	r4, [r4, #1]
  413bcc:	e643      	b.n	413856 <_strtod_r+0x78e>
  413bce:	f43f aca7 	beq.w	413520 <_strtod_r+0x458>
  413bd2:	f1c8 0400 	rsb	r4, r8, #0
  413bd6:	f014 030f 	ands.w	r3, r4, #15
  413bda:	d00a      	beq.n	413bf2 <_strtod_r+0xb2a>
  413bdc:	4a67      	ldr	r2, [pc, #412]	; (413d7c <_strtod_r+0xcb4>)
  413bde:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  413be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413be6:	e9d3 2300 	ldrd	r2, r3, [r3]
  413bea:	f001 fe27 	bl	41583c <__aeabi_ddiv>
  413bee:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413bf2:	1124      	asrs	r4, r4, #4
  413bf4:	f43f ac94 	beq.w	413520 <_strtod_r+0x458>
  413bf8:	2c1f      	cmp	r4, #31
  413bfa:	dc33      	bgt.n	413c64 <_strtod_r+0xb9c>
  413bfc:	f014 0f10 	tst.w	r4, #16
  413c00:	bf14      	ite	ne
  413c02:	216a      	movne	r1, #106	; 0x6a
  413c04:	2100      	moveq	r1, #0
  413c06:	2c00      	cmp	r4, #0
  413c08:	910a      	str	r1, [sp, #40]	; 0x28
  413c0a:	dd0e      	ble.n	413c2a <_strtod_r+0xb62>
  413c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413c10:	4d5b      	ldr	r5, [pc, #364]	; (413d80 <_strtod_r+0xcb8>)
  413c12:	07e3      	lsls	r3, r4, #31
  413c14:	d503      	bpl.n	413c1e <_strtod_r+0xb56>
  413c16:	e9d5 2300 	ldrd	r2, r3, [r5]
  413c1a:	f001 fce5 	bl	4155e8 <__aeabi_dmul>
  413c1e:	1064      	asrs	r4, r4, #1
  413c20:	f105 0508 	add.w	r5, r5, #8
  413c24:	d1f5      	bne.n	413c12 <_strtod_r+0xb4a>
  413c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
  413c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  413c2c:	b18a      	cbz	r2, 413c52 <_strtod_r+0xb8a>
  413c2e:	9803      	ldr	r0, [sp, #12]
  413c30:	f3c0 530a 	ubfx	r3, r0, #20, #11
  413c34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  413c38:	2b00      	cmp	r3, #0
  413c3a:	dd0a      	ble.n	413c52 <_strtod_r+0xb8a>
  413c3c:	2b1f      	cmp	r3, #31
  413c3e:	f340 81bd 	ble.w	413fbc <_strtod_r+0xef4>
  413c42:	2100      	movs	r1, #0
  413c44:	2b34      	cmp	r3, #52	; 0x34
  413c46:	9102      	str	r1, [sp, #8]
  413c48:	f340 81c0 	ble.w	413fcc <_strtod_r+0xf04>
  413c4c:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
  413c50:	9203      	str	r2, [sp, #12]
  413c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413c56:	2200      	movs	r2, #0
  413c58:	2300      	movs	r3, #0
  413c5a:	f001 ff2d 	bl	415ab8 <__aeabi_dcmpeq>
  413c5e:	2800      	cmp	r0, #0
  413c60:	f43f ac60 	beq.w	413524 <_strtod_r+0x45c>
  413c64:	2322      	movs	r3, #34	; 0x22
  413c66:	f8cb 3000 	str.w	r3, [fp]
  413c6a:	f04f 0800 	mov.w	r8, #0
  413c6e:	f04f 0900 	mov.w	r9, #0
  413c72:	f7ff ba7f 	b.w	413174 <_strtod_r+0xac>
  413c76:	f644 611f 	movw	r1, #19999	; 0x4e1f
  413c7a:	e40f      	b.n	41349c <_strtod_r+0x3d4>
  413c7c:	9903      	ldr	r1, [sp, #12]
  413c7e:	f101 7454 	add.w	r4, r1, #55574528	; 0x3500000
  413c82:	9403      	str	r4, [sp, #12]
  413c84:	e569      	b.n	41375a <_strtod_r+0x692>
  413c86:	9808      	ldr	r0, [sp, #32]
  413c88:	f1ca 0325 	rsb	r3, sl, #37	; 0x25
  413c8c:	4298      	cmp	r0, r3
  413c8e:	f73f ac2d 	bgt.w	4134ec <_strtod_r+0x424>
  413c92:	4c3a      	ldr	r4, [pc, #232]	; (413d7c <_strtod_r+0xcb4>)
  413c94:	f1ca 050f 	rsb	r5, sl, #15
  413c98:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  413c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  413ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
  413ca4:	f001 fca0 	bl	4155e8 <__aeabi_dmul>
  413ca8:	9a08      	ldr	r2, [sp, #32]
  413caa:	1b55      	subs	r5, r2, r5
  413cac:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  413cb0:	e9d4 2300 	ldrd	r2, r3, [r4]
  413cb4:	f001 fc98 	bl	4155e8 <__aeabi_dmul>
  413cb8:	4680      	mov	r8, r0
  413cba:	4689      	mov	r9, r1
  413cbc:	f7ff ba5a 	b.w	413174 <_strtod_r+0xac>
  413cc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  413cc4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  413cc8:	e660      	b.n	41398c <_strtod_r+0x8c4>
  413cca:	492e      	ldr	r1, [pc, #184]	; (413d84 <_strtod_r+0xcbc>)
  413ccc:	2000      	movs	r0, #0
  413cce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  413cd2:	e651      	b.n	413978 <_strtod_r+0x8b0>
  413cd4:	464a      	mov	r2, r9
  413cd6:	2a00      	cmp	r2, #0
  413cd8:	f47f ae33 	bne.w	413942 <_strtod_r+0x87a>
  413cdc:	46b2      	mov	sl, r6
  413cde:	2322      	movs	r3, #34	; 0x22
  413ce0:	f8cb 3000 	str.w	r3, [fp]
  413ce4:	991a      	ldr	r1, [sp, #104]	; 0x68
  413ce6:	f04f 0800 	mov.w	r8, #0
  413cea:	f04f 0900 	mov.w	r9, #0
  413cee:	e713      	b.n	413b18 <_strtod_r+0xa50>
  413cf0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  413cf2:	b13a      	cbz	r2, 413d04 <_strtod_r+0xc3c>
  413cf4:	a81c      	add	r0, sp, #112	; 0x70
  413cf6:	2135      	movs	r1, #53	; 0x35
  413cf8:	f7fe ff02 	bl	412b00 <__copybits>
  413cfc:	4658      	mov	r0, fp
  413cfe:	991a      	ldr	r1, [sp, #104]	; 0x68
  413d00:	f7fe fb2c 	bl	41235c <_Bfree>
  413d04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  413d06:	2d06      	cmp	r5, #6
  413d08:	f63f ab6d 	bhi.w	4133e6 <_strtod_r+0x31e>
  413d0c:	a001      	add	r0, pc, #4	; (adr r0, 413d14 <_strtod_r+0xc4c>)
  413d0e:	f850 f025 	ldr.w	pc, [r0, r5, lsl #2]
  413d12:	bf00      	nop
  413d14:	00413d49 	.word	0x00413d49
  413d18:	00413d89 	.word	0x00413d89
  413d1c:	00413d3d 	.word	0x00413d3d
  413d20:	00413d31 	.word	0x00413d31
  413d24:	004133db 	.word	0x004133db
  413d28:	00413d89 	.word	0x00413d89
  413d2c:	00413d49 	.word	0x00413d49
  413d30:	4911      	ldr	r1, [pc, #68]	; (413d78 <_strtod_r+0xcb0>)
  413d32:	9103      	str	r1, [sp, #12]
  413d34:	2200      	movs	r2, #0
  413d36:	9202      	str	r2, [sp, #8]
  413d38:	f7ff bb55 	b.w	4133e6 <_strtod_r+0x31e>
  413d3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  413d3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  413d40:	9202      	str	r2, [sp, #8]
  413d42:	9303      	str	r3, [sp, #12]
  413d44:	f7ff bb4f 	b.w	4133e6 <_strtod_r+0x31e>
  413d48:	2100      	movs	r1, #0
  413d4a:	9103      	str	r1, [sp, #12]
  413d4c:	9102      	str	r1, [sp, #8]
  413d4e:	f7ff bb4a 	b.w	4133e6 <_strtod_r+0x31e>
  413d52:	bf00      	nop
  413d54:	f3af 8000 	nop.w
  413d58:	94a03595 	.word	0x94a03595
  413d5c:	3fcfffff 	.word	0x3fcfffff
  413d60:	94a03595 	.word	0x94a03595
  413d64:	3fdfffff 	.word	0x3fdfffff
  413d68:	35afe535 	.word	0x35afe535
  413d6c:	3fe00000 	.word	0x3fe00000
  413d70:	7c9fffff 	.word	0x7c9fffff
  413d74:	7fefffff 	.word	0x7fefffff
  413d78:	7ff00000 	.word	0x7ff00000
  413d7c:	00416348 	.word	0x00416348
  413d80:	00416480 	.word	0x00416480
  413d84:	3ff00000 	.word	0x3ff00000
  413d88:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  413d8a:	981c      	ldr	r0, [sp, #112]	; 0x70
  413d8c:	9002      	str	r0, [sp, #8]
  413d8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  413d92:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  413d96:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  413d9a:	9203      	str	r2, [sp, #12]
  413d9c:	f7ff bb23 	b.w	4133e6 <_strtod_r+0x31e>
  413da0:	9b08      	ldr	r3, [sp, #32]
  413da2:	3316      	adds	r3, #22
  413da4:	f6ff aba2 	blt.w	4134ec <_strtod_r+0x424>
  413da8:	4b8e      	ldr	r3, [pc, #568]	; (413fe4 <_strtod_r+0xf1c>)
  413daa:	9808      	ldr	r0, [sp, #32]
  413dac:	eba3 0ac0 	sub.w	sl, r3, r0, lsl #3
  413db0:	e9da 2300 	ldrd	r2, r3, [sl]
  413db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413db8:	f001 fd40 	bl	41583c <__aeabi_ddiv>
  413dbc:	4680      	mov	r8, r0
  413dbe:	4689      	mov	r9, r1
  413dc0:	f7ff b9d8 	b.w	413174 <_strtod_r+0xac>
  413dc4:	46b2      	mov	sl, r6
  413dc6:	4601      	mov	r1, r0
  413dc8:	e69d      	b.n	413b06 <_strtod_r+0xa3e>
  413dca:	f1ba 0f10 	cmp.w	sl, #16
  413dce:	bfdc      	itt	le
  413dd0:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  413dd4:	eb02 0747 	addle.w	r7, r2, r7, lsl #1
  413dd8:	2000      	movs	r0, #0
  413dda:	e6f4      	b.n	413bc6 <_strtod_r+0xafe>
  413ddc:	4655      	mov	r5, sl
  413dde:	46c4      	mov	ip, r8
  413de0:	46b2      	mov	sl, r6
  413de2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  413de6:	2d00      	cmp	r5, #0
  413de8:	f000 8082 	beq.w	413ef0 <_strtod_r+0xe28>
  413dec:	9a03      	ldr	r2, [sp, #12]
  413dee:	4b7e      	ldr	r3, [pc, #504]	; (413fe8 <_strtod_r+0xf20>)
  413df0:	f3c2 0113 	ubfx	r1, r2, #0, #20
  413df4:	4299      	cmp	r1, r3
  413df6:	f000 80a3 	beq.w	413f40 <_strtod_r+0xe78>
  413dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  413dfc:	2b00      	cmp	r3, #0
  413dfe:	f000 8083 	beq.w	413f08 <_strtod_r+0xe40>
  413e02:	9803      	ldr	r0, [sp, #12]
  413e04:	4203      	tst	r3, r0
  413e06:	d00f      	beq.n	413e28 <_strtod_r+0xd60>
  413e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  413e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  413e0e:	2d00      	cmp	r5, #0
  413e10:	f000 8084 	beq.w	413f1c <_strtod_r+0xe54>
  413e14:	f7ff f938 	bl	413088 <sulp>
  413e18:	4602      	mov	r2, r0
  413e1a:	460b      	mov	r3, r1
  413e1c:	4640      	mov	r0, r8
  413e1e:	4649      	mov	r1, r9
  413e20:	f001 fa30 	bl	415284 <__adddf3>
  413e24:	4680      	mov	r8, r0
  413e26:	4689      	mov	r9, r1
  413e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  413e2a:	b1b3      	cbz	r3, 413e5a <_strtod_r+0xd92>
  413e2c:	486f      	ldr	r0, [pc, #444]	; (413fec <_strtod_r+0xf24>)
  413e2e:	9013      	str	r0, [sp, #76]	; 0x4c
  413e30:	2100      	movs	r1, #0
  413e32:	9112      	str	r1, [sp, #72]	; 0x48
  413e34:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  413e38:	4640      	mov	r0, r8
  413e3a:	4649      	mov	r1, r9
  413e3c:	f001 fbd4 	bl	4155e8 <__aeabi_dmul>
  413e40:	4680      	mov	r8, r0
  413e42:	4689      	mov	r9, r1
  413e44:	e9cd 8902 	strd	r8, r9, [sp, #8]
  413e48:	9a03      	ldr	r2, [sp, #12]
  413e4a:	b932      	cbnz	r2, 413e5a <_strtod_r+0xd92>
  413e4c:	9b02      	ldr	r3, [sp, #8]
  413e4e:	b923      	cbnz	r3, 413e5a <_strtod_r+0xd92>
  413e50:	2322      	movs	r3, #34	; 0x22
  413e52:	991a      	ldr	r1, [sp, #104]	; 0x68
  413e54:	f8cb 3000 	str.w	r3, [fp]
  413e58:	e65e      	b.n	413b18 <_strtod_r+0xa50>
  413e5a:	991a      	ldr	r1, [sp, #104]	; 0x68
  413e5c:	e65c      	b.n	413b18 <_strtod_r+0xa50>
  413e5e:	4655      	mov	r5, sl
  413e60:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  413e64:	46b2      	mov	sl, r6
  413e66:	2d00      	cmp	r5, #0
  413e68:	d1de      	bne.n	413e28 <_strtod_r+0xd60>
  413e6a:	9a02      	ldr	r2, [sp, #8]
  413e6c:	2a00      	cmp	r2, #0
  413e6e:	d1db      	bne.n	413e28 <_strtod_r+0xd60>
  413e70:	9803      	ldr	r0, [sp, #12]
  413e72:	f3c0 0313 	ubfx	r3, r0, #0, #20
  413e76:	4604      	mov	r4, r0
  413e78:	2b00      	cmp	r3, #0
  413e7a:	d1d5      	bne.n	413e28 <_strtod_r+0xd60>
  413e7c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  413e80:	0d1b      	lsrs	r3, r3, #20
  413e82:	051b      	lsls	r3, r3, #20
  413e84:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  413e88:	d9ce      	bls.n	413e28 <_strtod_r+0xd60>
  413e8a:	9906      	ldr	r1, [sp, #24]
  413e8c:	694b      	ldr	r3, [r1, #20]
  413e8e:	b913      	cbnz	r3, 413e96 <_strtod_r+0xdce>
  413e90:	690b      	ldr	r3, [r1, #16]
  413e92:	2b01      	cmp	r3, #1
  413e94:	ddc8      	ble.n	413e28 <_strtod_r+0xd60>
  413e96:	9906      	ldr	r1, [sp, #24]
  413e98:	2201      	movs	r2, #1
  413e9a:	4658      	mov	r0, fp
  413e9c:	f7fe fc44 	bl	412728 <__lshift>
  413ea0:	4639      	mov	r1, r7
  413ea2:	9006      	str	r0, [sp, #24]
  413ea4:	f7fe fc9e 	bl	4127e4 <__mcmp>
  413ea8:	2800      	cmp	r0, #0
  413eaa:	ddbd      	ble.n	413e28 <_strtod_r+0xd60>
  413eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  413eae:	2b00      	cmp	r3, #0
  413eb0:	d17a      	bne.n	413fa8 <_strtod_r+0xee0>
  413eb2:	4b4f      	ldr	r3, [pc, #316]	; (413ff0 <_strtod_r+0xf28>)
  413eb4:	4023      	ands	r3, r4
  413eb6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  413eba:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  413ebe:	ea6f 5003 	mvn.w	r0, r3, lsl #20
  413ec2:	f04f 31ff 	mov.w	r1, #4294967295
  413ec6:	9003      	str	r0, [sp, #12]
  413ec8:	9102      	str	r1, [sp, #8]
  413eca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  413ece:	e7ab      	b.n	413e28 <_strtod_r+0xd60>
  413ed0:	f100 7154 	add.w	r1, r0, #55574528	; 0x3500000
  413ed4:	2000      	movs	r0, #0
  413ed6:	9103      	str	r1, [sp, #12]
  413ed8:	900a      	str	r0, [sp, #40]	; 0x28
  413eda:	f7ff bb23 	b.w	413524 <_strtod_r+0x45c>
  413ede:	4b45      	ldr	r3, [pc, #276]	; (413ff4 <_strtod_r+0xf2c>)
  413ee0:	4945      	ldr	r1, [pc, #276]	; (413ff8 <_strtod_r+0xf30>)
  413ee2:	2200      	movs	r2, #0
  413ee4:	2000      	movs	r0, #0
  413ee6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  413eea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  413eee:	e4ac      	b.n	41384a <_strtod_r+0x782>
  413ef0:	9903      	ldr	r1, [sp, #12]
  413ef2:	f3c1 0313 	ubfx	r3, r1, #0, #20
  413ef6:	460c      	mov	r4, r1
  413ef8:	2b00      	cmp	r3, #0
  413efa:	f47f af7e 	bne.w	413dfa <_strtod_r+0xd32>
  413efe:	9a02      	ldr	r2, [sp, #8]
  413f00:	2a00      	cmp	r2, #0
  413f02:	f47f af7a 	bne.w	413dfa <_strtod_r+0xd32>
  413f06:	e7d1      	b.n	413eac <_strtod_r+0xde4>
  413f08:	9902      	ldr	r1, [sp, #8]
  413f0a:	ea1c 0f01 	tst.w	ip, r1
  413f0e:	d08b      	beq.n	413e28 <_strtod_r+0xd60>
  413f10:	e77a      	b.n	413e08 <_strtod_r+0xd40>
  413f12:	3101      	adds	r1, #1
  413f14:	9119      	str	r1, [sp, #100]	; 0x64
  413f16:	e57d      	b.n	413a14 <_strtod_r+0x94c>
  413f18:	2700      	movs	r7, #0
  413f1a:	e4e8      	b.n	4138ee <_strtod_r+0x826>
  413f1c:	f7ff f8b4 	bl	413088 <sulp>
  413f20:	4602      	mov	r2, r0
  413f22:	460b      	mov	r3, r1
  413f24:	4640      	mov	r0, r8
  413f26:	4649      	mov	r1, r9
  413f28:	f001 f9aa 	bl	415280 <__aeabi_dsub>
  413f2c:	2200      	movs	r2, #0
  413f2e:	2300      	movs	r3, #0
  413f30:	4680      	mov	r8, r0
  413f32:	4689      	mov	r9, r1
  413f34:	f001 fdc0 	bl	415ab8 <__aeabi_dcmpeq>
  413f38:	2800      	cmp	r0, #0
  413f3a:	f47f aed0 	bne.w	413cde <_strtod_r+0xc16>
  413f3e:	e773      	b.n	413e28 <_strtod_r+0xd60>
  413f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  413f42:	9902      	ldr	r1, [sp, #8]
  413f44:	b1db      	cbz	r3, 413f7e <_strtod_r+0xeb6>
  413f46:	4b2a      	ldr	r3, [pc, #168]	; (413ff0 <_strtod_r+0xf28>)
  413f48:	4013      	ands	r3, r2
  413f4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  413f4e:	d816      	bhi.n	413f7e <_strtod_r+0xeb6>
  413f50:	0d1b      	lsrs	r3, r3, #20
  413f52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  413f56:	f04f 30ff 	mov.w	r0, #4294967295
  413f5a:	fa00 f303 	lsl.w	r3, r0, r3
  413f5e:	4299      	cmp	r1, r3
  413f60:	f47f af4b 	bne.w	413dfa <_strtod_r+0xd32>
  413f64:	4b25      	ldr	r3, [pc, #148]	; (413ffc <_strtod_r+0xf34>)
  413f66:	429a      	cmp	r2, r3
  413f68:	d038      	beq.n	413fdc <_strtod_r+0xf14>
  413f6a:	4b21      	ldr	r3, [pc, #132]	; (413ff0 <_strtod_r+0xf28>)
  413f6c:	4013      	ands	r3, r2
  413f6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  413f72:	2000      	movs	r0, #0
  413f74:	9303      	str	r3, [sp, #12]
  413f76:	9002      	str	r0, [sp, #8]
  413f78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  413f7c:	e754      	b.n	413e28 <_strtod_r+0xd60>
  413f7e:	f04f 33ff 	mov.w	r3, #4294967295
  413f82:	e7ec      	b.n	413f5e <_strtod_r+0xe96>
  413f84:	a819      	add	r0, sp, #100	; 0x64
  413f86:	491e      	ldr	r1, [pc, #120]	; (414000 <_strtod_r+0xf38>)
  413f88:	aa1c      	add	r2, sp, #112	; 0x70
  413f8a:	f001 f899 	bl	4150c0 <__hexnan>
  413f8e:	2805      	cmp	r0, #5
  413f90:	f47f ad16 	bne.w	4139c0 <_strtod_r+0x8f8>
  413f94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  413f96:	991c      	ldr	r1, [sp, #112]	; 0x70
  413f98:	9102      	str	r1, [sp, #8]
  413f9a:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  413f9e:	f443 00e0 	orr.w	r0, r3, #7340032	; 0x700000
  413fa2:	9003      	str	r0, [sp, #12]
  413fa4:	f7ff ba25 	b.w	4133f2 <_strtod_r+0x32a>
  413fa8:	4b11      	ldr	r3, [pc, #68]	; (413ff0 <_strtod_r+0xf28>)
  413faa:	4023      	ands	r3, r4
  413fac:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  413fb0:	d881      	bhi.n	413eb6 <_strtod_r+0xdee>
  413fb2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  413fb6:	f63f af39 	bhi.w	413e2c <_strtod_r+0xd64>
  413fba:	e690      	b.n	413cde <_strtod_r+0xc16>
  413fbc:	9802      	ldr	r0, [sp, #8]
  413fbe:	f04f 32ff 	mov.w	r2, #4294967295
  413fc2:	fa02 f303 	lsl.w	r3, r2, r3
  413fc6:	4003      	ands	r3, r0
  413fc8:	9302      	str	r3, [sp, #8]
  413fca:	e642      	b.n	413c52 <_strtod_r+0xb8a>
  413fcc:	3b20      	subs	r3, #32
  413fce:	f04f 31ff 	mov.w	r1, #4294967295
  413fd2:	fa01 f303 	lsl.w	r3, r1, r3
  413fd6:	4003      	ands	r3, r0
  413fd8:	9303      	str	r3, [sp, #12]
  413fda:	e63a      	b.n	413c52 <_strtod_r+0xb8a>
  413fdc:	3101      	adds	r1, #1
  413fde:	d1c4      	bne.n	413f6a <_strtod_r+0xea2>
  413fe0:	e590      	b.n	413b04 <_strtod_r+0xa3c>
  413fe2:	bf00      	nop
  413fe4:	00416348 	.word	0x00416348
  413fe8:	000fffff 	.word	0x000fffff
  413fec:	39500000 	.word	0x39500000
  413ff0:	7ff00000 	.word	0x7ff00000
  413ff4:	bfe00000 	.word	0xbfe00000
  413ff8:	3fe00000 	.word	0x3fe00000
  413ffc:	7fefffff 	.word	0x7fefffff
  414000:	00416468 	.word	0x00416468
  414004:	f3af 8000 	nop.w

00414008 <_strtol_r>:
  414008:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41400c:	4c42      	ldr	r4, [pc, #264]	; (414118 <_strtol_r+0x110>)
  41400e:	b082      	sub	sp, #8
  414010:	f8d4 c000 	ldr.w	ip, [r4]
  414014:	9001      	str	r0, [sp, #4]
  414016:	460e      	mov	r6, r1
  414018:	e000      	b.n	41401c <_strtol_r+0x14>
  41401a:	4626      	mov	r6, r4
  41401c:	4634      	mov	r4, r6
  41401e:	f814 5b01 	ldrb.w	r5, [r4], #1
  414022:	eb0c 0005 	add.w	r0, ip, r5
  414026:	7840      	ldrb	r0, [r0, #1]
  414028:	f000 0008 	and.w	r0, r0, #8
  41402c:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  414030:	2800      	cmp	r0, #0
  414032:	d1f2      	bne.n	41401a <_strtol_r+0x12>
  414034:	2d2d      	cmp	r5, #45	; 0x2d
  414036:	d05b      	beq.n	4140f0 <_strtol_r+0xe8>
  414038:	2d2b      	cmp	r5, #43	; 0x2b
  41403a:	bf04      	itt	eq
  41403c:	7875      	ldrbeq	r5, [r6, #1]
  41403e:	1cb4      	addeq	r4, r6, #2
  414040:	f033 0010 	bics.w	r0, r3, #16
  414044:	d03c      	beq.n	4140c0 <_strtol_r+0xb8>
  414046:	4699      	mov	r9, r3
  414048:	f1ba 0f00 	cmp.w	sl, #0
  41404c:	bf0c      	ite	eq
  41404e:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
  414052:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
  414056:	fbbb f8f9 	udiv	r8, fp, r9
  41405a:	2700      	movs	r7, #0
  41405c:	fb09 bb18 	mls	fp, r9, r8, fp
  414060:	4638      	mov	r0, r7
  414062:	e00c      	b.n	41407e <_strtol_r+0x76>
  414064:	3d30      	subs	r5, #48	; 0x30
  414066:	42ab      	cmp	r3, r5
  414068:	dd19      	ble.n	41409e <_strtol_r+0x96>
  41406a:	1c7e      	adds	r6, r7, #1
  41406c:	d005      	beq.n	41407a <_strtol_r+0x72>
  41406e:	4540      	cmp	r0, r8
  414070:	d823      	bhi.n	4140ba <_strtol_r+0xb2>
  414072:	d020      	beq.n	4140b6 <_strtol_r+0xae>
  414074:	fb09 5000 	mla	r0, r9, r0, r5
  414078:	2701      	movs	r7, #1
  41407a:	f814 5b01 	ldrb.w	r5, [r4], #1
  41407e:	eb0c 0605 	add.w	r6, ip, r5
  414082:	7876      	ldrb	r6, [r6, #1]
  414084:	f016 0f04 	tst.w	r6, #4
  414088:	d1ec      	bne.n	414064 <_strtol_r+0x5c>
  41408a:	f016 0603 	ands.w	r6, r6, #3
  41408e:	d006      	beq.n	41409e <_strtol_r+0x96>
  414090:	2e01      	cmp	r6, #1
  414092:	bf14      	ite	ne
  414094:	2657      	movne	r6, #87	; 0x57
  414096:	2637      	moveq	r6, #55	; 0x37
  414098:	1bad      	subs	r5, r5, r6
  41409a:	42ab      	cmp	r3, r5
  41409c:	dce5      	bgt.n	41406a <_strtol_r+0x62>
  41409e:	1c7b      	adds	r3, r7, #1
  4140a0:	d015      	beq.n	4140ce <_strtol_r+0xc6>
  4140a2:	f1ba 0f00 	cmp.w	sl, #0
  4140a6:	d121      	bne.n	4140ec <_strtol_r+0xe4>
  4140a8:	b10a      	cbz	r2, 4140ae <_strtol_r+0xa6>
  4140aa:	b9ef      	cbnz	r7, 4140e8 <_strtol_r+0xe0>
  4140ac:	6011      	str	r1, [r2, #0]
  4140ae:	b002      	add	sp, #8
  4140b0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4140b4:	4770      	bx	lr
  4140b6:	455d      	cmp	r5, fp
  4140b8:	dddc      	ble.n	414074 <_strtol_r+0x6c>
  4140ba:	f04f 37ff 	mov.w	r7, #4294967295
  4140be:	e7dc      	b.n	41407a <_strtol_r+0x72>
  4140c0:	2d30      	cmp	r5, #48	; 0x30
  4140c2:	d01a      	beq.n	4140fa <_strtol_r+0xf2>
  4140c4:	2b00      	cmp	r3, #0
  4140c6:	d1be      	bne.n	414046 <_strtol_r+0x3e>
  4140c8:	230a      	movs	r3, #10
  4140ca:	4699      	mov	r9, r3
  4140cc:	e7bc      	b.n	414048 <_strtol_r+0x40>
  4140ce:	9901      	ldr	r1, [sp, #4]
  4140d0:	f1ba 0f00 	cmp.w	sl, #0
  4140d4:	f04f 0322 	mov.w	r3, #34	; 0x22
  4140d8:	bf0c      	ite	eq
  4140da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4140de:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  4140e2:	600b      	str	r3, [r1, #0]
  4140e4:	2a00      	cmp	r2, #0
  4140e6:	d0e2      	beq.n	4140ae <_strtol_r+0xa6>
  4140e8:	1e61      	subs	r1, r4, #1
  4140ea:	e7df      	b.n	4140ac <_strtol_r+0xa4>
  4140ec:	4240      	negs	r0, r0
  4140ee:	e7db      	b.n	4140a8 <_strtol_r+0xa0>
  4140f0:	1cb4      	adds	r4, r6, #2
  4140f2:	7875      	ldrb	r5, [r6, #1]
  4140f4:	f04f 0a01 	mov.w	sl, #1
  4140f8:	e7a2      	b.n	414040 <_strtol_r+0x38>
  4140fa:	7820      	ldrb	r0, [r4, #0]
  4140fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  414100:	2858      	cmp	r0, #88	; 0x58
  414102:	d003      	beq.n	41410c <_strtol_r+0x104>
  414104:	2b00      	cmp	r3, #0
  414106:	d19e      	bne.n	414046 <_strtol_r+0x3e>
  414108:	2308      	movs	r3, #8
  41410a:	e79c      	b.n	414046 <_strtol_r+0x3e>
  41410c:	2310      	movs	r3, #16
  41410e:	7865      	ldrb	r5, [r4, #1]
  414110:	4699      	mov	r9, r3
  414112:	3402      	adds	r4, #2
  414114:	e798      	b.n	414048 <_strtol_r+0x40>
  414116:	bf00      	nop
  414118:	2000079c 	.word	0x2000079c

0041411c <_strtoll_r>:
  41411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414120:	4c64      	ldr	r4, [pc, #400]	; (4142b4 <_strtoll_r+0x198>)
  414122:	b087      	sub	sp, #28
  414124:	4694      	mov	ip, r2
  414126:	9104      	str	r1, [sp, #16]
  414128:	f8d4 8000 	ldr.w	r8, [r4]
  41412c:	9005      	str	r0, [sp, #20]
  41412e:	4699      	mov	r9, r3
  414130:	460a      	mov	r2, r1
  414132:	e000      	b.n	414136 <_strtoll_r+0x1a>
  414134:	4632      	mov	r2, r6
  414136:	4616      	mov	r6, r2
  414138:	f816 7b01 	ldrb.w	r7, [r6], #1
  41413c:	eb08 0307 	add.w	r3, r8, r7
  414140:	785b      	ldrb	r3, [r3, #1]
  414142:	f003 0308 	and.w	r3, r3, #8
  414146:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  41414a:	2b00      	cmp	r3, #0
  41414c:	d1f2      	bne.n	414134 <_strtoll_r+0x18>
  41414e:	2f2d      	cmp	r7, #45	; 0x2d
  414150:	f000 808d 	beq.w	41426e <_strtoll_r+0x152>
  414154:	2f2b      	cmp	r7, #43	; 0x2b
  414156:	bf08      	it	eq
  414158:	7857      	ldrbeq	r7, [r2, #1]
  41415a:	9102      	str	r1, [sp, #8]
  41415c:	bf08      	it	eq
  41415e:	1c96      	addeq	r6, r2, #2
  414160:	f039 0110 	bics.w	r1, r9, #16
  414164:	d05e      	beq.n	414224 <_strtoll_r+0x108>
  414166:	46ca      	mov	sl, r9
  414168:	ea4f 7be9 	mov.w	fp, r9, asr #31
  41416c:	9c02      	ldr	r4, [sp, #8]
  41416e:	2c00      	cmp	r4, #0
  414170:	d066      	beq.n	414240 <_strtoll_r+0x124>
  414172:	2400      	movs	r4, #0
  414174:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  414178:	4620      	mov	r0, r4
  41417a:	4629      	mov	r1, r5
  41417c:	4652      	mov	r2, sl
  41417e:	465b      	mov	r3, fp
  414180:	f8cd c004 	str.w	ip, [sp, #4]
  414184:	f7f8 f95a 	bl	40c43c <__aeabi_uldivmod>
  414188:	4620      	mov	r0, r4
  41418a:	9203      	str	r2, [sp, #12]
  41418c:	465b      	mov	r3, fp
  41418e:	4652      	mov	r2, sl
  414190:	4629      	mov	r1, r5
  414192:	f7f8 f953 	bl	40c43c <__aeabi_uldivmod>
  414196:	2400      	movs	r4, #0
  414198:	2200      	movs	r2, #0
  41419a:	2300      	movs	r3, #0
  41419c:	f8dd c004 	ldr.w	ip, [sp, #4]
  4141a0:	e019      	b.n	4141d6 <_strtoll_r+0xba>
  4141a2:	3f30      	subs	r7, #48	; 0x30
  4141a4:	45b9      	cmp	r9, r7
  4141a6:	dd26      	ble.n	4141f6 <_strtoll_r+0xda>
  4141a8:	1c65      	adds	r5, r4, #1
  4141aa:	d012      	beq.n	4141d2 <_strtoll_r+0xb6>
  4141ac:	4299      	cmp	r1, r3
  4141ae:	bf08      	it	eq
  4141b0:	4290      	cmpeq	r0, r2
  4141b2:	d334      	bcc.n	41421e <_strtoll_r+0x102>
  4141b4:	428b      	cmp	r3, r1
  4141b6:	bf08      	it	eq
  4141b8:	4282      	cmpeq	r2, r0
  4141ba:	d02d      	beq.n	414218 <_strtoll_r+0xfc>
  4141bc:	fb02 f40b 	mul.w	r4, r2, fp
  4141c0:	fb0a 4403 	mla	r4, sl, r3, r4
  4141c4:	fba2 230a 	umull	r2, r3, r2, sl
  4141c8:	4423      	add	r3, r4
  4141ca:	19d2      	adds	r2, r2, r7
  4141cc:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
  4141d0:	2401      	movs	r4, #1
  4141d2:	f816 7b01 	ldrb.w	r7, [r6], #1
  4141d6:	eb08 0507 	add.w	r5, r8, r7
  4141da:	786d      	ldrb	r5, [r5, #1]
  4141dc:	f015 0f04 	tst.w	r5, #4
  4141e0:	d1df      	bne.n	4141a2 <_strtoll_r+0x86>
  4141e2:	f015 0503 	ands.w	r5, r5, #3
  4141e6:	d006      	beq.n	4141f6 <_strtoll_r+0xda>
  4141e8:	2d01      	cmp	r5, #1
  4141ea:	bf14      	ite	ne
  4141ec:	2557      	movne	r5, #87	; 0x57
  4141ee:	2537      	moveq	r5, #55	; 0x37
  4141f0:	1b7f      	subs	r7, r7, r5
  4141f2:	45b9      	cmp	r9, r7
  4141f4:	dcd8      	bgt.n	4141a8 <_strtoll_r+0x8c>
  4141f6:	1c61      	adds	r1, r4, #1
  4141f8:	d027      	beq.n	41424a <_strtoll_r+0x12e>
  4141fa:	9902      	ldr	r1, [sp, #8]
  4141fc:	2900      	cmp	r1, #0
  4141fe:	d132      	bne.n	414266 <_strtoll_r+0x14a>
  414200:	4610      	mov	r0, r2
  414202:	4619      	mov	r1, r3
  414204:	f1bc 0f00 	cmp.w	ip, #0
  414208:	d003      	beq.n	414212 <_strtoll_r+0xf6>
  41420a:	bb54      	cbnz	r4, 414262 <_strtoll_r+0x146>
  41420c:	9e04      	ldr	r6, [sp, #16]
  41420e:	f8cc 6000 	str.w	r6, [ip]
  414212:	b007      	add	sp, #28
  414214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414218:	9c03      	ldr	r4, [sp, #12]
  41421a:	42a7      	cmp	r7, r4
  41421c:	ddce      	ble.n	4141bc <_strtoll_r+0xa0>
  41421e:	f04f 34ff 	mov.w	r4, #4294967295
  414222:	e7d6      	b.n	4141d2 <_strtoll_r+0xb6>
  414224:	2f30      	cmp	r7, #48	; 0x30
  414226:	d027      	beq.n	414278 <_strtoll_r+0x15c>
  414228:	f1b9 0f00 	cmp.w	r9, #0
  41422c:	d19b      	bne.n	414166 <_strtoll_r+0x4a>
  41422e:	9c02      	ldr	r4, [sp, #8]
  414230:	f04f 0a0a 	mov.w	sl, #10
  414234:	f04f 0b00 	mov.w	fp, #0
  414238:	f04f 090a 	mov.w	r9, #10
  41423c:	2c00      	cmp	r4, #0
  41423e:	d198      	bne.n	414172 <_strtoll_r+0x56>
  414240:	f04f 34ff 	mov.w	r4, #4294967295
  414244:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  414248:	e796      	b.n	414178 <_strtoll_r+0x5c>
  41424a:	9c02      	ldr	r4, [sp, #8]
  41424c:	bb24      	cbnz	r4, 414298 <_strtoll_r+0x17c>
  41424e:	f04f 30ff 	mov.w	r0, #4294967295
  414252:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  414256:	9c05      	ldr	r4, [sp, #20]
  414258:	2322      	movs	r3, #34	; 0x22
  41425a:	6023      	str	r3, [r4, #0]
  41425c:	f1bc 0f00 	cmp.w	ip, #0
  414260:	d0d7      	beq.n	414212 <_strtoll_r+0xf6>
  414262:	3e01      	subs	r6, #1
  414264:	e7d3      	b.n	41420e <_strtoll_r+0xf2>
  414266:	4252      	negs	r2, r2
  414268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  41426c:	e7c8      	b.n	414200 <_strtoll_r+0xe4>
  41426e:	2401      	movs	r4, #1
  414270:	1c96      	adds	r6, r2, #2
  414272:	7857      	ldrb	r7, [r2, #1]
  414274:	9402      	str	r4, [sp, #8]
  414276:	e773      	b.n	414160 <_strtoll_r+0x44>
  414278:	7833      	ldrb	r3, [r6, #0]
  41427a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  41427e:	2b58      	cmp	r3, #88	; 0x58
  414280:	d00e      	beq.n	4142a0 <_strtoll_r+0x184>
  414282:	f1b9 0f00 	cmp.w	r9, #0
  414286:	f47f af6e 	bne.w	414166 <_strtoll_r+0x4a>
  41428a:	f04f 0a08 	mov.w	sl, #8
  41428e:	f04f 0b00 	mov.w	fp, #0
  414292:	f04f 0908 	mov.w	r9, #8
  414296:	e769      	b.n	41416c <_strtoll_r+0x50>
  414298:	2000      	movs	r0, #0
  41429a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  41429e:	e7da      	b.n	414256 <_strtoll_r+0x13a>
  4142a0:	7877      	ldrb	r7, [r6, #1]
  4142a2:	f04f 0a10 	mov.w	sl, #16
  4142a6:	f04f 0b00 	mov.w	fp, #0
  4142aa:	3602      	adds	r6, #2
  4142ac:	f04f 0910 	mov.w	r9, #16
  4142b0:	e75c      	b.n	41416c <_strtoll_r+0x50>
  4142b2:	bf00      	nop
  4142b4:	2000079c 	.word	0x2000079c

004142b8 <_strtoul_r>:
  4142b8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4142bc:	4c44      	ldr	r4, [pc, #272]	; (4143d0 <_strtoul_r+0x118>)
  4142be:	b082      	sub	sp, #8
  4142c0:	f8d4 c000 	ldr.w	ip, [r4]
  4142c4:	9001      	str	r0, [sp, #4]
  4142c6:	460e      	mov	r6, r1
  4142c8:	e000      	b.n	4142cc <_strtoul_r+0x14>
  4142ca:	4626      	mov	r6, r4
  4142cc:	4634      	mov	r4, r6
  4142ce:	f814 5b01 	ldrb.w	r5, [r4], #1
  4142d2:	eb0c 0005 	add.w	r0, ip, r5
  4142d6:	7840      	ldrb	r0, [r0, #1]
  4142d8:	f000 0008 	and.w	r0, r0, #8
  4142dc:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  4142e0:	2800      	cmp	r0, #0
  4142e2:	d1f2      	bne.n	4142ca <_strtoul_r+0x12>
  4142e4:	2d2d      	cmp	r5, #45	; 0x2d
  4142e6:	d057      	beq.n	414398 <_strtoul_r+0xe0>
  4142e8:	2d2b      	cmp	r5, #43	; 0x2b
  4142ea:	bf08      	it	eq
  4142ec:	7875      	ldrbeq	r5, [r6, #1]
  4142ee:	46ba      	mov	sl, r7
  4142f0:	bf08      	it	eq
  4142f2:	1cb4      	addeq	r4, r6, #2
  4142f4:	f033 0010 	bics.w	r0, r3, #16
  4142f8:	d039      	beq.n	41436e <_strtoul_r+0xb6>
  4142fa:	f04f 38ff 	mov.w	r8, #4294967295
  4142fe:	fbb8 f8f3 	udiv	r8, r8, r3
  414302:	fb03 fb08 	mul.w	fp, r3, r8
  414306:	ea6f 0b0b 	mvn.w	fp, fp
  41430a:	4699      	mov	r9, r3
  41430c:	2700      	movs	r7, #0
  41430e:	4638      	mov	r0, r7
  414310:	e00c      	b.n	41432c <_strtoul_r+0x74>
  414312:	3d30      	subs	r5, #48	; 0x30
  414314:	42ab      	cmp	r3, r5
  414316:	dd19      	ble.n	41434c <_strtoul_r+0x94>
  414318:	2f00      	cmp	r7, #0
  41431a:	db25      	blt.n	414368 <_strtoul_r+0xb0>
  41431c:	4540      	cmp	r0, r8
  41431e:	d823      	bhi.n	414368 <_strtoul_r+0xb0>
  414320:	d020      	beq.n	414364 <_strtoul_r+0xac>
  414322:	fb09 5000 	mla	r0, r9, r0, r5
  414326:	2701      	movs	r7, #1
  414328:	f814 5b01 	ldrb.w	r5, [r4], #1
  41432c:	eb0c 0605 	add.w	r6, ip, r5
  414330:	7876      	ldrb	r6, [r6, #1]
  414332:	f016 0f04 	tst.w	r6, #4
  414336:	d1ec      	bne.n	414312 <_strtoul_r+0x5a>
  414338:	f016 0603 	ands.w	r6, r6, #3
  41433c:	d006      	beq.n	41434c <_strtoul_r+0x94>
  41433e:	2e01      	cmp	r6, #1
  414340:	bf14      	ite	ne
  414342:	2657      	movne	r6, #87	; 0x57
  414344:	2637      	moveq	r6, #55	; 0x37
  414346:	1bad      	subs	r5, r5, r6
  414348:	42ab      	cmp	r3, r5
  41434a:	dce5      	bgt.n	414318 <_strtoul_r+0x60>
  41434c:	2f00      	cmp	r7, #0
  41434e:	db1d      	blt.n	41438c <_strtoul_r+0xd4>
  414350:	f1ba 0f00 	cmp.w	sl, #0
  414354:	d118      	bne.n	414388 <_strtoul_r+0xd0>
  414356:	b10a      	cbz	r2, 41435c <_strtoul_r+0xa4>
  414358:	b9a7      	cbnz	r7, 414384 <_strtoul_r+0xcc>
  41435a:	6011      	str	r1, [r2, #0]
  41435c:	b002      	add	sp, #8
  41435e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  414362:	4770      	bx	lr
  414364:	455d      	cmp	r5, fp
  414366:	dddc      	ble.n	414322 <_strtoul_r+0x6a>
  414368:	f04f 37ff 	mov.w	r7, #4294967295
  41436c:	e7dc      	b.n	414328 <_strtoul_r+0x70>
  41436e:	2d30      	cmp	r5, #48	; 0x30
  414370:	d017      	beq.n	4143a2 <_strtoul_r+0xea>
  414372:	2b00      	cmp	r3, #0
  414374:	d1c1      	bne.n	4142fa <_strtoul_r+0x42>
  414376:	230a      	movs	r3, #10
  414378:	4699      	mov	r9, r3
  41437a:	f04f 0b05 	mov.w	fp, #5
  41437e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4143d4 <_strtoul_r+0x11c>
  414382:	e7c3      	b.n	41430c <_strtoul_r+0x54>
  414384:	1e61      	subs	r1, r4, #1
  414386:	e7e8      	b.n	41435a <_strtoul_r+0xa2>
  414388:	4240      	negs	r0, r0
  41438a:	e7e4      	b.n	414356 <_strtoul_r+0x9e>
  41438c:	9801      	ldr	r0, [sp, #4]
  41438e:	2322      	movs	r3, #34	; 0x22
  414390:	6003      	str	r3, [r0, #0]
  414392:	f04f 30ff 	mov.w	r0, #4294967295
  414396:	e7de      	b.n	414356 <_strtoul_r+0x9e>
  414398:	1cb4      	adds	r4, r6, #2
  41439a:	7875      	ldrb	r5, [r6, #1]
  41439c:	f04f 0a01 	mov.w	sl, #1
  4143a0:	e7a8      	b.n	4142f4 <_strtoul_r+0x3c>
  4143a2:	7820      	ldrb	r0, [r4, #0]
  4143a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  4143a8:	2858      	cmp	r0, #88	; 0x58
  4143aa:	d008      	beq.n	4143be <_strtoul_r+0x106>
  4143ac:	2b00      	cmp	r3, #0
  4143ae:	d1a4      	bne.n	4142fa <_strtoul_r+0x42>
  4143b0:	2308      	movs	r3, #8
  4143b2:	4699      	mov	r9, r3
  4143b4:	f04f 0b07 	mov.w	fp, #7
  4143b8:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
  4143bc:	e7a6      	b.n	41430c <_strtoul_r+0x54>
  4143be:	2310      	movs	r3, #16
  4143c0:	7865      	ldrb	r5, [r4, #1]
  4143c2:	4699      	mov	r9, r3
  4143c4:	f04f 0b0f 	mov.w	fp, #15
  4143c8:	3402      	adds	r4, #2
  4143ca:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  4143ce:	e79d      	b.n	41430c <_strtoul_r+0x54>
  4143d0:	2000079c 	.word	0x2000079c
  4143d4:	19999999 	.word	0x19999999

004143d8 <_strtoull_r>:
  4143d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4143dc:	4c60      	ldr	r4, [pc, #384]	; (414560 <_strtoull_r+0x188>)
  4143de:	b085      	sub	sp, #20
  4143e0:	f8d4 8000 	ldr.w	r8, [r4]
  4143e4:	9200      	str	r2, [sp, #0]
  4143e6:	9101      	str	r1, [sp, #4]
  4143e8:	9003      	str	r0, [sp, #12]
  4143ea:	4699      	mov	r9, r3
  4143ec:	460a      	mov	r2, r1
  4143ee:	e000      	b.n	4143f2 <_strtoull_r+0x1a>
  4143f0:	4632      	mov	r2, r6
  4143f2:	4616      	mov	r6, r2
  4143f4:	f816 7b01 	ldrb.w	r7, [r6], #1
  4143f8:	eb08 0307 	add.w	r3, r8, r7
  4143fc:	785b      	ldrb	r3, [r3, #1]
  4143fe:	f003 0308 	and.w	r3, r3, #8
  414402:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  414406:	2b00      	cmp	r3, #0
  414408:	d1f2      	bne.n	4143f0 <_strtoull_r+0x18>
  41440a:	2f2d      	cmp	r7, #45	; 0x2d
  41440c:	d07d      	beq.n	41450a <_strtoull_r+0x132>
  41440e:	2f2b      	cmp	r7, #43	; 0x2b
  414410:	bf08      	it	eq
  414412:	7857      	ldrbeq	r7, [r2, #1]
  414414:	9102      	str	r1, [sp, #8]
  414416:	bf08      	it	eq
  414418:	1c96      	addeq	r6, r2, #2
  41441a:	f039 0210 	bics.w	r2, r9, #16
  41441e:	d055      	beq.n	4144cc <_strtoull_r+0xf4>
  414420:	ea4f 7be9 	mov.w	fp, r9, asr #31
  414424:	464a      	mov	r2, r9
  414426:	465b      	mov	r3, fp
  414428:	f04f 30ff 	mov.w	r0, #4294967295
  41442c:	f04f 31ff 	mov.w	r1, #4294967295
  414430:	f7f8 f804 	bl	40c43c <__aeabi_uldivmod>
  414434:	464a      	mov	r2, r9
  414436:	4604      	mov	r4, r0
  414438:	460d      	mov	r5, r1
  41443a:	465b      	mov	r3, fp
  41443c:	f04f 30ff 	mov.w	r0, #4294967295
  414440:	f04f 31ff 	mov.w	r1, #4294967295
  414444:	f7f7 fffa 	bl	40c43c <__aeabi_uldivmod>
  414448:	46ca      	mov	sl, r9
  41444a:	4694      	mov	ip, r2
  41444c:	2300      	movs	r3, #0
  41444e:	2000      	movs	r0, #0
  414450:	2100      	movs	r1, #0
  414452:	e019      	b.n	414488 <_strtoull_r+0xb0>
  414454:	3f30      	subs	r7, #48	; 0x30
  414456:	45b9      	cmp	r9, r7
  414458:	dd26      	ble.n	4144a8 <_strtoull_r+0xd0>
  41445a:	2b00      	cmp	r3, #0
  41445c:	db33      	blt.n	4144c6 <_strtoull_r+0xee>
  41445e:	428d      	cmp	r5, r1
  414460:	bf08      	it	eq
  414462:	4284      	cmpeq	r4, r0
  414464:	d32f      	bcc.n	4144c6 <_strtoull_r+0xee>
  414466:	42a9      	cmp	r1, r5
  414468:	bf08      	it	eq
  41446a:	42a0      	cmpeq	r0, r4
  41446c:	d029      	beq.n	4144c2 <_strtoull_r+0xea>
  41446e:	fb00 f30b 	mul.w	r3, r0, fp
  414472:	fb0a 3301 	mla	r3, sl, r1, r3
  414476:	fba0 010a 	umull	r0, r1, r0, sl
  41447a:	4419      	add	r1, r3
  41447c:	19c0      	adds	r0, r0, r7
  41447e:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
  414482:	2301      	movs	r3, #1
  414484:	f816 7b01 	ldrb.w	r7, [r6], #1
  414488:	eb08 0207 	add.w	r2, r8, r7
  41448c:	7852      	ldrb	r2, [r2, #1]
  41448e:	f012 0f04 	tst.w	r2, #4
  414492:	d1df      	bne.n	414454 <_strtoull_r+0x7c>
  414494:	f012 0203 	ands.w	r2, r2, #3
  414498:	d006      	beq.n	4144a8 <_strtoull_r+0xd0>
  41449a:	2a01      	cmp	r2, #1
  41449c:	bf14      	ite	ne
  41449e:	2257      	movne	r2, #87	; 0x57
  4144a0:	2237      	moveq	r2, #55	; 0x37
  4144a2:	1abf      	subs	r7, r7, r2
  4144a4:	45b9      	cmp	r9, r7
  4144a6:	dcd8      	bgt.n	41445a <_strtoull_r+0x82>
  4144a8:	2b00      	cmp	r3, #0
  4144aa:	db26      	blt.n	4144fa <_strtoull_r+0x122>
  4144ac:	9a02      	ldr	r2, [sp, #8]
  4144ae:	bb02      	cbnz	r2, 4144f2 <_strtoull_r+0x11a>
  4144b0:	9a00      	ldr	r2, [sp, #0]
  4144b2:	b11a      	cbz	r2, 4144bc <_strtoull_r+0xe4>
  4144b4:	b9db      	cbnz	r3, 4144ee <_strtoull_r+0x116>
  4144b6:	9e01      	ldr	r6, [sp, #4]
  4144b8:	9b00      	ldr	r3, [sp, #0]
  4144ba:	601e      	str	r6, [r3, #0]
  4144bc:	b005      	add	sp, #20
  4144be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4144c2:	4567      	cmp	r7, ip
  4144c4:	ddd3      	ble.n	41446e <_strtoull_r+0x96>
  4144c6:	f04f 33ff 	mov.w	r3, #4294967295
  4144ca:	e7db      	b.n	414484 <_strtoull_r+0xac>
  4144cc:	2f30      	cmp	r7, #48	; 0x30
  4144ce:	d021      	beq.n	414514 <_strtoull_r+0x13c>
  4144d0:	f1b9 0f00 	cmp.w	r9, #0
  4144d4:	d1a4      	bne.n	414420 <_strtoull_r+0x48>
  4144d6:	f04f 0c05 	mov.w	ip, #5
  4144da:	f04f 3499 	mov.w	r4, #2576980377	; 0x99999999
  4144de:	4d21      	ldr	r5, [pc, #132]	; (414564 <_strtoull_r+0x18c>)
  4144e0:	f04f 0a0a 	mov.w	sl, #10
  4144e4:	f04f 0b00 	mov.w	fp, #0
  4144e8:	f04f 090a 	mov.w	r9, #10
  4144ec:	e7ae      	b.n	41444c <_strtoull_r+0x74>
  4144ee:	3e01      	subs	r6, #1
  4144f0:	e7e2      	b.n	4144b8 <_strtoull_r+0xe0>
  4144f2:	4240      	negs	r0, r0
  4144f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4144f8:	e7da      	b.n	4144b0 <_strtoull_r+0xd8>
  4144fa:	9903      	ldr	r1, [sp, #12]
  4144fc:	2222      	movs	r2, #34	; 0x22
  4144fe:	600a      	str	r2, [r1, #0]
  414500:	f04f 30ff 	mov.w	r0, #4294967295
  414504:	f04f 31ff 	mov.w	r1, #4294967295
  414508:	e7d2      	b.n	4144b0 <_strtoull_r+0xd8>
  41450a:	2101      	movs	r1, #1
  41450c:	1c96      	adds	r6, r2, #2
  41450e:	7857      	ldrb	r7, [r2, #1]
  414510:	9102      	str	r1, [sp, #8]
  414512:	e782      	b.n	41441a <_strtoull_r+0x42>
  414514:	7833      	ldrb	r3, [r6, #0]
  414516:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  41451a:	2b58      	cmp	r3, #88	; 0x58
  41451c:	d010      	beq.n	414540 <_strtoull_r+0x168>
  41451e:	f1b9 0f00 	cmp.w	r9, #0
  414522:	f47f af7d 	bne.w	414420 <_strtoull_r+0x48>
  414526:	f04f 0c07 	mov.w	ip, #7
  41452a:	f04f 34ff 	mov.w	r4, #4294967295
  41452e:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
  414532:	f04f 0a08 	mov.w	sl, #8
  414536:	f04f 0b00 	mov.w	fp, #0
  41453a:	f04f 0908 	mov.w	r9, #8
  41453e:	e785      	b.n	41444c <_strtoull_r+0x74>
  414540:	7877      	ldrb	r7, [r6, #1]
  414542:	f04f 0c0f 	mov.w	ip, #15
  414546:	3602      	adds	r6, #2
  414548:	f04f 34ff 	mov.w	r4, #4294967295
  41454c:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
  414550:	f04f 0a10 	mov.w	sl, #16
  414554:	f04f 0b00 	mov.w	fp, #0
  414558:	f04f 0910 	mov.w	r9, #16
  41455c:	e776      	b.n	41444c <_strtoull_r+0x74>
  41455e:	bf00      	nop
  414560:	2000079c 	.word	0x2000079c
  414564:	19999999 	.word	0x19999999

00414568 <__ssprint_r>:
  414568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41456c:	6894      	ldr	r4, [r2, #8]
  41456e:	6816      	ldr	r6, [r2, #0]
  414570:	b083      	sub	sp, #12
  414572:	4692      	mov	sl, r2
  414574:	4680      	mov	r8, r0
  414576:	460d      	mov	r5, r1
  414578:	2c00      	cmp	r4, #0
  41457a:	d06f      	beq.n	41465c <__ssprint_r+0xf4>
  41457c:	f04f 0b00 	mov.w	fp, #0
  414580:	6808      	ldr	r0, [r1, #0]
  414582:	688b      	ldr	r3, [r1, #8]
  414584:	465c      	mov	r4, fp
  414586:	2c00      	cmp	r4, #0
  414588:	d043      	beq.n	414612 <__ssprint_r+0xaa>
  41458a:	429c      	cmp	r4, r3
  41458c:	461f      	mov	r7, r3
  41458e:	d345      	bcc.n	41461c <__ssprint_r+0xb4>
  414590:	89ab      	ldrh	r3, [r5, #12]
  414592:	f413 6f90 	tst.w	r3, #1152	; 0x480
  414596:	d044      	beq.n	414622 <__ssprint_r+0xba>
  414598:	696f      	ldr	r7, [r5, #20]
  41459a:	6929      	ldr	r1, [r5, #16]
  41459c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4145a0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4145a4:	ebc1 0900 	rsb	r9, r1, r0
  4145a8:	1c62      	adds	r2, r4, #1
  4145aa:	107f      	asrs	r7, r7, #1
  4145ac:	444a      	add	r2, r9
  4145ae:	4297      	cmp	r7, r2
  4145b0:	bf34      	ite	cc
  4145b2:	4617      	movcc	r7, r2
  4145b4:	463a      	movcs	r2, r7
  4145b6:	055b      	lsls	r3, r3, #21
  4145b8:	d535      	bpl.n	414626 <__ssprint_r+0xbe>
  4145ba:	4611      	mov	r1, r2
  4145bc:	4640      	mov	r0, r8
  4145be:	f7fd fb1b 	bl	411bf8 <_malloc_r>
  4145c2:	2800      	cmp	r0, #0
  4145c4:	d039      	beq.n	41463a <__ssprint_r+0xd2>
  4145c6:	6929      	ldr	r1, [r5, #16]
  4145c8:	9001      	str	r0, [sp, #4]
  4145ca:	464a      	mov	r2, r9
  4145cc:	f7f8 fa48 	bl	40ca60 <memcpy>
  4145d0:	89aa      	ldrh	r2, [r5, #12]
  4145d2:	9b01      	ldr	r3, [sp, #4]
  4145d4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4145d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4145dc:	81aa      	strh	r2, [r5, #12]
  4145de:	ebc9 0207 	rsb	r2, r9, r7
  4145e2:	eb03 0009 	add.w	r0, r3, r9
  4145e6:	616f      	str	r7, [r5, #20]
  4145e8:	612b      	str	r3, [r5, #16]
  4145ea:	6028      	str	r0, [r5, #0]
  4145ec:	60aa      	str	r2, [r5, #8]
  4145ee:	4627      	mov	r7, r4
  4145f0:	46a1      	mov	r9, r4
  4145f2:	464a      	mov	r2, r9
  4145f4:	4659      	mov	r1, fp
  4145f6:	f7fd fe27 	bl	412248 <memmove>
  4145fa:	f8da 2008 	ldr.w	r2, [sl, #8]
  4145fe:	68ab      	ldr	r3, [r5, #8]
  414600:	6828      	ldr	r0, [r5, #0]
  414602:	1bdb      	subs	r3, r3, r7
  414604:	4448      	add	r0, r9
  414606:	1b14      	subs	r4, r2, r4
  414608:	60ab      	str	r3, [r5, #8]
  41460a:	6028      	str	r0, [r5, #0]
  41460c:	f8ca 4008 	str.w	r4, [sl, #8]
  414610:	b324      	cbz	r4, 41465c <__ssprint_r+0xf4>
  414612:	f8d6 b000 	ldr.w	fp, [r6]
  414616:	6874      	ldr	r4, [r6, #4]
  414618:	3608      	adds	r6, #8
  41461a:	e7b4      	b.n	414586 <__ssprint_r+0x1e>
  41461c:	4627      	mov	r7, r4
  41461e:	46a1      	mov	r9, r4
  414620:	e7e7      	b.n	4145f2 <__ssprint_r+0x8a>
  414622:	46b9      	mov	r9, r7
  414624:	e7e5      	b.n	4145f2 <__ssprint_r+0x8a>
  414626:	4640      	mov	r0, r8
  414628:	f7fe fad2 	bl	412bd0 <_realloc_r>
  41462c:	4603      	mov	r3, r0
  41462e:	2800      	cmp	r0, #0
  414630:	d1d5      	bne.n	4145de <__ssprint_r+0x76>
  414632:	4640      	mov	r0, r8
  414634:	6929      	ldr	r1, [r5, #16]
  414636:	f7fc ffb7 	bl	4115a8 <_free_r>
  41463a:	89aa      	ldrh	r2, [r5, #12]
  41463c:	230c      	movs	r3, #12
  41463e:	f8c8 3000 	str.w	r3, [r8]
  414642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  414646:	2300      	movs	r3, #0
  414648:	f04f 30ff 	mov.w	r0, #4294967295
  41464c:	81aa      	strh	r2, [r5, #12]
  41464e:	f8ca 3008 	str.w	r3, [sl, #8]
  414652:	f8ca 3004 	str.w	r3, [sl, #4]
  414656:	b003      	add	sp, #12
  414658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41465c:	4620      	mov	r0, r4
  41465e:	f8ca 4004 	str.w	r4, [sl, #4]
  414662:	b003      	add	sp, #12
  414664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00414668 <_sungetc_r>:
  414668:	b538      	push	{r3, r4, r5, lr}
  41466a:	1c4b      	adds	r3, r1, #1
  41466c:	4614      	mov	r4, r2
  41466e:	d019      	beq.n	4146a4 <_sungetc_r+0x3c>
  414670:	8992      	ldrh	r2, [r2, #12]
  414672:	6b23      	ldr	r3, [r4, #48]	; 0x30
  414674:	f022 0220 	bic.w	r2, r2, #32
  414678:	b2cd      	uxtb	r5, r1
  41467a:	81a2      	strh	r2, [r4, #12]
  41467c:	b1ab      	cbz	r3, 4146aa <_sungetc_r+0x42>
  41467e:	6862      	ldr	r2, [r4, #4]
  414680:	6b63      	ldr	r3, [r4, #52]	; 0x34
  414682:	429a      	cmp	r2, r3
  414684:	da09      	bge.n	41469a <_sungetc_r+0x32>
  414686:	6823      	ldr	r3, [r4, #0]
  414688:	1e5a      	subs	r2, r3, #1
  41468a:	6022      	str	r2, [r4, #0]
  41468c:	f803 5c01 	strb.w	r5, [r3, #-1]
  414690:	6863      	ldr	r3, [r4, #4]
  414692:	3301      	adds	r3, #1
  414694:	4628      	mov	r0, r5
  414696:	6063      	str	r3, [r4, #4]
  414698:	bd38      	pop	{r3, r4, r5, pc}
  41469a:	4621      	mov	r1, r4
  41469c:	f000 f882 	bl	4147a4 <__submore>
  4146a0:	2800      	cmp	r0, #0
  4146a2:	d0f0      	beq.n	414686 <_sungetc_r+0x1e>
  4146a4:	f04f 30ff 	mov.w	r0, #4294967295
  4146a8:	bd38      	pop	{r3, r4, r5, pc}
  4146aa:	6923      	ldr	r3, [r4, #16]
  4146ac:	6822      	ldr	r2, [r4, #0]
  4146ae:	b12b      	cbz	r3, 4146bc <_sungetc_r+0x54>
  4146b0:	4293      	cmp	r3, r2
  4146b2:	d203      	bcs.n	4146bc <_sungetc_r+0x54>
  4146b4:	f812 0c01 	ldrb.w	r0, [r2, #-1]
  4146b8:	42a8      	cmp	r0, r5
  4146ba:	d00f      	beq.n	4146dc <_sungetc_r+0x74>
  4146bc:	4623      	mov	r3, r4
  4146be:	6861      	ldr	r1, [r4, #4]
  4146c0:	63a2      	str	r2, [r4, #56]	; 0x38
  4146c2:	f104 0040 	add.w	r0, r4, #64	; 0x40
  4146c6:	2203      	movs	r2, #3
  4146c8:	6320      	str	r0, [r4, #48]	; 0x30
  4146ca:	6362      	str	r2, [r4, #52]	; 0x34
  4146cc:	63e1      	str	r1, [r4, #60]	; 0x3c
  4146ce:	f803 5f42 	strb.w	r5, [r3, #66]!
  4146d2:	2201      	movs	r2, #1
  4146d4:	6023      	str	r3, [r4, #0]
  4146d6:	4628      	mov	r0, r5
  4146d8:	6062      	str	r2, [r4, #4]
  4146da:	bd38      	pop	{r3, r4, r5, pc}
  4146dc:	6863      	ldr	r3, [r4, #4]
  4146de:	3a01      	subs	r2, #1
  4146e0:	3301      	adds	r3, #1
  4146e2:	e884 000c 	stmia.w	r4, {r2, r3}
  4146e6:	bd38      	pop	{r3, r4, r5, pc}

004146e8 <__ssrefill_r>:
  4146e8:	b510      	push	{r4, lr}
  4146ea:	460c      	mov	r4, r1
  4146ec:	6b09      	ldr	r1, [r1, #48]	; 0x30
  4146ee:	b169      	cbz	r1, 41470c <__ssrefill_r+0x24>
  4146f0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4146f4:	4299      	cmp	r1, r3
  4146f6:	d001      	beq.n	4146fc <__ssrefill_r+0x14>
  4146f8:	f7fc ff56 	bl	4115a8 <_free_r>
  4146fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4146fe:	6063      	str	r3, [r4, #4]
  414700:	2000      	movs	r0, #0
  414702:	6320      	str	r0, [r4, #48]	; 0x30
  414704:	b113      	cbz	r3, 41470c <__ssrefill_r+0x24>
  414706:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  414708:	6023      	str	r3, [r4, #0]
  41470a:	bd10      	pop	{r4, pc}
  41470c:	89a2      	ldrh	r2, [r4, #12]
  41470e:	6923      	ldr	r3, [r4, #16]
  414710:	6023      	str	r3, [r4, #0]
  414712:	f042 0220 	orr.w	r2, r2, #32
  414716:	2300      	movs	r3, #0
  414718:	81a2      	strh	r2, [r4, #12]
  41471a:	6063      	str	r3, [r4, #4]
  41471c:	f04f 30ff 	mov.w	r0, #4294967295
  414720:	bd10      	pop	{r4, pc}
  414722:	bf00      	nop

00414724 <_sfread_r>:
  414724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414728:	b083      	sub	sp, #12
  41472a:	fb02 f903 	mul.w	r9, r2, r3
  41472e:	9201      	str	r2, [sp, #4]
  414730:	469a      	mov	sl, r3
  414732:	4607      	mov	r7, r0
  414734:	460e      	mov	r6, r1
  414736:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  414738:	f1b9 0f00 	cmp.w	r9, #0
  41473c:	d026      	beq.n	41478c <_sfread_r+0x68>
  41473e:	464d      	mov	r5, r9
  414740:	f04f 0800 	mov.w	r8, #0
  414744:	e00e      	b.n	414764 <_sfread_r+0x40>
  414746:	f7f8 f98b 	bl	40ca60 <memcpy>
  41474a:	6822      	ldr	r2, [r4, #0]
  41474c:	f8c4 8004 	str.w	r8, [r4, #4]
  414750:	445a      	add	r2, fp
  414752:	6022      	str	r2, [r4, #0]
  414754:	4638      	mov	r0, r7
  414756:	4621      	mov	r1, r4
  414758:	445e      	add	r6, fp
  41475a:	ebcb 0505 	rsb	r5, fp, r5
  41475e:	f7ff ffc3 	bl	4146e8 <__ssrefill_r>
  414762:	b9b8      	cbnz	r0, 414794 <_sfread_r+0x70>
  414764:	f8d4 b004 	ldr.w	fp, [r4, #4]
  414768:	6821      	ldr	r1, [r4, #0]
  41476a:	455d      	cmp	r5, fp
  41476c:	4630      	mov	r0, r6
  41476e:	465a      	mov	r2, fp
  414770:	d8e9      	bhi.n	414746 <_sfread_r+0x22>
  414772:	462a      	mov	r2, r5
  414774:	f7f8 f974 	bl	40ca60 <memcpy>
  414778:	6862      	ldr	r2, [r4, #4]
  41477a:	6823      	ldr	r3, [r4, #0]
  41477c:	1b52      	subs	r2, r2, r5
  41477e:	442b      	add	r3, r5
  414780:	4650      	mov	r0, sl
  414782:	6062      	str	r2, [r4, #4]
  414784:	6023      	str	r3, [r4, #0]
  414786:	b003      	add	sp, #12
  414788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41478c:	4648      	mov	r0, r9
  41478e:	b003      	add	sp, #12
  414790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414794:	9b01      	ldr	r3, [sp, #4]
  414796:	ebc5 0909 	rsb	r9, r5, r9
  41479a:	fbb9 f0f3 	udiv	r0, r9, r3
  41479e:	b003      	add	sp, #12
  4147a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004147a4 <__submore>:
  4147a4:	f101 0340 	add.w	r3, r1, #64	; 0x40
  4147a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4147ac:	460c      	mov	r4, r1
  4147ae:	6b09      	ldr	r1, [r1, #48]	; 0x30
  4147b0:	4299      	cmp	r1, r3
  4147b2:	d014      	beq.n	4147de <__submore+0x3a>
  4147b4:	6b66      	ldr	r6, [r4, #52]	; 0x34
  4147b6:	0077      	lsls	r7, r6, #1
  4147b8:	463a      	mov	r2, r7
  4147ba:	f7fe fa09 	bl	412bd0 <_realloc_r>
  4147be:	4605      	mov	r5, r0
  4147c0:	b340      	cbz	r0, 414814 <__submore+0x70>
  4147c2:	eb00 0806 	add.w	r8, r0, r6
  4147c6:	4632      	mov	r2, r6
  4147c8:	4640      	mov	r0, r8
  4147ca:	4629      	mov	r1, r5
  4147cc:	f7f8 f948 	bl	40ca60 <memcpy>
  4147d0:	f8c4 8000 	str.w	r8, [r4]
  4147d4:	6325      	str	r5, [r4, #48]	; 0x30
  4147d6:	6367      	str	r7, [r4, #52]	; 0x34
  4147d8:	2000      	movs	r0, #0
  4147da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4147de:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4147e2:	f7fd fa09 	bl	411bf8 <_malloc_r>
  4147e6:	b1a8      	cbz	r0, 414814 <__submore+0x70>
  4147e8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  4147ec:	6320      	str	r0, [r4, #48]	; 0x30
  4147ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4147f2:	6362      	str	r2, [r4, #52]	; 0x34
  4147f4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  4147f8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  4147fc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  414800:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  414804:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  414808:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  41480c:	6020      	str	r0, [r4, #0]
  41480e:	2000      	movs	r0, #0
  414810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414814:	f04f 30ff 	mov.w	r0, #4294967295
  414818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041481c <__swbuf_r>:
  41481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41481e:	460d      	mov	r5, r1
  414820:	4614      	mov	r4, r2
  414822:	4607      	mov	r7, r0
  414824:	b110      	cbz	r0, 41482c <__swbuf_r+0x10>
  414826:	6b83      	ldr	r3, [r0, #56]	; 0x38
  414828:	2b00      	cmp	r3, #0
  41482a:	d048      	beq.n	4148be <__swbuf_r+0xa2>
  41482c:	89a2      	ldrh	r2, [r4, #12]
  41482e:	69a3      	ldr	r3, [r4, #24]
  414830:	60a3      	str	r3, [r4, #8]
  414832:	b293      	uxth	r3, r2
  414834:	0718      	lsls	r0, r3, #28
  414836:	d538      	bpl.n	4148aa <__swbuf_r+0x8e>
  414838:	6926      	ldr	r6, [r4, #16]
  41483a:	2e00      	cmp	r6, #0
  41483c:	d035      	beq.n	4148aa <__swbuf_r+0x8e>
  41483e:	0499      	lsls	r1, r3, #18
  414840:	b2ed      	uxtb	r5, r5
  414842:	d515      	bpl.n	414870 <__swbuf_r+0x54>
  414844:	6823      	ldr	r3, [r4, #0]
  414846:	6962      	ldr	r2, [r4, #20]
  414848:	1b9e      	subs	r6, r3, r6
  41484a:	4296      	cmp	r6, r2
  41484c:	da1c      	bge.n	414888 <__swbuf_r+0x6c>
  41484e:	3601      	adds	r6, #1
  414850:	68a2      	ldr	r2, [r4, #8]
  414852:	1c59      	adds	r1, r3, #1
  414854:	3a01      	subs	r2, #1
  414856:	60a2      	str	r2, [r4, #8]
  414858:	6021      	str	r1, [r4, #0]
  41485a:	701d      	strb	r5, [r3, #0]
  41485c:	6963      	ldr	r3, [r4, #20]
  41485e:	42b3      	cmp	r3, r6
  414860:	d01a      	beq.n	414898 <__swbuf_r+0x7c>
  414862:	89a3      	ldrh	r3, [r4, #12]
  414864:	07db      	lsls	r3, r3, #31
  414866:	d501      	bpl.n	41486c <__swbuf_r+0x50>
  414868:	2d0a      	cmp	r5, #10
  41486a:	d015      	beq.n	414898 <__swbuf_r+0x7c>
  41486c:	4628      	mov	r0, r5
  41486e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  414870:	6e63      	ldr	r3, [r4, #100]	; 0x64
  414872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  414876:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  41487a:	6663      	str	r3, [r4, #100]	; 0x64
  41487c:	6823      	ldr	r3, [r4, #0]
  41487e:	81a2      	strh	r2, [r4, #12]
  414880:	6962      	ldr	r2, [r4, #20]
  414882:	1b9e      	subs	r6, r3, r6
  414884:	4296      	cmp	r6, r2
  414886:	dbe2      	blt.n	41484e <__swbuf_r+0x32>
  414888:	4638      	mov	r0, r7
  41488a:	4621      	mov	r1, r4
  41488c:	f7fc fd2e 	bl	4112ec <_fflush_r>
  414890:	b940      	cbnz	r0, 4148a4 <__swbuf_r+0x88>
  414892:	6823      	ldr	r3, [r4, #0]
  414894:	2601      	movs	r6, #1
  414896:	e7db      	b.n	414850 <__swbuf_r+0x34>
  414898:	4638      	mov	r0, r7
  41489a:	4621      	mov	r1, r4
  41489c:	f7fc fd26 	bl	4112ec <_fflush_r>
  4148a0:	2800      	cmp	r0, #0
  4148a2:	d0e3      	beq.n	41486c <__swbuf_r+0x50>
  4148a4:	f04f 30ff 	mov.w	r0, #4294967295
  4148a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4148aa:	4638      	mov	r0, r7
  4148ac:	4621      	mov	r1, r4
  4148ae:	f7fb fc3b 	bl	410128 <__swsetup_r>
  4148b2:	2800      	cmp	r0, #0
  4148b4:	d1f6      	bne.n	4148a4 <__swbuf_r+0x88>
  4148b6:	89a2      	ldrh	r2, [r4, #12]
  4148b8:	6926      	ldr	r6, [r4, #16]
  4148ba:	b293      	uxth	r3, r2
  4148bc:	e7bf      	b.n	41483e <__swbuf_r+0x22>
  4148be:	f7fc fd31 	bl	411324 <__sinit>
  4148c2:	e7b3      	b.n	41482c <__swbuf_r+0x10>

004148c4 <_wcrtomb_r>:
  4148c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4148c8:	461e      	mov	r6, r3
  4148ca:	b086      	sub	sp, #24
  4148cc:	460c      	mov	r4, r1
  4148ce:	4605      	mov	r5, r0
  4148d0:	4617      	mov	r7, r2
  4148d2:	4b0f      	ldr	r3, [pc, #60]	; (414910 <_wcrtomb_r+0x4c>)
  4148d4:	b191      	cbz	r1, 4148fc <_wcrtomb_r+0x38>
  4148d6:	f8d3 8000 	ldr.w	r8, [r3]
  4148da:	f7fd f8f3 	bl	411ac4 <__locale_charset>
  4148de:	9600      	str	r6, [sp, #0]
  4148e0:	4603      	mov	r3, r0
  4148e2:	4621      	mov	r1, r4
  4148e4:	463a      	mov	r2, r7
  4148e6:	4628      	mov	r0, r5
  4148e8:	47c0      	blx	r8
  4148ea:	1c43      	adds	r3, r0, #1
  4148ec:	d103      	bne.n	4148f6 <_wcrtomb_r+0x32>
  4148ee:	2200      	movs	r2, #0
  4148f0:	238a      	movs	r3, #138	; 0x8a
  4148f2:	6032      	str	r2, [r6, #0]
  4148f4:	602b      	str	r3, [r5, #0]
  4148f6:	b006      	add	sp, #24
  4148f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4148fc:	681f      	ldr	r7, [r3, #0]
  4148fe:	f7fd f8e1 	bl	411ac4 <__locale_charset>
  414902:	9600      	str	r6, [sp, #0]
  414904:	4603      	mov	r3, r0
  414906:	4622      	mov	r2, r4
  414908:	4628      	mov	r0, r5
  41490a:	a903      	add	r1, sp, #12
  41490c:	47b8      	blx	r7
  41490e:	e7ec      	b.n	4148ea <_wcrtomb_r+0x26>
  414910:	20000c10 	.word	0x20000c10

00414914 <__ascii_wctomb>:
  414914:	b121      	cbz	r1, 414920 <__ascii_wctomb+0xc>
  414916:	2aff      	cmp	r2, #255	; 0xff
  414918:	d804      	bhi.n	414924 <__ascii_wctomb+0x10>
  41491a:	700a      	strb	r2, [r1, #0]
  41491c:	2001      	movs	r0, #1
  41491e:	4770      	bx	lr
  414920:	4608      	mov	r0, r1
  414922:	4770      	bx	lr
  414924:	238a      	movs	r3, #138	; 0x8a
  414926:	6003      	str	r3, [r0, #0]
  414928:	f04f 30ff 	mov.w	r0, #4294967295
  41492c:	4770      	bx	lr
  41492e:	bf00      	nop

00414930 <__register_exitproc>:
  414930:	b5f0      	push	{r4, r5, r6, r7, lr}
  414932:	4c27      	ldr	r4, [pc, #156]	; (4149d0 <__register_exitproc+0xa0>)
  414934:	6826      	ldr	r6, [r4, #0]
  414936:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  41493a:	b085      	sub	sp, #20
  41493c:	4607      	mov	r7, r0
  41493e:	2c00      	cmp	r4, #0
  414940:	d041      	beq.n	4149c6 <__register_exitproc+0x96>
  414942:	6865      	ldr	r5, [r4, #4]
  414944:	2d1f      	cmp	r5, #31
  414946:	dd1e      	ble.n	414986 <__register_exitproc+0x56>
  414948:	4822      	ldr	r0, [pc, #136]	; (4149d4 <__register_exitproc+0xa4>)
  41494a:	b918      	cbnz	r0, 414954 <__register_exitproc+0x24>
  41494c:	f04f 30ff 	mov.w	r0, #4294967295
  414950:	b005      	add	sp, #20
  414952:	bdf0      	pop	{r4, r5, r6, r7, pc}
  414954:	f44f 70c8 	mov.w	r0, #400	; 0x190
  414958:	9103      	str	r1, [sp, #12]
  41495a:	9202      	str	r2, [sp, #8]
  41495c:	9301      	str	r3, [sp, #4]
  41495e:	f7fd f943 	bl	411be8 <malloc>
  414962:	9903      	ldr	r1, [sp, #12]
  414964:	9a02      	ldr	r2, [sp, #8]
  414966:	9b01      	ldr	r3, [sp, #4]
  414968:	4604      	mov	r4, r0
  41496a:	2800      	cmp	r0, #0
  41496c:	d0ee      	beq.n	41494c <__register_exitproc+0x1c>
  41496e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  414972:	6025      	str	r5, [r4, #0]
  414974:	2000      	movs	r0, #0
  414976:	6060      	str	r0, [r4, #4]
  414978:	4605      	mov	r5, r0
  41497a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  41497e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  414982:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  414986:	b93f      	cbnz	r7, 414998 <__register_exitproc+0x68>
  414988:	1cab      	adds	r3, r5, #2
  41498a:	2000      	movs	r0, #0
  41498c:	3501      	adds	r5, #1
  41498e:	6065      	str	r5, [r4, #4]
  414990:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  414994:	b005      	add	sp, #20
  414996:	bdf0      	pop	{r4, r5, r6, r7, pc}
  414998:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  41499c:	f04f 0c01 	mov.w	ip, #1
  4149a0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  4149a4:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  4149a8:	fa0c f205 	lsl.w	r2, ip, r5
  4149ac:	4316      	orrs	r6, r2
  4149ae:	2f02      	cmp	r7, #2
  4149b0:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  4149b4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  4149b8:	d1e6      	bne.n	414988 <__register_exitproc+0x58>
  4149ba:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4149be:	431a      	orrs	r2, r3
  4149c0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4149c4:	e7e0      	b.n	414988 <__register_exitproc+0x58>
  4149c6:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  4149ca:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  4149ce:	e7b8      	b.n	414942 <__register_exitproc+0x12>
  4149d0:	0041616c 	.word	0x0041616c
  4149d4:	00411be9 	.word	0x00411be9

004149d8 <_calloc_r>:
  4149d8:	b510      	push	{r4, lr}
  4149da:	fb02 f101 	mul.w	r1, r2, r1
  4149de:	f7fd f90b 	bl	411bf8 <_malloc_r>
  4149e2:	4604      	mov	r4, r0
  4149e4:	b168      	cbz	r0, 414a02 <_calloc_r+0x2a>
  4149e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4149ea:	f022 0203 	bic.w	r2, r2, #3
  4149ee:	3a04      	subs	r2, #4
  4149f0:	2a24      	cmp	r2, #36	; 0x24
  4149f2:	d818      	bhi.n	414a26 <_calloc_r+0x4e>
  4149f4:	2a13      	cmp	r2, #19
  4149f6:	d806      	bhi.n	414a06 <_calloc_r+0x2e>
  4149f8:	4603      	mov	r3, r0
  4149fa:	2200      	movs	r2, #0
  4149fc:	601a      	str	r2, [r3, #0]
  4149fe:	605a      	str	r2, [r3, #4]
  414a00:	609a      	str	r2, [r3, #8]
  414a02:	4620      	mov	r0, r4
  414a04:	bd10      	pop	{r4, pc}
  414a06:	2300      	movs	r3, #0
  414a08:	2a1b      	cmp	r2, #27
  414a0a:	6003      	str	r3, [r0, #0]
  414a0c:	6043      	str	r3, [r0, #4]
  414a0e:	d90f      	bls.n	414a30 <_calloc_r+0x58>
  414a10:	2a24      	cmp	r2, #36	; 0x24
  414a12:	6083      	str	r3, [r0, #8]
  414a14:	60c3      	str	r3, [r0, #12]
  414a16:	bf05      	ittet	eq
  414a18:	6103      	streq	r3, [r0, #16]
  414a1a:	6143      	streq	r3, [r0, #20]
  414a1c:	f100 0310 	addne.w	r3, r0, #16
  414a20:	f100 0318 	addeq.w	r3, r0, #24
  414a24:	e7e9      	b.n	4149fa <_calloc_r+0x22>
  414a26:	2100      	movs	r1, #0
  414a28:	f7f8 f8b4 	bl	40cb94 <memset>
  414a2c:	4620      	mov	r0, r4
  414a2e:	bd10      	pop	{r4, pc}
  414a30:	f100 0308 	add.w	r3, r0, #8
  414a34:	e7e1      	b.n	4149fa <_calloc_r+0x22>
  414a36:	bf00      	nop

00414a38 <_fclose_r>:
  414a38:	b570      	push	{r4, r5, r6, lr}
  414a3a:	460c      	mov	r4, r1
  414a3c:	4605      	mov	r5, r0
  414a3e:	b131      	cbz	r1, 414a4e <_fclose_r+0x16>
  414a40:	b110      	cbz	r0, 414a48 <_fclose_r+0x10>
  414a42:	6b83      	ldr	r3, [r0, #56]	; 0x38
  414a44:	2b00      	cmp	r3, #0
  414a46:	d02f      	beq.n	414aa8 <_fclose_r+0x70>
  414a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  414a4c:	b90b      	cbnz	r3, 414a52 <_fclose_r+0x1a>
  414a4e:	2000      	movs	r0, #0
  414a50:	bd70      	pop	{r4, r5, r6, pc}
  414a52:	4628      	mov	r0, r5
  414a54:	4621      	mov	r1, r4
  414a56:	f7fc fc49 	bl	4112ec <_fflush_r>
  414a5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  414a5c:	4606      	mov	r6, r0
  414a5e:	b133      	cbz	r3, 414a6e <_fclose_r+0x36>
  414a60:	4628      	mov	r0, r5
  414a62:	69e1      	ldr	r1, [r4, #28]
  414a64:	4798      	blx	r3
  414a66:	2800      	cmp	r0, #0
  414a68:	bfb8      	it	lt
  414a6a:	f04f 36ff 	movlt.w	r6, #4294967295
  414a6e:	89a3      	ldrh	r3, [r4, #12]
  414a70:	061b      	lsls	r3, r3, #24
  414a72:	d41c      	bmi.n	414aae <_fclose_r+0x76>
  414a74:	6b21      	ldr	r1, [r4, #48]	; 0x30
  414a76:	b141      	cbz	r1, 414a8a <_fclose_r+0x52>
  414a78:	f104 0340 	add.w	r3, r4, #64	; 0x40
  414a7c:	4299      	cmp	r1, r3
  414a7e:	d002      	beq.n	414a86 <_fclose_r+0x4e>
  414a80:	4628      	mov	r0, r5
  414a82:	f7fc fd91 	bl	4115a8 <_free_r>
  414a86:	2300      	movs	r3, #0
  414a88:	6323      	str	r3, [r4, #48]	; 0x30
  414a8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  414a8c:	b121      	cbz	r1, 414a98 <_fclose_r+0x60>
  414a8e:	4628      	mov	r0, r5
  414a90:	f7fc fd8a 	bl	4115a8 <_free_r>
  414a94:	2300      	movs	r3, #0
  414a96:	6463      	str	r3, [r4, #68]	; 0x44
  414a98:	f7fc fcbe 	bl	411418 <__sfp_lock_acquire>
  414a9c:	2300      	movs	r3, #0
  414a9e:	81a3      	strh	r3, [r4, #12]
  414aa0:	f7fc fcbc 	bl	41141c <__sfp_lock_release>
  414aa4:	4630      	mov	r0, r6
  414aa6:	bd70      	pop	{r4, r5, r6, pc}
  414aa8:	f7fc fc3c 	bl	411324 <__sinit>
  414aac:	e7cc      	b.n	414a48 <_fclose_r+0x10>
  414aae:	4628      	mov	r0, r5
  414ab0:	6921      	ldr	r1, [r4, #16]
  414ab2:	f7fc fd79 	bl	4115a8 <_free_r>
  414ab6:	e7dd      	b.n	414a74 <_fclose_r+0x3c>

00414ab8 <fclose>:
  414ab8:	4b02      	ldr	r3, [pc, #8]	; (414ac4 <fclose+0xc>)
  414aba:	4601      	mov	r1, r0
  414abc:	6818      	ldr	r0, [r3, #0]
  414abe:	f7ff bfbb 	b.w	414a38 <_fclose_r>
  414ac2:	bf00      	nop
  414ac4:	20000798 	.word	0x20000798

00414ac8 <_fstat_r>:
  414ac8:	b538      	push	{r3, r4, r5, lr}
  414aca:	4c08      	ldr	r4, [pc, #32]	; (414aec <_fstat_r+0x24>)
  414acc:	2300      	movs	r3, #0
  414ace:	4605      	mov	r5, r0
  414ad0:	4608      	mov	r0, r1
  414ad2:	4611      	mov	r1, r2
  414ad4:	6023      	str	r3, [r4, #0]
  414ad6:	f7f7 fbc1 	bl	40c25c <_fstat>
  414ada:	1c43      	adds	r3, r0, #1
  414adc:	d000      	beq.n	414ae0 <_fstat_r+0x18>
  414ade:	bd38      	pop	{r3, r4, r5, pc}
  414ae0:	6823      	ldr	r3, [r4, #0]
  414ae2:	2b00      	cmp	r3, #0
  414ae4:	d0fb      	beq.n	414ade <_fstat_r+0x16>
  414ae6:	602b      	str	r3, [r5, #0]
  414ae8:	bd38      	pop	{r3, r4, r5, pc}
  414aea:	bf00      	nop
  414aec:	200099d0 	.word	0x200099d0

00414af0 <rshift>:
  414af0:	6902      	ldr	r2, [r0, #16]
  414af2:	114b      	asrs	r3, r1, #5
  414af4:	4293      	cmp	r3, r2
  414af6:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  414afa:	f100 0814 	add.w	r8, r0, #20
  414afe:	da28      	bge.n	414b52 <rshift+0x62>
  414b00:	f011 0c1f 	ands.w	ip, r1, #31
  414b04:	eb08 0282 	add.w	r2, r8, r2, lsl #2
  414b08:	eb08 0783 	add.w	r7, r8, r3, lsl #2
  414b0c:	d028      	beq.n	414b60 <rshift+0x70>
  414b0e:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
  414b12:	1d3b      	adds	r3, r7, #4
  414b14:	429a      	cmp	r2, r3
  414b16:	fa24 f40c 	lsr.w	r4, r4, ip
  414b1a:	f1cc 0120 	rsb	r1, ip, #32
  414b1e:	d935      	bls.n	414b8c <rshift+0x9c>
  414b20:	4645      	mov	r5, r8
  414b22:	681e      	ldr	r6, [r3, #0]
  414b24:	408e      	lsls	r6, r1
  414b26:	4334      	orrs	r4, r6
  414b28:	f845 4b04 	str.w	r4, [r5], #4
  414b2c:	f853 4b04 	ldr.w	r4, [r3], #4
  414b30:	4293      	cmp	r3, r2
  414b32:	fa24 f40c 	lsr.w	r4, r4, ip
  414b36:	d3f4      	bcc.n	414b22 <rshift+0x32>
  414b38:	1bd3      	subs	r3, r2, r7
  414b3a:	3b05      	subs	r3, #5
  414b3c:	f023 0303 	bic.w	r3, r3, #3
  414b40:	3304      	adds	r3, #4
  414b42:	4443      	add	r3, r8
  414b44:	601c      	str	r4, [r3, #0]
  414b46:	b104      	cbz	r4, 414b4a <rshift+0x5a>
  414b48:	3304      	adds	r3, #4
  414b4a:	ebc8 0303 	rsb	r3, r8, r3
  414b4e:	109b      	asrs	r3, r3, #2
  414b50:	e016      	b.n	414b80 <rshift+0x90>
  414b52:	2300      	movs	r3, #0
  414b54:	6103      	str	r3, [r0, #16]
  414b56:	2300      	movs	r3, #0
  414b58:	6143      	str	r3, [r0, #20]
  414b5a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  414b5e:	4770      	bx	lr
  414b60:	42ba      	cmp	r2, r7
  414b62:	d9f6      	bls.n	414b52 <rshift+0x62>
  414b64:	4641      	mov	r1, r8
  414b66:	463b      	mov	r3, r7
  414b68:	f853 4b04 	ldr.w	r4, [r3], #4
  414b6c:	f841 4b04 	str.w	r4, [r1], #4
  414b70:	429a      	cmp	r2, r3
  414b72:	d8f9      	bhi.n	414b68 <rshift+0x78>
  414b74:	43fb      	mvns	r3, r7
  414b76:	4413      	add	r3, r2
  414b78:	f023 0303 	bic.w	r3, r3, #3
  414b7c:	3304      	adds	r3, #4
  414b7e:	109b      	asrs	r3, r3, #2
  414b80:	6103      	str	r3, [r0, #16]
  414b82:	2b00      	cmp	r3, #0
  414b84:	d0e7      	beq.n	414b56 <rshift+0x66>
  414b86:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  414b8a:	4770      	bx	lr
  414b8c:	4643      	mov	r3, r8
  414b8e:	e7d9      	b.n	414b44 <rshift+0x54>

00414b90 <__gethex>:
  414b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414b94:	b08b      	sub	sp, #44	; 0x2c
  414b96:	4688      	mov	r8, r1
  414b98:	9206      	str	r2, [sp, #24]
  414b9a:	9309      	str	r3, [sp, #36]	; 0x24
  414b9c:	9007      	str	r0, [sp, #28]
  414b9e:	f7fc ff9b 	bl	411ad8 <_localeconv_r>
  414ba2:	6800      	ldr	r0, [r0, #0]
  414ba4:	9002      	str	r0, [sp, #8]
  414ba6:	f7f8 f993 	bl	40ced0 <strlen>
  414baa:	f8d8 3000 	ldr.w	r3, [r8]
  414bae:	9902      	ldr	r1, [sp, #8]
  414bb0:	789a      	ldrb	r2, [r3, #2]
  414bb2:	9003      	str	r0, [sp, #12]
  414bb4:	4401      	add	r1, r0
  414bb6:	2a30      	cmp	r2, #48	; 0x30
  414bb8:	f811 ac01 	ldrb.w	sl, [r1, #-1]
  414bbc:	f103 0502 	add.w	r5, r3, #2
  414bc0:	f040 81a6 	bne.w	414f10 <__gethex+0x380>
  414bc4:	3303      	adds	r3, #3
  414bc6:	2700      	movs	r7, #0
  414bc8:	461d      	mov	r5, r3
  414bca:	f813 2b01 	ldrb.w	r2, [r3], #1
  414bce:	2a30      	cmp	r2, #48	; 0x30
  414bd0:	f107 0701 	add.w	r7, r7, #1
  414bd4:	d0f8      	beq.n	414bc8 <__gethex+0x38>
  414bd6:	4eb1      	ldr	r6, [pc, #708]	; (414e9c <__gethex+0x30c>)
  414bd8:	5cb4      	ldrb	r4, [r6, r2]
  414bda:	2c00      	cmp	r4, #0
  414bdc:	f000 80f4 	beq.w	414dc8 <__gethex+0x238>
  414be0:	782b      	ldrb	r3, [r5, #0]
  414be2:	f04f 0900 	mov.w	r9, #0
  414be6:	5cf3      	ldrb	r3, [r6, r3]
  414be8:	46cb      	mov	fp, r9
  414bea:	2b00      	cmp	r3, #0
  414bec:	f000 8198 	beq.w	414f20 <__gethex+0x390>
  414bf0:	1c6b      	adds	r3, r5, #1
  414bf2:	461c      	mov	r4, r3
  414bf4:	3301      	adds	r3, #1
  414bf6:	7822      	ldrb	r2, [r4, #0]
  414bf8:	5cb2      	ldrb	r2, [r6, r2]
  414bfa:	2a00      	cmp	r2, #0
  414bfc:	d1f9      	bne.n	414bf2 <__gethex+0x62>
  414bfe:	4620      	mov	r0, r4
  414c00:	9902      	ldr	r1, [sp, #8]
  414c02:	9a03      	ldr	r2, [sp, #12]
  414c04:	f7f8 f994 	bl	40cf30 <strncmp>
  414c08:	b1e0      	cbz	r0, 414c44 <__gethex+0xb4>
  414c0a:	7823      	ldrb	r3, [r4, #0]
  414c0c:	f1bb 0f00 	cmp.w	fp, #0
  414c10:	f000 816c 	beq.w	414eec <__gethex+0x35c>
  414c14:	ebc4 0b0b 	rsb	fp, r4, fp
  414c18:	ea4f 028b 	mov.w	r2, fp, lsl #2
  414c1c:	9204      	str	r2, [sp, #16]
  414c1e:	2b50      	cmp	r3, #80	; 0x50
  414c20:	f000 809d 	beq.w	414d5e <__gethex+0x1ce>
  414c24:	2b70      	cmp	r3, #112	; 0x70
  414c26:	f000 809a 	beq.w	414d5e <__gethex+0x1ce>
  414c2a:	4623      	mov	r3, r4
  414c2c:	f8c8 3000 	str.w	r3, [r8]
  414c30:	f1b9 0f00 	cmp.w	r9, #0
  414c34:	d00c      	beq.n	414c50 <__gethex+0xc0>
  414c36:	2f00      	cmp	r7, #0
  414c38:	bf0c      	ite	eq
  414c3a:	2006      	moveq	r0, #6
  414c3c:	2000      	movne	r0, #0
  414c3e:	b00b      	add	sp, #44	; 0x2c
  414c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414c44:	f1bb 0f00 	cmp.w	fp, #0
  414c48:	f000 818c 	beq.w	414f64 <__gethex+0x3d4>
  414c4c:	7823      	ldrb	r3, [r4, #0]
  414c4e:	e7e1      	b.n	414c14 <__gethex+0x84>
  414c50:	1b63      	subs	r3, r4, r5
  414c52:	3b01      	subs	r3, #1
  414c54:	2b07      	cmp	r3, #7
  414c56:	4649      	mov	r1, r9
  414c58:	dd04      	ble.n	414c64 <__gethex+0xd4>
  414c5a:	105b      	asrs	r3, r3, #1
  414c5c:	2b07      	cmp	r3, #7
  414c5e:	f101 0101 	add.w	r1, r1, #1
  414c62:	dcfa      	bgt.n	414c5a <__gethex+0xca>
  414c64:	9807      	ldr	r0, [sp, #28]
  414c66:	f7fd fb53 	bl	412310 <_Balloc>
  414c6a:	42a5      	cmp	r5, r4
  414c6c:	f100 0314 	add.w	r3, r0, #20
  414c70:	9005      	str	r0, [sp, #20]
  414c72:	9308      	str	r3, [sp, #32]
  414c74:	f080 81cd 	bcs.w	415012 <__gethex+0x482>
  414c78:	469b      	mov	fp, r3
  414c7a:	9b03      	ldr	r3, [sp, #12]
  414c7c:	f04f 0900 	mov.w	r9, #0
  414c80:	464f      	mov	r7, r9
  414c82:	f1c3 0c01 	rsb	ip, r3, #1
  414c86:	e00e      	b.n	414ca6 <__gethex+0x116>
  414c88:	2f20      	cmp	r7, #32
  414c8a:	d05f      	beq.n	414d4c <__gethex+0x1bc>
  414c8c:	463a      	mov	r2, r7
  414c8e:	3704      	adds	r7, #4
  414c90:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  414c94:	5cf3      	ldrb	r3, [r6, r3]
  414c96:	f003 030f 	and.w	r3, r3, #15
  414c9a:	4093      	lsls	r3, r2
  414c9c:	4545      	cmp	r5, r8
  414c9e:	ea49 0903 	orr.w	r9, r9, r3
  414ca2:	d21a      	bcs.n	414cda <__gethex+0x14a>
  414ca4:	4644      	mov	r4, r8
  414ca6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  414caa:	4553      	cmp	r3, sl
  414cac:	f104 38ff 	add.w	r8, r4, #4294967295
  414cb0:	d1ea      	bne.n	414c88 <__gethex+0xf8>
  414cb2:	eb08 030c 	add.w	r3, r8, ip
  414cb6:	429d      	cmp	r5, r3
  414cb8:	d8e6      	bhi.n	414c88 <__gethex+0xf8>
  414cba:	4618      	mov	r0, r3
  414cbc:	9902      	ldr	r1, [sp, #8]
  414cbe:	9a03      	ldr	r2, [sp, #12]
  414cc0:	9301      	str	r3, [sp, #4]
  414cc2:	f8cd c000 	str.w	ip, [sp]
  414cc6:	f7f8 f933 	bl	40cf30 <strncmp>
  414cca:	9b01      	ldr	r3, [sp, #4]
  414ccc:	f8dd c000 	ldr.w	ip, [sp]
  414cd0:	2800      	cmp	r0, #0
  414cd2:	d1d9      	bne.n	414c88 <__gethex+0xf8>
  414cd4:	4698      	mov	r8, r3
  414cd6:	4545      	cmp	r5, r8
  414cd8:	d3e4      	bcc.n	414ca4 <__gethex+0x114>
  414cda:	f84b 9b04 	str.w	r9, [fp], #4
  414cde:	9b08      	ldr	r3, [sp, #32]
  414ce0:	9905      	ldr	r1, [sp, #20]
  414ce2:	ebc3 0b0b 	rsb	fp, r3, fp
  414ce6:	ea4f 03ab 	mov.w	r3, fp, asr #2
  414cea:	4648      	mov	r0, r9
  414cec:	610b      	str	r3, [r1, #16]
  414cee:	015d      	lsls	r5, r3, #5
  414cf0:	f7fd fbd6 	bl	4124a0 <__hi0bits>
  414cf4:	9a06      	ldr	r2, [sp, #24]
  414cf6:	6814      	ldr	r4, [r2, #0]
  414cf8:	1a28      	subs	r0, r5, r0
  414cfa:	42a0      	cmp	r0, r4
  414cfc:	f300 80d0 	bgt.w	414ea0 <__gethex+0x310>
  414d00:	f2c0 80f7 	blt.w	414ef2 <__gethex+0x362>
  414d04:	2600      	movs	r6, #0
  414d06:	9806      	ldr	r0, [sp, #24]
  414d08:	9904      	ldr	r1, [sp, #16]
  414d0a:	6883      	ldr	r3, [r0, #8]
  414d0c:	4299      	cmp	r1, r3
  414d0e:	f300 8092 	bgt.w	414e36 <__gethex+0x2a6>
  414d12:	9806      	ldr	r0, [sp, #24]
  414d14:	9904      	ldr	r1, [sp, #16]
  414d16:	6843      	ldr	r3, [r0, #4]
  414d18:	4299      	cmp	r1, r3
  414d1a:	f280 80a2 	bge.w	414e62 <__gethex+0x2d2>
  414d1e:	1a5d      	subs	r5, r3, r1
  414d20:	42ac      	cmp	r4, r5
  414d22:	f300 80ff 	bgt.w	414f24 <__gethex+0x394>
  414d26:	68c2      	ldr	r2, [r0, #12]
  414d28:	2a02      	cmp	r2, #2
  414d2a:	f000 8188 	beq.w	41503e <__gethex+0x4ae>
  414d2e:	2a03      	cmp	r2, #3
  414d30:	f000 8156 	beq.w	414fe0 <__gethex+0x450>
  414d34:	2a01      	cmp	r2, #1
  414d36:	f000 8173 	beq.w	415020 <__gethex+0x490>
  414d3a:	9807      	ldr	r0, [sp, #28]
  414d3c:	9905      	ldr	r1, [sp, #20]
  414d3e:	f7fd fb0d 	bl	41235c <_Bfree>
  414d42:	9a14      	ldr	r2, [sp, #80]	; 0x50
  414d44:	2300      	movs	r3, #0
  414d46:	6013      	str	r3, [r2, #0]
  414d48:	2050      	movs	r0, #80	; 0x50
  414d4a:	e778      	b.n	414c3e <__gethex+0xae>
  414d4c:	f8cb 9000 	str.w	r9, [fp]
  414d50:	f04f 0900 	mov.w	r9, #0
  414d54:	f10b 0b04 	add.w	fp, fp, #4
  414d58:	464a      	mov	r2, r9
  414d5a:	2704      	movs	r7, #4
  414d5c:	e798      	b.n	414c90 <__gethex+0x100>
  414d5e:	7863      	ldrb	r3, [r4, #1]
  414d60:	2b2b      	cmp	r3, #43	; 0x2b
  414d62:	f000 8097 	beq.w	414e94 <__gethex+0x304>
  414d66:	2b2d      	cmp	r3, #45	; 0x2d
  414d68:	d070      	beq.n	414e4c <__gethex+0x2bc>
  414d6a:	1c60      	adds	r0, r4, #1
  414d6c:	f04f 0b00 	mov.w	fp, #0
  414d70:	5cf2      	ldrb	r2, [r6, r3]
  414d72:	494a      	ldr	r1, [pc, #296]	; (414e9c <__gethex+0x30c>)
  414d74:	1e53      	subs	r3, r2, #1
  414d76:	2b18      	cmp	r3, #24
  414d78:	f63f af57 	bhi.w	414c2a <__gethex+0x9a>
  414d7c:	7843      	ldrb	r3, [r0, #1]
  414d7e:	5cc9      	ldrb	r1, [r1, r3]
  414d80:	f101 3cff 	add.w	ip, r1, #4294967295
  414d84:	f1bc 0f18 	cmp.w	ip, #24
  414d88:	f1a2 0210 	sub.w	r2, r2, #16
  414d8c:	f100 0301 	add.w	r3, r0, #1
  414d90:	d812      	bhi.n	414db8 <__gethex+0x228>
  414d92:	3002      	adds	r0, #2
  414d94:	f890 c000 	ldrb.w	ip, [r0]
  414d98:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  414d9c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  414da0:	f816 100c 	ldrb.w	r1, [r6, ip]
  414da4:	f101 3cff 	add.w	ip, r1, #4294967295
  414da8:	f1bc 0f18 	cmp.w	ip, #24
  414dac:	4603      	mov	r3, r0
  414dae:	f1a2 0210 	sub.w	r2, r2, #16
  414db2:	f100 0001 	add.w	r0, r0, #1
  414db6:	d9ed      	bls.n	414d94 <__gethex+0x204>
  414db8:	f1bb 0f00 	cmp.w	fp, #0
  414dbc:	d000      	beq.n	414dc0 <__gethex+0x230>
  414dbe:	4252      	negs	r2, r2
  414dc0:	9804      	ldr	r0, [sp, #16]
  414dc2:	4410      	add	r0, r2
  414dc4:	9004      	str	r0, [sp, #16]
  414dc6:	e731      	b.n	414c2c <__gethex+0x9c>
  414dc8:	4628      	mov	r0, r5
  414dca:	9902      	ldr	r1, [sp, #8]
  414dcc:	9a03      	ldr	r2, [sp, #12]
  414dce:	f7f8 f8af 	bl	40cf30 <strncmp>
  414dd2:	2800      	cmp	r0, #0
  414dd4:	d13f      	bne.n	414e56 <__gethex+0x2c6>
  414dd6:	9803      	ldr	r0, [sp, #12]
  414dd8:	5c2b      	ldrb	r3, [r5, r0]
  414dda:	5cf2      	ldrb	r2, [r6, r3]
  414ddc:	4604      	mov	r4, r0
  414dde:	442c      	add	r4, r5
  414de0:	2a00      	cmp	r2, #0
  414de2:	f000 8097 	beq.w	414f14 <__gethex+0x384>
  414de6:	2b30      	cmp	r3, #48	; 0x30
  414de8:	f040 8142 	bne.w	415070 <__gethex+0x4e0>
  414dec:	1c62      	adds	r2, r4, #1
  414dee:	4615      	mov	r5, r2
  414df0:	3201      	adds	r2, #1
  414df2:	782b      	ldrb	r3, [r5, #0]
  414df4:	2b30      	cmp	r3, #48	; 0x30
  414df6:	d0fa      	beq.n	414dee <__gethex+0x25e>
  414df8:	5cf3      	ldrb	r3, [r6, r3]
  414dfa:	f1d3 0901 	rsbs	r9, r3, #1
  414dfe:	46a3      	mov	fp, r4
  414e00:	bf38      	it	cc
  414e02:	f04f 0900 	movcc.w	r9, #0
  414e06:	2701      	movs	r7, #1
  414e08:	e6ef      	b.n	414bea <__gethex+0x5a>
  414e0a:	4447      	add	r7, r8
  414e0c:	f857 0c04 	ldr.w	r0, [r7, #-4]
  414e10:	f7fd fb46 	bl	4124a0 <__hi0bits>
  414e14:	f1c4 0320 	rsb	r3, r4, #32
  414e18:	4298      	cmp	r0, r3
  414e1a:	f280 80dd 	bge.w	414fd8 <__gethex+0x448>
  414e1e:	9805      	ldr	r0, [sp, #20]
  414e20:	2101      	movs	r1, #1
  414e22:	f7ff fe65 	bl	414af0 <rshift>
  414e26:	9806      	ldr	r0, [sp, #24]
  414e28:	9904      	ldr	r1, [sp, #16]
  414e2a:	6883      	ldr	r3, [r0, #8]
  414e2c:	3101      	adds	r1, #1
  414e2e:	4299      	cmp	r1, r3
  414e30:	9104      	str	r1, [sp, #16]
  414e32:	f340 80d1 	ble.w	414fd8 <__gethex+0x448>
  414e36:	9807      	ldr	r0, [sp, #28]
  414e38:	9905      	ldr	r1, [sp, #20]
  414e3a:	f7fd fa8f 	bl	41235c <_Bfree>
  414e3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  414e40:	2300      	movs	r3, #0
  414e42:	20a3      	movs	r0, #163	; 0xa3
  414e44:	6013      	str	r3, [r2, #0]
  414e46:	b00b      	add	sp, #44	; 0x2c
  414e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414e4c:	f04f 0b01 	mov.w	fp, #1
  414e50:	78a3      	ldrb	r3, [r4, #2]
  414e52:	1ca0      	adds	r0, r4, #2
  414e54:	e78c      	b.n	414d70 <__gethex+0x1e0>
  414e56:	9404      	str	r4, [sp, #16]
  414e58:	782b      	ldrb	r3, [r5, #0]
  414e5a:	462c      	mov	r4, r5
  414e5c:	f04f 0901 	mov.w	r9, #1
  414e60:	e6dd      	b.n	414c1e <__gethex+0x8e>
  414e62:	2501      	movs	r5, #1
  414e64:	b166      	cbz	r6, 414e80 <__gethex+0x2f0>
  414e66:	9806      	ldr	r0, [sp, #24]
  414e68:	68c3      	ldr	r3, [r0, #12]
  414e6a:	2b02      	cmp	r3, #2
  414e6c:	f000 808b 	beq.w	414f86 <__gethex+0x3f6>
  414e70:	2b03      	cmp	r3, #3
  414e72:	f000 808c 	beq.w	414f8e <__gethex+0x3fe>
  414e76:	2b01      	cmp	r3, #1
  414e78:	f000 80c2 	beq.w	415000 <__gethex+0x470>
  414e7c:	f045 0510 	orr.w	r5, r5, #16
  414e80:	9814      	ldr	r0, [sp, #80]	; 0x50
  414e82:	9b05      	ldr	r3, [sp, #20]
  414e84:	6003      	str	r3, [r0, #0]
  414e86:	9909      	ldr	r1, [sp, #36]	; 0x24
  414e88:	9b04      	ldr	r3, [sp, #16]
  414e8a:	600b      	str	r3, [r1, #0]
  414e8c:	4628      	mov	r0, r5
  414e8e:	b00b      	add	sp, #44	; 0x2c
  414e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414e94:	f04f 0b00 	mov.w	fp, #0
  414e98:	e7da      	b.n	414e50 <__gethex+0x2c0>
  414e9a:	bf00      	nop
  414e9c:	004164a8 	.word	0x004164a8
  414ea0:	1b05      	subs	r5, r0, r4
  414ea2:	4629      	mov	r1, r5
  414ea4:	9805      	ldr	r0, [sp, #20]
  414ea6:	f7fd fe4f 	bl	412b48 <__any_on>
  414eaa:	2800      	cmp	r0, #0
  414eac:	d036      	beq.n	414f1c <__gethex+0x38c>
  414eae:	1e6b      	subs	r3, r5, #1
  414eb0:	115a      	asrs	r2, r3, #5
  414eb2:	9808      	ldr	r0, [sp, #32]
  414eb4:	f003 011f 	and.w	r1, r3, #31
  414eb8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  414ebc:	2601      	movs	r6, #1
  414ebe:	fa06 f101 	lsl.w	r1, r6, r1
  414ec2:	4211      	tst	r1, r2
  414ec4:	d00a      	beq.n	414edc <__gethex+0x34c>
  414ec6:	42b3      	cmp	r3, r6
  414ec8:	f340 80a8 	ble.w	41501c <__gethex+0x48c>
  414ecc:	9805      	ldr	r0, [sp, #20]
  414ece:	1ea9      	subs	r1, r5, #2
  414ed0:	f7fd fe3a 	bl	412b48 <__any_on>
  414ed4:	2800      	cmp	r0, #0
  414ed6:	f000 80a1 	beq.w	41501c <__gethex+0x48c>
  414eda:	2603      	movs	r6, #3
  414edc:	9b04      	ldr	r3, [sp, #16]
  414ede:	9805      	ldr	r0, [sp, #20]
  414ee0:	442b      	add	r3, r5
  414ee2:	4629      	mov	r1, r5
  414ee4:	9304      	str	r3, [sp, #16]
  414ee6:	f7ff fe03 	bl	414af0 <rshift>
  414eea:	e70c      	b.n	414d06 <__gethex+0x176>
  414eec:	f8cd b010 	str.w	fp, [sp, #16]
  414ef0:	e695      	b.n	414c1e <__gethex+0x8e>
  414ef2:	1a25      	subs	r5, r4, r0
  414ef4:	9905      	ldr	r1, [sp, #20]
  414ef6:	9807      	ldr	r0, [sp, #28]
  414ef8:	462a      	mov	r2, r5
  414efa:	f7fd fc15 	bl	412728 <__lshift>
  414efe:	9b04      	ldr	r3, [sp, #16]
  414f00:	9005      	str	r0, [sp, #20]
  414f02:	1b5b      	subs	r3, r3, r5
  414f04:	9304      	str	r3, [sp, #16]
  414f06:	f100 0314 	add.w	r3, r0, #20
  414f0a:	9308      	str	r3, [sp, #32]
  414f0c:	2600      	movs	r6, #0
  414f0e:	e6fa      	b.n	414d06 <__gethex+0x176>
  414f10:	2700      	movs	r7, #0
  414f12:	e660      	b.n	414bd6 <__gethex+0x46>
  414f14:	9204      	str	r2, [sp, #16]
  414f16:	f04f 0901 	mov.w	r9, #1
  414f1a:	e680      	b.n	414c1e <__gethex+0x8e>
  414f1c:	4606      	mov	r6, r0
  414f1e:	e7dd      	b.n	414edc <__gethex+0x34c>
  414f20:	462c      	mov	r4, r5
  414f22:	e66c      	b.n	414bfe <__gethex+0x6e>
  414f24:	1e6f      	subs	r7, r5, #1
  414f26:	2e00      	cmp	r6, #0
  414f28:	d158      	bne.n	414fdc <__gethex+0x44c>
  414f2a:	2f00      	cmp	r7, #0
  414f2c:	dd04      	ble.n	414f38 <__gethex+0x3a8>
  414f2e:	9805      	ldr	r0, [sp, #20]
  414f30:	4639      	mov	r1, r7
  414f32:	f7fd fe09 	bl	412b48 <__any_on>
  414f36:	4606      	mov	r6, r0
  414f38:	9808      	ldr	r0, [sp, #32]
  414f3a:	117b      	asrs	r3, r7, #5
  414f3c:	2201      	movs	r2, #1
  414f3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  414f42:	9805      	ldr	r0, [sp, #20]
  414f44:	f007 071f 	and.w	r7, r7, #31
  414f48:	40ba      	lsls	r2, r7
  414f4a:	421a      	tst	r2, r3
  414f4c:	4629      	mov	r1, r5
  414f4e:	bf18      	it	ne
  414f50:	f046 0602 	orrne.w	r6, r6, #2
  414f54:	f7ff fdcc 	bl	414af0 <rshift>
  414f58:	9b06      	ldr	r3, [sp, #24]
  414f5a:	685b      	ldr	r3, [r3, #4]
  414f5c:	9304      	str	r3, [sp, #16]
  414f5e:	1b64      	subs	r4, r4, r5
  414f60:	2502      	movs	r5, #2
  414f62:	e77f      	b.n	414e64 <__gethex+0x2d4>
  414f64:	9903      	ldr	r1, [sp, #12]
  414f66:	5c63      	ldrb	r3, [r4, r1]
  414f68:	5cf2      	ldrb	r2, [r6, r3]
  414f6a:	468b      	mov	fp, r1
  414f6c:	44a3      	add	fp, r4
  414f6e:	2a00      	cmp	r2, #0
  414f70:	f000 8081 	beq.w	415076 <__gethex+0x4e6>
  414f74:	f10b 0201 	add.w	r2, fp, #1
  414f78:	4614      	mov	r4, r2
  414f7a:	3201      	adds	r2, #1
  414f7c:	7823      	ldrb	r3, [r4, #0]
  414f7e:	5cf1      	ldrb	r1, [r6, r3]
  414f80:	2900      	cmp	r1, #0
  414f82:	d1f9      	bne.n	414f78 <__gethex+0x3e8>
  414f84:	e646      	b.n	414c14 <__gethex+0x84>
  414f86:	9a15      	ldr	r2, [sp, #84]	; 0x54
  414f88:	f1c2 0201 	rsb	r2, r2, #1
  414f8c:	9215      	str	r2, [sp, #84]	; 0x54
  414f8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  414f90:	2b00      	cmp	r3, #0
  414f92:	f43f af73 	beq.w	414e7c <__gethex+0x2ec>
  414f96:	9b05      	ldr	r3, [sp, #20]
  414f98:	9f08      	ldr	r7, [sp, #32]
  414f9a:	691e      	ldr	r6, [r3, #16]
  414f9c:	9b08      	ldr	r3, [sp, #32]
  414f9e:	ea4f 0886 	mov.w	r8, r6, lsl #2
  414fa2:	4447      	add	r7, r8
  414fa4:	2000      	movs	r0, #0
  414fa6:	e003      	b.n	414fb0 <__gethex+0x420>
  414fa8:	429f      	cmp	r7, r3
  414faa:	f843 0c04 	str.w	r0, [r3, #-4]
  414fae:	d94a      	bls.n	415046 <__gethex+0x4b6>
  414fb0:	4619      	mov	r1, r3
  414fb2:	f853 2b04 	ldr.w	r2, [r3], #4
  414fb6:	f1b2 3fff 	cmp.w	r2, #4294967295
  414fba:	d0f5      	beq.n	414fa8 <__gethex+0x418>
  414fbc:	3201      	adds	r2, #1
  414fbe:	9f08      	ldr	r7, [sp, #32]
  414fc0:	600a      	str	r2, [r1, #0]
  414fc2:	2d02      	cmp	r5, #2
  414fc4:	d04d      	beq.n	415062 <__gethex+0x4d2>
  414fc6:	9a05      	ldr	r2, [sp, #20]
  414fc8:	6913      	ldr	r3, [r2, #16]
  414fca:	429e      	cmp	r6, r3
  414fcc:	f6ff af27 	blt.w	414e1e <__gethex+0x28e>
  414fd0:	f014 041f 	ands.w	r4, r4, #31
  414fd4:	f47f af19 	bne.w	414e0a <__gethex+0x27a>
  414fd8:	2521      	movs	r5, #33	; 0x21
  414fda:	e751      	b.n	414e80 <__gethex+0x2f0>
  414fdc:	2601      	movs	r6, #1
  414fde:	e7ab      	b.n	414f38 <__gethex+0x3a8>
  414fe0:	9915      	ldr	r1, [sp, #84]	; 0x54
  414fe2:	2900      	cmp	r1, #0
  414fe4:	f43f aea9 	beq.w	414d3a <__gethex+0x1aa>
  414fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
  414fea:	9914      	ldr	r1, [sp, #80]	; 0x50
  414fec:	6003      	str	r3, [r0, #0]
  414fee:	9b05      	ldr	r3, [sp, #20]
  414ff0:	2201      	movs	r2, #1
  414ff2:	611a      	str	r2, [r3, #16]
  414ff4:	9b08      	ldr	r3, [sp, #32]
  414ff6:	601a      	str	r2, [r3, #0]
  414ff8:	9b05      	ldr	r3, [sp, #20]
  414ffa:	600b      	str	r3, [r1, #0]
  414ffc:	2062      	movs	r0, #98	; 0x62
  414ffe:	e61e      	b.n	414c3e <__gethex+0xae>
  415000:	07b2      	lsls	r2, r6, #30
  415002:	f57f af3b 	bpl.w	414e7c <__gethex+0x2ec>
  415006:	9908      	ldr	r1, [sp, #32]
  415008:	680b      	ldr	r3, [r1, #0]
  41500a:	4333      	orrs	r3, r6
  41500c:	07db      	lsls	r3, r3, #31
  41500e:	d4c2      	bmi.n	414f96 <__gethex+0x406>
  415010:	e734      	b.n	414e7c <__gethex+0x2ec>
  415012:	f8dd b020 	ldr.w	fp, [sp, #32]
  415016:	f04f 0900 	mov.w	r9, #0
  41501a:	e65e      	b.n	414cda <__gethex+0x14a>
  41501c:	2602      	movs	r6, #2
  41501e:	e75d      	b.n	414edc <__gethex+0x34c>
  415020:	42a5      	cmp	r5, r4
  415022:	f47f ae8a 	bne.w	414d3a <__gethex+0x1aa>
  415026:	2c01      	cmp	r4, #1
  415028:	ddde      	ble.n	414fe8 <__gethex+0x458>
  41502a:	1e61      	subs	r1, r4, #1
  41502c:	9805      	ldr	r0, [sp, #20]
  41502e:	f7fd fd8b 	bl	412b48 <__any_on>
  415032:	2800      	cmp	r0, #0
  415034:	f43f ae81 	beq.w	414d3a <__gethex+0x1aa>
  415038:	9a06      	ldr	r2, [sp, #24]
  41503a:	6853      	ldr	r3, [r2, #4]
  41503c:	e7d4      	b.n	414fe8 <__gethex+0x458>
  41503e:	9815      	ldr	r0, [sp, #84]	; 0x54
  415040:	2800      	cmp	r0, #0
  415042:	d0d1      	beq.n	414fe8 <__gethex+0x458>
  415044:	e679      	b.n	414d3a <__gethex+0x1aa>
  415046:	9805      	ldr	r0, [sp, #20]
  415048:	6883      	ldr	r3, [r0, #8]
  41504a:	429e      	cmp	r6, r3
  41504c:	da15      	bge.n	41507a <__gethex+0x4ea>
  41504e:	9f08      	ldr	r7, [sp, #32]
  415050:	4633      	mov	r3, r6
  415052:	9805      	ldr	r0, [sp, #20]
  415054:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  415058:	2101      	movs	r1, #1
  41505a:	3301      	adds	r3, #1
  41505c:	6103      	str	r3, [r0, #16]
  41505e:	6151      	str	r1, [r2, #20]
  415060:	e7af      	b.n	414fc2 <__gethex+0x432>
  415062:	9906      	ldr	r1, [sp, #24]
  415064:	680b      	ldr	r3, [r1, #0]
  415066:	3b01      	subs	r3, #1
  415068:	42a3      	cmp	r3, r4
  41506a:	d01c      	beq.n	4150a6 <__gethex+0x516>
  41506c:	2522      	movs	r5, #34	; 0x22
  41506e:	e707      	b.n	414e80 <__gethex+0x2f0>
  415070:	4613      	mov	r3, r2
  415072:	4625      	mov	r5, r4
  415074:	e6c1      	b.n	414dfa <__gethex+0x26a>
  415076:	465c      	mov	r4, fp
  415078:	e5cc      	b.n	414c14 <__gethex+0x84>
  41507a:	6841      	ldr	r1, [r0, #4]
  41507c:	9807      	ldr	r0, [sp, #28]
  41507e:	3101      	adds	r1, #1
  415080:	f7fd f946 	bl	412310 <_Balloc>
  415084:	9905      	ldr	r1, [sp, #20]
  415086:	690b      	ldr	r3, [r1, #16]
  415088:	1c9a      	adds	r2, r3, #2
  41508a:	4607      	mov	r7, r0
  41508c:	0092      	lsls	r2, r2, #2
  41508e:	310c      	adds	r1, #12
  415090:	300c      	adds	r0, #12
  415092:	f7f7 fce5 	bl	40ca60 <memcpy>
  415096:	9807      	ldr	r0, [sp, #28]
  415098:	9905      	ldr	r1, [sp, #20]
  41509a:	f7fd f95f 	bl	41235c <_Bfree>
  41509e:	9705      	str	r7, [sp, #20]
  4150a0:	693b      	ldr	r3, [r7, #16]
  4150a2:	3714      	adds	r7, #20
  4150a4:	e7d5      	b.n	415052 <__gethex+0x4c2>
  4150a6:	1163      	asrs	r3, r4, #5
  4150a8:	2201      	movs	r2, #1
  4150aa:	f004 041f 	and.w	r4, r4, #31
  4150ae:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
  4150b2:	40a2      	lsls	r2, r4
  4150b4:	421a      	tst	r2, r3
  4150b6:	bf14      	ite	ne
  4150b8:	2521      	movne	r5, #33	; 0x21
  4150ba:	2522      	moveq	r5, #34	; 0x22
  4150bc:	e6e0      	b.n	414e80 <__gethex+0x2f0>
  4150be:	bf00      	nop

004150c0 <__hexnan>:
  4150c0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4150c4:	680b      	ldr	r3, [r1, #0]
  4150c6:	f8df 8188 	ldr.w	r8, [pc, #392]	; 415250 <__hexnan+0x190>
  4150ca:	b084      	sub	sp, #16
  4150cc:	4691      	mov	r9, r2
  4150ce:	115a      	asrs	r2, r3, #5
  4150d0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  4150d4:	f013 031f 	ands.w	r3, r3, #31
  4150d8:	9200      	str	r2, [sp, #0]
  4150da:	9001      	str	r0, [sp, #4]
  4150dc:	bf1c      	itt	ne
  4150de:	3204      	addne	r2, #4
  4150e0:	9200      	strne	r2, [sp, #0]
  4150e2:	9a01      	ldr	r2, [sp, #4]
  4150e4:	9800      	ldr	r0, [sp, #0]
  4150e6:	9303      	str	r3, [sp, #12]
  4150e8:	6811      	ldr	r1, [r2, #0]
  4150ea:	2300      	movs	r3, #0
  4150ec:	f840 3c04 	str.w	r3, [r0, #-4]
  4150f0:	469a      	mov	sl, r3
  4150f2:	461d      	mov	r5, r3
  4150f4:	461e      	mov	r6, r3
  4150f6:	784b      	ldrb	r3, [r1, #1]
  4150f8:	1f07      	subs	r7, r0, #4
  4150fa:	46bc      	mov	ip, r7
  4150fc:	4638      	mov	r0, r7
  4150fe:	9702      	str	r7, [sp, #8]
  415100:	b33b      	cbz	r3, 415152 <__hexnan+0x92>
  415102:	f818 2003 	ldrb.w	r2, [r8, r3]
  415106:	2a00      	cmp	r2, #0
  415108:	d148      	bne.n	41519c <__hexnan+0xdc>
  41510a:	2b20      	cmp	r3, #32
  41510c:	d866      	bhi.n	4151dc <__hexnan+0x11c>
  41510e:	42ae      	cmp	r6, r5
  415110:	dd1b      	ble.n	41514a <__hexnan+0x8a>
  415112:	4560      	cmp	r0, ip
  415114:	d215      	bcs.n	415142 <__hexnan+0x82>
  415116:	f1ba 0f07 	cmp.w	sl, #7
  41511a:	dc12      	bgt.n	415142 <__hexnan+0x82>
  41511c:	f1ca 0a08 	rsb	sl, sl, #8
  415120:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
  415124:	6802      	ldr	r2, [r0, #0]
  415126:	f1ca 0b20 	rsb	fp, sl, #32
  41512a:	4603      	mov	r3, r0
  41512c:	685c      	ldr	r4, [r3, #4]
  41512e:	fa04 f70b 	lsl.w	r7, r4, fp
  415132:	4317      	orrs	r7, r2
  415134:	fa24 f20a 	lsr.w	r2, r4, sl
  415138:	601f      	str	r7, [r3, #0]
  41513a:	f843 2f04 	str.w	r2, [r3, #4]!
  41513e:	459c      	cmp	ip, r3
  415140:	d8f4      	bhi.n	41512c <__hexnan+0x6c>
  415142:	4548      	cmp	r0, r9
  415144:	d841      	bhi.n	4151ca <__hexnan+0x10a>
  415146:	f04f 0a08 	mov.w	sl, #8
  41514a:	3101      	adds	r1, #1
  41514c:	784b      	ldrb	r3, [r1, #1]
  41514e:	2b00      	cmp	r3, #0
  415150:	d1d7      	bne.n	415102 <__hexnan+0x42>
  415152:	9f02      	ldr	r7, [sp, #8]
  415154:	2e00      	cmp	r6, #0
  415156:	d044      	beq.n	4151e2 <__hexnan+0x122>
  415158:	4560      	cmp	r0, ip
  41515a:	d202      	bcs.n	415162 <__hexnan+0xa2>
  41515c:	f1ba 0f07 	cmp.w	sl, #7
  415160:	dd62      	ble.n	415228 <__hexnan+0x168>
  415162:	4581      	cmp	r9, r0
  415164:	d242      	bcs.n	4151ec <__hexnan+0x12c>
  415166:	464b      	mov	r3, r9
  415168:	f850 2b04 	ldr.w	r2, [r0], #4
  41516c:	f843 2b04 	str.w	r2, [r3], #4
  415170:	4287      	cmp	r7, r0
  415172:	d2f9      	bcs.n	415168 <__hexnan+0xa8>
  415174:	2200      	movs	r2, #0
  415176:	f843 2b04 	str.w	r2, [r3], #4
  41517a:	429f      	cmp	r7, r3
  41517c:	d2fb      	bcs.n	415176 <__hexnan+0xb6>
  41517e:	9800      	ldr	r0, [sp, #0]
  415180:	f850 3c04 	ldr.w	r3, [r0, #-4]
  415184:	b92b      	cbnz	r3, 415192 <__hexnan+0xd2>
  415186:	45b9      	cmp	r9, r7
  415188:	d041      	beq.n	41520e <__hexnan+0x14e>
  41518a:	f857 3d04 	ldr.w	r3, [r7, #-4]!
  41518e:	2b00      	cmp	r3, #0
  415190:	d0f9      	beq.n	415186 <__hexnan+0xc6>
  415192:	2005      	movs	r0, #5
  415194:	b004      	add	sp, #16
  415196:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41519a:	4770      	bx	lr
  41519c:	f10a 0a01 	add.w	sl, sl, #1
  4151a0:	f1ba 0f08 	cmp.w	sl, #8
  4151a4:	f106 0601 	add.w	r6, r6, #1
  4151a8:	dc06      	bgt.n	4151b8 <__hexnan+0xf8>
  4151aa:	6803      	ldr	r3, [r0, #0]
  4151ac:	011b      	lsls	r3, r3, #4
  4151ae:	f002 020f 	and.w	r2, r2, #15
  4151b2:	431a      	orrs	r2, r3
  4151b4:	6002      	str	r2, [r0, #0]
  4151b6:	e7c8      	b.n	41514a <__hexnan+0x8a>
  4151b8:	4548      	cmp	r0, r9
  4151ba:	d9c6      	bls.n	41514a <__hexnan+0x8a>
  4151bc:	2300      	movs	r3, #0
  4151be:	f840 3c04 	str.w	r3, [r0, #-4]
  4151c2:	f04f 0a01 	mov.w	sl, #1
  4151c6:	3804      	subs	r0, #4
  4151c8:	e7f1      	b.n	4151ae <__hexnan+0xee>
  4151ca:	2300      	movs	r3, #0
  4151cc:	f1a0 0c04 	sub.w	ip, r0, #4
  4151d0:	f840 3c04 	str.w	r3, [r0, #-4]
  4151d4:	4635      	mov	r5, r6
  4151d6:	4660      	mov	r0, ip
  4151d8:	469a      	mov	sl, r3
  4151da:	e7b6      	b.n	41514a <__hexnan+0x8a>
  4151dc:	2b29      	cmp	r3, #41	; 0x29
  4151de:	9f02      	ldr	r7, [sp, #8]
  4151e0:	d01c      	beq.n	41521c <__hexnan+0x15c>
  4151e2:	2004      	movs	r0, #4
  4151e4:	b004      	add	sp, #16
  4151e6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4151ea:	4770      	bx	lr
  4151ec:	9a03      	ldr	r2, [sp, #12]
  4151ee:	2a00      	cmp	r2, #0
  4151f0:	d0c5      	beq.n	41517e <__hexnan+0xbe>
  4151f2:	9b03      	ldr	r3, [sp, #12]
  4151f4:	9800      	ldr	r0, [sp, #0]
  4151f6:	f1c3 0220 	rsb	r2, r3, #32
  4151fa:	f04f 31ff 	mov.w	r1, #4294967295
  4151fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
  415202:	fa21 f202 	lsr.w	r2, r1, r2
  415206:	4013      	ands	r3, r2
  415208:	f840 3c04 	str.w	r3, [r0, #-4]
  41520c:	e7ba      	b.n	415184 <__hexnan+0xc4>
  41520e:	2301      	movs	r3, #1
  415210:	2005      	movs	r0, #5
  415212:	603b      	str	r3, [r7, #0]
  415214:	b004      	add	sp, #16
  415216:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  41521a:	4770      	bx	lr
  41521c:	9a01      	ldr	r2, [sp, #4]
  41521e:	3102      	adds	r1, #2
  415220:	6011      	str	r1, [r2, #0]
  415222:	2e00      	cmp	r6, #0
  415224:	d198      	bne.n	415158 <__hexnan+0x98>
  415226:	e7dc      	b.n	4151e2 <__hexnan+0x122>
  415228:	f1ca 0508 	rsb	r5, sl, #8
  41522c:	00ad      	lsls	r5, r5, #2
  41522e:	6802      	ldr	r2, [r0, #0]
  415230:	f1c5 0620 	rsb	r6, r5, #32
  415234:	4603      	mov	r3, r0
  415236:	6859      	ldr	r1, [r3, #4]
  415238:	fa01 f406 	lsl.w	r4, r1, r6
  41523c:	4314      	orrs	r4, r2
  41523e:	fa21 f205 	lsr.w	r2, r1, r5
  415242:	601c      	str	r4, [r3, #0]
  415244:	f843 2f04 	str.w	r2, [r3, #4]!
  415248:	4563      	cmp	r3, ip
  41524a:	d3f4      	bcc.n	415236 <__hexnan+0x176>
  41524c:	e789      	b.n	415162 <__hexnan+0xa2>
  41524e:	bf00      	nop
  415250:	004164a8 	.word	0x004164a8

00415254 <_isatty_r>:
  415254:	b538      	push	{r3, r4, r5, lr}
  415256:	4c07      	ldr	r4, [pc, #28]	; (415274 <_isatty_r+0x20>)
  415258:	2300      	movs	r3, #0
  41525a:	4605      	mov	r5, r0
  41525c:	4608      	mov	r0, r1
  41525e:	6023      	str	r3, [r4, #0]
  415260:	f7f7 f80c 	bl	40c27c <_isatty>
  415264:	1c43      	adds	r3, r0, #1
  415266:	d000      	beq.n	41526a <_isatty_r+0x16>
  415268:	bd38      	pop	{r3, r4, r5, pc}
  41526a:	6823      	ldr	r3, [r4, #0]
  41526c:	2b00      	cmp	r3, #0
  41526e:	d0fb      	beq.n	415268 <_isatty_r+0x14>
  415270:	602b      	str	r3, [r5, #0]
  415272:	bd38      	pop	{r3, r4, r5, pc}
  415274:	200099d0 	.word	0x200099d0

00415278 <__aeabi_drsub>:
  415278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  41527c:	e002      	b.n	415284 <__adddf3>
  41527e:	bf00      	nop

00415280 <__aeabi_dsub>:
  415280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00415284 <__adddf3>:
  415284:	b530      	push	{r4, r5, lr}
  415286:	ea4f 0441 	mov.w	r4, r1, lsl #1
  41528a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  41528e:	ea94 0f05 	teq	r4, r5
  415292:	bf08      	it	eq
  415294:	ea90 0f02 	teqeq	r0, r2
  415298:	bf1f      	itttt	ne
  41529a:	ea54 0c00 	orrsne.w	ip, r4, r0
  41529e:	ea55 0c02 	orrsne.w	ip, r5, r2
  4152a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4152a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4152aa:	f000 80e2 	beq.w	415472 <__adddf3+0x1ee>
  4152ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4152b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4152b6:	bfb8      	it	lt
  4152b8:	426d      	neglt	r5, r5
  4152ba:	dd0c      	ble.n	4152d6 <__adddf3+0x52>
  4152bc:	442c      	add	r4, r5
  4152be:	ea80 0202 	eor.w	r2, r0, r2
  4152c2:	ea81 0303 	eor.w	r3, r1, r3
  4152c6:	ea82 0000 	eor.w	r0, r2, r0
  4152ca:	ea83 0101 	eor.w	r1, r3, r1
  4152ce:	ea80 0202 	eor.w	r2, r0, r2
  4152d2:	ea81 0303 	eor.w	r3, r1, r3
  4152d6:	2d36      	cmp	r5, #54	; 0x36
  4152d8:	bf88      	it	hi
  4152da:	bd30      	pophi	{r4, r5, pc}
  4152dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4152e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4152e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4152e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4152ec:	d002      	beq.n	4152f4 <__adddf3+0x70>
  4152ee:	4240      	negs	r0, r0
  4152f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4152f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4152f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4152fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  415300:	d002      	beq.n	415308 <__adddf3+0x84>
  415302:	4252      	negs	r2, r2
  415304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  415308:	ea94 0f05 	teq	r4, r5
  41530c:	f000 80a7 	beq.w	41545e <__adddf3+0x1da>
  415310:	f1a4 0401 	sub.w	r4, r4, #1
  415314:	f1d5 0e20 	rsbs	lr, r5, #32
  415318:	db0d      	blt.n	415336 <__adddf3+0xb2>
  41531a:	fa02 fc0e 	lsl.w	ip, r2, lr
  41531e:	fa22 f205 	lsr.w	r2, r2, r5
  415322:	1880      	adds	r0, r0, r2
  415324:	f141 0100 	adc.w	r1, r1, #0
  415328:	fa03 f20e 	lsl.w	r2, r3, lr
  41532c:	1880      	adds	r0, r0, r2
  41532e:	fa43 f305 	asr.w	r3, r3, r5
  415332:	4159      	adcs	r1, r3
  415334:	e00e      	b.n	415354 <__adddf3+0xd0>
  415336:	f1a5 0520 	sub.w	r5, r5, #32
  41533a:	f10e 0e20 	add.w	lr, lr, #32
  41533e:	2a01      	cmp	r2, #1
  415340:	fa03 fc0e 	lsl.w	ip, r3, lr
  415344:	bf28      	it	cs
  415346:	f04c 0c02 	orrcs.w	ip, ip, #2
  41534a:	fa43 f305 	asr.w	r3, r3, r5
  41534e:	18c0      	adds	r0, r0, r3
  415350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  415354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  415358:	d507      	bpl.n	41536a <__adddf3+0xe6>
  41535a:	f04f 0e00 	mov.w	lr, #0
  41535e:	f1dc 0c00 	rsbs	ip, ip, #0
  415362:	eb7e 0000 	sbcs.w	r0, lr, r0
  415366:	eb6e 0101 	sbc.w	r1, lr, r1
  41536a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  41536e:	d31b      	bcc.n	4153a8 <__adddf3+0x124>
  415370:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  415374:	d30c      	bcc.n	415390 <__adddf3+0x10c>
  415376:	0849      	lsrs	r1, r1, #1
  415378:	ea5f 0030 	movs.w	r0, r0, rrx
  41537c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  415380:	f104 0401 	add.w	r4, r4, #1
  415384:	ea4f 5244 	mov.w	r2, r4, lsl #21
  415388:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  41538c:	f080 809a 	bcs.w	4154c4 <__adddf3+0x240>
  415390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  415394:	bf08      	it	eq
  415396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  41539a:	f150 0000 	adcs.w	r0, r0, #0
  41539e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4153a2:	ea41 0105 	orr.w	r1, r1, r5
  4153a6:	bd30      	pop	{r4, r5, pc}
  4153a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4153ac:	4140      	adcs	r0, r0
  4153ae:	eb41 0101 	adc.w	r1, r1, r1
  4153b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4153b6:	f1a4 0401 	sub.w	r4, r4, #1
  4153ba:	d1e9      	bne.n	415390 <__adddf3+0x10c>
  4153bc:	f091 0f00 	teq	r1, #0
  4153c0:	bf04      	itt	eq
  4153c2:	4601      	moveq	r1, r0
  4153c4:	2000      	moveq	r0, #0
  4153c6:	fab1 f381 	clz	r3, r1
  4153ca:	bf08      	it	eq
  4153cc:	3320      	addeq	r3, #32
  4153ce:	f1a3 030b 	sub.w	r3, r3, #11
  4153d2:	f1b3 0220 	subs.w	r2, r3, #32
  4153d6:	da0c      	bge.n	4153f2 <__adddf3+0x16e>
  4153d8:	320c      	adds	r2, #12
  4153da:	dd08      	ble.n	4153ee <__adddf3+0x16a>
  4153dc:	f102 0c14 	add.w	ip, r2, #20
  4153e0:	f1c2 020c 	rsb	r2, r2, #12
  4153e4:	fa01 f00c 	lsl.w	r0, r1, ip
  4153e8:	fa21 f102 	lsr.w	r1, r1, r2
  4153ec:	e00c      	b.n	415408 <__adddf3+0x184>
  4153ee:	f102 0214 	add.w	r2, r2, #20
  4153f2:	bfd8      	it	le
  4153f4:	f1c2 0c20 	rsble	ip, r2, #32
  4153f8:	fa01 f102 	lsl.w	r1, r1, r2
  4153fc:	fa20 fc0c 	lsr.w	ip, r0, ip
  415400:	bfdc      	itt	le
  415402:	ea41 010c 	orrle.w	r1, r1, ip
  415406:	4090      	lslle	r0, r2
  415408:	1ae4      	subs	r4, r4, r3
  41540a:	bfa2      	ittt	ge
  41540c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  415410:	4329      	orrge	r1, r5
  415412:	bd30      	popge	{r4, r5, pc}
  415414:	ea6f 0404 	mvn.w	r4, r4
  415418:	3c1f      	subs	r4, #31
  41541a:	da1c      	bge.n	415456 <__adddf3+0x1d2>
  41541c:	340c      	adds	r4, #12
  41541e:	dc0e      	bgt.n	41543e <__adddf3+0x1ba>
  415420:	f104 0414 	add.w	r4, r4, #20
  415424:	f1c4 0220 	rsb	r2, r4, #32
  415428:	fa20 f004 	lsr.w	r0, r0, r4
  41542c:	fa01 f302 	lsl.w	r3, r1, r2
  415430:	ea40 0003 	orr.w	r0, r0, r3
  415434:	fa21 f304 	lsr.w	r3, r1, r4
  415438:	ea45 0103 	orr.w	r1, r5, r3
  41543c:	bd30      	pop	{r4, r5, pc}
  41543e:	f1c4 040c 	rsb	r4, r4, #12
  415442:	f1c4 0220 	rsb	r2, r4, #32
  415446:	fa20 f002 	lsr.w	r0, r0, r2
  41544a:	fa01 f304 	lsl.w	r3, r1, r4
  41544e:	ea40 0003 	orr.w	r0, r0, r3
  415452:	4629      	mov	r1, r5
  415454:	bd30      	pop	{r4, r5, pc}
  415456:	fa21 f004 	lsr.w	r0, r1, r4
  41545a:	4629      	mov	r1, r5
  41545c:	bd30      	pop	{r4, r5, pc}
  41545e:	f094 0f00 	teq	r4, #0
  415462:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  415466:	bf06      	itte	eq
  415468:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  41546c:	3401      	addeq	r4, #1
  41546e:	3d01      	subne	r5, #1
  415470:	e74e      	b.n	415310 <__adddf3+0x8c>
  415472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  415476:	bf18      	it	ne
  415478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  41547c:	d029      	beq.n	4154d2 <__adddf3+0x24e>
  41547e:	ea94 0f05 	teq	r4, r5
  415482:	bf08      	it	eq
  415484:	ea90 0f02 	teqeq	r0, r2
  415488:	d005      	beq.n	415496 <__adddf3+0x212>
  41548a:	ea54 0c00 	orrs.w	ip, r4, r0
  41548e:	bf04      	itt	eq
  415490:	4619      	moveq	r1, r3
  415492:	4610      	moveq	r0, r2
  415494:	bd30      	pop	{r4, r5, pc}
  415496:	ea91 0f03 	teq	r1, r3
  41549a:	bf1e      	ittt	ne
  41549c:	2100      	movne	r1, #0
  41549e:	2000      	movne	r0, #0
  4154a0:	bd30      	popne	{r4, r5, pc}
  4154a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4154a6:	d105      	bne.n	4154b4 <__adddf3+0x230>
  4154a8:	0040      	lsls	r0, r0, #1
  4154aa:	4149      	adcs	r1, r1
  4154ac:	bf28      	it	cs
  4154ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4154b2:	bd30      	pop	{r4, r5, pc}
  4154b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4154b8:	bf3c      	itt	cc
  4154ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4154be:	bd30      	popcc	{r4, r5, pc}
  4154c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4154c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4154c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4154cc:	f04f 0000 	mov.w	r0, #0
  4154d0:	bd30      	pop	{r4, r5, pc}
  4154d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4154d6:	bf1a      	itte	ne
  4154d8:	4619      	movne	r1, r3
  4154da:	4610      	movne	r0, r2
  4154dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4154e0:	bf1c      	itt	ne
  4154e2:	460b      	movne	r3, r1
  4154e4:	4602      	movne	r2, r0
  4154e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4154ea:	bf06      	itte	eq
  4154ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4154f0:	ea91 0f03 	teqeq	r1, r3
  4154f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4154f8:	bd30      	pop	{r4, r5, pc}
  4154fa:	bf00      	nop

004154fc <__aeabi_ui2d>:
  4154fc:	f090 0f00 	teq	r0, #0
  415500:	bf04      	itt	eq
  415502:	2100      	moveq	r1, #0
  415504:	4770      	bxeq	lr
  415506:	b530      	push	{r4, r5, lr}
  415508:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41550c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  415510:	f04f 0500 	mov.w	r5, #0
  415514:	f04f 0100 	mov.w	r1, #0
  415518:	e750      	b.n	4153bc <__adddf3+0x138>
  41551a:	bf00      	nop

0041551c <__aeabi_i2d>:
  41551c:	f090 0f00 	teq	r0, #0
  415520:	bf04      	itt	eq
  415522:	2100      	moveq	r1, #0
  415524:	4770      	bxeq	lr
  415526:	b530      	push	{r4, r5, lr}
  415528:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41552c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  415530:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  415534:	bf48      	it	mi
  415536:	4240      	negmi	r0, r0
  415538:	f04f 0100 	mov.w	r1, #0
  41553c:	e73e      	b.n	4153bc <__adddf3+0x138>
  41553e:	bf00      	nop

00415540 <__aeabi_f2d>:
  415540:	0042      	lsls	r2, r0, #1
  415542:	ea4f 01e2 	mov.w	r1, r2, asr #3
  415546:	ea4f 0131 	mov.w	r1, r1, rrx
  41554a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  41554e:	bf1f      	itttt	ne
  415550:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  415554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  415558:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  41555c:	4770      	bxne	lr
  41555e:	f092 0f00 	teq	r2, #0
  415562:	bf14      	ite	ne
  415564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  415568:	4770      	bxeq	lr
  41556a:	b530      	push	{r4, r5, lr}
  41556c:	f44f 7460 	mov.w	r4, #896	; 0x380
  415570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  415574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  415578:	e720      	b.n	4153bc <__adddf3+0x138>
  41557a:	bf00      	nop

0041557c <__aeabi_ul2d>:
  41557c:	ea50 0201 	orrs.w	r2, r0, r1
  415580:	bf08      	it	eq
  415582:	4770      	bxeq	lr
  415584:	b530      	push	{r4, r5, lr}
  415586:	f04f 0500 	mov.w	r5, #0
  41558a:	e00a      	b.n	4155a2 <__aeabi_l2d+0x16>

0041558c <__aeabi_l2d>:
  41558c:	ea50 0201 	orrs.w	r2, r0, r1
  415590:	bf08      	it	eq
  415592:	4770      	bxeq	lr
  415594:	b530      	push	{r4, r5, lr}
  415596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  41559a:	d502      	bpl.n	4155a2 <__aeabi_l2d+0x16>
  41559c:	4240      	negs	r0, r0
  41559e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4155a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4155a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4155aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4155ae:	f43f aedc 	beq.w	41536a <__adddf3+0xe6>
  4155b2:	f04f 0203 	mov.w	r2, #3
  4155b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4155ba:	bf18      	it	ne
  4155bc:	3203      	addne	r2, #3
  4155be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4155c2:	bf18      	it	ne
  4155c4:	3203      	addne	r2, #3
  4155c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4155ca:	f1c2 0320 	rsb	r3, r2, #32
  4155ce:	fa00 fc03 	lsl.w	ip, r0, r3
  4155d2:	fa20 f002 	lsr.w	r0, r0, r2
  4155d6:	fa01 fe03 	lsl.w	lr, r1, r3
  4155da:	ea40 000e 	orr.w	r0, r0, lr
  4155de:	fa21 f102 	lsr.w	r1, r1, r2
  4155e2:	4414      	add	r4, r2
  4155e4:	e6c1      	b.n	41536a <__adddf3+0xe6>
  4155e6:	bf00      	nop

004155e8 <__aeabi_dmul>:
  4155e8:	b570      	push	{r4, r5, r6, lr}
  4155ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4155ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4155f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4155f6:	bf1d      	ittte	ne
  4155f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4155fc:	ea94 0f0c 	teqne	r4, ip
  415600:	ea95 0f0c 	teqne	r5, ip
  415604:	f000 f8de 	bleq	4157c4 <__aeabi_dmul+0x1dc>
  415608:	442c      	add	r4, r5
  41560a:	ea81 0603 	eor.w	r6, r1, r3
  41560e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  415612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  415616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  41561a:	bf18      	it	ne
  41561c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  415620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  415624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  415628:	d038      	beq.n	41569c <__aeabi_dmul+0xb4>
  41562a:	fba0 ce02 	umull	ip, lr, r0, r2
  41562e:	f04f 0500 	mov.w	r5, #0
  415632:	fbe1 e502 	umlal	lr, r5, r1, r2
  415636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  41563a:	fbe0 e503 	umlal	lr, r5, r0, r3
  41563e:	f04f 0600 	mov.w	r6, #0
  415642:	fbe1 5603 	umlal	r5, r6, r1, r3
  415646:	f09c 0f00 	teq	ip, #0
  41564a:	bf18      	it	ne
  41564c:	f04e 0e01 	orrne.w	lr, lr, #1
  415650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  415654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  415658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  41565c:	d204      	bcs.n	415668 <__aeabi_dmul+0x80>
  41565e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  415662:	416d      	adcs	r5, r5
  415664:	eb46 0606 	adc.w	r6, r6, r6
  415668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  41566c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  415670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  415674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  415678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  41567c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  415680:	bf88      	it	hi
  415682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  415686:	d81e      	bhi.n	4156c6 <__aeabi_dmul+0xde>
  415688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  41568c:	bf08      	it	eq
  41568e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  415692:	f150 0000 	adcs.w	r0, r0, #0
  415696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41569a:	bd70      	pop	{r4, r5, r6, pc}
  41569c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4156a0:	ea46 0101 	orr.w	r1, r6, r1
  4156a4:	ea40 0002 	orr.w	r0, r0, r2
  4156a8:	ea81 0103 	eor.w	r1, r1, r3
  4156ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4156b0:	bfc2      	ittt	gt
  4156b2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4156b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4156ba:	bd70      	popgt	{r4, r5, r6, pc}
  4156bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4156c0:	f04f 0e00 	mov.w	lr, #0
  4156c4:	3c01      	subs	r4, #1
  4156c6:	f300 80ab 	bgt.w	415820 <__aeabi_dmul+0x238>
  4156ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4156ce:	bfde      	ittt	le
  4156d0:	2000      	movle	r0, #0
  4156d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4156d6:	bd70      	pople	{r4, r5, r6, pc}
  4156d8:	f1c4 0400 	rsb	r4, r4, #0
  4156dc:	3c20      	subs	r4, #32
  4156de:	da35      	bge.n	41574c <__aeabi_dmul+0x164>
  4156e0:	340c      	adds	r4, #12
  4156e2:	dc1b      	bgt.n	41571c <__aeabi_dmul+0x134>
  4156e4:	f104 0414 	add.w	r4, r4, #20
  4156e8:	f1c4 0520 	rsb	r5, r4, #32
  4156ec:	fa00 f305 	lsl.w	r3, r0, r5
  4156f0:	fa20 f004 	lsr.w	r0, r0, r4
  4156f4:	fa01 f205 	lsl.w	r2, r1, r5
  4156f8:	ea40 0002 	orr.w	r0, r0, r2
  4156fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  415700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  415704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  415708:	fa21 f604 	lsr.w	r6, r1, r4
  41570c:	eb42 0106 	adc.w	r1, r2, r6
  415710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  415714:	bf08      	it	eq
  415716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41571a:	bd70      	pop	{r4, r5, r6, pc}
  41571c:	f1c4 040c 	rsb	r4, r4, #12
  415720:	f1c4 0520 	rsb	r5, r4, #32
  415724:	fa00 f304 	lsl.w	r3, r0, r4
  415728:	fa20 f005 	lsr.w	r0, r0, r5
  41572c:	fa01 f204 	lsl.w	r2, r1, r4
  415730:	ea40 0002 	orr.w	r0, r0, r2
  415734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  415738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  41573c:	f141 0100 	adc.w	r1, r1, #0
  415740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  415744:	bf08      	it	eq
  415746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41574a:	bd70      	pop	{r4, r5, r6, pc}
  41574c:	f1c4 0520 	rsb	r5, r4, #32
  415750:	fa00 f205 	lsl.w	r2, r0, r5
  415754:	ea4e 0e02 	orr.w	lr, lr, r2
  415758:	fa20 f304 	lsr.w	r3, r0, r4
  41575c:	fa01 f205 	lsl.w	r2, r1, r5
  415760:	ea43 0302 	orr.w	r3, r3, r2
  415764:	fa21 f004 	lsr.w	r0, r1, r4
  415768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41576c:	fa21 f204 	lsr.w	r2, r1, r4
  415770:	ea20 0002 	bic.w	r0, r0, r2
  415774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  415778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41577c:	bf08      	it	eq
  41577e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  415782:	bd70      	pop	{r4, r5, r6, pc}
  415784:	f094 0f00 	teq	r4, #0
  415788:	d10f      	bne.n	4157aa <__aeabi_dmul+0x1c2>
  41578a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  41578e:	0040      	lsls	r0, r0, #1
  415790:	eb41 0101 	adc.w	r1, r1, r1
  415794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  415798:	bf08      	it	eq
  41579a:	3c01      	subeq	r4, #1
  41579c:	d0f7      	beq.n	41578e <__aeabi_dmul+0x1a6>
  41579e:	ea41 0106 	orr.w	r1, r1, r6
  4157a2:	f095 0f00 	teq	r5, #0
  4157a6:	bf18      	it	ne
  4157a8:	4770      	bxne	lr
  4157aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4157ae:	0052      	lsls	r2, r2, #1
  4157b0:	eb43 0303 	adc.w	r3, r3, r3
  4157b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4157b8:	bf08      	it	eq
  4157ba:	3d01      	subeq	r5, #1
  4157bc:	d0f7      	beq.n	4157ae <__aeabi_dmul+0x1c6>
  4157be:	ea43 0306 	orr.w	r3, r3, r6
  4157c2:	4770      	bx	lr
  4157c4:	ea94 0f0c 	teq	r4, ip
  4157c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4157cc:	bf18      	it	ne
  4157ce:	ea95 0f0c 	teqne	r5, ip
  4157d2:	d00c      	beq.n	4157ee <__aeabi_dmul+0x206>
  4157d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4157d8:	bf18      	it	ne
  4157da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4157de:	d1d1      	bne.n	415784 <__aeabi_dmul+0x19c>
  4157e0:	ea81 0103 	eor.w	r1, r1, r3
  4157e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4157e8:	f04f 0000 	mov.w	r0, #0
  4157ec:	bd70      	pop	{r4, r5, r6, pc}
  4157ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4157f2:	bf06      	itte	eq
  4157f4:	4610      	moveq	r0, r2
  4157f6:	4619      	moveq	r1, r3
  4157f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4157fc:	d019      	beq.n	415832 <__aeabi_dmul+0x24a>
  4157fe:	ea94 0f0c 	teq	r4, ip
  415802:	d102      	bne.n	41580a <__aeabi_dmul+0x222>
  415804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  415808:	d113      	bne.n	415832 <__aeabi_dmul+0x24a>
  41580a:	ea95 0f0c 	teq	r5, ip
  41580e:	d105      	bne.n	41581c <__aeabi_dmul+0x234>
  415810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  415814:	bf1c      	itt	ne
  415816:	4610      	movne	r0, r2
  415818:	4619      	movne	r1, r3
  41581a:	d10a      	bne.n	415832 <__aeabi_dmul+0x24a>
  41581c:	ea81 0103 	eor.w	r1, r1, r3
  415820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  415824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  415828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  41582c:	f04f 0000 	mov.w	r0, #0
  415830:	bd70      	pop	{r4, r5, r6, pc}
  415832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  415836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  41583a:	bd70      	pop	{r4, r5, r6, pc}

0041583c <__aeabi_ddiv>:
  41583c:	b570      	push	{r4, r5, r6, lr}
  41583e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  415842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  415846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  41584a:	bf1d      	ittte	ne
  41584c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  415850:	ea94 0f0c 	teqne	r4, ip
  415854:	ea95 0f0c 	teqne	r5, ip
  415858:	f000 f8a7 	bleq	4159aa <__aeabi_ddiv+0x16e>
  41585c:	eba4 0405 	sub.w	r4, r4, r5
  415860:	ea81 0e03 	eor.w	lr, r1, r3
  415864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  415868:	ea4f 3101 	mov.w	r1, r1, lsl #12
  41586c:	f000 8088 	beq.w	415980 <__aeabi_ddiv+0x144>
  415870:	ea4f 3303 	mov.w	r3, r3, lsl #12
  415874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  415878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  41587c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  415880:	ea4f 2202 	mov.w	r2, r2, lsl #8
  415884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  415888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  41588c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  415890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  415894:	429d      	cmp	r5, r3
  415896:	bf08      	it	eq
  415898:	4296      	cmpeq	r6, r2
  41589a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  41589e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4158a2:	d202      	bcs.n	4158aa <__aeabi_ddiv+0x6e>
  4158a4:	085b      	lsrs	r3, r3, #1
  4158a6:	ea4f 0232 	mov.w	r2, r2, rrx
  4158aa:	1ab6      	subs	r6, r6, r2
  4158ac:	eb65 0503 	sbc.w	r5, r5, r3
  4158b0:	085b      	lsrs	r3, r3, #1
  4158b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4158b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4158ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4158be:	ebb6 0e02 	subs.w	lr, r6, r2
  4158c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4158c6:	bf22      	ittt	cs
  4158c8:	1ab6      	subcs	r6, r6, r2
  4158ca:	4675      	movcs	r5, lr
  4158cc:	ea40 000c 	orrcs.w	r0, r0, ip
  4158d0:	085b      	lsrs	r3, r3, #1
  4158d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4158d6:	ebb6 0e02 	subs.w	lr, r6, r2
  4158da:	eb75 0e03 	sbcs.w	lr, r5, r3
  4158de:	bf22      	ittt	cs
  4158e0:	1ab6      	subcs	r6, r6, r2
  4158e2:	4675      	movcs	r5, lr
  4158e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4158e8:	085b      	lsrs	r3, r3, #1
  4158ea:	ea4f 0232 	mov.w	r2, r2, rrx
  4158ee:	ebb6 0e02 	subs.w	lr, r6, r2
  4158f2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4158f6:	bf22      	ittt	cs
  4158f8:	1ab6      	subcs	r6, r6, r2
  4158fa:	4675      	movcs	r5, lr
  4158fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  415900:	085b      	lsrs	r3, r3, #1
  415902:	ea4f 0232 	mov.w	r2, r2, rrx
  415906:	ebb6 0e02 	subs.w	lr, r6, r2
  41590a:	eb75 0e03 	sbcs.w	lr, r5, r3
  41590e:	bf22      	ittt	cs
  415910:	1ab6      	subcs	r6, r6, r2
  415912:	4675      	movcs	r5, lr
  415914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  415918:	ea55 0e06 	orrs.w	lr, r5, r6
  41591c:	d018      	beq.n	415950 <__aeabi_ddiv+0x114>
  41591e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  415922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  415926:	ea4f 1606 	mov.w	r6, r6, lsl #4
  41592a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  41592e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  415932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  415936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  41593a:	d1c0      	bne.n	4158be <__aeabi_ddiv+0x82>
  41593c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  415940:	d10b      	bne.n	41595a <__aeabi_ddiv+0x11e>
  415942:	ea41 0100 	orr.w	r1, r1, r0
  415946:	f04f 0000 	mov.w	r0, #0
  41594a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  41594e:	e7b6      	b.n	4158be <__aeabi_ddiv+0x82>
  415950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  415954:	bf04      	itt	eq
  415956:	4301      	orreq	r1, r0
  415958:	2000      	moveq	r0, #0
  41595a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  41595e:	bf88      	it	hi
  415960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  415964:	f63f aeaf 	bhi.w	4156c6 <__aeabi_dmul+0xde>
  415968:	ebb5 0c03 	subs.w	ip, r5, r3
  41596c:	bf04      	itt	eq
  41596e:	ebb6 0c02 	subseq.w	ip, r6, r2
  415972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  415976:	f150 0000 	adcs.w	r0, r0, #0
  41597a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41597e:	bd70      	pop	{r4, r5, r6, pc}
  415980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  415984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  415988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  41598c:	bfc2      	ittt	gt
  41598e:	ebd4 050c 	rsbsgt	r5, r4, ip
  415992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  415996:	bd70      	popgt	{r4, r5, r6, pc}
  415998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41599c:	f04f 0e00 	mov.w	lr, #0
  4159a0:	3c01      	subs	r4, #1
  4159a2:	e690      	b.n	4156c6 <__aeabi_dmul+0xde>
  4159a4:	ea45 0e06 	orr.w	lr, r5, r6
  4159a8:	e68d      	b.n	4156c6 <__aeabi_dmul+0xde>
  4159aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4159ae:	ea94 0f0c 	teq	r4, ip
  4159b2:	bf08      	it	eq
  4159b4:	ea95 0f0c 	teqeq	r5, ip
  4159b8:	f43f af3b 	beq.w	415832 <__aeabi_dmul+0x24a>
  4159bc:	ea94 0f0c 	teq	r4, ip
  4159c0:	d10a      	bne.n	4159d8 <__aeabi_ddiv+0x19c>
  4159c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4159c6:	f47f af34 	bne.w	415832 <__aeabi_dmul+0x24a>
  4159ca:	ea95 0f0c 	teq	r5, ip
  4159ce:	f47f af25 	bne.w	41581c <__aeabi_dmul+0x234>
  4159d2:	4610      	mov	r0, r2
  4159d4:	4619      	mov	r1, r3
  4159d6:	e72c      	b.n	415832 <__aeabi_dmul+0x24a>
  4159d8:	ea95 0f0c 	teq	r5, ip
  4159dc:	d106      	bne.n	4159ec <__aeabi_ddiv+0x1b0>
  4159de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4159e2:	f43f aefd 	beq.w	4157e0 <__aeabi_dmul+0x1f8>
  4159e6:	4610      	mov	r0, r2
  4159e8:	4619      	mov	r1, r3
  4159ea:	e722      	b.n	415832 <__aeabi_dmul+0x24a>
  4159ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4159f0:	bf18      	it	ne
  4159f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4159f6:	f47f aec5 	bne.w	415784 <__aeabi_dmul+0x19c>
  4159fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4159fe:	f47f af0d 	bne.w	41581c <__aeabi_dmul+0x234>
  415a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  415a06:	f47f aeeb 	bne.w	4157e0 <__aeabi_dmul+0x1f8>
  415a0a:	e712      	b.n	415832 <__aeabi_dmul+0x24a>

00415a0c <__gedf2>:
  415a0c:	f04f 3cff 	mov.w	ip, #4294967295
  415a10:	e006      	b.n	415a20 <__cmpdf2+0x4>
  415a12:	bf00      	nop

00415a14 <__ledf2>:
  415a14:	f04f 0c01 	mov.w	ip, #1
  415a18:	e002      	b.n	415a20 <__cmpdf2+0x4>
  415a1a:	bf00      	nop

00415a1c <__cmpdf2>:
  415a1c:	f04f 0c01 	mov.w	ip, #1
  415a20:	f84d cd04 	str.w	ip, [sp, #-4]!
  415a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  415a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  415a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  415a30:	bf18      	it	ne
  415a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  415a36:	d01b      	beq.n	415a70 <__cmpdf2+0x54>
  415a38:	b001      	add	sp, #4
  415a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  415a3e:	bf0c      	ite	eq
  415a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  415a44:	ea91 0f03 	teqne	r1, r3
  415a48:	bf02      	ittt	eq
  415a4a:	ea90 0f02 	teqeq	r0, r2
  415a4e:	2000      	moveq	r0, #0
  415a50:	4770      	bxeq	lr
  415a52:	f110 0f00 	cmn.w	r0, #0
  415a56:	ea91 0f03 	teq	r1, r3
  415a5a:	bf58      	it	pl
  415a5c:	4299      	cmppl	r1, r3
  415a5e:	bf08      	it	eq
  415a60:	4290      	cmpeq	r0, r2
  415a62:	bf2c      	ite	cs
  415a64:	17d8      	asrcs	r0, r3, #31
  415a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  415a6a:	f040 0001 	orr.w	r0, r0, #1
  415a6e:	4770      	bx	lr
  415a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  415a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  415a78:	d102      	bne.n	415a80 <__cmpdf2+0x64>
  415a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  415a7e:	d107      	bne.n	415a90 <__cmpdf2+0x74>
  415a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  415a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  415a88:	d1d6      	bne.n	415a38 <__cmpdf2+0x1c>
  415a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  415a8e:	d0d3      	beq.n	415a38 <__cmpdf2+0x1c>
  415a90:	f85d 0b04 	ldr.w	r0, [sp], #4
  415a94:	4770      	bx	lr
  415a96:	bf00      	nop

00415a98 <__aeabi_cdrcmple>:
  415a98:	4684      	mov	ip, r0
  415a9a:	4610      	mov	r0, r2
  415a9c:	4662      	mov	r2, ip
  415a9e:	468c      	mov	ip, r1
  415aa0:	4619      	mov	r1, r3
  415aa2:	4663      	mov	r3, ip
  415aa4:	e000      	b.n	415aa8 <__aeabi_cdcmpeq>
  415aa6:	bf00      	nop

00415aa8 <__aeabi_cdcmpeq>:
  415aa8:	b501      	push	{r0, lr}
  415aaa:	f7ff ffb7 	bl	415a1c <__cmpdf2>
  415aae:	2800      	cmp	r0, #0
  415ab0:	bf48      	it	mi
  415ab2:	f110 0f00 	cmnmi.w	r0, #0
  415ab6:	bd01      	pop	{r0, pc}

00415ab8 <__aeabi_dcmpeq>:
  415ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
  415abc:	f7ff fff4 	bl	415aa8 <__aeabi_cdcmpeq>
  415ac0:	bf0c      	ite	eq
  415ac2:	2001      	moveq	r0, #1
  415ac4:	2000      	movne	r0, #0
  415ac6:	f85d fb08 	ldr.w	pc, [sp], #8
  415aca:	bf00      	nop

00415acc <__aeabi_dcmplt>:
  415acc:	f84d ed08 	str.w	lr, [sp, #-8]!
  415ad0:	f7ff ffea 	bl	415aa8 <__aeabi_cdcmpeq>
  415ad4:	bf34      	ite	cc
  415ad6:	2001      	movcc	r0, #1
  415ad8:	2000      	movcs	r0, #0
  415ada:	f85d fb08 	ldr.w	pc, [sp], #8
  415ade:	bf00      	nop

00415ae0 <__aeabi_dcmple>:
  415ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
  415ae4:	f7ff ffe0 	bl	415aa8 <__aeabi_cdcmpeq>
  415ae8:	bf94      	ite	ls
  415aea:	2001      	movls	r0, #1
  415aec:	2000      	movhi	r0, #0
  415aee:	f85d fb08 	ldr.w	pc, [sp], #8
  415af2:	bf00      	nop

00415af4 <__aeabi_dcmpge>:
  415af4:	f84d ed08 	str.w	lr, [sp, #-8]!
  415af8:	f7ff ffce 	bl	415a98 <__aeabi_cdrcmple>
  415afc:	bf94      	ite	ls
  415afe:	2001      	movls	r0, #1
  415b00:	2000      	movhi	r0, #0
  415b02:	f85d fb08 	ldr.w	pc, [sp], #8
  415b06:	bf00      	nop

00415b08 <__aeabi_dcmpgt>:
  415b08:	f84d ed08 	str.w	lr, [sp, #-8]!
  415b0c:	f7ff ffc4 	bl	415a98 <__aeabi_cdrcmple>
  415b10:	bf34      	ite	cc
  415b12:	2001      	movcc	r0, #1
  415b14:	2000      	movcs	r0, #0
  415b16:	f85d fb08 	ldr.w	pc, [sp], #8
  415b1a:	bf00      	nop

00415b1c <__aeabi_d2iz>:
  415b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  415b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  415b24:	d215      	bcs.n	415b52 <__aeabi_d2iz+0x36>
  415b26:	d511      	bpl.n	415b4c <__aeabi_d2iz+0x30>
  415b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  415b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  415b30:	d912      	bls.n	415b58 <__aeabi_d2iz+0x3c>
  415b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  415b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  415b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  415b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  415b42:	fa23 f002 	lsr.w	r0, r3, r2
  415b46:	bf18      	it	ne
  415b48:	4240      	negne	r0, r0
  415b4a:	4770      	bx	lr
  415b4c:	f04f 0000 	mov.w	r0, #0
  415b50:	4770      	bx	lr
  415b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  415b56:	d105      	bne.n	415b64 <__aeabi_d2iz+0x48>
  415b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  415b5c:	bf08      	it	eq
  415b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  415b62:	4770      	bx	lr
  415b64:	f04f 0000 	mov.w	r0, #0
  415b68:	4770      	bx	lr
  415b6a:	bf00      	nop

00415b6c <__aeabi_d2uiz>:
  415b6c:	004a      	lsls	r2, r1, #1
  415b6e:	d211      	bcs.n	415b94 <__aeabi_d2uiz+0x28>
  415b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  415b74:	d211      	bcs.n	415b9a <__aeabi_d2uiz+0x2e>
  415b76:	d50d      	bpl.n	415b94 <__aeabi_d2uiz+0x28>
  415b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  415b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  415b80:	d40e      	bmi.n	415ba0 <__aeabi_d2uiz+0x34>
  415b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  415b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  415b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  415b8e:	fa23 f002 	lsr.w	r0, r3, r2
  415b92:	4770      	bx	lr
  415b94:	f04f 0000 	mov.w	r0, #0
  415b98:	4770      	bx	lr
  415b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  415b9e:	d102      	bne.n	415ba6 <__aeabi_d2uiz+0x3a>
  415ba0:	f04f 30ff 	mov.w	r0, #4294967295
  415ba4:	4770      	bx	lr
  415ba6:	f04f 0000 	mov.w	r0, #0
  415baa:	4770      	bx	lr

00415bac <__aeabi_d2f>:
  415bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
  415bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  415bb4:	bf24      	itt	cs
  415bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  415bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  415bbe:	d90d      	bls.n	415bdc <__aeabi_d2f+0x30>
  415bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  415bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  415bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  415bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  415bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  415bd4:	bf08      	it	eq
  415bd6:	f020 0001 	biceq.w	r0, r0, #1
  415bda:	4770      	bx	lr
  415bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  415be0:	d121      	bne.n	415c26 <__aeabi_d2f+0x7a>
  415be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  415be6:	bfbc      	itt	lt
  415be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  415bec:	4770      	bxlt	lr
  415bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  415bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
  415bf6:	f1c2 0218 	rsb	r2, r2, #24
  415bfa:	f1c2 0c20 	rsb	ip, r2, #32
  415bfe:	fa10 f30c 	lsls.w	r3, r0, ip
  415c02:	fa20 f002 	lsr.w	r0, r0, r2
  415c06:	bf18      	it	ne
  415c08:	f040 0001 	orrne.w	r0, r0, #1
  415c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  415c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  415c14:	fa03 fc0c 	lsl.w	ip, r3, ip
  415c18:	ea40 000c 	orr.w	r0, r0, ip
  415c1c:	fa23 f302 	lsr.w	r3, r3, r2
  415c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
  415c24:	e7cc      	b.n	415bc0 <__aeabi_d2f+0x14>
  415c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
  415c2a:	d107      	bne.n	415c3c <__aeabi_d2f+0x90>
  415c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  415c30:	bf1e      	ittt	ne
  415c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  415c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  415c3a:	4770      	bxne	lr
  415c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  415c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  415c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  415c48:	4770      	bx	lr
  415c4a:	bf00      	nop

00415c4c <all_twi_definitions>:
  415c4c:	8000 4001 8100 4001 0013 0000 0013 0000     ...@...@........
  415c5c:	c000 4001 c100 4001 0014 0000 0014 0000     ...@...@........
  415c6c:	c200 0001 0000 0000 0800 0000 0000 0000     ................
  415c7c:	7750 4272 6472 734d 3a67 7770 2072 7542     PwrBrdMsg:pwr Bu
  415c8c:	7474 6e6f 6820 6769 0d68 000a 7750 4272     tton high...PwrB
  415c9c:	6472 734d 3a67 7770 2072 7542 7474 6e6f     rdMsg:pwr Button
  415cac:	6c20 776f 0a0d 0000 7750 4272 6472 734d      low....PwrBrdMs
  415cbc:	3a67 6552 6563 7669 2065 6142 7474 7265     g:Receive Batter
  415ccc:	2079 7546 6c6c 6920 646e 6369 7461 6f69     y Full indicatio
  415cdc:	206e 7461 2520 2064 656c 6576 0d6c 000a     n at %d level...
  415cec:	7750 4272 6472 734d 3a67 6552 6563 7669     PwrBrdMsg:Receiv
  415cfc:	2065 6f4c 2077 6142 7474 7265 2079 6e69     e Low Battery in
  415d0c:	6964 6163 6974 6e6f 6120 2074 6425 6c20     dication at %d l
  415d1c:	7665 6c65 0a0d 0000 7750 4272 6472 734d     evel....PwrBrdMs
  415d2c:	3a67 6f4e 4220 7461 6574 7972 0a0d 0000     g:No Battery....
  415d3c:	7750 4272 6472 734d 3a67 6142 7474 7265     PwrBrdMsg:Batter
  415d4c:	2079 6146 6c75 0d74 000a 0000 7750 4272     y Fault.....PwrB
  415d5c:	6472 734d 3a67 6142 7474 7265 2079 654c     rdMsg:Battery Le
  415d6c:	6576 206c 6d45 7470 0d79 000a 6573 5474     vel Empty...setT
  415d7c:	6d69 0065 6270 6547 5474 6d69 0065 0000     ime.pbGetTime...
  415d8c:	6567 5274 7761 6843 7261 6567 0000 0000     getRawCharge....
  415d9c:	6172 2077 6863 7261 6567 4c20 7665 6c65     raw charge Level
  415dac:	203a 6425 0a0d 0000 6146 6c69 6465 7420     : %d....Failed t
  415dbc:	206f 6572 6461 6320 6168 6772 0d65 000a     o read charge...
  415dcc:	6567 4374 6168 6772 0065 0000 6863 7261     getCharge...char
  415ddc:	6567 4c20 7665 6c65 203a 6425 0a0d 0000     ge Level: %d....
  415dec:	6146 6c69 6465 7420 206f 6572 6461 6220     Failed to read b
  415dfc:	7461 6574 7972 7020 7265 6563 746e 6761     attery percentag
  415e0c:	0d65 000a 6573 4374 6168 6772 4c65 776f     e...setChargeLow
  415e1c:	0000 0000 6573 4374 6168 6772 4365 6972     ....setChargeCri
  415e2c:	6974 6163 006c 0000 6573 4374 6168 6772     tical...setCharg
  415e3c:	4665 7561 746c 0000 6573 4374 6168 6772     eFault..setCharg
  415e4c:	4665 6c75 006c 0000 6567 4374 7268 5367     eFull...getChrgS
  415e5c:	6174 7574 0073 0000 6863 7261 6567 2072     tatus...charger 
  415e6c:	7473 7461 7375 203a 7825 0a0d 0000 0000     status: %x......
  415e7c:	6572 6573 5074 0062 6166 7473 6843 6772     resetPb.fastChrg
  415e8c:	0031 0000 7750 4272 6472 734d 3a67 6146     1...PwrBrdMsg:Fa
  415e9c:	7473 4320 6168 6772 2065 6e4f 0a0d 0000     st Charge On....
  415eac:	6166 7473 6843 6772 0030 0000 7750 4272     fastChrg0...PwrB
  415ebc:	6472 734d 3a67 6146 7473 4320 6168 6772     rdMsg:Fast Charg
  415ecc:	2065 664f 0d66 000a 616a 6b63 4573 316e     e Off...jacksEn1
  415edc:	0000 0000 7750 4272 6472 734d 3a67 614a     ....PwrBrdMsg:Ja
  415eec:	6b63 2073 6e45 6261 656c 0d64 000a 0000     cks Enabled.....
  415efc:	616a 6b63 4573 306e 0000 0000 7750 4272     jacksEn0....PwrB
  415f0c:	6472 734d 3a67 614a 6b63 2073 6944 6173     rdMsg:Jacks Disa
  415f1c:	6c62 6465 0a0d 0000 7263 7361 5368 7379     bled....crashSys
  415f2c:	6574 006d 6e65 6574 4272 6f6f 6c74 616f     tem.enterBootloa
  415f3c:	6564 0072 6270 6556 7372 6f69 006e 0000     der.pbVersion...
  415f4c:	5020 2042 4556 5352 4f49 204e 7325 0a0d      PB VERSION %s..
  415f5c:	0000 0000 3056 312e 0069 0000 5542 4c49     ....V0.1i...BUIL
  415f6c:	2044 4144 4554 203a 7325 2520 0d73 000a     D DATE: %s %s...
  415f7c:	7541 2067 3332 3220 3130 0036 3231 323a     Aug 23 2016.12:2
  415f8c:	3a34 3631 0000 0000 3025 6432 253a 3230     4:16....%02d:%02
  415f9c:	3a64 3025 6432 0a0d 0000 0000 7750 4272     d:%02d......PwrB
  415fac:	6472 734d 3a67 7325 0000 0000 6573 5474     rdMsg:%s....setT
  415fbc:	6d69 2565 3430 2d64 3025 6432 252d 3230     ime%04d-%02d-%02
  415fcc:	2d64 3025 6432 252d 3230 3a64 3025 6432     d-%02d-%02d:%02d
  415fdc:	253a 3230 0d64 000a 6425 252d 2d64 6425     :%02d...%d-%d-%d
  415fec:	252d 2d64 6425 253a 3a64 6425 0a0d 0000     -%d-%d:%d:%d....
  415ffc:	7473 7261 4174 7070 696c 6163 6974 6e6f     startApplication
  41600c:	0d21 000a 6f50 6577 4272 746e 7420 6d69     !...PowerBnt tim
  41601c:	7265 0000 4843 4752 0000 0000 6146 6c69     er..CHRG....Fail
  41602c:	6465 7420 206f 7263 6165 6574 4320 5248     ed to create CHR
  41603c:	2047 6174 6b73 6320 646f 2065 6425 0a0d     G task code %d..
  41604c:	0000 0000 4d43 0044 6146 6c69 6465 7420     ....CMD.Failed t
  41605c:	206f 7263 6165 6574 4320 444d 7420 7361     o create CMD tas
  41606c:	206b 6f63 6564 2520 0d64 000a 4144 0054     k code %d...DAT.
  41607c:	7750 4272 6472 734d 3a67 6552 6563 7669     PwrBrdMsg:Receiv
  41608c:	6465 5020 7277 7753 7469 6863 4520 6576     ed PwrSwitch Eve
  41609c:	746e 0a0d 0000 0000 7750 4272 6472 734d     nt......PwrBrdMs
  4160ac:	3a67 5355 2042 6f43 6e6e 6365 6574 0d64     g:USB Connected.
  4160bc:	000a 0000 7750 4272 6472 734d 3a67 5355     ....PwrBrdMsg:US
  4160cc:	2042 6944 6373 6e6f 656e 7463 6465 0a0d     B Disconnected..
  4160dc:	0000 0000 6f50 6577 0d72 000a 6146 6c69     ....Power...Fail
  4160ec:	6465 7420 206f 6e69 7469 6169 696c 657a     ed to initialize
  4160fc:	6120 2073 616d 7473 7265 0d2e 000a 0000      as master......
  41610c:	654c 2064 6954 656d 0072 0000 4449 454c     Led Timer...IDLE
  41611c:	0000 0000 0a0d 0000 7325 0909 6325 2509     ........%s..%c.%
  41612c:	0975 7525 2509 0d75 000a 0000 6d54 2072     u.%u.%u.....Tmr 
  41613c:	7653 0063 474d 0052 6146 6c69 6465 7420     Svc.MGR.Failed t
  41614c:	206f 7263 6165 6574 4d20 5247 7420 7361     o create MGR tas
  41615c:	206b 6f63 6564 2520 0d64 000a 0043 0000     k code %d...C...

0041616c <_global_impure_ptr>:
  41616c:	0370 2000 000a 0000                         p.. ....

00416174 <zeroes.6763>:
  416174:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  416184:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  416194:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  4161a4:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  4161b4:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  4161c4:	0030 0000                                   0...

004161c8 <blanks.6762>:
  4161c8:	2020 2020 2020 2020 2020 2020 2020 2020                     

004161d8 <basefix.6714>:
  4161d8:	000a 0001 0002 0003 0004 0005 0006 0007     ................
  4161e8:	0008 0009 000a 000b 000c 000d 000e 000f     ................
  4161f8:	0010 0000 2565 646c 0000 0000               ....e%ld....

00416204 <zeroes.6721>:
  416204:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00416214 <blanks.6720>:
  416214:	2020 2020 2020 2020 2020 2020 2020 2020                     

00416224 <_ctype_>:
  416224:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  416234:	2020 2020 2020 2020 2020 2020 2020 2020                     
  416244:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  416254:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  416264:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  416274:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  416284:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  416294:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4162a4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  416328:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  416338:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

00416348 <__mprec_tens>:
  416348:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  416358:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  416368:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  416378:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  416388:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  416398:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  4163a8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  4163b8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4163c8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  4163d8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  4163e8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  4163f8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  416408:	9db4 79d9 7843 44ea                         ...yCx.D

00416410 <__mprec_bigtens>:
  416410:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  416420:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  416430:	bf3c 7f73 4fdd 7515                         <.s..O.u

00416438 <p05.5269>:
  416438:	0005 0000 0019 0000 007d 0000               ........}...

00416444 <fpi.5238>:
  416444:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
  416454:	0000 0000 666e 0000 6e69 7469 0079 0000     ....nf..inity...
  416464:	6e61 0000                                   an..

00416468 <fpinan.5274>:
  416468:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

00416480 <tinytens>:
  416480:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
  416490:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
  4164a0:	6f43 64ac 0628 1168                         Co.d(.h.

004164a8 <__hexdig>:
	...
  4164d8:	1110 1312 1514 1716 1918 0000 0000 0000     ................
  4164e8:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  416508:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...

004165a8 <_init>:
  4165a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4165aa:	bf00      	nop
  4165ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4165ae:	bc08      	pop	{r3}
  4165b0:	469e      	mov	lr, r3
  4165b2:	4770      	bx	lr

004165b4 <__init_array_start>:
  4165b4:	004101ed 	.word	0x004101ed

004165b8 <__frame_dummy_init_array_entry>:
  4165b8:	004000f1                                ..@.

004165bc <_fini>:
  4165bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4165be:	bf00      	nop
  4165c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4165c2:	bc08      	pop	{r3}
  4165c4:	469e      	mov	lr, r3
  4165c6:	4770      	bx	lr

004165c8 <__fini_array_start>:
  4165c8:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:

// Delay loop is put to SRAM so that FWS will not affect delay time
OPTIMIZE_HIGH
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
20000000:	b480      	push	{r7}
20000002:	b083      	sub	sp, #12
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]

20000008 <loop>:
	UNUSED(n);

	__asm (
20000008:	f3bf 8f5f 	dmb	sy
2000000c:	3801      	subs	r0, #1
2000000e:	d1fb      	bne.n	20000008 <loop>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000010:	370c      	adds	r7, #12
20000012:	46bd      	mov	sp, r7
20000014:	f85d 7b04 	ldr.w	r7, [sp], #4
20000018:	4770      	bx	lr
2000001a:	bf00      	nop

2000001c <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
2000001c:	b480      	push	{r7}
2000001e:	b089      	sub	sp, #36	; 0x24
20000020:	af00      	add	r7, sp, #0
20000022:	60f8      	str	r0, [r7, #12]
20000024:	60b9      	str	r1, [r7, #8]
20000026:	607a      	str	r2, [r7, #4]
20000028:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000002a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000002e:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000030:	683b      	ldr	r3, [r7, #0]
20000032:	2b00      	cmp	r3, #0
20000034:	d101      	bne.n	2000003a <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
20000036:	2302      	movs	r3, #2
20000038:	e03c      	b.n	200000b4 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000003a:	68fb      	ldr	r3, [r7, #12]
2000003c:	681b      	ldr	r3, [r3, #0]
2000003e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000042:	68fb      	ldr	r3, [r7, #12]
20000044:	601a      	str	r2, [r3, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000046:	68bb      	ldr	r3, [r7, #8]
20000048:	b2db      	uxtb	r3, r3
2000004a:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000

	p_efc->EEFC_FMR |= (0x1u << 16);

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
2000004e:	68fb      	ldr	r3, [r7, #12]
20000050:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000052:	68fb      	ldr	r3, [r7, #12]
20000054:	689b      	ldr	r3, [r3, #8]
20000056:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000058:	697b      	ldr	r3, [r7, #20]
2000005a:	f003 0301 	and.w	r3, r3, #1
2000005e:	2b00      	cmp	r3, #0
20000060:	d1f7      	bne.n	20000052 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000062:	2300      	movs	r3, #0
20000064:	61fb      	str	r3, [r7, #28]
20000066:	e00c      	b.n	20000082 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000068:	69fb      	ldr	r3, [r7, #28]
2000006a:	009b      	lsls	r3, r3, #2
2000006c:	683a      	ldr	r2, [r7, #0]
2000006e:	4413      	add	r3, r2
20000070:	69fa      	ldr	r2, [r7, #28]
20000072:	0092      	lsls	r2, r2, #2
20000074:	69b9      	ldr	r1, [r7, #24]
20000076:	440a      	add	r2, r1
20000078:	6812      	ldr	r2, [r2, #0]
2000007a:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000007c:	69fb      	ldr	r3, [r7, #28]
2000007e:	3301      	adds	r3, #1
20000080:	61fb      	str	r3, [r7, #28]
20000082:	69fa      	ldr	r2, [r7, #28]
20000084:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000086:	429a      	cmp	r2, r3
20000088:	d3ee      	bcc.n	20000068 <efc_perform_read_sequence+0x4c>

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000008a:	687b      	ldr	r3, [r7, #4]
2000008c:	b2db      	uxtb	r3, r3
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000008e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000096:	68fb      	ldr	r3, [r7, #12]
20000098:	689b      	ldr	r3, [r3, #8]
2000009a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000009c:	697b      	ldr	r3, [r7, #20]
2000009e:	f003 0301 	and.w	r3, r3, #1
200000a2:	2b00      	cmp	r3, #0
200000a4:	d0f7      	beq.n	20000096 <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
200000a6:	68fb      	ldr	r3, [r7, #12]
200000a8:	681b      	ldr	r3, [r3, #0]
200000aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200000ae:	68fb      	ldr	r3, [r7, #12]
200000b0:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200000b2:	2300      	movs	r3, #0
}
200000b4:	4618      	mov	r0, r3
200000b6:	3724      	adds	r7, #36	; 0x24
200000b8:	46bd      	mov	sp, r7
200000ba:	f85d 7b04 	ldr.w	r7, [sp], #4
200000be:	4770      	bx	lr

200000c0 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000c0:	b480      	push	{r7}
200000c2:	b083      	sub	sp, #12
200000c4:	af00      	add	r7, sp, #0
200000c6:	6078      	str	r0, [r7, #4]
200000c8:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	683a      	ldr	r2, [r7, #0]
200000ce:	601a      	str	r2, [r3, #0]
}
200000d0:	370c      	adds	r7, #12
200000d2:	46bd      	mov	sp, r7
200000d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200000d8:	4770      	bx	lr
200000da:	bf00      	nop

200000dc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000dc:	b480      	push	{r7}
200000de:	b085      	sub	sp, #20
200000e0:	af00      	add	r7, sp, #0
200000e2:	6078      	str	r0, [r7, #4]
200000e4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000e6:	687b      	ldr	r3, [r7, #4]
200000e8:	683a      	ldr	r2, [r7, #0]
200000ea:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000ec:	687b      	ldr	r3, [r7, #4]
200000ee:	689b      	ldr	r3, [r3, #8]
200000f0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000f2:	68fb      	ldr	r3, [r7, #12]
200000f4:	f003 0301 	and.w	r3, r3, #1
200000f8:	2b00      	cmp	r3, #0
200000fa:	d0f7      	beq.n	200000ec <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000fc:	68fb      	ldr	r3, [r7, #12]
200000fe:	f003 030e 	and.w	r3, r3, #14
}
20000102:	4618      	mov	r0, r3
20000104:	3714      	adds	r7, #20
20000106:	46bd      	mov	sp, r7
20000108:	f85d 7b04 	ldr.w	r7, [sp], #4
2000010c:	4770      	bx	lr
2000010e:	bf00      	nop

20000110 <udi_api_cdc_comm>:
20000110:	04f5 0040 06fd 0040 0751 0040 0825 0040     ..@...@.Q.@.%.@.
20000120:	0000 0000                                   ....

20000124 <udi_api_cdc_data>:
20000124:	0615 0040 071d 0040 0815 0040 0825 0040     ..@...@...@.%.@.
20000134:	0835 0040                                   5.@.

20000138 <udc_string_desc_languageid>:
20000138:	0304 0409                                   ....

2000013c <udc_string_manufacturer_name>:
2000013c:	6548 6464 6b6f 006f                         Heddoko.

20000144 <udc_string_product_name>:
20000144:	7242 6961 206e 6150 6b63 0000               Brain Pack..

20000150 <udc_string_desc>:
20000150:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000168 <uart0Config>:
20000168:	0600 400e c200 0001 00c0 0000 0800 0000     ...@............
	...

20000180 <uart1Config>:
20000180:	0800 400e c200 0001 00c0 0000 0800 0000     ...@............
20000190:	0000 0000 0001 0000                         ........

20000198 <ledConfiguration>:
20000198:	0c0e 000d                                   ....

2000019c <twiConfig>:
2000019c:	8000 4001 1b00 00b7 1a80 0006 0000 0000     ...@............
200001ac:	0013 0000 0000 0000 0013 0000 c000 4001     ...............@
200001bc:	1b00 00b7 1a80 0006 0000 0000 0014 0000     ................
200001cc:	0001 0000 0014 0000                         ........

200001d4 <ltc2941Config>:
200001d4:	0000 0000 0064 0000 019c 2000               ....d...... 

200001e0 <chrg_currentChargerState>:
200001e0:	0005 0000                                   ....

200001e4 <gpioConfig>:
200001e4:	0011 0000 0100 0004 0000 0000 0101 0100     ................
200001f4:	0012 0000 0100 0004 0000 0000 0101 0100     ................
20000204:	000b 0000 0001 0001 59a1 0040 0101 0000     .........Y@.....
20000214:	0001 0000 0001 0001 59f9 0040 0101 0000     .........Y@.....
20000224:	0013 0000 0000 0004 0000 0000 0100 0000     ................
20000234:	0010 0000 0000 0004 0000 0000 0100 0000     ................
20000244:	000f 0000 0001 0004 0000 0000 0101 0000     ................
20000254:	000e 0000 0001 0004 0000 0000 0101 0000     ................
20000264:	000d 0000 0001 0004 0000 0000 0101 0000     ................
20000274:	0006 0000 0001 0004 0000 0000 0101 0100     ................
20000284:	0005 0000 0101 0001 5949 0040 0101 0100     ........IY@.....
20000294:	0000 0000 0101 0000 5a51 0040 0100 0100     ........QZ@.....
200002a4:	0020 0000 0100 0004 0000 0000 0000 0100      ...............
200002b4:	0021 0000 0100 0004 0000 0000 0000 0100     !...............
200002c4:	0014 0000 0100 0004 0000 0000 0000 0100     ................

200002d4 <currentSystemState>:
200002d4:	0002 0000                                   ....

200002d8 <dataRouterConfiguration>:
200002d8:	0180 2000 0168 2000                         ... h.. 

200002e0 <chargeMonitorConfiguration>:
200002e0:	0708 0006                                   ....

200002e4 <udc_device_desc>:
200002e4:	0112 0200 0002 4000 03eb 2404 0100 0201     .......@...$....
200002f4:	0100 0000                                   ....

200002f8 <udc_desc_fs>:
200002f8:	0209 0043 0102 c000 09fa 0004 0100 0202     ..C.............
20000308:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
20000318:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
20000328:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
20000338:	0040 0000                                   @...

2000033c <udi_apis>:
2000033c:	0110 2000 0124 2000                         ... $.. 

20000344 <udc_config_fs>:
20000344:	02f8 2000 033c 2000                         ... <.. 

2000034c <udc_config>:
2000034c:	02e4 2000 0344 2000 0000 0000               ... D.. ....

20000358 <uxCriticalNesting>:
20000358:	aaaa aaaa                                   ....

2000035c <xFreeBytesRemaining>:
2000035c:	76f0 0000                                   .v..

20000360 <xNextTaskUnblockTime>:
20000360:	ffff ffff                                   ....

20000364 <g_interrupt_enabled>:
20000364:	0001 0000                                   ....

20000368 <ul_flash_in_wait_mode>:
20000368:	0000 0020                                   .. .

2000036c <SystemCoreClock>:
2000036c:	0900 003d                                   ..=.

20000370 <impure_data>:
20000370:	0000 0000 065c 2000 06c4 2000 072c 2000     ....\.. ... ,.. 
	...
200003a4:	6168 0041 0000 0000 0000 0000 0000 0000     haA.............
	...
20000418:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000428:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000798 <_impure_ptr>:
20000798:	0370 2000                                   p.. 

2000079c <__ctype_ptr__>:
2000079c:	6224 0041                                   $bA.

200007a0 <lconv>:
200007a0:	6340 0041 61a4 0041 61a4 0041 61a4 0041     @cA..aA..aA..aA.
200007b0:	61a4 0041 61a4 0041 61a4 0041 61a4 0041     .aA..aA..aA..aA.
200007c0:	61a4 0041 61a4 0041 ffff ffff ffff ffff     .aA..aA.........
200007d0:	ffff ffff ffff 0000                         ........

200007d8 <lc_ctype_charset>:
200007d8:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200007f8 <__mb_cur_max>:
200007f8:	0001 0000                                   ....

200007fc <__malloc_av_>:
	...
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 
20000904:	08fc 2000 08fc 2000 0904 2000 0904 2000     ... ... ... ... 
20000914:	090c 2000 090c 2000 0914 2000 0914 2000     ... ... ... ... 
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 
200009b4:	09ac 2000 09ac 2000 09b4 2000 09b4 2000     ... ... ... ... 
200009c4:	09bc 2000 09bc 2000 09c4 2000 09c4 2000     ... ... ... ... 
200009d4:	09cc 2000 09cc 2000 09d4 2000 09d4 2000     ... ... ... ... 
200009e4:	09dc 2000 09dc 2000 09e4 2000 09e4 2000     ... ... ... ... 
200009f4:	09ec 2000 09ec 2000 09f4 2000 09f4 2000     ... ... ... ... 
20000a04:	09fc 2000 09fc 2000 0a04 2000 0a04 2000     ... ... ... ... 
20000a14:	0a0c 2000 0a0c 2000 0a14 2000 0a14 2000     ... ... ... ... 
20000a24:	0a1c 2000 0a1c 2000 0a24 2000 0a24 2000     ... ... $.. $.. 
20000a34:	0a2c 2000 0a2c 2000 0a34 2000 0a34 2000     ,.. ,.. 4.. 4.. 
20000a44:	0a3c 2000 0a3c 2000 0a44 2000 0a44 2000     <.. <.. D.. D.. 
20000a54:	0a4c 2000 0a4c 2000 0a54 2000 0a54 2000     L.. L.. T.. T.. 
20000a64:	0a5c 2000 0a5c 2000 0a64 2000 0a64 2000     \.. \.. d.. d.. 
20000a74:	0a6c 2000 0a6c 2000 0a74 2000 0a74 2000     l.. l.. t.. t.. 
20000a84:	0a7c 2000 0a7c 2000 0a84 2000 0a84 2000     |.. |.. ... ... 
20000a94:	0a8c 2000 0a8c 2000 0a94 2000 0a94 2000     ... ... ... ... 
20000aa4:	0a9c 2000 0a9c 2000 0aa4 2000 0aa4 2000     ... ... ... ... 
20000ab4:	0aac 2000 0aac 2000 0ab4 2000 0ab4 2000     ... ... ... ... 
20000ac4:	0abc 2000 0abc 2000 0ac4 2000 0ac4 2000     ... ... ... ... 
20000ad4:	0acc 2000 0acc 2000 0ad4 2000 0ad4 2000     ... ... ... ... 
20000ae4:	0adc 2000 0adc 2000 0ae4 2000 0ae4 2000     ... ... ... ... 
20000af4:	0aec 2000 0aec 2000 0af4 2000 0af4 2000     ... ... ... ... 
20000b04:	0afc 2000 0afc 2000 0b04 2000 0b04 2000     ... ... ... ... 
20000b14:	0b0c 2000 0b0c 2000 0b14 2000 0b14 2000     ... ... ... ... 
20000b24:	0b1c 2000 0b1c 2000 0b24 2000 0b24 2000     ... ... $.. $.. 
20000b34:	0b2c 2000 0b2c 2000 0b34 2000 0b34 2000     ,.. ,.. 4.. 4.. 
20000b44:	0b3c 2000 0b3c 2000 0b44 2000 0b44 2000     <.. <.. D.. D.. 
20000b54:	0b4c 2000 0b4c 2000 0b54 2000 0b54 2000     L.. L.. T.. T.. 
20000b64:	0b5c 2000 0b5c 2000 0b64 2000 0b64 2000     \.. \.. d.. d.. 
20000b74:	0b6c 2000 0b6c 2000 0b74 2000 0b74 2000     l.. l.. t.. t.. 
20000b84:	0b7c 2000 0b7c 2000 0b84 2000 0b84 2000     |.. |.. ... ... 
20000b94:	0b8c 2000 0b8c 2000 0b94 2000 0b94 2000     ... ... ... ... 
20000ba4:	0b9c 2000 0b9c 2000 0ba4 2000 0ba4 2000     ... ... ... ... 
20000bb4:	0bac 2000 0bac 2000 0bb4 2000 0bb4 2000     ... ... ... ... 
20000bc4:	0bbc 2000 0bbc 2000 0bc4 2000 0bc4 2000     ... ... ... ... 
20000bd4:	0bcc 2000 0bcc 2000 0bd4 2000 0bd4 2000     ... ... ... ... 
20000be4:	0bdc 2000 0bdc 2000 0be4 2000 0be4 2000     ... ... ... ... 
20000bf4:	0bec 2000 0bec 2000 0bf4 2000 0bf4 2000     ... ... ... ... 

20000c04 <__malloc_trim_threshold>:
20000c04:	0000 0002                                   ....

20000c08 <__malloc_sbrk_base>:
20000c08:	ffff ffff                                   ....

20000c0c <__mbtowc>:
20000c0c:	218d 0041                                   .!A.

20000c10 <__wctomb>:
20000c10:	4915 0041                                   .IA.
