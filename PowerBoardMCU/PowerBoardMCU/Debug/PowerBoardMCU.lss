
PowerBoardMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013adc  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00413adc  00413adc  0001badc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000abc  20000000  00413ae4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00015588  20000ac0  004145a8  00020ac0  2**3
                  ALLOC
  4 .stack        00003000  20016048  00429b30  00020ac0  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020abc  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00020ae6  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001cbe6  00000000  00000000  00020b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004b3d  00000000  00000000  0003d727  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000899a  00000000  00000000  00042264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001830  00000000  00000000  0004abfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000015c8  00000000  00000000  0004c42e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000ede2  00000000  00000000  0004d9f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000217d5  00000000  00000000  0005c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00060eb1  00000000  00000000  0007dfad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006130  00000000  00000000  000dee60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20019048 	.word	0x20019048
  400004:	00409825 	.word	0x00409825
  400008:	004098ed 	.word	0x004098ed
  40000c:	00409cd1 	.word	0x00409cd1
  400010:	00409cd9 	.word	0x00409cd9
  400014:	00409ce1 	.word	0x00409ce1
  400018:	00409ce9 	.word	0x00409ce9
	...
  40002c:	0040629d 	.word	0x0040629d
  400030:	004098ed 	.word	0x004098ed
  400034:	00000000 	.word	0x00000000
  400038:	00406389 	.word	0x00406389
  40003c:	004063c5 	.word	0x004063c5
  400040:	004098ed 	.word	0x004098ed
  400044:	004098ed 	.word	0x004098ed
  400048:	004098ed 	.word	0x004098ed
  40004c:	004098ed 	.word	0x004098ed
  400050:	004098ed 	.word	0x004098ed
  400054:	004098ed 	.word	0x004098ed
  400058:	004098ed 	.word	0x004098ed
  40005c:	004098ed 	.word	0x004098ed
  400060:	00405cb9 	.word	0x00405cb9
  400064:	00405d1d 	.word	0x00405d1d
  400068:	00000000 	.word	0x00000000
  40006c:	004093c1 	.word	0x004093c1
  400070:	004093d9 	.word	0x004093d9
  400074:	004093f1 	.word	0x004093f1
  400078:	00405d85 	.word	0x00405d85
  40007c:	00405ded 	.word	0x00405ded
	...
  400088:	004098ed 	.word	0x004098ed
  40008c:	0040044d 	.word	0x0040044d
  400090:	0040045d 	.word	0x0040045d
  400094:	004098ed 	.word	0x004098ed
  400098:	004098ed 	.word	0x004098ed
  40009c:	004098ed 	.word	0x004098ed
  4000a0:	004098ed 	.word	0x004098ed
  4000a4:	004098ed 	.word	0x004098ed
  4000a8:	004098ed 	.word	0x004098ed
  4000ac:	004098ed 	.word	0x004098ed
  4000b0:	004098ed 	.word	0x004098ed
  4000b4:	004098ed 	.word	0x004098ed
  4000b8:	004098ed 	.word	0x004098ed
  4000bc:	004098ed 	.word	0x004098ed
  4000c0:	004098ed 	.word	0x004098ed
  4000c4:	004098ed 	.word	0x004098ed
  4000c8:	00401d7d 	.word	0x00401d7d

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000ac0 	.word	0x20000ac0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00413ae4 	.word	0x00413ae4

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	00413ae4 	.word	0x00413ae4
  400114:	20000ac4 	.word	0x20000ac4
  400118:	00413ae4 	.word	0x00413ae4
  40011c:	00000000 	.word	0x00000000

00400120 <local_twi_handler>:
/*
 * For internal use only.
 * A common TWI interrupt handler that is called for all TWI peripherals.
 */
static void local_twi_handler(const portBASE_TYPE twi_index)
{
  400120:	b590      	push	{r4, r7, lr}
  400122:	b08b      	sub	sp, #44	; 0x2c
  400124:	af00      	add	r7, sp, #0
  400126:	6078      	str	r0, [r7, #4]
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
  400128:	2300      	movs	r3, #0
  40012a:	60bb      	str	r3, [r7, #8]
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;
  40012c:	2300      	movs	r3, #0
  40012e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	twi_port = all_twi_definitions[twi_index].peripheral_base_address;
  400132:	4a81      	ldr	r2, [pc, #516]	; (400338 <local_twi_handler+0x218>)
  400134:	687b      	ldr	r3, [r7, #4]
  400136:	011b      	lsls	r3, r3, #4
  400138:	4413      	add	r3, r2
  40013a:	681b      	ldr	r3, [r3, #0]
  40013c:	61bb      	str	r3, [r7, #24]

	twi_status = twi_get_interrupt_status(twi_port);
  40013e:	69b8      	ldr	r0, [r7, #24]
  400140:	4b7e      	ldr	r3, [pc, #504]	; (40033c <local_twi_handler+0x21c>)
  400142:	4798      	blx	r3
  400144:	6178      	str	r0, [r7, #20]
	twi_status &= twi_get_interrupt_mask(twi_port);
  400146:	69b8      	ldr	r0, [r7, #24]
  400148:	4b7d      	ldr	r3, [pc, #500]	; (400340 <local_twi_handler+0x220>)
  40014a:	4798      	blx	r3
  40014c:	4603      	mov	r3, r0
  40014e:	697a      	ldr	r2, [r7, #20]
  400150:	4013      	ands	r3, r2
  400152:	617b      	str	r3, [r7, #20]

	/* Has the PDC completed a transmission? */
	if ((twi_status & TWI_SR_ENDTX) != 0UL) {
  400154:	697b      	ldr	r3, [r7, #20]
  400156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40015a:	2b00      	cmp	r3, #0
  40015c:	d076      	beq.n	40024c <local_twi_handler+0x12c>
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS);
  40015e:	4a76      	ldr	r2, [pc, #472]	; (400338 <local_twi_handler+0x218>)
  400160:	687b      	ldr	r3, [r7, #4]
  400162:	011b      	lsls	r3, r3, #4
  400164:	4413      	add	r3, r2
  400166:	685b      	ldr	r3, [r3, #4]
  400168:	4618      	mov	r0, r3
  40016a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40016e:	4b75      	ldr	r3, [pc, #468]	; (400344 <local_twi_handler+0x224>)
  400170:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  400172:	69b8      	ldr	r0, [r7, #24]
  400174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400178:	4b73      	ldr	r3, [pc, #460]	; (400348 <local_twi_handler+0x228>)
  40017a:	4798      	blx	r3

		uint8_t status;
		uint32_t timeout_counter = 0;
  40017c:	2300      	movs	r3, #0
  40017e:	623b      	str	r3, [r7, #32]

		/* Wait for TX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  400180:	69bb      	ldr	r3, [r7, #24]
  400182:	6a1b      	ldr	r3, [r3, #32]
  400184:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXRDY) {
  400186:	7cfb      	ldrb	r3, [r7, #19]
  400188:	f003 0304 	and.w	r3, r3, #4
  40018c:	2b00      	cmp	r3, #0
  40018e:	d000      	beq.n	400192 <local_twi_handler+0x72>
				break;
  400190:	e00b      	b.n	4001aa <local_twi_handler+0x8a>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  400192:	6a3b      	ldr	r3, [r7, #32]
  400194:	3301      	adds	r3, #1
  400196:	623b      	str	r3, [r7, #32]
  400198:	6a3b      	ldr	r3, [r7, #32]
  40019a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40019e:	d103      	bne.n	4001a8 <local_twi_handler+0x88>
				transfer_timeout = true;
  4001a0:	2301      	movs	r3, #1
  4001a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  4001a6:	e000      	b.n	4001aa <local_twi_handler+0x8a>
			}
		}
  4001a8:	e7ea      	b.n	400180 <local_twi_handler+0x60>
		/* Complete the transfer - stop and last byte */
		twi_port->TWI_CR = TWI_CR_STOP;
  4001aa:	69bb      	ldr	r3, [r7, #24]
  4001ac:	2202      	movs	r2, #2
  4001ae:	601a      	str	r2, [r3, #0]
		twi_port->TWI_THR = twis[twi_index].buffer[twis[twi_index].length-1];
  4001b0:	4b66      	ldr	r3, [pc, #408]	; (40034c <local_twi_handler+0x22c>)
  4001b2:	687a      	ldr	r2, [r7, #4]
  4001b4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4001b8:	4964      	ldr	r1, [pc, #400]	; (40034c <local_twi_handler+0x22c>)
  4001ba:	687b      	ldr	r3, [r7, #4]
  4001bc:	00db      	lsls	r3, r3, #3
  4001be:	440b      	add	r3, r1
  4001c0:	685b      	ldr	r3, [r3, #4]
  4001c2:	3b01      	subs	r3, #1
  4001c4:	4413      	add	r3, r2
  4001c6:	781b      	ldrb	r3, [r3, #0]
  4001c8:	461a      	mov	r2, r3
  4001ca:	69bb      	ldr	r3, [r7, #24]
  4001cc:	635a      	str	r2, [r3, #52]	; 0x34

		/* Wait for TX complete flag */
		while (1) {
			status = twi_port->TWI_SR;
  4001ce:	69bb      	ldr	r3, [r7, #24]
  4001d0:	6a1b      	ldr	r3, [r3, #32]
  4001d2:	74fb      	strb	r3, [r7, #19]
			if (status & TWI_SR_TXCOMP) {
  4001d4:	7cfb      	ldrb	r3, [r7, #19]
  4001d6:	f003 0301 	and.w	r3, r3, #1
  4001da:	2b00      	cmp	r3, #0
  4001dc:	d000      	beq.n	4001e0 <local_twi_handler+0xc0>
				break;
  4001de:	e00b      	b.n	4001f8 <local_twi_handler+0xd8>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4001e0:	6a3b      	ldr	r3, [r7, #32]
  4001e2:	3301      	adds	r3, #1
  4001e4:	623b      	str	r3, [r7, #32]
  4001e6:	6a3b      	ldr	r3, [r7, #32]
  4001e8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4001ec:	d103      	bne.n	4001f6 <local_twi_handler+0xd6>
				transfer_timeout = true;
  4001ee:	2301      	movs	r3, #1
  4001f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
  4001f4:	e000      	b.n	4001f8 <local_twi_handler+0xd8>
			}
		}
  4001f6:	e7ea      	b.n	4001ce <local_twi_handler+0xae>
		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  4001f8:	4a55      	ldr	r2, [pc, #340]	; (400350 <local_twi_handler+0x230>)
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	00db      	lsls	r3, r3, #3
  4001fe:	4413      	add	r3, r2
  400200:	685b      	ldr	r3, [r3, #4]
  400202:	2b00      	cmp	r3, #0
  400204:	d00c      	beq.n	400220 <local_twi_handler+0x100>
			xSemaphoreGiveFromISR(
  400206:	4a52      	ldr	r2, [pc, #328]	; (400350 <local_twi_handler+0x230>)
  400208:	687b      	ldr	r3, [r7, #4]
  40020a:	00db      	lsls	r3, r3, #3
  40020c:	4413      	add	r3, r2
  40020e:	685a      	ldr	r2, [r3, #4]
  400210:	f107 0308 	add.w	r3, r7, #8
  400214:	4610      	mov	r0, r2
  400216:	2100      	movs	r1, #0
  400218:	461a      	mov	r2, r3
  40021a:	2300      	movs	r3, #0
  40021c:	4c4d      	ldr	r4, [pc, #308]	; (400354 <local_twi_handler+0x234>)
  40021e:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  400220:	6a3b      	ldr	r3, [r7, #32]
  400222:	f1b3 3fff 	cmp.w	r3, #4294967295
  400226:	d011      	beq.n	40024c <local_twi_handler+0x12c>
			if (tx_dma_control[twi_index]. transaction_complete_notification_semaphore != NULL) {
  400228:	4b49      	ldr	r3, [pc, #292]	; (400350 <local_twi_handler+0x230>)
  40022a:	687a      	ldr	r2, [r7, #4]
  40022c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400230:	2b00      	cmp	r3, #0
  400232:	d00b      	beq.n	40024c <local_twi_handler+0x12c>
				xSemaphoreGiveFromISR(
  400234:	4b46      	ldr	r3, [pc, #280]	; (400350 <local_twi_handler+0x230>)
  400236:	687a      	ldr	r2, [r7, #4]
  400238:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  40023c:	f107 0308 	add.w	r3, r7, #8
  400240:	4610      	mov	r0, r2
  400242:	2100      	movs	r1, #0
  400244:	461a      	mov	r2, r3
  400246:	2300      	movs	r3, #0
  400248:	4c42      	ldr	r4, [pc, #264]	; (400354 <local_twi_handler+0x234>)
  40024a:	47a0      	blx	r4
			}
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
  40024c:	697b      	ldr	r3, [r7, #20]
  40024e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  400252:	2b00      	cmp	r3, #0
  400254:	f000 80aa 	beq.w	4003ac <local_twi_handler+0x28c>
		uint32_t timeout_counter = 0;
  400258:	2300      	movs	r3, #0
  40025a:	61fb      	str	r3, [r7, #28]
		uint32_t status;
		/* Must handle the two last bytes */
		/* Disable PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_RXTDIS);
  40025c:	4a36      	ldr	r2, [pc, #216]	; (400338 <local_twi_handler+0x218>)
  40025e:	687b      	ldr	r3, [r7, #4]
  400260:	011b      	lsls	r3, r3, #4
  400262:	4413      	add	r3, r2
  400264:	685b      	ldr	r3, [r3, #4]
  400266:	4618      	mov	r0, r3
  400268:	2102      	movs	r1, #2
  40026a:	4b36      	ldr	r3, [pc, #216]	; (400344 <local_twi_handler+0x224>)
  40026c:	4798      	blx	r3

		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  40026e:	69b8      	ldr	r0, [r7, #24]
  400270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400274:	4b34      	ldr	r3, [pc, #208]	; (400348 <local_twi_handler+0x228>)
  400276:	4798      	blx	r3

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  400278:	69bb      	ldr	r3, [r7, #24]
  40027a:	6a1b      	ldr	r3, [r3, #32]
  40027c:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  40027e:	68fb      	ldr	r3, [r7, #12]
  400280:	f003 0302 	and.w	r3, r3, #2
  400284:	2b00      	cmp	r3, #0
  400286:	d000      	beq.n	40028a <local_twi_handler+0x16a>
				break;
  400288:	e008      	b.n	40029c <local_twi_handler+0x17c>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  40028a:	69fb      	ldr	r3, [r7, #28]
  40028c:	3301      	adds	r3, #1
  40028e:	61fb      	str	r3, [r7, #28]
  400290:	69fb      	ldr	r3, [r7, #28]
  400292:	f1b3 3fff 	cmp.w	r3, #4294967295
  400296:	d100      	bne.n	40029a <local_twi_handler+0x17a>
				break;
  400298:	e000      	b.n	40029c <local_twi_handler+0x17c>
			}
		}
  40029a:	e7ed      	b.n	400278 <local_twi_handler+0x158>
		/* Complete the transfer. */
		twi_port->TWI_CR = TWI_CR_STOP;
  40029c:	69bb      	ldr	r3, [r7, #24]
  40029e:	2202      	movs	r2, #2
  4002a0:	601a      	str	r2, [r3, #0]
		/* Read second last data */
		twis[twi_index].buffer[(twis[twi_index].length)-2] = twi_port->TWI_RHR;
  4002a2:	4b2a      	ldr	r3, [pc, #168]	; (40034c <local_twi_handler+0x22c>)
  4002a4:	687a      	ldr	r2, [r7, #4]
  4002a6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4002aa:	4928      	ldr	r1, [pc, #160]	; (40034c <local_twi_handler+0x22c>)
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	00db      	lsls	r3, r3, #3
  4002b0:	440b      	add	r3, r1
  4002b2:	685b      	ldr	r3, [r3, #4]
  4002b4:	3b02      	subs	r3, #2
  4002b6:	4413      	add	r3, r2
  4002b8:	69ba      	ldr	r2, [r7, #24]
  4002ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4002bc:	b2d2      	uxtb	r2, r2
  4002be:	701a      	strb	r2, [r3, #0]

		/* Wait for RX ready flag */
		while (1) {
			status = twi_port->TWI_SR;
  4002c0:	69bb      	ldr	r3, [r7, #24]
  4002c2:	6a1b      	ldr	r3, [r3, #32]
  4002c4:	60fb      	str	r3, [r7, #12]
			if (status & TWI_SR_RXRDY) {
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	f003 0302 	and.w	r3, r3, #2
  4002cc:	2b00      	cmp	r3, #0
  4002ce:	d000      	beq.n	4002d2 <local_twi_handler+0x1b2>
				break;
  4002d0:	e008      	b.n	4002e4 <local_twi_handler+0x1c4>
			}
			/* Check timeout condition. */
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  4002d2:	69fb      	ldr	r3, [r7, #28]
  4002d4:	3301      	adds	r3, #1
  4002d6:	61fb      	str	r3, [r7, #28]
  4002d8:	69fb      	ldr	r3, [r7, #28]
  4002da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002de:	d100      	bne.n	4002e2 <local_twi_handler+0x1c2>
				break;
  4002e0:	e000      	b.n	4002e4 <local_twi_handler+0x1c4>
			}
		}
  4002e2:	e7ed      	b.n	4002c0 <local_twi_handler+0x1a0>

		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  4002e4:	69fb      	ldr	r3, [r7, #28]
  4002e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002ea:	d035      	beq.n	400358 <local_twi_handler+0x238>
			/* Read last data */
			twis[twi_index].buffer[(twis[twi_index].length)-1] = twi_port->TWI_RHR;
  4002ec:	4b17      	ldr	r3, [pc, #92]	; (40034c <local_twi_handler+0x22c>)
  4002ee:	687a      	ldr	r2, [r7, #4]
  4002f0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  4002f4:	4915      	ldr	r1, [pc, #84]	; (40034c <local_twi_handler+0x22c>)
  4002f6:	687b      	ldr	r3, [r7, #4]
  4002f8:	00db      	lsls	r3, r3, #3
  4002fa:	440b      	add	r3, r1
  4002fc:	685b      	ldr	r3, [r3, #4]
  4002fe:	3b01      	subs	r3, #1
  400300:	4413      	add	r3, r2
  400302:	69ba      	ldr	r2, [r7, #24]
  400304:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400306:	b2d2      	uxtb	r2, r2
  400308:	701a      	strb	r2, [r3, #0]
			timeout_counter = 0;
  40030a:	2300      	movs	r3, #0
  40030c:	61fb      	str	r3, [r7, #28]
			/* Wait for TX complete flag before releasing semaphore */
			while (1) {
				status = twi_port->TWI_SR;
  40030e:	69bb      	ldr	r3, [r7, #24]
  400310:	6a1b      	ldr	r3, [r3, #32]
  400312:	60fb      	str	r3, [r7, #12]
				if (status & TWI_SR_TXCOMP) {
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	f003 0301 	and.w	r3, r3, #1
  40031a:	2b00      	cmp	r3, #0
  40031c:	d000      	beq.n	400320 <local_twi_handler+0x200>
					break;
  40031e:	e01b      	b.n	400358 <local_twi_handler+0x238>
				}
				/* Check timeout condition. */
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
  400320:	69fb      	ldr	r3, [r7, #28]
  400322:	3301      	adds	r3, #1
  400324:	61fb      	str	r3, [r7, #28]
  400326:	69fb      	ldr	r3, [r7, #28]
  400328:	f1b3 3fff 	cmp.w	r3, #4294967295
  40032c:	d103      	bne.n	400336 <local_twi_handler+0x216>
					transfer_timeout = true;
  40032e:	2301      	movs	r3, #1
  400330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
  400334:	e010      	b.n	400358 <local_twi_handler+0x238>
				}
			}
  400336:	e7ea      	b.n	40030e <local_twi_handler+0x1ee>
  400338:	0041353c 	.word	0x0041353c
  40033c:	00404e19 	.word	0x00404e19
  400340:	00404e31 	.word	0x00404e31
  400344:	00408265 	.word	0x00408265
  400348:	00404df9 	.word	0x00404df9
  40034c:	20000afc 	.word	0x20000afc
  400350:	20000adc 	.word	0x20000adc
  400354:	0040698d 	.word	0x0040698d
		}

		/* If the driver is supporting multi-threading, then return the access
		mutex.  NOTE: As the peripheral is half duplex there is only one
		access mutex, and the reception uses the tx access muted. */
		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  400358:	4a35      	ldr	r2, [pc, #212]	; (400430 <local_twi_handler+0x310>)
  40035a:	687b      	ldr	r3, [r7, #4]
  40035c:	00db      	lsls	r3, r3, #3
  40035e:	4413      	add	r3, r2
  400360:	685b      	ldr	r3, [r3, #4]
  400362:	2b00      	cmp	r3, #0
  400364:	d00c      	beq.n	400380 <local_twi_handler+0x260>
			xSemaphoreGiveFromISR(
  400366:	4a32      	ldr	r2, [pc, #200]	; (400430 <local_twi_handler+0x310>)
  400368:	687b      	ldr	r3, [r7, #4]
  40036a:	00db      	lsls	r3, r3, #3
  40036c:	4413      	add	r3, r2
  40036e:	685a      	ldr	r2, [r3, #4]
  400370:	f107 0308 	add.w	r3, r7, #8
  400374:	4610      	mov	r0, r2
  400376:	2100      	movs	r1, #0
  400378:	461a      	mov	r2, r3
  40037a:	2300      	movs	r3, #0
  40037c:	4c2d      	ldr	r4, [pc, #180]	; (400434 <local_twi_handler+0x314>)
  40037e:	47a0      	blx	r4
					&higher_priority_task_woken);
		}

		/* if the receiving task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if  (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
  400380:	69fb      	ldr	r3, [r7, #28]
  400382:	f1b3 3fff 	cmp.w	r3, #4294967295
  400386:	d011      	beq.n	4003ac <local_twi_handler+0x28c>
			if (rx_dma_control[twi_index].transaction_complete_notification_semaphore != NULL) {
  400388:	4b2b      	ldr	r3, [pc, #172]	; (400438 <local_twi_handler+0x318>)
  40038a:	687a      	ldr	r2, [r7, #4]
  40038c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400390:	2b00      	cmp	r3, #0
  400392:	d00b      	beq.n	4003ac <local_twi_handler+0x28c>
				xSemaphoreGiveFromISR(
  400394:	4b28      	ldr	r3, [pc, #160]	; (400438 <local_twi_handler+0x318>)
  400396:	687a      	ldr	r2, [r7, #4]
  400398:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
  40039c:	f107 0308 	add.w	r3, r7, #8
  4003a0:	4610      	mov	r0, r2
  4003a2:	2100      	movs	r1, #0
  4003a4:	461a      	mov	r2, r3
  4003a6:	2300      	movs	r3, #0
  4003a8:	4c22      	ldr	r4, [pc, #136]	; (400434 <local_twi_handler+0x314>)
  4003aa:	47a0      	blx	r4
						&higher_priority_task_woken);
			}
		}
	}

	if (((twi_status & SR_ERROR_INTERRUPTS) != 0) || (transfer_timeout == true)) {
  4003ac:	697b      	ldr	r3, [r7, #20]
  4003ae:	f403 7350 	and.w	r3, r3, #832	; 0x340
  4003b2:	2b00      	cmp	r3, #0
  4003b4:	d103      	bne.n	4003be <local_twi_handler+0x29e>
  4003b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4003ba:	2b00      	cmp	r3, #0
  4003bc:	d02f      	beq.n	40041e <local_twi_handler+0x2fe>
		Stop the transmission, disable interrupts used by the peripheral, and
		ensure the peripheral access mutex is made available to tasks.  As this
		peripheral is half duplex, only the Tx peripheral access mutex exits.*/

		/* Stop the PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
  4003be:	4a1f      	ldr	r2, [pc, #124]	; (40043c <local_twi_handler+0x31c>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	011b      	lsls	r3, r3, #4
  4003c4:	4413      	add	r3, r2
  4003c6:	685b      	ldr	r3, [r3, #4]
  4003c8:	4618      	mov	r0, r3
  4003ca:	f240 2102 	movw	r1, #514	; 0x202
  4003ce:	4b1c      	ldr	r3, [pc, #112]	; (400440 <local_twi_handler+0x320>)
  4003d0:	4798      	blx	r3

		if (!(twi_status & TWI_SR_NACK)) {
  4003d2:	697b      	ldr	r3, [r7, #20]
  4003d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4003d8:	2b00      	cmp	r3, #0
  4003da:	d102      	bne.n	4003e2 <local_twi_handler+0x2c2>
			/* Do not send stop if NACK received. Handled by hardware */
			twi_port->TWI_CR = TWI_CR_STOP;
  4003dc:	69bb      	ldr	r3, [r7, #24]
  4003de:	2202      	movs	r2, #2
  4003e0:	601a      	str	r2, [r3, #0]
		}
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
  4003e2:	69b8      	ldr	r0, [r7, #24]
  4003e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4003e8:	4b16      	ldr	r3, [pc, #88]	; (400444 <local_twi_handler+0x324>)
  4003ea:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
  4003ec:	69b8      	ldr	r0, [r7, #24]
  4003ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4003f2:	4b14      	ldr	r3, [pc, #80]	; (400444 <local_twi_handler+0x324>)
  4003f4:	4798      	blx	r3

		if (tx_dma_control[twi_index].peripheral_access_mutex != NULL) {
  4003f6:	4a0e      	ldr	r2, [pc, #56]	; (400430 <local_twi_handler+0x310>)
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	00db      	lsls	r3, r3, #3
  4003fc:	4413      	add	r3, r2
  4003fe:	685b      	ldr	r3, [r3, #4]
  400400:	2b00      	cmp	r3, #0
  400402:	d00c      	beq.n	40041e <local_twi_handler+0x2fe>
			xSemaphoreGiveFromISR(
  400404:	4a0a      	ldr	r2, [pc, #40]	; (400430 <local_twi_handler+0x310>)
  400406:	687b      	ldr	r3, [r7, #4]
  400408:	00db      	lsls	r3, r3, #3
  40040a:	4413      	add	r3, r2
  40040c:	685a      	ldr	r2, [r3, #4]
  40040e:	f107 0308 	add.w	r3, r7, #8
  400412:	4610      	mov	r0, r2
  400414:	2100      	movs	r1, #0
  400416:	461a      	mov	r2, r3
  400418:	2300      	movs	r3, #0
  40041a:	4c06      	ldr	r4, [pc, #24]	; (400434 <local_twi_handler+0x314>)
  40041c:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
  40041e:	68bb      	ldr	r3, [r7, #8]
  400420:	2b00      	cmp	r3, #0
  400422:	d001      	beq.n	400428 <local_twi_handler+0x308>
  400424:	4b08      	ldr	r3, [pc, #32]	; (400448 <local_twi_handler+0x328>)
  400426:	4798      	blx	r3
}
  400428:	372c      	adds	r7, #44	; 0x2c
  40042a:	46bd      	mov	sp, r7
  40042c:	bd90      	pop	{r4, r7, pc}
  40042e:	bf00      	nop
  400430:	20000adc 	.word	0x20000adc
  400434:	0040698d 	.word	0x0040698d
  400438:	20000aec 	.word	0x20000aec
  40043c:	0041353c 	.word	0x0041353c
  400440:	00408265 	.word	0x00408265
  400444:	00404df9 	.word	0x00404df9
  400448:	00406311 	.word	0x00406311

0040044c <TWI0_Handler>:
#endif /* TWI */

#ifdef TWI0

void TWI0_Handler(void)
{
  40044c:	b580      	push	{r7, lr}
  40044e:	af00      	add	r7, sp, #0
	local_twi_handler(0);
  400450:	2000      	movs	r0, #0
  400452:	4b01      	ldr	r3, [pc, #4]	; (400458 <TWI0_Handler+0xc>)
  400454:	4798      	blx	r3
}
  400456:	bd80      	pop	{r7, pc}
  400458:	00400121 	.word	0x00400121

0040045c <TWI1_Handler>:
#endif

#ifdef TWI1

void TWI1_Handler(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	local_twi_handler(1);
  400460:	2001      	movs	r0, #1
  400462:	4b01      	ldr	r3, [pc, #4]	; (400468 <TWI1_Handler+0xc>)
  400464:	4798      	blx	r3
}
  400466:	bd80      	pop	{r7, pc}
  400468:	00400121 	.word	0x00400121

0040046c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  40046c:	b480      	push	{r7}
  40046e:	b083      	sub	sp, #12
  400470:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400472:	f3ef 8310 	mrs	r3, PRIMASK
  400476:	603b      	str	r3, [r7, #0]
  return(result);
  400478:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  40047a:	2b00      	cmp	r3, #0
  40047c:	bf14      	ite	ne
  40047e:	2300      	movne	r3, #0
  400480:	2301      	moveq	r3, #1
  400482:	b2db      	uxtb	r3, r3
  400484:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400486:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400488:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40048c:	4b04      	ldr	r3, [pc, #16]	; (4004a0 <cpu_irq_save+0x34>)
  40048e:	2200      	movs	r2, #0
  400490:	701a      	strb	r2, [r3, #0]
	return flags;
  400492:	687b      	ldr	r3, [r7, #4]
}
  400494:	4618      	mov	r0, r3
  400496:	370c      	adds	r7, #12
  400498:	46bd      	mov	sp, r7
  40049a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40049e:	4770      	bx	lr
  4004a0:	2000020c 	.word	0x2000020c

004004a4 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4004a4:	b480      	push	{r7}
  4004a6:	b083      	sub	sp, #12
  4004a8:	af00      	add	r7, sp, #0
  4004aa:	6078      	str	r0, [r7, #4]
	return (flags);
  4004ac:	687b      	ldr	r3, [r7, #4]
  4004ae:	2b00      	cmp	r3, #0
  4004b0:	bf0c      	ite	eq
  4004b2:	2300      	moveq	r3, #0
  4004b4:	2301      	movne	r3, #1
  4004b6:	b2db      	uxtb	r3, r3
}
  4004b8:	4618      	mov	r0, r3
  4004ba:	370c      	adds	r7, #12
  4004bc:	46bd      	mov	sp, r7
  4004be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004c2:	4770      	bx	lr

004004c4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4004c4:	b580      	push	{r7, lr}
  4004c6:	b082      	sub	sp, #8
  4004c8:	af00      	add	r7, sp, #0
  4004ca:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4004cc:	6878      	ldr	r0, [r7, #4]
  4004ce:	4b07      	ldr	r3, [pc, #28]	; (4004ec <cpu_irq_restore+0x28>)
  4004d0:	4798      	blx	r3
  4004d2:	4603      	mov	r3, r0
  4004d4:	2b00      	cmp	r3, #0
  4004d6:	d005      	beq.n	4004e4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4004d8:	4b05      	ldr	r3, [pc, #20]	; (4004f0 <cpu_irq_restore+0x2c>)
  4004da:	2201      	movs	r2, #1
  4004dc:	701a      	strb	r2, [r3, #0]
  4004de:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4004e2:	b662      	cpsie	i
}
  4004e4:	3708      	adds	r7, #8
  4004e6:	46bd      	mov	sp, r7
  4004e8:	bd80      	pop	{r7, pc}
  4004ea:	bf00      	nop
  4004ec:	004004a5 	.word	0x004004a5
  4004f0:	2000020c 	.word	0x2000020c

004004f4 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
  4004f4:	b480      	push	{r7}
  4004f6:	b083      	sub	sp, #12
  4004f8:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  4004fa:	2300      	movs	r3, #0
  4004fc:	71bb      	strb	r3, [r7, #6]
	udi_cdc_nb_comm_enabled = 0;
  4004fe:	4b41      	ldr	r3, [pc, #260]	; (400604 <udi_cdc_comm_enable+0x110>)
  400500:	2200      	movs	r2, #0
  400502:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  400504:	79ba      	ldrb	r2, [r7, #6]
  400506:	4b40      	ldr	r3, [pc, #256]	; (400608 <udi_cdc_comm_enable+0x114>)
  400508:	2100      	movs	r1, #0
  40050a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	uid_cdc_state_msg[port].header.bmRequestType =
  40050e:	79ba      	ldrb	r2, [r7, #6]
  400510:	493e      	ldr	r1, [pc, #248]	; (40060c <udi_cdc_comm_enable+0x118>)
  400512:	4613      	mov	r3, r2
  400514:	009b      	lsls	r3, r3, #2
  400516:	4413      	add	r3, r2
  400518:	005b      	lsls	r3, r3, #1
  40051a:	440b      	add	r3, r1
  40051c:	22a1      	movs	r2, #161	; 0xa1
  40051e:	701a      	strb	r2, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400520:	79ba      	ldrb	r2, [r7, #6]
  400522:	493a      	ldr	r1, [pc, #232]	; (40060c <udi_cdc_comm_enable+0x118>)
  400524:	4613      	mov	r3, r2
  400526:	009b      	lsls	r3, r3, #2
  400528:	4413      	add	r3, r2
  40052a:	005b      	lsls	r3, r3, #1
  40052c:	440b      	add	r3, r1
  40052e:	2220      	movs	r2, #32
  400530:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  400532:	79ba      	ldrb	r2, [r7, #6]
  400534:	4935      	ldr	r1, [pc, #212]	; (40060c <udi_cdc_comm_enable+0x118>)
  400536:	4613      	mov	r3, r2
  400538:	009b      	lsls	r3, r3, #2
  40053a:	4413      	add	r3, r2
  40053c:	005b      	lsls	r3, r3, #1
  40053e:	440b      	add	r3, r1
  400540:	2200      	movs	r2, #0
  400542:	805a      	strh	r2, [r3, #2]

	switch (port) {
  400544:	79bb      	ldrb	r3, [r7, #6]
  400546:	2b00      	cmp	r3, #0
  400548:	d102      	bne.n	400550 <udi_cdc_comm_enable+0x5c>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
  40054a:	2300      	movs	r3, #0
  40054c:	71fb      	strb	r3, [r7, #7]
  40054e:	e002      	b.n	400556 <udi_cdc_comm_enable+0x62>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
  400550:	2300      	movs	r3, #0
  400552:	71fb      	strb	r3, [r7, #7]
		break;
  400554:	bf00      	nop
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  400556:	79ba      	ldrb	r2, [r7, #6]
  400558:	79fb      	ldrb	r3, [r7, #7]
  40055a:	b299      	uxth	r1, r3
  40055c:	482b      	ldr	r0, [pc, #172]	; (40060c <udi_cdc_comm_enable+0x118>)
  40055e:	4613      	mov	r3, r2
  400560:	009b      	lsls	r3, r3, #2
  400562:	4413      	add	r3, r2
  400564:	005b      	lsls	r3, r3, #1
  400566:	4403      	add	r3, r0
  400568:	460a      	mov	r2, r1
  40056a:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  40056c:	79ba      	ldrb	r2, [r7, #6]
  40056e:	4927      	ldr	r1, [pc, #156]	; (40060c <udi_cdc_comm_enable+0x118>)
  400570:	4613      	mov	r3, r2
  400572:	009b      	lsls	r3, r3, #2
  400574:	4413      	add	r3, r2
  400576:	005b      	lsls	r3, r3, #1
  400578:	440b      	add	r3, r1
  40057a:	2202      	movs	r2, #2
  40057c:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  40057e:	79ba      	ldrb	r2, [r7, #6]
  400580:	4922      	ldr	r1, [pc, #136]	; (40060c <udi_cdc_comm_enable+0x118>)
  400582:	4613      	mov	r3, r2
  400584:	009b      	lsls	r3, r3, #2
  400586:	4413      	add	r3, r2
  400588:	005b      	lsls	r3, r3, #1
  40058a:	440b      	add	r3, r1
  40058c:	3308      	adds	r3, #8
  40058e:	2200      	movs	r2, #0
  400590:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400592:	79ba      	ldrb	r2, [r7, #6]
  400594:	491e      	ldr	r1, [pc, #120]	; (400610 <udi_cdc_comm_enable+0x11c>)
  400596:	4613      	mov	r3, r2
  400598:	00db      	lsls	r3, r3, #3
  40059a:	1a9b      	subs	r3, r3, r2
  40059c:	440b      	add	r3, r1
  40059e:	2200      	movs	r2, #0
  4005a0:	701a      	strb	r2, [r3, #0]
  4005a2:	2200      	movs	r2, #0
  4005a4:	f062 027b 	orn	r2, r2, #123	; 0x7b
  4005a8:	705a      	strb	r2, [r3, #1]
  4005aa:	2200      	movs	r2, #0
  4005ac:	f042 0203 	orr.w	r2, r2, #3
  4005b0:	709a      	strb	r2, [r3, #2]
  4005b2:	2200      	movs	r2, #0
  4005b4:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  4005b6:	79ba      	ldrb	r2, [r7, #6]
  4005b8:	4915      	ldr	r1, [pc, #84]	; (400610 <udi_cdc_comm_enable+0x11c>)
  4005ba:	4613      	mov	r3, r2
  4005bc:	00db      	lsls	r3, r3, #3
  4005be:	1a9b      	subs	r3, r3, r2
  4005c0:	440b      	add	r3, r1
  4005c2:	2200      	movs	r2, #0
  4005c4:	711a      	strb	r2, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  4005c6:	79ba      	ldrb	r2, [r7, #6]
  4005c8:	4911      	ldr	r1, [pc, #68]	; (400610 <udi_cdc_comm_enable+0x11c>)
  4005ca:	4613      	mov	r3, r2
  4005cc:	00db      	lsls	r3, r3, #3
  4005ce:	1a9b      	subs	r3, r3, r2
  4005d0:	440b      	add	r3, r1
  4005d2:	2200      	movs	r2, #0
  4005d4:	715a      	strb	r2, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  4005d6:	79ba      	ldrb	r2, [r7, #6]
  4005d8:	490d      	ldr	r1, [pc, #52]	; (400610 <udi_cdc_comm_enable+0x11c>)
  4005da:	4613      	mov	r3, r2
  4005dc:	00db      	lsls	r3, r3, #3
  4005de:	1a9b      	subs	r3, r3, r2
  4005e0:	440b      	add	r3, r1
  4005e2:	2208      	movs	r2, #8
  4005e4:	719a      	strb	r2, [r3, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  4005e6:	4b07      	ldr	r3, [pc, #28]	; (400604 <udi_cdc_comm_enable+0x110>)
  4005e8:	781b      	ldrb	r3, [r3, #0]
  4005ea:	b2db      	uxtb	r3, r3
  4005ec:	3301      	adds	r3, #1
  4005ee:	b2da      	uxtb	r2, r3
  4005f0:	4b04      	ldr	r3, [pc, #16]	; (400604 <udi_cdc_comm_enable+0x110>)
  4005f2:	701a      	strb	r2, [r3, #0]
	return true;
  4005f4:	2301      	movs	r3, #1
}
  4005f6:	4618      	mov	r0, r3
  4005f8:	370c      	adds	r7, #12
  4005fa:	46bd      	mov	sp, r7
  4005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400600:	4770      	bx	lr
  400602:	bf00      	nop
  400604:	20000b24 	.word	0x20000b24
  400608:	20000b14 	.word	0x20000b14
  40060c:	20000b18 	.word	0x20000b18
  400610:	20000b0c 	.word	0x20000b0c

00400614 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
  400614:	b580      	push	{r7, lr}
  400616:	b082      	sub	sp, #8
  400618:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  40061a:	2300      	movs	r3, #0
  40061c:	71fb      	strb	r3, [r7, #7]
	udi_cdc_nb_data_enabled = 0;
  40061e:	4b2a      	ldr	r3, [pc, #168]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  400620:	2200      	movs	r2, #0
  400622:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  400624:	79fb      	ldrb	r3, [r7, #7]
  400626:	4a29      	ldr	r2, [pc, #164]	; (4006cc <udi_cdc_data_enable+0xb8>)
  400628:	2100      	movs	r1, #0
  40062a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40062c:	79fb      	ldrb	r3, [r7, #7]
  40062e:	4a28      	ldr	r2, [pc, #160]	; (4006d0 <udi_cdc_data_enable+0xbc>)
  400630:	2100      	movs	r1, #0
  400632:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
  400634:	79fb      	ldrb	r3, [r7, #7]
  400636:	4a27      	ldr	r2, [pc, #156]	; (4006d4 <udi_cdc_data_enable+0xc0>)
  400638:	2100      	movs	r1, #0
  40063a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
  40063c:	79fa      	ldrb	r2, [r7, #7]
  40063e:	4b26      	ldr	r3, [pc, #152]	; (4006d8 <udi_cdc_data_enable+0xc4>)
  400640:	2100      	movs	r1, #0
  400642:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400646:	79fb      	ldrb	r3, [r7, #7]
  400648:	4a23      	ldr	r2, [pc, #140]	; (4006d8 <udi_cdc_data_enable+0xc4>)
  40064a:	009b      	lsls	r3, r3, #2
  40064c:	4413      	add	r3, r2
  40064e:	2200      	movs	r2, #0
  400650:	805a      	strh	r2, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  400652:	79fa      	ldrb	r2, [r7, #7]
  400654:	4b21      	ldr	r3, [pc, #132]	; (4006dc <udi_cdc_data_enable+0xc8>)
  400656:	2100      	movs	r1, #0
  400658:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_tx_send(port);
  40065c:	79fb      	ldrb	r3, [r7, #7]
  40065e:	4618      	mov	r0, r3
  400660:	4b1f      	ldr	r3, [pc, #124]	; (4006e0 <udi_cdc_data_enable+0xcc>)
  400662:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  400664:	79fb      	ldrb	r3, [r7, #7]
  400666:	4a1f      	ldr	r2, [pc, #124]	; (4006e4 <udi_cdc_data_enable+0xd0>)
  400668:	2100      	movs	r1, #0
  40066a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
  40066c:	79fb      	ldrb	r3, [r7, #7]
  40066e:	4a1e      	ldr	r2, [pc, #120]	; (4006e8 <udi_cdc_data_enable+0xd4>)
  400670:	2100      	movs	r1, #0
  400672:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
  400674:	79fa      	ldrb	r2, [r7, #7]
  400676:	4b1d      	ldr	r3, [pc, #116]	; (4006ec <udi_cdc_data_enable+0xd8>)
  400678:	2100      	movs	r1, #0
  40067a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	udi_cdc_rx_pos[port] = 0;
  40067e:	79fa      	ldrb	r2, [r7, #7]
  400680:	4b1b      	ldr	r3, [pc, #108]	; (4006f0 <udi_cdc_data_enable+0xdc>)
  400682:	2100      	movs	r1, #0
  400684:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if (!udi_cdc_rx_start(port)) {
  400688:	79fb      	ldrb	r3, [r7, #7]
  40068a:	4618      	mov	r0, r3
  40068c:	4b19      	ldr	r3, [pc, #100]	; (4006f4 <udi_cdc_data_enable+0xe0>)
  40068e:	4798      	blx	r3
  400690:	4603      	mov	r3, r0
  400692:	f083 0301 	eor.w	r3, r3, #1
  400696:	b2db      	uxtb	r3, r3
  400698:	2b00      	cmp	r3, #0
  40069a:	d001      	beq.n	4006a0 <udi_cdc_data_enable+0x8c>
		return false;
  40069c:	2300      	movs	r3, #0
  40069e:	e00f      	b.n	4006c0 <udi_cdc_data_enable+0xac>
	}
	udi_cdc_nb_data_enabled++;
  4006a0:	4b09      	ldr	r3, [pc, #36]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  4006a2:	781b      	ldrb	r3, [r3, #0]
  4006a4:	b2db      	uxtb	r3, r3
  4006a6:	3301      	adds	r3, #1
  4006a8:	b2da      	uxtb	r2, r3
  4006aa:	4b07      	ldr	r3, [pc, #28]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  4006ac:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  4006ae:	4b06      	ldr	r3, [pc, #24]	; (4006c8 <udi_cdc_data_enable+0xb4>)
  4006b0:	781b      	ldrb	r3, [r3, #0]
  4006b2:	b2db      	uxtb	r3, r3
  4006b4:	2b01      	cmp	r3, #1
  4006b6:	d102      	bne.n	4006be <udi_cdc_data_enable+0xaa>
		udi_cdc_data_running = true;
  4006b8:	4b0f      	ldr	r3, [pc, #60]	; (4006f8 <udi_cdc_data_enable+0xe4>)
  4006ba:	2201      	movs	r2, #1
  4006bc:	701a      	strb	r2, [r3, #0]
	}
	return true;
  4006be:	2301      	movs	r3, #1
}
  4006c0:	4618      	mov	r0, r3
  4006c2:	3708      	adds	r7, #8
  4006c4:	46bd      	mov	sp, r7
  4006c6:	bd80      	pop	{r7, pc}
  4006c8:	20000b25 	.word	0x20000b25
  4006cc:	20000c44 	.word	0x20000c44
  4006d0:	20000c48 	.word	0x20000c48
  4006d4:	20000c3c 	.word	0x20000c3c
  4006d8:	20000c38 	.word	0x20000c38
  4006dc:	20000c40 	.word	0x20000c40
  4006e0:	00400aa9 	.word	0x00400aa9
  4006e4:	20000bb4 	.word	0x20000bb4
  4006e8:	20000bac 	.word	0x20000bac
  4006ec:	20000ba8 	.word	0x20000ba8
  4006f0:	20000bb0 	.word	0x20000bb0
  4006f4:	00400895 	.word	0x00400895
  4006f8:	20000b26 	.word	0x20000b26

004006fc <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
  4006fc:	b480      	push	{r7}
  4006fe:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400700:	4b05      	ldr	r3, [pc, #20]	; (400718 <udi_cdc_comm_disable+0x1c>)
  400702:	781b      	ldrb	r3, [r3, #0]
  400704:	b2db      	uxtb	r3, r3
  400706:	3b01      	subs	r3, #1
  400708:	b2da      	uxtb	r2, r3
  40070a:	4b03      	ldr	r3, [pc, #12]	; (400718 <udi_cdc_comm_disable+0x1c>)
  40070c:	701a      	strb	r2, [r3, #0]
}
  40070e:	46bd      	mov	sp, r7
  400710:	f85d 7b04 	ldr.w	r7, [sp], #4
  400714:	4770      	bx	lr
  400716:	bf00      	nop
  400718:	20000b24 	.word	0x20000b24

0040071c <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
  40071c:	b480      	push	{r7}
  40071e:	b083      	sub	sp, #12
  400720:	af00      	add	r7, sp, #0
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400722:	4b09      	ldr	r3, [pc, #36]	; (400748 <udi_cdc_data_disable+0x2c>)
  400724:	781b      	ldrb	r3, [r3, #0]
  400726:	b2db      	uxtb	r3, r3
  400728:	3b01      	subs	r3, #1
  40072a:	b2da      	uxtb	r2, r3
  40072c:	4b06      	ldr	r3, [pc, #24]	; (400748 <udi_cdc_data_disable+0x2c>)
  40072e:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  400730:	4b05      	ldr	r3, [pc, #20]	; (400748 <udi_cdc_data_disable+0x2c>)
  400732:	781b      	ldrb	r3, [r3, #0]
  400734:	71fb      	strb	r3, [r7, #7]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  400736:	4b05      	ldr	r3, [pc, #20]	; (40074c <udi_cdc_data_disable+0x30>)
  400738:	2200      	movs	r2, #0
  40073a:	701a      	strb	r2, [r3, #0]
}
  40073c:	370c      	adds	r7, #12
  40073e:	46bd      	mov	sp, r7
  400740:	f85d 7b04 	ldr.w	r7, [sp], #4
  400744:	4770      	bx	lr
  400746:	bf00      	nop
  400748:	20000b25 	.word	0x20000b25
  40074c:	20000b26 	.word	0x20000b26

00400750 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
  400750:	b580      	push	{r7, lr}
  400752:	b082      	sub	sp, #8
  400754:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
  400756:	4b2b      	ldr	r3, [pc, #172]	; (400804 <udi_cdc_comm_setup+0xb4>)
  400758:	4798      	blx	r3
  40075a:	4603      	mov	r3, r0
  40075c:	71fb      	strb	r3, [r7, #7]

	if (Udd_setup_is_in()) {
  40075e:	4b2a      	ldr	r3, [pc, #168]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400760:	781b      	ldrb	r3, [r3, #0]
  400762:	b2db      	uxtb	r3, r3
  400764:	b25b      	sxtb	r3, r3
  400766:	2b00      	cmp	r3, #0
  400768:	da1c      	bge.n	4007a4 <udi_cdc_comm_setup+0x54>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  40076a:	4b27      	ldr	r3, [pc, #156]	; (400808 <udi_cdc_comm_setup+0xb8>)
  40076c:	781b      	ldrb	r3, [r3, #0]
  40076e:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400772:	2b20      	cmp	r3, #32
  400774:	d116      	bne.n	4007a4 <udi_cdc_comm_setup+0x54>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  400776:	4b24      	ldr	r3, [pc, #144]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400778:	785b      	ldrb	r3, [r3, #1]
  40077a:	2b21      	cmp	r3, #33	; 0x21
  40077c:	d112      	bne.n	4007a4 <udi_cdc_comm_setup+0x54>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  40077e:	4b22      	ldr	r3, [pc, #136]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400780:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  400782:	2b07      	cmp	r3, #7
  400784:	d001      	beq.n	40078a <udi_cdc_comm_setup+0x3a>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  400786:	2300      	movs	r3, #0
  400788:	e038      	b.n	4007fc <udi_cdc_comm_setup+0xac>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
  40078a:	79fa      	ldrb	r2, [r7, #7]
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
  40078c:	4613      	mov	r3, r2
  40078e:	00db      	lsls	r3, r3, #3
  400790:	1a9b      	subs	r3, r3, r2
  400792:	4a1e      	ldr	r2, [pc, #120]	; (40080c <udi_cdc_comm_setup+0xbc>)
  400794:	441a      	add	r2, r3
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  400796:	4b1c      	ldr	r3, [pc, #112]	; (400808 <udi_cdc_comm_setup+0xb8>)
  400798:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  40079a:	4b1b      	ldr	r3, [pc, #108]	; (400808 <udi_cdc_comm_setup+0xb8>)
  40079c:	2207      	movs	r2, #7
  40079e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4007a0:	2301      	movs	r3, #1
  4007a2:	e02b      	b.n	4007fc <udi_cdc_comm_setup+0xac>
			}
		}
	}
	if (Udd_setup_is_out()) {
  4007a4:	4b18      	ldr	r3, [pc, #96]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007a6:	781b      	ldrb	r3, [r3, #0]
  4007a8:	b2db      	uxtb	r3, r3
  4007aa:	b25b      	sxtb	r3, r3
  4007ac:	2b00      	cmp	r3, #0
  4007ae:	db24      	blt.n	4007fa <udi_cdc_comm_setup+0xaa>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4007b0:	4b15      	ldr	r3, [pc, #84]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007b2:	781b      	ldrb	r3, [r3, #0]
  4007b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4007b8:	2b20      	cmp	r3, #32
  4007ba:	d11e      	bne.n	4007fa <udi_cdc_comm_setup+0xaa>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  4007bc:	4b12      	ldr	r3, [pc, #72]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007be:	785b      	ldrb	r3, [r3, #1]
  4007c0:	2b20      	cmp	r3, #32
  4007c2:	d002      	beq.n	4007ca <udi_cdc_comm_setup+0x7a>
  4007c4:	2b22      	cmp	r3, #34	; 0x22
  4007c6:	d016      	beq.n	4007f6 <udi_cdc_comm_setup+0xa6>
  4007c8:	e017      	b.n	4007fa <udi_cdc_comm_setup+0xaa>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  4007ca:	4b0f      	ldr	r3, [pc, #60]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007cc:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  4007ce:	2b07      	cmp	r3, #7
  4007d0:	d001      	beq.n	4007d6 <udi_cdc_comm_setup+0x86>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4007d2:	2300      	movs	r3, #0
  4007d4:	e012      	b.n	4007fc <udi_cdc_comm_setup+0xac>
				udd_g_ctrlreq.callback =
  4007d6:	4b0c      	ldr	r3, [pc, #48]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007d8:	4a0d      	ldr	r2, [pc, #52]	; (400810 <udi_cdc_comm_setup+0xc0>)
  4007da:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
  4007dc:	79fa      	ldrb	r2, [r7, #7]
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
  4007de:	4613      	mov	r3, r2
  4007e0:	00db      	lsls	r3, r3, #3
  4007e2:	1a9b      	subs	r3, r3, r2
  4007e4:	4a09      	ldr	r2, [pc, #36]	; (40080c <udi_cdc_comm_setup+0xbc>)
  4007e6:	441a      	add	r2, r3
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  4007e8:	4b07      	ldr	r3, [pc, #28]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007ea:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  4007ec:	4b06      	ldr	r3, [pc, #24]	; (400808 <udi_cdc_comm_setup+0xb8>)
  4007ee:	2207      	movs	r2, #7
  4007f0:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4007f2:	2301      	movs	r3, #1
  4007f4:	e002      	b.n	4007fc <udi_cdc_comm_setup+0xac>
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
  4007f6:	2301      	movs	r3, #1
  4007f8:	e000      	b.n	4007fc <udi_cdc_comm_setup+0xac>
			}
		}
	}
	return false;  // request Not supported
  4007fa:	2300      	movs	r3, #0
}
  4007fc:	4618      	mov	r0, r3
  4007fe:	3708      	adds	r7, #8
  400800:	46bd      	mov	sp, r7
  400802:	bd80      	pop	{r7, pc}
  400804:	0040084d 	.word	0x0040084d
  400808:	20014f88 	.word	0x20014f88
  40080c:	20000b0c 	.word	0x20000b0c
  400810:	0040087d 	.word	0x0040087d

00400814 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
  400814:	b480      	push	{r7}
  400816:	af00      	add	r7, sp, #0
	return false;  // request Not supported
  400818:	2300      	movs	r3, #0
}
  40081a:	4618      	mov	r0, r3
  40081c:	46bd      	mov	sp, r7
  40081e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400822:	4770      	bx	lr

00400824 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
  400824:	b480      	push	{r7}
  400826:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
  400828:	2300      	movs	r3, #0
}
  40082a:	4618      	mov	r0, r3
  40082c:	46bd      	mov	sp, r7
  40082e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400832:	4770      	bx	lr

00400834 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
  400834:	b580      	push	{r7, lr}
  400836:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  400838:	4b02      	ldr	r3, [pc, #8]	; (400844 <udi_cdc_data_sof_notify+0x10>)
  40083a:	781b      	ldrb	r3, [r3, #0]
  40083c:	4618      	mov	r0, r3
  40083e:	4b02      	ldr	r3, [pc, #8]	; (400848 <udi_cdc_data_sof_notify+0x14>)
  400840:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
  400842:	bd80      	pop	{r7, pc}
  400844:	20000c4c 	.word	0x20000c4c
  400848:	00400aa9 	.word	0x00400aa9

0040084c <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
  40084c:	b480      	push	{r7}
  40084e:	b083      	sub	sp, #12
  400850:	af00      	add	r7, sp, #0
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
  400852:	4b09      	ldr	r3, [pc, #36]	; (400878 <udi_cdc_setup_to_port+0x2c>)
  400854:	889b      	ldrh	r3, [r3, #4]
  400856:	b2db      	uxtb	r3, r3
  400858:	2b00      	cmp	r3, #0
  40085a:	d102      	bne.n	400862 <udi_cdc_setup_to_port+0x16>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
  40085c:	2300      	movs	r3, #0
  40085e:	71fb      	strb	r3, [r7, #7]
  400860:	e002      	b.n	400868 <udi_cdc_setup_to_port+0x1c>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
  400862:	2300      	movs	r3, #0
  400864:	71fb      	strb	r3, [r7, #7]
		break;
  400866:	bf00      	nop
	}
	return port;
  400868:	79fb      	ldrb	r3, [r7, #7]
}
  40086a:	4618      	mov	r0, r3
  40086c:	370c      	adds	r7, #12
  40086e:	46bd      	mov	sp, r7
  400870:	f85d 7b04 	ldr.w	r7, [sp], #4
  400874:	4770      	bx	lr
  400876:	bf00      	nop
  400878:	20014f88 	.word	0x20014f88

0040087c <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
  40087c:	b580      	push	{r7, lr}
  40087e:	b082      	sub	sp, #8
  400880:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
  400882:	4b03      	ldr	r3, [pc, #12]	; (400890 <udi_cdc_line_coding_received+0x14>)
  400884:	4798      	blx	r3
  400886:	4603      	mov	r3, r0
  400888:	71fb      	strb	r3, [r7, #7]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
  40088a:	3708      	adds	r7, #8
  40088c:	46bd      	mov	sp, r7
  40088e:	bd80      	pop	{r7, pc}
  400890:	0040084d 	.word	0x0040084d

00400894 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  400894:	b590      	push	{r4, r7, lr}
  400896:	b089      	sub	sp, #36	; 0x24
  400898:	af02      	add	r7, sp, #8
  40089a:	4603      	mov	r3, r0
  40089c:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  40089e:	2300      	movs	r3, #0
  4008a0:	75bb      	strb	r3, [r7, #22]
#endif

	flags = cpu_irq_save();
  4008a2:	4b2c      	ldr	r3, [pc, #176]	; (400954 <udi_cdc_rx_start+0xc0>)
  4008a4:	4798      	blx	r3
  4008a6:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  4008a8:	7dbb      	ldrb	r3, [r7, #22]
  4008aa:	4a2b      	ldr	r2, [pc, #172]	; (400958 <udi_cdc_rx_start+0xc4>)
  4008ac:	5cd3      	ldrb	r3, [r2, r3]
  4008ae:	73fb      	strb	r3, [r7, #15]
	if (udi_cdc_rx_trans_ongoing[port] ||
  4008b0:	7dbb      	ldrb	r3, [r7, #22]
  4008b2:	4a2a      	ldr	r2, [pc, #168]	; (40095c <udi_cdc_rx_start+0xc8>)
  4008b4:	5cd3      	ldrb	r3, [r2, r3]
  4008b6:	b2db      	uxtb	r3, r3
  4008b8:	2b00      	cmp	r3, #0
  4008ba:	d10d      	bne.n	4008d8 <udi_cdc_rx_start+0x44>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  4008bc:	7dba      	ldrb	r2, [r7, #22]
  4008be:	4b28      	ldr	r3, [pc, #160]	; (400960 <udi_cdc_rx_start+0xcc>)
  4008c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  4008c4:	b29a      	uxth	r2, r3
  4008c6:	7db8      	ldrb	r0, [r7, #22]
  4008c8:	7bf9      	ldrb	r1, [r7, #15]
  4008ca:	4b26      	ldr	r3, [pc, #152]	; (400964 <udi_cdc_rx_start+0xd0>)
  4008cc:	0040      	lsls	r0, r0, #1
  4008ce:	4401      	add	r1, r0
  4008d0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  4008d4:	429a      	cmp	r2, r3
  4008d6:	d204      	bcs.n	4008e2 <udi_cdc_rx_start+0x4e>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
  4008d8:	6938      	ldr	r0, [r7, #16]
  4008da:	4b23      	ldr	r3, [pc, #140]	; (400968 <udi_cdc_rx_start+0xd4>)
  4008dc:	4798      	blx	r3
		return false;
  4008de:	2300      	movs	r3, #0
  4008e0:	e033      	b.n	40094a <udi_cdc_rx_start+0xb6>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  4008e2:	7dba      	ldrb	r2, [r7, #22]
  4008e4:	4b1e      	ldr	r3, [pc, #120]	; (400960 <udi_cdc_rx_start+0xcc>)
  4008e6:	2100      	movs	r1, #0
  4008e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4008ec:	7dbb      	ldrb	r3, [r7, #22]
  4008ee:	7bfa      	ldrb	r2, [r7, #15]
  4008f0:	2a00      	cmp	r2, #0
  4008f2:	bf14      	ite	ne
  4008f4:	2200      	movne	r2, #0
  4008f6:	2201      	moveq	r2, #1
  4008f8:	b2d2      	uxtb	r2, r2
  4008fa:	4611      	mov	r1, r2
  4008fc:	4a16      	ldr	r2, [pc, #88]	; (400958 <udi_cdc_rx_start+0xc4>)
  4008fe:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  400900:	7dbb      	ldrb	r3, [r7, #22]
  400902:	4a16      	ldr	r2, [pc, #88]	; (40095c <udi_cdc_rx_start+0xc8>)
  400904:	2101      	movs	r1, #1
  400906:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  400908:	6938      	ldr	r0, [r7, #16]
  40090a:	4b17      	ldr	r3, [pc, #92]	; (400968 <udi_cdc_rx_start+0xd4>)
  40090c:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
  40090e:	7dbb      	ldrb	r3, [r7, #22]
  400910:	4618      	mov	r0, r3
  400912:	4b16      	ldr	r3, [pc, #88]	; (40096c <udi_cdc_rx_start+0xd8>)
  400914:	4798      	blx	r3
		UDI_CDC_RX_NOTIFY(port);
	}
	// Send the buffer with enable of short packet
	switch (port) {
  400916:	7dbb      	ldrb	r3, [r7, #22]
  400918:	2b00      	cmp	r3, #0
  40091a:	d102      	bne.n	400922 <udi_cdc_rx_start+0x8e>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
  40091c:	2302      	movs	r3, #2
  40091e:	75fb      	strb	r3, [r7, #23]
  400920:	e002      	b.n	400928 <udi_cdc_rx_start+0x94>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
  400922:	2302      	movs	r3, #2
  400924:	75fb      	strb	r3, [r7, #23]
		break;
  400926:	bf00      	nop
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
  400928:	7dba      	ldrb	r2, [r7, #22]
  40092a:	7bfb      	ldrb	r3, [r7, #15]
  40092c:	0052      	lsls	r2, r2, #1
  40092e:	4413      	add	r3, r2
  400930:	019a      	lsls	r2, r3, #6
  400932:	4b0f      	ldr	r3, [pc, #60]	; (400970 <udi_cdc_rx_start+0xdc>)
  400934:	4413      	add	r3, r2
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  400936:	7dfa      	ldrb	r2, [r7, #23]
  400938:	490e      	ldr	r1, [pc, #56]	; (400974 <udi_cdc_rx_start+0xe0>)
  40093a:	9100      	str	r1, [sp, #0]
  40093c:	4610      	mov	r0, r2
  40093e:	2101      	movs	r1, #1
  400940:	461a      	mov	r2, r3
  400942:	2340      	movs	r3, #64	; 0x40
  400944:	4c0c      	ldr	r4, [pc, #48]	; (400978 <udi_cdc_rx_start+0xe4>)
  400946:	47a0      	blx	r4
  400948:	4603      	mov	r3, r0
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  40094a:	4618      	mov	r0, r3
  40094c:	371c      	adds	r7, #28
  40094e:	46bd      	mov	sp, r7
  400950:	bd90      	pop	{r4, r7, pc}
  400952:	bf00      	nop
  400954:	0040046d 	.word	0x0040046d
  400958:	20000bac 	.word	0x20000bac
  40095c:	20000bb4 	.word	0x20000bb4
  400960:	20000bb0 	.word	0x20000bb0
  400964:	20000ba8 	.word	0x20000ba8
  400968:	004004c5 	.word	0x004004c5
  40096c:	00400cd1 	.word	0x00400cd1
  400970:	20000b28 	.word	0x20000b28
  400974:	0040097d 	.word	0x0040097d
  400978:	00402571 	.word	0x00402571

0040097c <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  40097c:	b590      	push	{r4, r7, lr}
  40097e:	b087      	sub	sp, #28
  400980:	af02      	add	r7, sp, #8
  400982:	6039      	str	r1, [r7, #0]
  400984:	4613      	mov	r3, r2
  400986:	4602      	mov	r2, r0
  400988:	71fa      	strb	r2, [r7, #7]
  40098a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
  40098c:	79bb      	ldrb	r3, [r7, #6]
  40098e:	2b02      	cmp	r3, #2
  400990:	d102      	bne.n	400998 <udi_cdc_data_received+0x1c>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
  400992:	2300      	movs	r3, #0
  400994:	73fb      	strb	r3, [r7, #15]
  400996:	e002      	b.n	40099e <udi_cdc_data_received+0x22>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
  400998:	2300      	movs	r3, #0
  40099a:	73fb      	strb	r3, [r7, #15]
		break;
  40099c:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
  40099e:	79fb      	ldrb	r3, [r7, #7]
  4009a0:	2b00      	cmp	r3, #0
  4009a2:	d000      	beq.n	4009a6 <udi_cdc_data_received+0x2a>
		// Abort reception
		return;
  4009a4:	e02e      	b.n	400a04 <udi_cdc_data_received+0x88>
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  4009a6:	7bfb      	ldrb	r3, [r7, #15]
  4009a8:	4a18      	ldr	r2, [pc, #96]	; (400a0c <udi_cdc_data_received+0x90>)
  4009aa:	5cd3      	ldrb	r3, [r2, r3]
  4009ac:	b2db      	uxtb	r3, r3
  4009ae:	2b00      	cmp	r3, #0
  4009b0:	bf14      	ite	ne
  4009b2:	2300      	movne	r3, #0
  4009b4:	2301      	moveq	r3, #1
  4009b6:	b2db      	uxtb	r3, r3
  4009b8:	73bb      	strb	r3, [r7, #14]
	if (!n) {
  4009ba:	683b      	ldr	r3, [r7, #0]
  4009bc:	2b00      	cmp	r3, #0
  4009be:	d110      	bne.n	4009e2 <udi_cdc_data_received+0x66>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
  4009c0:	7bfa      	ldrb	r2, [r7, #15]
  4009c2:	7bbb      	ldrb	r3, [r7, #14]
  4009c4:	0052      	lsls	r2, r2, #1
  4009c6:	4413      	add	r3, r2
  4009c8:	019a      	lsls	r2, r3, #6
  4009ca:	4b11      	ldr	r3, [pc, #68]	; (400a10 <udi_cdc_data_received+0x94>)
  4009cc:	4413      	add	r3, r2
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
  4009ce:	79ba      	ldrb	r2, [r7, #6]
  4009d0:	4910      	ldr	r1, [pc, #64]	; (400a14 <udi_cdc_data_received+0x98>)
  4009d2:	9100      	str	r1, [sp, #0]
  4009d4:	4610      	mov	r0, r2
  4009d6:	2101      	movs	r1, #1
  4009d8:	461a      	mov	r2, r3
  4009da:	2340      	movs	r3, #64	; 0x40
  4009dc:	4c0e      	ldr	r4, [pc, #56]	; (400a18 <udi_cdc_data_received+0x9c>)
  4009de:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  4009e0:	e010      	b.n	400a04 <udi_cdc_data_received+0x88>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4009e2:	7bf8      	ldrb	r0, [r7, #15]
  4009e4:	7bba      	ldrb	r2, [r7, #14]
  4009e6:	683b      	ldr	r3, [r7, #0]
  4009e8:	b299      	uxth	r1, r3
  4009ea:	4b0c      	ldr	r3, [pc, #48]	; (400a1c <udi_cdc_data_received+0xa0>)
  4009ec:	0040      	lsls	r0, r0, #1
  4009ee:	4402      	add	r2, r0
  4009f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4009f4:	7bfb      	ldrb	r3, [r7, #15]
  4009f6:	4a0a      	ldr	r2, [pc, #40]	; (400a20 <udi_cdc_data_received+0xa4>)
  4009f8:	2100      	movs	r1, #0
  4009fa:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
  4009fc:	7bfb      	ldrb	r3, [r7, #15]
  4009fe:	4618      	mov	r0, r3
  400a00:	4b08      	ldr	r3, [pc, #32]	; (400a24 <udi_cdc_data_received+0xa8>)
  400a02:	4798      	blx	r3
}
  400a04:	3714      	adds	r7, #20
  400a06:	46bd      	mov	sp, r7
  400a08:	bd90      	pop	{r4, r7, pc}
  400a0a:	bf00      	nop
  400a0c:	20000bac 	.word	0x20000bac
  400a10:	20000b28 	.word	0x20000b28
  400a14:	0040097d 	.word	0x0040097d
  400a18:	00402571 	.word	0x00402571
  400a1c:	20000ba8 	.word	0x20000ba8
  400a20:	20000bb4 	.word	0x20000bb4
  400a24:	00400895 	.word	0x00400895

00400a28 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  400a28:	b580      	push	{r7, lr}
  400a2a:	b084      	sub	sp, #16
  400a2c:	af00      	add	r7, sp, #0
  400a2e:	6039      	str	r1, [r7, #0]
  400a30:	4613      	mov	r3, r2
  400a32:	4602      	mov	r2, r0
  400a34:	71fa      	strb	r2, [r7, #7]
  400a36:	71bb      	strb	r3, [r7, #6]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
  400a38:	79bb      	ldrb	r3, [r7, #6]
  400a3a:	2b81      	cmp	r3, #129	; 0x81
  400a3c:	d102      	bne.n	400a44 <udi_cdc_data_sent+0x1c>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
  400a3e:	2300      	movs	r3, #0
  400a40:	73fb      	strb	r3, [r7, #15]
  400a42:	e002      	b.n	400a4a <udi_cdc_data_sent+0x22>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
  400a44:	2300      	movs	r3, #0
  400a46:	73fb      	strb	r3, [r7, #15]
		break;
  400a48:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400a4a:	79fb      	ldrb	r3, [r7, #7]
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	d000      	beq.n	400a52 <udi_cdc_data_sent+0x2a>
		// Abort transfer
		return;
  400a50:	e01c      	b.n	400a8c <udi_cdc_data_sent+0x64>
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400a52:	7bf9      	ldrb	r1, [r7, #15]
  400a54:	7bfb      	ldrb	r3, [r7, #15]
  400a56:	4a0f      	ldr	r2, [pc, #60]	; (400a94 <udi_cdc_data_sent+0x6c>)
  400a58:	5cd3      	ldrb	r3, [r2, r3]
  400a5a:	b2db      	uxtb	r3, r3
  400a5c:	2b00      	cmp	r3, #0
  400a5e:	bf14      	ite	ne
  400a60:	2300      	movne	r3, #0
  400a62:	2301      	moveq	r3, #1
  400a64:	b2db      	uxtb	r3, r3
  400a66:	461a      	mov	r2, r3
  400a68:	4b0b      	ldr	r3, [pc, #44]	; (400a98 <udi_cdc_data_sent+0x70>)
  400a6a:	0049      	lsls	r1, r1, #1
  400a6c:	440a      	add	r2, r1
  400a6e:	2100      	movs	r1, #0
  400a70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400a74:	7bfb      	ldrb	r3, [r7, #15]
  400a76:	4a09      	ldr	r2, [pc, #36]	; (400a9c <udi_cdc_data_sent+0x74>)
  400a78:	2100      	movs	r1, #0
  400a7a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
  400a7c:	7bfb      	ldrb	r3, [r7, #15]
  400a7e:	4a08      	ldr	r2, [pc, #32]	; (400aa0 <udi_cdc_data_sent+0x78>)
  400a80:	2100      	movs	r1, #0
  400a82:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  400a84:	7bfb      	ldrb	r3, [r7, #15]
  400a86:	4618      	mov	r0, r3
  400a88:	4b06      	ldr	r3, [pc, #24]	; (400aa4 <udi_cdc_data_sent+0x7c>)
  400a8a:	4798      	blx	r3
}
  400a8c:	3710      	adds	r7, #16
  400a8e:	46bd      	mov	sp, r7
  400a90:	bd80      	pop	{r7, pc}
  400a92:	bf00      	nop
  400a94:	20000c3c 	.word	0x20000c3c
  400a98:	20000c38 	.word	0x20000c38
  400a9c:	20000c48 	.word	0x20000c48
  400aa0:	20000c44 	.word	0x20000c44
  400aa4:	00400aa9 	.word	0x00400aa9

00400aa8 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
  400aa8:	b590      	push	{r4, r7, lr}
  400aaa:	b089      	sub	sp, #36	; 0x24
  400aac:	af02      	add	r7, sp, #8
  400aae:	4603      	mov	r3, r0
  400ab0:	71fb      	strb	r3, [r7, #7]
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400ab2:	2300      	movs	r3, #0
  400ab4:	757b      	strb	r3, [r7, #21]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400ab6:	7d7b      	ldrb	r3, [r7, #21]
  400ab8:	4a5f      	ldr	r2, [pc, #380]	; (400c38 <udi_cdc_tx_send+0x190>)
  400aba:	5cd3      	ldrb	r3, [r2, r3]
  400abc:	b2db      	uxtb	r3, r3
  400abe:	2b00      	cmp	r3, #0
  400ac0:	d000      	beq.n	400ac4 <udi_cdc_tx_send+0x1c>
		return; // Already on going or wait next SOF to send next data
  400ac2:	e0b5      	b.n	400c30 <udi_cdc_tx_send+0x188>
	}
	if (udd_is_high_speed()) {
  400ac4:	4b5d      	ldr	r3, [pc, #372]	; (400c3c <udi_cdc_tx_send+0x194>)
  400ac6:	4798      	blx	r3
  400ac8:	4603      	mov	r3, r0
  400aca:	2b00      	cmp	r3, #0
  400acc:	d009      	beq.n	400ae2 <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400ace:	7d7a      	ldrb	r2, [r7, #21]
  400ad0:	4b5b      	ldr	r3, [pc, #364]	; (400c40 <udi_cdc_tx_send+0x198>)
  400ad2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
  400ad6:	4b5b      	ldr	r3, [pc, #364]	; (400c44 <udi_cdc_tx_send+0x19c>)
  400ad8:	4798      	blx	r3
  400ada:	4603      	mov	r3, r0
  400adc:	429c      	cmp	r4, r3
  400ade:	d10a      	bne.n	400af6 <udi_cdc_tx_send+0x4e>
			return; // Wait next SOF to send next data
  400ae0:	e0a6      	b.n	400c30 <udi_cdc_tx_send+0x188>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400ae2:	7d7a      	ldrb	r2, [r7, #21]
  400ae4:	4b56      	ldr	r3, [pc, #344]	; (400c40 <udi_cdc_tx_send+0x198>)
  400ae6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
  400aea:	4b57      	ldr	r3, [pc, #348]	; (400c48 <udi_cdc_tx_send+0x1a0>)
  400aec:	4798      	blx	r3
  400aee:	4603      	mov	r3, r0
  400af0:	429c      	cmp	r4, r3
  400af2:	d100      	bne.n	400af6 <udi_cdc_tx_send+0x4e>
			return; // Wait next SOF to send next data
  400af4:	e09c      	b.n	400c30 <udi_cdc_tx_send+0x188>
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
  400af6:	4b55      	ldr	r3, [pc, #340]	; (400c4c <udi_cdc_tx_send+0x1a4>)
  400af8:	4798      	blx	r3
  400afa:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400afc:	7d7b      	ldrb	r3, [r7, #21]
  400afe:	4a54      	ldr	r2, [pc, #336]	; (400c50 <udi_cdc_tx_send+0x1a8>)
  400b00:	5cd3      	ldrb	r3, [r2, r3]
  400b02:	75fb      	strb	r3, [r7, #23]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400b04:	7d79      	ldrb	r1, [r7, #21]
  400b06:	7dfa      	ldrb	r2, [r7, #23]
  400b08:	4b52      	ldr	r3, [pc, #328]	; (400c54 <udi_cdc_tx_send+0x1ac>)
  400b0a:	0049      	lsls	r1, r1, #1
  400b0c:	440a      	add	r2, r1
  400b0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400b12:	2b00      	cmp	r3, #0
  400b14:	d11f      	bne.n	400b56 <udi_cdc_tx_send+0xae>
		sof_zlp_counter++;
  400b16:	4b50      	ldr	r3, [pc, #320]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b18:	881b      	ldrh	r3, [r3, #0]
  400b1a:	3301      	adds	r3, #1
  400b1c:	b29a      	uxth	r2, r3
  400b1e:	4b4e      	ldr	r3, [pc, #312]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b20:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  400b22:	4b46      	ldr	r3, [pc, #280]	; (400c3c <udi_cdc_tx_send+0x194>)
  400b24:	4798      	blx	r3
  400b26:	4603      	mov	r3, r0
  400b28:	f083 0301 	eor.w	r3, r3, #1
  400b2c:	b2db      	uxtb	r3, r3
  400b2e:	2b00      	cmp	r3, #0
  400b30:	d003      	beq.n	400b3a <udi_cdc_tx_send+0x92>
  400b32:	4b49      	ldr	r3, [pc, #292]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b34:	881b      	ldrh	r3, [r3, #0]
  400b36:	2b63      	cmp	r3, #99	; 0x63
  400b38:	d909      	bls.n	400b4e <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  400b3a:	4b40      	ldr	r3, [pc, #256]	; (400c3c <udi_cdc_tx_send+0x194>)
  400b3c:	4798      	blx	r3
  400b3e:	4603      	mov	r3, r0
  400b40:	2b00      	cmp	r3, #0
  400b42:	d008      	beq.n	400b56 <udi_cdc_tx_send+0xae>
  400b44:	4b44      	ldr	r3, [pc, #272]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b46:	881b      	ldrh	r3, [r3, #0]
  400b48:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  400b4c:	d203      	bcs.n	400b56 <udi_cdc_tx_send+0xae>
			cpu_irq_restore(flags);
  400b4e:	6938      	ldr	r0, [r7, #16]
  400b50:	4b42      	ldr	r3, [pc, #264]	; (400c5c <udi_cdc_tx_send+0x1b4>)
  400b52:	4798      	blx	r3
			return;
  400b54:	e06c      	b.n	400c30 <udi_cdc_tx_send+0x188>
		}
	}
	sof_zlp_counter = 0;
  400b56:	4b40      	ldr	r3, [pc, #256]	; (400c58 <udi_cdc_tx_send+0x1b0>)
  400b58:	2200      	movs	r2, #0
  400b5a:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400b5c:	7d7b      	ldrb	r3, [r7, #21]
  400b5e:	4a40      	ldr	r2, [pc, #256]	; (400c60 <udi_cdc_tx_send+0x1b8>)
  400b60:	5cd3      	ldrb	r3, [r2, r3]
  400b62:	b2db      	uxtb	r3, r3
  400b64:	f083 0301 	eor.w	r3, r3, #1
  400b68:	b2db      	uxtb	r3, r3
  400b6a:	2b00      	cmp	r3, #0
  400b6c:	d00a      	beq.n	400b84 <udi_cdc_tx_send+0xdc>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400b6e:	7d7b      	ldrb	r3, [r7, #21]
  400b70:	7dfa      	ldrb	r2, [r7, #23]
  400b72:	2a00      	cmp	r2, #0
  400b74:	bf14      	ite	ne
  400b76:	2200      	movne	r2, #0
  400b78:	2201      	moveq	r2, #1
  400b7a:	b2d2      	uxtb	r2, r2
  400b7c:	4611      	mov	r1, r2
  400b7e:	4a34      	ldr	r2, [pc, #208]	; (400c50 <udi_cdc_tx_send+0x1a8>)
  400b80:	54d1      	strb	r1, [r2, r3]
  400b82:	e006      	b.n	400b92 <udi_cdc_tx_send+0xea>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  400b84:	7dfb      	ldrb	r3, [r7, #23]
  400b86:	2b00      	cmp	r3, #0
  400b88:	bf14      	ite	ne
  400b8a:	2300      	movne	r3, #0
  400b8c:	2301      	moveq	r3, #1
  400b8e:	b2db      	uxtb	r3, r3
  400b90:	75fb      	strb	r3, [r7, #23]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  400b92:	7d7b      	ldrb	r3, [r7, #21]
  400b94:	4a28      	ldr	r2, [pc, #160]	; (400c38 <udi_cdc_tx_send+0x190>)
  400b96:	2101      	movs	r1, #1
  400b98:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  400b9a:	6938      	ldr	r0, [r7, #16]
  400b9c:	4b2f      	ldr	r3, [pc, #188]	; (400c5c <udi_cdc_tx_send+0x1b4>)
  400b9e:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  400ba0:	7d79      	ldrb	r1, [r7, #21]
  400ba2:	7dfa      	ldrb	r2, [r7, #23]
  400ba4:	4b2b      	ldr	r3, [pc, #172]	; (400c54 <udi_cdc_tx_send+0x1ac>)
  400ba6:	0049      	lsls	r1, r1, #1
  400ba8:	440a      	add	r2, r1
  400baa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400bae:	2b40      	cmp	r3, #64	; 0x40
  400bb0:	bf0c      	ite	eq
  400bb2:	2300      	moveq	r3, #0
  400bb4:	2301      	movne	r3, #1
  400bb6:	73fb      	strb	r3, [r7, #15]
	if (b_short_packet) {
  400bb8:	7bfb      	ldrb	r3, [r7, #15]
  400bba:	2b00      	cmp	r3, #0
  400bbc:	d016      	beq.n	400bec <udi_cdc_tx_send+0x144>
		if (udd_is_high_speed()) {
  400bbe:	4b1f      	ldr	r3, [pc, #124]	; (400c3c <udi_cdc_tx_send+0x194>)
  400bc0:	4798      	blx	r3
  400bc2:	4603      	mov	r3, r0
  400bc4:	2b00      	cmp	r3, #0
  400bc6:	d008      	beq.n	400bda <udi_cdc_tx_send+0x132>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  400bc8:	7d7c      	ldrb	r4, [r7, #21]
  400bca:	4b1e      	ldr	r3, [pc, #120]	; (400c44 <udi_cdc_tx_send+0x19c>)
  400bcc:	4798      	blx	r3
  400bce:	4603      	mov	r3, r0
  400bd0:	461a      	mov	r2, r3
  400bd2:	4b1b      	ldr	r3, [pc, #108]	; (400c40 <udi_cdc_tx_send+0x198>)
  400bd4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  400bd8:	e00d      	b.n	400bf6 <udi_cdc_tx_send+0x14e>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400bda:	7d7c      	ldrb	r4, [r7, #21]
  400bdc:	4b1a      	ldr	r3, [pc, #104]	; (400c48 <udi_cdc_tx_send+0x1a0>)
  400bde:	4798      	blx	r3
  400be0:	4603      	mov	r3, r0
  400be2:	461a      	mov	r2, r3
  400be4:	4b16      	ldr	r3, [pc, #88]	; (400c40 <udi_cdc_tx_send+0x198>)
  400be6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  400bea:	e004      	b.n	400bf6 <udi_cdc_tx_send+0x14e>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400bec:	7d7a      	ldrb	r2, [r7, #21]
  400bee:	4b14      	ldr	r3, [pc, #80]	; (400c40 <udi_cdc_tx_send+0x198>)
  400bf0:	2100      	movs	r1, #0
  400bf2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	}

	// Send the buffer with enable of short packet
	switch (port) {
  400bf6:	7d7b      	ldrb	r3, [r7, #21]
  400bf8:	2b00      	cmp	r3, #0
  400bfa:	d102      	bne.n	400c02 <udi_cdc_tx_send+0x15a>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
  400bfc:	2381      	movs	r3, #129	; 0x81
  400bfe:	75bb      	strb	r3, [r7, #22]
  400c00:	e002      	b.n	400c08 <udi_cdc_tx_send+0x160>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
  400c02:	2381      	movs	r3, #129	; 0x81
  400c04:	75bb      	strb	r3, [r7, #22]
		break;
  400c06:	bf00      	nop
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
  400c08:	7d7a      	ldrb	r2, [r7, #21]
  400c0a:	7dfb      	ldrb	r3, [r7, #23]
  400c0c:	0052      	lsls	r2, r2, #1
  400c0e:	4413      	add	r3, r2
  400c10:	019a      	lsls	r2, r3, #6
  400c12:	4b14      	ldr	r3, [pc, #80]	; (400c64 <udi_cdc_tx_send+0x1bc>)
  400c14:	441a      	add	r2, r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400c16:	7d78      	ldrb	r0, [r7, #21]
  400c18:	7df9      	ldrb	r1, [r7, #23]
  400c1a:	4b0e      	ldr	r3, [pc, #56]	; (400c54 <udi_cdc_tx_send+0x1ac>)
  400c1c:	0040      	lsls	r0, r0, #1
  400c1e:	4401      	add	r1, r0
  400c20:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  400c24:	7db8      	ldrb	r0, [r7, #22]
  400c26:	7bf9      	ldrb	r1, [r7, #15]
  400c28:	4c0f      	ldr	r4, [pc, #60]	; (400c68 <udi_cdc_tx_send+0x1c0>)
  400c2a:	9400      	str	r4, [sp, #0]
  400c2c:	4c0f      	ldr	r4, [pc, #60]	; (400c6c <udi_cdc_tx_send+0x1c4>)
  400c2e:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  400c30:	371c      	adds	r7, #28
  400c32:	46bd      	mov	sp, r7
  400c34:	bd90      	pop	{r4, r7, pc}
  400c36:	bf00      	nop
  400c38:	20000c44 	.word	0x20000c44
  400c3c:	0040202d 	.word	0x0040202d
  400c40:	20000c40 	.word	0x20000c40
  400c44:	004020f1 	.word	0x004020f1
  400c48:	004020d1 	.word	0x004020d1
  400c4c:	0040046d 	.word	0x0040046d
  400c50:	20000c3c 	.word	0x20000c3c
  400c54:	20000c38 	.word	0x20000c38
  400c58:	20000c4e 	.word	0x20000c4e
  400c5c:	004004c5 	.word	0x004004c5
  400c60:	20000c48 	.word	0x20000c48
  400c64:	20000bb8 	.word	0x20000bb8
  400c68:	00400a29 	.word	0x00400a29
  400c6c:	00402571 	.word	0x00402571

00400c70 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  400c70:	b580      	push	{r7, lr}
  400c72:	b086      	sub	sp, #24
  400c74:	af00      	add	r7, sp, #0
  400c76:	4603      	mov	r3, r0
  400c78:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400c7a:	2300      	movs	r3, #0
  400c7c:	75fb      	strb	r3, [r7, #23]
#endif
	flags = cpu_irq_save();
  400c7e:	4b0f      	ldr	r3, [pc, #60]	; (400cbc <udi_cdc_multi_get_nb_received_data+0x4c>)
  400c80:	4798      	blx	r3
  400c82:	6138      	str	r0, [r7, #16]
	pos = udi_cdc_rx_pos[port];
  400c84:	7dfa      	ldrb	r2, [r7, #23]
  400c86:	4b0e      	ldr	r3, [pc, #56]	; (400cc0 <udi_cdc_multi_get_nb_received_data+0x50>)
  400c88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400c8c:	81fb      	strh	r3, [r7, #14]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400c8e:	7df9      	ldrb	r1, [r7, #23]
  400c90:	7dfb      	ldrb	r3, [r7, #23]
  400c92:	4a0c      	ldr	r2, [pc, #48]	; (400cc4 <udi_cdc_multi_get_nb_received_data+0x54>)
  400c94:	5cd3      	ldrb	r3, [r2, r3]
  400c96:	b2db      	uxtb	r3, r3
  400c98:	461a      	mov	r2, r3
  400c9a:	4b0b      	ldr	r3, [pc, #44]	; (400cc8 <udi_cdc_multi_get_nb_received_data+0x58>)
  400c9c:	0049      	lsls	r1, r1, #1
  400c9e:	440a      	add	r2, r1
  400ca0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400ca4:	461a      	mov	r2, r3
  400ca6:	89fb      	ldrh	r3, [r7, #14]
  400ca8:	1ad3      	subs	r3, r2, r3
  400caa:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
  400cac:	6938      	ldr	r0, [r7, #16]
  400cae:	4b07      	ldr	r3, [pc, #28]	; (400ccc <udi_cdc_multi_get_nb_received_data+0x5c>)
  400cb0:	4798      	blx	r3
	return nb_received;
  400cb2:	68bb      	ldr	r3, [r7, #8]
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	3718      	adds	r7, #24
  400cb8:	46bd      	mov	sp, r7
  400cba:	bd80      	pop	{r7, pc}
  400cbc:	0040046d 	.word	0x0040046d
  400cc0:	20000bb0 	.word	0x20000bb0
  400cc4:	20000bac 	.word	0x20000bac
  400cc8:	20000ba8 	.word	0x20000ba8
  400ccc:	004004c5 	.word	0x004004c5

00400cd0 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400cd0:	b580      	push	{r7, lr}
  400cd2:	b082      	sub	sp, #8
  400cd4:	af00      	add	r7, sp, #0
  400cd6:	4603      	mov	r3, r0
  400cd8:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400cda:	79fb      	ldrb	r3, [r7, #7]
  400cdc:	4618      	mov	r0, r3
  400cde:	4b06      	ldr	r3, [pc, #24]	; (400cf8 <udi_cdc_multi_is_rx_ready+0x28>)
  400ce0:	4798      	blx	r3
  400ce2:	4603      	mov	r3, r0
  400ce4:	2b00      	cmp	r3, #0
  400ce6:	bf0c      	ite	eq
  400ce8:	2300      	moveq	r3, #0
  400cea:	2301      	movne	r3, #1
  400cec:	b2db      	uxtb	r3, r3
}
  400cee:	4618      	mov	r0, r3
  400cf0:	3708      	adds	r7, #8
  400cf2:	46bd      	mov	sp, r7
  400cf4:	bd80      	pop	{r7, pc}
  400cf6:	bf00      	nop
  400cf8:	00400c71 	.word	0x00400c71

00400cfc <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
  400cfc:	b580      	push	{r7, lr}
  400cfe:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_rx_ready(0);
  400d00:	2000      	movs	r0, #0
  400d02:	4b02      	ldr	r3, [pc, #8]	; (400d0c <udi_cdc_is_rx_ready+0x10>)
  400d04:	4798      	blx	r3
  400d06:	4603      	mov	r3, r0
}
  400d08:	4618      	mov	r0, r3
  400d0a:	bd80      	pop	{r7, pc}
  400d0c:	00400cd1 	.word	0x00400cd1

00400d10 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
  400d10:	b580      	push	{r7, lr}
  400d12:	b086      	sub	sp, #24
  400d14:	af00      	add	r7, sp, #0
  400d16:	4603      	mov	r3, r0
  400d18:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	int rx_data = 0;
  400d1a:	2300      	movs	r3, #0
  400d1c:	617b      	str	r3, [r7, #20]
	bool b_databit_9;
	uint16_t pos;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400d1e:	2300      	movs	r3, #0
  400d20:	74bb      	strb	r3, [r7, #18]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400d22:	7cba      	ldrb	r2, [r7, #18]
  400d24:	492a      	ldr	r1, [pc, #168]	; (400dd0 <udi_cdc_multi_getc+0xc0>)
  400d26:	4613      	mov	r3, r2
  400d28:	00db      	lsls	r3, r3, #3
  400d2a:	1a9b      	subs	r3, r3, r2
  400d2c:	440b      	add	r3, r1
  400d2e:	799b      	ldrb	r3, [r3, #6]
  400d30:	2b09      	cmp	r3, #9
  400d32:	bf14      	ite	ne
  400d34:	2300      	movne	r3, #0
  400d36:	2301      	moveq	r3, #1
  400d38:	74fb      	strb	r3, [r7, #19]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
  400d3a:	4b26      	ldr	r3, [pc, #152]	; (400dd4 <udi_cdc_multi_getc+0xc4>)
  400d3c:	4798      	blx	r3
  400d3e:	60f8      	str	r0, [r7, #12]
	pos = udi_cdc_rx_pos[port];
  400d40:	7cba      	ldrb	r2, [r7, #18]
  400d42:	4b25      	ldr	r3, [pc, #148]	; (400dd8 <udi_cdc_multi_getc+0xc8>)
  400d44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400d48:	817b      	strh	r3, [r7, #10]
	buf_sel = udi_cdc_rx_buf_sel[port];
  400d4a:	7cbb      	ldrb	r3, [r7, #18]
  400d4c:	4a23      	ldr	r2, [pc, #140]	; (400ddc <udi_cdc_multi_getc+0xcc>)
  400d4e:	5cd3      	ldrb	r3, [r2, r3]
  400d50:	727b      	strb	r3, [r7, #9]
	cpu_irq_restore(flags);
  400d52:	68f8      	ldr	r0, [r7, #12]
  400d54:	4b22      	ldr	r3, [pc, #136]	; (400de0 <udi_cdc_multi_getc+0xd0>)
  400d56:	4798      	blx	r3
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
  400d58:	bf00      	nop
  400d5a:	7cb9      	ldrb	r1, [r7, #18]
  400d5c:	7a7a      	ldrb	r2, [r7, #9]
  400d5e:	4b21      	ldr	r3, [pc, #132]	; (400de4 <udi_cdc_multi_getc+0xd4>)
  400d60:	0049      	lsls	r1, r1, #1
  400d62:	440a      	add	r2, r1
  400d64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400d68:	897a      	ldrh	r2, [r7, #10]
  400d6a:	429a      	cmp	r2, r3
  400d6c:	d30a      	bcc.n	400d84 <udi_cdc_multi_getc+0x74>
		if (!udi_cdc_data_running) {
  400d6e:	4b1e      	ldr	r3, [pc, #120]	; (400de8 <udi_cdc_multi_getc+0xd8>)
  400d70:	781b      	ldrb	r3, [r3, #0]
  400d72:	b2db      	uxtb	r3, r3
  400d74:	f083 0301 	eor.w	r3, r3, #1
  400d78:	b2db      	uxtb	r3, r3
  400d7a:	2b00      	cmp	r3, #0
  400d7c:	d001      	beq.n	400d82 <udi_cdc_multi_getc+0x72>
			return 0;
  400d7e:	2300      	movs	r3, #0
  400d80:	e022      	b.n	400dc8 <udi_cdc_multi_getc+0xb8>
		}
		goto udi_cdc_getc_process_one_byte;
  400d82:	e7da      	b.n	400d3a <udi_cdc_multi_getc+0x2a>
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400d84:	7cb8      	ldrb	r0, [r7, #18]
  400d86:	7a79      	ldrb	r1, [r7, #9]
  400d88:	897b      	ldrh	r3, [r7, #10]
  400d8a:	4a18      	ldr	r2, [pc, #96]	; (400dec <udi_cdc_multi_getc+0xdc>)
  400d8c:	0040      	lsls	r0, r0, #1
  400d8e:	4401      	add	r1, r0
  400d90:	0189      	lsls	r1, r1, #6
  400d92:	440b      	add	r3, r1
  400d94:	4413      	add	r3, r2
  400d96:	781b      	ldrb	r3, [r3, #0]
  400d98:	697a      	ldr	r2, [r7, #20]
  400d9a:	4313      	orrs	r3, r2
  400d9c:	617b      	str	r3, [r7, #20]
	udi_cdc_rx_pos[port] = pos+1;
  400d9e:	7cba      	ldrb	r2, [r7, #18]
  400da0:	897b      	ldrh	r3, [r7, #10]
  400da2:	3301      	adds	r3, #1
  400da4:	b299      	uxth	r1, r3
  400da6:	4b0c      	ldr	r3, [pc, #48]	; (400dd8 <udi_cdc_multi_getc+0xc8>)
  400da8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	udi_cdc_rx_start(port);
  400dac:	7cbb      	ldrb	r3, [r7, #18]
  400dae:	4618      	mov	r0, r3
  400db0:	4b0f      	ldr	r3, [pc, #60]	; (400df0 <udi_cdc_multi_getc+0xe0>)
  400db2:	4798      	blx	r3

	if (b_databit_9) {
  400db4:	7cfb      	ldrb	r3, [r7, #19]
  400db6:	2b00      	cmp	r3, #0
  400db8:	d005      	beq.n	400dc6 <udi_cdc_multi_getc+0xb6>
		// Receive MSB
		b_databit_9 = false;
  400dba:	2300      	movs	r3, #0
  400dbc:	74fb      	strb	r3, [r7, #19]
		rx_data = rx_data << 8;
  400dbe:	697b      	ldr	r3, [r7, #20]
  400dc0:	021b      	lsls	r3, r3, #8
  400dc2:	617b      	str	r3, [r7, #20]
		goto udi_cdc_getc_process_one_byte;
  400dc4:	e7b9      	b.n	400d3a <udi_cdc_multi_getc+0x2a>
	}
	return rx_data;
  400dc6:	697b      	ldr	r3, [r7, #20]
}
  400dc8:	4618      	mov	r0, r3
  400dca:	3718      	adds	r7, #24
  400dcc:	46bd      	mov	sp, r7
  400dce:	bd80      	pop	{r7, pc}
  400dd0:	20000b0c 	.word	0x20000b0c
  400dd4:	0040046d 	.word	0x0040046d
  400dd8:	20000bb0 	.word	0x20000bb0
  400ddc:	20000bac 	.word	0x20000bac
  400de0:	004004c5 	.word	0x004004c5
  400de4:	20000ba8 	.word	0x20000ba8
  400de8:	20000b26 	.word	0x20000b26
  400dec:	20000b28 	.word	0x20000b28
  400df0:	00400895 	.word	0x00400895

00400df4 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  400df4:	b580      	push	{r7, lr}
  400df6:	af00      	add	r7, sp, #0
	return udi_cdc_multi_getc(0);
  400df8:	2000      	movs	r0, #0
  400dfa:	4b02      	ldr	r3, [pc, #8]	; (400e04 <udi_cdc_getc+0x10>)
  400dfc:	4798      	blx	r3
  400dfe:	4603      	mov	r3, r0
}
  400e00:	4618      	mov	r0, r3
  400e02:	bd80      	pop	{r7, pc}
  400e04:	00400d11 	.word	0x00400d11

00400e08 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  400e08:	b580      	push	{r7, lr}
  400e0a:	b088      	sub	sp, #32
  400e0c:	af00      	add	r7, sp, #0
  400e0e:	4603      	mov	r3, r0
  400e10:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	iram_size_t buf_sel_nb, buf_nosel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400e12:	2300      	movs	r3, #0
  400e14:	76fb      	strb	r3, [r7, #27]
#endif

	flags = cpu_irq_save();
  400e16:	4b28      	ldr	r3, [pc, #160]	; (400eb8 <udi_cdc_multi_get_free_tx_buffer+0xb0>)
  400e18:	4798      	blx	r3
  400e1a:	6178      	str	r0, [r7, #20]
	buf_sel = udi_cdc_tx_buf_sel[port];
  400e1c:	7efb      	ldrb	r3, [r7, #27]
  400e1e:	4a27      	ldr	r2, [pc, #156]	; (400ebc <udi_cdc_multi_get_free_tx_buffer+0xb4>)
  400e20:	5cd3      	ldrb	r3, [r2, r3]
  400e22:	74fb      	strb	r3, [r7, #19]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400e24:	7ef9      	ldrb	r1, [r7, #27]
  400e26:	7cfa      	ldrb	r2, [r7, #19]
  400e28:	4b25      	ldr	r3, [pc, #148]	; (400ec0 <udi_cdc_multi_get_free_tx_buffer+0xb8>)
  400e2a:	0049      	lsls	r1, r1, #1
  400e2c:	440a      	add	r2, r1
  400e2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400e32:	61fb      	str	r3, [r7, #28]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
  400e34:	7ef9      	ldrb	r1, [r7, #27]
  400e36:	7cfb      	ldrb	r3, [r7, #19]
  400e38:	2b00      	cmp	r3, #0
  400e3a:	bf14      	ite	ne
  400e3c:	2300      	movne	r3, #0
  400e3e:	2301      	moveq	r3, #1
  400e40:	b2db      	uxtb	r3, r3
  400e42:	461a      	mov	r2, r3
  400e44:	4b1e      	ldr	r3, [pc, #120]	; (400ec0 <udi_cdc_multi_get_free_tx_buffer+0xb8>)
  400e46:	0049      	lsls	r1, r1, #1
  400e48:	440a      	add	r2, r1
  400e4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  400e4e:	60fb      	str	r3, [r7, #12]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  400e50:	69fb      	ldr	r3, [r7, #28]
  400e52:	2b40      	cmp	r3, #64	; 0x40
  400e54:	d123      	bne.n	400e9e <udi_cdc_multi_get_free_tx_buffer+0x96>
		if ((!udi_cdc_tx_trans_ongoing[port])
  400e56:	7efb      	ldrb	r3, [r7, #27]
  400e58:	4a1a      	ldr	r2, [pc, #104]	; (400ec4 <udi_cdc_multi_get_free_tx_buffer+0xbc>)
  400e5a:	5cd3      	ldrb	r3, [r2, r3]
  400e5c:	b2db      	uxtb	r3, r3
  400e5e:	f083 0301 	eor.w	r3, r3, #1
  400e62:	b2db      	uxtb	r3, r3
  400e64:	2b00      	cmp	r3, #0
  400e66:	d01a      	beq.n	400e9e <udi_cdc_multi_get_free_tx_buffer+0x96>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  400e68:	7efb      	ldrb	r3, [r7, #27]
  400e6a:	4a17      	ldr	r2, [pc, #92]	; (400ec8 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
  400e6c:	5cd3      	ldrb	r3, [r2, r3]
  400e6e:	b2db      	uxtb	r3, r3
  400e70:	f083 0301 	eor.w	r3, r3, #1
  400e74:	b2db      	uxtb	r3, r3
  400e76:	2b00      	cmp	r3, #0
  400e78:	d011      	beq.n	400e9e <udi_cdc_multi_get_free_tx_buffer+0x96>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
  400e7a:	7efb      	ldrb	r3, [r7, #27]
  400e7c:	4a12      	ldr	r2, [pc, #72]	; (400ec8 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
  400e7e:	2101      	movs	r1, #1
  400e80:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400e82:	7efb      	ldrb	r3, [r7, #27]
  400e84:	7cfa      	ldrb	r2, [r7, #19]
  400e86:	2a00      	cmp	r2, #0
  400e88:	bf14      	ite	ne
  400e8a:	2200      	movne	r2, #0
  400e8c:	2201      	moveq	r2, #1
  400e8e:	b2d2      	uxtb	r2, r2
  400e90:	4611      	mov	r1, r2
  400e92:	4a0a      	ldr	r2, [pc, #40]	; (400ebc <udi_cdc_multi_get_free_tx_buffer+0xb4>)
  400e94:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
  400e96:	2300      	movs	r3, #0
  400e98:	61fb      	str	r3, [r7, #28]
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
  400e9a:	2340      	movs	r3, #64	; 0x40
  400e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  400e9e:	69fb      	ldr	r3, [r7, #28]
  400ea0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  400ea4:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
  400ea6:	6978      	ldr	r0, [r7, #20]
  400ea8:	4b08      	ldr	r3, [pc, #32]	; (400ecc <udi_cdc_multi_get_free_tx_buffer+0xc4>)
  400eaa:	4798      	blx	r3
	return retval;
  400eac:	68bb      	ldr	r3, [r7, #8]
}
  400eae:	4618      	mov	r0, r3
  400eb0:	3720      	adds	r7, #32
  400eb2:	46bd      	mov	sp, r7
  400eb4:	bd80      	pop	{r7, pc}
  400eb6:	bf00      	nop
  400eb8:	0040046d 	.word	0x0040046d
  400ebc:	20000c3c 	.word	0x20000c3c
  400ec0:	20000c38 	.word	0x20000c38
  400ec4:	20000c44 	.word	0x20000c44
  400ec8:	20000c48 	.word	0x20000c48
  400ecc:	004004c5 	.word	0x004004c5

00400ed0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  400ed0:	b580      	push	{r7, lr}
  400ed2:	b082      	sub	sp, #8
  400ed4:	af00      	add	r7, sp, #0
  400ed6:	4603      	mov	r3, r0
  400ed8:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  400eda:	79fb      	ldrb	r3, [r7, #7]
  400edc:	4618      	mov	r0, r3
  400ede:	4b06      	ldr	r3, [pc, #24]	; (400ef8 <udi_cdc_multi_is_tx_ready+0x28>)
  400ee0:	4798      	blx	r3
  400ee2:	4603      	mov	r3, r0
  400ee4:	2b00      	cmp	r3, #0
  400ee6:	bf0c      	ite	eq
  400ee8:	2300      	moveq	r3, #0
  400eea:	2301      	movne	r3, #1
  400eec:	b2db      	uxtb	r3, r3
}
  400eee:	4618      	mov	r0, r3
  400ef0:	3708      	adds	r7, #8
  400ef2:	46bd      	mov	sp, r7
  400ef4:	bd80      	pop	{r7, pc}
  400ef6:	bf00      	nop
  400ef8:	00400e09 	.word	0x00400e09

00400efc <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
  400efc:	b580      	push	{r7, lr}
  400efe:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_tx_ready(0);
  400f00:	2000      	movs	r0, #0
  400f02:	4b02      	ldr	r3, [pc, #8]	; (400f0c <udi_cdc_is_tx_ready+0x10>)
  400f04:	4798      	blx	r3
  400f06:	4603      	mov	r3, r0
}
  400f08:	4618      	mov	r0, r3
  400f0a:	bd80      	pop	{r7, pc}
  400f0c:	00400ed1 	.word	0x00400ed1

00400f10 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
  400f10:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f12:	b087      	sub	sp, #28
  400f14:	af00      	add	r7, sp, #0
  400f16:	4603      	mov	r3, r0
  400f18:	6039      	str	r1, [r7, #0]
  400f1a:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  400f1c:	2300      	movs	r3, #0
  400f1e:	75bb      	strb	r3, [r7, #22]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400f20:	7dba      	ldrb	r2, [r7, #22]
  400f22:	4929      	ldr	r1, [pc, #164]	; (400fc8 <udi_cdc_multi_putc+0xb8>)
  400f24:	4613      	mov	r3, r2
  400f26:	00db      	lsls	r3, r3, #3
  400f28:	1a9b      	subs	r3, r3, r2
  400f2a:	440b      	add	r3, r1
  400f2c:	799b      	ldrb	r3, [r3, #6]
  400f2e:	2b09      	cmp	r3, #9
  400f30:	bf14      	ite	ne
  400f32:	2300      	movne	r3, #0
  400f34:	2301      	moveq	r3, #1
  400f36:	75fb      	strb	r3, [r7, #23]

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400f38:	7dbb      	ldrb	r3, [r7, #22]
  400f3a:	4618      	mov	r0, r3
  400f3c:	4b23      	ldr	r3, [pc, #140]	; (400fcc <udi_cdc_multi_putc+0xbc>)
  400f3e:	4798      	blx	r3
  400f40:	4603      	mov	r3, r0
  400f42:	f083 0301 	eor.w	r3, r3, #1
  400f46:	b2db      	uxtb	r3, r3
  400f48:	2b00      	cmp	r3, #0
  400f4a:	d00a      	beq.n	400f62 <udi_cdc_multi_putc+0x52>
		if (!udi_cdc_data_running) {
  400f4c:	4b20      	ldr	r3, [pc, #128]	; (400fd0 <udi_cdc_multi_putc+0xc0>)
  400f4e:	781b      	ldrb	r3, [r3, #0]
  400f50:	b2db      	uxtb	r3, r3
  400f52:	f083 0301 	eor.w	r3, r3, #1
  400f56:	b2db      	uxtb	r3, r3
  400f58:	2b00      	cmp	r3, #0
  400f5a:	d001      	beq.n	400f60 <udi_cdc_multi_putc+0x50>
			return false;
  400f5c:	2300      	movs	r3, #0
  400f5e:	e02e      	b.n	400fbe <udi_cdc_multi_putc+0xae>
		}
		goto udi_cdc_putc_process_one_byte;
  400f60:	e7ea      	b.n	400f38 <udi_cdc_multi_putc+0x28>
	}

	// Write value
	flags = cpu_irq_save();
  400f62:	4b1c      	ldr	r3, [pc, #112]	; (400fd4 <udi_cdc_multi_putc+0xc4>)
  400f64:	4798      	blx	r3
  400f66:	6138      	str	r0, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
  400f68:	7dbb      	ldrb	r3, [r7, #22]
  400f6a:	4a1b      	ldr	r2, [pc, #108]	; (400fd8 <udi_cdc_multi_putc+0xc8>)
  400f6c:	5cd3      	ldrb	r3, [r2, r3]
  400f6e:	73fb      	strb	r3, [r7, #15]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400f70:	7dbc      	ldrb	r4, [r7, #22]
  400f72:	7bf8      	ldrb	r0, [r7, #15]
  400f74:	7db9      	ldrb	r1, [r7, #22]
  400f76:	7bfa      	ldrb	r2, [r7, #15]
  400f78:	4b18      	ldr	r3, [pc, #96]	; (400fdc <udi_cdc_multi_putc+0xcc>)
  400f7a:	004d      	lsls	r5, r1, #1
  400f7c:	4415      	add	r5, r2
  400f7e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  400f82:	1c5d      	adds	r5, r3, #1
  400f84:	b2ae      	uxth	r6, r5
  400f86:	4d15      	ldr	r5, [pc, #84]	; (400fdc <udi_cdc_multi_putc+0xcc>)
  400f88:	0049      	lsls	r1, r1, #1
  400f8a:	440a      	add	r2, r1
  400f8c:	4631      	mov	r1, r6
  400f8e:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
  400f92:	683a      	ldr	r2, [r7, #0]
  400f94:	b2d2      	uxtb	r2, r2
  400f96:	4912      	ldr	r1, [pc, #72]	; (400fe0 <udi_cdc_multi_putc+0xd0>)
  400f98:	0064      	lsls	r4, r4, #1
  400f9a:	4420      	add	r0, r4
  400f9c:	0180      	lsls	r0, r0, #6
  400f9e:	4403      	add	r3, r0
  400fa0:	440b      	add	r3, r1
  400fa2:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
  400fa4:	6938      	ldr	r0, [r7, #16]
  400fa6:	4b0f      	ldr	r3, [pc, #60]	; (400fe4 <udi_cdc_multi_putc+0xd4>)
  400fa8:	4798      	blx	r3

	if (b_databit_9) {
  400faa:	7dfb      	ldrb	r3, [r7, #23]
  400fac:	2b00      	cmp	r3, #0
  400fae:	d005      	beq.n	400fbc <udi_cdc_multi_putc+0xac>
		// Send MSB
		b_databit_9 = false;
  400fb0:	2300      	movs	r3, #0
  400fb2:	75fb      	strb	r3, [r7, #23]
		value = value >> 8;
  400fb4:	683b      	ldr	r3, [r7, #0]
  400fb6:	121b      	asrs	r3, r3, #8
  400fb8:	603b      	str	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
  400fba:	e7bd      	b.n	400f38 <udi_cdc_multi_putc+0x28>
	}
	return true;
  400fbc:	2301      	movs	r3, #1
}
  400fbe:	4618      	mov	r0, r3
  400fc0:	371c      	adds	r7, #28
  400fc2:	46bd      	mov	sp, r7
  400fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400fc6:	bf00      	nop
  400fc8:	20000b0c 	.word	0x20000b0c
  400fcc:	00400ed1 	.word	0x00400ed1
  400fd0:	20000b26 	.word	0x20000b26
  400fd4:	0040046d 	.word	0x0040046d
  400fd8:	20000c3c 	.word	0x20000c3c
  400fdc:	20000c38 	.word	0x20000c38
  400fe0:	20000bb8 	.word	0x20000bb8
  400fe4:	004004c5 	.word	0x004004c5

00400fe8 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  400fe8:	b580      	push	{r7, lr}
  400fea:	b082      	sub	sp, #8
  400fec:	af00      	add	r7, sp, #0
  400fee:	6078      	str	r0, [r7, #4]
	return udi_cdc_multi_putc(0, value);
  400ff0:	2000      	movs	r0, #0
  400ff2:	6879      	ldr	r1, [r7, #4]
  400ff4:	4b03      	ldr	r3, [pc, #12]	; (401004 <udi_cdc_putc+0x1c>)
  400ff6:	4798      	blx	r3
  400ff8:	4603      	mov	r3, r0
}
  400ffa:	4618      	mov	r0, r3
  400ffc:	3708      	adds	r7, #8
  400ffe:	46bd      	mov	sp, r7
  401000:	bd80      	pop	{r7, pc}
  401002:	bf00      	nop
  401004:	00400f11 	.word	0x00400f11

00401008 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
  401008:	b480      	push	{r7}
  40100a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  40100c:	4b06      	ldr	r3, [pc, #24]	; (401028 <udc_get_eof_conf+0x20>)
  40100e:	681b      	ldr	r3, [r3, #0]
  401010:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  401012:	4b05      	ldr	r3, [pc, #20]	; (401028 <udc_get_eof_conf+0x20>)
  401014:	681b      	ldr	r3, [r3, #0]
  401016:	681b      	ldr	r3, [r3, #0]
  401018:	885b      	ldrh	r3, [r3, #2]
  40101a:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  40101c:	4413      	add	r3, r2
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
  40101e:	4618      	mov	r0, r3
  401020:	46bd      	mov	sp, r7
  401022:	f85d 7b04 	ldr.w	r7, [sp], #4
  401026:	4770      	bx	lr
  401028:	20000c5c 	.word	0x20000c5c

0040102c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
  40102c:	b580      	push	{r7, lr}
  40102e:	b084      	sub	sp, #16
  401030:	af00      	add	r7, sp, #0
  401032:	6078      	str	r0, [r7, #4]
  401034:	460b      	mov	r3, r1
  401036:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
  401038:	4b11      	ldr	r3, [pc, #68]	; (401080 <udc_next_desc_in_iface+0x54>)
  40103a:	4798      	blx	r3
  40103c:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  40103e:	687b      	ldr	r3, [r7, #4]
  401040:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401042:	687a      	ldr	r2, [r7, #4]
  401044:	4413      	add	r3, r2
  401046:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  401048:	e010      	b.n	40106c <udc_next_desc_in_iface+0x40>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40104a:	687b      	ldr	r3, [r7, #4]
  40104c:	785b      	ldrb	r3, [r3, #1]
  40104e:	2b04      	cmp	r3, #4
  401050:	d100      	bne.n	401054 <udc_next_desc_in_iface+0x28>
			break; // End of global interface descriptor
  401052:	e00f      	b.n	401074 <udc_next_desc_in_iface+0x48>
		}
		if (desc_id == desc->bDescriptorType) {
  401054:	687b      	ldr	r3, [r7, #4]
  401056:	785b      	ldrb	r3, [r3, #1]
  401058:	78fa      	ldrb	r2, [r7, #3]
  40105a:	429a      	cmp	r2, r3
  40105c:	d101      	bne.n	401062 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
  40105e:	687b      	ldr	r3, [r7, #4]
  401060:	e009      	b.n	401076 <udc_next_desc_in_iface+0x4a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  401062:	687b      	ldr	r3, [r7, #4]
  401064:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401066:	687a      	ldr	r2, [r7, #4]
  401068:	4413      	add	r3, r2
  40106a:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  40106c:	68fa      	ldr	r2, [r7, #12]
  40106e:	687b      	ldr	r3, [r7, #4]
  401070:	429a      	cmp	r2, r3
  401072:	d8ea      	bhi.n	40104a <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  401074:	2300      	movs	r3, #0
}
  401076:	4618      	mov	r0, r3
  401078:	3710      	adds	r7, #16
  40107a:	46bd      	mov	sp, r7
  40107c:	bd80      	pop	{r7, pc}
  40107e:	bf00      	nop
  401080:	00401009 	.word	0x00401009

00401084 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  401084:	b580      	push	{r7, lr}
  401086:	b084      	sub	sp, #16
  401088:	af00      	add	r7, sp, #0
  40108a:	4602      	mov	r2, r0
  40108c:	460b      	mov	r3, r1
  40108e:	71fa      	strb	r2, [r7, #7]
  401090:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  401092:	4b1e      	ldr	r3, [pc, #120]	; (40110c <udc_update_iface_desc+0x88>)
  401094:	781b      	ldrb	r3, [r3, #0]
  401096:	2b00      	cmp	r3, #0
  401098:	d101      	bne.n	40109e <udc_update_iface_desc+0x1a>
		return false;
  40109a:	2300      	movs	r3, #0
  40109c:	e032      	b.n	401104 <udc_update_iface_desc+0x80>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40109e:	4b1c      	ldr	r3, [pc, #112]	; (401110 <udc_update_iface_desc+0x8c>)
  4010a0:	681b      	ldr	r3, [r3, #0]
  4010a2:	681b      	ldr	r3, [r3, #0]
  4010a4:	791b      	ldrb	r3, [r3, #4]
  4010a6:	79fa      	ldrb	r2, [r7, #7]
  4010a8:	429a      	cmp	r2, r3
  4010aa:	d301      	bcc.n	4010b0 <udc_update_iface_desc+0x2c>
		return false;
  4010ac:	2300      	movs	r3, #0
  4010ae:	e029      	b.n	401104 <udc_update_iface_desc+0x80>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
  4010b0:	4b17      	ldr	r3, [pc, #92]	; (401110 <udc_update_iface_desc+0x8c>)
  4010b2:	681b      	ldr	r3, [r3, #0]
  4010b4:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  4010b6:	4b17      	ldr	r3, [pc, #92]	; (401114 <udc_update_iface_desc+0x90>)
  4010b8:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
  4010ba:	4b17      	ldr	r3, [pc, #92]	; (401118 <udc_update_iface_desc+0x94>)
  4010bc:	4798      	blx	r3
  4010be:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
  4010c0:	e01a      	b.n	4010f8 <udc_update_iface_desc+0x74>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  4010c2:	4b14      	ldr	r3, [pc, #80]	; (401114 <udc_update_iface_desc+0x90>)
  4010c4:	681b      	ldr	r3, [r3, #0]
  4010c6:	785b      	ldrb	r3, [r3, #1]
  4010c8:	2b04      	cmp	r3, #4
  4010ca:	d10d      	bne.n	4010e8 <udc_update_iface_desc+0x64>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4010cc:	4b11      	ldr	r3, [pc, #68]	; (401114 <udc_update_iface_desc+0x90>)
  4010ce:	681b      	ldr	r3, [r3, #0]
  4010d0:	789b      	ldrb	r3, [r3, #2]
  4010d2:	79fa      	ldrb	r2, [r7, #7]
  4010d4:	429a      	cmp	r2, r3
  4010d6:	d107      	bne.n	4010e8 <udc_update_iface_desc+0x64>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
  4010d8:	4b0e      	ldr	r3, [pc, #56]	; (401114 <udc_update_iface_desc+0x90>)
  4010da:	681b      	ldr	r3, [r3, #0]
  4010dc:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4010de:	79ba      	ldrb	r2, [r7, #6]
  4010e0:	429a      	cmp	r2, r3
  4010e2:	d101      	bne.n	4010e8 <udc_update_iface_desc+0x64>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  4010e4:	2301      	movs	r3, #1
  4010e6:	e00d      	b.n	401104 <udc_update_iface_desc+0x80>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  4010e8:	4b0a      	ldr	r3, [pc, #40]	; (401114 <udc_update_iface_desc+0x90>)
  4010ea:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
  4010ec:	4b09      	ldr	r3, [pc, #36]	; (401114 <udc_update_iface_desc+0x90>)
  4010ee:	681b      	ldr	r3, [r3, #0]
  4010f0:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  4010f2:	441a      	add	r2, r3
  4010f4:	4b07      	ldr	r3, [pc, #28]	; (401114 <udc_update_iface_desc+0x90>)
  4010f6:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
  4010f8:	4b06      	ldr	r3, [pc, #24]	; (401114 <udc_update_iface_desc+0x90>)
  4010fa:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  4010fc:	68fa      	ldr	r2, [r7, #12]
  4010fe:	429a      	cmp	r2, r3
  401100:	d8df      	bhi.n	4010c2 <udc_update_iface_desc+0x3e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  401102:	2300      	movs	r3, #0
}
  401104:	4618      	mov	r0, r3
  401106:	3710      	adds	r7, #16
  401108:	46bd      	mov	sp, r7
  40110a:	bd80      	pop	{r7, pc}
  40110c:	20000c58 	.word	0x20000c58
  401110:	20000c5c 	.word	0x20000c5c
  401114:	20000c60 	.word	0x20000c60
  401118:	00401009 	.word	0x00401009

0040111c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  40111c:	b580      	push	{r7, lr}
  40111e:	b084      	sub	sp, #16
  401120:	af00      	add	r7, sp, #0
  401122:	4603      	mov	r3, r0
  401124:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401126:	79fb      	ldrb	r3, [r7, #7]
  401128:	4618      	mov	r0, r3
  40112a:	2100      	movs	r1, #0
  40112c:	4b1e      	ldr	r3, [pc, #120]	; (4011a8 <udc_iface_disable+0x8c>)
  40112e:	4798      	blx	r3
  401130:	4603      	mov	r3, r0
  401132:	f083 0301 	eor.w	r3, r3, #1
  401136:	b2db      	uxtb	r3, r3
  401138:	2b00      	cmp	r3, #0
  40113a:	d001      	beq.n	401140 <udc_iface_disable+0x24>
		return false;
  40113c:	2300      	movs	r3, #0
  40113e:	e02f      	b.n	4011a0 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401140:	4b1a      	ldr	r3, [pc, #104]	; (4011ac <udc_iface_disable+0x90>)
  401142:	681b      	ldr	r3, [r3, #0]
  401144:	685a      	ldr	r2, [r3, #4]
  401146:	79fb      	ldrb	r3, [r7, #7]
  401148:	009b      	lsls	r3, r3, #2
  40114a:	4413      	add	r3, r2
  40114c:	681b      	ldr	r3, [r3, #0]
  40114e:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401150:	68bb      	ldr	r3, [r7, #8]
  401152:	68db      	ldr	r3, [r3, #12]
  401154:	4798      	blx	r3
  401156:	4603      	mov	r3, r0
  401158:	79fa      	ldrb	r2, [r7, #7]
  40115a:	4610      	mov	r0, r2
  40115c:	4619      	mov	r1, r3
  40115e:	4b12      	ldr	r3, [pc, #72]	; (4011a8 <udc_iface_disable+0x8c>)
  401160:	4798      	blx	r3
  401162:	4603      	mov	r3, r0
  401164:	f083 0301 	eor.w	r3, r3, #1
  401168:	b2db      	uxtb	r3, r3
  40116a:	2b00      	cmp	r3, #0
  40116c:	d001      	beq.n	401172 <udc_iface_disable+0x56>
		return false;
  40116e:	2300      	movs	r3, #0
  401170:	e016      	b.n	4011a0 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  401172:	4b0f      	ldr	r3, [pc, #60]	; (4011b0 <udc_iface_disable+0x94>)
  401174:	681b      	ldr	r3, [r3, #0]
  401176:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401178:	68f8      	ldr	r0, [r7, #12]
  40117a:	2105      	movs	r1, #5
  40117c:	4b0d      	ldr	r3, [pc, #52]	; (4011b4 <udc_iface_disable+0x98>)
  40117e:	4798      	blx	r3
  401180:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  401182:	68fb      	ldr	r3, [r7, #12]
  401184:	2b00      	cmp	r3, #0
  401186:	d105      	bne.n	401194 <udc_iface_disable+0x78>
				break;
  401188:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
  40118a:	68bb      	ldr	r3, [r7, #8]
  40118c:	685b      	ldr	r3, [r3, #4]
  40118e:	4798      	blx	r3
	return true;
  401190:	2301      	movs	r3, #1
  401192:	e005      	b.n	4011a0 <udc_iface_disable+0x84>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  401194:	68fb      	ldr	r3, [r7, #12]
  401196:	789b      	ldrb	r3, [r3, #2]
  401198:	4618      	mov	r0, r3
  40119a:	4b07      	ldr	r3, [pc, #28]	; (4011b8 <udc_iface_disable+0x9c>)
  40119c:	4798      	blx	r3
		}
  40119e:	e7eb      	b.n	401178 <udc_iface_disable+0x5c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
  4011a0:	4618      	mov	r0, r3
  4011a2:	3710      	adds	r7, #16
  4011a4:	46bd      	mov	sp, r7
  4011a6:	bd80      	pop	{r7, pc}
  4011a8:	00401085 	.word	0x00401085
  4011ac:	20000c5c 	.word	0x20000c5c
  4011b0:	20000c60 	.word	0x20000c60
  4011b4:	0040102d 	.word	0x0040102d
  4011b8:	004022a9 	.word	0x004022a9

004011bc <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  4011bc:	b580      	push	{r7, lr}
  4011be:	b084      	sub	sp, #16
  4011c0:	af00      	add	r7, sp, #0
  4011c2:	4602      	mov	r2, r0
  4011c4:	460b      	mov	r3, r1
  4011c6:	71fa      	strb	r2, [r7, #7]
  4011c8:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4011ca:	79fa      	ldrb	r2, [r7, #7]
  4011cc:	79bb      	ldrb	r3, [r7, #6]
  4011ce:	4610      	mov	r0, r2
  4011d0:	4619      	mov	r1, r3
  4011d2:	4b1d      	ldr	r3, [pc, #116]	; (401248 <udc_iface_enable+0x8c>)
  4011d4:	4798      	blx	r3
  4011d6:	4603      	mov	r3, r0
  4011d8:	f083 0301 	eor.w	r3, r3, #1
  4011dc:	b2db      	uxtb	r3, r3
  4011de:	2b00      	cmp	r3, #0
  4011e0:	d001      	beq.n	4011e6 <udc_iface_enable+0x2a>
		return false;
  4011e2:	2300      	movs	r3, #0
  4011e4:	e02b      	b.n	40123e <udc_iface_enable+0x82>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4011e6:	4b19      	ldr	r3, [pc, #100]	; (40124c <udc_iface_enable+0x90>)
  4011e8:	681b      	ldr	r3, [r3, #0]
  4011ea:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4011ec:	68f8      	ldr	r0, [r7, #12]
  4011ee:	2105      	movs	r1, #5
  4011f0:	4b17      	ldr	r3, [pc, #92]	; (401250 <udc_iface_enable+0x94>)
  4011f2:	4798      	blx	r3
  4011f4:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  4011f6:	68fb      	ldr	r3, [r7, #12]
  4011f8:	2b00      	cmp	r3, #0
  4011fa:	d10b      	bne.n	401214 <udc_iface_enable+0x58>
			break;
  4011fc:	bf00      	nop
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  4011fe:	4b15      	ldr	r3, [pc, #84]	; (401254 <udc_iface_enable+0x98>)
  401200:	681b      	ldr	r3, [r3, #0]
  401202:	685a      	ldr	r2, [r3, #4]
  401204:	79fb      	ldrb	r3, [r7, #7]
  401206:	009b      	lsls	r3, r3, #2
  401208:	4413      	add	r3, r2
  40120a:	681b      	ldr	r3, [r3, #0]
  40120c:	681b      	ldr	r3, [r3, #0]
  40120e:	4798      	blx	r3
  401210:	4603      	mov	r3, r0
  401212:	e014      	b.n	40123e <udc_iface_enable+0x82>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  401214:	68fb      	ldr	r3, [r7, #12]
  401216:	7899      	ldrb	r1, [r3, #2]
  401218:	68fb      	ldr	r3, [r7, #12]
  40121a:	78da      	ldrb	r2, [r3, #3]
  40121c:	68fb      	ldr	r3, [r7, #12]
  40121e:	889b      	ldrh	r3, [r3, #4]
  401220:	b29b      	uxth	r3, r3
  401222:	4608      	mov	r0, r1
  401224:	4611      	mov	r1, r2
  401226:	461a      	mov	r2, r3
  401228:	4b0b      	ldr	r3, [pc, #44]	; (401258 <udc_iface_enable+0x9c>)
  40122a:	4798      	blx	r3
  40122c:	4603      	mov	r3, r0
  40122e:	f083 0301 	eor.w	r3, r3, #1
  401232:	b2db      	uxtb	r3, r3
  401234:	2b00      	cmp	r3, #0
  401236:	d001      	beq.n	40123c <udc_iface_enable+0x80>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
  401238:	2300      	movs	r3, #0
  40123a:	e000      	b.n	40123e <udc_iface_enable+0x82>
		}
	}
  40123c:	e7d6      	b.n	4011ec <udc_iface_enable+0x30>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
  40123e:	4618      	mov	r0, r3
  401240:	3710      	adds	r7, #16
  401242:	46bd      	mov	sp, r7
  401244:	bd80      	pop	{r7, pc}
  401246:	bf00      	nop
  401248:	00401085 	.word	0x00401085
  40124c:	20000c60 	.word	0x20000c60
  401250:	0040102d 	.word	0x0040102d
  401254:	20000c5c 	.word	0x20000c5c
  401258:	00402129 	.word	0x00402129

0040125c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  40125c:	b580      	push	{r7, lr}
  40125e:	af00      	add	r7, sp, #0
	udd_enable();
  401260:	4b01      	ldr	r3, [pc, #4]	; (401268 <udc_start+0xc>)
  401262:	4798      	blx	r3
}
  401264:	bd80      	pop	{r7, pc}
  401266:	bf00      	nop
  401268:	00401f3d 	.word	0x00401f3d

0040126c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  40126c:	b580      	push	{r7, lr}
  40126e:	b082      	sub	sp, #8
  401270:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  401272:	4b0f      	ldr	r3, [pc, #60]	; (4012b0 <udc_reset+0x44>)
  401274:	781b      	ldrb	r3, [r3, #0]
  401276:	2b00      	cmp	r3, #0
  401278:	d010      	beq.n	40129c <udc_reset+0x30>
		for (iface_num = 0;
  40127a:	2300      	movs	r3, #0
  40127c:	71fb      	strb	r3, [r7, #7]
  40127e:	e006      	b.n	40128e <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  401280:	79fb      	ldrb	r3, [r7, #7]
  401282:	4618      	mov	r0, r3
  401284:	4b0b      	ldr	r3, [pc, #44]	; (4012b4 <udc_reset+0x48>)
  401286:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  401288:	79fb      	ldrb	r3, [r7, #7]
  40128a:	3301      	adds	r3, #1
  40128c:	71fb      	strb	r3, [r7, #7]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40128e:	4b0a      	ldr	r3, [pc, #40]	; (4012b8 <udc_reset+0x4c>)
  401290:	681b      	ldr	r3, [r3, #0]
  401292:	681b      	ldr	r3, [r3, #0]
  401294:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401296:	79fa      	ldrb	r2, [r7, #7]
  401298:	429a      	cmp	r2, r3
  40129a:	d3f1      	bcc.n	401280 <udc_reset+0x14>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  40129c:	4b04      	ldr	r3, [pc, #16]	; (4012b0 <udc_reset+0x44>)
  40129e:	2200      	movs	r2, #0
  4012a0:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  4012a2:	4b06      	ldr	r3, [pc, #24]	; (4012bc <udc_reset+0x50>)
  4012a4:	2201      	movs	r2, #1
  4012a6:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
  4012a8:	3708      	adds	r7, #8
  4012aa:	46bd      	mov	sp, r7
  4012ac:	bd80      	pop	{r7, pc}
  4012ae:	bf00      	nop
  4012b0:	20000c58 	.word	0x20000c58
  4012b4:	0040111d 	.word	0x0040111d
  4012b8:	20000c5c 	.word	0x20000c5c
  4012bc:	20000c50 	.word	0x20000c50

004012c0 <udc_sof_notify>:

void udc_sof_notify(void)
{
  4012c0:	b580      	push	{r7, lr}
  4012c2:	b082      	sub	sp, #8
  4012c4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  4012c6:	4b13      	ldr	r3, [pc, #76]	; (401314 <udc_sof_notify+0x54>)
  4012c8:	781b      	ldrb	r3, [r3, #0]
  4012ca:	2b00      	cmp	r3, #0
  4012cc:	d01f      	beq.n	40130e <udc_sof_notify+0x4e>
		for (iface_num = 0;
  4012ce:	2300      	movs	r3, #0
  4012d0:	71fb      	strb	r3, [r7, #7]
  4012d2:	e015      	b.n	401300 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  4012d4:	4b10      	ldr	r3, [pc, #64]	; (401318 <udc_sof_notify+0x58>)
  4012d6:	681b      	ldr	r3, [r3, #0]
  4012d8:	685a      	ldr	r2, [r3, #4]
  4012da:	79fb      	ldrb	r3, [r7, #7]
  4012dc:	009b      	lsls	r3, r3, #2
  4012de:	4413      	add	r3, r2
  4012e0:	681b      	ldr	r3, [r3, #0]
  4012e2:	691b      	ldr	r3, [r3, #16]
  4012e4:	2b00      	cmp	r3, #0
  4012e6:	d008      	beq.n	4012fa <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  4012e8:	4b0b      	ldr	r3, [pc, #44]	; (401318 <udc_sof_notify+0x58>)
  4012ea:	681b      	ldr	r3, [r3, #0]
  4012ec:	685a      	ldr	r2, [r3, #4]
  4012ee:	79fb      	ldrb	r3, [r7, #7]
  4012f0:	009b      	lsls	r3, r3, #2
  4012f2:	4413      	add	r3, r2
  4012f4:	681b      	ldr	r3, [r3, #0]
  4012f6:	691b      	ldr	r3, [r3, #16]
  4012f8:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  4012fa:	79fb      	ldrb	r3, [r7, #7]
  4012fc:	3301      	adds	r3, #1
  4012fe:	71fb      	strb	r3, [r7, #7]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401300:	4b05      	ldr	r3, [pc, #20]	; (401318 <udc_sof_notify+0x58>)
  401302:	681b      	ldr	r3, [r3, #0]
  401304:	681b      	ldr	r3, [r3, #0]
  401306:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401308:	79fa      	ldrb	r2, [r7, #7]
  40130a:	429a      	cmp	r2, r3
  40130c:	d3e2      	bcc.n	4012d4 <udc_sof_notify+0x14>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
  40130e:	3708      	adds	r7, #8
  401310:	46bd      	mov	sp, r7
  401312:	bd80      	pop	{r7, pc}
  401314:	20000c58 	.word	0x20000c58
  401318:	20000c5c 	.word	0x20000c5c

0040131c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
  40131c:	b580      	push	{r7, lr}
  40131e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  401320:	4b06      	ldr	r3, [pc, #24]	; (40133c <udc_req_std_dev_get_status+0x20>)
  401322:	88db      	ldrh	r3, [r3, #6]
  401324:	2b02      	cmp	r3, #2
  401326:	d001      	beq.n	40132c <udc_req_std_dev_get_status+0x10>
		return false;
  401328:	2300      	movs	r3, #0
  40132a:	e004      	b.n	401336 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  40132c:	4804      	ldr	r0, [pc, #16]	; (401340 <udc_req_std_dev_get_status+0x24>)
  40132e:	2102      	movs	r1, #2
  401330:	4b04      	ldr	r3, [pc, #16]	; (401344 <udc_req_std_dev_get_status+0x28>)
  401332:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  401334:	2301      	movs	r3, #1
}
  401336:	4618      	mov	r0, r3
  401338:	bd80      	pop	{r7, pc}
  40133a:	bf00      	nop
  40133c:	20014f88 	.word	0x20014f88
  401340:	20000c50 	.word	0x20000c50
  401344:	00402101 	.word	0x00402101

00401348 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
  401348:	b580      	push	{r7, lr}
  40134a:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  40134c:	4b0b      	ldr	r3, [pc, #44]	; (40137c <udc_req_std_ep_get_status+0x34>)
  40134e:	88db      	ldrh	r3, [r3, #6]
  401350:	2b02      	cmp	r3, #2
  401352:	d001      	beq.n	401358 <udc_req_std_ep_get_status+0x10>
		return false;
  401354:	2300      	movs	r3, #0
  401356:	e00e      	b.n	401376 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  401358:	4b08      	ldr	r3, [pc, #32]	; (40137c <udc_req_std_ep_get_status+0x34>)
  40135a:	889b      	ldrh	r3, [r3, #4]
  40135c:	b2db      	uxtb	r3, r3
  40135e:	4618      	mov	r0, r3
  401360:	4b07      	ldr	r3, [pc, #28]	; (401380 <udc_req_std_ep_get_status+0x38>)
  401362:	4798      	blx	r3
  401364:	4603      	mov	r3, r0
  401366:	461a      	mov	r2, r3
  401368:	4b06      	ldr	r3, [pc, #24]	; (401384 <udc_req_std_ep_get_status+0x3c>)
  40136a:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  40136c:	4805      	ldr	r0, [pc, #20]	; (401384 <udc_req_std_ep_get_status+0x3c>)
  40136e:	2102      	movs	r1, #2
  401370:	4b05      	ldr	r3, [pc, #20]	; (401388 <udc_req_std_ep_get_status+0x40>)
  401372:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  401374:	2301      	movs	r3, #1
}
  401376:	4618      	mov	r0, r3
  401378:	bd80      	pop	{r7, pc}
  40137a:	bf00      	nop
  40137c:	20014f88 	.word	0x20014f88
  401380:	004022f1 	.word	0x004022f1
  401384:	20000c64 	.word	0x20000c64
  401388:	00402101 	.word	0x00402101

0040138c <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
  40138c:	b480      	push	{r7}
  40138e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401390:	4b0c      	ldr	r3, [pc, #48]	; (4013c4 <udc_req_std_dev_clear_feature+0x38>)
  401392:	88db      	ldrh	r3, [r3, #6]
  401394:	2b00      	cmp	r3, #0
  401396:	d001      	beq.n	40139c <udc_req_std_dev_clear_feature+0x10>
		return false;
  401398:	2300      	movs	r3, #0
  40139a:	e00d      	b.n	4013b8 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  40139c:	4b09      	ldr	r3, [pc, #36]	; (4013c4 <udc_req_std_dev_clear_feature+0x38>)
  40139e:	885b      	ldrh	r3, [r3, #2]
  4013a0:	2b01      	cmp	r3, #1
  4013a2:	d108      	bne.n	4013b6 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  4013a4:	4b08      	ldr	r3, [pc, #32]	; (4013c8 <udc_req_std_dev_clear_feature+0x3c>)
  4013a6:	881b      	ldrh	r3, [r3, #0]
  4013a8:	f023 0302 	bic.w	r3, r3, #2
  4013ac:	b29a      	uxth	r2, r3
  4013ae:	4b06      	ldr	r3, [pc, #24]	; (4013c8 <udc_req_std_dev_clear_feature+0x3c>)
  4013b0:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  4013b2:	2301      	movs	r3, #1
  4013b4:	e000      	b.n	4013b8 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
  4013b6:	2300      	movs	r3, #0
}
  4013b8:	4618      	mov	r0, r3
  4013ba:	46bd      	mov	sp, r7
  4013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013c0:	4770      	bx	lr
  4013c2:	bf00      	nop
  4013c4:	20014f88 	.word	0x20014f88
  4013c8:	20000c50 	.word	0x20000c50

004013cc <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
  4013cc:	b580      	push	{r7, lr}
  4013ce:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  4013d0:	4b0a      	ldr	r3, [pc, #40]	; (4013fc <udc_req_std_ep_clear_feature+0x30>)
  4013d2:	88db      	ldrh	r3, [r3, #6]
  4013d4:	2b00      	cmp	r3, #0
  4013d6:	d001      	beq.n	4013dc <udc_req_std_ep_clear_feature+0x10>
		return false;
  4013d8:	2300      	movs	r3, #0
  4013da:	e00c      	b.n	4013f6 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4013dc:	4b07      	ldr	r3, [pc, #28]	; (4013fc <udc_req_std_ep_clear_feature+0x30>)
  4013de:	885b      	ldrh	r3, [r3, #2]
  4013e0:	2b00      	cmp	r3, #0
  4013e2:	d107      	bne.n	4013f4 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4013e4:	4b05      	ldr	r3, [pc, #20]	; (4013fc <udc_req_std_ep_clear_feature+0x30>)
  4013e6:	889b      	ldrh	r3, [r3, #4]
  4013e8:	b2db      	uxtb	r3, r3
  4013ea:	4618      	mov	r0, r3
  4013ec:	4b04      	ldr	r3, [pc, #16]	; (401400 <udc_req_std_ep_clear_feature+0x34>)
  4013ee:	4798      	blx	r3
  4013f0:	4603      	mov	r3, r0
  4013f2:	e000      	b.n	4013f6 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
  4013f4:	2300      	movs	r3, #0
}
  4013f6:	4618      	mov	r0, r3
  4013f8:	bd80      	pop	{r7, pc}
  4013fa:	bf00      	nop
  4013fc:	20014f88 	.word	0x20014f88
  401400:	00402459 	.word	0x00402459

00401404 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
  401404:	b480      	push	{r7}
  401406:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401408:	4b09      	ldr	r3, [pc, #36]	; (401430 <udc_req_std_dev_set_feature+0x2c>)
  40140a:	88db      	ldrh	r3, [r3, #6]
  40140c:	2b00      	cmp	r3, #0
  40140e:	d001      	beq.n	401414 <udc_req_std_dev_set_feature+0x10>
		return false;
  401410:	2300      	movs	r3, #0
  401412:	e007      	b.n	401424 <udc_req_std_dev_set_feature+0x20>
	}

	switch (udd_g_ctrlreq.req.wValue) {
  401414:	4b06      	ldr	r3, [pc, #24]	; (401430 <udc_req_std_dev_set_feature+0x2c>)
  401416:	885b      	ldrh	r3, [r3, #2]
  401418:	2b01      	cmp	r3, #1
  40141a:	d002      	beq.n	401422 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
  40141c:	bf00      	nop
	}
	return false;
  40141e:	2300      	movs	r3, #0
  401420:	e000      	b.n	401424 <udc_req_std_dev_set_feature+0x20>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
  401422:	2300      	movs	r3, #0
#endif
	default:
		break;
	}
	return false;
}
  401424:	4618      	mov	r0, r3
  401426:	46bd      	mov	sp, r7
  401428:	f85d 7b04 	ldr.w	r7, [sp], #4
  40142c:	4770      	bx	lr
  40142e:	bf00      	nop
  401430:	20014f88 	.word	0x20014f88

00401434 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
  401434:	b580      	push	{r7, lr}
  401436:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401438:	4b0d      	ldr	r3, [pc, #52]	; (401470 <udc_req_std_ep_set_feature+0x3c>)
  40143a:	88db      	ldrh	r3, [r3, #6]
  40143c:	2b00      	cmp	r3, #0
  40143e:	d001      	beq.n	401444 <udc_req_std_ep_set_feature+0x10>
		return false;
  401440:	2300      	movs	r3, #0
  401442:	e012      	b.n	40146a <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401444:	4b0a      	ldr	r3, [pc, #40]	; (401470 <udc_req_std_ep_set_feature+0x3c>)
  401446:	885b      	ldrh	r3, [r3, #2]
  401448:	2b00      	cmp	r3, #0
  40144a:	d10d      	bne.n	401468 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  40144c:	4b08      	ldr	r3, [pc, #32]	; (401470 <udc_req_std_ep_set_feature+0x3c>)
  40144e:	889b      	ldrh	r3, [r3, #4]
  401450:	b2db      	uxtb	r3, r3
  401452:	4618      	mov	r0, r3
  401454:	4b07      	ldr	r3, [pc, #28]	; (401474 <udc_req_std_ep_set_feature+0x40>)
  401456:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401458:	4b05      	ldr	r3, [pc, #20]	; (401470 <udc_req_std_ep_set_feature+0x3c>)
  40145a:	889b      	ldrh	r3, [r3, #4]
  40145c:	b2db      	uxtb	r3, r3
  40145e:	4618      	mov	r0, r3
  401460:	4b05      	ldr	r3, [pc, #20]	; (401478 <udc_req_std_ep_set_feature+0x44>)
  401462:	4798      	blx	r3
  401464:	4603      	mov	r3, r0
  401466:	e000      	b.n	40146a <udc_req_std_ep_set_feature+0x36>
	}
	return false;
  401468:	2300      	movs	r3, #0
}
  40146a:	4618      	mov	r0, r3
  40146c:	bd80      	pop	{r7, pc}
  40146e:	bf00      	nop
  401470:	20014f88 	.word	0x20014f88
  401474:	004026c9 	.word	0x004026c9
  401478:	00402365 	.word	0x00402365

0040147c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  40147c:	b580      	push	{r7, lr}
  40147e:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  401480:	4b04      	ldr	r3, [pc, #16]	; (401494 <udc_valid_address+0x18>)
  401482:	885b      	ldrh	r3, [r3, #2]
  401484:	b2db      	uxtb	r3, r3
  401486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40148a:	b2db      	uxtb	r3, r3
  40148c:	4618      	mov	r0, r3
  40148e:	4b02      	ldr	r3, [pc, #8]	; (401498 <udc_valid_address+0x1c>)
  401490:	4798      	blx	r3
}
  401492:	bd80      	pop	{r7, pc}
  401494:	20014f88 	.word	0x20014f88
  401498:	0040203d 	.word	0x0040203d

0040149c <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
  40149c:	b480      	push	{r7}
  40149e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  4014a0:	4b07      	ldr	r3, [pc, #28]	; (4014c0 <udc_req_std_dev_set_address+0x24>)
  4014a2:	88db      	ldrh	r3, [r3, #6]
  4014a4:	2b00      	cmp	r3, #0
  4014a6:	d001      	beq.n	4014ac <udc_req_std_dev_set_address+0x10>
		return false;
  4014a8:	2300      	movs	r3, #0
  4014aa:	e003      	b.n	4014b4 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  4014ac:	4b04      	ldr	r3, [pc, #16]	; (4014c0 <udc_req_std_dev_set_address+0x24>)
  4014ae:	4a05      	ldr	r2, [pc, #20]	; (4014c4 <udc_req_std_dev_set_address+0x28>)
  4014b0:	611a      	str	r2, [r3, #16]
	return true;
  4014b2:	2301      	movs	r3, #1
}
  4014b4:	4618      	mov	r0, r3
  4014b6:	46bd      	mov	sp, r7
  4014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014bc:	4770      	bx	lr
  4014be:	bf00      	nop
  4014c0:	20014f88 	.word	0x20014f88
  4014c4:	0040147d 	.word	0x0040147d

004014c8 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
  4014c8:	b580      	push	{r7, lr}
  4014ca:	b084      	sub	sp, #16
  4014cc:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
  4014ce:	2300      	movs	r3, #0
  4014d0:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  4014d2:	4b21      	ldr	r3, [pc, #132]	; (401558 <udc_req_std_dev_get_str_desc+0x90>)
  4014d4:	885b      	ldrh	r3, [r3, #2]
  4014d6:	b2db      	uxtb	r3, r3
  4014d8:	2b01      	cmp	r3, #1
  4014da:	d008      	beq.n	4014ee <udc_req_std_dev_get_str_desc+0x26>
  4014dc:	2b02      	cmp	r3, #2
  4014de:	d00b      	beq.n	4014f8 <udc_req_std_dev_get_str_desc+0x30>
  4014e0:	2b00      	cmp	r3, #0
  4014e2:	d10e      	bne.n	401502 <udc_req_std_dev_get_str_desc+0x3a>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  4014e4:	481d      	ldr	r0, [pc, #116]	; (40155c <udc_req_std_dev_get_str_desc+0x94>)
  4014e6:	2104      	movs	r1, #4
  4014e8:	4b1d      	ldr	r3, [pc, #116]	; (401560 <udc_req_std_dev_get_str_desc+0x98>)
  4014ea:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
  4014ec:	e00b      	b.n	401506 <udc_req_std_dev_get_str_desc+0x3e>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  4014ee:	2307      	movs	r3, #7
  4014f0:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
  4014f2:	4b1c      	ldr	r3, [pc, #112]	; (401564 <udc_req_std_dev_get_str_desc+0x9c>)
  4014f4:	60bb      	str	r3, [r7, #8]
		break;
  4014f6:	e006      	b.n	401506 <udc_req_std_dev_get_str_desc+0x3e>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  4014f8:	230a      	movs	r3, #10
  4014fa:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
  4014fc:	4b1a      	ldr	r3, [pc, #104]	; (401568 <udc_req_std_dev_get_str_desc+0xa0>)
  4014fe:	60bb      	str	r3, [r7, #8]
		break;
  401500:	e001      	b.n	401506 <udc_req_std_dev_get_str_desc+0x3e>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
  401502:	2300      	movs	r3, #0
  401504:	e023      	b.n	40154e <udc_req_std_dev_get_str_desc+0x86>
	}

	if (str_length) {
  401506:	79fb      	ldrb	r3, [r7, #7]
  401508:	2b00      	cmp	r3, #0
  40150a:	d01f      	beq.n	40154c <udc_req_std_dev_get_str_desc+0x84>
		for(i = 0; i < str_length; i++) {
  40150c:	2300      	movs	r3, #0
  40150e:	73fb      	strb	r3, [r7, #15]
  401510:	e00b      	b.n	40152a <udc_req_std_dev_get_str_desc+0x62>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  401512:	7bfb      	ldrb	r3, [r7, #15]
  401514:	7bfa      	ldrb	r2, [r7, #15]
  401516:	68b9      	ldr	r1, [r7, #8]
  401518:	440a      	add	r2, r1
  40151a:	7812      	ldrb	r2, [r2, #0]
  40151c:	4913      	ldr	r1, [pc, #76]	; (40156c <udc_req_std_dev_get_str_desc+0xa4>)
  40151e:	005b      	lsls	r3, r3, #1
  401520:	440b      	add	r3, r1
  401522:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
  401524:	7bfb      	ldrb	r3, [r7, #15]
  401526:	3301      	adds	r3, #1
  401528:	73fb      	strb	r3, [r7, #15]
  40152a:	7bfa      	ldrb	r2, [r7, #15]
  40152c:	79fb      	ldrb	r3, [r7, #7]
  40152e:	429a      	cmp	r2, r3
  401530:	d3ef      	bcc.n	401512 <udc_req_std_dev_get_str_desc+0x4a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  401532:	79fb      	ldrb	r3, [r7, #7]
  401534:	3301      	adds	r3, #1
  401536:	b2db      	uxtb	r3, r3
  401538:	005b      	lsls	r3, r3, #1
  40153a:	b2da      	uxtb	r2, r3
  40153c:	4b0b      	ldr	r3, [pc, #44]	; (40156c <udc_req_std_dev_get_str_desc+0xa4>)
  40153e:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
  401540:	4b0a      	ldr	r3, [pc, #40]	; (40156c <udc_req_std_dev_get_str_desc+0xa4>)
  401542:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
  401544:	4809      	ldr	r0, [pc, #36]	; (40156c <udc_req_std_dev_get_str_desc+0xa4>)
  401546:	4619      	mov	r1, r3
  401548:	4b05      	ldr	r3, [pc, #20]	; (401560 <udc_req_std_dev_get_str_desc+0x98>)
  40154a:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
  40154c:	2301      	movs	r3, #1
}
  40154e:	4618      	mov	r0, r3
  401550:	3710      	adds	r7, #16
  401552:	46bd      	mov	sp, r7
  401554:	bd80      	pop	{r7, pc}
  401556:	bf00      	nop
  401558:	20014f88 	.word	0x20014f88
  40155c:	20000028 	.word	0x20000028
  401560:	00402101 	.word	0x00402101
  401564:	2000002c 	.word	0x2000002c
  401568:	20000034 	.word	0x20000034
  40156c:	20000040 	.word	0x20000040

00401570 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
  401570:	b580      	push	{r7, lr}
  401572:	b082      	sub	sp, #8
  401574:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  401576:	4b41      	ldr	r3, [pc, #260]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  401578:	885b      	ldrh	r3, [r3, #2]
  40157a:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  40157c:	4b3f      	ldr	r3, [pc, #252]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  40157e:	885b      	ldrh	r3, [r3, #2]
  401580:	0a1b      	lsrs	r3, r3, #8
  401582:	b29b      	uxth	r3, r3
  401584:	b2db      	uxtb	r3, r3
  401586:	3b01      	subs	r3, #1
  401588:	2b0e      	cmp	r3, #14
  40158a:	d866      	bhi.n	40165a <udc_req_std_dev_get_descriptor+0xea>
  40158c:	a201      	add	r2, pc, #4	; (adr r2, 401594 <udc_req_std_dev_get_descriptor+0x24>)
  40158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401592:	bf00      	nop
  401594:	004015d1 	.word	0x004015d1
  401598:	004015e5 	.word	0x004015e5
  40159c:	00401645 	.word	0x00401645
  4015a0:	0040165b 	.word	0x0040165b
  4015a4:	0040165b 	.word	0x0040165b
  4015a8:	0040165b 	.word	0x0040165b
  4015ac:	0040165b 	.word	0x0040165b
  4015b0:	0040165b 	.word	0x0040165b
  4015b4:	0040165b 	.word	0x0040165b
  4015b8:	0040165b 	.word	0x0040165b
  4015bc:	0040165b 	.word	0x0040165b
  4015c0:	0040165b 	.word	0x0040165b
  4015c4:	0040165b 	.word	0x0040165b
  4015c8:	0040165b 	.word	0x0040165b
  4015cc:	00401623 	.word	0x00401623
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
  4015d0:	4b2b      	ldr	r3, [pc, #172]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  4015d2:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
  4015d4:	4b2a      	ldr	r3, [pc, #168]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  4015d6:	681b      	ldr	r3, [r3, #0]
  4015d8:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  4015da:	4610      	mov	r0, r2
  4015dc:	4619      	mov	r1, r3
  4015de:	4b29      	ldr	r3, [pc, #164]	; (401684 <udc_req_std_dev_get_descriptor+0x114>)
  4015e0:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
  4015e2:	e03c      	b.n	40165e <udc_req_std_dev_get_descriptor+0xee>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  4015e4:	4b26      	ldr	r3, [pc, #152]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  4015e6:	681b      	ldr	r3, [r3, #0]
  4015e8:	7c5b      	ldrb	r3, [r3, #17]
  4015ea:	79fa      	ldrb	r2, [r7, #7]
  4015ec:	429a      	cmp	r2, r3
  4015ee:	d301      	bcc.n	4015f4 <udc_req_std_dev_get_descriptor+0x84>
					bNumConfigurations) {
				return false;
  4015f0:	2300      	movs	r3, #0
  4015f2:	e03f      	b.n	401674 <udc_req_std_dev_get_descriptor+0x104>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  4015f4:	4b22      	ldr	r3, [pc, #136]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  4015f6:	685a      	ldr	r2, [r3, #4]
  4015f8:	79fb      	ldrb	r3, [r7, #7]
  4015fa:	00db      	lsls	r3, r3, #3
  4015fc:	4413      	add	r3, r2
  4015fe:	681a      	ldr	r2, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  401600:	4b1f      	ldr	r3, [pc, #124]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  401602:	6859      	ldr	r1, [r3, #4]
  401604:	79fb      	ldrb	r3, [r7, #7]
  401606:	00db      	lsls	r3, r3, #3
  401608:	440b      	add	r3, r1
  40160a:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  40160c:	885b      	ldrh	r3, [r3, #2]
  40160e:	b29b      	uxth	r3, r3
  401610:	4610      	mov	r0, r2
  401612:	4619      	mov	r1, r3
  401614:	4b1b      	ldr	r3, [pc, #108]	; (401684 <udc_req_std_dev_get_descriptor+0x114>)
  401616:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  401618:	4b18      	ldr	r3, [pc, #96]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  40161a:	689b      	ldr	r3, [r3, #8]
  40161c:	2202      	movs	r2, #2
  40161e:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
  401620:	e01d      	b.n	40165e <udc_req_std_dev_get_descriptor+0xee>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  401622:	4b17      	ldr	r3, [pc, #92]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  401624:	689b      	ldr	r3, [r3, #8]
  401626:	2b00      	cmp	r3, #0
  401628:	d101      	bne.n	40162e <udc_req_std_dev_get_descriptor+0xbe>
			return false;
  40162a:	2300      	movs	r3, #0
  40162c:	e022      	b.n	401674 <udc_req_std_dev_get_descriptor+0x104>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  40162e:	4b14      	ldr	r3, [pc, #80]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  401630:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
  401632:	4b13      	ldr	r3, [pc, #76]	; (401680 <udc_req_std_dev_get_descriptor+0x110>)
  401634:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  401636:	885b      	ldrh	r3, [r3, #2]
  401638:	b29b      	uxth	r3, r3
  40163a:	4610      	mov	r0, r2
  40163c:	4619      	mov	r1, r3
  40163e:	4b11      	ldr	r3, [pc, #68]	; (401684 <udc_req_std_dev_get_descriptor+0x114>)
  401640:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
  401642:	e00c      	b.n	40165e <udc_req_std_dev_get_descriptor+0xee>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
  401644:	4b10      	ldr	r3, [pc, #64]	; (401688 <udc_req_std_dev_get_descriptor+0x118>)
  401646:	4798      	blx	r3
  401648:	4603      	mov	r3, r0
  40164a:	f083 0301 	eor.w	r3, r3, #1
  40164e:	b2db      	uxtb	r3, r3
  401650:	2b00      	cmp	r3, #0
  401652:	d001      	beq.n	401658 <udc_req_std_dev_get_descriptor+0xe8>
			return false;
  401654:	2300      	movs	r3, #0
  401656:	e00d      	b.n	401674 <udc_req_std_dev_get_descriptor+0x104>
		}
		break;
  401658:	e001      	b.n	40165e <udc_req_std_dev_get_descriptor+0xee>

	default:
		// Unknown descriptor requested
		return false;
  40165a:	2300      	movs	r3, #0
  40165c:	e00a      	b.n	401674 <udc_req_std_dev_get_descriptor+0x104>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  40165e:	4b07      	ldr	r3, [pc, #28]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  401660:	88da      	ldrh	r2, [r3, #6]
  401662:	4b06      	ldr	r3, [pc, #24]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  401664:	899b      	ldrh	r3, [r3, #12]
  401666:	429a      	cmp	r2, r3
  401668:	d203      	bcs.n	401672 <udc_req_std_dev_get_descriptor+0x102>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  40166a:	4b04      	ldr	r3, [pc, #16]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  40166c:	88da      	ldrh	r2, [r3, #6]
  40166e:	4b03      	ldr	r3, [pc, #12]	; (40167c <udc_req_std_dev_get_descriptor+0x10c>)
  401670:	819a      	strh	r2, [r3, #12]
	}
	return true;
  401672:	2301      	movs	r3, #1
}
  401674:	4618      	mov	r0, r3
  401676:	3708      	adds	r7, #8
  401678:	46bd      	mov	sp, r7
  40167a:	bd80      	pop	{r7, pc}
  40167c:	20014f88 	.word	0x20014f88
  401680:	200001f4 	.word	0x200001f4
  401684:	00402101 	.word	0x00402101
  401688:	004014c9 	.word	0x004014c9

0040168c <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
  40168c:	b580      	push	{r7, lr}
  40168e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
  401690:	4b06      	ldr	r3, [pc, #24]	; (4016ac <udc_req_std_dev_get_configuration+0x20>)
  401692:	88db      	ldrh	r3, [r3, #6]
  401694:	2b01      	cmp	r3, #1
  401696:	d001      	beq.n	40169c <udc_req_std_dev_get_configuration+0x10>
		return false;
  401698:	2300      	movs	r3, #0
  40169a:	e004      	b.n	4016a6 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  40169c:	4804      	ldr	r0, [pc, #16]	; (4016b0 <udc_req_std_dev_get_configuration+0x24>)
  40169e:	2101      	movs	r1, #1
  4016a0:	4b04      	ldr	r3, [pc, #16]	; (4016b4 <udc_req_std_dev_get_configuration+0x28>)
  4016a2:	4798      	blx	r3
	return true;
  4016a4:	2301      	movs	r3, #1
}
  4016a6:	4618      	mov	r0, r3
  4016a8:	bd80      	pop	{r7, pc}
  4016aa:	bf00      	nop
  4016ac:	20014f88 	.word	0x20014f88
  4016b0:	20000c58 	.word	0x20000c58
  4016b4:	00402101 	.word	0x00402101

004016b8 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
  4016b8:	b580      	push	{r7, lr}
  4016ba:	b082      	sub	sp, #8
  4016bc:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  4016be:	4b27      	ldr	r3, [pc, #156]	; (40175c <udc_req_std_dev_set_configuration+0xa4>)
  4016c0:	88db      	ldrh	r3, [r3, #6]
  4016c2:	2b00      	cmp	r3, #0
  4016c4:	d001      	beq.n	4016ca <udc_req_std_dev_set_configuration+0x12>
		return false;
  4016c6:	2300      	movs	r3, #0
  4016c8:	e043      	b.n	401752 <udc_req_std_dev_set_configuration+0x9a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  4016ca:	4b25      	ldr	r3, [pc, #148]	; (401760 <udc_req_std_dev_set_configuration+0xa8>)
  4016cc:	4798      	blx	r3
  4016ce:	4603      	mov	r3, r0
  4016d0:	2b00      	cmp	r3, #0
  4016d2:	d101      	bne.n	4016d8 <udc_req_std_dev_set_configuration+0x20>
		return false;
  4016d4:	2300      	movs	r3, #0
  4016d6:	e03c      	b.n	401752 <udc_req_std_dev_set_configuration+0x9a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4016d8:	4b20      	ldr	r3, [pc, #128]	; (40175c <udc_req_std_dev_set_configuration+0xa4>)
  4016da:	885b      	ldrh	r3, [r3, #2]
  4016dc:	b2da      	uxtb	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
  4016de:	4b21      	ldr	r3, [pc, #132]	; (401764 <udc_req_std_dev_set_configuration+0xac>)
  4016e0:	681b      	ldr	r3, [r3, #0]
  4016e2:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4016e4:	429a      	cmp	r2, r3
  4016e6:	dd01      	ble.n	4016ec <udc_req_std_dev_set_configuration+0x34>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
  4016e8:	2300      	movs	r3, #0
  4016ea:	e032      	b.n	401752 <udc_req_std_dev_set_configuration+0x9a>
		}
	}

	// Reset current configuration
	udc_reset();
  4016ec:	4b1e      	ldr	r3, [pc, #120]	; (401768 <udc_req_std_dev_set_configuration+0xb0>)
  4016ee:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  4016f0:	4b1a      	ldr	r3, [pc, #104]	; (40175c <udc_req_std_dev_set_configuration+0xa4>)
  4016f2:	885b      	ldrh	r3, [r3, #2]
  4016f4:	b2da      	uxtb	r2, r3
  4016f6:	4b1d      	ldr	r3, [pc, #116]	; (40176c <udc_req_std_dev_set_configuration+0xb4>)
  4016f8:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  4016fa:	4b1c      	ldr	r3, [pc, #112]	; (40176c <udc_req_std_dev_set_configuration+0xb4>)
  4016fc:	781b      	ldrb	r3, [r3, #0]
  4016fe:	2b00      	cmp	r3, #0
  401700:	d101      	bne.n	401706 <udc_req_std_dev_set_configuration+0x4e>
		return true; // Default empty configuration requested
  401702:	2301      	movs	r3, #1
  401704:	e025      	b.n	401752 <udc_req_std_dev_set_configuration+0x9a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  401706:	4b17      	ldr	r3, [pc, #92]	; (401764 <udc_req_std_dev_set_configuration+0xac>)
  401708:	685a      	ldr	r2, [r3, #4]
  40170a:	4b18      	ldr	r3, [pc, #96]	; (40176c <udc_req_std_dev_set_configuration+0xb4>)
  40170c:	781b      	ldrb	r3, [r3, #0]
  40170e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  401712:	3b01      	subs	r3, #1
  401714:	00db      	lsls	r3, r3, #3
  401716:	441a      	add	r2, r3
  401718:	4b15      	ldr	r3, [pc, #84]	; (401770 <udc_req_std_dev_set_configuration+0xb8>)
  40171a:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40171c:	2300      	movs	r3, #0
  40171e:	71fb      	strb	r3, [r7, #7]
  401720:	e00f      	b.n	401742 <udc_req_std_dev_set_configuration+0x8a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  401722:	79fb      	ldrb	r3, [r7, #7]
  401724:	4618      	mov	r0, r3
  401726:	2100      	movs	r1, #0
  401728:	4b12      	ldr	r3, [pc, #72]	; (401774 <udc_req_std_dev_set_configuration+0xbc>)
  40172a:	4798      	blx	r3
  40172c:	4603      	mov	r3, r0
  40172e:	f083 0301 	eor.w	r3, r3, #1
  401732:	b2db      	uxtb	r3, r3
  401734:	2b00      	cmp	r3, #0
  401736:	d001      	beq.n	40173c <udc_req_std_dev_set_configuration+0x84>
			return false;
  401738:	2300      	movs	r3, #0
  40173a:	e00a      	b.n	401752 <udc_req_std_dev_set_configuration+0x9a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  40173c:	79fb      	ldrb	r3, [r7, #7]
  40173e:	3301      	adds	r3, #1
  401740:	71fb      	strb	r3, [r7, #7]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401742:	4b0b      	ldr	r3, [pc, #44]	; (401770 <udc_req_std_dev_set_configuration+0xb8>)
  401744:	681b      	ldr	r3, [r3, #0]
  401746:	681b      	ldr	r3, [r3, #0]
  401748:	791b      	ldrb	r3, [r3, #4]
  40174a:	79fa      	ldrb	r2, [r7, #7]
  40174c:	429a      	cmp	r2, r3
  40174e:	d3e8      	bcc.n	401722 <udc_req_std_dev_set_configuration+0x6a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
  401750:	2301      	movs	r3, #1
}
  401752:	4618      	mov	r0, r3
  401754:	3708      	adds	r7, #8
  401756:	46bd      	mov	sp, r7
  401758:	bd80      	pop	{r7, pc}
  40175a:	bf00      	nop
  40175c:	20014f88 	.word	0x20014f88
  401760:	004020a1 	.word	0x004020a1
  401764:	200001f4 	.word	0x200001f4
  401768:	0040126d 	.word	0x0040126d
  40176c:	20000c58 	.word	0x20000c58
  401770:	20000c5c 	.word	0x20000c5c
  401774:	004011bd 	.word	0x004011bd

00401778 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
  401778:	b580      	push	{r7, lr}
  40177a:	b082      	sub	sp, #8
  40177c:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  40177e:	4b1e      	ldr	r3, [pc, #120]	; (4017f8 <udc_req_std_iface_get_setting+0x80>)
  401780:	88db      	ldrh	r3, [r3, #6]
  401782:	2b01      	cmp	r3, #1
  401784:	d001      	beq.n	40178a <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
  401786:	2300      	movs	r3, #0
  401788:	e032      	b.n	4017f0 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
  40178a:	4b1c      	ldr	r3, [pc, #112]	; (4017fc <udc_req_std_iface_get_setting+0x84>)
  40178c:	781b      	ldrb	r3, [r3, #0]
  40178e:	2b00      	cmp	r3, #0
  401790:	d101      	bne.n	401796 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
  401792:	2300      	movs	r3, #0
  401794:	e02c      	b.n	4017f0 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401796:	4b18      	ldr	r3, [pc, #96]	; (4017f8 <udc_req_std_iface_get_setting+0x80>)
  401798:	889b      	ldrh	r3, [r3, #4]
  40179a:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40179c:	4b18      	ldr	r3, [pc, #96]	; (401800 <udc_req_std_iface_get_setting+0x88>)
  40179e:	681b      	ldr	r3, [r3, #0]
  4017a0:	681b      	ldr	r3, [r3, #0]
  4017a2:	791b      	ldrb	r3, [r3, #4]
  4017a4:	79fa      	ldrb	r2, [r7, #7]
  4017a6:	429a      	cmp	r2, r3
  4017a8:	d301      	bcc.n	4017ae <udc_req_std_iface_get_setting+0x36>
		return false;
  4017aa:	2300      	movs	r3, #0
  4017ac:	e020      	b.n	4017f0 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  4017ae:	79fb      	ldrb	r3, [r7, #7]
  4017b0:	4618      	mov	r0, r3
  4017b2:	2100      	movs	r1, #0
  4017b4:	4b13      	ldr	r3, [pc, #76]	; (401804 <udc_req_std_iface_get_setting+0x8c>)
  4017b6:	4798      	blx	r3
  4017b8:	4603      	mov	r3, r0
  4017ba:	f083 0301 	eor.w	r3, r3, #1
  4017be:	b2db      	uxtb	r3, r3
  4017c0:	2b00      	cmp	r3, #0
  4017c2:	d001      	beq.n	4017c8 <udc_req_std_iface_get_setting+0x50>
		return false;
  4017c4:	2300      	movs	r3, #0
  4017c6:	e013      	b.n	4017f0 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4017c8:	4b0d      	ldr	r3, [pc, #52]	; (401800 <udc_req_std_iface_get_setting+0x88>)
  4017ca:	681b      	ldr	r3, [r3, #0]
  4017cc:	685a      	ldr	r2, [r3, #4]
  4017ce:	79fb      	ldrb	r3, [r7, #7]
  4017d0:	009b      	lsls	r3, r3, #2
  4017d2:	4413      	add	r3, r2
  4017d4:	681b      	ldr	r3, [r3, #0]
  4017d6:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
  4017d8:	683b      	ldr	r3, [r7, #0]
  4017da:	68db      	ldr	r3, [r3, #12]
  4017dc:	4798      	blx	r3
  4017de:	4603      	mov	r3, r0
  4017e0:	461a      	mov	r2, r3
  4017e2:	4b09      	ldr	r3, [pc, #36]	; (401808 <udc_req_std_iface_get_setting+0x90>)
  4017e4:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  4017e6:	4808      	ldr	r0, [pc, #32]	; (401808 <udc_req_std_iface_get_setting+0x90>)
  4017e8:	2101      	movs	r1, #1
  4017ea:	4b08      	ldr	r3, [pc, #32]	; (40180c <udc_req_std_iface_get_setting+0x94>)
  4017ec:	4798      	blx	r3
	return true;
  4017ee:	2301      	movs	r3, #1
}
  4017f0:	4618      	mov	r0, r3
  4017f2:	3708      	adds	r7, #8
  4017f4:	46bd      	mov	sp, r7
  4017f6:	bd80      	pop	{r7, pc}
  4017f8:	20014f88 	.word	0x20014f88
  4017fc:	20000c58 	.word	0x20000c58
  401800:	20000c5c 	.word	0x20000c5c
  401804:	00401085 	.word	0x00401085
  401808:	20000c54 	.word	0x20000c54
  40180c:	00402101 	.word	0x00402101

00401810 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
  401810:	b580      	push	{r7, lr}
  401812:	b082      	sub	sp, #8
  401814:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  401816:	4b14      	ldr	r3, [pc, #80]	; (401868 <udc_req_std_iface_set_setting+0x58>)
  401818:	88db      	ldrh	r3, [r3, #6]
  40181a:	2b00      	cmp	r3, #0
  40181c:	d001      	beq.n	401822 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
  40181e:	2300      	movs	r3, #0
  401820:	e01e      	b.n	401860 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
  401822:	4b12      	ldr	r3, [pc, #72]	; (40186c <udc_req_std_iface_set_setting+0x5c>)
  401824:	781b      	ldrb	r3, [r3, #0]
  401826:	2b00      	cmp	r3, #0
  401828:	d101      	bne.n	40182e <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
  40182a:	2300      	movs	r3, #0
  40182c:	e018      	b.n	401860 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40182e:	4b0e      	ldr	r3, [pc, #56]	; (401868 <udc_req_std_iface_set_setting+0x58>)
  401830:	889b      	ldrh	r3, [r3, #4]
  401832:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  401834:	4b0c      	ldr	r3, [pc, #48]	; (401868 <udc_req_std_iface_set_setting+0x58>)
  401836:	885b      	ldrh	r3, [r3, #2]
  401838:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  40183a:	79fb      	ldrb	r3, [r7, #7]
  40183c:	4618      	mov	r0, r3
  40183e:	4b0c      	ldr	r3, [pc, #48]	; (401870 <udc_req_std_iface_set_setting+0x60>)
  401840:	4798      	blx	r3
  401842:	4603      	mov	r3, r0
  401844:	f083 0301 	eor.w	r3, r3, #1
  401848:	b2db      	uxtb	r3, r3
  40184a:	2b00      	cmp	r3, #0
  40184c:	d001      	beq.n	401852 <udc_req_std_iface_set_setting+0x42>
		return false;
  40184e:	2300      	movs	r3, #0
  401850:	e006      	b.n	401860 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  401852:	79fa      	ldrb	r2, [r7, #7]
  401854:	79bb      	ldrb	r3, [r7, #6]
  401856:	4610      	mov	r0, r2
  401858:	4619      	mov	r1, r3
  40185a:	4b06      	ldr	r3, [pc, #24]	; (401874 <udc_req_std_iface_set_setting+0x64>)
  40185c:	4798      	blx	r3
  40185e:	4603      	mov	r3, r0
}
  401860:	4618      	mov	r0, r3
  401862:	3708      	adds	r7, #8
  401864:	46bd      	mov	sp, r7
  401866:	bd80      	pop	{r7, pc}
  401868:	20014f88 	.word	0x20014f88
  40186c:	20000c58 	.word	0x20000c58
  401870:	0040111d 	.word	0x0040111d
  401874:	004011bd 	.word	0x004011bd

00401878 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
  401878:	b580      	push	{r7, lr}
  40187a:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
  40187c:	4b4e      	ldr	r3, [pc, #312]	; (4019b8 <udc_reqstd+0x140>)
  40187e:	781b      	ldrb	r3, [r3, #0]
  401880:	b2db      	uxtb	r3, r3
  401882:	b25b      	sxtb	r3, r3
  401884:	2b00      	cmp	r3, #0
  401886:	da3f      	bge.n	401908 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
  401888:	4b4b      	ldr	r3, [pc, #300]	; (4019b8 <udc_reqstd+0x140>)
  40188a:	88db      	ldrh	r3, [r3, #6]
  40188c:	2b00      	cmp	r3, #0
  40188e:	d101      	bne.n	401894 <udc_reqstd+0x1c>
			return false; // Error for USB host
  401890:	2300      	movs	r3, #0
  401892:	e08f      	b.n	4019b4 <udc_reqstd+0x13c>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  401894:	4b48      	ldr	r3, [pc, #288]	; (4019b8 <udc_reqstd+0x140>)
  401896:	781b      	ldrb	r3, [r3, #0]
  401898:	f003 031f 	and.w	r3, r3, #31
  40189c:	2b00      	cmp	r3, #0
  40189e:	d114      	bne.n	4018ca <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  4018a0:	4b45      	ldr	r3, [pc, #276]	; (4019b8 <udc_reqstd+0x140>)
  4018a2:	785b      	ldrb	r3, [r3, #1]
  4018a4:	2b06      	cmp	r3, #6
  4018a6:	d008      	beq.n	4018ba <udc_reqstd+0x42>
  4018a8:	2b08      	cmp	r3, #8
  4018aa:	d00a      	beq.n	4018c2 <udc_reqstd+0x4a>
  4018ac:	2b00      	cmp	r3, #0
  4018ae:	d000      	beq.n	4018b2 <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
  4018b0:	e00b      	b.n	4018ca <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
  4018b2:	4b42      	ldr	r3, [pc, #264]	; (4019bc <udc_reqstd+0x144>)
  4018b4:	4798      	blx	r3
  4018b6:	4603      	mov	r3, r0
  4018b8:	e07c      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
  4018ba:	4b41      	ldr	r3, [pc, #260]	; (4019c0 <udc_reqstd+0x148>)
  4018bc:	4798      	blx	r3
  4018be:	4603      	mov	r3, r0
  4018c0:	e078      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
  4018c2:	4b40      	ldr	r3, [pc, #256]	; (4019c4 <udc_reqstd+0x14c>)
  4018c4:	4798      	blx	r3
  4018c6:	4603      	mov	r3, r0
  4018c8:	e074      	b.n	4019b4 <udc_reqstd+0x13c>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4018ca:	4b3b      	ldr	r3, [pc, #236]	; (4019b8 <udc_reqstd+0x140>)
  4018cc:	781b      	ldrb	r3, [r3, #0]
  4018ce:	f003 031f 	and.w	r3, r3, #31
  4018d2:	2b01      	cmp	r3, #1
  4018d4:	d108      	bne.n	4018e8 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  4018d6:	4b38      	ldr	r3, [pc, #224]	; (4019b8 <udc_reqstd+0x140>)
  4018d8:	785b      	ldrb	r3, [r3, #1]
  4018da:	2b0a      	cmp	r3, #10
  4018dc:	d000      	beq.n	4018e0 <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
  4018de:	e003      	b.n	4018e8 <udc_reqstd+0x70>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
  4018e0:	4b39      	ldr	r3, [pc, #228]	; (4019c8 <udc_reqstd+0x150>)
  4018e2:	4798      	blx	r3
  4018e4:	4603      	mov	r3, r0
  4018e6:	e065      	b.n	4019b4 <udc_reqstd+0x13c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4018e8:	4b33      	ldr	r3, [pc, #204]	; (4019b8 <udc_reqstd+0x140>)
  4018ea:	781b      	ldrb	r3, [r3, #0]
  4018ec:	f003 031f 	and.w	r3, r3, #31
  4018f0:	2b02      	cmp	r3, #2
  4018f2:	d15e      	bne.n	4019b2 <udc_reqstd+0x13a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  4018f4:	4b30      	ldr	r3, [pc, #192]	; (4019b8 <udc_reqstd+0x140>)
  4018f6:	785b      	ldrb	r3, [r3, #1]
  4018f8:	2b00      	cmp	r3, #0
  4018fa:	d001      	beq.n	401900 <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
  4018fc:	bf00      	nop
  4018fe:	e058      	b.n	4019b2 <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
  401900:	4b32      	ldr	r3, [pc, #200]	; (4019cc <udc_reqstd+0x154>)
  401902:	4798      	blx	r3
  401904:	4603      	mov	r3, r0
  401906:	e055      	b.n	4019b4 <udc_reqstd+0x13c>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  401908:	4b2b      	ldr	r3, [pc, #172]	; (4019b8 <udc_reqstd+0x140>)
  40190a:	781b      	ldrb	r3, [r3, #0]
  40190c:	f003 031f 	and.w	r3, r3, #31
  401910:	2b00      	cmp	r3, #0
  401912:	d12a      	bne.n	40196a <udc_reqstd+0xf2>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  401914:	4b28      	ldr	r3, [pc, #160]	; (4019b8 <udc_reqstd+0x140>)
  401916:	785b      	ldrb	r3, [r3, #1]
  401918:	3b01      	subs	r3, #1
  40191a:	2b08      	cmp	r3, #8
  40191c:	d824      	bhi.n	401968 <udc_reqstd+0xf0>
  40191e:	a201      	add	r2, pc, #4	; (adr r2, 401924 <udc_reqstd+0xac>)
  401920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401924:	00401951 	.word	0x00401951
  401928:	00401969 	.word	0x00401969
  40192c:	00401959 	.word	0x00401959
  401930:	00401969 	.word	0x00401969
  401934:	00401949 	.word	0x00401949
  401938:	00401969 	.word	0x00401969
  40193c:	00401969 	.word	0x00401969
  401940:	00401969 	.word	0x00401969
  401944:	00401961 	.word	0x00401961
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
  401948:	4b21      	ldr	r3, [pc, #132]	; (4019d0 <udc_reqstd+0x158>)
  40194a:	4798      	blx	r3
  40194c:	4603      	mov	r3, r0
  40194e:	e031      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
  401950:	4b20      	ldr	r3, [pc, #128]	; (4019d4 <udc_reqstd+0x15c>)
  401952:	4798      	blx	r3
  401954:	4603      	mov	r3, r0
  401956:	e02d      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  401958:	4b1f      	ldr	r3, [pc, #124]	; (4019d8 <udc_reqstd+0x160>)
  40195a:	4798      	blx	r3
  40195c:	4603      	mov	r3, r0
  40195e:	e029      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
  401960:	4b1e      	ldr	r3, [pc, #120]	; (4019dc <udc_reqstd+0x164>)
  401962:	4798      	blx	r3
  401964:	4603      	mov	r3, r0
  401966:	e025      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
  401968:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40196a:	4b13      	ldr	r3, [pc, #76]	; (4019b8 <udc_reqstd+0x140>)
  40196c:	781b      	ldrb	r3, [r3, #0]
  40196e:	f003 031f 	and.w	r3, r3, #31
  401972:	2b01      	cmp	r3, #1
  401974:	d108      	bne.n	401988 <udc_reqstd+0x110>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  401976:	4b10      	ldr	r3, [pc, #64]	; (4019b8 <udc_reqstd+0x140>)
  401978:	785b      	ldrb	r3, [r3, #1]
  40197a:	2b0b      	cmp	r3, #11
  40197c:	d000      	beq.n	401980 <udc_reqstd+0x108>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
  40197e:	e003      	b.n	401988 <udc_reqstd+0x110>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
  401980:	4b17      	ldr	r3, [pc, #92]	; (4019e0 <udc_reqstd+0x168>)
  401982:	4798      	blx	r3
  401984:	4603      	mov	r3, r0
  401986:	e015      	b.n	4019b4 <udc_reqstd+0x13c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  401988:	4b0b      	ldr	r3, [pc, #44]	; (4019b8 <udc_reqstd+0x140>)
  40198a:	781b      	ldrb	r3, [r3, #0]
  40198c:	f003 031f 	and.w	r3, r3, #31
  401990:	2b02      	cmp	r3, #2
  401992:	d10e      	bne.n	4019b2 <udc_reqstd+0x13a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  401994:	4b08      	ldr	r3, [pc, #32]	; (4019b8 <udc_reqstd+0x140>)
  401996:	785b      	ldrb	r3, [r3, #1]
  401998:	2b01      	cmp	r3, #1
  40199a:	d002      	beq.n	4019a2 <udc_reqstd+0x12a>
  40199c:	2b03      	cmp	r3, #3
  40199e:	d004      	beq.n	4019aa <udc_reqstd+0x132>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
  4019a0:	e007      	b.n	4019b2 <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
  4019a2:	4b10      	ldr	r3, [pc, #64]	; (4019e4 <udc_reqstd+0x16c>)
  4019a4:	4798      	blx	r3
  4019a6:	4603      	mov	r3, r0
  4019a8:	e004      	b.n	4019b4 <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
  4019aa:	4b0f      	ldr	r3, [pc, #60]	; (4019e8 <udc_reqstd+0x170>)
  4019ac:	4798      	blx	r3
  4019ae:	4603      	mov	r3, r0
  4019b0:	e000      	b.n	4019b4 <udc_reqstd+0x13c>
				break;
			}
		}
#endif
	}
	return false;
  4019b2:	2300      	movs	r3, #0
}
  4019b4:	4618      	mov	r0, r3
  4019b6:	bd80      	pop	{r7, pc}
  4019b8:	20014f88 	.word	0x20014f88
  4019bc:	0040131d 	.word	0x0040131d
  4019c0:	00401571 	.word	0x00401571
  4019c4:	0040168d 	.word	0x0040168d
  4019c8:	00401779 	.word	0x00401779
  4019cc:	00401349 	.word	0x00401349
  4019d0:	0040149d 	.word	0x0040149d
  4019d4:	0040138d 	.word	0x0040138d
  4019d8:	00401405 	.word	0x00401405
  4019dc:	004016b9 	.word	0x004016b9
  4019e0:	00401811 	.word	0x00401811
  4019e4:	004013cd 	.word	0x004013cd
  4019e8:	00401435 	.word	0x00401435

004019ec <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
  4019ec:	b580      	push	{r7, lr}
  4019ee:	b082      	sub	sp, #8
  4019f0:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  4019f2:	4b20      	ldr	r3, [pc, #128]	; (401a74 <udc_req_iface+0x88>)
  4019f4:	781b      	ldrb	r3, [r3, #0]
  4019f6:	2b00      	cmp	r3, #0
  4019f8:	d101      	bne.n	4019fe <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
  4019fa:	2300      	movs	r3, #0
  4019fc:	e035      	b.n	401a6a <udc_req_iface+0x7e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4019fe:	4b1e      	ldr	r3, [pc, #120]	; (401a78 <udc_req_iface+0x8c>)
  401a00:	889b      	ldrh	r3, [r3, #4]
  401a02:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401a04:	4b1d      	ldr	r3, [pc, #116]	; (401a7c <udc_req_iface+0x90>)
  401a06:	681b      	ldr	r3, [r3, #0]
  401a08:	681b      	ldr	r3, [r3, #0]
  401a0a:	791b      	ldrb	r3, [r3, #4]
  401a0c:	79fa      	ldrb	r2, [r7, #7]
  401a0e:	429a      	cmp	r2, r3
  401a10:	d301      	bcc.n	401a16 <udc_req_iface+0x2a>
		return false;
  401a12:	2300      	movs	r3, #0
  401a14:	e029      	b.n	401a6a <udc_req_iface+0x7e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401a16:	79fb      	ldrb	r3, [r7, #7]
  401a18:	4618      	mov	r0, r3
  401a1a:	2100      	movs	r1, #0
  401a1c:	4b18      	ldr	r3, [pc, #96]	; (401a80 <udc_req_iface+0x94>)
  401a1e:	4798      	blx	r3
  401a20:	4603      	mov	r3, r0
  401a22:	f083 0301 	eor.w	r3, r3, #1
  401a26:	b2db      	uxtb	r3, r3
  401a28:	2b00      	cmp	r3, #0
  401a2a:	d001      	beq.n	401a30 <udc_req_iface+0x44>
		return false;
  401a2c:	2300      	movs	r3, #0
  401a2e:	e01c      	b.n	401a6a <udc_req_iface+0x7e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401a30:	4b12      	ldr	r3, [pc, #72]	; (401a7c <udc_req_iface+0x90>)
  401a32:	681b      	ldr	r3, [r3, #0]
  401a34:	685a      	ldr	r2, [r3, #4]
  401a36:	79fb      	ldrb	r3, [r7, #7]
  401a38:	009b      	lsls	r3, r3, #2
  401a3a:	4413      	add	r3, r2
  401a3c:	681b      	ldr	r3, [r3, #0]
  401a3e:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401a40:	683b      	ldr	r3, [r7, #0]
  401a42:	68db      	ldr	r3, [r3, #12]
  401a44:	4798      	blx	r3
  401a46:	4603      	mov	r3, r0
  401a48:	79fa      	ldrb	r2, [r7, #7]
  401a4a:	4610      	mov	r0, r2
  401a4c:	4619      	mov	r1, r3
  401a4e:	4b0c      	ldr	r3, [pc, #48]	; (401a80 <udc_req_iface+0x94>)
  401a50:	4798      	blx	r3
  401a52:	4603      	mov	r3, r0
  401a54:	f083 0301 	eor.w	r3, r3, #1
  401a58:	b2db      	uxtb	r3, r3
  401a5a:	2b00      	cmp	r3, #0
  401a5c:	d001      	beq.n	401a62 <udc_req_iface+0x76>
		return false;
  401a5e:	2300      	movs	r3, #0
  401a60:	e003      	b.n	401a6a <udc_req_iface+0x7e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  401a62:	683b      	ldr	r3, [r7, #0]
  401a64:	689b      	ldr	r3, [r3, #8]
  401a66:	4798      	blx	r3
  401a68:	4603      	mov	r3, r0
}
  401a6a:	4618      	mov	r0, r3
  401a6c:	3708      	adds	r7, #8
  401a6e:	46bd      	mov	sp, r7
  401a70:	bd80      	pop	{r7, pc}
  401a72:	bf00      	nop
  401a74:	20000c58 	.word	0x20000c58
  401a78:	20014f88 	.word	0x20014f88
  401a7c:	20000c5c 	.word	0x20000c5c
  401a80:	00401085 	.word	0x00401085

00401a84 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
  401a84:	b580      	push	{r7, lr}
  401a86:	b082      	sub	sp, #8
  401a88:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  401a8a:	4b1e      	ldr	r3, [pc, #120]	; (401b04 <udc_req_ep+0x80>)
  401a8c:	781b      	ldrb	r3, [r3, #0]
  401a8e:	2b00      	cmp	r3, #0
  401a90:	d101      	bne.n	401a96 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
  401a92:	2300      	movs	r3, #0
  401a94:	e031      	b.n	401afa <udc_req_ep+0x76>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401a96:	4b1c      	ldr	r3, [pc, #112]	; (401b08 <udc_req_ep+0x84>)
  401a98:	889b      	ldrh	r3, [r3, #4]
  401a9a:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401a9c:	2300      	movs	r3, #0
  401a9e:	71fb      	strb	r3, [r7, #7]
  401aa0:	e023      	b.n	401aea <udc_req_ep+0x66>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  401aa2:	4b1a      	ldr	r3, [pc, #104]	; (401b0c <udc_req_ep+0x88>)
  401aa4:	681b      	ldr	r3, [r3, #0]
  401aa6:	685a      	ldr	r2, [r3, #4]
  401aa8:	79fb      	ldrb	r3, [r7, #7]
  401aaa:	009b      	lsls	r3, r3, #2
  401aac:	4413      	add	r3, r2
  401aae:	681b      	ldr	r3, [r3, #0]
  401ab0:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401ab2:	683b      	ldr	r3, [r7, #0]
  401ab4:	68db      	ldr	r3, [r3, #12]
  401ab6:	4798      	blx	r3
  401ab8:	4603      	mov	r3, r0
  401aba:	79fa      	ldrb	r2, [r7, #7]
  401abc:	4610      	mov	r0, r2
  401abe:	4619      	mov	r1, r3
  401ac0:	4b13      	ldr	r3, [pc, #76]	; (401b10 <udc_req_ep+0x8c>)
  401ac2:	4798      	blx	r3
  401ac4:	4603      	mov	r3, r0
  401ac6:	f083 0301 	eor.w	r3, r3, #1
  401aca:	b2db      	uxtb	r3, r3
  401acc:	2b00      	cmp	r3, #0
  401ace:	d001      	beq.n	401ad4 <udc_req_ep+0x50>
			return false;
  401ad0:	2300      	movs	r3, #0
  401ad2:	e012      	b.n	401afa <udc_req_ep+0x76>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  401ad4:	683b      	ldr	r3, [r7, #0]
  401ad6:	689b      	ldr	r3, [r3, #8]
  401ad8:	4798      	blx	r3
  401ada:	4603      	mov	r3, r0
  401adc:	2b00      	cmp	r3, #0
  401ade:	d001      	beq.n	401ae4 <udc_req_ep+0x60>
			return true;
  401ae0:	2301      	movs	r3, #1
  401ae2:	e00a      	b.n	401afa <udc_req_ep+0x76>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  401ae4:	79fb      	ldrb	r3, [r7, #7]
  401ae6:	3301      	adds	r3, #1
  401ae8:	71fb      	strb	r3, [r7, #7]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401aea:	4b08      	ldr	r3, [pc, #32]	; (401b0c <udc_req_ep+0x88>)
  401aec:	681b      	ldr	r3, [r3, #0]
  401aee:	681b      	ldr	r3, [r3, #0]
  401af0:	791b      	ldrb	r3, [r3, #4]
  401af2:	79fa      	ldrb	r2, [r7, #7]
  401af4:	429a      	cmp	r2, r3
  401af6:	d3d4      	bcc.n	401aa2 <udc_req_ep+0x1e>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  401af8:	2300      	movs	r3, #0
}
  401afa:	4618      	mov	r0, r3
  401afc:	3708      	adds	r7, #8
  401afe:	46bd      	mov	sp, r7
  401b00:	bd80      	pop	{r7, pc}
  401b02:	bf00      	nop
  401b04:	20000c58 	.word	0x20000c58
  401b08:	20014f88 	.word	0x20014f88
  401b0c:	20000c5c 	.word	0x20000c5c
  401b10:	00401085 	.word	0x00401085

00401b14 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  401b14:	b580      	push	{r7, lr}
  401b16:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  401b18:	4b1f      	ldr	r3, [pc, #124]	; (401b98 <udc_process_setup+0x84>)
  401b1a:	2200      	movs	r2, #0
  401b1c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  401b1e:	4b1e      	ldr	r3, [pc, #120]	; (401b98 <udc_process_setup+0x84>)
  401b20:	2200      	movs	r2, #0
  401b22:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401b24:	4b1c      	ldr	r3, [pc, #112]	; (401b98 <udc_process_setup+0x84>)
  401b26:	2200      	movs	r2, #0
  401b28:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  401b2a:	4b1b      	ldr	r3, [pc, #108]	; (401b98 <udc_process_setup+0x84>)
  401b2c:	781b      	ldrb	r3, [r3, #0]
  401b2e:	b2db      	uxtb	r3, r3
  401b30:	b25b      	sxtb	r3, r3
  401b32:	2b00      	cmp	r3, #0
  401b34:	da05      	bge.n	401b42 <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
  401b36:	4b18      	ldr	r3, [pc, #96]	; (401b98 <udc_process_setup+0x84>)
  401b38:	88db      	ldrh	r3, [r3, #6]
  401b3a:	2b00      	cmp	r3, #0
  401b3c:	d101      	bne.n	401b42 <udc_process_setup+0x2e>
			return false; // Error from USB host
  401b3e:	2300      	movs	r3, #0
  401b40:	e027      	b.n	401b92 <udc_process_setup+0x7e>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  401b42:	4b15      	ldr	r3, [pc, #84]	; (401b98 <udc_process_setup+0x84>)
  401b44:	781b      	ldrb	r3, [r3, #0]
  401b46:	f003 0360 	and.w	r3, r3, #96	; 0x60
  401b4a:	2b00      	cmp	r3, #0
  401b4c:	d106      	bne.n	401b5c <udc_process_setup+0x48>
		if (udc_reqstd()) {
  401b4e:	4b13      	ldr	r3, [pc, #76]	; (401b9c <udc_process_setup+0x88>)
  401b50:	4798      	blx	r3
  401b52:	4603      	mov	r3, r0
  401b54:	2b00      	cmp	r3, #0
  401b56:	d001      	beq.n	401b5c <udc_process_setup+0x48>
			return true;
  401b58:	2301      	movs	r3, #1
  401b5a:	e01a      	b.n	401b92 <udc_process_setup+0x7e>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  401b5c:	4b0e      	ldr	r3, [pc, #56]	; (401b98 <udc_process_setup+0x84>)
  401b5e:	781b      	ldrb	r3, [r3, #0]
  401b60:	f003 031f 	and.w	r3, r3, #31
  401b64:	2b01      	cmp	r3, #1
  401b66:	d106      	bne.n	401b76 <udc_process_setup+0x62>
		if (udc_req_iface()) {
  401b68:	4b0d      	ldr	r3, [pc, #52]	; (401ba0 <udc_process_setup+0x8c>)
  401b6a:	4798      	blx	r3
  401b6c:	4603      	mov	r3, r0
  401b6e:	2b00      	cmp	r3, #0
  401b70:	d001      	beq.n	401b76 <udc_process_setup+0x62>
			return true;
  401b72:	2301      	movs	r3, #1
  401b74:	e00d      	b.n	401b92 <udc_process_setup+0x7e>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  401b76:	4b08      	ldr	r3, [pc, #32]	; (401b98 <udc_process_setup+0x84>)
  401b78:	781b      	ldrb	r3, [r3, #0]
  401b7a:	f003 031f 	and.w	r3, r3, #31
  401b7e:	2b02      	cmp	r3, #2
  401b80:	d106      	bne.n	401b90 <udc_process_setup+0x7c>
		if (udc_req_ep()) {
  401b82:	4b08      	ldr	r3, [pc, #32]	; (401ba4 <udc_process_setup+0x90>)
  401b84:	4798      	blx	r3
  401b86:	4603      	mov	r3, r0
  401b88:	2b00      	cmp	r3, #0
  401b8a:	d001      	beq.n	401b90 <udc_process_setup+0x7c>
			return true;
  401b8c:	2301      	movs	r3, #1
  401b8e:	e000      	b.n	401b92 <udc_process_setup+0x7e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  401b90:	2300      	movs	r3, #0
#endif
}
  401b92:	4618      	mov	r0, r3
  401b94:	bd80      	pop	{r7, pc}
  401b96:	bf00      	nop
  401b98:	20014f88 	.word	0x20014f88
  401b9c:	00401879 	.word	0x00401879
  401ba0:	004019ed 	.word	0x004019ed
  401ba4:	00401a85 	.word	0x00401a85

00401ba8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401ba8:	b480      	push	{r7}
  401baa:	b083      	sub	sp, #12
  401bac:	af00      	add	r7, sp, #0
  401bae:	4603      	mov	r3, r0
  401bb0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401bb2:	4b08      	ldr	r3, [pc, #32]	; (401bd4 <NVIC_EnableIRQ+0x2c>)
  401bb4:	f997 2007 	ldrsb.w	r2, [r7, #7]
  401bb8:	0952      	lsrs	r2, r2, #5
  401bba:	79f9      	ldrb	r1, [r7, #7]
  401bbc:	f001 011f 	and.w	r1, r1, #31
  401bc0:	2001      	movs	r0, #1
  401bc2:	fa00 f101 	lsl.w	r1, r0, r1
  401bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401bca:	370c      	adds	r7, #12
  401bcc:	46bd      	mov	sp, r7
  401bce:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bd2:	4770      	bx	lr
  401bd4:	e000e100 	.word	0xe000e100

00401bd8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  401bd8:	b480      	push	{r7}
  401bda:	b083      	sub	sp, #12
  401bdc:	af00      	add	r7, sp, #0
  401bde:	4603      	mov	r3, r0
  401be0:	6039      	str	r1, [r7, #0]
  401be2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  401be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401be8:	2b00      	cmp	r3, #0
  401bea:	da0b      	bge.n	401c04 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401bec:	490d      	ldr	r1, [pc, #52]	; (401c24 <NVIC_SetPriority+0x4c>)
  401bee:	79fb      	ldrb	r3, [r7, #7]
  401bf0:	f003 030f 	and.w	r3, r3, #15
  401bf4:	3b04      	subs	r3, #4
  401bf6:	683a      	ldr	r2, [r7, #0]
  401bf8:	b2d2      	uxtb	r2, r2
  401bfa:	0112      	lsls	r2, r2, #4
  401bfc:	b2d2      	uxtb	r2, r2
  401bfe:	440b      	add	r3, r1
  401c00:	761a      	strb	r2, [r3, #24]
  401c02:	e009      	b.n	401c18 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401c04:	4908      	ldr	r1, [pc, #32]	; (401c28 <NVIC_SetPriority+0x50>)
  401c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401c0a:	683a      	ldr	r2, [r7, #0]
  401c0c:	b2d2      	uxtb	r2, r2
  401c0e:	0112      	lsls	r2, r2, #4
  401c10:	b2d2      	uxtb	r2, r2
  401c12:	440b      	add	r3, r1
  401c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401c18:	370c      	adds	r7, #12
  401c1a:	46bd      	mov	sp, r7
  401c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c20:	4770      	bx	lr
  401c22:	bf00      	nop
  401c24:	e000ed00 	.word	0xe000ed00
  401c28:	e000e100 	.word	0xe000e100

00401c2c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401c2c:	b480      	push	{r7}
  401c2e:	b083      	sub	sp, #12
  401c30:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401c32:	f3ef 8310 	mrs	r3, PRIMASK
  401c36:	603b      	str	r3, [r7, #0]
  return(result);
  401c38:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  401c3a:	2b00      	cmp	r3, #0
  401c3c:	bf14      	ite	ne
  401c3e:	2300      	movne	r3, #0
  401c40:	2301      	moveq	r3, #1
  401c42:	b2db      	uxtb	r3, r3
  401c44:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401c46:	b672      	cpsid	i
  401c48:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401c4c:	4b04      	ldr	r3, [pc, #16]	; (401c60 <cpu_irq_save+0x34>)
  401c4e:	2200      	movs	r2, #0
  401c50:	701a      	strb	r2, [r3, #0]
	return flags;
  401c52:	687b      	ldr	r3, [r7, #4]
}
  401c54:	4618      	mov	r0, r3
  401c56:	370c      	adds	r7, #12
  401c58:	46bd      	mov	sp, r7
  401c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c5e:	4770      	bx	lr
  401c60:	2000020c 	.word	0x2000020c

00401c64 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401c64:	b480      	push	{r7}
  401c66:	b083      	sub	sp, #12
  401c68:	af00      	add	r7, sp, #0
  401c6a:	6078      	str	r0, [r7, #4]
	return (flags);
  401c6c:	687b      	ldr	r3, [r7, #4]
  401c6e:	2b00      	cmp	r3, #0
  401c70:	bf0c      	ite	eq
  401c72:	2300      	moveq	r3, #0
  401c74:	2301      	movne	r3, #1
  401c76:	b2db      	uxtb	r3, r3
}
  401c78:	4618      	mov	r0, r3
  401c7a:	370c      	adds	r7, #12
  401c7c:	46bd      	mov	sp, r7
  401c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c82:	4770      	bx	lr

00401c84 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401c84:	b580      	push	{r7, lr}
  401c86:	b082      	sub	sp, #8
  401c88:	af00      	add	r7, sp, #0
  401c8a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401c8c:	6878      	ldr	r0, [r7, #4]
  401c8e:	4b07      	ldr	r3, [pc, #28]	; (401cac <cpu_irq_restore+0x28>)
  401c90:	4798      	blx	r3
  401c92:	4603      	mov	r3, r0
  401c94:	2b00      	cmp	r3, #0
  401c96:	d005      	beq.n	401ca4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401c98:	4b05      	ldr	r3, [pc, #20]	; (401cb0 <cpu_irq_restore+0x2c>)
  401c9a:	2201      	movs	r2, #1
  401c9c:	701a      	strb	r2, [r3, #0]
  401c9e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401ca2:	b662      	cpsie	i
}
  401ca4:	3708      	adds	r7, #8
  401ca6:	46bd      	mov	sp, r7
  401ca8:	bd80      	pop	{r7, pc}
  401caa:	bf00      	nop
  401cac:	00401c65 	.word	0x00401c65
  401cb0:	2000020c 	.word	0x2000020c

00401cb4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  401cb4:	b580      	push	{r7, lr}
  401cb6:	b084      	sub	sp, #16
  401cb8:	af00      	add	r7, sp, #0
  401cba:	4603      	mov	r3, r0
  401cbc:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
  401cbe:	4b08      	ldr	r3, [pc, #32]	; (401ce0 <sleepmgr_lock_mode+0x2c>)
  401cc0:	4798      	blx	r3
  401cc2:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  401cc4:	79fb      	ldrb	r3, [r7, #7]
  401cc6:	4a07      	ldr	r2, [pc, #28]	; (401ce4 <sleepmgr_lock_mode+0x30>)
  401cc8:	5cd2      	ldrb	r2, [r2, r3]
  401cca:	3201      	adds	r2, #1
  401ccc:	b2d1      	uxtb	r1, r2
  401cce:	4a05      	ldr	r2, [pc, #20]	; (401ce4 <sleepmgr_lock_mode+0x30>)
  401cd0:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  401cd2:	68f8      	ldr	r0, [r7, #12]
  401cd4:	4b04      	ldr	r3, [pc, #16]	; (401ce8 <sleepmgr_lock_mode+0x34>)
  401cd6:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  401cd8:	3710      	adds	r7, #16
  401cda:	46bd      	mov	sp, r7
  401cdc:	bd80      	pop	{r7, pc}
  401cde:	bf00      	nop
  401ce0:	00401c2d 	.word	0x00401c2d
  401ce4:	20014f80 	.word	0x20014f80
  401ce8:	00401c85 	.word	0x00401c85

00401cec <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
  401cec:	b580      	push	{r7, lr}
  401cee:	b084      	sub	sp, #16
  401cf0:	af00      	add	r7, sp, #0
  401cf2:	4603      	mov	r3, r0
  401cf4:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
  401cf6:	4b08      	ldr	r3, [pc, #32]	; (401d18 <sleepmgr_unlock_mode+0x2c>)
  401cf8:	4798      	blx	r3
  401cfa:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
  401cfc:	79fb      	ldrb	r3, [r7, #7]
  401cfe:	4a07      	ldr	r2, [pc, #28]	; (401d1c <sleepmgr_unlock_mode+0x30>)
  401d00:	5cd2      	ldrb	r2, [r2, r3]
  401d02:	3a01      	subs	r2, #1
  401d04:	b2d1      	uxtb	r1, r2
  401d06:	4a05      	ldr	r2, [pc, #20]	; (401d1c <sleepmgr_unlock_mode+0x30>)
  401d08:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  401d0a:	68f8      	ldr	r0, [r7, #12]
  401d0c:	4b04      	ldr	r3, [pc, #16]	; (401d20 <sleepmgr_unlock_mode+0x34>)
  401d0e:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  401d10:	3710      	adds	r7, #16
  401d12:	46bd      	mov	sp, r7
  401d14:	bd80      	pop	{r7, pc}
  401d16:	bf00      	nop
  401d18:	00401c2d 	.word	0x00401c2d
  401d1c:	20014f80 	.word	0x20014f80
  401d20:	00401c85 	.word	0x00401c85

00401d24 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  401d24:	b580      	push	{r7, lr}
  401d26:	b082      	sub	sp, #8
  401d28:	af00      	add	r7, sp, #0
  401d2a:	4603      	mov	r3, r0
  401d2c:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
  401d2e:	79fb      	ldrb	r3, [r7, #7]
  401d30:	f083 0301 	eor.w	r3, r3, #1
  401d34:	b2db      	uxtb	r3, r3
  401d36:	2b00      	cmp	r3, #0
  401d38:	d006      	beq.n	401d48 <udd_sleep_mode+0x24>
  401d3a:	4b0d      	ldr	r3, [pc, #52]	; (401d70 <udd_sleep_mode+0x4c>)
  401d3c:	781b      	ldrb	r3, [r3, #0]
  401d3e:	2b00      	cmp	r3, #0
  401d40:	d002      	beq.n	401d48 <udd_sleep_mode+0x24>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
  401d42:	2002      	movs	r0, #2
  401d44:	4b0b      	ldr	r3, [pc, #44]	; (401d74 <udd_sleep_mode+0x50>)
  401d46:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
  401d48:	79fb      	ldrb	r3, [r7, #7]
  401d4a:	2b00      	cmp	r3, #0
  401d4c:	d009      	beq.n	401d62 <udd_sleep_mode+0x3e>
  401d4e:	4b08      	ldr	r3, [pc, #32]	; (401d70 <udd_sleep_mode+0x4c>)
  401d50:	781b      	ldrb	r3, [r3, #0]
  401d52:	f083 0301 	eor.w	r3, r3, #1
  401d56:	b2db      	uxtb	r3, r3
  401d58:	2b00      	cmp	r3, #0
  401d5a:	d002      	beq.n	401d62 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
  401d5c:	2002      	movs	r0, #2
  401d5e:	4b06      	ldr	r3, [pc, #24]	; (401d78 <udd_sleep_mode+0x54>)
  401d60:	4798      	blx	r3
	}
	udd_b_idle = b_idle;
  401d62:	4b03      	ldr	r3, [pc, #12]	; (401d70 <udd_sleep_mode+0x4c>)
  401d64:	79fa      	ldrb	r2, [r7, #7]
  401d66:	701a      	strb	r2, [r3, #0]
}
  401d68:	3708      	adds	r7, #8
  401d6a:	46bd      	mov	sp, r7
  401d6c:	bd80      	pop	{r7, pc}
  401d6e:	bf00      	nop
  401d70:	20000c66 	.word	0x20000c66
  401d74:	00401ced 	.word	0x00401ced
  401d78:	00401cb5 	.word	0x00401cb5

00401d7c <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  401d7c:	b580      	push	{r7, lr}
  401d7e:	af00      	add	r7, sp, #0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401d80:	4b61      	ldr	r3, [pc, #388]	; (401f08 <UDP_Handler+0x18c>)
  401d82:	4798      	blx	r3
  401d84:	4603      	mov	r3, r0
  401d86:	f083 0301 	eor.w	r3, r3, #1
  401d8a:	b2db      	uxtb	r3, r3
  401d8c:	2b00      	cmp	r3, #0
  401d8e:	d00c      	beq.n	401daa <UDP_Handler+0x2e>
  401d90:	4b5e      	ldr	r3, [pc, #376]	; (401f0c <UDP_Handler+0x190>)
  401d92:	69db      	ldr	r3, [r3, #28]
  401d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401d98:	2b00      	cmp	r3, #0
  401d9a:	d106      	bne.n	401daa <UDP_Handler+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401d9c:	b672      	cpsid	i
  401d9e:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401da2:	4b5b      	ldr	r3, [pc, #364]	; (401f10 <UDP_Handler+0x194>)
  401da4:	2200      	movs	r2, #0
  401da6:	701a      	strb	r2, [r3, #0]
		return;
  401da8:	e0ac      	b.n	401f04 <UDP_Handler+0x188>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  401daa:	2022      	movs	r0, #34	; 0x22
  401dac:	4b59      	ldr	r3, [pc, #356]	; (401f14 <UDP_Handler+0x198>)
  401dae:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401db0:	4b56      	ldr	r3, [pc, #344]	; (401f0c <UDP_Handler+0x190>)
  401db2:	699b      	ldr	r3, [r3, #24]
  401db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  401db8:	2b00      	cmp	r3, #0
  401dba:	d00c      	beq.n	401dd6 <UDP_Handler+0x5a>
  401dbc:	4b53      	ldr	r3, [pc, #332]	; (401f0c <UDP_Handler+0x190>)
  401dbe:	69db      	ldr	r3, [r3, #28]
  401dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  401dc4:	2b00      	cmp	r3, #0
  401dc6:	d006      	beq.n	401dd6 <UDP_Handler+0x5a>
		udd_ack_sof();
  401dc8:	4b50      	ldr	r3, [pc, #320]	; (401f0c <UDP_Handler+0x190>)
  401dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401dce:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401dd0:	4b51      	ldr	r3, [pc, #324]	; (401f18 <UDP_Handler+0x19c>)
  401dd2:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  401dd4:	e095      	b.n	401f02 <UDP_Handler+0x186>
	}

	if (udd_ctrl_interrupt()) {
  401dd6:	4b51      	ldr	r3, [pc, #324]	; (401f1c <UDP_Handler+0x1a0>)
  401dd8:	4798      	blx	r3
  401dda:	4603      	mov	r3, r0
  401ddc:	2b00      	cmp	r3, #0
  401dde:	d000      	beq.n	401de2 <UDP_Handler+0x66>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
  401de0:	e08f      	b.n	401f02 <UDP_Handler+0x186>
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
  401de2:	4b4f      	ldr	r3, [pc, #316]	; (401f20 <UDP_Handler+0x1a4>)
  401de4:	4798      	blx	r3
  401de6:	4603      	mov	r3, r0
  401de8:	2b00      	cmp	r3, #0
  401dea:	d000      	beq.n	401dee <UDP_Handler+0x72>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
  401dec:	e089      	b.n	401f02 <UDP_Handler+0x186>
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401dee:	4b47      	ldr	r3, [pc, #284]	; (401f0c <UDP_Handler+0x190>)
  401df0:	699b      	ldr	r3, [r3, #24]
  401df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  401df6:	2b00      	cmp	r3, #0
  401df8:	d005      	beq.n	401e06 <UDP_Handler+0x8a>
  401dfa:	4b44      	ldr	r3, [pc, #272]	; (401f0c <UDP_Handler+0x190>)
  401dfc:	69db      	ldr	r3, [r3, #28]
  401dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  401e02:	2b00      	cmp	r3, #0
  401e04:	d117      	bne.n	401e36 <UDP_Handler+0xba>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401e06:	4b41      	ldr	r3, [pc, #260]	; (401f0c <UDP_Handler+0x190>)
  401e08:	699b      	ldr	r3, [r3, #24]
  401e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401e0e:	2b00      	cmp	r3, #0
  401e10:	d005      	beq.n	401e1e <UDP_Handler+0xa2>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401e12:	4b3e      	ldr	r3, [pc, #248]	; (401f0c <UDP_Handler+0x190>)
  401e14:	69db      	ldr	r3, [r3, #28]
  401e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
  401e1a:	2b00      	cmp	r3, #0
  401e1c:	d10b      	bne.n	401e36 <UDP_Handler+0xba>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401e1e:	4b3b      	ldr	r3, [pc, #236]	; (401f0c <UDP_Handler+0x190>)
  401e20:	699b      	ldr	r3, [r3, #24]
  401e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401e26:	2b00      	cmp	r3, #0
  401e28:	d01d      	beq.n	401e66 <UDP_Handler+0xea>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401e2a:	4b38      	ldr	r3, [pc, #224]	; (401f0c <UDP_Handler+0x190>)
  401e2c:	69db      	ldr	r3, [r3, #28]
  401e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  401e32:	2b00      	cmp	r3, #0
  401e34:	d017      	beq.n	401e66 <UDP_Handler+0xea>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  401e36:	4b35      	ldr	r3, [pc, #212]	; (401f0c <UDP_Handler+0x190>)
  401e38:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  401e3c:	621a      	str	r2, [r3, #32]
		// Do resume operations
		udd_disable_wakeups();
  401e3e:	4b33      	ldr	r3, [pc, #204]	; (401f0c <UDP_Handler+0x190>)
  401e40:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  401e44:	615a      	str	r2, [r3, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  401e46:	2001      	movs	r0, #1
  401e48:	4b36      	ldr	r3, [pc, #216]	; (401f24 <UDP_Handler+0x1a8>)
  401e4a:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  401e4c:	4b2f      	ldr	r3, [pc, #188]	; (401f0c <UDP_Handler+0x190>)
  401e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e52:	621a      	str	r2, [r3, #32]
		udd_enable_suspend_interrupt();
  401e54:	4b2d      	ldr	r3, [pc, #180]	; (401f0c <UDP_Handler+0x190>)
  401e56:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e5a:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401e5c:	4b2b      	ldr	r3, [pc, #172]	; (401f0c <UDP_Handler+0x190>)
  401e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401e62:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401e64:	e04d      	b.n	401f02 <UDP_Handler+0x186>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401e66:	4b29      	ldr	r3, [pc, #164]	; (401f0c <UDP_Handler+0x190>)
  401e68:	699b      	ldr	r3, [r3, #24]
  401e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401e6e:	2b00      	cmp	r3, #0
  401e70:	d020      	beq.n	401eb4 <UDP_Handler+0x138>
  401e72:	4b26      	ldr	r3, [pc, #152]	; (401f0c <UDP_Handler+0x190>)
  401e74:	69db      	ldr	r3, [r3, #28]
  401e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401e7a:	2b00      	cmp	r3, #0
  401e7c:	d01a      	beq.n	401eb4 <UDP_Handler+0x138>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  401e7e:	4b23      	ldr	r3, [pc, #140]	; (401f0c <UDP_Handler+0x190>)
  401e80:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e84:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  401e86:	4b21      	ldr	r3, [pc, #132]	; (401f0c <UDP_Handler+0x190>)
  401e88:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e8c:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  401e8e:	4b1f      	ldr	r3, [pc, #124]	; (401f0c <UDP_Handler+0x190>)
  401e90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401e94:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  401e96:	4b1d      	ldr	r3, [pc, #116]	; (401f0c <UDP_Handler+0x190>)
  401e98:	f44f 7200 	mov.w	r2, #512	; 0x200
  401e9c:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  401e9e:	4b1b      	ldr	r3, [pc, #108]	; (401f0c <UDP_Handler+0x190>)
  401ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401ea4:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  401ea6:	2022      	movs	r0, #34	; 0x22
  401ea8:	4b1f      	ldr	r3, [pc, #124]	; (401f28 <UDP_Handler+0x1ac>)
  401eaa:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  401eac:	2000      	movs	r0, #0
  401eae:	4b1d      	ldr	r3, [pc, #116]	; (401f24 <UDP_Handler+0x1a8>)
  401eb0:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  401eb2:	e026      	b.n	401f02 <UDP_Handler+0x186>
	}
	if (Is_udd_reset()) {
  401eb4:	4b15      	ldr	r3, [pc, #84]	; (401f0c <UDP_Handler+0x190>)
  401eb6:	69db      	ldr	r3, [r3, #28]
  401eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  401ebc:	2b00      	cmp	r3, #0
  401ebe:	d020      	beq.n	401f02 <UDP_Handler+0x186>
		// USB bus reset detection
		udd_ack_reset();
  401ec0:	4b12      	ldr	r3, [pc, #72]	; (401f0c <UDP_Handler+0x190>)
  401ec2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401ec6:	621a      	str	r2, [r3, #32]

		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
  401ec8:	4b18      	ldr	r3, [pc, #96]	; (401f2c <UDP_Handler+0x1b0>)
  401eca:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
  401ecc:	4b18      	ldr	r3, [pc, #96]	; (401f30 <UDP_Handler+0x1b4>)
  401ece:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  401ed0:	4b0e      	ldr	r3, [pc, #56]	; (401f0c <UDP_Handler+0x190>)
  401ed2:	4a0e      	ldr	r2, [pc, #56]	; (401f0c <UDP_Handler+0x190>)
  401ed4:	6852      	ldr	r2, [r2, #4]
  401ed6:	f022 0201 	bic.w	r2, r2, #1
  401eda:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  401edc:	4b0b      	ldr	r3, [pc, #44]	; (401f0c <UDP_Handler+0x190>)
  401ede:	4a0b      	ldr	r2, [pc, #44]	; (401f0c <UDP_Handler+0x190>)
  401ee0:	6852      	ldr	r2, [r2, #4]
  401ee2:	f022 0202 	bic.w	r2, r2, #2
  401ee6:	605a      	str	r2, [r3, #4]
		// Reset endpoint control
		udd_reset_ep_ctrl();
  401ee8:	4b12      	ldr	r3, [pc, #72]	; (401f34 <UDP_Handler+0x1b8>)
  401eea:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
  401eec:	4b12      	ldr	r3, [pc, #72]	; (401f38 <UDP_Handler+0x1bc>)
  401eee:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  401ef0:	4b06      	ldr	r3, [pc, #24]	; (401f0c <UDP_Handler+0x190>)
  401ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
  401ef6:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401ef8:	4b04      	ldr	r3, [pc, #16]	; (401f0c <UDP_Handler+0x190>)
  401efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401efe:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401f00:	bf00      	nop
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
  401f02:	bf00      	nop
}
  401f04:	bd80      	pop	{r7, pc}
  401f06:	bf00      	nop
  401f08:	004097d9 	.word	0x004097d9
  401f0c:	40034000 	.word	0x40034000
  401f10:	2000020c 	.word	0x2000020c
  401f14:	00409665 	.word	0x00409665
  401f18:	004012c1 	.word	0x004012c1
  401f1c:	004030c1 	.word	0x004030c1
  401f20:	004037a1 	.word	0x004037a1
  401f24:	00401d25 	.word	0x00401d25
  401f28:	004096e9 	.word	0x004096e9
  401f2c:	00403215 	.word	0x00403215
  401f30:	0040126d 	.word	0x0040126d
  401f34:	00402889 	.word	0x00402889
  401f38:	00402939 	.word	0x00402939

00401f3c <udd_enable>:
#endif
}


void udd_enable(void)
{
  401f3c:	b580      	push	{r7, lr}
  401f3e:	b082      	sub	sp, #8
  401f40:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
  401f42:	4b11      	ldr	r3, [pc, #68]	; (401f88 <udd_enable+0x4c>)
  401f44:	4798      	blx	r3
  401f46:	6078      	str	r0, [r7, #4]
#if SAMG55
	matrix_set_usb_device();
#endif

	// Enable USB hardware
	udd_enable_periph_ck();
  401f48:	2022      	movs	r0, #34	; 0x22
  401f4a:	4b10      	ldr	r3, [pc, #64]	; (401f8c <udd_enable+0x50>)
  401f4c:	4798      	blx	r3
	sysclk_enable_usb();
  401f4e:	4b10      	ldr	r3, [pc, #64]	; (401f90 <udd_enable+0x54>)
  401f50:	4798      	blx	r3
	// Cortex, uses NVIC, no need to register IRQ handler
	NVIC_SetPriority((IRQn_Type) ID_UDP, UDD_USB_INT_LEVEL);
  401f52:	2022      	movs	r0, #34	; 0x22
  401f54:	2105      	movs	r1, #5
  401f56:	4b0f      	ldr	r3, [pc, #60]	; (401f94 <udd_enable+0x58>)
  401f58:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDP);
  401f5a:	2022      	movs	r0, #34	; 0x22
  401f5c:	4b0e      	ldr	r3, [pc, #56]	; (401f98 <udd_enable+0x5c>)
  401f5e:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
  401f60:	4b0e      	ldr	r3, [pc, #56]	; (401f9c <udd_enable+0x60>)
  401f62:	4798      	blx	r3
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  401f64:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  401f68:	4b0d      	ldr	r3, [pc, #52]	; (401fa0 <udd_enable+0x64>)
  401f6a:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  401f6c:	4b0d      	ldr	r3, [pc, #52]	; (401fa4 <udd_enable+0x68>)
  401f6e:	2200      	movs	r2, #0
  401f70:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_SUSPEND);
  401f72:	2000      	movs	r0, #0
  401f74:	4b0c      	ldr	r3, [pc, #48]	; (401fa8 <udd_enable+0x6c>)
  401f76:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  401f78:	4b0c      	ldr	r3, [pc, #48]	; (401fac <udd_enable+0x70>)
  401f7a:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
  401f7c:	6878      	ldr	r0, [r7, #4]
  401f7e:	4b0c      	ldr	r3, [pc, #48]	; (401fb0 <udd_enable+0x74>)
  401f80:	4798      	blx	r3
}
  401f82:	3708      	adds	r7, #8
  401f84:	46bd      	mov	sp, r7
  401f86:	bd80      	pop	{r7, pc}
  401f88:	00401c2d 	.word	0x00401c2d
  401f8c:	00409665 	.word	0x00409665
  401f90:	00408909 	.word	0x00408909
  401f94:	00401bd9 	.word	0x00401bd9
  401f98:	00401ba9 	.word	0x00401ba9
  401f9c:	0040316d 	.word	0x0040316d
  401fa0:	004097ad 	.word	0x004097ad
  401fa4:	20000c66 	.word	0x20000c66
  401fa8:	00401cb5 	.word	0x00401cb5
  401fac:	00401fb5 	.word	0x00401fb5
  401fb0:	00401c85 	.word	0x00401c85

00401fb4 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  401fb4:	b580      	push	{r7, lr}
  401fb6:	b082      	sub	sp, #8
  401fb8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
  401fba:	4b17      	ldr	r3, [pc, #92]	; (402018 <udd_attach+0x64>)
  401fbc:	4798      	blx	r3
  401fbe:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  401fc0:	2001      	movs	r0, #1
  401fc2:	4b16      	ldr	r3, [pc, #88]	; (40201c <udd_attach+0x68>)
  401fc4:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  401fc6:	2022      	movs	r0, #34	; 0x22
  401fc8:	4b15      	ldr	r3, [pc, #84]	; (402020 <udd_attach+0x6c>)
  401fca:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  401fcc:	4b15      	ldr	r3, [pc, #84]	; (402024 <udd_attach+0x70>)
  401fce:	4a15      	ldr	r2, [pc, #84]	; (402024 <udd_attach+0x70>)
  401fd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
  401fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401fd6:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  401fd8:	4b12      	ldr	r3, [pc, #72]	; (402024 <udd_attach+0x70>)
  401fda:	4a12      	ldr	r2, [pc, #72]	; (402024 <udd_attach+0x70>)
  401fdc:	6f52      	ldr	r2, [r2, #116]	; 0x74
  401fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  401fe2:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  401fe4:	4b0f      	ldr	r3, [pc, #60]	; (402024 <udd_attach+0x70>)
  401fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
  401fea:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  401fec:	4b0d      	ldr	r3, [pc, #52]	; (402024 <udd_attach+0x70>)
  401fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401ff2:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  401ff4:	4b0b      	ldr	r3, [pc, #44]	; (402024 <udd_attach+0x70>)
  401ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
  401ffa:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  401ffc:	4b09      	ldr	r3, [pc, #36]	; (402024 <udd_attach+0x70>)
  401ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402002:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  402004:	4b07      	ldr	r3, [pc, #28]	; (402024 <udd_attach+0x70>)
  402006:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40200a:	611a      	str	r2, [r3, #16]

	cpu_irq_restore(flags);
  40200c:	6878      	ldr	r0, [r7, #4]
  40200e:	4b06      	ldr	r3, [pc, #24]	; (402028 <udd_attach+0x74>)
  402010:	4798      	blx	r3
}
  402012:	3708      	adds	r7, #8
  402014:	46bd      	mov	sp, r7
  402016:	bd80      	pop	{r7, pc}
  402018:	00401c2d 	.word	0x00401c2d
  40201c:	00401d25 	.word	0x00401d25
  402020:	00409665 	.word	0x00409665
  402024:	40034000 	.word	0x40034000
  402028:	00401c85 	.word	0x00401c85

0040202c <udd_is_high_speed>:
	udd_sleep_mode(false);
}


bool udd_is_high_speed(void)
{
  40202c:	b480      	push	{r7}
  40202e:	af00      	add	r7, sp, #0
	return false;
  402030:	2300      	movs	r3, #0
}
  402032:	4618      	mov	r0, r3
  402034:	46bd      	mov	sp, r7
  402036:	f85d 7b04 	ldr.w	r7, [sp], #4
  40203a:	4770      	bx	lr

0040203c <udd_set_address>:


void udd_set_address(uint8_t address)
{
  40203c:	b480      	push	{r7}
  40203e:	b083      	sub	sp, #12
  402040:	af00      	add	r7, sp, #0
  402042:	4603      	mov	r3, r0
  402044:	71fb      	strb	r3, [r7, #7]
	udd_disable_address_state();
  402046:	4b15      	ldr	r3, [pc, #84]	; (40209c <udd_set_address+0x60>)
  402048:	4a14      	ldr	r2, [pc, #80]	; (40209c <udd_set_address+0x60>)
  40204a:	6852      	ldr	r2, [r2, #4]
  40204c:	f022 0201 	bic.w	r2, r2, #1
  402050:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  402052:	4b12      	ldr	r3, [pc, #72]	; (40209c <udd_set_address+0x60>)
  402054:	4a11      	ldr	r2, [pc, #68]	; (40209c <udd_set_address+0x60>)
  402056:	6892      	ldr	r2, [r2, #8]
  402058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  40205c:	609a      	str	r2, [r3, #8]
	if (address) {
  40205e:	79fb      	ldrb	r3, [r7, #7]
  402060:	2b00      	cmp	r3, #0
  402062:	d015      	beq.n	402090 <udd_set_address+0x54>
		udd_configure_address(address);
  402064:	4b0d      	ldr	r3, [pc, #52]	; (40209c <udd_set_address+0x60>)
  402066:	4a0d      	ldr	r2, [pc, #52]	; (40209c <udd_set_address+0x60>)
  402068:	6892      	ldr	r2, [r2, #8]
  40206a:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
  40206e:	79fa      	ldrb	r2, [r7, #7]
  402070:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402074:	430a      	orrs	r2, r1
  402076:	609a      	str	r2, [r3, #8]
		udd_enable_address();
  402078:	4b08      	ldr	r3, [pc, #32]	; (40209c <udd_set_address+0x60>)
  40207a:	4a08      	ldr	r2, [pc, #32]	; (40209c <udd_set_address+0x60>)
  40207c:	6892      	ldr	r2, [r2, #8]
  40207e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402082:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  402084:	4b05      	ldr	r3, [pc, #20]	; (40209c <udd_set_address+0x60>)
  402086:	4a05      	ldr	r2, [pc, #20]	; (40209c <udd_set_address+0x60>)
  402088:	6852      	ldr	r2, [r2, #4]
  40208a:	f042 0201 	orr.w	r2, r2, #1
  40208e:	605a      	str	r2, [r3, #4]
	}
}
  402090:	370c      	adds	r7, #12
  402092:	46bd      	mov	sp, r7
  402094:	f85d 7b04 	ldr.w	r7, [sp], #4
  402098:	4770      	bx	lr
  40209a:	bf00      	nop
  40209c:	40034000 	.word	0x40034000

004020a0 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
  4020a0:	b480      	push	{r7}
  4020a2:	af00      	add	r7, sp, #0
	if (Is_udd_address_state_enabled())
  4020a4:	4b09      	ldr	r3, [pc, #36]	; (4020cc <udd_getaddress+0x2c>)
  4020a6:	685b      	ldr	r3, [r3, #4]
  4020a8:	f003 0301 	and.w	r3, r3, #1
  4020ac:	2b00      	cmp	r3, #0
  4020ae:	d006      	beq.n	4020be <udd_getaddress+0x1e>
		return udd_get_configured_address();
  4020b0:	4b06      	ldr	r3, [pc, #24]	; (4020cc <udd_getaddress+0x2c>)
  4020b2:	689b      	ldr	r3, [r3, #8]
  4020b4:	b2db      	uxtb	r3, r3
  4020b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4020ba:	b2db      	uxtb	r3, r3
  4020bc:	e000      	b.n	4020c0 <udd_getaddress+0x20>
	return 0;
  4020be:	2300      	movs	r3, #0
}
  4020c0:	4618      	mov	r0, r3
  4020c2:	46bd      	mov	sp, r7
  4020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020c8:	4770      	bx	lr
  4020ca:	bf00      	nop
  4020cc:	40034000 	.word	0x40034000

004020d0 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
  4020d0:	b480      	push	{r7}
  4020d2:	af00      	add	r7, sp, #0
	return udd_frame_number();
  4020d4:	4b05      	ldr	r3, [pc, #20]	; (4020ec <udd_get_frame_number+0x1c>)
  4020d6:	681b      	ldr	r3, [r3, #0]
  4020d8:	b29b      	uxth	r3, r3
  4020da:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4020de:	b29b      	uxth	r3, r3
}
  4020e0:	4618      	mov	r0, r3
  4020e2:	46bd      	mov	sp, r7
  4020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020e8:	4770      	bx	lr
  4020ea:	bf00      	nop
  4020ec:	40034000 	.word	0x40034000

004020f0 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
  4020f0:	b480      	push	{r7}
  4020f2:	af00      	add	r7, sp, #0
	return 0;
  4020f4:	2300      	movs	r3, #0
}
  4020f6:	4618      	mov	r0, r3
  4020f8:	46bd      	mov	sp, r7
  4020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020fe:	4770      	bx	lr

00402100 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
  402100:	b480      	push	{r7}
  402102:	b083      	sub	sp, #12
  402104:	af00      	add	r7, sp, #0
  402106:	6078      	str	r0, [r7, #4]
  402108:	460b      	mov	r3, r1
  40210a:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
  40210c:	4b05      	ldr	r3, [pc, #20]	; (402124 <udd_set_setup_payload+0x24>)
  40210e:	687a      	ldr	r2, [r7, #4]
  402110:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  402112:	4b04      	ldr	r3, [pc, #16]	; (402124 <udd_set_setup_payload+0x24>)
  402114:	887a      	ldrh	r2, [r7, #2]
  402116:	819a      	strh	r2, [r3, #12]
}
  402118:	370c      	adds	r7, #12
  40211a:	46bd      	mov	sp, r7
  40211c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402120:	4770      	bx	lr
  402122:	bf00      	nop
  402124:	20014f88 	.word	0x20014f88

00402128 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  402128:	b480      	push	{r7}
  40212a:	b087      	sub	sp, #28
  40212c:	af00      	add	r7, sp, #0
  40212e:	4613      	mov	r3, r2
  402130:	4602      	mov	r2, r0
  402132:	71fa      	strb	r2, [r7, #7]
  402134:	460a      	mov	r2, r1
  402136:	71ba      	strb	r2, [r7, #6]
  402138:	80bb      	strh	r3, [r7, #4]
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
  40213a:	79fb      	ldrb	r3, [r7, #7]
  40213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402140:	2b00      	cmp	r3, #0
  402142:	bf0c      	ite	eq
  402144:	2300      	moveq	r3, #0
  402146:	2301      	movne	r3, #1
  402148:	75fb      	strb	r3, [r7, #23]
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
  40214a:	79bb      	ldrb	r3, [r7, #6]
  40214c:	f003 0303 	and.w	r3, r3, #3
  402150:	2b01      	cmp	r3, #1
  402152:	bf14      	ite	ne
  402154:	2300      	movne	r3, #0
  402156:	2301      	moveq	r3, #1
  402158:	75bb      	strb	r3, [r7, #22]
	ep = ep & USB_EP_ADDR_MASK;
  40215a:	79fb      	ldrb	r3, [r7, #7]
  40215c:	f003 030f 	and.w	r3, r3, #15
  402160:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
  402162:	79fb      	ldrb	r3, [r7, #7]
  402164:	2b03      	cmp	r3, #3
  402166:	d901      	bls.n	40216c <udd_ep_alloc+0x44>
		return false;
  402168:	2300      	movs	r3, #0
  40216a:	e092      	b.n	402292 <udd_ep_alloc+0x16a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
  40216c:	4b4c      	ldr	r3, [pc, #304]	; (4022a0 <udd_ep_alloc+0x178>)
  40216e:	79fa      	ldrb	r2, [r7, #7]
  402170:	320c      	adds	r2, #12
  402172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  40217a:	2b00      	cmp	r3, #0
  40217c:	d001      	beq.n	402182 <udd_ep_alloc+0x5a>
		return false;
  40217e:	2300      	movs	r3, #0
  402180:	e087      	b.n	402292 <udd_ep_alloc+0x16a>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402182:	7dbb      	ldrb	r3, [r7, #22]
  402184:	2b00      	cmp	r3, #0
  402186:	d007      	beq.n	402198 <udd_ep_alloc+0x70>
  402188:	79fb      	ldrb	r3, [r7, #7]
  40218a:	2b00      	cmp	r3, #0
  40218c:	d002      	beq.n	402194 <udd_ep_alloc+0x6c>
  40218e:	79fb      	ldrb	r3, [r7, #7]
  402190:	2b03      	cmp	r3, #3
  402192:	d101      	bne.n	402198 <udd_ep_alloc+0x70>
		return false;
  402194:	2300      	movs	r3, #0
  402196:	e07c      	b.n	402292 <udd_ep_alloc+0x16a>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  402198:	88ba      	ldrh	r2, [r7, #4]
  40219a:	79fb      	ldrb	r3, [r7, #7]
  40219c:	2b04      	cmp	r3, #4
  40219e:	d002      	beq.n	4021a6 <udd_ep_alloc+0x7e>
  4021a0:	79fb      	ldrb	r3, [r7, #7]
  4021a2:	2b05      	cmp	r3, #5
  4021a4:	d102      	bne.n	4021ac <udd_ep_alloc+0x84>
  4021a6:	f44f 7300 	mov.w	r3, #512	; 0x200
  4021aa:	e000      	b.n	4021ae <udd_ep_alloc+0x86>
  4021ac:	2340      	movs	r3, #64	; 0x40
  4021ae:	429a      	cmp	r2, r3
  4021b0:	dd01      	ble.n	4021b6 <udd_ep_alloc+0x8e>
		return false;
  4021b2:	2300      	movs	r3, #0
  4021b4:	e06d      	b.n	402292 <udd_ep_alloc+0x16a>
	}
	ptr_job = &udd_ep_job[ep - 1];
  4021b6:	79fb      	ldrb	r3, [r7, #7]
  4021b8:	1e5a      	subs	r2, r3, #1
  4021ba:	4613      	mov	r3, r2
  4021bc:	009b      	lsls	r3, r3, #2
  4021be:	4413      	add	r3, r2
  4021c0:	009b      	lsls	r3, r3, #2
  4021c2:	4a38      	ldr	r2, [pc, #224]	; (4022a4 <udd_ep_alloc+0x17c>)
  4021c4:	4413      	add	r3, r2
  4021c6:	613b      	str	r3, [r7, #16]

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  4021c8:	88bb      	ldrh	r3, [r7, #4]
  4021ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4021ce:	b299      	uxth	r1, r3
  4021d0:	693a      	ldr	r2, [r7, #16]
  4021d2:	8a13      	ldrh	r3, [r2, #16]
  4021d4:	f361 0309 	bfi	r3, r1, #0, #10
  4021d8:	8213      	strh	r3, [r2, #16]
	ptr_job->b_buf_end = false;
  4021da:	693a      	ldr	r2, [r7, #16]
  4021dc:	7c53      	ldrb	r3, [r2, #17]
  4021de:	f36f 13c7 	bfc	r3, #7, #1
  4021e2:	7453      	strb	r3, [r2, #17]
	ptr_job->b_stall_requested = false;
  4021e4:	693a      	ldr	r2, [r7, #16]
  4021e6:	7c53      	ldrb	r3, [r2, #17]
  4021e8:	f36f 1345 	bfc	r3, #5, #1
  4021ec:	7453      	strb	r3, [r2, #17]
	if (b_dir_in) {
  4021ee:	7dfb      	ldrb	r3, [r7, #23]
  4021f0:	2b00      	cmp	r3, #0
  4021f2:	d004      	beq.n	4021fe <udd_ep_alloc+0xd6>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  4021f4:	693a      	ldr	r2, [r7, #16]
  4021f6:	7c53      	ldrb	r3, [r2, #17]
  4021f8:	f36f 0383 	bfc	r3, #2, #2
  4021fc:	7453      	strb	r3, [r2, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  4021fe:	4b28      	ldr	r3, [pc, #160]	; (4022a0 <udd_ep_alloc+0x178>)
  402200:	4a27      	ldr	r2, [pc, #156]	; (4022a0 <udd_ep_alloc+0x178>)
  402202:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402204:	79fa      	ldrb	r2, [r7, #7]
  402206:	2001      	movs	r0, #1
  402208:	fa00 f202 	lsl.w	r2, r0, r2
  40220c:	430a      	orrs	r2, r1
  40220e:	629a      	str	r2, [r3, #40]	; 0x28
  402210:	4b23      	ldr	r3, [pc, #140]	; (4022a0 <udd_ep_alloc+0x178>)
  402212:	4a23      	ldr	r2, [pc, #140]	; (4022a0 <udd_ep_alloc+0x178>)
  402214:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402216:	79fa      	ldrb	r2, [r7, #7]
  402218:	2001      	movs	r0, #1
  40221a:	fa00 f202 	lsl.w	r2, r0, r2
  40221e:	43d2      	mvns	r2, r2
  402220:	400a      	ands	r2, r1
  402222:	629a      	str	r2, [r3, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  402224:	4b1e      	ldr	r3, [pc, #120]	; (4022a0 <udd_ep_alloc+0x178>)
  402226:	79fa      	ldrb	r2, [r7, #7]
  402228:	320c      	adds	r2, #12
  40222a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40222e:	60fb      	str	r3, [r7, #12]
  402230:	68fb      	ldr	r3, [r7, #12]
  402232:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402236:	60fb      	str	r3, [r7, #12]
  402238:	68fb      	ldr	r3, [r7, #12]
  40223a:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  40223e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402242:	60fb      	str	r3, [r7, #12]
  402244:	7dfb      	ldrb	r3, [r7, #23]
  402246:	2b00      	cmp	r3, #0
  402248:	d009      	beq.n	40225e <udd_ep_alloc+0x136>
  40224a:	79bb      	ldrb	r3, [r7, #6]
  40224c:	f043 0304 	orr.w	r3, r3, #4
  402250:	b2db      	uxtb	r3, r3
  402252:	021b      	lsls	r3, r3, #8
  402254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40225c:	e005      	b.n	40226a <udd_ep_alloc+0x142>
  40225e:	79bb      	ldrb	r3, [r7, #6]
  402260:	021b      	lsls	r3, r3, #8
  402262:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40226a:	68fa      	ldr	r2, [r7, #12]
  40226c:	4313      	orrs	r3, r2
  40226e:	60fb      	str	r3, [r7, #12]
  402270:	4b0b      	ldr	r3, [pc, #44]	; (4022a0 <udd_ep_alloc+0x178>)
  402272:	79fa      	ldrb	r2, [r7, #7]
  402274:	68f9      	ldr	r1, [r7, #12]
  402276:	320c      	adds	r2, #12
  402278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40227c:	2300      	movs	r3, #0
  40227e:	60bb      	str	r3, [r7, #8]
  402280:	e003      	b.n	40228a <udd_ep_alloc+0x162>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402282:	bf00      	nop
  402284:	68bb      	ldr	r3, [r7, #8]
  402286:	3301      	adds	r3, #1
  402288:	60bb      	str	r3, [r7, #8]
  40228a:	68bb      	ldr	r3, [r7, #8]
  40228c:	2b13      	cmp	r3, #19
  40228e:	d9f8      	bls.n	402282 <udd_ep_alloc+0x15a>
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  402290:	2301      	movs	r3, #1
}
  402292:	4618      	mov	r0, r3
  402294:	371c      	adds	r7, #28
  402296:	46bd      	mov	sp, r7
  402298:	f85d 7b04 	ldr.w	r7, [sp], #4
  40229c:	4770      	bx	lr
  40229e:	bf00      	nop
  4022a0:	40034000 	.word	0x40034000
  4022a4:	20000c6c 	.word	0x20000c6c

004022a8 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  4022a8:	b580      	push	{r7, lr}
  4022aa:	b084      	sub	sp, #16
  4022ac:	af00      	add	r7, sp, #0
  4022ae:	4603      	mov	r3, r0
  4022b0:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4022b2:	79fb      	ldrb	r3, [r7, #7]
  4022b4:	f003 030f 	and.w	r3, r3, #15
  4022b8:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep_index) {
  4022ba:	7bfb      	ldrb	r3, [r7, #15]
  4022bc:	2b03      	cmp	r3, #3
  4022be:	d900      	bls.n	4022c2 <udd_ep_free+0x1a>
		return;
  4022c0:	e00f      	b.n	4022e2 <udd_ep_free+0x3a>
	}
	udd_disable_endpoint(ep_index);
  4022c2:	4b09      	ldr	r3, [pc, #36]	; (4022e8 <udd_ep_free+0x40>)
  4022c4:	7bfa      	ldrb	r2, [r7, #15]
  4022c6:	4908      	ldr	r1, [pc, #32]	; (4022e8 <udd_ep_free+0x40>)
  4022c8:	7bf8      	ldrb	r0, [r7, #15]
  4022ca:	300c      	adds	r0, #12
  4022cc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4022d0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  4022d4:	320c      	adds	r2, #12
  4022d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	udd_ep_abort_job(ep);
  4022da:	79fb      	ldrb	r3, [r7, #7]
  4022dc:	4618      	mov	r0, r3
  4022de:	4b03      	ldr	r3, [pc, #12]	; (4022ec <udd_ep_free+0x44>)
  4022e0:	4798      	blx	r3
}
  4022e2:	3710      	adds	r7, #16
  4022e4:	46bd      	mov	sp, r7
  4022e6:	bd80      	pop	{r7, pc}
  4022e8:	40034000 	.word	0x40034000
  4022ec:	00403259 	.word	0x00403259

004022f0 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
  4022f0:	b480      	push	{r7}
  4022f2:	b085      	sub	sp, #20
  4022f4:	af00      	add	r7, sp, #0
  4022f6:	4603      	mov	r3, r0
  4022f8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4022fa:	79fb      	ldrb	r3, [r7, #7]
  4022fc:	f003 030f 	and.w	r3, r3, #15
  402300:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402302:	7bfb      	ldrb	r3, [r7, #15]
  402304:	1e5a      	subs	r2, r3, #1
  402306:	4613      	mov	r3, r2
  402308:	009b      	lsls	r3, r3, #2
  40230a:	4413      	add	r3, r2
  40230c:	009b      	lsls	r3, r3, #2
  40230e:	4a13      	ldr	r2, [pc, #76]	; (40235c <udd_ep_is_halted+0x6c>)
  402310:	4413      	add	r3, r2
  402312:	60bb      	str	r3, [r7, #8]
	if (USB_DEVICE_MAX_EP < ep_index) {
  402314:	7bfb      	ldrb	r3, [r7, #15]
  402316:	2b03      	cmp	r3, #3
  402318:	d901      	bls.n	40231e <udd_ep_is_halted+0x2e>
		return false;
  40231a:	2300      	movs	r3, #0
  40231c:	e017      	b.n	40234e <udd_ep_is_halted+0x5e>
	}
	return ptr_job->b_stall_requested ||
  40231e:	68bb      	ldr	r3, [r7, #8]
  402320:	7c5b      	ldrb	r3, [r3, #17]
  402322:	f3c3 1340 	ubfx	r3, r3, #5, #1
  402326:	b2db      	uxtb	r3, r3
  402328:	2b00      	cmp	r3, #0
  40232a:	d10a      	bne.n	402342 <udd_ep_is_halted+0x52>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  40232c:	4b0c      	ldr	r3, [pc, #48]	; (402360 <udd_ep_is_halted+0x70>)
  40232e:	79fa      	ldrb	r2, [r7, #7]
  402330:	f002 020f 	and.w	r2, r2, #15
  402334:	320c      	adds	r2, #12
  402336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40233a:	f003 0328 	and.w	r3, r3, #40	; 0x28
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  40233e:	2b00      	cmp	r3, #0
  402340:	d001      	beq.n	402346 <udd_ep_is_halted+0x56>
  402342:	2301      	movs	r3, #1
  402344:	e000      	b.n	402348 <udd_ep_is_halted+0x58>
  402346:	2300      	movs	r3, #0
  402348:	f003 0301 	and.w	r3, r3, #1
  40234c:	b2db      	uxtb	r3, r3
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  40234e:	4618      	mov	r0, r3
  402350:	3714      	adds	r7, #20
  402352:	46bd      	mov	sp, r7
  402354:	f85d 7b04 	ldr.w	r7, [sp], #4
  402358:	4770      	bx	lr
  40235a:	bf00      	nop
  40235c:	20000c6c 	.word	0x20000c6c
  402360:	40034000 	.word	0x40034000

00402364 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  402364:	b580      	push	{r7, lr}
  402366:	b088      	sub	sp, #32
  402368:	af00      	add	r7, sp, #0
  40236a:	4603      	mov	r3, r0
  40236c:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  40236e:	79fb      	ldrb	r3, [r7, #7]
  402370:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402374:	2b00      	cmp	r3, #0
  402376:	bf0c      	ite	eq
  402378:	2300      	moveq	r3, #0
  40237a:	2301      	movne	r3, #1
  40237c:	77fb      	strb	r3, [r7, #31]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  40237e:	79fb      	ldrb	r3, [r7, #7]
  402380:	f003 030f 	and.w	r3, r3, #15
  402384:	77bb      	strb	r3, [r7, #30]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402386:	7fbb      	ldrb	r3, [r7, #30]
  402388:	1e5a      	subs	r2, r3, #1
  40238a:	4613      	mov	r3, r2
  40238c:	009b      	lsls	r3, r3, #2
  40238e:	4413      	add	r3, r2
  402390:	009b      	lsls	r3, r3, #2
  402392:	4a2d      	ldr	r2, [pc, #180]	; (402448 <udd_ep_set_halt+0xe4>)
  402394:	4413      	add	r3, r2
  402396:	61bb      	str	r3, [r7, #24]
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  402398:	7fbb      	ldrb	r3, [r7, #30]
  40239a:	2b03      	cmp	r3, #3
  40239c:	d901      	bls.n	4023a2 <udd_ep_set_halt+0x3e>
		return false;
  40239e:	2300      	movs	r3, #0
  4023a0:	e04d      	b.n	40243e <udd_ep_set_halt+0xda>
	}
	flags = cpu_irq_save();
  4023a2:	4b2a      	ldr	r3, [pc, #168]	; (40244c <udd_ep_set_halt+0xe8>)
  4023a4:	4798      	blx	r3
  4023a6:	6178      	str	r0, [r7, #20]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4023a8:	7ffb      	ldrb	r3, [r7, #31]
  4023aa:	2b00      	cmp	r3, #0
  4023ac:	d01f      	beq.n	4023ee <udd_ep_set_halt+0x8a>
  4023ae:	4b28      	ldr	r3, [pc, #160]	; (402450 <udd_ep_set_halt+0xec>)
  4023b0:	7fba      	ldrb	r2, [r7, #30]
  4023b2:	320c      	adds	r2, #12
  4023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4023b8:	f003 0310 	and.w	r3, r3, #16
  4023bc:	2b00      	cmp	r3, #0
  4023be:	d106      	bne.n	4023ce <udd_ep_set_halt+0x6a>
				|| ptr_job->bank > 1)) {
  4023c0:	69bb      	ldr	r3, [r7, #24]
  4023c2:	7c5b      	ldrb	r3, [r3, #17]
  4023c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4023c8:	b2db      	uxtb	r3, r3
  4023ca:	2b01      	cmp	r3, #1
  4023cc:	dd0f      	ble.n	4023ee <udd_ep_set_halt+0x8a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  4023ce:	69ba      	ldr	r2, [r7, #24]
  4023d0:	7c53      	ldrb	r3, [r2, #17]
  4023d2:	f043 0320 	orr.w	r3, r3, #32
  4023d6:	7453      	strb	r3, [r2, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4023d8:	4b1d      	ldr	r3, [pc, #116]	; (402450 <udd_ep_set_halt+0xec>)
  4023da:	7fba      	ldrb	r2, [r7, #30]
  4023dc:	2101      	movs	r1, #1
  4023de:	fa01 f202 	lsl.w	r2, r1, r2
  4023e2:	611a      	str	r2, [r3, #16]
		cpu_irq_restore(flags);
  4023e4:	6978      	ldr	r0, [r7, #20]
  4023e6:	4b1b      	ldr	r3, [pc, #108]	; (402454 <udd_ep_set_halt+0xf0>)
  4023e8:	4798      	blx	r3
		return true;
  4023ea:	2301      	movs	r3, #1
  4023ec:	e027      	b.n	40243e <udd_ep_set_halt+0xda>
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  4023ee:	4b18      	ldr	r3, [pc, #96]	; (402450 <udd_ep_set_halt+0xec>)
  4023f0:	7fba      	ldrb	r2, [r7, #30]
  4023f2:	320c      	adds	r2, #12
  4023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4023f8:	613b      	str	r3, [r7, #16]
  4023fa:	693b      	ldr	r3, [r7, #16]
  4023fc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402400:	613b      	str	r3, [r7, #16]
  402402:	693b      	ldr	r3, [r7, #16]
  402404:	f043 0320 	orr.w	r3, r3, #32
  402408:	613b      	str	r3, [r7, #16]
  40240a:	4b11      	ldr	r3, [pc, #68]	; (402450 <udd_ep_set_halt+0xec>)
  40240c:	7fba      	ldrb	r2, [r7, #30]
  40240e:	6939      	ldr	r1, [r7, #16]
  402410:	320c      	adds	r2, #12
  402412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402416:	2300      	movs	r3, #0
  402418:	60fb      	str	r3, [r7, #12]
  40241a:	e003      	b.n	402424 <udd_ep_set_halt+0xc0>
  40241c:	bf00      	nop
  40241e:	68fb      	ldr	r3, [r7, #12]
  402420:	3301      	adds	r3, #1
  402422:	60fb      	str	r3, [r7, #12]
  402424:	68fb      	ldr	r3, [r7, #12]
  402426:	2b13      	cmp	r3, #19
  402428:	d9f8      	bls.n	40241c <udd_ep_set_halt+0xb8>
		udd_enable_endpoint_interrupt(ep_index);
  40242a:	4b09      	ldr	r3, [pc, #36]	; (402450 <udd_ep_set_halt+0xec>)
  40242c:	7fba      	ldrb	r2, [r7, #30]
  40242e:	2101      	movs	r1, #1
  402430:	fa01 f202 	lsl.w	r2, r1, r2
  402434:	611a      	str	r2, [r3, #16]
		cpu_irq_restore(flags);
  402436:	6978      	ldr	r0, [r7, #20]
  402438:	4b06      	ldr	r3, [pc, #24]	; (402454 <udd_ep_set_halt+0xf0>)
  40243a:	4798      	blx	r3
	}
	return true;
  40243c:	2301      	movs	r3, #1
}
  40243e:	4618      	mov	r0, r3
  402440:	3720      	adds	r7, #32
  402442:	46bd      	mov	sp, r7
  402444:	bd80      	pop	{r7, pc}
  402446:	bf00      	nop
  402448:	20000c6c 	.word	0x20000c6c
  40244c:	00401c2d 	.word	0x00401c2d
  402450:	40034000 	.word	0x40034000
  402454:	00401c85 	.word	0x00401c85

00402458 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  402458:	b580      	push	{r7, lr}
  40245a:	b088      	sub	sp, #32
  40245c:	af00      	add	r7, sp, #0
  40245e:	4603      	mov	r3, r0
  402460:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  402462:	79fb      	ldrb	r3, [r7, #7]
  402464:	f003 030f 	and.w	r3, r3, #15
  402468:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  40246a:	79fb      	ldrb	r3, [r7, #7]
  40246c:	2b03      	cmp	r3, #3
  40246e:	d901      	bls.n	402474 <udd_ep_clear_halt+0x1c>
		return false;
  402470:	2300      	movs	r3, #0
  402472:	e075      	b.n	402560 <udd_ep_clear_halt+0x108>
	ptr_job = &udd_ep_job[ep - 1];
  402474:	79fb      	ldrb	r3, [r7, #7]
  402476:	1e5a      	subs	r2, r3, #1
  402478:	4613      	mov	r3, r2
  40247a:	009b      	lsls	r3, r3, #2
  40247c:	4413      	add	r3, r2
  40247e:	009b      	lsls	r3, r3, #2
  402480:	4a39      	ldr	r2, [pc, #228]	; (402568 <udd_ep_clear_halt+0x110>)
  402482:	4413      	add	r3, r2
  402484:	61fb      	str	r3, [r7, #28]

	ptr_job->b_stall_requested = false;
  402486:	69fa      	ldr	r2, [r7, #28]
  402488:	7c53      	ldrb	r3, [r2, #17]
  40248a:	f36f 1345 	bfc	r3, #5, #1
  40248e:	7453      	strb	r3, [r2, #17]
	if (Is_udd_endpoint_stall_requested(ep)) {
  402490:	4b36      	ldr	r3, [pc, #216]	; (40256c <udd_ep_clear_halt+0x114>)
  402492:	79fa      	ldrb	r2, [r7, #7]
  402494:	320c      	adds	r2, #12
  402496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40249a:	f003 0320 	and.w	r3, r3, #32
  40249e:	2b00      	cmp	r3, #0
  4024a0:	d05d      	beq.n	40255e <udd_ep_clear_halt+0x106>
		// Remove stall
		udd_disable_stall_handshake(ep);
  4024a2:	4b32      	ldr	r3, [pc, #200]	; (40256c <udd_ep_clear_halt+0x114>)
  4024a4:	79fa      	ldrb	r2, [r7, #7]
  4024a6:	320c      	adds	r2, #12
  4024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4024ac:	61bb      	str	r3, [r7, #24]
  4024ae:	69bb      	ldr	r3, [r7, #24]
  4024b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4024b4:	61bb      	str	r3, [r7, #24]
  4024b6:	69bb      	ldr	r3, [r7, #24]
  4024b8:	f023 0320 	bic.w	r3, r3, #32
  4024bc:	61bb      	str	r3, [r7, #24]
  4024be:	4b2b      	ldr	r3, [pc, #172]	; (40256c <udd_ep_clear_halt+0x114>)
  4024c0:	79fa      	ldrb	r2, [r7, #7]
  4024c2:	69b9      	ldr	r1, [r7, #24]
  4024c4:	320c      	adds	r2, #12
  4024c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4024ca:	2300      	movs	r3, #0
  4024cc:	617b      	str	r3, [r7, #20]
  4024ce:	e003      	b.n	4024d8 <udd_ep_clear_halt+0x80>
  4024d0:	bf00      	nop
  4024d2:	697b      	ldr	r3, [r7, #20]
  4024d4:	3301      	adds	r3, #1
  4024d6:	617b      	str	r3, [r7, #20]
  4024d8:	697b      	ldr	r3, [r7, #20]
  4024da:	2b13      	cmp	r3, #19
  4024dc:	d9f8      	bls.n	4024d0 <udd_ep_clear_halt+0x78>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  4024de:	4b23      	ldr	r3, [pc, #140]	; (40256c <udd_ep_clear_halt+0x114>)
  4024e0:	4a22      	ldr	r2, [pc, #136]	; (40256c <udd_ep_clear_halt+0x114>)
  4024e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
  4024e4:	79fa      	ldrb	r2, [r7, #7]
  4024e6:	2001      	movs	r0, #1
  4024e8:	fa00 f202 	lsl.w	r2, r0, r2
  4024ec:	430a      	orrs	r2, r1
  4024ee:	629a      	str	r2, [r3, #40]	; 0x28
  4024f0:	4b1e      	ldr	r3, [pc, #120]	; (40256c <udd_ep_clear_halt+0x114>)
  4024f2:	4a1e      	ldr	r2, [pc, #120]	; (40256c <udd_ep_clear_halt+0x114>)
  4024f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  4024f6:	79fa      	ldrb	r2, [r7, #7]
  4024f8:	2001      	movs	r0, #1
  4024fa:	fa00 f202 	lsl.w	r2, r0, r2
  4024fe:	43d2      	mvns	r2, r2
  402500:	400a      	ands	r2, r1
  402502:	629a      	str	r2, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  402504:	4b19      	ldr	r3, [pc, #100]	; (40256c <udd_ep_clear_halt+0x114>)
  402506:	79fa      	ldrb	r2, [r7, #7]
  402508:	320c      	adds	r2, #12
  40250a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40250e:	613b      	str	r3, [r7, #16]
  402510:	693b      	ldr	r3, [r7, #16]
  402512:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402516:	613b      	str	r3, [r7, #16]
  402518:	693b      	ldr	r3, [r7, #16]
  40251a:	f023 0308 	bic.w	r3, r3, #8
  40251e:	613b      	str	r3, [r7, #16]
  402520:	4b12      	ldr	r3, [pc, #72]	; (40256c <udd_ep_clear_halt+0x114>)
  402522:	79fa      	ldrb	r2, [r7, #7]
  402524:	6939      	ldr	r1, [r7, #16]
  402526:	320c      	adds	r2, #12
  402528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40252c:	2300      	movs	r3, #0
  40252e:	60fb      	str	r3, [r7, #12]
  402530:	e003      	b.n	40253a <udd_ep_clear_halt+0xe2>
  402532:	bf00      	nop
  402534:	68fb      	ldr	r3, [r7, #12]
  402536:	3301      	adds	r3, #1
  402538:	60fb      	str	r3, [r7, #12]
  40253a:	68fb      	ldr	r3, [r7, #12]
  40253c:	2b13      	cmp	r3, #19
  40253e:	d9f8      	bls.n	402532 <udd_ep_clear_halt+0xda>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  402540:	69fb      	ldr	r3, [r7, #28]
  402542:	7c5b      	ldrb	r3, [r3, #17]
  402544:	f3c3 1300 	ubfx	r3, r3, #4, #1
  402548:	b2db      	uxtb	r3, r3
  40254a:	2b01      	cmp	r3, #1
  40254c:	d107      	bne.n	40255e <udd_ep_clear_halt+0x106>
			ptr_job->busy = false;
  40254e:	69fa      	ldr	r2, [r7, #28]
  402550:	7c53      	ldrb	r3, [r2, #17]
  402552:	f36f 1304 	bfc	r3, #4, #1
  402556:	7453      	strb	r3, [r2, #17]
			ptr_job->call_nohalt();
  402558:	69fb      	ldr	r3, [r7, #28]
  40255a:	681b      	ldr	r3, [r3, #0]
  40255c:	4798      	blx	r3
		}
	}
	return true;
  40255e:	2301      	movs	r3, #1
}
  402560:	4618      	mov	r0, r3
  402562:	3720      	adds	r7, #32
  402564:	46bd      	mov	sp, r7
  402566:	bd80      	pop	{r7, pc}
  402568:	20000c6c 	.word	0x20000c6c
  40256c:	40034000 	.word	0x40034000

00402570 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402570:	b580      	push	{r7, lr}
  402572:	b088      	sub	sp, #32
  402574:	af00      	add	r7, sp, #0
  402576:	60ba      	str	r2, [r7, #8]
  402578:	607b      	str	r3, [r7, #4]
  40257a:	4603      	mov	r3, r0
  40257c:	73fb      	strb	r3, [r7, #15]
  40257e:	460b      	mov	r3, r1
  402580:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;
  402582:	7bfb      	ldrb	r3, [r7, #15]
  402584:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402588:	2b00      	cmp	r3, #0
  40258a:	bf0c      	ite	eq
  40258c:	2300      	moveq	r3, #0
  40258e:	2301      	movne	r3, #1
  402590:	77fb      	strb	r3, [r7, #31]

	ep &= USB_EP_ADDR_MASK;
  402592:	7bfb      	ldrb	r3, [r7, #15]
  402594:	f003 030f 	and.w	r3, r3, #15
  402598:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
  40259a:	7bfb      	ldrb	r3, [r7, #15]
  40259c:	2b03      	cmp	r3, #3
  40259e:	d901      	bls.n	4025a4 <udd_ep_run+0x34>
		return false;
  4025a0:	2300      	movs	r3, #0
  4025a2:	e083      	b.n	4026ac <udd_ep_run+0x13c>
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  4025a4:	7bfb      	ldrb	r3, [r7, #15]
  4025a6:	1e5a      	subs	r2, r3, #1
  4025a8:	4613      	mov	r3, r2
  4025aa:	009b      	lsls	r3, r3, #2
  4025ac:	4413      	add	r3, r2
  4025ae:	009b      	lsls	r3, r3, #2
  4025b0:	4a40      	ldr	r2, [pc, #256]	; (4026b4 <udd_ep_run+0x144>)
  4025b2:	4413      	add	r3, r2
  4025b4:	61bb      	str	r3, [r7, #24]

	if ((!Is_udd_endpoint_enabled(ep))
  4025b6:	4b40      	ldr	r3, [pc, #256]	; (4026b8 <udd_ep_run+0x148>)
  4025b8:	7bfa      	ldrb	r2, [r7, #15]
  4025ba:	320c      	adds	r2, #12
  4025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4025c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  4025c4:	2b00      	cmp	r3, #0
  4025c6:	d00f      	beq.n	4025e8 <udd_ep_run+0x78>
			|| ptr_job->b_stall_requested
  4025c8:	69bb      	ldr	r3, [r7, #24]
  4025ca:	7c5b      	ldrb	r3, [r3, #17]
  4025cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4025d0:	b2db      	uxtb	r3, r3
  4025d2:	2b00      	cmp	r3, #0
  4025d4:	d108      	bne.n	4025e8 <udd_ep_run+0x78>
			|| Is_udd_endpoint_stall_requested(ep)) {
  4025d6:	4b38      	ldr	r3, [pc, #224]	; (4026b8 <udd_ep_run+0x148>)
  4025d8:	7bfa      	ldrb	r2, [r7, #15]
  4025da:	320c      	adds	r2, #12
  4025dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4025e0:	f003 0320 	and.w	r3, r3, #32
  4025e4:	2b00      	cmp	r3, #0
  4025e6:	d001      	beq.n	4025ec <udd_ep_run+0x7c>
		return false; // Endpoint is halted
  4025e8:	2300      	movs	r3, #0
  4025ea:	e05f      	b.n	4026ac <udd_ep_run+0x13c>
	}

	flags = cpu_irq_save();
  4025ec:	4b33      	ldr	r3, [pc, #204]	; (4026bc <udd_ep_run+0x14c>)
  4025ee:	4798      	blx	r3
  4025f0:	6178      	str	r0, [r7, #20]
	if (ptr_job->busy == true) {
  4025f2:	69bb      	ldr	r3, [r7, #24]
  4025f4:	7c5b      	ldrb	r3, [r3, #17]
  4025f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
  4025fa:	b2db      	uxtb	r3, r3
  4025fc:	2b01      	cmp	r3, #1
  4025fe:	d104      	bne.n	40260a <udd_ep_run+0x9a>
		cpu_irq_restore(flags);
  402600:	6978      	ldr	r0, [r7, #20]
  402602:	4b2f      	ldr	r3, [pc, #188]	; (4026c0 <udd_ep_run+0x150>)
  402604:	4798      	blx	r3
		return false; // Job already on going
  402606:	2300      	movs	r3, #0
  402608:	e050      	b.n	4026ac <udd_ep_run+0x13c>
	}
	ptr_job->busy = true;
  40260a:	69ba      	ldr	r2, [r7, #24]
  40260c:	7c53      	ldrb	r3, [r2, #17]
  40260e:	f043 0310 	orr.w	r3, r3, #16
  402612:	7453      	strb	r3, [r2, #17]
	cpu_irq_restore(flags);
  402614:	6978      	ldr	r0, [r7, #20]
  402616:	4b2a      	ldr	r3, [pc, #168]	; (4026c0 <udd_ep_run+0x150>)
  402618:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  40261a:	69bb      	ldr	r3, [r7, #24]
  40261c:	68ba      	ldr	r2, [r7, #8]
  40261e:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
  402620:	69bb      	ldr	r3, [r7, #24]
  402622:	687a      	ldr	r2, [r7, #4]
  402624:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
  402626:	69bb      	ldr	r3, [r7, #24]
  402628:	2200      	movs	r2, #0
  40262a:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
  40262c:	69bb      	ldr	r3, [r7, #24]
  40262e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402630:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402632:	7bbb      	ldrb	r3, [r7, #14]
  402634:	2b00      	cmp	r3, #0
  402636:	d102      	bne.n	40263e <udd_ep_run+0xce>
  402638:	687b      	ldr	r3, [r7, #4]
  40263a:	2b00      	cmp	r3, #0
  40263c:	d101      	bne.n	402642 <udd_ep_run+0xd2>
  40263e:	2301      	movs	r3, #1
  402640:	e000      	b.n	402644 <udd_ep_run+0xd4>
  402642:	2300      	movs	r3, #0
  402644:	b2db      	uxtb	r3, r3
  402646:	f003 0301 	and.w	r3, r3, #1
  40264a:	b2d9      	uxtb	r1, r3
  40264c:	69ba      	ldr	r2, [r7, #24]
  40264e:	7c53      	ldrb	r3, [r2, #17]
  402650:	f361 1386 	bfi	r3, r1, #6, #1
  402654:	7453      	strb	r3, [r2, #17]
	ptr_job->b_buf_end = false;
  402656:	69ba      	ldr	r2, [r7, #24]
  402658:	7c53      	ldrb	r3, [r2, #17]
  40265a:	f36f 13c7 	bfc	r3, #7, #1
  40265e:	7453      	strb	r3, [r2, #17]

	flags = cpu_irq_save();
  402660:	4b16      	ldr	r3, [pc, #88]	; (4026bc <udd_ep_run+0x14c>)
  402662:	4798      	blx	r3
  402664:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(ep);
  402666:	4b14      	ldr	r3, [pc, #80]	; (4026b8 <udd_ep_run+0x148>)
  402668:	7bfa      	ldrb	r2, [r7, #15]
  40266a:	2101      	movs	r1, #1
  40266c:	fa01 f202 	lsl.w	r2, r1, r2
  402670:	611a      	str	r2, [r3, #16]
	// Request first transfer
	if (b_dir_in) {
  402672:	7ffb      	ldrb	r3, [r7, #31]
  402674:	2b00      	cmp	r3, #0
  402676:	d015      	beq.n	4026a4 <udd_ep_run+0x134>
		if (Is_udd_in_pending(ep)) {
  402678:	4b0f      	ldr	r3, [pc, #60]	; (4026b8 <udd_ep_run+0x148>)
  40267a:	7bfa      	ldrb	r2, [r7, #15]
  40267c:	320c      	adds	r2, #12
  40267e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402682:	f003 0311 	and.w	r3, r3, #17
  402686:	2b00      	cmp	r3, #0
  402688:	d10c      	bne.n	4026a4 <udd_ep_run+0x134>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  40268a:	7bfb      	ldrb	r3, [r7, #15]
  40268c:	4618      	mov	r0, r3
  40268e:	2101      	movs	r1, #1
  402690:	4b0c      	ldr	r3, [pc, #48]	; (4026c4 <udd_ep_run+0x154>)
  402692:	4798      	blx	r3
  402694:	4603      	mov	r3, r0
  402696:	2b00      	cmp	r3, #0
  402698:	d004      	beq.n	4026a4 <udd_ep_run+0x134>
				// Over one bank
				udd_ep_in_sent(ep, false);
  40269a:	7bfb      	ldrb	r3, [r7, #15]
  40269c:	4618      	mov	r0, r3
  40269e:	2100      	movs	r1, #0
  4026a0:	4b08      	ldr	r3, [pc, #32]	; (4026c4 <udd_ep_run+0x154>)
  4026a2:	4798      	blx	r3
			}
		}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);
  4026a4:	6978      	ldr	r0, [r7, #20]
  4026a6:	4b06      	ldr	r3, [pc, #24]	; (4026c0 <udd_ep_run+0x150>)
  4026a8:	4798      	blx	r3

	return true;
  4026aa:	2301      	movs	r3, #1
}
  4026ac:	4618      	mov	r0, r3
  4026ae:	3720      	adds	r7, #32
  4026b0:	46bd      	mov	sp, r7
  4026b2:	bd80      	pop	{r7, pc}
  4026b4:	20000c6c 	.word	0x20000c6c
  4026b8:	40034000 	.word	0x40034000
  4026bc:	00401c2d 	.word	0x00401c2d
  4026c0:	00401c85 	.word	0x00401c85
  4026c4:	0040358d 	.word	0x0040358d

004026c8 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  4026c8:	b580      	push	{r7, lr}
  4026ca:	b088      	sub	sp, #32
  4026cc:	af00      	add	r7, sp, #0
  4026ce:	4603      	mov	r3, r0
  4026d0:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  4026d2:	79fb      	ldrb	r3, [r7, #7]
  4026d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4026d8:	2b00      	cmp	r3, #0
  4026da:	bf0c      	ite	eq
  4026dc:	2300      	moveq	r3, #0
  4026de:	2301      	movne	r3, #1
  4026e0:	77fb      	strb	r3, [r7, #31]
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  4026e2:	79fb      	ldrb	r3, [r7, #7]
  4026e4:	f003 030f 	and.w	r3, r3, #15
  4026e8:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  4026ea:	79fb      	ldrb	r3, [r7, #7]
  4026ec:	2b03      	cmp	r3, #3
  4026ee:	d900      	bls.n	4026f2 <udd_ep_abort+0x2a>
		return;
  4026f0:	e0ba      	b.n	402868 <udd_ep_abort+0x1a0>

	// Disable interrupts
	flags = cpu_irq_save();
  4026f2:	4b5f      	ldr	r3, [pc, #380]	; (402870 <udd_ep_abort+0x1a8>)
  4026f4:	4798      	blx	r3
  4026f6:	61b8      	str	r0, [r7, #24]
	udd_disable_endpoint_interrupt(ep);
  4026f8:	4b5e      	ldr	r3, [pc, #376]	; (402874 <udd_ep_abort+0x1ac>)
  4026fa:	79fa      	ldrb	r2, [r7, #7]
  4026fc:	2101      	movs	r1, #1
  4026fe:	fa01 f202 	lsl.w	r2, r1, r2
  402702:	615a      	str	r2, [r3, #20]
	cpu_irq_restore(flags);
  402704:	69b8      	ldr	r0, [r7, #24]
  402706:	4b5c      	ldr	r3, [pc, #368]	; (402878 <udd_ep_abort+0x1b0>)
  402708:	4798      	blx	r3
	// Clear pending statuses
	if (b_dir_in) {
  40270a:	7ffb      	ldrb	r3, [r7, #31]
  40270c:	2b00      	cmp	r3, #0
  40270e:	f000 8086 	beq.w	40281e <udd_ep_abort+0x156>
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  402712:	4b58      	ldr	r3, [pc, #352]	; (402874 <udd_ep_abort+0x1ac>)
  402714:	79fa      	ldrb	r2, [r7, #7]
  402716:	320c      	adds	r2, #12
  402718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40271c:	f003 0310 	and.w	r3, r3, #16
  402720:	2b00      	cmp	r3, #0
  402722:	d04f      	beq.n	4027c4 <udd_ep_abort+0xfc>
			udd_kill_data_in_fifo(ep,
  402724:	79fb      	ldrb	r3, [r7, #7]
  402726:	2b00      	cmp	r3, #0
  402728:	d02e      	beq.n	402788 <udd_ep_abort+0xc0>
  40272a:	79fb      	ldrb	r3, [r7, #7]
  40272c:	2b03      	cmp	r3, #3
  40272e:	d02b      	beq.n	402788 <udd_ep_abort+0xc0>
  402730:	4b50      	ldr	r3, [pc, #320]	; (402874 <udd_ep_abort+0x1ac>)
  402732:	79fa      	ldrb	r2, [r7, #7]
  402734:	494f      	ldr	r1, [pc, #316]	; (402874 <udd_ep_abort+0x1ac>)
  402736:	79f8      	ldrb	r0, [r7, #7]
  402738:	300c      	adds	r0, #12
  40273a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40273e:	f021 0110 	bic.w	r1, r1, #16
  402742:	320c      	adds	r2, #12
  402744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402748:	bf00      	nop
  40274a:	4b4a      	ldr	r3, [pc, #296]	; (402874 <udd_ep_abort+0x1ac>)
  40274c:	79fa      	ldrb	r2, [r7, #7]
  40274e:	320c      	adds	r2, #12
  402750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402754:	f003 0310 	and.w	r3, r3, #16
  402758:	2b00      	cmp	r3, #0
  40275a:	d1f6      	bne.n	40274a <udd_ep_abort+0x82>
  40275c:	4b45      	ldr	r3, [pc, #276]	; (402874 <udd_ep_abort+0x1ac>)
  40275e:	79fa      	ldrb	r2, [r7, #7]
  402760:	4944      	ldr	r1, [pc, #272]	; (402874 <udd_ep_abort+0x1ac>)
  402762:	79f8      	ldrb	r0, [r7, #7]
  402764:	300c      	adds	r0, #12
  402766:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40276a:	f041 0110 	orr.w	r1, r1, #16
  40276e:	320c      	adds	r2, #12
  402770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  402774:	bf00      	nop
  402776:	4b3f      	ldr	r3, [pc, #252]	; (402874 <udd_ep_abort+0x1ac>)
  402778:	79fa      	ldrb	r2, [r7, #7]
  40277a:	320c      	adds	r2, #12
  40277c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402780:	f003 0310 	and.w	r3, r3, #16
  402784:	2b00      	cmp	r3, #0
  402786:	d0f6      	beq.n	402776 <udd_ep_abort+0xae>
  402788:	4b3a      	ldr	r3, [pc, #232]	; (402874 <udd_ep_abort+0x1ac>)
  40278a:	79fa      	ldrb	r2, [r7, #7]
  40278c:	320c      	adds	r2, #12
  40278e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402792:	617b      	str	r3, [r7, #20]
  402794:	697b      	ldr	r3, [r7, #20]
  402796:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40279a:	617b      	str	r3, [r7, #20]
  40279c:	697b      	ldr	r3, [r7, #20]
  40279e:	f023 0310 	bic.w	r3, r3, #16
  4027a2:	617b      	str	r3, [r7, #20]
  4027a4:	4b33      	ldr	r3, [pc, #204]	; (402874 <udd_ep_abort+0x1ac>)
  4027a6:	79fa      	ldrb	r2, [r7, #7]
  4027a8:	6979      	ldr	r1, [r7, #20]
  4027aa:	320c      	adds	r2, #12
  4027ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4027b0:	2300      	movs	r3, #0
  4027b2:	613b      	str	r3, [r7, #16]
  4027b4:	e003      	b.n	4027be <udd_ep_abort+0xf6>
  4027b6:	bf00      	nop
  4027b8:	693b      	ldr	r3, [r7, #16]
  4027ba:	3301      	adds	r3, #1
  4027bc:	613b      	str	r3, [r7, #16]
  4027be:	693b      	ldr	r3, [r7, #16]
  4027c0:	2b13      	cmp	r3, #19
  4027c2:	d9f8      	bls.n	4027b6 <udd_ep_abort+0xee>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  4027c4:	4b2b      	ldr	r3, [pc, #172]	; (402874 <udd_ep_abort+0x1ac>)
  4027c6:	79fa      	ldrb	r2, [r7, #7]
  4027c8:	320c      	adds	r2, #12
  4027ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4027ce:	60fb      	str	r3, [r7, #12]
  4027d0:	68fb      	ldr	r3, [r7, #12]
  4027d2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4027d6:	60fb      	str	r3, [r7, #12]
  4027d8:	68fb      	ldr	r3, [r7, #12]
  4027da:	f023 0301 	bic.w	r3, r3, #1
  4027de:	60fb      	str	r3, [r7, #12]
  4027e0:	4b24      	ldr	r3, [pc, #144]	; (402874 <udd_ep_abort+0x1ac>)
  4027e2:	79fa      	ldrb	r2, [r7, #7]
  4027e4:	68f9      	ldr	r1, [r7, #12]
  4027e6:	320c      	adds	r2, #12
  4027e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4027ec:	2300      	movs	r3, #0
  4027ee:	60bb      	str	r3, [r7, #8]
  4027f0:	e003      	b.n	4027fa <udd_ep_abort+0x132>
  4027f2:	bf00      	nop
  4027f4:	68bb      	ldr	r3, [r7, #8]
  4027f6:	3301      	adds	r3, #1
  4027f8:	60bb      	str	r3, [r7, #8]
  4027fa:	68bb      	ldr	r3, [r7, #8]
  4027fc:	2b13      	cmp	r3, #19
  4027fe:	d9f8      	bls.n	4027f2 <udd_ep_abort+0x12a>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  402800:	79fb      	ldrb	r3, [r7, #7]
  402802:	1e5a      	subs	r2, r3, #1
  402804:	491d      	ldr	r1, [pc, #116]	; (40287c <udd_ep_abort+0x1b4>)
  402806:	4613      	mov	r3, r2
  402808:	009b      	lsls	r3, r3, #2
  40280a:	4413      	add	r3, r2
  40280c:	009b      	lsls	r3, r3, #2
  40280e:	440b      	add	r3, r1
  402810:	f103 0210 	add.w	r2, r3, #16
  402814:	7853      	ldrb	r3, [r2, #1]
  402816:	f36f 0383 	bfc	r3, #2, #2
  40281a:	7053      	strb	r3, [r2, #1]
  40281c:	e00d      	b.n	40283a <udd_ep_abort+0x172>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  40281e:	e003      	b.n	402828 <udd_ep_abort+0x160>
			udd_ep_ack_out_received(ep);
  402820:	79fb      	ldrb	r3, [r7, #7]
  402822:	4618      	mov	r0, r3
  402824:	4b16      	ldr	r3, [pc, #88]	; (402880 <udd_ep_abort+0x1b8>)
  402826:	4798      	blx	r3
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  402828:	4b12      	ldr	r3, [pc, #72]	; (402874 <udd_ep_abort+0x1ac>)
  40282a:	79fa      	ldrb	r2, [r7, #7]
  40282c:	320c      	adds	r2, #12
  40282e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402832:	f003 0342 	and.w	r3, r3, #66	; 0x42
  402836:	2b00      	cmp	r3, #0
  402838:	d1f2      	bne.n	402820 <udd_ep_abort+0x158>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  40283a:	4b0e      	ldr	r3, [pc, #56]	; (402874 <udd_ep_abort+0x1ac>)
  40283c:	4a0d      	ldr	r2, [pc, #52]	; (402874 <udd_ep_abort+0x1ac>)
  40283e:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402840:	79fa      	ldrb	r2, [r7, #7]
  402842:	2001      	movs	r0, #1
  402844:	fa00 f202 	lsl.w	r2, r0, r2
  402848:	430a      	orrs	r2, r1
  40284a:	629a      	str	r2, [r3, #40]	; 0x28
  40284c:	4b09      	ldr	r3, [pc, #36]	; (402874 <udd_ep_abort+0x1ac>)
  40284e:	4a09      	ldr	r2, [pc, #36]	; (402874 <udd_ep_abort+0x1ac>)
  402850:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402852:	79fa      	ldrb	r2, [r7, #7]
  402854:	2001      	movs	r0, #1
  402856:	fa00 f202 	lsl.w	r2, r0, r2
  40285a:	43d2      	mvns	r2, r2
  40285c:	400a      	ands	r2, r1
  40285e:	629a      	str	r2, [r3, #40]	; 0x28
	// Abort job
	udd_ep_abort_job(ep);
  402860:	79fb      	ldrb	r3, [r7, #7]
  402862:	4618      	mov	r0, r3
  402864:	4b07      	ldr	r3, [pc, #28]	; (402884 <udd_ep_abort+0x1bc>)
  402866:	4798      	blx	r3
}
  402868:	3720      	adds	r7, #32
  40286a:	46bd      	mov	sp, r7
  40286c:	bd80      	pop	{r7, pc}
  40286e:	bf00      	nop
  402870:	00401c2d 	.word	0x00401c2d
  402874:	40034000 	.word	0x40034000
  402878:	00401c85 	.word	0x00401c85
  40287c:	20000c6c 	.word	0x20000c6c
  402880:	00403305 	.word	0x00403305
  402884:	00403259 	.word	0x00403259

00402888 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
  402888:	b580      	push	{r7, lr}
  40288a:	b086      	sub	sp, #24
  40288c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  40288e:	4b27      	ldr	r3, [pc, #156]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  402890:	4a26      	ldr	r2, [pc, #152]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  402892:	6892      	ldr	r2, [r2, #8]
  402894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402898:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  40289a:	4b24      	ldr	r3, [pc, #144]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  40289c:	4a23      	ldr	r2, [pc, #140]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  40289e:	6892      	ldr	r2, [r2, #8]
  4028a0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4028a4:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  4028a6:	4b21      	ldr	r3, [pc, #132]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  4028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028aa:	613b      	str	r3, [r7, #16]
  4028ac:	693b      	ldr	r3, [r7, #16]
  4028ae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4028b2:	613b      	str	r3, [r7, #16]
  4028b4:	693b      	ldr	r3, [r7, #16]
  4028b6:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  4028ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4028be:	613b      	str	r3, [r7, #16]
  4028c0:	693b      	ldr	r3, [r7, #16]
  4028c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4028c6:	613b      	str	r3, [r7, #16]
  4028c8:	4b18      	ldr	r3, [pc, #96]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  4028ca:	693a      	ldr	r2, [r7, #16]
  4028cc:	631a      	str	r2, [r3, #48]	; 0x30
  4028ce:	2300      	movs	r3, #0
  4028d0:	60fb      	str	r3, [r7, #12]
  4028d2:	e003      	b.n	4028dc <udd_reset_ep_ctrl+0x54>
  4028d4:	bf00      	nop
  4028d6:	68fb      	ldr	r3, [r7, #12]
  4028d8:	3301      	adds	r3, #1
  4028da:	60fb      	str	r3, [r7, #12]
  4028dc:	68fb      	ldr	r3, [r7, #12]
  4028de:	2b13      	cmp	r3, #19
  4028e0:	d9f8      	bls.n	4028d4 <udd_reset_ep_ctrl+0x4c>
	udd_enable_endpoint(0);
  4028e2:	4b12      	ldr	r3, [pc, #72]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  4028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028e6:	60bb      	str	r3, [r7, #8]
  4028e8:	68bb      	ldr	r3, [r7, #8]
  4028ea:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4028ee:	60bb      	str	r3, [r7, #8]
  4028f0:	68bb      	ldr	r3, [r7, #8]
  4028f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4028f6:	60bb      	str	r3, [r7, #8]
  4028f8:	4b0c      	ldr	r3, [pc, #48]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  4028fa:	68ba      	ldr	r2, [r7, #8]
  4028fc:	631a      	str	r2, [r3, #48]	; 0x30
  4028fe:	2300      	movs	r3, #0
  402900:	607b      	str	r3, [r7, #4]
  402902:	e003      	b.n	40290c <udd_reset_ep_ctrl+0x84>
  402904:	bf00      	nop
  402906:	687b      	ldr	r3, [r7, #4]
  402908:	3301      	adds	r3, #1
  40290a:	607b      	str	r3, [r7, #4]
  40290c:	687b      	ldr	r3, [r7, #4]
  40290e:	2b13      	cmp	r3, #19
  402910:	d9f8      	bls.n	402904 <udd_reset_ep_ctrl+0x7c>

	flags = cpu_irq_save();
  402912:	4b07      	ldr	r3, [pc, #28]	; (402930 <udd_reset_ep_ctrl+0xa8>)
  402914:	4798      	blx	r3
  402916:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(0);
  402918:	4b04      	ldr	r3, [pc, #16]	; (40292c <udd_reset_ep_ctrl+0xa4>)
  40291a:	2201      	movs	r2, #1
  40291c:	611a      	str	r2, [r3, #16]
	cpu_irq_restore(flags);
  40291e:	6978      	ldr	r0, [r7, #20]
  402920:	4b04      	ldr	r3, [pc, #16]	; (402934 <udd_reset_ep_ctrl+0xac>)
  402922:	4798      	blx	r3
}
  402924:	3718      	adds	r7, #24
  402926:	46bd      	mov	sp, r7
  402928:	bd80      	pop	{r7, pc}
  40292a:	bf00      	nop
  40292c:	40034000 	.word	0x40034000
  402930:	00401c2d 	.word	0x00401c2d
  402934:	00401c85 	.word	0x00401c85

00402938 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
  402938:	b480      	push	{r7}
  40293a:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.callback = NULL;
  40293c:	4b07      	ldr	r3, [pc, #28]	; (40295c <udd_ctrl_init+0x24>)
  40293e:	2200      	movs	r2, #0
  402940:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  402942:	4b06      	ldr	r3, [pc, #24]	; (40295c <udd_ctrl_init+0x24>)
  402944:	2200      	movs	r2, #0
  402946:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
  402948:	4b04      	ldr	r3, [pc, #16]	; (40295c <udd_ctrl_init+0x24>)
  40294a:	2200      	movs	r2, #0
  40294c:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  40294e:	4b04      	ldr	r3, [pc, #16]	; (402960 <udd_ctrl_init+0x28>)
  402950:	2200      	movs	r2, #0
  402952:	701a      	strb	r2, [r3, #0]
}
  402954:	46bd      	mov	sp, r7
  402956:	f85d 7b04 	ldr.w	r7, [sp], #4
  40295a:	4770      	bx	lr
  40295c:	20014f88 	.word	0x20014f88
  402960:	20000c67 	.word	0x20000c67

00402964 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
  402964:	b580      	push	{r7, lr}
  402966:	b08c      	sub	sp, #48	; 0x30
  402968:	af00      	add	r7, sp, #0
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  40296a:	4b6d      	ldr	r3, [pc, #436]	; (402b20 <udd_ctrl_setup_received+0x1bc>)
  40296c:	781b      	ldrb	r3, [r3, #0]
  40296e:	2b00      	cmp	r3, #0
  402970:	d003      	beq.n	40297a <udd_ctrl_setup_received+0x16>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  402972:	4b6c      	ldr	r3, [pc, #432]	; (402b24 <udd_ctrl_setup_received+0x1c0>)
  402974:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  402976:	4b6c      	ldr	r3, [pc, #432]	; (402b28 <udd_ctrl_setup_received+0x1c4>)
  402978:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  40297a:	4b6c      	ldr	r3, [pc, #432]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  40297c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40297e:	4b6c      	ldr	r3, [pc, #432]	; (402b30 <udd_ctrl_setup_received+0x1cc>)
  402980:	4013      	ands	r3, r2
  402982:	0c1b      	lsrs	r3, r3, #16
  402984:	2b08      	cmp	r3, #8
  402986:	d01a      	beq.n	4029be <udd_ctrl_setup_received+0x5a>
		udd_ack_setup_received(0);
  402988:	4b68      	ldr	r3, [pc, #416]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  40298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40298c:	62bb      	str	r3, [r7, #40]	; 0x28
  40298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402990:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402994:	62bb      	str	r3, [r7, #40]	; 0x28
  402996:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402998:	f023 0304 	bic.w	r3, r3, #4
  40299c:	62bb      	str	r3, [r7, #40]	; 0x28
  40299e:	4b63      	ldr	r3, [pc, #396]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  4029a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4029a2:	631a      	str	r2, [r3, #48]	; 0x30
  4029a4:	2300      	movs	r3, #0
  4029a6:	627b      	str	r3, [r7, #36]	; 0x24
  4029a8:	e003      	b.n	4029b2 <udd_ctrl_setup_received+0x4e>
  4029aa:	bf00      	nop
  4029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4029ae:	3301      	adds	r3, #1
  4029b0:	627b      	str	r3, [r7, #36]	; 0x24
  4029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4029b4:	2b13      	cmp	r3, #19
  4029b6:	d9f8      	bls.n	4029aa <udd_ctrl_setup_received+0x46>
		udd_ctrl_stall_data();
  4029b8:	4b5e      	ldr	r3, [pc, #376]	; (402b34 <udd_ctrl_setup_received+0x1d0>)
  4029ba:	4798      	blx	r3
		return; // Error data number doesn't correspond to SETUP packet
  4029bc:	e0ad      	b.n	402b1a <udd_ctrl_setup_received+0x1b6>
	}
	for (i = 0; i < 8; i++) {
  4029be:	2300      	movs	r3, #0
  4029c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  4029c4:	e00c      	b.n	4029e0 <udd_ctrl_setup_received+0x7c>
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4029c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  4029ca:	4b5b      	ldr	r3, [pc, #364]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029cc:	4413      	add	r3, r2
			udd_endpoint_fifo_read(0);
  4029ce:	4a57      	ldr	r2, [pc, #348]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  4029d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4029d2:	b2d2      	uxtb	r2, r2
  4029d4:	701a      	strb	r2, [r3, #0]
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  4029d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4029da:	3301      	adds	r3, #1
  4029dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  4029e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4029e4:	2b07      	cmp	r3, #7
  4029e6:	d9ee      	bls.n	4029c6 <udd_ctrl_setup_received+0x62>
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
  4029e8:	4b53      	ldr	r3, [pc, #332]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029ea:	885a      	ldrh	r2, [r3, #2]
  4029ec:	4b52      	ldr	r3, [pc, #328]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029ee:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
  4029f0:	4b51      	ldr	r3, [pc, #324]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029f2:	889a      	ldrh	r2, [r3, #4]
  4029f4:	4b50      	ldr	r3, [pc, #320]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029f6:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
  4029f8:	4b4f      	ldr	r3, [pc, #316]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029fa:	88da      	ldrh	r2, [r3, #6]
  4029fc:	4b4e      	ldr	r3, [pc, #312]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  4029fe:	80da      	strh	r2, [r3, #6]

	// Decode setup request
	if (udc_process_setup() == false) {
  402a00:	4b4e      	ldr	r3, [pc, #312]	; (402b3c <udd_ctrl_setup_received+0x1d8>)
  402a02:	4798      	blx	r3
  402a04:	4603      	mov	r3, r0
  402a06:	f083 0301 	eor.w	r3, r3, #1
  402a0a:	b2db      	uxtb	r3, r3
  402a0c:	2b00      	cmp	r3, #0
  402a0e:	d01a      	beq.n	402a46 <udd_ctrl_setup_received+0xe2>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  402a10:	4b46      	ldr	r3, [pc, #280]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a14:	623b      	str	r3, [r7, #32]
  402a16:	6a3b      	ldr	r3, [r7, #32]
  402a18:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402a1c:	623b      	str	r3, [r7, #32]
  402a1e:	6a3b      	ldr	r3, [r7, #32]
  402a20:	f023 0304 	bic.w	r3, r3, #4
  402a24:	623b      	str	r3, [r7, #32]
  402a26:	4b41      	ldr	r3, [pc, #260]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402a28:	6a3a      	ldr	r2, [r7, #32]
  402a2a:	631a      	str	r2, [r3, #48]	; 0x30
  402a2c:	2300      	movs	r3, #0
  402a2e:	61fb      	str	r3, [r7, #28]
  402a30:	e003      	b.n	402a3a <udd_ctrl_setup_received+0xd6>
  402a32:	bf00      	nop
  402a34:	69fb      	ldr	r3, [r7, #28]
  402a36:	3301      	adds	r3, #1
  402a38:	61fb      	str	r3, [r7, #28]
  402a3a:	69fb      	ldr	r3, [r7, #28]
  402a3c:	2b13      	cmp	r3, #19
  402a3e:	d9f8      	bls.n	402a32 <udd_ctrl_setup_received+0xce>
		udd_ctrl_stall_data();
  402a40:	4b3c      	ldr	r3, [pc, #240]	; (402b34 <udd_ctrl_setup_received+0x1d0>)
  402a42:	4798      	blx	r3
		return;
  402a44:	e069      	b.n	402b1a <udd_ctrl_setup_received+0x1b6>
	}

	if (Udd_setup_is_in()) {
  402a46:	4b3c      	ldr	r3, [pc, #240]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  402a48:	781b      	ldrb	r3, [r3, #0]
  402a4a:	b2db      	uxtb	r3, r3
  402a4c:	b25b      	sxtb	r3, r3
  402a4e:	2b00      	cmp	r3, #0
  402a50:	da3b      	bge.n	402aca <udd_ctrl_setup_received+0x166>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  402a52:	4b36      	ldr	r3, [pc, #216]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a56:	61bb      	str	r3, [r7, #24]
  402a58:	69bb      	ldr	r3, [r7, #24]
  402a5a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402a5e:	61bb      	str	r3, [r7, #24]
  402a60:	69bb      	ldr	r3, [r7, #24]
  402a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402a66:	61bb      	str	r3, [r7, #24]
  402a68:	4b30      	ldr	r3, [pc, #192]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402a6a:	69ba      	ldr	r2, [r7, #24]
  402a6c:	631a      	str	r2, [r3, #48]	; 0x30
  402a6e:	2300      	movs	r3, #0
  402a70:	617b      	str	r3, [r7, #20]
  402a72:	e003      	b.n	402a7c <udd_ctrl_setup_received+0x118>
  402a74:	bf00      	nop
  402a76:	697b      	ldr	r3, [r7, #20]
  402a78:	3301      	adds	r3, #1
  402a7a:	617b      	str	r3, [r7, #20]
  402a7c:	697b      	ldr	r3, [r7, #20]
  402a7e:	2b13      	cmp	r3, #19
  402a80:	d9f8      	bls.n	402a74 <udd_ctrl_setup_received+0x110>
		udd_ack_setup_received(0);
  402a82:	4b2a      	ldr	r3, [pc, #168]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a86:	613b      	str	r3, [r7, #16]
  402a88:	693b      	ldr	r3, [r7, #16]
  402a8a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402a8e:	613b      	str	r3, [r7, #16]
  402a90:	693b      	ldr	r3, [r7, #16]
  402a92:	f023 0304 	bic.w	r3, r3, #4
  402a96:	613b      	str	r3, [r7, #16]
  402a98:	4b24      	ldr	r3, [pc, #144]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402a9a:	693a      	ldr	r2, [r7, #16]
  402a9c:	631a      	str	r2, [r3, #48]	; 0x30
  402a9e:	2300      	movs	r3, #0
  402aa0:	60fb      	str	r3, [r7, #12]
  402aa2:	e003      	b.n	402aac <udd_ctrl_setup_received+0x148>
  402aa4:	bf00      	nop
  402aa6:	68fb      	ldr	r3, [r7, #12]
  402aa8:	3301      	adds	r3, #1
  402aaa:	60fb      	str	r3, [r7, #12]
  402aac:	68fb      	ldr	r3, [r7, #12]
  402aae:	2b13      	cmp	r3, #19
  402ab0:	d9f8      	bls.n	402aa4 <udd_ctrl_setup_received+0x140>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  402ab2:	4b23      	ldr	r3, [pc, #140]	; (402b40 <udd_ctrl_setup_received+0x1dc>)
  402ab4:	2200      	movs	r2, #0
  402ab6:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  402ab8:	4b22      	ldr	r3, [pc, #136]	; (402b44 <udd_ctrl_setup_received+0x1e0>)
  402aba:	2200      	movs	r2, #0
  402abc:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  402abe:	4b18      	ldr	r3, [pc, #96]	; (402b20 <udd_ctrl_setup_received+0x1bc>)
  402ac0:	2202      	movs	r2, #2
  402ac2:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  402ac4:	4b20      	ldr	r3, [pc, #128]	; (402b48 <udd_ctrl_setup_received+0x1e4>)
  402ac6:	4798      	blx	r3
  402ac8:	e027      	b.n	402b1a <udd_ctrl_setup_received+0x1b6>
	} else {
		udd_ack_setup_received(0);
  402aca:	4b18      	ldr	r3, [pc, #96]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ace:	60bb      	str	r3, [r7, #8]
  402ad0:	68bb      	ldr	r3, [r7, #8]
  402ad2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402ad6:	60bb      	str	r3, [r7, #8]
  402ad8:	68bb      	ldr	r3, [r7, #8]
  402ada:	f023 0304 	bic.w	r3, r3, #4
  402ade:	60bb      	str	r3, [r7, #8]
  402ae0:	4b12      	ldr	r3, [pc, #72]	; (402b2c <udd_ctrl_setup_received+0x1c8>)
  402ae2:	68ba      	ldr	r2, [r7, #8]
  402ae4:	631a      	str	r2, [r3, #48]	; 0x30
  402ae6:	2300      	movs	r3, #0
  402ae8:	607b      	str	r3, [r7, #4]
  402aea:	e003      	b.n	402af4 <udd_ctrl_setup_received+0x190>
  402aec:	bf00      	nop
  402aee:	687b      	ldr	r3, [r7, #4]
  402af0:	3301      	adds	r3, #1
  402af2:	607b      	str	r3, [r7, #4]
  402af4:	687b      	ldr	r3, [r7, #4]
  402af6:	2b13      	cmp	r3, #19
  402af8:	d9f8      	bls.n	402aec <udd_ctrl_setup_received+0x188>
		if (0 == udd_g_ctrlreq.req.wLength) {
  402afa:	4b0f      	ldr	r3, [pc, #60]	; (402b38 <udd_ctrl_setup_received+0x1d4>)
  402afc:	88db      	ldrh	r3, [r3, #6]
  402afe:	2b00      	cmp	r3, #0
  402b00:	d102      	bne.n	402b08 <udd_ctrl_setup_received+0x1a4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  402b02:	4b12      	ldr	r3, [pc, #72]	; (402b4c <udd_ctrl_setup_received+0x1e8>)
  402b04:	4798      	blx	r3
			return;
  402b06:	e008      	b.n	402b1a <udd_ctrl_setup_received+0x1b6>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  402b08:	4b0d      	ldr	r3, [pc, #52]	; (402b40 <udd_ctrl_setup_received+0x1dc>)
  402b0a:	2200      	movs	r2, #0
  402b0c:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  402b0e:	4b0d      	ldr	r3, [pc, #52]	; (402b44 <udd_ctrl_setup_received+0x1e0>)
  402b10:	2200      	movs	r2, #0
  402b12:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  402b14:	4b02      	ldr	r3, [pc, #8]	; (402b20 <udd_ctrl_setup_received+0x1bc>)
  402b16:	2201      	movs	r2, #1
  402b18:	701a      	strb	r2, [r3, #0]
	}
}
  402b1a:	3730      	adds	r7, #48	; 0x30
  402b1c:	46bd      	mov	sp, r7
  402b1e:	bd80      	pop	{r7, pc}
  402b20:	20000c67 	.word	0x20000c67
  402b24:	004030a9 	.word	0x004030a9
  402b28:	00402939 	.word	0x00402939
  402b2c:	40034000 	.word	0x40034000
  402b30:	07ff0000 	.word	0x07ff0000
  402b34:	00402ff1 	.word	0x00402ff1
  402b38:	20014f88 	.word	0x20014f88
  402b3c:	00401b15 	.word	0x00401b15
  402b40:	20000c68 	.word	0x20000c68
  402b44:	20000c6a 	.word	0x20000c6a
  402b48:	00402b51 	.word	0x00402b51
  402b4c:	00403041 	.word	0x00403041

00402b50 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
  402b50:	b580      	push	{r7, lr}
  402b52:	b08e      	sub	sp, #56	; 0x38
  402b54:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  402b56:	4b7b      	ldr	r3, [pc, #492]	; (402d44 <udd_ctrl_in_sent+0x1f4>)
  402b58:	781b      	ldrb	r3, [r3, #0]
  402b5a:	2b03      	cmp	r3, #3
  402b5c:	d11c      	bne.n	402b98 <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  402b5e:	4b7a      	ldr	r3, [pc, #488]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b62:	62bb      	str	r3, [r7, #40]	; 0x28
  402b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402b66:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  402b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402b6e:	f023 0301 	bic.w	r3, r3, #1
  402b72:	62bb      	str	r3, [r7, #40]	; 0x28
  402b74:	4b74      	ldr	r3, [pc, #464]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402b78:	631a      	str	r2, [r3, #48]	; 0x30
  402b7a:	2300      	movs	r3, #0
  402b7c:	627b      	str	r3, [r7, #36]	; 0x24
  402b7e:	e003      	b.n	402b88 <udd_ctrl_in_sent+0x38>
  402b80:	bf00      	nop
  402b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b84:	3301      	adds	r3, #1
  402b86:	627b      	str	r3, [r7, #36]	; 0x24
  402b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b8a:	2b13      	cmp	r3, #19
  402b8c:	d9f8      	bls.n	402b80 <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  402b8e:	4b6f      	ldr	r3, [pc, #444]	; (402d4c <udd_ctrl_in_sent+0x1fc>)
  402b90:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  402b92:	4b6f      	ldr	r3, [pc, #444]	; (402d50 <udd_ctrl_in_sent+0x200>)
  402b94:	4798      	blx	r3
		return;
  402b96:	e0d1      	b.n	402d3c <udd_ctrl_in_sent+0x1ec>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  402b98:	4b6e      	ldr	r3, [pc, #440]	; (402d54 <udd_ctrl_in_sent+0x204>)
  402b9a:	899a      	ldrh	r2, [r3, #12]
  402b9c:	4b6e      	ldr	r3, [pc, #440]	; (402d58 <udd_ctrl_in_sent+0x208>)
  402b9e:	881b      	ldrh	r3, [r3, #0]
  402ba0:	1ad3      	subs	r3, r2, r3
  402ba2:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (0 == nb_remain) {
  402ba4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402ba6:	2b00      	cmp	r3, #0
  402ba8:	d13f      	bne.n	402c2a <udd_ctrl_in_sent+0xda>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  402baa:	4b6c      	ldr	r3, [pc, #432]	; (402d5c <udd_ctrl_in_sent+0x20c>)
  402bac:	881a      	ldrh	r2, [r3, #0]
  402bae:	4b6a      	ldr	r3, [pc, #424]	; (402d58 <udd_ctrl_in_sent+0x208>)
  402bb0:	881b      	ldrh	r3, [r3, #0]
  402bb2:	4413      	add	r3, r2
  402bb4:	b29a      	uxth	r2, r3
  402bb6:	4b69      	ldr	r3, [pc, #420]	; (402d5c <udd_ctrl_in_sent+0x20c>)
  402bb8:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  402bba:	4b66      	ldr	r3, [pc, #408]	; (402d54 <udd_ctrl_in_sent+0x204>)
  402bbc:	88da      	ldrh	r2, [r3, #6]
  402bbe:	4b67      	ldr	r3, [pc, #412]	; (402d5c <udd_ctrl_in_sent+0x20c>)
  402bc0:	881b      	ldrh	r3, [r3, #0]
  402bc2:	429a      	cmp	r2, r3
  402bc4:	d003      	beq.n	402bce <udd_ctrl_in_sent+0x7e>
				|| b_shortpacket) {
  402bc6:	4b66      	ldr	r3, [pc, #408]	; (402d60 <udd_ctrl_in_sent+0x210>)
  402bc8:	781b      	ldrb	r3, [r3, #0]
  402bca:	2b00      	cmp	r3, #0
  402bcc:	d01a      	beq.n	402c04 <udd_ctrl_in_sent+0xb4>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
  402bce:	4b65      	ldr	r3, [pc, #404]	; (402d64 <udd_ctrl_in_sent+0x214>)
  402bd0:	4798      	blx	r3
			udd_ack_in_sent(0);
  402bd2:	4b5d      	ldr	r3, [pc, #372]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402bd6:	623b      	str	r3, [r7, #32]
  402bd8:	6a3b      	ldr	r3, [r7, #32]
  402bda:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402bde:	623b      	str	r3, [r7, #32]
  402be0:	6a3b      	ldr	r3, [r7, #32]
  402be2:	f023 0301 	bic.w	r3, r3, #1
  402be6:	623b      	str	r3, [r7, #32]
  402be8:	4b57      	ldr	r3, [pc, #348]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402bea:	6a3a      	ldr	r2, [r7, #32]
  402bec:	631a      	str	r2, [r3, #48]	; 0x30
  402bee:	2300      	movs	r3, #0
  402bf0:	61fb      	str	r3, [r7, #28]
  402bf2:	e003      	b.n	402bfc <udd_ctrl_in_sent+0xac>
  402bf4:	bf00      	nop
  402bf6:	69fb      	ldr	r3, [r7, #28]
  402bf8:	3301      	adds	r3, #1
  402bfa:	61fb      	str	r3, [r7, #28]
  402bfc:	69fb      	ldr	r3, [r7, #28]
  402bfe:	2b13      	cmp	r3, #19
  402c00:	d9f8      	bls.n	402bf4 <udd_ctrl_in_sent+0xa4>
			return;
  402c02:	e09b      	b.n	402d3c <udd_ctrl_in_sent+0x1ec>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  402c04:	4b53      	ldr	r3, [pc, #332]	; (402d54 <udd_ctrl_in_sent+0x204>)
  402c06:	695b      	ldr	r3, [r3, #20]
  402c08:	2b00      	cmp	r3, #0
  402c0a:	d00e      	beq.n	402c2a <udd_ctrl_in_sent+0xda>
				|| (!udd_g_ctrlreq.over_under_run())) {
  402c0c:	4b51      	ldr	r3, [pc, #324]	; (402d54 <udd_ctrl_in_sent+0x204>)
  402c0e:	695b      	ldr	r3, [r3, #20]
  402c10:	4798      	blx	r3
  402c12:	4603      	mov	r3, r0
  402c14:	f083 0301 	eor.w	r3, r3, #1
  402c18:	b2db      	uxtb	r3, r3
  402c1a:	2b00      	cmp	r3, #0
  402c1c:	d105      	bne.n	402c2a <udd_ctrl_in_sent+0xda>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  402c1e:	4b4e      	ldr	r3, [pc, #312]	; (402d58 <udd_ctrl_in_sent+0x208>)
  402c20:	2200      	movs	r2, #0
  402c22:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  402c24:	4b4b      	ldr	r3, [pc, #300]	; (402d54 <udd_ctrl_in_sent+0x204>)
  402c26:	899b      	ldrh	r3, [r3, #12]
  402c28:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  402c2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402c2c:	2b3f      	cmp	r3, #63	; 0x3f
  402c2e:	d905      	bls.n	402c3c <udd_ctrl_in_sent+0xec>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  402c30:	2340      	movs	r3, #64	; 0x40
  402c32:	86fb      	strh	r3, [r7, #54]	; 0x36
		b_shortpacket = false;
  402c34:	4b4a      	ldr	r3, [pc, #296]	; (402d60 <udd_ctrl_in_sent+0x210>)
  402c36:	2200      	movs	r2, #0
  402c38:	701a      	strb	r2, [r3, #0]
  402c3a:	e002      	b.n	402c42 <udd_ctrl_in_sent+0xf2>
	} else {
		b_shortpacket = true;
  402c3c:	4b48      	ldr	r3, [pc, #288]	; (402d60 <udd_ctrl_in_sent+0x210>)
  402c3e:	2201      	movs	r2, #1
  402c40:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  402c42:	4b44      	ldr	r3, [pc, #272]	; (402d54 <udd_ctrl_in_sent+0x204>)
  402c44:	689a      	ldr	r2, [r3, #8]
  402c46:	4b44      	ldr	r3, [pc, #272]	; (402d58 <udd_ctrl_in_sent+0x208>)
  402c48:	881b      	ldrh	r3, [r3, #0]
  402c4a:	4413      	add	r3, r2
  402c4c:	633b      	str	r3, [r7, #48]	; 0x30
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
  402c4e:	4b46      	ldr	r3, [pc, #280]	; (402d68 <udd_ctrl_in_sent+0x218>)
  402c50:	4798      	blx	r3
  402c52:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (Is_udd_bank0_received(0)) {
  402c54:	4b3c      	ldr	r3, [pc, #240]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c58:	f003 0302 	and.w	r3, r3, #2
  402c5c:	2b00      	cmp	r3, #0
  402c5e:	d01e      	beq.n	402c9e <udd_ctrl_in_sent+0x14e>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
  402c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402c62:	4b42      	ldr	r3, [pc, #264]	; (402d6c <udd_ctrl_in_sent+0x21c>)
  402c64:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  402c66:	4b37      	ldr	r3, [pc, #220]	; (402d44 <udd_ctrl_in_sent+0x1f4>)
  402c68:	2204      	movs	r2, #4
  402c6a:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  402c6c:	4b36      	ldr	r3, [pc, #216]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c70:	61bb      	str	r3, [r7, #24]
  402c72:	69bb      	ldr	r3, [r7, #24]
  402c74:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c78:	61bb      	str	r3, [r7, #24]
  402c7a:	69bb      	ldr	r3, [r7, #24]
  402c7c:	f023 0301 	bic.w	r3, r3, #1
  402c80:	61bb      	str	r3, [r7, #24]
  402c82:	4b31      	ldr	r3, [pc, #196]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402c84:	69ba      	ldr	r2, [r7, #24]
  402c86:	631a      	str	r2, [r3, #48]	; 0x30
  402c88:	2300      	movs	r3, #0
  402c8a:	617b      	str	r3, [r7, #20]
  402c8c:	e003      	b.n	402c96 <udd_ctrl_in_sent+0x146>
  402c8e:	bf00      	nop
  402c90:	697b      	ldr	r3, [r7, #20]
  402c92:	3301      	adds	r3, #1
  402c94:	617b      	str	r3, [r7, #20]
  402c96:	697b      	ldr	r3, [r7, #20]
  402c98:	2b13      	cmp	r3, #19
  402c9a:	d9f8      	bls.n	402c8e <udd_ctrl_in_sent+0x13e>
		return; // Exit of IN DATA phase
  402c9c:	e04e      	b.n	402d3c <udd_ctrl_in_sent+0x1ec>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  402c9e:	2300      	movs	r3, #0
  402ca0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  402ca4:	e00a      	b.n	402cbc <udd_ctrl_in_sent+0x16c>
		udd_endpoint_fifo_write(0, *ptr_src++);
  402ca6:	4a28      	ldr	r2, [pc, #160]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402caa:	1c59      	adds	r1, r3, #1
  402cac:	6339      	str	r1, [r7, #48]	; 0x30
  402cae:	781b      	ldrb	r3, [r3, #0]
  402cb0:	6513      	str	r3, [r2, #80]	; 0x50
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  402cb2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  402cb6:	3301      	adds	r3, #1
  402cb8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  402cbc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  402cc0:	b29b      	uxth	r3, r3
  402cc2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
  402cc4:	429a      	cmp	r2, r3
  402cc6:	d8ee      	bhi.n	402ca6 <udd_ctrl_in_sent+0x156>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  402cc8:	4b23      	ldr	r3, [pc, #140]	; (402d58 <udd_ctrl_in_sent+0x208>)
  402cca:	881a      	ldrh	r2, [r3, #0]
  402ccc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402cce:	4413      	add	r3, r2
  402cd0:	b29a      	uxth	r2, r3
  402cd2:	4b21      	ldr	r3, [pc, #132]	; (402d58 <udd_ctrl_in_sent+0x208>)
  402cd4:	801a      	strh	r2, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  402cd6:	4b1c      	ldr	r3, [pc, #112]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402cda:	613b      	str	r3, [r7, #16]
  402cdc:	693b      	ldr	r3, [r7, #16]
  402cde:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402ce2:	613b      	str	r3, [r7, #16]
  402ce4:	693b      	ldr	r3, [r7, #16]
  402ce6:	f043 0310 	orr.w	r3, r3, #16
  402cea:	613b      	str	r3, [r7, #16]
  402cec:	4b16      	ldr	r3, [pc, #88]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402cee:	693a      	ldr	r2, [r7, #16]
  402cf0:	631a      	str	r2, [r3, #48]	; 0x30
  402cf2:	2300      	movs	r3, #0
  402cf4:	60fb      	str	r3, [r7, #12]
  402cf6:	e003      	b.n	402d00 <udd_ctrl_in_sent+0x1b0>
  402cf8:	bf00      	nop
  402cfa:	68fb      	ldr	r3, [r7, #12]
  402cfc:	3301      	adds	r3, #1
  402cfe:	60fb      	str	r3, [r7, #12]
  402d00:	68fb      	ldr	r3, [r7, #12]
  402d02:	2b13      	cmp	r3, #19
  402d04:	d9f8      	bls.n	402cf8 <udd_ctrl_in_sent+0x1a8>
	udd_ack_in_sent(0);
  402d06:	4b10      	ldr	r3, [pc, #64]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d0a:	60bb      	str	r3, [r7, #8]
  402d0c:	68bb      	ldr	r3, [r7, #8]
  402d0e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402d12:	60bb      	str	r3, [r7, #8]
  402d14:	68bb      	ldr	r3, [r7, #8]
  402d16:	f023 0301 	bic.w	r3, r3, #1
  402d1a:	60bb      	str	r3, [r7, #8]
  402d1c:	4b0a      	ldr	r3, [pc, #40]	; (402d48 <udd_ctrl_in_sent+0x1f8>)
  402d1e:	68ba      	ldr	r2, [r7, #8]
  402d20:	631a      	str	r2, [r3, #48]	; 0x30
  402d22:	2300      	movs	r3, #0
  402d24:	607b      	str	r3, [r7, #4]
  402d26:	e003      	b.n	402d30 <udd_ctrl_in_sent+0x1e0>
  402d28:	bf00      	nop
  402d2a:	687b      	ldr	r3, [r7, #4]
  402d2c:	3301      	adds	r3, #1
  402d2e:	607b      	str	r3, [r7, #4]
  402d30:	687b      	ldr	r3, [r7, #4]
  402d32:	2b13      	cmp	r3, #19
  402d34:	d9f8      	bls.n	402d28 <udd_ctrl_in_sent+0x1d8>

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
  402d36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402d38:	4b0c      	ldr	r3, [pc, #48]	; (402d6c <udd_ctrl_in_sent+0x21c>)
  402d3a:	4798      	blx	r3
}
  402d3c:	3738      	adds	r7, #56	; 0x38
  402d3e:	46bd      	mov	sp, r7
  402d40:	bd80      	pop	{r7, pc}
  402d42:	bf00      	nop
  402d44:	20000c67 	.word	0x20000c67
  402d48:	40034000 	.word	0x40034000
  402d4c:	004030a9 	.word	0x004030a9
  402d50:	00402939 	.word	0x00402939
  402d54:	20014f88 	.word	0x20014f88
  402d58:	20000c6a 	.word	0x20000c6a
  402d5c:	20000c68 	.word	0x20000c68
  402d60:	20000ca8 	.word	0x20000ca8
  402d64:	00403091 	.word	0x00403091
  402d68:	00401c2d 	.word	0x00401c2d
  402d6c:	00401c85 	.word	0x00401c85

00402d70 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
  402d70:	b580      	push	{r7, lr}
  402d72:	b08e      	sub	sp, #56	; 0x38
  402d74:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  402d76:	4b8f      	ldr	r3, [pc, #572]	; (402fb4 <udd_ctrl_out_received+0x244>)
  402d78:	781b      	ldrb	r3, [r3, #0]
  402d7a:	2b01      	cmp	r3, #1
  402d7c:	d027      	beq.n	402dce <udd_ctrl_out_received+0x5e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  402d7e:	4b8d      	ldr	r3, [pc, #564]	; (402fb4 <udd_ctrl_out_received+0x244>)
  402d80:	781b      	ldrb	r3, [r3, #0]
  402d82:	2b02      	cmp	r3, #2
  402d84:	d003      	beq.n	402d8e <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  402d86:	4b8b      	ldr	r3, [pc, #556]	; (402fb4 <udd_ctrl_out_received+0x244>)
  402d88:	781b      	ldrb	r3, [r3, #0]
  402d8a:	2b04      	cmp	r3, #4
  402d8c:	d102      	bne.n	402d94 <udd_ctrl_out_received+0x24>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  402d8e:	4b8a      	ldr	r3, [pc, #552]	; (402fb8 <udd_ctrl_out_received+0x248>)
  402d90:	4798      	blx	r3
  402d92:	e001      	b.n	402d98 <udd_ctrl_out_received+0x28>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  402d94:	4b89      	ldr	r3, [pc, #548]	; (402fbc <udd_ctrl_out_received+0x24c>)
  402d96:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  402d98:	4b89      	ldr	r3, [pc, #548]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  402d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402da0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  402da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402da8:	f023 0302 	bic.w	r3, r3, #2
  402dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  402dae:	4b84      	ldr	r3, [pc, #528]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  402db2:	631a      	str	r2, [r3, #48]	; 0x30
  402db4:	2300      	movs	r3, #0
  402db6:	62bb      	str	r3, [r7, #40]	; 0x28
  402db8:	e003      	b.n	402dc2 <udd_ctrl_out_received+0x52>
  402dba:	bf00      	nop
  402dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402dbe:	3301      	adds	r3, #1
  402dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  402dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402dc4:	2b13      	cmp	r3, #19
  402dc6:	d9f8      	bls.n	402dba <udd_ctrl_out_received+0x4a>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  402dc8:	4b7e      	ldr	r3, [pc, #504]	; (402fc4 <udd_ctrl_out_received+0x254>)
  402dca:	4798      	blx	r3
		return;
  402dcc:	e10d      	b.n	402fea <udd_ctrl_out_received+0x27a>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  402dce:	4b7c      	ldr	r3, [pc, #496]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402dd2:	4b7d      	ldr	r3, [pc, #500]	; (402fc8 <udd_ctrl_out_received+0x258>)
  402dd4:	4013      	ands	r3, r2
  402dd6:	0c1b      	lsrs	r3, r3, #16
  402dd8:	86bb      	strh	r3, [r7, #52]	; 0x34
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  402dda:	4b7c      	ldr	r3, [pc, #496]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402ddc:	899b      	ldrh	r3, [r3, #12]
  402dde:	461a      	mov	r2, r3
  402de0:	4b7b      	ldr	r3, [pc, #492]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402de2:	881b      	ldrh	r3, [r3, #0]
  402de4:	4619      	mov	r1, r3
  402de6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  402de8:	440b      	add	r3, r1
  402dea:	429a      	cmp	r2, r3
  402dec:	da05      	bge.n	402dfa <udd_ctrl_out_received+0x8a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  402dee:	4b77      	ldr	r3, [pc, #476]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402df0:	899a      	ldrh	r2, [r3, #12]
  402df2:	4b77      	ldr	r3, [pc, #476]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402df4:	881b      	ldrh	r3, [r3, #0]
  402df6:	1ad3      	subs	r3, r2, r3
  402df8:	86bb      	strh	r3, [r7, #52]	; 0x34
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  402dfa:	4b74      	ldr	r3, [pc, #464]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402dfc:	689a      	ldr	r2, [r3, #8]
  402dfe:	4b74      	ldr	r3, [pc, #464]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402e00:	881b      	ldrh	r3, [r3, #0]
  402e02:	4413      	add	r3, r2
  402e04:	633b      	str	r3, [r7, #48]	; 0x30
	for (i = 0; i < nb_data; i++) {
  402e06:	2300      	movs	r3, #0
  402e08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  402e0c:	e00b      	b.n	402e26 <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  402e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402e10:	1c5a      	adds	r2, r3, #1
  402e12:	633a      	str	r2, [r7, #48]	; 0x30
  402e14:	4a6a      	ldr	r2, [pc, #424]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402e16:	6d12      	ldr	r2, [r2, #80]	; 0x50
  402e18:	b2d2      	uxtb	r2, r2
  402e1a:	701a      	strb	r2, [r3, #0]
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  402e1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  402e20:	3301      	adds	r3, #1
  402e22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  402e26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  402e2a:	b29b      	uxth	r3, r3
  402e2c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
  402e2e:	429a      	cmp	r2, r3
  402e30:	d8ed      	bhi.n	402e0e <udd_ctrl_out_received+0x9e>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  402e32:	4b67      	ldr	r3, [pc, #412]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402e34:	881a      	ldrh	r2, [r3, #0]
  402e36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  402e38:	4413      	add	r3, r2
  402e3a:	b29a      	uxth	r2, r3
  402e3c:	4b64      	ldr	r3, [pc, #400]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402e3e:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  402e40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  402e42:	2b40      	cmp	r3, #64	; 0x40
  402e44:	d10a      	bne.n	402e5c <udd_ctrl_out_received+0xec>
			|| (udd_g_ctrlreq.req.wLength <=
  402e46:	4b61      	ldr	r3, [pc, #388]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402e48:	88db      	ldrh	r3, [r3, #6]
  402e4a:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_nb_trans +
  402e4c:	4b61      	ldr	r3, [pc, #388]	; (402fd4 <udd_ctrl_out_received+0x264>)
  402e4e:	881b      	ldrh	r3, [r3, #0]
  402e50:	4619      	mov	r1, r3
  402e52:	4b5f      	ldr	r3, [pc, #380]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402e54:	881b      	ldrh	r3, [r3, #0]
  402e56:	440b      	add	r3, r1
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  402e58:	429a      	cmp	r2, r3
  402e5a:	dc46      	bgt.n	402eea <udd_ctrl_out_received+0x17a>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  402e5c:	4b5c      	ldr	r3, [pc, #368]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402e5e:	881a      	ldrh	r2, [r3, #0]
  402e60:	4b5a      	ldr	r3, [pc, #360]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402e62:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  402e64:	4b59      	ldr	r3, [pc, #356]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402e66:	695b      	ldr	r3, [r3, #20]
  402e68:	2b00      	cmp	r3, #0
  402e6a:	d023      	beq.n	402eb4 <udd_ctrl_out_received+0x144>
			if (!udd_g_ctrlreq.over_under_run()) {
  402e6c:	4b57      	ldr	r3, [pc, #348]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402e6e:	695b      	ldr	r3, [r3, #20]
  402e70:	4798      	blx	r3
  402e72:	4603      	mov	r3, r0
  402e74:	f083 0301 	eor.w	r3, r3, #1
  402e78:	b2db      	uxtb	r3, r3
  402e7a:	2b00      	cmp	r3, #0
  402e7c:	d01a      	beq.n	402eb4 <udd_ctrl_out_received+0x144>
				// Stall ZLP
				udd_ctrl_stall_data();
  402e7e:	4b4f      	ldr	r3, [pc, #316]	; (402fbc <udd_ctrl_out_received+0x24c>)
  402e80:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  402e82:	4b4f      	ldr	r3, [pc, #316]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e86:	627b      	str	r3, [r7, #36]	; 0x24
  402e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402e8a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402e8e:	627b      	str	r3, [r7, #36]	; 0x24
  402e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402e92:	f023 0302 	bic.w	r3, r3, #2
  402e96:	627b      	str	r3, [r7, #36]	; 0x24
  402e98:	4b49      	ldr	r3, [pc, #292]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  402e9c:	631a      	str	r2, [r3, #48]	; 0x30
  402e9e:	2300      	movs	r3, #0
  402ea0:	623b      	str	r3, [r7, #32]
  402ea2:	e003      	b.n	402eac <udd_ctrl_out_received+0x13c>
  402ea4:	bf00      	nop
  402ea6:	6a3b      	ldr	r3, [r7, #32]
  402ea8:	3301      	adds	r3, #1
  402eaa:	623b      	str	r3, [r7, #32]
  402eac:	6a3b      	ldr	r3, [r7, #32]
  402eae:	2b13      	cmp	r3, #19
  402eb0:	d9f8      	bls.n	402ea4 <udd_ctrl_out_received+0x134>
				return;
  402eb2:	e09a      	b.n	402fea <udd_ctrl_out_received+0x27a>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  402eb4:	4b42      	ldr	r3, [pc, #264]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402eb8:	61fb      	str	r3, [r7, #28]
  402eba:	69fb      	ldr	r3, [r7, #28]
  402ebc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402ec0:	61fb      	str	r3, [r7, #28]
  402ec2:	69fb      	ldr	r3, [r7, #28]
  402ec4:	f023 0302 	bic.w	r3, r3, #2
  402ec8:	61fb      	str	r3, [r7, #28]
  402eca:	4b3d      	ldr	r3, [pc, #244]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402ecc:	69fa      	ldr	r2, [r7, #28]
  402ece:	631a      	str	r2, [r3, #48]	; 0x30
  402ed0:	2300      	movs	r3, #0
  402ed2:	61bb      	str	r3, [r7, #24]
  402ed4:	e003      	b.n	402ede <udd_ctrl_out_received+0x16e>
  402ed6:	bf00      	nop
  402ed8:	69bb      	ldr	r3, [r7, #24]
  402eda:	3301      	adds	r3, #1
  402edc:	61bb      	str	r3, [r7, #24]
  402ede:	69bb      	ldr	r3, [r7, #24]
  402ee0:	2b13      	cmp	r3, #19
  402ee2:	d9f8      	bls.n	402ed6 <udd_ctrl_out_received+0x166>
		udd_ctrl_send_zlp_in();
  402ee4:	4b3c      	ldr	r3, [pc, #240]	; (402fd8 <udd_ctrl_out_received+0x268>)
  402ee6:	4798      	blx	r3
		return;
  402ee8:	e07f      	b.n	402fea <udd_ctrl_out_received+0x27a>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  402eea:	4b38      	ldr	r3, [pc, #224]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402eec:	899a      	ldrh	r2, [r3, #12]
  402eee:	4b38      	ldr	r3, [pc, #224]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402ef0:	881b      	ldrh	r3, [r3, #0]
  402ef2:	429a      	cmp	r2, r3
  402ef4:	d14d      	bne.n	402f92 <udd_ctrl_out_received+0x222>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  402ef6:	4b35      	ldr	r3, [pc, #212]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402ef8:	695b      	ldr	r3, [r3, #20]
  402efa:	2b00      	cmp	r3, #0
  402efc:	d11a      	bne.n	402f34 <udd_ctrl_out_received+0x1c4>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  402efe:	4b2f      	ldr	r3, [pc, #188]	; (402fbc <udd_ctrl_out_received+0x24c>)
  402f00:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  402f02:	4b2f      	ldr	r3, [pc, #188]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f06:	617b      	str	r3, [r7, #20]
  402f08:	697b      	ldr	r3, [r7, #20]
  402f0a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402f0e:	617b      	str	r3, [r7, #20]
  402f10:	697b      	ldr	r3, [r7, #20]
  402f12:	f023 0302 	bic.w	r3, r3, #2
  402f16:	617b      	str	r3, [r7, #20]
  402f18:	4b29      	ldr	r3, [pc, #164]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402f1a:	697a      	ldr	r2, [r7, #20]
  402f1c:	631a      	str	r2, [r3, #48]	; 0x30
  402f1e:	2300      	movs	r3, #0
  402f20:	613b      	str	r3, [r7, #16]
  402f22:	e003      	b.n	402f2c <udd_ctrl_out_received+0x1bc>
  402f24:	bf00      	nop
  402f26:	693b      	ldr	r3, [r7, #16]
  402f28:	3301      	adds	r3, #1
  402f2a:	613b      	str	r3, [r7, #16]
  402f2c:	693b      	ldr	r3, [r7, #16]
  402f2e:	2b13      	cmp	r3, #19
  402f30:	d9f8      	bls.n	402f24 <udd_ctrl_out_received+0x1b4>
			return;
  402f32:	e05a      	b.n	402fea <udd_ctrl_out_received+0x27a>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  402f34:	4b25      	ldr	r3, [pc, #148]	; (402fcc <udd_ctrl_out_received+0x25c>)
  402f36:	695b      	ldr	r3, [r3, #20]
  402f38:	4798      	blx	r3
  402f3a:	4603      	mov	r3, r0
  402f3c:	f083 0301 	eor.w	r3, r3, #1
  402f40:	b2db      	uxtb	r3, r3
  402f42:	2b00      	cmp	r3, #0
  402f44:	d01a      	beq.n	402f7c <udd_ctrl_out_received+0x20c>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  402f46:	4b1d      	ldr	r3, [pc, #116]	; (402fbc <udd_ctrl_out_received+0x24c>)
  402f48:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  402f4a:	4b1d      	ldr	r3, [pc, #116]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f4e:	60fb      	str	r3, [r7, #12]
  402f50:	68fb      	ldr	r3, [r7, #12]
  402f52:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402f56:	60fb      	str	r3, [r7, #12]
  402f58:	68fb      	ldr	r3, [r7, #12]
  402f5a:	f023 0302 	bic.w	r3, r3, #2
  402f5e:	60fb      	str	r3, [r7, #12]
  402f60:	4b17      	ldr	r3, [pc, #92]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402f62:	68fa      	ldr	r2, [r7, #12]
  402f64:	631a      	str	r2, [r3, #48]	; 0x30
  402f66:	2300      	movs	r3, #0
  402f68:	60bb      	str	r3, [r7, #8]
  402f6a:	e003      	b.n	402f74 <udd_ctrl_out_received+0x204>
  402f6c:	bf00      	nop
  402f6e:	68bb      	ldr	r3, [r7, #8]
  402f70:	3301      	adds	r3, #1
  402f72:	60bb      	str	r3, [r7, #8]
  402f74:	68bb      	ldr	r3, [r7, #8]
  402f76:	2b13      	cmp	r3, #19
  402f78:	d9f8      	bls.n	402f6c <udd_ctrl_out_received+0x1fc>
			return;
  402f7a:	e036      	b.n	402fea <udd_ctrl_out_received+0x27a>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  402f7c:	4b15      	ldr	r3, [pc, #84]	; (402fd4 <udd_ctrl_out_received+0x264>)
  402f7e:	881a      	ldrh	r2, [r3, #0]
  402f80:	4b13      	ldr	r3, [pc, #76]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402f82:	881b      	ldrh	r3, [r3, #0]
  402f84:	4413      	add	r3, r2
  402f86:	b29a      	uxth	r2, r3
  402f88:	4b12      	ldr	r3, [pc, #72]	; (402fd4 <udd_ctrl_out_received+0x264>)
  402f8a:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  402f8c:	4b10      	ldr	r3, [pc, #64]	; (402fd0 <udd_ctrl_out_received+0x260>)
  402f8e:	2200      	movs	r2, #0
  402f90:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  402f92:	4b0b      	ldr	r3, [pc, #44]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f96:	607b      	str	r3, [r7, #4]
  402f98:	687b      	ldr	r3, [r7, #4]
  402f9a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402f9e:	607b      	str	r3, [r7, #4]
  402fa0:	687b      	ldr	r3, [r7, #4]
  402fa2:	f023 0302 	bic.w	r3, r3, #2
  402fa6:	607b      	str	r3, [r7, #4]
  402fa8:	4b05      	ldr	r3, [pc, #20]	; (402fc0 <udd_ctrl_out_received+0x250>)
  402faa:	687a      	ldr	r2, [r7, #4]
  402fac:	631a      	str	r2, [r3, #48]	; 0x30
  402fae:	2300      	movs	r3, #0
  402fb0:	603b      	str	r3, [r7, #0]
  402fb2:	e017      	b.n	402fe4 <udd_ctrl_out_received+0x274>
  402fb4:	20000c67 	.word	0x20000c67
  402fb8:	004030a9 	.word	0x004030a9
  402fbc:	00402ff1 	.word	0x00402ff1
  402fc0:	40034000 	.word	0x40034000
  402fc4:	00402939 	.word	0x00402939
  402fc8:	07ff0000 	.word	0x07ff0000
  402fcc:	20014f88 	.word	0x20014f88
  402fd0:	20000c6a 	.word	0x20000c6a
  402fd4:	20000c68 	.word	0x20000c68
  402fd8:	00403041 	.word	0x00403041
  402fdc:	bf00      	nop
  402fde:	683b      	ldr	r3, [r7, #0]
  402fe0:	3301      	adds	r3, #1
  402fe2:	603b      	str	r3, [r7, #0]
  402fe4:	683b      	ldr	r3, [r7, #0]
  402fe6:	2b13      	cmp	r3, #19
  402fe8:	d9f8      	bls.n	402fdc <udd_ctrl_out_received+0x26c>
}
  402fea:	3738      	adds	r7, #56	; 0x38
  402fec:	46bd      	mov	sp, r7
  402fee:	bd80      	pop	{r7, pc}

00402ff0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
  402ff0:	b480      	push	{r7}
  402ff2:	b083      	sub	sp, #12
  402ff4:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  402ff6:	4b10      	ldr	r3, [pc, #64]	; (403038 <udd_ctrl_stall_data+0x48>)
  402ff8:	2205      	movs	r2, #5
  402ffa:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  402ffc:	4b0f      	ldr	r3, [pc, #60]	; (40303c <udd_ctrl_stall_data+0x4c>)
  402ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403000:	607b      	str	r3, [r7, #4]
  403002:	687b      	ldr	r3, [r7, #4]
  403004:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403008:	607b      	str	r3, [r7, #4]
  40300a:	687b      	ldr	r3, [r7, #4]
  40300c:	f043 0320 	orr.w	r3, r3, #32
  403010:	607b      	str	r3, [r7, #4]
  403012:	4b0a      	ldr	r3, [pc, #40]	; (40303c <udd_ctrl_stall_data+0x4c>)
  403014:	687a      	ldr	r2, [r7, #4]
  403016:	631a      	str	r2, [r3, #48]	; 0x30
  403018:	2300      	movs	r3, #0
  40301a:	603b      	str	r3, [r7, #0]
  40301c:	e003      	b.n	403026 <udd_ctrl_stall_data+0x36>
  40301e:	bf00      	nop
  403020:	683b      	ldr	r3, [r7, #0]
  403022:	3301      	adds	r3, #1
  403024:	603b      	str	r3, [r7, #0]
  403026:	683b      	ldr	r3, [r7, #0]
  403028:	2b13      	cmp	r3, #19
  40302a:	d9f8      	bls.n	40301e <udd_ctrl_stall_data+0x2e>
}
  40302c:	370c      	adds	r7, #12
  40302e:	46bd      	mov	sp, r7
  403030:	f85d 7b04 	ldr.w	r7, [sp], #4
  403034:	4770      	bx	lr
  403036:	bf00      	nop
  403038:	20000c67 	.word	0x20000c67
  40303c:	40034000 	.word	0x40034000

00403040 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  403040:	b480      	push	{r7}
  403042:	b083      	sub	sp, #12
  403044:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  403046:	4b10      	ldr	r3, [pc, #64]	; (403088 <udd_ctrl_send_zlp_in+0x48>)
  403048:	2203      	movs	r2, #3
  40304a:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  40304c:	4b0f      	ldr	r3, [pc, #60]	; (40308c <udd_ctrl_send_zlp_in+0x4c>)
  40304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403050:	607b      	str	r3, [r7, #4]
  403052:	687b      	ldr	r3, [r7, #4]
  403054:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403058:	607b      	str	r3, [r7, #4]
  40305a:	687b      	ldr	r3, [r7, #4]
  40305c:	f043 0310 	orr.w	r3, r3, #16
  403060:	607b      	str	r3, [r7, #4]
  403062:	4b0a      	ldr	r3, [pc, #40]	; (40308c <udd_ctrl_send_zlp_in+0x4c>)
  403064:	687a      	ldr	r2, [r7, #4]
  403066:	631a      	str	r2, [r3, #48]	; 0x30
  403068:	2300      	movs	r3, #0
  40306a:	603b      	str	r3, [r7, #0]
  40306c:	e003      	b.n	403076 <udd_ctrl_send_zlp_in+0x36>
  40306e:	bf00      	nop
  403070:	683b      	ldr	r3, [r7, #0]
  403072:	3301      	adds	r3, #1
  403074:	603b      	str	r3, [r7, #0]
  403076:	683b      	ldr	r3, [r7, #0]
  403078:	2b13      	cmp	r3, #19
  40307a:	d9f8      	bls.n	40306e <udd_ctrl_send_zlp_in+0x2e>
}
  40307c:	370c      	adds	r7, #12
  40307e:	46bd      	mov	sp, r7
  403080:	f85d 7b04 	ldr.w	r7, [sp], #4
  403084:	4770      	bx	lr
  403086:	bf00      	nop
  403088:	20000c67 	.word	0x20000c67
  40308c:	40034000 	.word	0x40034000

00403090 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
  403090:	b480      	push	{r7}
  403092:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  403094:	4b03      	ldr	r3, [pc, #12]	; (4030a4 <udd_ctrl_send_zlp_out+0x14>)
  403096:	2204      	movs	r2, #4
  403098:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free
}
  40309a:	46bd      	mov	sp, r7
  40309c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030a0:	4770      	bx	lr
  4030a2:	bf00      	nop
  4030a4:	20000c67 	.word	0x20000c67

004030a8 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
  4030a8:	b580      	push	{r7, lr}
  4030aa:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  4030ac:	4b03      	ldr	r3, [pc, #12]	; (4030bc <udd_ctrl_endofrequest+0x14>)
  4030ae:	691b      	ldr	r3, [r3, #16]
  4030b0:	2b00      	cmp	r3, #0
  4030b2:	d002      	beq.n	4030ba <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
  4030b4:	4b01      	ldr	r3, [pc, #4]	; (4030bc <udd_ctrl_endofrequest+0x14>)
  4030b6:	691b      	ldr	r3, [r3, #16]
  4030b8:	4798      	blx	r3
	}
}
  4030ba:	bd80      	pop	{r7, pc}
  4030bc:	20014f88 	.word	0x20014f88

004030c0 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
  4030c0:	b580      	push	{r7, lr}
  4030c2:	b082      	sub	sp, #8
  4030c4:	af00      	add	r7, sp, #0
	if (!Is_udd_endpoint_interrupt(0))
  4030c6:	4b25      	ldr	r3, [pc, #148]	; (40315c <udd_ctrl_interrupt+0x9c>)
  4030c8:	69db      	ldr	r3, [r3, #28]
  4030ca:	f003 0301 	and.w	r3, r3, #1
  4030ce:	2b00      	cmp	r3, #0
  4030d0:	d101      	bne.n	4030d6 <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
  4030d2:	2300      	movs	r3, #0
  4030d4:	e03e      	b.n	403154 <udd_ctrl_interrupt+0x94>

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  4030d6:	4b21      	ldr	r3, [pc, #132]	; (40315c <udd_ctrl_interrupt+0x9c>)
  4030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4030da:	f003 0304 	and.w	r3, r3, #4
  4030de:	2b00      	cmp	r3, #0
  4030e0:	d003      	beq.n	4030ea <udd_ctrl_interrupt+0x2a>
		// SETUP packet received
		udd_ctrl_setup_received();
  4030e2:	4b1f      	ldr	r3, [pc, #124]	; (403160 <udd_ctrl_interrupt+0xa0>)
  4030e4:	4798      	blx	r3
		return true;
  4030e6:	2301      	movs	r3, #1
  4030e8:	e034      	b.n	403154 <udd_ctrl_interrupt+0x94>
	}
	if (Is_udd_in_sent(0)) {
  4030ea:	4b1c      	ldr	r3, [pc, #112]	; (40315c <udd_ctrl_interrupt+0x9c>)
  4030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4030ee:	f003 0301 	and.w	r3, r3, #1
  4030f2:	2b00      	cmp	r3, #0
  4030f4:	d003      	beq.n	4030fe <udd_ctrl_interrupt+0x3e>
		// IN packet sent
		udd_ctrl_in_sent();
  4030f6:	4b1b      	ldr	r3, [pc, #108]	; (403164 <udd_ctrl_interrupt+0xa4>)
  4030f8:	4798      	blx	r3
		return true;
  4030fa:	2301      	movs	r3, #1
  4030fc:	e02a      	b.n	403154 <udd_ctrl_interrupt+0x94>
	}
	if (Is_udd_bank0_received(0)) {
  4030fe:	4b17      	ldr	r3, [pc, #92]	; (40315c <udd_ctrl_interrupt+0x9c>)
  403100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403102:	f003 0302 	and.w	r3, r3, #2
  403106:	2b00      	cmp	r3, #0
  403108:	d003      	beq.n	403112 <udd_ctrl_interrupt+0x52>
		// OUT packet received
		udd_ctrl_out_received();
  40310a:	4b17      	ldr	r3, [pc, #92]	; (403168 <udd_ctrl_interrupt+0xa8>)
  40310c:	4798      	blx	r3
		return true;
  40310e:	2301      	movs	r3, #1
  403110:	e020      	b.n	403154 <udd_ctrl_interrupt+0x94>
	}
	if (Is_udd_stall(0)) {
  403112:	4b12      	ldr	r3, [pc, #72]	; (40315c <udd_ctrl_interrupt+0x9c>)
  403114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403116:	f003 0308 	and.w	r3, r3, #8
  40311a:	2b00      	cmp	r3, #0
  40311c:	d019      	beq.n	403152 <udd_ctrl_interrupt+0x92>
		// STALLed
		udd_ack_stall(0);
  40311e:	4b0f      	ldr	r3, [pc, #60]	; (40315c <udd_ctrl_interrupt+0x9c>)
  403120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403122:	607b      	str	r3, [r7, #4]
  403124:	687b      	ldr	r3, [r7, #4]
  403126:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40312a:	607b      	str	r3, [r7, #4]
  40312c:	687b      	ldr	r3, [r7, #4]
  40312e:	f023 0308 	bic.w	r3, r3, #8
  403132:	607b      	str	r3, [r7, #4]
  403134:	4b09      	ldr	r3, [pc, #36]	; (40315c <udd_ctrl_interrupt+0x9c>)
  403136:	687a      	ldr	r2, [r7, #4]
  403138:	631a      	str	r2, [r3, #48]	; 0x30
  40313a:	2300      	movs	r3, #0
  40313c:	603b      	str	r3, [r7, #0]
  40313e:	e003      	b.n	403148 <udd_ctrl_interrupt+0x88>
  403140:	bf00      	nop
  403142:	683b      	ldr	r3, [r7, #0]
  403144:	3301      	adds	r3, #1
  403146:	603b      	str	r3, [r7, #0]
  403148:	683b      	ldr	r3, [r7, #0]
  40314a:	2b13      	cmp	r3, #19
  40314c:	d9f8      	bls.n	403140 <udd_ctrl_interrupt+0x80>
		return true;
  40314e:	2301      	movs	r3, #1
  403150:	e000      	b.n	403154 <udd_ctrl_interrupt+0x94>
	}
	return false;
  403152:	2300      	movs	r3, #0
}
  403154:	4618      	mov	r0, r3
  403156:	3708      	adds	r7, #8
  403158:	46bd      	mov	sp, r7
  40315a:	bd80      	pop	{r7, pc}
  40315c:	40034000 	.word	0x40034000
  403160:	00402965 	.word	0x00402965
  403164:	00402b51 	.word	0x00402b51
  403168:	00402d71 	.word	0x00402d71

0040316c <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
  40316c:	b480      	push	{r7}
  40316e:	b083      	sub	sp, #12
  403170:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  403172:	2300      	movs	r3, #0
  403174:	71fb      	strb	r3, [r7, #7]
  403176:	e043      	b.n	403200 <udd_ep_job_table_reset+0x94>
		udd_ep_job[i].bank = 0;
  403178:	79fa      	ldrb	r2, [r7, #7]
  40317a:	4925      	ldr	r1, [pc, #148]	; (403210 <udd_ep_job_table_reset+0xa4>)
  40317c:	4613      	mov	r3, r2
  40317e:	009b      	lsls	r3, r3, #2
  403180:	4413      	add	r3, r2
  403182:	009b      	lsls	r3, r3, #2
  403184:	440b      	add	r3, r1
  403186:	f103 0210 	add.w	r2, r3, #16
  40318a:	7853      	ldrb	r3, [r2, #1]
  40318c:	f36f 0383 	bfc	r3, #2, #2
  403190:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].busy = false;
  403192:	79fa      	ldrb	r2, [r7, #7]
  403194:	491e      	ldr	r1, [pc, #120]	; (403210 <udd_ep_job_table_reset+0xa4>)
  403196:	4613      	mov	r3, r2
  403198:	009b      	lsls	r3, r3, #2
  40319a:	4413      	add	r3, r2
  40319c:	009b      	lsls	r3, r3, #2
  40319e:	440b      	add	r3, r1
  4031a0:	f103 0210 	add.w	r2, r3, #16
  4031a4:	7853      	ldrb	r3, [r2, #1]
  4031a6:	f36f 1304 	bfc	r3, #4, #1
  4031aa:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_stall_requested = false;
  4031ac:	79fa      	ldrb	r2, [r7, #7]
  4031ae:	4918      	ldr	r1, [pc, #96]	; (403210 <udd_ep_job_table_reset+0xa4>)
  4031b0:	4613      	mov	r3, r2
  4031b2:	009b      	lsls	r3, r3, #2
  4031b4:	4413      	add	r3, r2
  4031b6:	009b      	lsls	r3, r3, #2
  4031b8:	440b      	add	r3, r1
  4031ba:	f103 0210 	add.w	r2, r3, #16
  4031be:	7853      	ldrb	r3, [r2, #1]
  4031c0:	f36f 1345 	bfc	r3, #5, #1
  4031c4:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_shortpacket = false;
  4031c6:	79fa      	ldrb	r2, [r7, #7]
  4031c8:	4911      	ldr	r1, [pc, #68]	; (403210 <udd_ep_job_table_reset+0xa4>)
  4031ca:	4613      	mov	r3, r2
  4031cc:	009b      	lsls	r3, r3, #2
  4031ce:	4413      	add	r3, r2
  4031d0:	009b      	lsls	r3, r3, #2
  4031d2:	440b      	add	r3, r1
  4031d4:	f103 0210 	add.w	r2, r3, #16
  4031d8:	7853      	ldrb	r3, [r2, #1]
  4031da:	f36f 1386 	bfc	r3, #6, #1
  4031de:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_buf_end = false;
  4031e0:	79fa      	ldrb	r2, [r7, #7]
  4031e2:	490b      	ldr	r1, [pc, #44]	; (403210 <udd_ep_job_table_reset+0xa4>)
  4031e4:	4613      	mov	r3, r2
  4031e6:	009b      	lsls	r3, r3, #2
  4031e8:	4413      	add	r3, r2
  4031ea:	009b      	lsls	r3, r3, #2
  4031ec:	440b      	add	r3, r1
  4031ee:	f103 0210 	add.w	r2, r3, #16
  4031f2:	7853      	ldrb	r3, [r2, #1]
  4031f4:	f36f 13c7 	bfc	r3, #7, #1
  4031f8:	7053      	strb	r3, [r2, #1]
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4031fa:	79fb      	ldrb	r3, [r7, #7]
  4031fc:	3301      	adds	r3, #1
  4031fe:	71fb      	strb	r3, [r7, #7]
  403200:	79fb      	ldrb	r3, [r7, #7]
  403202:	2b02      	cmp	r3, #2
  403204:	d9b8      	bls.n	403178 <udd_ep_job_table_reset+0xc>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
	}
}
  403206:	370c      	adds	r7, #12
  403208:	46bd      	mov	sp, r7
  40320a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40320e:	4770      	bx	lr
  403210:	20000c6c 	.word	0x20000c6c

00403214 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
  403214:	b580      	push	{r7, lr}
  403216:	b082      	sub	sp, #8
  403218:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40321a:	2300      	movs	r3, #0
  40321c:	71fb      	strb	r3, [r7, #7]
  40321e:	e011      	b.n	403244 <udd_ep_job_table_kill+0x30>
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  403220:	79fa      	ldrb	r2, [r7, #7]
  403222:	4613      	mov	r3, r2
  403224:	009b      	lsls	r3, r3, #2
  403226:	4413      	add	r3, r2
  403228:	009b      	lsls	r3, r3, #2
  40322a:	4a09      	ldr	r2, [pc, #36]	; (403250 <udd_ep_job_table_kill+0x3c>)
  40322c:	441a      	add	r2, r3
  40322e:	79fb      	ldrb	r3, [r7, #7]
  403230:	3301      	adds	r3, #1
  403232:	b2db      	uxtb	r3, r3
  403234:	4610      	mov	r0, r2
  403236:	2101      	movs	r1, #1
  403238:	461a      	mov	r2, r3
  40323a:	4b06      	ldr	r3, [pc, #24]	; (403254 <udd_ep_job_table_kill+0x40>)
  40323c:	4798      	blx	r3
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40323e:	79fb      	ldrb	r3, [r7, #7]
  403240:	3301      	adds	r3, #1
  403242:	71fb      	strb	r3, [r7, #7]
  403244:	79fb      	ldrb	r3, [r7, #7]
  403246:	2b02      	cmp	r3, #2
  403248:	d9ea      	bls.n	403220 <udd_ep_job_table_kill+0xc>
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
	}
}
  40324a:	3708      	adds	r7, #8
  40324c:	46bd      	mov	sp, r7
  40324e:	bd80      	pop	{r7, pc}
  403250:	20000c6c 	.word	0x20000c6c
  403254:	00403295 	.word	0x00403295

00403258 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
  403258:	b580      	push	{r7, lr}
  40325a:	b082      	sub	sp, #8
  40325c:	af00      	add	r7, sp, #0
  40325e:	4603      	mov	r3, r0
  403260:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
  403262:	79fb      	ldrb	r3, [r7, #7]
  403264:	f003 030f 	and.w	r3, r3, #15
  403268:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  40326a:	79fb      	ldrb	r3, [r7, #7]
  40326c:	1e5a      	subs	r2, r3, #1
  40326e:	4613      	mov	r3, r2
  403270:	009b      	lsls	r3, r3, #2
  403272:	4413      	add	r3, r2
  403274:	009b      	lsls	r3, r3, #2
  403276:	4a05      	ldr	r2, [pc, #20]	; (40328c <udd_ep_abort_job+0x34>)
  403278:	441a      	add	r2, r3
  40327a:	79fb      	ldrb	r3, [r7, #7]
  40327c:	4610      	mov	r0, r2
  40327e:	2101      	movs	r1, #1
  403280:	461a      	mov	r2, r3
  403282:	4b03      	ldr	r3, [pc, #12]	; (403290 <udd_ep_abort_job+0x38>)
  403284:	4798      	blx	r3
}
  403286:	3708      	adds	r7, #8
  403288:	46bd      	mov	sp, r7
  40328a:	bd80      	pop	{r7, pc}
  40328c:	20000c6c 	.word	0x20000c6c
  403290:	00403295 	.word	0x00403295

00403294 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  403294:	b580      	push	{r7, lr}
  403296:	b084      	sub	sp, #16
  403298:	af00      	add	r7, sp, #0
  40329a:	60f8      	str	r0, [r7, #12]
  40329c:	60b9      	str	r1, [r7, #8]
  40329e:	4613      	mov	r3, r2
  4032a0:	71fb      	strb	r3, [r7, #7]
	if (ptr_job->busy == false) {
  4032a2:	68fb      	ldr	r3, [r7, #12]
  4032a4:	7c5b      	ldrb	r3, [r3, #17]
  4032a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
  4032aa:	b2db      	uxtb	r3, r3
  4032ac:	2b00      	cmp	r3, #0
  4032ae:	d100      	bne.n	4032b2 <udd_ep_finish_job+0x1e>
		return; // No on-going job
  4032b0:	e023      	b.n	4032fa <udd_ep_finish_job+0x66>
	}
	ptr_job->busy = false;
  4032b2:	68fa      	ldr	r2, [r7, #12]
  4032b4:	7c53      	ldrb	r3, [r2, #17]
  4032b6:	f36f 1304 	bfc	r3, #4, #1
  4032ba:	7453      	strb	r3, [r2, #17]
	if (NULL == ptr_job->call_trans) {
  4032bc:	68fb      	ldr	r3, [r7, #12]
  4032be:	681b      	ldr	r3, [r3, #0]
  4032c0:	2b00      	cmp	r3, #0
  4032c2:	d100      	bne.n	4032c6 <udd_ep_finish_job+0x32>
		return; // No callback linked to job
  4032c4:	e019      	b.n	4032fa <udd_ep_finish_job+0x66>
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  4032c6:	4b0e      	ldr	r3, [pc, #56]	; (403300 <udd_ep_finish_job+0x6c>)
  4032c8:	79fa      	ldrb	r2, [r7, #7]
  4032ca:	320c      	adds	r2, #12
  4032cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  4032d4:	2b00      	cmp	r3, #0
  4032d6:	d003      	beq.n	4032e0 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
  4032d8:	79fb      	ldrb	r3, [r7, #7]
  4032da:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4032de:	71fb      	strb	r3, [r7, #7]
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  4032e0:	68fb      	ldr	r3, [r7, #12]
  4032e2:	681b      	ldr	r3, [r3, #0]
  4032e4:	68ba      	ldr	r2, [r7, #8]
  4032e6:	2a01      	cmp	r2, #1
  4032e8:	bf14      	ite	ne
  4032ea:	2200      	movne	r2, #0
  4032ec:	2201      	moveq	r2, #1
  4032ee:	b2d2      	uxtb	r2, r2
  4032f0:	4610      	mov	r0, r2
  4032f2:	68fa      	ldr	r2, [r7, #12]
  4032f4:	6891      	ldr	r1, [r2, #8]
  4032f6:	79fa      	ldrb	r2, [r7, #7]
  4032f8:	4798      	blx	r3
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
  4032fa:	3710      	adds	r7, #16
  4032fc:	46bd      	mov	sp, r7
  4032fe:	bd80      	pop	{r7, pc}
  403300:	40034000 	.word	0x40034000

00403304 <udd_ep_ack_out_received>:


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  403304:	b480      	push	{r7}
  403306:	b089      	sub	sp, #36	; 0x24
  403308:	af00      	add	r7, sp, #0
  40330a:	4603      	mov	r3, r0
  40330c:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40330e:	79fb      	ldrb	r3, [r7, #7]
  403310:	1e5a      	subs	r2, r3, #1
  403312:	4613      	mov	r3, r2
  403314:	009b      	lsls	r3, r3, #2
  403316:	4413      	add	r3, r2
  403318:	009b      	lsls	r3, r3, #2
  40331a:	4a3d      	ldr	r2, [pc, #244]	; (403410 <udd_ep_ack_out_received+0x10c>)
  40331c:	4413      	add	r3, r2
  40331e:	61fb      	str	r3, [r7, #28]
	if (Is_udd_all_banks_received(ep)) {
  403320:	4b3c      	ldr	r3, [pc, #240]	; (403414 <udd_ep_ack_out_received+0x110>)
  403322:	79fa      	ldrb	r2, [r7, #7]
  403324:	320c      	adds	r2, #12
  403326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40332a:	f003 0342 	and.w	r3, r3, #66	; 0x42
  40332e:	2b42      	cmp	r3, #66	; 0x42
  403330:	d014      	beq.n	40335c <udd_ep_ack_out_received+0x58>
		// The only way is to use ptr_job->bank
	} else if (Is_udd_bank0_received(ep)) {
  403332:	4b38      	ldr	r3, [pc, #224]	; (403414 <udd_ep_ack_out_received+0x110>)
  403334:	79fa      	ldrb	r2, [r7, #7]
  403336:	320c      	adds	r2, #12
  403338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40333c:	f003 0302 	and.w	r3, r3, #2
  403340:	2b00      	cmp	r3, #0
  403342:	d005      	beq.n	403350 <udd_ep_ack_out_received+0x4c>
		// Must be bank0
		ptr_job->bank = 0;
  403344:	69fa      	ldr	r2, [r7, #28]
  403346:	7c53      	ldrb	r3, [r2, #17]
  403348:	f36f 0383 	bfc	r3, #2, #2
  40334c:	7453      	strb	r3, [r2, #17]
  40334e:	e005      	b.n	40335c <udd_ep_ack_out_received+0x58>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  403350:	69fa      	ldr	r2, [r7, #28]
  403352:	7c53      	ldrb	r3, [r2, #17]
  403354:	2101      	movs	r1, #1
  403356:	f361 0383 	bfi	r3, r1, #2, #2
  40335a:	7453      	strb	r3, [r2, #17]
	}
	if (ptr_job->bank == 0) {
  40335c:	69fb      	ldr	r3, [r7, #28]
  40335e:	7c5b      	ldrb	r3, [r3, #17]
  403360:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403364:	b2db      	uxtb	r3, r3
  403366:	2b00      	cmp	r3, #0
  403368:	d12a      	bne.n	4033c0 <udd_ep_ack_out_received+0xbc>
		udd_ack_bank0_received(ep);
  40336a:	4b2a      	ldr	r3, [pc, #168]	; (403414 <udd_ep_ack_out_received+0x110>)
  40336c:	79fa      	ldrb	r2, [r7, #7]
  40336e:	320c      	adds	r2, #12
  403370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403374:	61bb      	str	r3, [r7, #24]
  403376:	69bb      	ldr	r3, [r7, #24]
  403378:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40337c:	61bb      	str	r3, [r7, #24]
  40337e:	69bb      	ldr	r3, [r7, #24]
  403380:	f023 0302 	bic.w	r3, r3, #2
  403384:	61bb      	str	r3, [r7, #24]
  403386:	4b23      	ldr	r3, [pc, #140]	; (403414 <udd_ep_ack_out_received+0x110>)
  403388:	79fa      	ldrb	r2, [r7, #7]
  40338a:	69b9      	ldr	r1, [r7, #24]
  40338c:	320c      	adds	r2, #12
  40338e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403392:	2300      	movs	r3, #0
  403394:	617b      	str	r3, [r7, #20]
  403396:	e003      	b.n	4033a0 <udd_ep_ack_out_received+0x9c>
  403398:	bf00      	nop
  40339a:	697b      	ldr	r3, [r7, #20]
  40339c:	3301      	adds	r3, #1
  40339e:	617b      	str	r3, [r7, #20]
  4033a0:	697b      	ldr	r3, [r7, #20]
  4033a2:	2b13      	cmp	r3, #19
  4033a4:	d9f8      	bls.n	403398 <udd_ep_ack_out_received+0x94>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  4033a6:	79fb      	ldrb	r3, [r7, #7]
  4033a8:	2b00      	cmp	r3, #0
  4033aa:	d02c      	beq.n	403406 <udd_ep_ack_out_received+0x102>
  4033ac:	79fb      	ldrb	r3, [r7, #7]
  4033ae:	2b03      	cmp	r3, #3
  4033b0:	d029      	beq.n	403406 <udd_ep_ack_out_received+0x102>
			ptr_job->bank = 1;
  4033b2:	69fa      	ldr	r2, [r7, #28]
  4033b4:	7c53      	ldrb	r3, [r2, #17]
  4033b6:	2101      	movs	r1, #1
  4033b8:	f361 0383 	bfi	r3, r1, #2, #2
  4033bc:	7453      	strb	r3, [r2, #17]
  4033be:	e022      	b.n	403406 <udd_ep_ack_out_received+0x102>
		}
	} else {
		udd_ack_bank1_received(ep);
  4033c0:	4b14      	ldr	r3, [pc, #80]	; (403414 <udd_ep_ack_out_received+0x110>)
  4033c2:	79fa      	ldrb	r2, [r7, #7]
  4033c4:	320c      	adds	r2, #12
  4033c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4033ca:	613b      	str	r3, [r7, #16]
  4033cc:	693b      	ldr	r3, [r7, #16]
  4033ce:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4033d2:	613b      	str	r3, [r7, #16]
  4033d4:	693b      	ldr	r3, [r7, #16]
  4033d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4033da:	613b      	str	r3, [r7, #16]
  4033dc:	4b0d      	ldr	r3, [pc, #52]	; (403414 <udd_ep_ack_out_received+0x110>)
  4033de:	79fa      	ldrb	r2, [r7, #7]
  4033e0:	6939      	ldr	r1, [r7, #16]
  4033e2:	320c      	adds	r2, #12
  4033e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4033e8:	2300      	movs	r3, #0
  4033ea:	60fb      	str	r3, [r7, #12]
  4033ec:	e003      	b.n	4033f6 <udd_ep_ack_out_received+0xf2>
  4033ee:	bf00      	nop
  4033f0:	68fb      	ldr	r3, [r7, #12]
  4033f2:	3301      	adds	r3, #1
  4033f4:	60fb      	str	r3, [r7, #12]
  4033f6:	68fb      	ldr	r3, [r7, #12]
  4033f8:	2b13      	cmp	r3, #19
  4033fa:	d9f8      	bls.n	4033ee <udd_ep_ack_out_received+0xea>
		ptr_job->bank = 0;
  4033fc:	69fa      	ldr	r2, [r7, #28]
  4033fe:	7c53      	ldrb	r3, [r2, #17]
  403400:	f36f 0383 	bfc	r3, #2, #2
  403404:	7453      	strb	r3, [r2, #17]
	}
}
  403406:	3724      	adds	r7, #36	; 0x24
  403408:	46bd      	mov	sp, r7
  40340a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40340e:	4770      	bx	lr
  403410:	20000c6c 	.word	0x20000c6c
  403414:	40034000 	.word	0x40034000

00403418 <udd_ep_write_fifo>:


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
  403418:	b480      	push	{r7}
  40341a:	b089      	sub	sp, #36	; 0x24
  40341c:	af00      	add	r7, sp, #0
  40341e:	4603      	mov	r3, r0
  403420:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  403422:	79fb      	ldrb	r3, [r7, #7]
  403424:	1e5a      	subs	r2, r3, #1
  403426:	4613      	mov	r3, r2
  403428:	009b      	lsls	r3, r3, #2
  40342a:	4413      	add	r3, r2
  40342c:	009b      	lsls	r3, r3, #2
  40342e:	4a55      	ldr	r2, [pc, #340]	; (403584 <udd_ep_write_fifo+0x16c>)
  403430:	4413      	add	r3, r2
  403432:	613b      	str	r3, [r7, #16]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  403434:	693b      	ldr	r3, [r7, #16]
  403436:	685a      	ldr	r2, [r3, #4]
  403438:	693b      	ldr	r3, [r7, #16]
  40343a:	68db      	ldr	r3, [r3, #12]
  40343c:	4413      	add	r3, r2
  40343e:	61fb      	str	r3, [r7, #28]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  403440:	693b      	ldr	r3, [r7, #16]
  403442:	689a      	ldr	r2, [r3, #8]
  403444:	693b      	ldr	r3, [r7, #16]
  403446:	68db      	ldr	r3, [r3, #12]
  403448:	1ad3      	subs	r3, r2, r3
  40344a:	60fb      	str	r3, [r7, #12]
	uint32_t pkt_size = ptr_job->size;
  40344c:	693b      	ldr	r3, [r7, #16]
  40344e:	8a1b      	ldrh	r3, [r3, #16]
  403450:	f3c3 0309 	ubfx	r3, r3, #0, #10
  403454:	b29b      	uxth	r3, r3
  403456:	61bb      	str	r3, [r7, #24]
	bool is_short_pkt = false;
  403458:	2300      	movs	r3, #0
  40345a:	75fb      	strb	r3, [r7, #23]

	// Packet size
	if (nb_remain < pkt_size) {
  40345c:	68fa      	ldr	r2, [r7, #12]
  40345e:	69bb      	ldr	r3, [r7, #24]
  403460:	429a      	cmp	r2, r3
  403462:	d203      	bcs.n	40346c <udd_ep_write_fifo+0x54>
		pkt_size = nb_remain;
  403464:	68fb      	ldr	r3, [r7, #12]
  403466:	61bb      	str	r3, [r7, #24]
		is_short_pkt = true;
  403468:	2301      	movs	r3, #1
  40346a:	75fb      	strb	r3, [r7, #23]
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  40346c:	693b      	ldr	r3, [r7, #16]
  40346e:	68da      	ldr	r2, [r3, #12]
  403470:	69bb      	ldr	r3, [r7, #24]
  403472:	441a      	add	r2, r3
  403474:	693b      	ldr	r3, [r7, #16]
  403476:	60da      	str	r2, [r3, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  403478:	e05a      	b.n	403530 <udd_ep_write_fifo+0x118>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40347a:	4a43      	ldr	r2, [pc, #268]	; (403588 <udd_ep_write_fifo+0x170>)
  40347c:	79f8      	ldrb	r0, [r7, #7]
  40347e:	69fb      	ldr	r3, [r7, #28]
  403480:	1c59      	adds	r1, r3, #1
  403482:	61f9      	str	r1, [r7, #28]
  403484:	781b      	ldrb	r3, [r3, #0]
  403486:	4619      	mov	r1, r3
  403488:	f100 0314 	add.w	r3, r0, #20
  40348c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403490:	4a3d      	ldr	r2, [pc, #244]	; (403588 <udd_ep_write_fifo+0x170>)
  403492:	79f8      	ldrb	r0, [r7, #7]
  403494:	69fb      	ldr	r3, [r7, #28]
  403496:	1c59      	adds	r1, r3, #1
  403498:	61f9      	str	r1, [r7, #28]
  40349a:	781b      	ldrb	r3, [r3, #0]
  40349c:	4619      	mov	r1, r3
  40349e:	f100 0314 	add.w	r3, r0, #20
  4034a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4034a6:	4a38      	ldr	r2, [pc, #224]	; (403588 <udd_ep_write_fifo+0x170>)
  4034a8:	79f8      	ldrb	r0, [r7, #7]
  4034aa:	69fb      	ldr	r3, [r7, #28]
  4034ac:	1c59      	adds	r1, r3, #1
  4034ae:	61f9      	str	r1, [r7, #28]
  4034b0:	781b      	ldrb	r3, [r3, #0]
  4034b2:	4619      	mov	r1, r3
  4034b4:	f100 0314 	add.w	r3, r0, #20
  4034b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4034bc:	4a32      	ldr	r2, [pc, #200]	; (403588 <udd_ep_write_fifo+0x170>)
  4034be:	79f8      	ldrb	r0, [r7, #7]
  4034c0:	69fb      	ldr	r3, [r7, #28]
  4034c2:	1c59      	adds	r1, r3, #1
  4034c4:	61f9      	str	r1, [r7, #28]
  4034c6:	781b      	ldrb	r3, [r3, #0]
  4034c8:	4619      	mov	r1, r3
  4034ca:	f100 0314 	add.w	r3, r0, #20
  4034ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4034d2:	4a2d      	ldr	r2, [pc, #180]	; (403588 <udd_ep_write_fifo+0x170>)
  4034d4:	79f8      	ldrb	r0, [r7, #7]
  4034d6:	69fb      	ldr	r3, [r7, #28]
  4034d8:	1c59      	adds	r1, r3, #1
  4034da:	61f9      	str	r1, [r7, #28]
  4034dc:	781b      	ldrb	r3, [r3, #0]
  4034de:	4619      	mov	r1, r3
  4034e0:	f100 0314 	add.w	r3, r0, #20
  4034e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4034e8:	4a27      	ldr	r2, [pc, #156]	; (403588 <udd_ep_write_fifo+0x170>)
  4034ea:	79f8      	ldrb	r0, [r7, #7]
  4034ec:	69fb      	ldr	r3, [r7, #28]
  4034ee:	1c59      	adds	r1, r3, #1
  4034f0:	61f9      	str	r1, [r7, #28]
  4034f2:	781b      	ldrb	r3, [r3, #0]
  4034f4:	4619      	mov	r1, r3
  4034f6:	f100 0314 	add.w	r3, r0, #20
  4034fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4034fe:	4a22      	ldr	r2, [pc, #136]	; (403588 <udd_ep_write_fifo+0x170>)
  403500:	79f8      	ldrb	r0, [r7, #7]
  403502:	69fb      	ldr	r3, [r7, #28]
  403504:	1c59      	adds	r1, r3, #1
  403506:	61f9      	str	r1, [r7, #28]
  403508:	781b      	ldrb	r3, [r3, #0]
  40350a:	4619      	mov	r1, r3
  40350c:	f100 0314 	add.w	r3, r0, #20
  403510:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403514:	4a1c      	ldr	r2, [pc, #112]	; (403588 <udd_ep_write_fifo+0x170>)
  403516:	79f8      	ldrb	r0, [r7, #7]
  403518:	69fb      	ldr	r3, [r7, #28]
  40351a:	1c59      	adds	r1, r3, #1
  40351c:	61f9      	str	r1, [r7, #28]
  40351e:	781b      	ldrb	r3, [r3, #0]
  403520:	4619      	mov	r1, r3
  403522:	f100 0314 	add.w	r3, r0, #20
  403526:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  40352a:	69bb      	ldr	r3, [r7, #24]
  40352c:	3b08      	subs	r3, #8
  40352e:	61bb      	str	r3, [r7, #24]
  403530:	69bb      	ldr	r3, [r7, #24]
  403532:	2b07      	cmp	r3, #7
  403534:	d8a1      	bhi.n	40347a <udd_ep_write_fifo+0x62>
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  403536:	e00d      	b.n	403554 <udd_ep_write_fifo+0x13c>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403538:	4a13      	ldr	r2, [pc, #76]	; (403588 <udd_ep_write_fifo+0x170>)
  40353a:	79f8      	ldrb	r0, [r7, #7]
  40353c:	69fb      	ldr	r3, [r7, #28]
  40353e:	1c59      	adds	r1, r3, #1
  403540:	61f9      	str	r1, [r7, #28]
  403542:	781b      	ldrb	r3, [r3, #0]
  403544:	4619      	mov	r1, r3
  403546:	f100 0314 	add.w	r3, r0, #20
  40354a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  40354e:	69bb      	ldr	r3, [r7, #24]
  403550:	3b01      	subs	r3, #1
  403552:	61bb      	str	r3, [r7, #24]
  403554:	69bb      	ldr	r3, [r7, #24]
  403556:	2b00      	cmp	r3, #0
  403558:	d1ee      	bne.n	403538 <udd_ep_write_fifo+0x120>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  40355a:	693b      	ldr	r3, [r7, #16]
  40355c:	7c5b      	ldrb	r3, [r3, #17]
  40355e:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403562:	b2db      	uxtb	r3, r3
  403564:	3301      	adds	r3, #1
  403566:	f003 0303 	and.w	r3, r3, #3
  40356a:	b2d9      	uxtb	r1, r3
  40356c:	693a      	ldr	r2, [r7, #16]
  40356e:	7c53      	ldrb	r3, [r2, #17]
  403570:	f361 0383 	bfi	r3, r1, #2, #2
  403574:	7453      	strb	r3, [r2, #17]
	return is_short_pkt;
  403576:	7dfb      	ldrb	r3, [r7, #23]
}
  403578:	4618      	mov	r0, r3
  40357a:	3724      	adds	r7, #36	; 0x24
  40357c:	46bd      	mov	sp, r7
  40357e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403582:	4770      	bx	lr
  403584:	20000c6c 	.word	0x20000c6c
  403588:	40034000 	.word	0x40034000

0040358c <udd_ep_in_sent>:


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  40358c:	b580      	push	{r7, lr}
  40358e:	b086      	sub	sp, #24
  403590:	af00      	add	r7, sp, #0
  403592:	4602      	mov	r2, r0
  403594:	460b      	mov	r3, r1
  403596:	71fa      	strb	r2, [r7, #7]
  403598:	71bb      	strb	r3, [r7, #6]
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40359a:	79fb      	ldrb	r3, [r7, #7]
  40359c:	1e5a      	subs	r2, r3, #1
  40359e:	4613      	mov	r3, r2
  4035a0:	009b      	lsls	r3, r3, #2
  4035a2:	4413      	add	r3, r2
  4035a4:	009b      	lsls	r3, r3, #2
  4035a6:	4a36      	ldr	r2, [pc, #216]	; (403680 <udd_ep_in_sent+0xf4>)
  4035a8:	4413      	add	r3, r2
  4035aa:	617b      	str	r3, [r7, #20]

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4035ac:	697b      	ldr	r3, [r7, #20]
  4035ae:	7c5b      	ldrb	r3, [r3, #17]
  4035b0:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4035b4:	b2db      	uxtb	r3, r3
  4035b6:	461a      	mov	r2, r3
  4035b8:	79fb      	ldrb	r3, [r7, #7]
  4035ba:	2b00      	cmp	r3, #0
  4035bc:	d002      	beq.n	4035c4 <udd_ep_in_sent+0x38>
  4035be:	79fb      	ldrb	r3, [r7, #7]
  4035c0:	2b03      	cmp	r3, #3
  4035c2:	d101      	bne.n	4035c8 <udd_ep_in_sent+0x3c>
  4035c4:	2301      	movs	r3, #1
  4035c6:	e000      	b.n	4035ca <udd_ep_in_sent+0x3e>
  4035c8:	2302      	movs	r3, #2
  4035ca:	429a      	cmp	r2, r3
  4035cc:	db01      	blt.n	4035d2 <udd_ep_in_sent+0x46>
		return true; // Data pending
  4035ce:	2301      	movs	r3, #1
  4035d0:	e052      	b.n	403678 <udd_ep_in_sent+0xec>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  4035d2:	697b      	ldr	r3, [r7, #20]
  4035d4:	68da      	ldr	r2, [r3, #12]
  4035d6:	697b      	ldr	r3, [r7, #20]
  4035d8:	689b      	ldr	r3, [r3, #8]
  4035da:	429a      	cmp	r2, r3
  4035dc:	d308      	bcc.n	4035f0 <udd_ep_in_sent+0x64>
  4035de:	697b      	ldr	r3, [r7, #20]
  4035e0:	7c5b      	ldrb	r3, [r3, #17]
  4035e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
  4035e6:	b2db      	uxtb	r3, r3
  4035e8:	2b00      	cmp	r3, #0
  4035ea:	d101      	bne.n	4035f0 <udd_ep_in_sent+0x64>
		return false;
  4035ec:	2300      	movs	r3, #0
  4035ee:	e043      	b.n	403678 <udd_ep_in_sent+0xec>
	}

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);
  4035f0:	79fb      	ldrb	r3, [r7, #7]
  4035f2:	4618      	mov	r0, r3
  4035f4:	4b23      	ldr	r3, [pc, #140]	; (403684 <udd_ep_in_sent+0xf8>)
  4035f6:	4798      	blx	r3
  4035f8:	4603      	mov	r3, r0
  4035fa:	74fb      	strb	r3, [r7, #19]

	// Data is ready to send
	if (b_tx) {
  4035fc:	79bb      	ldrb	r3, [r7, #6]
  4035fe:	2b00      	cmp	r3, #0
  403600:	d01d      	beq.n	40363e <udd_ep_in_sent+0xb2>
		udd_set_transmit_ready(ep);
  403602:	4b21      	ldr	r3, [pc, #132]	; (403688 <udd_ep_in_sent+0xfc>)
  403604:	79fa      	ldrb	r2, [r7, #7]
  403606:	320c      	adds	r2, #12
  403608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40360c:	60fb      	str	r3, [r7, #12]
  40360e:	68fb      	ldr	r3, [r7, #12]
  403610:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403614:	60fb      	str	r3, [r7, #12]
  403616:	68fb      	ldr	r3, [r7, #12]
  403618:	f043 0310 	orr.w	r3, r3, #16
  40361c:	60fb      	str	r3, [r7, #12]
  40361e:	4b1a      	ldr	r3, [pc, #104]	; (403688 <udd_ep_in_sent+0xfc>)
  403620:	79fa      	ldrb	r2, [r7, #7]
  403622:	68f9      	ldr	r1, [r7, #12]
  403624:	320c      	adds	r2, #12
  403626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40362a:	2300      	movs	r3, #0
  40362c:	60bb      	str	r3, [r7, #8]
  40362e:	e003      	b.n	403638 <udd_ep_in_sent+0xac>
  403630:	bf00      	nop
  403632:	68bb      	ldr	r3, [r7, #8]
  403634:	3301      	adds	r3, #1
  403636:	60bb      	str	r3, [r7, #8]
  403638:	68bb      	ldr	r3, [r7, #8]
  40363a:	2b13      	cmp	r3, #19
  40363c:	d9f8      	bls.n	403630 <udd_ep_in_sent+0xa4>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  40363e:	7cfb      	ldrb	r3, [r7, #19]
  403640:	2b00      	cmp	r3, #0
  403642:	d004      	beq.n	40364e <udd_ep_in_sent+0xc2>
		ptr_job->b_shortpacket = false;
  403644:	697a      	ldr	r2, [r7, #20]
  403646:	7c53      	ldrb	r3, [r2, #17]
  403648:	f36f 1386 	bfc	r3, #6, #1
  40364c:	7453      	strb	r3, [r2, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  40364e:	697b      	ldr	r3, [r7, #20]
  403650:	68da      	ldr	r2, [r3, #12]
  403652:	697b      	ldr	r3, [r7, #20]
  403654:	689b      	ldr	r3, [r3, #8]
  403656:	429a      	cmp	r2, r3
  403658:	d30d      	bcc.n	403676 <udd_ep_in_sent+0xea>
			&& (!ptr_job->b_shortpacket)) {
  40365a:	697b      	ldr	r3, [r7, #20]
  40365c:	7c5b      	ldrb	r3, [r3, #17]
  40365e:	f3c3 1380 	ubfx	r3, r3, #6, #1
  403662:	b2db      	uxtb	r3, r3
  403664:	2b00      	cmp	r3, #0
  403666:	d106      	bne.n	403676 <udd_ep_in_sent+0xea>
		ptr_job->b_buf_end = true;
  403668:	697a      	ldr	r2, [r7, #20]
  40366a:	7c53      	ldrb	r3, [r2, #17]
  40366c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403670:	7453      	strb	r3, [r2, #17]
		return false;
  403672:	2300      	movs	r3, #0
  403674:	e000      	b.n	403678 <udd_ep_in_sent+0xec>
	}
	return true; // Pending
  403676:	2301      	movs	r3, #1
}
  403678:	4618      	mov	r0, r3
  40367a:	3718      	adds	r7, #24
  40367c:	46bd      	mov	sp, r7
  40367e:	bd80      	pop	{r7, pc}
  403680:	20000c6c 	.word	0x20000c6c
  403684:	00403419 	.word	0x00403419
  403688:	40034000 	.word	0x40034000

0040368c <udd_ep_out_received>:


static void udd_ep_out_received(udd_ep_id_t ep)
{
  40368c:	b580      	push	{r7, lr}
  40368e:	b08a      	sub	sp, #40	; 0x28
  403690:	af00      	add	r7, sp, #0
  403692:	4603      	mov	r3, r0
  403694:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  403696:	79fb      	ldrb	r3, [r7, #7]
  403698:	1e5a      	subs	r2, r3, #1
  40369a:	4613      	mov	r3, r2
  40369c:	009b      	lsls	r3, r3, #2
  40369e:	4413      	add	r3, r2
  4036a0:	009b      	lsls	r3, r3, #2
  4036a2:	4a3a      	ldr	r2, [pc, #232]	; (40378c <udd_ep_out_received+0x100>)
  4036a4:	4413      	add	r3, r2
  4036a6:	617b      	str	r3, [r7, #20]
	uint32_t nb_data = 0, i;
  4036a8:	2300      	movs	r3, #0
  4036aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4036ac:	697b      	ldr	r3, [r7, #20]
  4036ae:	689a      	ldr	r2, [r3, #8]
  4036b0:	697b      	ldr	r3, [r7, #20]
  4036b2:	68db      	ldr	r3, [r3, #12]
  4036b4:	1ad3      	subs	r3, r2, r3
  4036b6:	613b      	str	r3, [r7, #16]
	uint32_t pkt_size = ptr_job->size;
  4036b8:	697b      	ldr	r3, [r7, #20]
  4036ba:	8a1b      	ldrh	r3, [r3, #16]
  4036bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4036c0:	b29b      	uxth	r3, r3
  4036c2:	60fb      	str	r3, [r7, #12]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4036c4:	697b      	ldr	r3, [r7, #20]
  4036c6:	685a      	ldr	r2, [r3, #4]
  4036c8:	697b      	ldr	r3, [r7, #20]
  4036ca:	68db      	ldr	r3, [r3, #12]
  4036cc:	4413      	add	r3, r2
  4036ce:	61fb      	str	r3, [r7, #28]
	bool b_full = false, b_short;
  4036d0:	2300      	movs	r3, #0
  4036d2:	76fb      	strb	r3, [r7, #27]

	// Read byte count
	nb_data = udd_byte_count(ep);
  4036d4:	4b2e      	ldr	r3, [pc, #184]	; (403790 <udd_ep_out_received+0x104>)
  4036d6:	79fa      	ldrb	r2, [r7, #7]
  4036d8:	320c      	adds	r2, #12
  4036da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4036de:	4b2d      	ldr	r3, [pc, #180]	; (403794 <udd_ep_out_received+0x108>)
  4036e0:	4013      	ands	r3, r2
  4036e2:	0c1b      	lsrs	r3, r3, #16
  4036e4:	627b      	str	r3, [r7, #36]	; 0x24
	b_short = (nb_data < pkt_size);
  4036e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4036e8:	68fb      	ldr	r3, [r7, #12]
  4036ea:	429a      	cmp	r2, r3
  4036ec:	bf2c      	ite	cs
  4036ee:	2300      	movcs	r3, #0
  4036f0:	2301      	movcc	r3, #1
  4036f2:	72fb      	strb	r3, [r7, #11]

	// Copy data if there is
	if (nb_data > 0) {
  4036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4036f6:	2b00      	cmp	r3, #0
  4036f8:	d021      	beq.n	40373e <udd_ep_out_received+0xb2>
		if (nb_data >= nb_remain) {
  4036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4036fc:	693b      	ldr	r3, [r7, #16]
  4036fe:	429a      	cmp	r2, r3
  403700:	d303      	bcc.n	40370a <udd_ep_out_received+0x7e>
			nb_data = nb_remain;
  403702:	693b      	ldr	r3, [r7, #16]
  403704:	627b      	str	r3, [r7, #36]	; 0x24
			b_full = true;
  403706:	2301      	movs	r3, #1
  403708:	76fb      	strb	r3, [r7, #27]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  40370a:	697b      	ldr	r3, [r7, #20]
  40370c:	68da      	ldr	r2, [r3, #12]
  40370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403710:	441a      	add	r2, r3
  403712:	697b      	ldr	r3, [r7, #20]
  403714:	60da      	str	r2, [r3, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  403716:	2300      	movs	r3, #0
  403718:	623b      	str	r3, [r7, #32]
  40371a:	e00c      	b.n	403736 <udd_ep_out_received+0xaa>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  40371c:	69fb      	ldr	r3, [r7, #28]
  40371e:	1c5a      	adds	r2, r3, #1
  403720:	61fa      	str	r2, [r7, #28]
  403722:	4a1b      	ldr	r2, [pc, #108]	; (403790 <udd_ep_out_received+0x104>)
  403724:	79f9      	ldrb	r1, [r7, #7]
  403726:	3114      	adds	r1, #20
  403728:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40372c:	b2d2      	uxtb	r2, r2
  40372e:	701a      	strb	r2, [r3, #0]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  403730:	6a3b      	ldr	r3, [r7, #32]
  403732:	3301      	adds	r3, #1
  403734:	623b      	str	r3, [r7, #32]
  403736:	6a3a      	ldr	r2, [r7, #32]
  403738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40373a:	429a      	cmp	r2, r3
  40373c:	d3ee      	bcc.n	40371c <udd_ep_out_received+0x90>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  40373e:	79fb      	ldrb	r3, [r7, #7]
  403740:	4618      	mov	r0, r3
  403742:	4b15      	ldr	r3, [pc, #84]	; (403798 <udd_ep_out_received+0x10c>)
  403744:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  403746:	7efb      	ldrb	r3, [r7, #27]
  403748:	2b00      	cmp	r3, #0
  40374a:	d102      	bne.n	403752 <udd_ep_out_received+0xc6>
  40374c:	7afb      	ldrb	r3, [r7, #11]
  40374e:	2b00      	cmp	r3, #0
  403750:	d018      	beq.n	403784 <udd_ep_out_received+0xf8>
			!Is_udd_endpoint_stall_requested(ep)) {
  403752:	4b0f      	ldr	r3, [pc, #60]	; (403790 <udd_ep_out_received+0x104>)
  403754:	79fa      	ldrb	r2, [r7, #7]
  403756:	320c      	adds	r2, #12
  403758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40375c:	f003 0320 	and.w	r3, r3, #32
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  403760:	2b00      	cmp	r3, #0
  403762:	d10f      	bne.n	403784 <udd_ep_out_received+0xf8>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  403764:	4b0a      	ldr	r3, [pc, #40]	; (403790 <udd_ep_out_received+0x104>)
  403766:	79fa      	ldrb	r2, [r7, #7]
  403768:	2101      	movs	r1, #1
  40376a:	fa01 f202 	lsl.w	r2, r1, r2
  40376e:	615a      	str	r2, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403770:	697b      	ldr	r3, [r7, #20]
  403772:	68da      	ldr	r2, [r3, #12]
  403774:	697b      	ldr	r3, [r7, #20]
  403776:	609a      	str	r2, [r3, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403778:	79fb      	ldrb	r3, [r7, #7]
  40377a:	6978      	ldr	r0, [r7, #20]
  40377c:	2100      	movs	r1, #0
  40377e:	461a      	mov	r2, r3
  403780:	4b06      	ldr	r3, [pc, #24]	; (40379c <udd_ep_out_received+0x110>)
  403782:	4798      	blx	r3
	}
}
  403784:	3728      	adds	r7, #40	; 0x28
  403786:	46bd      	mov	sp, r7
  403788:	bd80      	pop	{r7, pc}
  40378a:	bf00      	nop
  40378c:	20000c6c 	.word	0x20000c6c
  403790:	40034000 	.word	0x40034000
  403794:	07ff0000 	.word	0x07ff0000
  403798:	00403305 	.word	0x00403305
  40379c:	00403295 	.word	0x00403295

004037a0 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
  4037a0:	b580      	push	{r7, lr}
  4037a2:	b098      	sub	sp, #96	; 0x60
  4037a4:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4037a6:	2301      	movs	r3, #1
  4037a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  4037ac:	e247      	b.n	403c3e <udd_ep_interrupt+0x49e>
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4037ae:	4bac      	ldr	r3, [pc, #688]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4037b0:	699a      	ldr	r2, [r3, #24]
  4037b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4037b6:	2101      	movs	r1, #1
  4037b8:	fa01 f303 	lsl.w	r3, r1, r3
  4037bc:	4013      	ands	r3, r2
  4037be:	2b00      	cmp	r3, #0
  4037c0:	d100      	bne.n	4037c4 <udd_ep_interrupt+0x24>
			continue;
  4037c2:	e237      	b.n	403c34 <udd_ep_interrupt+0x494>
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  4037c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4037c8:	1e5a      	subs	r2, r3, #1
  4037ca:	4613      	mov	r3, r2
  4037cc:	009b      	lsls	r3, r3, #2
  4037ce:	4413      	add	r3, r2
  4037d0:	009b      	lsls	r3, r3, #2
  4037d2:	4aa4      	ldr	r2, [pc, #656]	; (403a64 <udd_ep_interrupt+0x2c4>)
  4037d4:	4413      	add	r3, r2
  4037d6:	65bb      	str	r3, [r7, #88]	; 0x58

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  4037d8:	4ba1      	ldr	r3, [pc, #644]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4037da:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4037de:	320c      	adds	r2, #12
  4037e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4037e4:	f003 0342 	and.w	r3, r3, #66	; 0x42
  4037e8:	2b00      	cmp	r3, #0
  4037ea:	d006      	beq.n	4037fa <udd_ep_interrupt+0x5a>
			udd_ep_out_received(ep);
  4037ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  4037f0:	4618      	mov	r0, r3
  4037f2:	4b9d      	ldr	r3, [pc, #628]	; (403a68 <udd_ep_interrupt+0x2c8>)
  4037f4:	4798      	blx	r3
			return true;
  4037f6:	2301      	movs	r3, #1
  4037f8:	e227      	b.n	403c4a <udd_ep_interrupt+0x4aa>
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  4037fa:	4b99      	ldr	r3, [pc, #612]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4037fc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403800:	320c      	adds	r2, #12
  403802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403806:	f003 0301 	and.w	r3, r3, #1
  40380a:	2b00      	cmp	r3, #0
  40380c:	f000 81d5 	beq.w	403bba <udd_ep_interrupt+0x41a>

			ptr_job->bank--;
  403810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403812:	7c5b      	ldrb	r3, [r3, #17]
  403814:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403818:	b2db      	uxtb	r3, r3
  40381a:	3303      	adds	r3, #3
  40381c:	f003 0303 	and.w	r3, r3, #3
  403820:	b2d9      	uxtb	r1, r3
  403822:	6dba      	ldr	r2, [r7, #88]	; 0x58
  403824:	7c53      	ldrb	r3, [r2, #17]
  403826:	f361 0383 	bfi	r3, r1, #2, #2
  40382a:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  40382c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40382e:	7c5b      	ldrb	r3, [r3, #17]
  403830:	f3c3 1340 	ubfx	r3, r3, #5, #1
  403834:	b2db      	uxtb	r3, r3
  403836:	2b00      	cmp	r3, #0
  403838:	f000 808f 	beq.w	40395a <udd_ep_interrupt+0x1ba>
				if (ptr_job->bank) {
  40383c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40383e:	7c5b      	ldrb	r3, [r3, #17]
  403840:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403844:	b2db      	uxtb	r3, r3
  403846:	2b00      	cmp	r3, #0
  403848:	d040      	beq.n	4038cc <udd_ep_interrupt+0x12c>
					// Send remaining
					udd_set_transmit_ready(ep);
  40384a:	4b85      	ldr	r3, [pc, #532]	; (403a60 <udd_ep_interrupt+0x2c0>)
  40384c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403850:	320c      	adds	r2, #12
  403852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403856:	653b      	str	r3, [r7, #80]	; 0x50
  403858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40385a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40385e:	653b      	str	r3, [r7, #80]	; 0x50
  403860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  403862:	f043 0310 	orr.w	r3, r3, #16
  403866:	653b      	str	r3, [r7, #80]	; 0x50
  403868:	4b7d      	ldr	r3, [pc, #500]	; (403a60 <udd_ep_interrupt+0x2c0>)
  40386a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  40386e:	6d39      	ldr	r1, [r7, #80]	; 0x50
  403870:	320c      	adds	r2, #12
  403872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403876:	2300      	movs	r3, #0
  403878:	64fb      	str	r3, [r7, #76]	; 0x4c
  40387a:	e003      	b.n	403884 <udd_ep_interrupt+0xe4>
  40387c:	bf00      	nop
  40387e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  403880:	3301      	adds	r3, #1
  403882:	64fb      	str	r3, [r7, #76]	; 0x4c
  403884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  403886:	2b13      	cmp	r3, #19
  403888:	d9f8      	bls.n	40387c <udd_ep_interrupt+0xdc>
					udd_ack_in_sent(ep);
  40388a:	4b75      	ldr	r3, [pc, #468]	; (403a60 <udd_ep_interrupt+0x2c0>)
  40388c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403890:	320c      	adds	r2, #12
  403892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403896:	64bb      	str	r3, [r7, #72]	; 0x48
  403898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40389a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40389e:	64bb      	str	r3, [r7, #72]	; 0x48
  4038a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4038a2:	f023 0301 	bic.w	r3, r3, #1
  4038a6:	64bb      	str	r3, [r7, #72]	; 0x48
  4038a8:	4b6d      	ldr	r3, [pc, #436]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4038aa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4038ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
  4038b0:	320c      	adds	r2, #12
  4038b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4038b6:	2300      	movs	r3, #0
  4038b8:	647b      	str	r3, [r7, #68]	; 0x44
  4038ba:	e003      	b.n	4038c4 <udd_ep_interrupt+0x124>
  4038bc:	bf00      	nop
  4038be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4038c0:	3301      	adds	r3, #1
  4038c2:	647b      	str	r3, [r7, #68]	; 0x44
  4038c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4038c6:	2b13      	cmp	r3, #19
  4038c8:	d9f8      	bls.n	4038bc <udd_ep_interrupt+0x11c>
  4038ca:	e044      	b.n	403956 <udd_ep_interrupt+0x1b6>
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  4038cc:	4b64      	ldr	r3, [pc, #400]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4038ce:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4038d2:	320c      	adds	r2, #12
  4038d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4038d8:	643b      	str	r3, [r7, #64]	; 0x40
  4038da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  4038dc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4038e0:	643b      	str	r3, [r7, #64]	; 0x40
  4038e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  4038e4:	f023 0301 	bic.w	r3, r3, #1
  4038e8:	643b      	str	r3, [r7, #64]	; 0x40
  4038ea:	4b5d      	ldr	r3, [pc, #372]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4038ec:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4038f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
  4038f2:	320c      	adds	r2, #12
  4038f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4038f8:	2300      	movs	r3, #0
  4038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  4038fc:	e003      	b.n	403906 <udd_ep_interrupt+0x166>
  4038fe:	bf00      	nop
  403900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403902:	3301      	adds	r3, #1
  403904:	63fb      	str	r3, [r7, #60]	; 0x3c
  403906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403908:	2b13      	cmp	r3, #19
  40390a:	d9f8      	bls.n	4038fe <udd_ep_interrupt+0x15e>
					// Enable stall
					udd_enable_stall_handshake(ep);
  40390c:	4b54      	ldr	r3, [pc, #336]	; (403a60 <udd_ep_interrupt+0x2c0>)
  40390e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403912:	320c      	adds	r2, #12
  403914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403918:	63bb      	str	r3, [r7, #56]	; 0x38
  40391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40391c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403920:	63bb      	str	r3, [r7, #56]	; 0x38
  403922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403924:	f043 0320 	orr.w	r3, r3, #32
  403928:	63bb      	str	r3, [r7, #56]	; 0x38
  40392a:	4b4d      	ldr	r3, [pc, #308]	; (403a60 <udd_ep_interrupt+0x2c0>)
  40392c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  403932:	320c      	adds	r2, #12
  403934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403938:	2300      	movs	r3, #0
  40393a:	637b      	str	r3, [r7, #52]	; 0x34
  40393c:	e003      	b.n	403946 <udd_ep_interrupt+0x1a6>
  40393e:	bf00      	nop
  403940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403942:	3301      	adds	r3, #1
  403944:	637b      	str	r3, [r7, #52]	; 0x34
  403946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403948:	2b13      	cmp	r3, #19
  40394a:	d9f8      	bls.n	40393e <udd_ep_interrupt+0x19e>
					// Halt executed
					ptr_job->b_stall_requested = false;
  40394c:	6dba      	ldr	r2, [r7, #88]	; 0x58
  40394e:	7c53      	ldrb	r3, [r2, #17]
  403950:	f36f 1345 	bfc	r3, #5, #1
  403954:	7453      	strb	r3, [r2, #17]
				}
				return true;
  403956:	2301      	movs	r3, #1
  403958:	e177      	b.n	403c4a <udd_ep_interrupt+0x4aa>
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  40395a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40395c:	7c5b      	ldrb	r3, [r3, #17]
  40395e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  403962:	b2db      	uxtb	r3, r3
  403964:	2b00      	cmp	r3, #0
  403966:	d00f      	beq.n	403988 <udd_ep_interrupt+0x1e8>
				ptr_job->b_buf_end = false;
  403968:	6dba      	ldr	r2, [r7, #88]	; 0x58
  40396a:	7c53      	ldrb	r3, [r2, #17]
  40396c:	f36f 13c7 	bfc	r3, #7, #1
  403970:	7453      	strb	r3, [r2, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403974:	68da      	ldr	r2, [r3, #12]
  403976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403978:	609a      	str	r2, [r3, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  40397a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  40397e:	6db8      	ldr	r0, [r7, #88]	; 0x58
  403980:	2100      	movs	r1, #0
  403982:	461a      	mov	r2, r3
  403984:	4b39      	ldr	r3, [pc, #228]	; (403a6c <udd_ep_interrupt+0x2cc>)
  403986:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  403988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40398a:	68da      	ldr	r2, [r3, #12]
  40398c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40398e:	689b      	ldr	r3, [r3, #8]
  403990:	429a      	cmp	r2, r3
  403992:	d33c      	bcc.n	403a0e <udd_ep_interrupt+0x26e>
					!ptr_job->b_shortpacket &&
  403994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403996:	7c5b      	ldrb	r3, [r3, #17]
  403998:	f3c3 1380 	ubfx	r3, r3, #6, #1
  40399c:	b2db      	uxtb	r3, r3
			if (ptr_job->b_buf_end) {
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  40399e:	2b00      	cmp	r3, #0
  4039a0:	d135      	bne.n	403a0e <udd_ep_interrupt+0x26e>
					!ptr_job->b_shortpacket &&
					ptr_job->bank == 0) {
  4039a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  4039a4:	7c5b      	ldrb	r3, [r3, #17]
  4039a6:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4039aa:	b2db      	uxtb	r3, r3
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
					!ptr_job->b_shortpacket &&
  4039ac:	2b00      	cmp	r3, #0
  4039ae:	d12e      	bne.n	403a0e <udd_ep_interrupt+0x26e>
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
  4039b0:	4b2f      	ldr	r3, [pc, #188]	; (403a70 <udd_ep_interrupt+0x2d0>)
  4039b2:	4798      	blx	r3
  4039b4:	6578      	str	r0, [r7, #84]	; 0x54
				udd_disable_endpoint_interrupt(ep);
  4039b6:	4b2a      	ldr	r3, [pc, #168]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4039b8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4039bc:	2101      	movs	r1, #1
  4039be:	fa01 f202 	lsl.w	r2, r1, r2
  4039c2:	615a      	str	r2, [r3, #20]
				cpu_irq_restore(flags);
  4039c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
  4039c6:	4b2b      	ldr	r3, [pc, #172]	; (403a74 <udd_ep_interrupt+0x2d4>)
  4039c8:	4798      	blx	r3
				// Ack last packet
				udd_ack_in_sent(ep);
  4039ca:	4b25      	ldr	r3, [pc, #148]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4039cc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4039d0:	320c      	adds	r2, #12
  4039d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4039d6:	633b      	str	r3, [r7, #48]	; 0x30
  4039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4039da:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4039de:	633b      	str	r3, [r7, #48]	; 0x30
  4039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4039e2:	f023 0301 	bic.w	r3, r3, #1
  4039e6:	633b      	str	r3, [r7, #48]	; 0x30
  4039e8:	4b1d      	ldr	r3, [pc, #116]	; (403a60 <udd_ep_interrupt+0x2c0>)
  4039ea:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  4039ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
  4039f0:	320c      	adds	r2, #12
  4039f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4039f6:	2300      	movs	r3, #0
  4039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4039fa:	e003      	b.n	403a04 <udd_ep_interrupt+0x264>
  4039fc:	bf00      	nop
  4039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403a00:	3301      	adds	r3, #1
  403a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  403a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403a06:	2b13      	cmp	r3, #19
  403a08:	d9f8      	bls.n	4039fc <udd_ep_interrupt+0x25c>
				return true;
  403a0a:	2301      	movs	r3, #1
  403a0c:	e11d      	b.n	403c4a <udd_ep_interrupt+0x4aa>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  403a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403a12:	2b00      	cmp	r3, #0
  403a14:	d05e      	beq.n	403ad4 <udd_ep_interrupt+0x334>
  403a16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403a1a:	2b03      	cmp	r3, #3
  403a1c:	d05a      	beq.n	403ad4 <udd_ep_interrupt+0x334>
					&& ptr_job->bank > 0) {
  403a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403a20:	7c5b      	ldrb	r3, [r3, #17]
  403a22:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403a26:	b2db      	uxtb	r3, r3
  403a28:	2b00      	cmp	r3, #0
  403a2a:	dd53      	ble.n	403ad4 <udd_ep_interrupt+0x334>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  403a2c:	4b0c      	ldr	r3, [pc, #48]	; (403a60 <udd_ep_interrupt+0x2c0>)
  403a2e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403a32:	320c      	adds	r2, #12
  403a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403a38:	62bb      	str	r3, [r7, #40]	; 0x28
  403a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403a3c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403a40:	62bb      	str	r3, [r7, #40]	; 0x28
  403a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403a44:	f043 0310 	orr.w	r3, r3, #16
  403a48:	62bb      	str	r3, [r7, #40]	; 0x28
  403a4a:	4b05      	ldr	r3, [pc, #20]	; (403a60 <udd_ep_interrupt+0x2c0>)
  403a4c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  403a52:	320c      	adds	r2, #12
  403a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403a58:	2300      	movs	r3, #0
  403a5a:	627b      	str	r3, [r7, #36]	; 0x24
  403a5c:	e010      	b.n	403a80 <udd_ep_interrupt+0x2e0>
  403a5e:	bf00      	nop
  403a60:	40034000 	.word	0x40034000
  403a64:	20000c6c 	.word	0x20000c6c
  403a68:	0040368d 	.word	0x0040368d
  403a6c:	00403295 	.word	0x00403295
  403a70:	00401c2d 	.word	0x00401c2d
  403a74:	00401c85 	.word	0x00401c85
  403a78:	bf00      	nop
  403a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403a7c:	3301      	adds	r3, #1
  403a7e:	627b      	str	r3, [r7, #36]	; 0x24
  403a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403a82:	2b13      	cmp	r3, #19
  403a84:	d9f8      	bls.n	403a78 <udd_ep_interrupt+0x2d8>
				udd_ack_in_sent(ep);
  403a86:	4b73      	ldr	r3, [pc, #460]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403a88:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403a8c:	320c      	adds	r2, #12
  403a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403a92:	623b      	str	r3, [r7, #32]
  403a94:	6a3b      	ldr	r3, [r7, #32]
  403a96:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403a9a:	623b      	str	r3, [r7, #32]
  403a9c:	6a3b      	ldr	r3, [r7, #32]
  403a9e:	f023 0301 	bic.w	r3, r3, #1
  403aa2:	623b      	str	r3, [r7, #32]
  403aa4:	4b6b      	ldr	r3, [pc, #428]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403aa6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403aaa:	6a39      	ldr	r1, [r7, #32]
  403aac:	320c      	adds	r2, #12
  403aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403ab2:	2300      	movs	r3, #0
  403ab4:	61fb      	str	r3, [r7, #28]
  403ab6:	e003      	b.n	403ac0 <udd_ep_interrupt+0x320>
  403ab8:	bf00      	nop
  403aba:	69fb      	ldr	r3, [r7, #28]
  403abc:	3301      	adds	r3, #1
  403abe:	61fb      	str	r3, [r7, #28]
  403ac0:	69fb      	ldr	r3, [r7, #28]
  403ac2:	2b13      	cmp	r3, #19
  403ac4:	d9f8      	bls.n	403ab8 <udd_ep_interrupt+0x318>
				udd_ep_in_sent(ep, false);
  403ac6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403aca:	4618      	mov	r0, r3
  403acc:	2100      	movs	r1, #0
  403ace:	4b62      	ldr	r3, [pc, #392]	; (403c58 <udd_ep_interrupt+0x4b8>)
  403ad0:	4798      	blx	r3
  403ad2:	e070      	b.n	403bb6 <udd_ep_interrupt+0x416>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  403ad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403ad8:	2b00      	cmp	r3, #0
  403ada:	d046      	beq.n	403b6a <udd_ep_interrupt+0x3ca>
  403adc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403ae0:	2b03      	cmp	r3, #3
  403ae2:	d042      	beq.n	403b6a <udd_ep_interrupt+0x3ca>
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  403ae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403ae8:	4618      	mov	r0, r3
  403aea:	2101      	movs	r1, #1
  403aec:	4b5a      	ldr	r3, [pc, #360]	; (403c58 <udd_ep_interrupt+0x4b8>)
  403aee:	4798      	blx	r3
  403af0:	4603      	mov	r3, r0
  403af2:	f083 0301 	eor.w	r3, r3, #1
  403af6:	b2db      	uxtb	r3, r3
  403af8:	2b00      	cmp	r3, #0
  403afa:	d00f      	beq.n	403b1c <udd_ep_interrupt+0x37c>
					ptr_job->b_buf_end = false;
  403afc:	6dba      	ldr	r2, [r7, #88]	; 0x58
  403afe:	7c53      	ldrb	r3, [r2, #17]
  403b00:	f36f 13c7 	bfc	r3, #7, #1
  403b04:	7453      	strb	r3, [r2, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403b08:	68da      	ldr	r2, [r3, #12]
  403b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403b0c:	609a      	str	r2, [r3, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403b0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403b12:	6db8      	ldr	r0, [r7, #88]	; 0x58
  403b14:	2100      	movs	r1, #0
  403b16:	461a      	mov	r2, r3
  403b18:	4b50      	ldr	r3, [pc, #320]	; (403c5c <udd_ep_interrupt+0x4bc>)
  403b1a:	4798      	blx	r3
				}
				udd_ack_in_sent(ep);
  403b1c:	4b4d      	ldr	r3, [pc, #308]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403b1e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b22:	320c      	adds	r2, #12
  403b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403b28:	61bb      	str	r3, [r7, #24]
  403b2a:	69bb      	ldr	r3, [r7, #24]
  403b2c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403b30:	61bb      	str	r3, [r7, #24]
  403b32:	69bb      	ldr	r3, [r7, #24]
  403b34:	f023 0301 	bic.w	r3, r3, #1
  403b38:	61bb      	str	r3, [r7, #24]
  403b3a:	4b46      	ldr	r3, [pc, #280]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403b3c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b40:	69b9      	ldr	r1, [r7, #24]
  403b42:	320c      	adds	r2, #12
  403b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403b48:	2300      	movs	r3, #0
  403b4a:	617b      	str	r3, [r7, #20]
  403b4c:	e003      	b.n	403b56 <udd_ep_interrupt+0x3b6>
  403b4e:	bf00      	nop
  403b50:	697b      	ldr	r3, [r7, #20]
  403b52:	3301      	adds	r3, #1
  403b54:	617b      	str	r3, [r7, #20]
  403b56:	697b      	ldr	r3, [r7, #20]
  403b58:	2b13      	cmp	r3, #19
  403b5a:	d9f8      	bls.n	403b4e <udd_ep_interrupt+0x3ae>
				udd_ep_in_sent(ep, false);
  403b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403b60:	4618      	mov	r0, r3
  403b62:	2100      	movs	r1, #0
  403b64:	4b3c      	ldr	r3, [pc, #240]	; (403c58 <udd_ep_interrupt+0x4b8>)
  403b66:	4798      	blx	r3
  403b68:	e025      	b.n	403bb6 <udd_ep_interrupt+0x416>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  403b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403b6e:	4618      	mov	r0, r3
  403b70:	2101      	movs	r1, #1
  403b72:	4b39      	ldr	r3, [pc, #228]	; (403c58 <udd_ep_interrupt+0x4b8>)
  403b74:	4798      	blx	r3
				udd_ack_in_sent(ep);
  403b76:	4b37      	ldr	r3, [pc, #220]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403b78:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b7c:	320c      	adds	r2, #12
  403b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403b82:	613b      	str	r3, [r7, #16]
  403b84:	693b      	ldr	r3, [r7, #16]
  403b86:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403b8a:	613b      	str	r3, [r7, #16]
  403b8c:	693b      	ldr	r3, [r7, #16]
  403b8e:	f023 0301 	bic.w	r3, r3, #1
  403b92:	613b      	str	r3, [r7, #16]
  403b94:	4b2f      	ldr	r3, [pc, #188]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403b96:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403b9a:	6939      	ldr	r1, [r7, #16]
  403b9c:	320c      	adds	r2, #12
  403b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403ba2:	2300      	movs	r3, #0
  403ba4:	60fb      	str	r3, [r7, #12]
  403ba6:	e003      	b.n	403bb0 <udd_ep_interrupt+0x410>
  403ba8:	bf00      	nop
  403baa:	68fb      	ldr	r3, [r7, #12]
  403bac:	3301      	adds	r3, #1
  403bae:	60fb      	str	r3, [r7, #12]
  403bb0:	68fb      	ldr	r3, [r7, #12]
  403bb2:	2b13      	cmp	r3, #19
  403bb4:	d9f8      	bls.n	403ba8 <udd_ep_interrupt+0x408>
			}
			return true;
  403bb6:	2301      	movs	r3, #1
  403bb8:	e047      	b.n	403c4a <udd_ep_interrupt+0x4aa>
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  403bba:	4b26      	ldr	r3, [pc, #152]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403bbc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403bc0:	320c      	adds	r2, #12
  403bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403bc6:	f003 0308 	and.w	r3, r3, #8
  403bca:	2b00      	cmp	r3, #0
  403bcc:	d032      	beq.n	403c34 <udd_ep_interrupt+0x494>
			udd_ack_stall(ep);
  403bce:	4b21      	ldr	r3, [pc, #132]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403bd0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403bd4:	320c      	adds	r2, #12
  403bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403bda:	60bb      	str	r3, [r7, #8]
  403bdc:	68bb      	ldr	r3, [r7, #8]
  403bde:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403be2:	60bb      	str	r3, [r7, #8]
  403be4:	68bb      	ldr	r3, [r7, #8]
  403be6:	f023 0308 	bic.w	r3, r3, #8
  403bea:	60bb      	str	r3, [r7, #8]
  403bec:	4b19      	ldr	r3, [pc, #100]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403bee:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403bf2:	68b9      	ldr	r1, [r7, #8]
  403bf4:	320c      	adds	r2, #12
  403bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403bfa:	2300      	movs	r3, #0
  403bfc:	607b      	str	r3, [r7, #4]
  403bfe:	e003      	b.n	403c08 <udd_ep_interrupt+0x468>
  403c00:	bf00      	nop
  403c02:	687b      	ldr	r3, [r7, #4]
  403c04:	3301      	adds	r3, #1
  403c06:	607b      	str	r3, [r7, #4]
  403c08:	687b      	ldr	r3, [r7, #4]
  403c0a:	2b13      	cmp	r3, #19
  403c0c:	d9f8      	bls.n	403c00 <udd_ep_interrupt+0x460>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  403c0e:	4b11      	ldr	r3, [pc, #68]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403c10:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403c14:	320c      	adds	r2, #12
  403c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403c1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  403c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  403c22:	d005      	beq.n	403c30 <udd_ep_interrupt+0x490>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  403c24:	4b0b      	ldr	r3, [pc, #44]	; (403c54 <udd_ep_interrupt+0x4b4>)
  403c26:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  403c2a:	320c      	adds	r2, #12
  403c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			}
			return true;
  403c30:	2301      	movs	r3, #1
  403c32:	e00a      	b.n	403c4a <udd_ep_interrupt+0x4aa>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  403c34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403c38:	3301      	adds	r3, #1
  403c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  403c3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  403c42:	2b03      	cmp	r3, #3
  403c44:	f67f adb3 	bls.w	4037ae <udd_ep_interrupt+0xe>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
			}
			return true;
		}
	}
	return false;
  403c48:	2300      	movs	r3, #0
}
  403c4a:	4618      	mov	r0, r3
  403c4c:	3760      	adds	r7, #96	; 0x60
  403c4e:	46bd      	mov	sp, r7
  403c50:	bd80      	pop	{r7, pc}
  403c52:	bf00      	nop
  403c54:	40034000 	.word	0x40034000
  403c58:	0040358d 	.word	0x0040358d
  403c5c:	00403295 	.word	0x00403295

00403c60 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  403c60:	b480      	push	{r7}
  403c62:	b083      	sub	sp, #12
  403c64:	af00      	add	r7, sp, #0
  403c66:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403c68:	687b      	ldr	r3, [r7, #4]
  403c6a:	2b07      	cmp	r3, #7
  403c6c:	d825      	bhi.n	403cba <osc_get_rate+0x5a>
  403c6e:	a201      	add	r2, pc, #4	; (adr r2, 403c74 <osc_get_rate+0x14>)
  403c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403c74:	00403c95 	.word	0x00403c95
  403c78:	00403c9b 	.word	0x00403c9b
  403c7c:	00403ca1 	.word	0x00403ca1
  403c80:	00403ca7 	.word	0x00403ca7
  403c84:	00403cab 	.word	0x00403cab
  403c88:	00403caf 	.word	0x00403caf
  403c8c:	00403cb3 	.word	0x00403cb3
  403c90:	00403cb7 	.word	0x00403cb7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  403c94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403c98:	e010      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  403c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403c9e:	e00d      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  403ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403ca4:	e00a      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  403ca6:	4b08      	ldr	r3, [pc, #32]	; (403cc8 <osc_get_rate+0x68>)
  403ca8:	e008      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  403caa:	4b08      	ldr	r3, [pc, #32]	; (403ccc <osc_get_rate+0x6c>)
  403cac:	e006      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  403cae:	4b08      	ldr	r3, [pc, #32]	; (403cd0 <osc_get_rate+0x70>)
  403cb0:	e004      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  403cb2:	4b07      	ldr	r3, [pc, #28]	; (403cd0 <osc_get_rate+0x70>)
  403cb4:	e002      	b.n	403cbc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  403cb6:	4b06      	ldr	r3, [pc, #24]	; (403cd0 <osc_get_rate+0x70>)
  403cb8:	e000      	b.n	403cbc <osc_get_rate+0x5c>
	}

	return 0;
  403cba:	2300      	movs	r3, #0
}
  403cbc:	4618      	mov	r0, r3
  403cbe:	370c      	adds	r7, #12
  403cc0:	46bd      	mov	sp, r7
  403cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cc6:	4770      	bx	lr
  403cc8:	003d0900 	.word	0x003d0900
  403ccc:	007a1200 	.word	0x007a1200
  403cd0:	00b71b00 	.word	0x00b71b00

00403cd4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  403cd4:	b580      	push	{r7, lr}
  403cd6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  403cd8:	2006      	movs	r0, #6
  403cda:	4b04      	ldr	r3, [pc, #16]	; (403cec <sysclk_get_main_hz+0x18>)
  403cdc:	4798      	blx	r3
  403cde:	4602      	mov	r2, r0
  403ce0:	4613      	mov	r3, r2
  403ce2:	009b      	lsls	r3, r3, #2
  403ce4:	4413      	add	r3, r2
  403ce6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  403ce8:	4618      	mov	r0, r3
  403cea:	bd80      	pop	{r7, pc}
  403cec:	00403c61 	.word	0x00403c61

00403cf0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  403cf0:	b580      	push	{r7, lr}
  403cf2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  403cf4:	4b02      	ldr	r3, [pc, #8]	; (403d00 <sysclk_get_peripheral_hz+0x10>)
  403cf6:	4798      	blx	r3
  403cf8:	4603      	mov	r3, r0
  403cfa:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  403cfc:	4618      	mov	r0, r3
  403cfe:	bd80      	pop	{r7, pc}
  403d00:	00403cd5 	.word	0x00403cd5

00403d04 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  403d04:	b580      	push	{r7, lr}
  403d06:	b082      	sub	sp, #8
  403d08:	af00      	add	r7, sp, #0
  403d0a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  403d0c:	6878      	ldr	r0, [r7, #4]
  403d0e:	4b02      	ldr	r3, [pc, #8]	; (403d18 <sysclk_enable_peripheral_clock+0x14>)
  403d10:	4798      	blx	r3
}
  403d12:	3708      	adds	r7, #8
  403d14:	46bd      	mov	sp, r7
  403d16:	bd80      	pop	{r7, pc}
  403d18:	00409665 	.word	0x00409665

00403d1c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  403d1c:	b580      	push	{r7, lr}
  403d1e:	b08c      	sub	sp, #48	; 0x30
  403d20:	af00      	add	r7, sp, #0
  403d22:	6078      	str	r0, [r7, #4]
  403d24:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  403d26:	4b31      	ldr	r3, [pc, #196]	; (403dec <usart_serial_init+0xd0>)
  403d28:	4798      	blx	r3
  403d2a:	4603      	mov	r3, r0
  403d2c:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  403d2e:	683b      	ldr	r3, [r7, #0]
  403d30:	681b      	ldr	r3, [r3, #0]
  403d32:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  403d34:	683b      	ldr	r3, [r7, #0]
  403d36:	689b      	ldr	r3, [r3, #8]
  403d38:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  403d3a:	683b      	ldr	r3, [r7, #0]
  403d3c:	681b      	ldr	r3, [r3, #0]
  403d3e:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  403d40:	683b      	ldr	r3, [r7, #0]
  403d42:	685b      	ldr	r3, [r3, #4]
  403d44:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  403d46:	683b      	ldr	r3, [r7, #0]
  403d48:	689b      	ldr	r3, [r3, #8]
  403d4a:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  403d4c:	683b      	ldr	r3, [r7, #0]
  403d4e:	7b1b      	ldrb	r3, [r3, #12]
  403d50:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403d52:	2300      	movs	r3, #0
  403d54:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403d56:	687a      	ldr	r2, [r7, #4]
  403d58:	4b25      	ldr	r3, [pc, #148]	; (403df0 <usart_serial_init+0xd4>)
  403d5a:	429a      	cmp	r2, r3
  403d5c:	d108      	bne.n	403d70 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  403d5e:	2008      	movs	r0, #8
  403d60:	4b24      	ldr	r3, [pc, #144]	; (403df4 <usart_serial_init+0xd8>)
  403d62:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403d68:	6878      	ldr	r0, [r7, #4]
  403d6a:	4619      	mov	r1, r3
  403d6c:	4b22      	ldr	r3, [pc, #136]	; (403df8 <usart_serial_init+0xdc>)
  403d6e:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403d70:	687a      	ldr	r2, [r7, #4]
  403d72:	4b22      	ldr	r3, [pc, #136]	; (403dfc <usart_serial_init+0xe0>)
  403d74:	429a      	cmp	r2, r3
  403d76:	d108      	bne.n	403d8a <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  403d78:	2009      	movs	r0, #9
  403d7a:	4b1e      	ldr	r3, [pc, #120]	; (403df4 <usart_serial_init+0xd8>)
  403d7c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403d82:	6878      	ldr	r0, [r7, #4]
  403d84:	4619      	mov	r1, r3
  403d86:	4b1c      	ldr	r3, [pc, #112]	; (403df8 <usart_serial_init+0xdc>)
  403d88:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403d8a:	687a      	ldr	r2, [r7, #4]
  403d8c:	4b1c      	ldr	r3, [pc, #112]	; (403e00 <usart_serial_init+0xe4>)
  403d8e:	429a      	cmp	r2, r3
  403d90:	d112      	bne.n	403db8 <usart_serial_init+0x9c>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  403d92:	200e      	movs	r0, #14
  403d94:	4b17      	ldr	r3, [pc, #92]	; (403df4 <usart_serial_init+0xd8>)
  403d96:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403d98:	4b14      	ldr	r3, [pc, #80]	; (403dec <usart_serial_init+0xd0>)
  403d9a:	4798      	blx	r3
  403d9c:	4603      	mov	r3, r0
  403d9e:	f107 020c 	add.w	r2, r7, #12
  403da2:	6878      	ldr	r0, [r7, #4]
  403da4:	4611      	mov	r1, r2
  403da6:	461a      	mov	r2, r3
  403da8:	4b16      	ldr	r3, [pc, #88]	; (403e04 <usart_serial_init+0xe8>)
  403daa:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403dac:	6878      	ldr	r0, [r7, #4]
  403dae:	4b16      	ldr	r3, [pc, #88]	; (403e08 <usart_serial_init+0xec>)
  403db0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403db2:	6878      	ldr	r0, [r7, #4]
  403db4:	4b15      	ldr	r3, [pc, #84]	; (403e0c <usart_serial_init+0xf0>)
  403db6:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403db8:	687a      	ldr	r2, [r7, #4]
  403dba:	4b15      	ldr	r3, [pc, #84]	; (403e10 <usart_serial_init+0xf4>)
  403dbc:	429a      	cmp	r2, r3
  403dbe:	d112      	bne.n	403de6 <usart_serial_init+0xca>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  403dc0:	200f      	movs	r0, #15
  403dc2:	4b0c      	ldr	r3, [pc, #48]	; (403df4 <usart_serial_init+0xd8>)
  403dc4:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403dc6:	4b09      	ldr	r3, [pc, #36]	; (403dec <usart_serial_init+0xd0>)
  403dc8:	4798      	blx	r3
  403dca:	4603      	mov	r3, r0
  403dcc:	f107 020c 	add.w	r2, r7, #12
  403dd0:	6878      	ldr	r0, [r7, #4]
  403dd2:	4611      	mov	r1, r2
  403dd4:	461a      	mov	r2, r3
  403dd6:	4b0b      	ldr	r3, [pc, #44]	; (403e04 <usart_serial_init+0xe8>)
  403dd8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403dda:	6878      	ldr	r0, [r7, #4]
  403ddc:	4b0a      	ldr	r3, [pc, #40]	; (403e08 <usart_serial_init+0xec>)
  403dde:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403de0:	6878      	ldr	r0, [r7, #4]
  403de2:	4b0a      	ldr	r3, [pc, #40]	; (403e0c <usart_serial_init+0xf0>)
  403de4:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  403de6:	3730      	adds	r7, #48	; 0x30
  403de8:	46bd      	mov	sp, r7
  403dea:	bd80      	pop	{r7, pc}
  403dec:	00403cf1 	.word	0x00403cf1
  403df0:	400e0600 	.word	0x400e0600
  403df4:	00403d05 	.word	0x00403d05
  403df8:	00408531 	.word	0x00408531
  403dfc:	400e0800 	.word	0x400e0800
  403e00:	40024000 	.word	0x40024000
  403e04:	00404f31 	.word	0x00404f31
  403e08:	00404fb5 	.word	0x00404fb5
  403e0c:	00404fe5 	.word	0x00404fe5
  403e10:	40028000 	.word	0x40028000

00403e14 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  403e14:	b580      	push	{r7, lr}
  403e16:	b082      	sub	sp, #8
  403e18:	af00      	add	r7, sp, #0
  403e1a:	6078      	str	r0, [r7, #4]
  403e1c:	460b      	mov	r3, r1
  403e1e:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403e20:	687a      	ldr	r2, [r7, #4]
  403e22:	4b20      	ldr	r3, [pc, #128]	; (403ea4 <usart_serial_putchar+0x90>)
  403e24:	429a      	cmp	r2, r3
  403e26:	d10a      	bne.n	403e3e <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  403e28:	bf00      	nop
  403e2a:	78fb      	ldrb	r3, [r7, #3]
  403e2c:	6878      	ldr	r0, [r7, #4]
  403e2e:	4619      	mov	r1, r3
  403e30:	4b1d      	ldr	r3, [pc, #116]	; (403ea8 <usart_serial_putchar+0x94>)
  403e32:	4798      	blx	r3
  403e34:	4603      	mov	r3, r0
  403e36:	2b00      	cmp	r3, #0
  403e38:	d1f7      	bne.n	403e2a <usart_serial_putchar+0x16>
		return 1;
  403e3a:	2301      	movs	r3, #1
  403e3c:	e02d      	b.n	403e9a <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403e3e:	687a      	ldr	r2, [r7, #4]
  403e40:	4b1a      	ldr	r3, [pc, #104]	; (403eac <usart_serial_putchar+0x98>)
  403e42:	429a      	cmp	r2, r3
  403e44:	d10a      	bne.n	403e5c <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  403e46:	bf00      	nop
  403e48:	78fb      	ldrb	r3, [r7, #3]
  403e4a:	6878      	ldr	r0, [r7, #4]
  403e4c:	4619      	mov	r1, r3
  403e4e:	4b16      	ldr	r3, [pc, #88]	; (403ea8 <usart_serial_putchar+0x94>)
  403e50:	4798      	blx	r3
  403e52:	4603      	mov	r3, r0
  403e54:	2b00      	cmp	r3, #0
  403e56:	d1f7      	bne.n	403e48 <usart_serial_putchar+0x34>
		return 1;
  403e58:	2301      	movs	r3, #1
  403e5a:	e01e      	b.n	403e9a <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403e5c:	687a      	ldr	r2, [r7, #4]
  403e5e:	4b14      	ldr	r3, [pc, #80]	; (403eb0 <usart_serial_putchar+0x9c>)
  403e60:	429a      	cmp	r2, r3
  403e62:	d10a      	bne.n	403e7a <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  403e64:	bf00      	nop
  403e66:	78fb      	ldrb	r3, [r7, #3]
  403e68:	6878      	ldr	r0, [r7, #4]
  403e6a:	4619      	mov	r1, r3
  403e6c:	4b11      	ldr	r3, [pc, #68]	; (403eb4 <usart_serial_putchar+0xa0>)
  403e6e:	4798      	blx	r3
  403e70:	4603      	mov	r3, r0
  403e72:	2b00      	cmp	r3, #0
  403e74:	d1f7      	bne.n	403e66 <usart_serial_putchar+0x52>
		return 1;
  403e76:	2301      	movs	r3, #1
  403e78:	e00f      	b.n	403e9a <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403e7a:	687a      	ldr	r2, [r7, #4]
  403e7c:	4b0e      	ldr	r3, [pc, #56]	; (403eb8 <usart_serial_putchar+0xa4>)
  403e7e:	429a      	cmp	r2, r3
  403e80:	d10a      	bne.n	403e98 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  403e82:	bf00      	nop
  403e84:	78fb      	ldrb	r3, [r7, #3]
  403e86:	6878      	ldr	r0, [r7, #4]
  403e88:	4619      	mov	r1, r3
  403e8a:	4b0a      	ldr	r3, [pc, #40]	; (403eb4 <usart_serial_putchar+0xa0>)
  403e8c:	4798      	blx	r3
  403e8e:	4603      	mov	r3, r0
  403e90:	2b00      	cmp	r3, #0
  403e92:	d1f7      	bne.n	403e84 <usart_serial_putchar+0x70>
		return 1;
  403e94:	2301      	movs	r3, #1
  403e96:	e000      	b.n	403e9a <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  403e98:	2300      	movs	r3, #0
}
  403e9a:	4618      	mov	r0, r3
  403e9c:	3708      	adds	r7, #8
  403e9e:	46bd      	mov	sp, r7
  403ea0:	bd80      	pop	{r7, pc}
  403ea2:	bf00      	nop
  403ea4:	400e0600 	.word	0x400e0600
  403ea8:	004085c9 	.word	0x004085c9
  403eac:	400e0800 	.word	0x400e0800
  403eb0:	40024000 	.word	0x40024000
  403eb4:	004050a1 	.word	0x004050a1
  403eb8:	40028000 	.word	0x40028000

00403ebc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403ebc:	b580      	push	{r7, lr}
  403ebe:	b084      	sub	sp, #16
  403ec0:	af00      	add	r7, sp, #0
  403ec2:	6078      	str	r0, [r7, #4]
  403ec4:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  403ec6:	2300      	movs	r3, #0
  403ec8:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403eca:	687a      	ldr	r2, [r7, #4]
  403ecc:	4b1e      	ldr	r3, [pc, #120]	; (403f48 <usart_serial_getchar+0x8c>)
  403ece:	429a      	cmp	r2, r3
  403ed0:	d107      	bne.n	403ee2 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  403ed2:	bf00      	nop
  403ed4:	6878      	ldr	r0, [r7, #4]
  403ed6:	6839      	ldr	r1, [r7, #0]
  403ed8:	4b1c      	ldr	r3, [pc, #112]	; (403f4c <usart_serial_getchar+0x90>)
  403eda:	4798      	blx	r3
  403edc:	4603      	mov	r3, r0
  403ede:	2b00      	cmp	r3, #0
  403ee0:	d1f8      	bne.n	403ed4 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403ee2:	687a      	ldr	r2, [r7, #4]
  403ee4:	4b1a      	ldr	r3, [pc, #104]	; (403f50 <usart_serial_getchar+0x94>)
  403ee6:	429a      	cmp	r2, r3
  403ee8:	d107      	bne.n	403efa <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  403eea:	bf00      	nop
  403eec:	6878      	ldr	r0, [r7, #4]
  403eee:	6839      	ldr	r1, [r7, #0]
  403ef0:	4b16      	ldr	r3, [pc, #88]	; (403f4c <usart_serial_getchar+0x90>)
  403ef2:	4798      	blx	r3
  403ef4:	4603      	mov	r3, r0
  403ef6:	2b00      	cmp	r3, #0
  403ef8:	d1f8      	bne.n	403eec <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403efa:	687a      	ldr	r2, [r7, #4]
  403efc:	4b15      	ldr	r3, [pc, #84]	; (403f54 <usart_serial_getchar+0x98>)
  403efe:	429a      	cmp	r2, r3
  403f00:	d10d      	bne.n	403f1e <usart_serial_getchar+0x62>
		while (usart_read(p_usart, &val));
  403f02:	bf00      	nop
  403f04:	f107 030c 	add.w	r3, r7, #12
  403f08:	6878      	ldr	r0, [r7, #4]
  403f0a:	4619      	mov	r1, r3
  403f0c:	4b12      	ldr	r3, [pc, #72]	; (403f58 <usart_serial_getchar+0x9c>)
  403f0e:	4798      	blx	r3
  403f10:	4603      	mov	r3, r0
  403f12:	2b00      	cmp	r3, #0
  403f14:	d1f6      	bne.n	403f04 <usart_serial_getchar+0x48>
		*data = (uint8_t)(val & 0xFF);
  403f16:	68fb      	ldr	r3, [r7, #12]
  403f18:	b2da      	uxtb	r2, r3
  403f1a:	683b      	ldr	r3, [r7, #0]
  403f1c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403f1e:	687a      	ldr	r2, [r7, #4]
  403f20:	4b0e      	ldr	r3, [pc, #56]	; (403f5c <usart_serial_getchar+0xa0>)
  403f22:	429a      	cmp	r2, r3
  403f24:	d10d      	bne.n	403f42 <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
  403f26:	bf00      	nop
  403f28:	f107 030c 	add.w	r3, r7, #12
  403f2c:	6878      	ldr	r0, [r7, #4]
  403f2e:	4619      	mov	r1, r3
  403f30:	4b09      	ldr	r3, [pc, #36]	; (403f58 <usart_serial_getchar+0x9c>)
  403f32:	4798      	blx	r3
  403f34:	4603      	mov	r3, r0
  403f36:	2b00      	cmp	r3, #0
  403f38:	d1f6      	bne.n	403f28 <usart_serial_getchar+0x6c>
		*data = (uint8_t)(val & 0xFF);
  403f3a:	68fb      	ldr	r3, [r7, #12]
  403f3c:	b2da      	uxtb	r2, r3
  403f3e:	683b      	ldr	r3, [r7, #0]
  403f40:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403f42:	3710      	adds	r7, #16
  403f44:	46bd      	mov	sp, r7
  403f46:	bd80      	pop	{r7, pc}
  403f48:	400e0600 	.word	0x400e0600
  403f4c:	004085f9 	.word	0x004085f9
  403f50:	400e0800 	.word	0x400e0800
  403f54:	40024000 	.word	0x40024000
  403f58:	004050d5 	.word	0x004050d5
  403f5c:	40028000 	.word	0x40028000

00403f60 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  403f60:	b580      	push	{r7, lr}
  403f62:	b082      	sub	sp, #8
  403f64:	af00      	add	r7, sp, #0
  403f66:	6078      	str	r0, [r7, #4]
  403f68:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  403f6a:	4b0f      	ldr	r3, [pc, #60]	; (403fa8 <stdio_serial_init+0x48>)
  403f6c:	687a      	ldr	r2, [r7, #4]
  403f6e:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403f70:	4b0e      	ldr	r3, [pc, #56]	; (403fac <stdio_serial_init+0x4c>)
  403f72:	4a0f      	ldr	r2, [pc, #60]	; (403fb0 <stdio_serial_init+0x50>)
  403f74:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403f76:	4b0f      	ldr	r3, [pc, #60]	; (403fb4 <stdio_serial_init+0x54>)
  403f78:	4a0f      	ldr	r2, [pc, #60]	; (403fb8 <stdio_serial_init+0x58>)
  403f7a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  403f7c:	6878      	ldr	r0, [r7, #4]
  403f7e:	6839      	ldr	r1, [r7, #0]
  403f80:	4b0e      	ldr	r3, [pc, #56]	; (403fbc <stdio_serial_init+0x5c>)
  403f82:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403f84:	4b0e      	ldr	r3, [pc, #56]	; (403fc0 <stdio_serial_init+0x60>)
  403f86:	681b      	ldr	r3, [r3, #0]
  403f88:	689b      	ldr	r3, [r3, #8]
  403f8a:	4618      	mov	r0, r3
  403f8c:	2100      	movs	r1, #0
  403f8e:	4b0d      	ldr	r3, [pc, #52]	; (403fc4 <stdio_serial_init+0x64>)
  403f90:	4798      	blx	r3
	setbuf(stdin, NULL);
  403f92:	4b0b      	ldr	r3, [pc, #44]	; (403fc0 <stdio_serial_init+0x60>)
  403f94:	681b      	ldr	r3, [r3, #0]
  403f96:	685b      	ldr	r3, [r3, #4]
  403f98:	4618      	mov	r0, r3
  403f9a:	2100      	movs	r1, #0
  403f9c:	4b09      	ldr	r3, [pc, #36]	; (403fc4 <stdio_serial_init+0x64>)
  403f9e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  403fa0:	3708      	adds	r7, #8
  403fa2:	46bd      	mov	sp, r7
  403fa4:	bd80      	pop	{r7, pc}
  403fa6:	bf00      	nop
  403fa8:	2001603c 	.word	0x2001603c
  403fac:	20016038 	.word	0x20016038
  403fb0:	00403e15 	.word	0x00403e15
  403fb4:	20014fa4 	.word	0x20014fa4
  403fb8:	00403ebd 	.word	0x00403ebd
  403fbc:	00403d1d 	.word	0x00403d1d
  403fc0:	20000640 	.word	0x20000640
  403fc4:	0040a585 	.word	0x0040a585

00403fc8 <configure_console>:

/**
 * \brief Configure the console UART for using printf.
 */
static void configure_console(void)
{
  403fc8:	b590      	push	{r4, r7, lr}
  403fca:	b085      	sub	sp, #20
  403fcc:	af00      	add	r7, sp, #0
	const usart_serial_options_t usart_serial_options = 
  403fce:	4b0a      	ldr	r3, [pc, #40]	; (403ff8 <configure_console+0x30>)
  403fd0:	463c      	mov	r4, r7
  403fd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403fd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_TEST_PARITY,
		.stopbits   = CONF_TEST_STOPBITS,
	};

	/* Configure console UART. */
	stdio_serial_init(UART1, &usart_serial_options);
  403fd8:	463b      	mov	r3, r7
  403fda:	4808      	ldr	r0, [pc, #32]	; (403ffc <configure_console+0x34>)
  403fdc:	4619      	mov	r1, r3
  403fde:	4b08      	ldr	r3, [pc, #32]	; (404000 <configure_console+0x38>)
  403fe0:	4798      	blx	r3
	/* Specify that stdout should not be buffered. */
	#if defined(__GNUC__)
		setbuf(stdout, NULL);
  403fe2:	4b08      	ldr	r3, [pc, #32]	; (404004 <configure_console+0x3c>)
  403fe4:	681b      	ldr	r3, [r3, #0]
  403fe6:	689b      	ldr	r3, [r3, #8]
  403fe8:	4618      	mov	r0, r3
  403fea:	2100      	movs	r1, #0
  403fec:	4b06      	ldr	r3, [pc, #24]	; (404008 <configure_console+0x40>)
  403fee:	4798      	blx	r3
	#else
	/* Already the case in IAR's Normal DLIB default configuration: printf()
	 * emits one character at a time.
	 */
	#endif
}
  403ff0:	3714      	adds	r7, #20
  403ff2:	46bd      	mov	sp, r7
  403ff4:	bd90      	pop	{r4, r7, pc}
  403ff6:	bf00      	nop
  403ff8:	0041355c 	.word	0x0041355c
  403ffc:	400e0800 	.word	0x400e0800
  404000:	00403f61 	.word	0x00403f61
  404004:	20000640 	.word	0x20000640
  404008:	0040a585 	.word	0x0040a585

0040400c <brd_board_init>:

void brd_board_init()
{
  40400c:	b580      	push	{r7, lr}
  40400e:	af00      	add	r7, sp, #0
	//configure the interrupt handlers first. 
	
	//configure the gpio
	drv_gpio_initializeAll();
  404010:	4b14      	ldr	r3, [pc, #80]	; (404064 <brd_board_init+0x58>)
  404012:	4798      	blx	r3
	//configure LED driver
	drv_led_init(&ledConfiguration);
  404014:	4814      	ldr	r0, [pc, #80]	; (404068 <brd_board_init+0x5c>)
  404016:	4b15      	ldr	r3, [pc, #84]	; (40406c <brd_board_init+0x60>)
  404018:	4798      	blx	r3
	//Set LED white to indicate power on
	drv_led_set(DRV_LED_WHITE,DRV_LED_SOLID);
  40401a:	2004      	movs	r0, #4
  40401c:	2101      	movs	r1, #1
  40401e:	4b14      	ldr	r3, [pc, #80]	; (404070 <brd_board_init+0x64>)
  404020:	4798      	blx	r3
	vTaskDelay(200);
  404022:	20c8      	movs	r0, #200	; 0xc8
  404024:	4b13      	ldr	r3, [pc, #76]	; (404074 <brd_board_init+0x68>)
  404026:	4798      	blx	r3
	pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  404028:	2000      	movs	r0, #0
  40402a:	4b13      	ldr	r3, [pc, #76]	; (404078 <brd_board_init+0x6c>)
  40402c:	4798      	blx	r3
	while (!pmc_osc_is_ready_32kxtal());
  40402e:	bf00      	nop
  404030:	4b12      	ldr	r3, [pc, #72]	; (40407c <brd_board_init+0x70>)
  404032:	4798      	blx	r3
  404034:	4603      	mov	r3, r0
  404036:	2b00      	cmp	r3, #0
  404038:	d0fa      	beq.n	404030 <brd_board_init+0x24>
	rtc_set_hour_mode(RTC, 0);
  40403a:	4811      	ldr	r0, [pc, #68]	; (404080 <brd_board_init+0x74>)
  40403c:	2100      	movs	r1, #0
  40403e:	4b11      	ldr	r3, [pc, #68]	; (404084 <brd_board_init+0x78>)
  404040:	4798      	blx	r3
	rtc_clear_date_alarm(RTC);
  404042:	480f      	ldr	r0, [pc, #60]	; (404080 <brd_board_init+0x74>)
  404044:	4b10      	ldr	r3, [pc, #64]	; (404088 <brd_board_init+0x7c>)
  404046:	4798      	blx	r3
	rtc_clear_time_alarm(RTC);
  404048:	480d      	ldr	r0, [pc, #52]	; (404080 <brd_board_init+0x74>)
  40404a:	4b10      	ldr	r3, [pc, #64]	; (40408c <brd_board_init+0x80>)
  40404c:	4798      	blx	r3
	drv_led_set(DRV_LED_OFF,DRV_LED_SOLID);	
  40404e:	2006      	movs	r0, #6
  404050:	2101      	movs	r1, #1
  404052:	4b07      	ldr	r3, [pc, #28]	; (404070 <brd_board_init+0x64>)
  404054:	4798      	blx	r3
	brd_initAllUarts();
  404056:	4b0e      	ldr	r3, [pc, #56]	; (404090 <brd_board_init+0x84>)
  404058:	4798      	blx	r3
	configure_console();
  40405a:	4b0e      	ldr	r3, [pc, #56]	; (404094 <brd_board_init+0x88>)
  40405c:	4798      	blx	r3
	//try to configure the USB
	udc_start(); 
  40405e:	4b0e      	ldr	r3, [pc, #56]	; (404098 <brd_board_init+0x8c>)
  404060:	4798      	blx	r3
	
}
  404062:	bd80      	pop	{r7, pc}
  404064:	00404589 	.word	0x00404589
  404068:	20000088 	.word	0x20000088
  40406c:	0040523d 	.word	0x0040523d
  404070:	004052a5 	.word	0x004052a5
  404074:	00407069 	.word	0x00407069
  404078:	0040948d 	.word	0x0040948d
  40407c:	004094c5 	.word	0x004094c5
  404080:	400e1460 	.word	0x400e1460
  404084:	00408285 	.word	0x00408285
  404088:	00408515 	.word	0x00408515
  40408c:	004084fd 	.word	0x004084fd
  404090:	0040409d 	.word	0x0040409d
  404094:	00403fc9 	.word	0x00403fc9
  404098:	0040125d 	.word	0x0040125d

0040409c <brd_initAllUarts>:


void brd_initAllUarts()
{
  40409c:	b580      	push	{r7, lr}
  40409e:	af00      	add	r7, sp, #0
	if(drv_uart_init(&uart0Config) != STATUS_PASS)
  4040a0:	4807      	ldr	r0, [pc, #28]	; (4040c0 <brd_initAllUarts+0x24>)
  4040a2:	4b08      	ldr	r3, [pc, #32]	; (4040c4 <brd_initAllUarts+0x28>)
  4040a4:	4798      	blx	r3
  4040a6:	4603      	mov	r3, r0
  4040a8:	2b00      	cmp	r3, #0
  4040aa:	d000      	beq.n	4040ae <brd_initAllUarts+0x12>
	{
		while(1); //spin here
  4040ac:	e7fe      	b.n	4040ac <brd_initAllUarts+0x10>
	}
	if(drv_uart_init(&uart1Config) != STATUS_PASS)
  4040ae:	4806      	ldr	r0, [pc, #24]	; (4040c8 <brd_initAllUarts+0x2c>)
  4040b0:	4b04      	ldr	r3, [pc, #16]	; (4040c4 <brd_initAllUarts+0x28>)
  4040b2:	4798      	blx	r3
  4040b4:	4603      	mov	r3, r0
  4040b6:	2b00      	cmp	r3, #0
  4040b8:	d000      	beq.n	4040bc <brd_initAllUarts+0x20>
	{
		while(1); //spin here
  4040ba:	e7fe      	b.n	4040ba <brd_initAllUarts+0x1e>
	}
}
  4040bc:	bd80      	pop	{r7, pc}
  4040be:	bf00      	nop
  4040c0:	20000058 	.word	0x20000058
  4040c4:	00405711 	.word	0x00405711
  4040c8:	20000070 	.word	0x20000070

004040cc <chrg_task_chargeMonitor>:
 * @brief This task will monitor the current charger status and battery charge level.  
 * @param pvParameters, void pointer to structure containing data router configuration. 
 * @return void
 ***********************************************************************************************/
void chrg_task_chargeMonitor(void *pvParameters)
{
  4040cc:	b590      	push	{r4, r7, lr}
  4040ce:	b087      	sub	sp, #28
  4040d0:	af00      	add	r7, sp, #0
  4040d2:	6078      	str	r0, [r7, #4]
	chrg_chargeMonitorConfig_t* chargeMonitorConfig;  	
	chrg_chargerState_t newChargerState = CHRG_CHARGER_STATE_INVALID_CODE; 
  4040d4:	2305      	movs	r3, #5
  4040d6:	75fb      	strb	r3, [r7, #23]
	mgr_eventMessage_t eventMessage; 
	while(1)
	{
		newChargerState = getChargerState(chargeMonitorConfig); 	
  4040d8:	6938      	ldr	r0, [r7, #16]
  4040da:	4b12      	ldr	r3, [pc, #72]	; (404124 <chrg_task_chargeMonitor+0x58>)
  4040dc:	4798      	blx	r3
  4040de:	4603      	mov	r3, r0
  4040e0:	75fb      	strb	r3, [r7, #23]
		//check if the state is new
		if(newChargerState != chrg_currentChargerState)
  4040e2:	4b11      	ldr	r3, [pc, #68]	; (404128 <chrg_task_chargeMonitor+0x5c>)
  4040e4:	781b      	ldrb	r3, [r3, #0]
  4040e6:	b2db      	uxtb	r3, r3
  4040e8:	7dfa      	ldrb	r2, [r7, #23]
  4040ea:	429a      	cmp	r2, r3
  4040ec:	d015      	beq.n	40411a <chrg_task_chargeMonitor+0x4e>
		{
			if(newChargerState == CHRG_CHARGER_STATE_LOW_BATTERY)
  4040ee:	7dfb      	ldrb	r3, [r7, #23]
  4040f0:	2b03      	cmp	r3, #3
  4040f2:	d10f      	bne.n	404114 <chrg_task_chargeMonitor+0x48>
			{
				eventMessage.sysEvent = SYS_EVENT_LOW_BATTERY; 
  4040f4:	2302      	movs	r3, #2
  4040f6:	733b      	strb	r3, [r7, #12]
				if(mgr_eventQueue != NULL)
  4040f8:	4b0c      	ldr	r3, [pc, #48]	; (40412c <chrg_task_chargeMonitor+0x60>)
  4040fa:	681b      	ldr	r3, [r3, #0]
  4040fc:	2b00      	cmp	r3, #0
  4040fe:	d009      	beq.n	404114 <chrg_task_chargeMonitor+0x48>
				{
					if(xQueueSendToBack(mgr_eventQueue,( void * ) &eventMessage,5) != TRUE)
  404100:	4b0a      	ldr	r3, [pc, #40]	; (40412c <chrg_task_chargeMonitor+0x60>)
  404102:	681a      	ldr	r2, [r3, #0]
  404104:	f107 030c 	add.w	r3, r7, #12
  404108:	4610      	mov	r0, r2
  40410a:	4619      	mov	r1, r3
  40410c:	2205      	movs	r2, #5
  40410e:	2300      	movs	r3, #0
  404110:	4c07      	ldr	r4, [pc, #28]	; (404130 <chrg_task_chargeMonitor+0x64>)
  404112:	47a0      	blx	r4
					{
						//this is an error, we should log it.
					}				
				}
			}
			chrg_currentChargerState = newChargerState; 			
  404114:	4b04      	ldr	r3, [pc, #16]	; (404128 <chrg_task_chargeMonitor+0x5c>)
  404116:	7dfa      	ldrb	r2, [r7, #23]
  404118:	701a      	strb	r2, [r3, #0]
		}	
		vTaskDelay(500); 
  40411a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  40411e:	4b05      	ldr	r3, [pc, #20]	; (404134 <chrg_task_chargeMonitor+0x68>)
  404120:	4798      	blx	r3
	}	
  404122:	e7d9      	b.n	4040d8 <chrg_task_chargeMonitor+0xc>
  404124:	00404139 	.word	0x00404139
  404128:	2000008c 	.word	0x2000008c
  40412c:	20000cb0 	.word	0x20000cb0
  404130:	0040681d 	.word	0x0040681d
  404134:	00407069 	.word	0x00407069

00404138 <getChargerState>:

//static functions

//get charge status
chrg_chargerState_t getChargerState(chrg_chargeMonitorConfig_t* chargerConfig)
{
  404138:	b580      	push	{r7, lr}
  40413a:	b084      	sub	sp, #16
  40413c:	af00      	add	r7, sp, #0
  40413e:	6078      	str	r0, [r7, #4]
	chrg_chargerState_t chargerState = 0x00; 
  404140:	2300      	movs	r3, #0
  404142:	73fb      	strb	r3, [r7, #15]
	drv_gpio_pin_state_t tempPinState = DRV_GPIO_PIN_STATE_LOW; 
  404144:	2300      	movs	r3, #0
  404146:	73bb      	strb	r3, [r7, #14]
	drv_gpio_getPinState(chargerConfig->pin_pg, &tempPinState); 
  404148:	687b      	ldr	r3, [r7, #4]
  40414a:	789a      	ldrb	r2, [r3, #2]
  40414c:	f107 030e 	add.w	r3, r7, #14
  404150:	4610      	mov	r0, r2
  404152:	4619      	mov	r1, r3
  404154:	4b17      	ldr	r3, [pc, #92]	; (4041b4 <getChargerState+0x7c>)
  404156:	4798      	blx	r3
	chargerState |= (tempPinState | 0x01); 
  404158:	7bba      	ldrb	r2, [r7, #14]
  40415a:	7bfb      	ldrb	r3, [r7, #15]
  40415c:	4313      	orrs	r3, r2
  40415e:	b2db      	uxtb	r3, r3
  404160:	f043 0301 	orr.w	r3, r3, #1
  404164:	73fb      	strb	r3, [r7, #15]
	drv_gpio_getPinState(chargerConfig->pin_stat1, &tempPinState);
  404166:	687b      	ldr	r3, [r7, #4]
  404168:	781a      	ldrb	r2, [r3, #0]
  40416a:	f107 030e 	add.w	r3, r7, #14
  40416e:	4610      	mov	r0, r2
  404170:	4619      	mov	r1, r3
  404172:	4b10      	ldr	r3, [pc, #64]	; (4041b4 <getChargerState+0x7c>)
  404174:	4798      	blx	r3
	chargerState |= ((tempPinState<<1) | 0x01);
  404176:	7bbb      	ldrb	r3, [r7, #14]
  404178:	005b      	lsls	r3, r3, #1
  40417a:	b2da      	uxtb	r2, r3
  40417c:	7bfb      	ldrb	r3, [r7, #15]
  40417e:	4313      	orrs	r3, r2
  404180:	b2db      	uxtb	r3, r3
  404182:	f043 0301 	orr.w	r3, r3, #1
  404186:	73fb      	strb	r3, [r7, #15]
	drv_gpio_getPinState(chargerConfig->pin_stat2, &tempPinState);
  404188:	687b      	ldr	r3, [r7, #4]
  40418a:	785a      	ldrb	r2, [r3, #1]
  40418c:	f107 030e 	add.w	r3, r7, #14
  404190:	4610      	mov	r0, r2
  404192:	4619      	mov	r1, r3
  404194:	4b07      	ldr	r3, [pc, #28]	; (4041b4 <getChargerState+0x7c>)
  404196:	4798      	blx	r3
	chargerState |= ((tempPinState<<2) | 0x01);		
  404198:	7bbb      	ldrb	r3, [r7, #14]
  40419a:	009b      	lsls	r3, r3, #2
  40419c:	b2da      	uxtb	r2, r3
  40419e:	7bfb      	ldrb	r3, [r7, #15]
  4041a0:	4313      	orrs	r3, r2
  4041a2:	b2db      	uxtb	r3, r3
  4041a4:	f043 0301 	orr.w	r3, r3, #1
  4041a8:	73fb      	strb	r3, [r7, #15]
	return chargerState; 		
  4041aa:	7bfb      	ldrb	r3, [r7, #15]
  4041ac:	4618      	mov	r0, r3
  4041ae:	3710      	adds	r7, #16
  4041b0:	46bd      	mov	sp, r7
  4041b2:	bd80      	pop	{r7, pc}
  4041b4:	00404875 	.word	0x00404875

004041b8 <cmd_task_commandProcesor>:
 * @brief This task receives all incoming commands to the brain pack, and responds to the ones it needs to.   
 * @param pvParameters, void pointer to structure containing configuration
 * @return void
 ***********************************************************************************************/
void cmd_task_commandProcesor(void *pvParameters)
{
  4041b8:	b590      	push	{r4, r7, lr}
  4041ba:	b091      	sub	sp, #68	; 0x44
  4041bc:	af00      	add	r7, sp, #0
  4041be:	6078      	str	r0, [r7, #4]
	cmd_queue_commandQueue = xQueueCreate( 10, sizeof(cmd_commandPacket_t));
  4041c0:	200a      	movs	r0, #10
  4041c2:	2136      	movs	r1, #54	; 0x36
  4041c4:	2200      	movs	r2, #0
  4041c6:	4b22      	ldr	r3, [pc, #136]	; (404250 <cmd_task_commandProcesor+0x98>)
  4041c8:	4798      	blx	r3
  4041ca:	4602      	mov	r2, r0
  4041cc:	4b21      	ldr	r3, [pc, #132]	; (404254 <cmd_task_commandProcesor+0x9c>)
  4041ce:	601a      	str	r2, [r3, #0]
	cmd_commandPacket_t packet; 
	cmd_initPacketStructure(&packet);
  4041d0:	f107 0308 	add.w	r3, r7, #8
  4041d4:	4618      	mov	r0, r3
  4041d6:	4b20      	ldr	r3, [pc, #128]	; (404258 <cmd_task_commandProcesor+0xa0>)
  4041d8:	4798      	blx	r3
	if(cmd_queue_commandQueue == 0)
  4041da:	4b1e      	ldr	r3, [pc, #120]	; (404254 <cmd_task_commandProcesor+0x9c>)
  4041dc:	681b      	ldr	r3, [r3, #0]
  4041de:	2b00      	cmp	r3, #0
  4041e0:	d100      	bne.n	4041e4 <cmd_task_commandProcesor+0x2c>
	{
		// Queue was not created this is an error!		
		return;
  4041e2:	e031      	b.n	404248 <cmd_task_commandProcesor+0x90>
	}
	while(1)
	{	
		if(xQueueReceive( cmd_queue_commandQueue, &(packet), 1000) == TRUE)
  4041e4:	4b1b      	ldr	r3, [pc, #108]	; (404254 <cmd_task_commandProcesor+0x9c>)
  4041e6:	681a      	ldr	r2, [r3, #0]
  4041e8:	f107 0308 	add.w	r3, r7, #8
  4041ec:	4610      	mov	r0, r2
  4041ee:	4619      	mov	r1, r3
  4041f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4041f4:	2300      	movs	r3, #0
  4041f6:	4c19      	ldr	r4, [pc, #100]	; (40425c <cmd_task_commandProcesor+0xa4>)
  4041f8:	47a0      	blx	r4
  4041fa:	4603      	mov	r3, r0
  4041fc:	2b01      	cmp	r3, #1
  4041fe:	d122      	bne.n	404246 <cmd_task_commandProcesor+0x8e>
		{
			//only a small subset of commands are handled on the power board
			//send the rest to the databoard for processing.
			if(packet.packetSize > 0)
  404200:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
  404202:	2b00      	cmp	r3, #0
  404204:	d01f      	beq.n	404246 <cmd_task_commandProcesor+0x8e>
			{		
				if(strncmp(packet.packetData,"setTime",7)==0)
  404206:	f107 0308 	add.w	r3, r7, #8
  40420a:	3301      	adds	r3, #1
  40420c:	4618      	mov	r0, r3
  40420e:	4914      	ldr	r1, [pc, #80]	; (404260 <cmd_task_commandProcesor+0xa8>)
  404210:	2207      	movs	r2, #7
  404212:	4b14      	ldr	r3, [pc, #80]	; (404264 <cmd_task_commandProcesor+0xac>)
  404214:	4798      	blx	r3
  404216:	4603      	mov	r3, r0
  404218:	2b00      	cmp	r3, #0
  40421a:	d10e      	bne.n	40423a <cmd_task_commandProcesor+0x82>
				{
					//handle the set time command. 
					if(strlen(packet.packetData) >= 24)
  40421c:	f107 0308 	add.w	r3, r7, #8
  404220:	3301      	adds	r3, #1
  404222:	4618      	mov	r0, r3
  404224:	4b10      	ldr	r3, [pc, #64]	; (404268 <cmd_task_commandProcesor+0xb0>)
  404226:	4798      	blx	r3
  404228:	4603      	mov	r3, r0
  40422a:	2b17      	cmp	r3, #23
  40422c:	d905      	bls.n	40423a <cmd_task_commandProcesor+0x82>
					{
						setTimeFromString(packet.packetData+7);
  40422e:	f107 0308 	add.w	r3, r7, #8
  404232:	3308      	adds	r3, #8
  404234:	4618      	mov	r0, r3
  404236:	4b0d      	ldr	r3, [pc, #52]	; (40426c <cmd_task_commandProcesor+0xb4>)
  404238:	4798      	blx	r3
					}
				}		
				//forward the command to the data board. 
				dat_sendPacketToDataBoard(&packet); 
  40423a:	f107 0308 	add.w	r3, r7, #8
  40423e:	4618      	mov	r0, r3
  404240:	4b0b      	ldr	r3, [pc, #44]	; (404270 <cmd_task_commandProcesor+0xb8>)
  404242:	4798      	blx	r3
			}
		}
	}
  404244:	e7ce      	b.n	4041e4 <cmd_task_commandProcesor+0x2c>
  404246:	e7cd      	b.n	4041e4 <cmd_task_commandProcesor+0x2c>
		
}
  404248:	3744      	adds	r7, #68	; 0x44
  40424a:	46bd      	mov	sp, r7
  40424c:	bd90      	pop	{r4, r7, pc}
  40424e:	bf00      	nop
  404250:	00406785 	.word	0x00406785
  404254:	20000cac 	.word	0x20000cac
  404258:	00404275 	.word	0x00404275
  40425c:	00406a49 	.word	0x00406a49
  404260:	0041356c 	.word	0x0041356c
  404264:	0040a821 	.word	0x0040a821
  404268:	0040a7c1 	.word	0x0040a7c1
  40426c:	004042a1 	.word	0x004042a1
  404270:	004044d5 	.word	0x004044d5

00404274 <cmd_initPacketStructure>:

void cmd_initPacketStructure(cmd_commandPacket_t* packet)
{
  404274:	b580      	push	{r7, lr}
  404276:	b082      	sub	sp, #8
  404278:	af00      	add	r7, sp, #0
  40427a:	6078      	str	r0, [r7, #4]
	memset(packet->packetData,0,CMD_INCOMING_CMD_SIZE_MAX);
  40427c:	687b      	ldr	r3, [r7, #4]
  40427e:	3301      	adds	r3, #1
  404280:	4618      	mov	r0, r3
  404282:	2100      	movs	r1, #0
  404284:	2232      	movs	r2, #50	; 0x32
  404286:	4b05      	ldr	r3, [pc, #20]	; (40429c <cmd_initPacketStructure+0x28>)
  404288:	4798      	blx	r3
	packet->packetSize = 0;
  40428a:	687b      	ldr	r3, [r7, #4]
  40428c:	2200      	movs	r2, #0
  40428e:	869a      	strh	r2, [r3, #52]	; 0x34
	packet->packetSource = CMD_COMMAND_SOURCE_DAUGHTER; 
  404290:	687b      	ldr	r3, [r7, #4]
  404292:	2200      	movs	r2, #0
  404294:	701a      	strb	r2, [r3, #0]
}
  404296:	3708      	adds	r7, #8
  404298:	46bd      	mov	sp, r7
  40429a:	bd80      	pop	{r7, pc}
  40429c:	0040a4f1 	.word	0x0040a4f1

004042a0 <setTimeFromString>:
	}
}

//static functions
static void setTimeFromString(char* dateTime)
{
  4042a0:	b590      	push	{r4, r7, lr}
  4042a2:	b091      	sub	sp, #68	; 0x44
  4042a4:	af06      	add	r7, sp, #24
  4042a6:	6078      	str	r0, [r7, #4]
	uint32_t year, month, day, dow; //dow is day of week (1-7)
	uint32_t hour, minute, second;
	if(sscanf(dateTime,"%d-%d-%d-%d-%d:%d:%d\r\n", &year, &month, &day, &dow, &hour, &minute, &second ) == 7)
  4042a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
  4042ac:	f107 0320 	add.w	r3, r7, #32
  4042b0:	f107 011c 	add.w	r1, r7, #28
  4042b4:	9100      	str	r1, [sp, #0]
  4042b6:	f107 0118 	add.w	r1, r7, #24
  4042ba:	9101      	str	r1, [sp, #4]
  4042bc:	f107 0114 	add.w	r1, r7, #20
  4042c0:	9102      	str	r1, [sp, #8]
  4042c2:	f107 0110 	add.w	r1, r7, #16
  4042c6:	9103      	str	r1, [sp, #12]
  4042c8:	f107 010c 	add.w	r1, r7, #12
  4042cc:	9104      	str	r1, [sp, #16]
  4042ce:	6878      	ldr	r0, [r7, #4]
  4042d0:	490b      	ldr	r1, [pc, #44]	; (404300 <setTimeFromString+0x60>)
  4042d2:	4c0c      	ldr	r4, [pc, #48]	; (404304 <setTimeFromString+0x64>)
  4042d4:	47a0      	blx	r4
  4042d6:	4603      	mov	r3, r0
  4042d8:	2b07      	cmp	r3, #7
  4042da:	d10d      	bne.n	4042f8 <setTimeFromString+0x58>
	{
		// we successfully parsed the data, set the time and date
		rtc_set_time(RTC,hour,minute,second);
  4042dc:	6979      	ldr	r1, [r7, #20]
  4042de:	693a      	ldr	r2, [r7, #16]
  4042e0:	68fb      	ldr	r3, [r7, #12]
  4042e2:	4809      	ldr	r0, [pc, #36]	; (404308 <setTimeFromString+0x68>)
  4042e4:	4c09      	ldr	r4, [pc, #36]	; (40430c <setTimeFromString+0x6c>)
  4042e6:	47a0      	blx	r4
		rtc_set_date(RTC,year,month,day,dow);
  4042e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
  4042ea:	6a3a      	ldr	r2, [r7, #32]
  4042ec:	69fb      	ldr	r3, [r7, #28]
  4042ee:	69b8      	ldr	r0, [r7, #24]
  4042f0:	9000      	str	r0, [sp, #0]
  4042f2:	4805      	ldr	r0, [pc, #20]	; (404308 <setTimeFromString+0x68>)
  4042f4:	4c06      	ldr	r4, [pc, #24]	; (404310 <setTimeFromString+0x70>)
  4042f6:	47a0      	blx	r4
	}
	else
	{
		//printString("NACK\r\n");
	}
}
  4042f8:	372c      	adds	r7, #44	; 0x2c
  4042fa:	46bd      	mov	sp, r7
  4042fc:	bd90      	pop	{r4, r7, pc}
  4042fe:	bf00      	nop
  404300:	00413584 	.word	0x00413584
  404304:	0040a6e1 	.word	0x0040a6e1
  404308:	400e1460 	.word	0x400e1460
  40430c:	004082b9 	.word	0x004082b9
  404310:	004083c1 	.word	0x004083c1

00404314 <dat_task_dataRouter>:
 *	the daughter board UART 
 * @param pvParameters, void pointer to structure containing data router configuration. 
 * @return void
 ***********************************************************************************************/
void dat_task_dataRouter(void *pvParameters)
{
  404314:	b590      	push	{r4, r7, lr}
  404316:	b0a1      	sub	sp, #132	; 0x84
  404318:	af00      	add	r7, sp, #0
  40431a:	6078      	str	r0, [r7, #4]
	dataRouterConfig = (dat_dataRouterConfig_t*)pvParameters; 
  40431c:	4b62      	ldr	r3, [pc, #392]	; (4044a8 <dat_task_dataRouter+0x194>)
  40431e:	687a      	ldr	r2, [r7, #4]
  404320:	601a      	str	r2, [r3, #0]
	cmd_commandPacket_t daughterBoardPacket, usbPacket;
	//initialize the packets
	cmd_initPacketStructure(&daughterBoardPacket);
  404322:	f107 0344 	add.w	r3, r7, #68	; 0x44
  404326:	4618      	mov	r0, r3
  404328:	4b60      	ldr	r3, [pc, #384]	; (4044ac <dat_task_dataRouter+0x198>)
  40432a:	4798      	blx	r3
	cmd_initPacketStructure(&usbPacket);
  40432c:	f107 030c 	add.w	r3, r7, #12
  404330:	4618      	mov	r0, r3
  404332:	4b5e      	ldr	r3, [pc, #376]	; (4044ac <dat_task_dataRouter+0x198>)
  404334:	4798      	blx	r3
		
	if(drv_uart_isInit(dataRouterConfig->destination) != STATUS_PASS)
  404336:	4b5c      	ldr	r3, [pc, #368]	; (4044a8 <dat_task_dataRouter+0x194>)
  404338:	681b      	ldr	r3, [r3, #0]
  40433a:	685b      	ldr	r3, [r3, #4]
  40433c:	4618      	mov	r0, r3
  40433e:	4b5c      	ldr	r3, [pc, #368]	; (4044b0 <dat_task_dataRouter+0x19c>)
  404340:	4798      	blx	r3
  404342:	4603      	mov	r3, r0
  404344:	2b00      	cmp	r3, #0
  404346:	d000      	beq.n	40434a <dat_task_dataRouter+0x36>
	{
		//fail!
		return; 
  404348:	e0aa      	b.n	4044a0 <dat_task_dataRouter+0x18c>
	}
	
	if(drv_uart_isInit(dataRouterConfig->dataBoardUart) != STATUS_PASS)
  40434a:	4b57      	ldr	r3, [pc, #348]	; (4044a8 <dat_task_dataRouter+0x194>)
  40434c:	681b      	ldr	r3, [r3, #0]
  40434e:	681b      	ldr	r3, [r3, #0]
  404350:	4618      	mov	r0, r3
  404352:	4b57      	ldr	r3, [pc, #348]	; (4044b0 <dat_task_dataRouter+0x19c>)
  404354:	4798      	blx	r3
  404356:	4603      	mov	r3, r0
  404358:	2b00      	cmp	r3, #0
  40435a:	d000      	beq.n	40435e <dat_task_dataRouter+0x4a>
	{
		//fail!
		return;
  40435c:	e0a0      	b.n	4044a0 <dat_task_dataRouter+0x18c>
	}

	char receivedByte = 0x00; 
  40435e:	2300      	movs	r3, #0
  404360:	72fb      	strb	r3, [r7, #11]
	int receivedUsbData = 0x00; 
  404362:	2300      	movs	r3, #0
  404364:	67fb      	str	r3, [r7, #124]	; 0x7c
	while(1)
	{
		//try to read byte from databoard mcu
		if(drv_uart_getChar(dataRouterConfig->dataBoardUart, &receivedByte) == STATUS_PASS)
  404366:	4b50      	ldr	r3, [pc, #320]	; (4044a8 <dat_task_dataRouter+0x194>)
  404368:	681b      	ldr	r3, [r3, #0]
  40436a:	681a      	ldr	r2, [r3, #0]
  40436c:	f107 030b 	add.w	r3, r7, #11
  404370:	4610      	mov	r0, r2
  404372:	4619      	mov	r1, r3
  404374:	4b4f      	ldr	r3, [pc, #316]	; (4044b4 <dat_task_dataRouter+0x1a0>)
  404376:	4798      	blx	r3
  404378:	4603      	mov	r3, r0
  40437a:	2b00      	cmp	r3, #0
  40437c:	d110      	bne.n	4043a0 <dat_task_dataRouter+0x8c>
		{
			//if byte exists, pass through to the daughter board and USB (if connected)
			drv_uart_putChar(dataRouterConfig->destination, receivedByte); 
  40437e:	4b4a      	ldr	r3, [pc, #296]	; (4044a8 <dat_task_dataRouter+0x194>)
  404380:	681b      	ldr	r3, [r3, #0]
  404382:	685a      	ldr	r2, [r3, #4]
  404384:	7afb      	ldrb	r3, [r7, #11]
  404386:	4610      	mov	r0, r2
  404388:	4619      	mov	r1, r3
  40438a:	4b4b      	ldr	r3, [pc, #300]	; (4044b8 <dat_task_dataRouter+0x1a4>)
  40438c:	4798      	blx	r3
			if(udi_cdc_is_tx_ready() == true)
  40438e:	4b4b      	ldr	r3, [pc, #300]	; (4044bc <dat_task_dataRouter+0x1a8>)
  404390:	4798      	blx	r3
  404392:	4603      	mov	r3, r0
  404394:	2b00      	cmp	r3, #0
  404396:	d003      	beq.n	4043a0 <dat_task_dataRouter+0x8c>
			{
				udi_cdc_putc(receivedByte); 
  404398:	7afb      	ldrb	r3, [r7, #11]
  40439a:	4618      	mov	r0, r3
  40439c:	4b48      	ldr	r3, [pc, #288]	; (4044c0 <dat_task_dataRouter+0x1ac>)
  40439e:	4798      	blx	r3
			}
			
		}		
				
		//try to read byte from daughter board
		if(drv_uart_getChar(dataRouterConfig->destination, &receivedByte) == STATUS_PASS)
  4043a0:	4b41      	ldr	r3, [pc, #260]	; (4044a8 <dat_task_dataRouter+0x194>)
  4043a2:	681b      	ldr	r3, [r3, #0]
  4043a4:	685a      	ldr	r2, [r3, #4]
  4043a6:	f107 030b 	add.w	r3, r7, #11
  4043aa:	4610      	mov	r0, r2
  4043ac:	4619      	mov	r1, r3
  4043ae:	4b41      	ldr	r3, [pc, #260]	; (4044b4 <dat_task_dataRouter+0x1a0>)
  4043b0:	4798      	blx	r3
  4043b2:	4603      	mov	r3, r0
  4043b4:	2b00      	cmp	r3, #0
  4043b6:	d133      	bne.n	404420 <dat_task_dataRouter+0x10c>
		{
			//if byte exists, pass through to the daughter board and USB (if connected)
			if(daughterBoardPacket.packetSize < CMD_INCOMING_CMD_SIZE_MAX -1) //check we have room for the command. 
  4043b8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
  4043bc:	2b30      	cmp	r3, #48	; 0x30
  4043be:	d82a      	bhi.n	404416 <dat_task_dataRouter+0x102>
			{				
				daughterBoardPacket.packetData[daughterBoardPacket.packetSize++] = receivedByte;				
  4043c0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
  4043c4:	1c5a      	adds	r2, r3, #1
  4043c6:	b292      	uxth	r2, r2
  4043c8:	f8a7 2078 	strh.w	r2, [r7, #120]	; 0x78
  4043cc:	7afa      	ldrb	r2, [r7, #11]
  4043ce:	f107 0180 	add.w	r1, r7, #128	; 0x80
  4043d2:	440b      	add	r3, r1
  4043d4:	f803 2c3b 	strb.w	r2, [r3, #-59]
				if(receivedByte == '\n')
  4043d8:	7afb      	ldrb	r3, [r7, #11]
  4043da:	2b0a      	cmp	r3, #10
  4043dc:	d120      	bne.n	404420 <dat_task_dataRouter+0x10c>
				{
					//make sure the packet is null terminated
					daughterBoardPacket.packetData[daughterBoardPacket.packetSize] = 0x00;
  4043de:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
  4043e2:	f107 0280 	add.w	r2, r7, #128	; 0x80
  4043e6:	4413      	add	r3, r2
  4043e8:	2200      	movs	r2, #0
  4043ea:	f803 2c3b 	strb.w	r2, [r3, #-59]
					if(cmd_queue_commandQueue != NULL)
  4043ee:	4b35      	ldr	r3, [pc, #212]	; (4044c4 <dat_task_dataRouter+0x1b0>)
  4043f0:	681b      	ldr	r3, [r3, #0]
  4043f2:	2b00      	cmp	r3, #0
  4043f4:	d009      	beq.n	40440a <dat_task_dataRouter+0xf6>
					{
						if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &daughterBoardPacket,5) != TRUE)
  4043f6:	4b33      	ldr	r3, [pc, #204]	; (4044c4 <dat_task_dataRouter+0x1b0>)
  4043f8:	681a      	ldr	r2, [r3, #0]
  4043fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
  4043fe:	4610      	mov	r0, r2
  404400:	4619      	mov	r1, r3
  404402:	2205      	movs	r2, #5
  404404:	2300      	movs	r3, #0
  404406:	4c30      	ldr	r4, [pc, #192]	; (4044c8 <dat_task_dataRouter+0x1b4>)
  404408:	47a0      	blx	r4
						{
							//this is an error, we should log it. 
						}						
					}
					//clear the packet for the next one. 
					cmd_initPacketStructure(&daughterBoardPacket);
  40440a:	f107 0344 	add.w	r3, r7, #68	; 0x44
  40440e:	4618      	mov	r0, r3
  404410:	4b26      	ldr	r3, [pc, #152]	; (4044ac <dat_task_dataRouter+0x198>)
  404412:	4798      	blx	r3
  404414:	e004      	b.n	404420 <dat_task_dataRouter+0x10c>
				}
			}
			else
			{
				//the packet was too big, we should delete it, possibly log an error
				cmd_initPacketStructure(&daughterBoardPacket);
  404416:	f107 0344 	add.w	r3, r7, #68	; 0x44
  40441a:	4618      	mov	r0, r3
  40441c:	4b23      	ldr	r3, [pc, #140]	; (4044ac <dat_task_dataRouter+0x198>)
  40441e:	4798      	blx	r3
			}
		}
		//check if there's any data on the 
		if(udi_cdc_is_rx_ready() == true)
  404420:	4b2a      	ldr	r3, [pc, #168]	; (4044cc <dat_task_dataRouter+0x1b8>)
  404422:	4798      	blx	r3
  404424:	4603      	mov	r3, r0
  404426:	2b00      	cmp	r3, #0
  404428:	d039      	beq.n	40449e <dat_task_dataRouter+0x18a>
		{
			receivedUsbData = udi_cdc_getc();
  40442a:	4b29      	ldr	r3, [pc, #164]	; (4044d0 <dat_task_dataRouter+0x1bc>)
  40442c:	4798      	blx	r3
  40442e:	67f8      	str	r0, [r7, #124]	; 0x7c
			//if byte exists, pass through to the daughter board and USB (if connected)
			if(usbPacket.packetSize < CMD_INCOMING_CMD_SIZE_MAX -1) //check we have room for the command.
  404430:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
  404434:	2b30      	cmp	r3, #48	; 0x30
  404436:	d82c      	bhi.n	404492 <dat_task_dataRouter+0x17e>
			{
				usbPacket.packetData[usbPacket.packetSize++] = (char)receivedUsbData;
  404438:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
  40443c:	1c5a      	adds	r2, r3, #1
  40443e:	b292      	uxth	r2, r2
  404440:	f8a7 2040 	strh.w	r2, [r7, #64]	; 0x40
  404444:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
  404446:	b2d2      	uxtb	r2, r2
  404448:	f107 0180 	add.w	r1, r7, #128	; 0x80
  40444c:	440b      	add	r3, r1
  40444e:	f803 2c73 	strb.w	r2, [r3, #-115]
				if((char)receivedUsbData == '\n')
  404452:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
  404454:	b2db      	uxtb	r3, r3
  404456:	2b0a      	cmp	r3, #10
  404458:	d121      	bne.n	40449e <dat_task_dataRouter+0x18a>
				{
					//make sure the packet is null terminated
					usbPacket.packetData[usbPacket.packetSize] = 0x00;
  40445a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
  40445e:	f107 0280 	add.w	r2, r7, #128	; 0x80
  404462:	4413      	add	r3, r2
  404464:	2200      	movs	r2, #0
  404466:	f803 2c73 	strb.w	r2, [r3, #-115]
					if(cmd_queue_commandQueue != NULL)
  40446a:	4b16      	ldr	r3, [pc, #88]	; (4044c4 <dat_task_dataRouter+0x1b0>)
  40446c:	681b      	ldr	r3, [r3, #0]
  40446e:	2b00      	cmp	r3, #0
  404470:	d009      	beq.n	404486 <dat_task_dataRouter+0x172>
					{
						if(xQueueSendToBack(cmd_queue_commandQueue,( void * ) &usbPacket,5) != TRUE)
  404472:	4b14      	ldr	r3, [pc, #80]	; (4044c4 <dat_task_dataRouter+0x1b0>)
  404474:	681a      	ldr	r2, [r3, #0]
  404476:	f107 030c 	add.w	r3, r7, #12
  40447a:	4610      	mov	r0, r2
  40447c:	4619      	mov	r1, r3
  40447e:	2205      	movs	r2, #5
  404480:	2300      	movs	r3, #0
  404482:	4c11      	ldr	r4, [pc, #68]	; (4044c8 <dat_task_dataRouter+0x1b4>)
  404484:	47a0      	blx	r4
						{
							//this is an error, we should log it.
						}
					}
					//clear the packet for the next one.
					cmd_initPacketStructure(&usbPacket);
  404486:	f107 030c 	add.w	r3, r7, #12
  40448a:	4618      	mov	r0, r3
  40448c:	4b07      	ldr	r3, [pc, #28]	; (4044ac <dat_task_dataRouter+0x198>)
  40448e:	4798      	blx	r3
		}
		
		
				
		
	}	
  404490:	e769      	b.n	404366 <dat_task_dataRouter+0x52>
				}
			}
			else
			{
				//the packet was too big, we should delete it, possibly log an error
				cmd_initPacketStructure(&usbPacket);
  404492:	f107 030c 	add.w	r3, r7, #12
  404496:	4618      	mov	r0, r3
  404498:	4b04      	ldr	r3, [pc, #16]	; (4044ac <dat_task_dataRouter+0x198>)
  40449a:	4798      	blx	r3
		}
		
		
				
		
	}	
  40449c:	e763      	b.n	404366 <dat_task_dataRouter+0x52>
  40449e:	e762      	b.n	404366 <dat_task_dataRouter+0x52>
}
  4044a0:	3784      	adds	r7, #132	; 0x84
  4044a2:	46bd      	mov	sp, r7
  4044a4:	bd90      	pop	{r4, r7, pc}
  4044a6:	bf00      	nop
  4044a8:	20014fa0 	.word	0x20014fa0
  4044ac:	00404275 	.word	0x00404275
  4044b0:	00405c39 	.word	0x00405c39
  4044b4:	00405bb9 	.word	0x00405bb9
  4044b8:	00405ad1 	.word	0x00405ad1
  4044bc:	00400efd 	.word	0x00400efd
  4044c0:	00400fe9 	.word	0x00400fe9
  4044c4:	20000cac 	.word	0x20000cac
  4044c8:	0040681d 	.word	0x0040681d
  4044cc:	00400cfd 	.word	0x00400cfd
  4044d0:	00400df5 	.word	0x00400df5

004044d4 <dat_sendPacketToDataBoard>:

status_t dat_sendPacketToDataBoard(cmd_commandPacket_t* packet)
{
  4044d4:	b580      	push	{r7, lr}
  4044d6:	b082      	sub	sp, #8
  4044d8:	af00      	add	r7, sp, #0
  4044da:	6078      	str	r0, [r7, #4]
	//possibly add some sort of error handling here.
	drv_uart_putData(dataRouterConfig->dataBoardUart, packet->packetData, packet->packetSize);	
  4044dc:	4b08      	ldr	r3, [pc, #32]	; (404500 <dat_sendPacketToDataBoard+0x2c>)
  4044de:	681b      	ldr	r3, [r3, #0]
  4044e0:	6819      	ldr	r1, [r3, #0]
  4044e2:	687b      	ldr	r3, [r7, #4]
  4044e4:	1c5a      	adds	r2, r3, #1
  4044e6:	687b      	ldr	r3, [r7, #4]
  4044e8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
  4044ea:	4608      	mov	r0, r1
  4044ec:	4611      	mov	r1, r2
  4044ee:	461a      	mov	r2, r3
  4044f0:	4b04      	ldr	r3, [pc, #16]	; (404504 <dat_sendPacketToDataBoard+0x30>)
  4044f2:	4798      	blx	r3
	return STATUS_PASS;
  4044f4:	2300      	movs	r3, #0
	
}
  4044f6:	4618      	mov	r0, r3
  4044f8:	3708      	adds	r7, #8
  4044fa:	46bd      	mov	sp, r7
  4044fc:	bd80      	pop	{r7, pc}
  4044fe:	bf00      	nop
  404500:	20014fa0 	.word	0x20014fa0
  404504:	00405c75 	.word	0x00405c75

00404508 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  404508:	b480      	push	{r7}
  40450a:	b083      	sub	sp, #12
  40450c:	af00      	add	r7, sp, #0
  40450e:	4603      	mov	r3, r0
  404510:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404512:	4b08      	ldr	r3, [pc, #32]	; (404534 <NVIC_EnableIRQ+0x2c>)
  404514:	f997 2007 	ldrsb.w	r2, [r7, #7]
  404518:	0952      	lsrs	r2, r2, #5
  40451a:	79f9      	ldrb	r1, [r7, #7]
  40451c:	f001 011f 	and.w	r1, r1, #31
  404520:	2001      	movs	r0, #1
  404522:	fa00 f101 	lsl.w	r1, r0, r1
  404526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40452a:	370c      	adds	r7, #12
  40452c:	46bd      	mov	sp, r7
  40452e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404532:	4770      	bx	lr
  404534:	e000e100 	.word	0xe000e100

00404538 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  404538:	b480      	push	{r7}
  40453a:	b089      	sub	sp, #36	; 0x24
  40453c:	af00      	add	r7, sp, #0
  40453e:	6078      	str	r0, [r7, #4]
  404540:	687b      	ldr	r3, [r7, #4]
  404542:	61fb      	str	r3, [r7, #28]
  404544:	69fb      	ldr	r3, [r7, #28]
  404546:	61bb      	str	r3, [r7, #24]
  404548:	69bb      	ldr	r3, [r7, #24]
  40454a:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40454c:	697b      	ldr	r3, [r7, #20]
  40454e:	095b      	lsrs	r3, r3, #5
  404550:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404552:	693b      	ldr	r3, [r7, #16]
  404554:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404558:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40455c:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40455e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  404560:	69fb      	ldr	r3, [r7, #28]
  404562:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404564:	68fb      	ldr	r3, [r7, #12]
  404566:	f003 031f 	and.w	r3, r3, #31
  40456a:	2101      	movs	r1, #1
  40456c:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  404570:	4013      	ands	r3, r2
  404572:	2b00      	cmp	r3, #0
  404574:	bf0c      	ite	eq
  404576:	2300      	moveq	r3, #0
  404578:	2301      	movne	r3, #1
  40457a:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  40457c:	4618      	mov	r0, r3
  40457e:	3724      	adds	r7, #36	; 0x24
  404580:	46bd      	mov	sp, r7
  404582:	f85d 7b04 	ldr.w	r7, [sp], #4
  404586:	4770      	bx	lr

00404588 <drv_gpio_initializeAll>:
 * @brief initialize all GPIO
 * @param 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_gpio_initializeAll(void)
{
  404588:	b580      	push	{r7, lr}
  40458a:	b084      	sub	sp, #16
  40458c:	af00      	add	r7, sp, #0
	status_t status = STATUS_PASS; 
  40458e:	2300      	movs	r3, #0
  404590:	73fb      	strb	r3, [r7, #15]
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
  404592:	230f      	movs	r3, #15
  404594:	607b      	str	r3, [r7, #4]
	int i = 0; 
  404596:	2300      	movs	r3, #0
  404598:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < numGpio ; i++)
  40459a:	2300      	movs	r3, #0
  40459c:	60bb      	str	r3, [r7, #8]
  40459e:	e010      	b.n	4045c2 <drv_gpio_initializeAll+0x3a>
	{
		if(drv_gpio_config(&gpioConfig[i]) != STATUS_PASS)
  4045a0:	68bb      	ldr	r3, [r7, #8]
  4045a2:	011a      	lsls	r2, r3, #4
  4045a4:	4b0b      	ldr	r3, [pc, #44]	; (4045d4 <drv_gpio_initializeAll+0x4c>)
  4045a6:	4413      	add	r3, r2
  4045a8:	4618      	mov	r0, r3
  4045aa:	4b0b      	ldr	r3, [pc, #44]	; (4045d8 <drv_gpio_initializeAll+0x50>)
  4045ac:	4798      	blx	r3
  4045ae:	4603      	mov	r3, r0
  4045b0:	2b00      	cmp	r3, #0
  4045b2:	d003      	beq.n	4045bc <drv_gpio_initializeAll+0x34>
		{
			status |= STATUS_FAIL;
  4045b4:	7bfb      	ldrb	r3, [r7, #15]
  4045b6:	f043 0301 	orr.w	r3, r3, #1
  4045ba:	73fb      	strb	r3, [r7, #15]
status_t drv_gpio_initializeAll(void)
{
	status_t status = STATUS_PASS; 
	int numGpio = sizeof(gpioConfig)/sizeof(drv_gpio_config_t); 
	int i = 0; 
	for(i = 0; i < numGpio ; i++)
  4045bc:	68bb      	ldr	r3, [r7, #8]
  4045be:	3301      	adds	r3, #1
  4045c0:	60bb      	str	r3, [r7, #8]
  4045c2:	68ba      	ldr	r2, [r7, #8]
  4045c4:	687b      	ldr	r3, [r7, #4]
  4045c6:	429a      	cmp	r2, r3
  4045c8:	dbea      	blt.n	4045a0 <drv_gpio_initializeAll+0x18>
		if(drv_gpio_config(&gpioConfig[i]) != STATUS_PASS)
		{
			status |= STATUS_FAIL;
		}
	}	
	return status; 
  4045ca:	7bfb      	ldrb	r3, [r7, #15]
}
  4045cc:	4618      	mov	r0, r3
  4045ce:	3710      	adds	r7, #16
  4045d0:	46bd      	mov	sp, r7
  4045d2:	bd80      	pop	{r7, pc}
  4045d4:	20000090 	.word	0x20000090
  4045d8:	004045dd 	.word	0x004045dd

004045dc <drv_gpio_config>:
 * @brief Set and configure all GPIOs
 * @param drv_gpio_config_t* gpioConfig
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config(drv_gpio_config_t* gpioConfig)
{
  4045dc:	b590      	push	{r4, r7, lr}
  4045de:	b08d      	sub	sp, #52	; 0x34
  4045e0:	af02      	add	r7, sp, #8
  4045e2:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS;
  4045e4:	2300      	movs	r3, #0
  4045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned long PinFlag = 0;	
  4045ea:	2300      	movs	r3, #0
  4045ec:	627b      	str	r3, [r7, #36]	; 0x24
	if(gpioConfig->pinMode == DRV_GPIO_PIN_MODE_INPUT)	//Check if input or output
  4045ee:	687b      	ldr	r3, [r7, #4]
  4045f0:	791b      	ldrb	r3, [r3, #4]
  4045f2:	2b01      	cmp	r3, #1
  4045f4:	f040 808f 	bne.w	404716 <drv_gpio_config+0x13a>
	{
		PinFlag |= PIO_TYPE_PIO_INPUT;	//Set as input
  4045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4045fa:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
  4045fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (gpioConfig->pullUpEnabled == TRUE)
  404600:	687b      	ldr	r3, [r7, #4]
  404602:	7b1b      	ldrb	r3, [r3, #12]
  404604:	2b01      	cmp	r3, #1
  404606:	d103      	bne.n	404610 <drv_gpio_config+0x34>
		{
			PinFlag |= PIO_PULLUP;	//enable the pull up
  404608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40460a:	f043 0301 	orr.w	r3, r3, #1
  40460e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		
		if (gpioConfig->debounceEnabled == TRUE)
  404610:	687b      	ldr	r3, [r7, #4]
  404612:	7b5b      	ldrb	r3, [r3, #13]
  404614:	2b01      	cmp	r3, #1
  404616:	d110      	bne.n	40463a <drv_gpio_config+0x5e>
		{
			//PinFlag |= PIO_DEBOUNCE;	//enable debounce filter
			Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);
  404618:	687b      	ldr	r3, [r7, #4]
  40461a:	681b      	ldr	r3, [r3, #0]
  40461c:	4618      	mov	r0, r3
  40461e:	4b4d      	ldr	r3, [pc, #308]	; (404754 <drv_gpio_config+0x178>)
  404620:	4798      	blx	r3
  404622:	61f8      	str	r0, [r7, #28]
			uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  404624:	687b      	ldr	r3, [r7, #4]
  404626:	681b      	ldr	r3, [r3, #0]
  404628:	4618      	mov	r0, r3
  40462a:	4b4b      	ldr	r3, [pc, #300]	; (404758 <drv_gpio_config+0x17c>)
  40462c:	4798      	blx	r3
  40462e:	61b8      	str	r0, [r7, #24]
			pio_set_debounce_filter(p_pio, PinMask, DEBOUNCE_PERIOD);
  404630:	69f8      	ldr	r0, [r7, #28]
  404632:	69b9      	ldr	r1, [r7, #24]
  404634:	2205      	movs	r2, #5
  404636:	4b49      	ldr	r3, [pc, #292]	; (40475c <drv_gpio_config+0x180>)
  404638:	4798      	blx	r3
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);	
  40463a:	687b      	ldr	r3, [r7, #4]
  40463c:	681b      	ldr	r3, [r3, #0]
  40463e:	4618      	mov	r0, r3
  404640:	4b47      	ldr	r3, [pc, #284]	; (404760 <drv_gpio_config+0x184>)
  404642:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  404644:	687b      	ldr	r3, [r7, #4]
  404646:	681b      	ldr	r3, [r3, #0]
  404648:	4618      	mov	r0, r3
  40464a:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40464c:	4b45      	ldr	r3, [pc, #276]	; (404764 <drv_gpio_config+0x188>)
  40464e:	4798      	blx	r3
		 
		PinFlag = 0;	//Reset the PinFlag to use it to configure interrupt
  404650:	2300      	movs	r3, #0
  404652:	627b      	str	r3, [r7, #36]	; 0x24
		switch(gpioConfig->interruptType)	//set interrupt configuration flag
  404654:	687b      	ldr	r3, [r7, #4]
  404656:	799b      	ldrb	r3, [r3, #6]
  404658:	2b03      	cmp	r3, #3
  40465a:	d81f      	bhi.n	40469c <drv_gpio_config+0xc0>
  40465c:	a201      	add	r2, pc, #4	; (adr r2, 404664 <drv_gpio_config+0x88>)
  40465e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404662:	bf00      	nop
  404664:	00404675 	.word	0x00404675
  404668:	0040467f 	.word	0x0040467f
  40466c:	00404689 	.word	0x00404689
  404670:	00404693 	.word	0x00404693
		{
			case DRV_GPIO_INTERRUPT_HIGH_EDGE :
				PinFlag |= PIO_IT_RISE_EDGE | PIO_IT_AIME;
  404674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404676:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  40467a:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  40467c:	e00f      	b.n	40469e <drv_gpio_config+0xc2>
			case DRV_GPIO_INTERRUPT_LOW_EDGE :
				PinFlag |= PIO_IT_FALL_EDGE | PIO_IT_AIME;
  40467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404680:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  404684:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  404686:	e00a      	b.n	40469e <drv_gpio_config+0xc2>
			case DRV_GPIO_INTERRUPT_HIGH_LVL :
				PinFlag |= PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  404688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40468a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  40468e:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  404690:	e005      	b.n	40469e <drv_gpio_config+0xc2>
			case DRV_GPIO_INTERRUPT_LOW_LVL :
				PinFlag |= PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  404692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404694:	f043 0310 	orr.w	r3, r3, #16
  404698:	627b      	str	r3, [r7, #36]	; 0x24
				break;
  40469a:	e000      	b.n	40469e <drv_gpio_config+0xc2>
			case DRV_GPIO_INTERRUPT_NONE :
			default:
				break;
  40469c:	bf00      	nop
		}
		Pio *p_pio = pio_get_pin_group(gpioConfig->pinId);	//peripheral ID
  40469e:	687b      	ldr	r3, [r7, #4]
  4046a0:	681b      	ldr	r3, [r3, #0]
  4046a2:	4618      	mov	r0, r3
  4046a4:	4b2b      	ldr	r3, [pc, #172]	; (404754 <drv_gpio_config+0x178>)
  4046a6:	4798      	blx	r3
  4046a8:	6178      	str	r0, [r7, #20]
		uint32_t PinMask = pio_get_pin_group_mask(gpioConfig->pinId);	//PinMask
  4046aa:	687b      	ldr	r3, [r7, #4]
  4046ac:	681b      	ldr	r3, [r3, #0]
  4046ae:	4618      	mov	r0, r3
  4046b0:	4b29      	ldr	r3, [pc, #164]	; (404758 <drv_gpio_config+0x17c>)
  4046b2:	4798      	blx	r3
  4046b4:	6138      	str	r0, [r7, #16]
		if (PinFlag & (PIO_IT_RISE_EDGE | PIO_IT_FALL_EDGE | PIO_IT_HIGH_LEVEL | PIO_IT_LOW_LEVEL))	//if set as interrupt, enable and configure it
  4046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4046bc:	2b00      	cmp	r3, #0
  4046be:	d021      	beq.n	404704 <drv_gpio_config+0x128>
		{			
			uint32_t PinPio = pio_get_pin_group_id(gpioConfig->pinId);	//Pin ID
  4046c0:	687b      	ldr	r3, [r7, #4]
  4046c2:	681b      	ldr	r3, [r3, #0]
  4046c4:	4618      	mov	r0, r3
  4046c6:	4b28      	ldr	r3, [pc, #160]	; (404768 <drv_gpio_config+0x18c>)
  4046c8:	4798      	blx	r3
  4046ca:	60f8      	str	r0, [r7, #12]
			pio_handler_set(p_pio, PinPio, PinMask, PinFlag, gpioConfig->interruptHandler);
  4046cc:	687b      	ldr	r3, [r7, #4]
  4046ce:	689b      	ldr	r3, [r3, #8]
  4046d0:	9300      	str	r3, [sp, #0]
  4046d2:	6978      	ldr	r0, [r7, #20]
  4046d4:	68f9      	ldr	r1, [r7, #12]
  4046d6:	693a      	ldr	r2, [r7, #16]
  4046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046da:	4c24      	ldr	r4, [pc, #144]	; (40476c <drv_gpio_config+0x190>)
  4046dc:	47a0      	blx	r4
			pio_enable_interrupt(p_pio, PinMask);
  4046de:	6978      	ldr	r0, [r7, #20]
  4046e0:	6939      	ldr	r1, [r7, #16]
  4046e2:	4b23      	ldr	r3, [pc, #140]	; (404770 <drv_gpio_config+0x194>)
  4046e4:	4798      	blx	r3
			if (p_pio == PIOA)
  4046e6:	697a      	ldr	r2, [r7, #20]
  4046e8:	4b22      	ldr	r3, [pc, #136]	; (404774 <drv_gpio_config+0x198>)
  4046ea:	429a      	cmp	r2, r3
  4046ec:	d103      	bne.n	4046f6 <drv_gpio_config+0x11a>
			{
				NVIC_EnableIRQ(PIOA_IRQn);
  4046ee:	200b      	movs	r0, #11
  4046f0:	4b21      	ldr	r3, [pc, #132]	; (404778 <drv_gpio_config+0x19c>)
  4046f2:	4798      	blx	r3
  4046f4:	e006      	b.n	404704 <drv_gpio_config+0x128>
			}
			else if (p_pio == PIOB)
  4046f6:	697a      	ldr	r2, [r7, #20]
  4046f8:	4b20      	ldr	r3, [pc, #128]	; (40477c <drv_gpio_config+0x1a0>)
  4046fa:	429a      	cmp	r2, r3
  4046fc:	d102      	bne.n	404704 <drv_gpio_config+0x128>
			{
				NVIC_EnableIRQ(PIOB_IRQn);
  4046fe:	200c      	movs	r0, #12
  404700:	4b1d      	ldr	r3, [pc, #116]	; (404778 <drv_gpio_config+0x19c>)
  404702:	4798      	blx	r3
			}
		}
		//turn off any pulldown resistors
		p_pio->PIO_PPDDR |= PinMask; 
  404704:	697b      	ldr	r3, [r7, #20]
  404706:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  40470a:	693b      	ldr	r3, [r7, #16]
  40470c:	431a      	orrs	r2, r3
  40470e:	697b      	ldr	r3, [r7, #20]
  404710:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  404714:	e017      	b.n	404746 <drv_gpio_config+0x16a>
		
	}
	else	//The pin is output
	{
		if (gpioConfig->initialPinState == DRV_GPIO_PIN_STATE_HIGH)
  404716:	687b      	ldr	r3, [r7, #4]
  404718:	795b      	ldrb	r3, [r3, #5]
  40471a:	2b01      	cmp	r3, #1
  40471c:	d104      	bne.n	404728 <drv_gpio_config+0x14c>
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_1;	//set default pin state
  40471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404720:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  404724:	627b      	str	r3, [r7, #36]	; 0x24
  404726:	e003      	b.n	404730 <drv_gpio_config+0x154>
		} 
		else
		{
			PinFlag |= PIO_TYPE_PIO_OUTPUT_0;	//set default pin state
  404728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40472a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
  40472e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		
		pmc_enable_periph_clk(gpioConfig->pinId);
  404730:	687b      	ldr	r3, [r7, #4]
  404732:	681b      	ldr	r3, [r3, #0]
  404734:	4618      	mov	r0, r3
  404736:	4b0a      	ldr	r3, [pc, #40]	; (404760 <drv_gpio_config+0x184>)
  404738:	4798      	blx	r3
		pio_configure_pin(gpioConfig->pinId, PinFlag);
  40473a:	687b      	ldr	r3, [r7, #4]
  40473c:	681b      	ldr	r3, [r3, #0]
  40473e:	4618      	mov	r0, r3
  404740:	6a79      	ldr	r1, [r7, #36]	; 0x24
  404742:	4b08      	ldr	r3, [pc, #32]	; (404764 <drv_gpio_config+0x188>)
  404744:	4798      	blx	r3
	}
	
	return status;
  404746:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
  40474a:	4618      	mov	r0, r3
  40474c:	372c      	adds	r7, #44	; 0x2c
  40474e:	46bd      	mov	sp, r7
  404750:	bd90      	pop	{r4, r7, pc}
  404752:	bf00      	nop
  404754:	00409221 	.word	0x00409221
  404758:	00409269 	.word	0x00409269
  40475c:	00408cbd 	.word	0x00408cbd
  404760:	00409665 	.word	0x00409665
  404764:	0040906d 	.word	0x0040906d
  404768:	00409249 	.word	0x00409249
  40476c:	00409359 	.word	0x00409359
  404770:	00408f51 	.word	0x00408f51
  404774:	400e0e00 	.word	0x400e0e00
  404778:	00404509 	.word	0x00404509
  40477c:	400e1000 	.word	0x400e1000

00404780 <drv_gpio_setPinState>:
 * @brief Set a GPIO to HIGH or LOW
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_setPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t state)
{
  404780:	b580      	push	{r7, lr}
  404782:	b084      	sub	sp, #16
  404784:	af00      	add	r7, sp, #0
  404786:	4602      	mov	r2, r0
  404788:	460b      	mov	r3, r1
  40478a:	71fa      	strb	r2, [r7, #7]
  40478c:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_PASS;
  40478e:	2300      	movs	r3, #0
  404790:	72fb      	strb	r3, [r7, #11]
	uint32_t pinFlag = 0x00; 
  404792:	2300      	movs	r3, #0
  404794:	60fb      	str	r3, [r7, #12]
	if(gpioConfig[pin].pinMode != DRV_GPIO_PIN_MODE_OUTPUT)
  404796:	79fb      	ldrb	r3, [r7, #7]
  404798:	4a32      	ldr	r2, [pc, #200]	; (404864 <drv_gpio_setPinState+0xe4>)
  40479a:	011b      	lsls	r3, r3, #4
  40479c:	4413      	add	r3, r2
  40479e:	791b      	ldrb	r3, [r3, #4]
  4047a0:	2b00      	cmp	r3, #0
  4047a2:	d001      	beq.n	4047a8 <drv_gpio_setPinState+0x28>
	{
		return STATUS_FAIL;
  4047a4:	2301      	movs	r3, #1
  4047a6:	e059      	b.n	40485c <drv_gpio_setPinState+0xdc>
	}
	if(gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_HIGH || gpioConfig[pin].currentPinState == DRV_GPIO_PIN_STATE_PULLED_LOW)
  4047a8:	79fb      	ldrb	r3, [r7, #7]
  4047aa:	4a2e      	ldr	r2, [pc, #184]	; (404864 <drv_gpio_setPinState+0xe4>)
  4047ac:	011b      	lsls	r3, r3, #4
  4047ae:	4413      	add	r3, r2
  4047b0:	3308      	adds	r3, #8
  4047b2:	79db      	ldrb	r3, [r3, #7]
  4047b4:	2b02      	cmp	r3, #2
  4047b6:	d007      	beq.n	4047c8 <drv_gpio_setPinState+0x48>
  4047b8:	79fb      	ldrb	r3, [r7, #7]
  4047ba:	4a2a      	ldr	r2, [pc, #168]	; (404864 <drv_gpio_setPinState+0xe4>)
  4047bc:	011b      	lsls	r3, r3, #4
  4047be:	4413      	add	r3, r2
  4047c0:	3308      	adds	r3, #8
  4047c2:	79db      	ldrb	r3, [r3, #7]
  4047c4:	2b03      	cmp	r3, #3
  4047c6:	d11a      	bne.n	4047fe <drv_gpio_setPinState+0x7e>
	{
		if(state == DRV_GPIO_PIN_STATE_HIGH )
  4047c8:	79bb      	ldrb	r3, [r7, #6]
  4047ca:	2b01      	cmp	r3, #1
  4047cc:	d10a      	bne.n	4047e4 <drv_gpio_setPinState+0x64>
		{
			//we have to set the pin back to an output
			pinFlag |= PIO_TYPE_PIO_OUTPUT_1;
  4047ce:	68fb      	ldr	r3, [r7, #12]
  4047d0:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
  4047d4:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);
  4047d6:	4b23      	ldr	r3, [pc, #140]	; (404864 <drv_gpio_setPinState+0xe4>)
  4047d8:	681b      	ldr	r3, [r3, #0]
  4047da:	4618      	mov	r0, r3
  4047dc:	68f9      	ldr	r1, [r7, #12]
  4047de:	4b22      	ldr	r3, [pc, #136]	; (404868 <drv_gpio_setPinState+0xe8>)
  4047e0:	4798      	blx	r3
  4047e2:	e00c      	b.n	4047fe <drv_gpio_setPinState+0x7e>
		}
		else if(state == DRV_GPIO_PIN_STATE_LOW)
  4047e4:	79bb      	ldrb	r3, [r7, #6]
  4047e6:	2b00      	cmp	r3, #0
  4047e8:	d109      	bne.n	4047fe <drv_gpio_setPinState+0x7e>
		{
			pinFlag |= PIO_TYPE_PIO_OUTPUT_0;
  4047ea:	68fb      	ldr	r3, [r7, #12]
  4047ec:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
  4047f0:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);			
  4047f2:	4b1c      	ldr	r3, [pc, #112]	; (404864 <drv_gpio_setPinState+0xe4>)
  4047f4:	681b      	ldr	r3, [r3, #0]
  4047f6:	4618      	mov	r0, r3
  4047f8:	68f9      	ldr	r1, [r7, #12]
  4047fa:	4b1b      	ldr	r3, [pc, #108]	; (404868 <drv_gpio_setPinState+0xe8>)
  4047fc:	4798      	blx	r3
		}
	}
	//the output should be in the right state. 
	
	switch(state)
  4047fe:	79bb      	ldrb	r3, [r7, #6]
  404800:	2b03      	cmp	r3, #3
  404802:	d82a      	bhi.n	40485a <drv_gpio_setPinState+0xda>
  404804:	a201      	add	r2, pc, #4	; (adr r2, 40480c <drv_gpio_setPinState+0x8c>)
  404806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40480a:	bf00      	nop
  40480c:	0040482f 	.word	0x0040482f
  404810:	0040481d 	.word	0x0040481d
  404814:	00404841 	.word	0x00404841
  404818:	0040485b 	.word	0x0040485b
	{
		case DRV_GPIO_PIN_STATE_HIGH:
			pio_set_pin_high(gpioConfig[pin].pinId);
  40481c:	79fb      	ldrb	r3, [r7, #7]
  40481e:	4a11      	ldr	r2, [pc, #68]	; (404864 <drv_gpio_setPinState+0xe4>)
  404820:	011b      	lsls	r3, r3, #4
  404822:	4413      	add	r3, r2
  404824:	681b      	ldr	r3, [r3, #0]
  404826:	4618      	mov	r0, r3
  404828:	4b10      	ldr	r3, [pc, #64]	; (40486c <drv_gpio_setPinState+0xec>)
  40482a:	4798      	blx	r3
		break;
  40482c:	e015      	b.n	40485a <drv_gpio_setPinState+0xda>
		case DRV_GPIO_PIN_STATE_LOW:
			pio_set_pin_low(gpioConfig[pin].pinId);
  40482e:	79fb      	ldrb	r3, [r7, #7]
  404830:	4a0c      	ldr	r2, [pc, #48]	; (404864 <drv_gpio_setPinState+0xe4>)
  404832:	011b      	lsls	r3, r3, #4
  404834:	4413      	add	r3, r2
  404836:	681b      	ldr	r3, [r3, #0]
  404838:	4618      	mov	r0, r3
  40483a:	4b0d      	ldr	r3, [pc, #52]	; (404870 <drv_gpio_setPinState+0xf0>)
  40483c:	4798      	blx	r3
		break;
  40483e:	e00c      	b.n	40485a <drv_gpio_setPinState+0xda>
		case DRV_GPIO_PIN_STATE_PULLED_HIGH:
			pinFlag |= PIO_TYPE_PIO_INPUT | PIO_PULLUP;	//Set as input with pull up. 
  404840:	68fb      	ldr	r3, [r7, #12]
  404842:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
  404846:	f043 0301 	orr.w	r3, r3, #1
  40484a:	60fb      	str	r3, [r7, #12]
			pio_configure_pin(gpioConfig->pinId, pinFlag);
  40484c:	4b05      	ldr	r3, [pc, #20]	; (404864 <drv_gpio_setPinState+0xe4>)
  40484e:	681b      	ldr	r3, [r3, #0]
  404850:	4618      	mov	r0, r3
  404852:	68f9      	ldr	r1, [r7, #12]
  404854:	4b04      	ldr	r3, [pc, #16]	; (404868 <drv_gpio_setPinState+0xe8>)
  404856:	4798      	blx	r3
		break;
  404858:	bf00      	nop
		case DRV_GPIO_PIN_STATE_PULLED_LOW:
		break; 
	}
	return status;
  40485a:	7afb      	ldrb	r3, [r7, #11]
}
  40485c:	4618      	mov	r0, r3
  40485e:	3710      	adds	r7, #16
  404860:	46bd      	mov	sp, r7
  404862:	bd80      	pop	{r7, pc}
  404864:	20000090 	.word	0x20000090
  404868:	0040906d 	.word	0x0040906d
  40486c:	00408fbd 	.word	0x00408fbd
  404870:	00408fe9 	.word	0x00408fe9

00404874 <drv_gpio_getPinState>:
 * @brief Get a GPIO level
 * @param drv_gpio_pins_t pin, drv_gpio_pin_state_t state
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_getPinState(drv_gpio_pins_t pin, drv_gpio_pin_state_t* state)
{
  404874:	b580      	push	{r7, lr}
  404876:	b084      	sub	sp, #16
  404878:	af00      	add	r7, sp, #0
  40487a:	4603      	mov	r3, r0
  40487c:	6039      	str	r1, [r7, #0]
  40487e:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  404880:	2300      	movs	r3, #0
  404882:	73fb      	strb	r3, [r7, #15]
	bool value = ioport_get_pin_level(gpioConfig[pin].pinId);
  404884:	79fb      	ldrb	r3, [r7, #7]
  404886:	4a0d      	ldr	r2, [pc, #52]	; (4048bc <drv_gpio_getPinState+0x48>)
  404888:	011b      	lsls	r3, r3, #4
  40488a:	4413      	add	r3, r2
  40488c:	681b      	ldr	r3, [r3, #0]
  40488e:	4618      	mov	r0, r3
  404890:	4b0b      	ldr	r3, [pc, #44]	; (4048c0 <drv_gpio_getPinState+0x4c>)
  404892:	4798      	blx	r3
  404894:	4603      	mov	r3, r0
  404896:	73bb      	strb	r3, [r7, #14]
	if (value == false)
  404898:	7bbb      	ldrb	r3, [r7, #14]
  40489a:	f083 0301 	eor.w	r3, r3, #1
  40489e:	b2db      	uxtb	r3, r3
  4048a0:	2b00      	cmp	r3, #0
  4048a2:	d003      	beq.n	4048ac <drv_gpio_getPinState+0x38>
	{
		*state = DRV_GPIO_PIN_STATE_LOW;
  4048a4:	683b      	ldr	r3, [r7, #0]
  4048a6:	2200      	movs	r2, #0
  4048a8:	701a      	strb	r2, [r3, #0]
  4048aa:	e002      	b.n	4048b2 <drv_gpio_getPinState+0x3e>
	}
	else
	{
		*state = DRV_GPIO_PIN_STATE_HIGH;
  4048ac:	683b      	ldr	r3, [r7, #0]
  4048ae:	2201      	movs	r2, #1
  4048b0:	701a      	strb	r2, [r3, #0]
	}
	return status;
  4048b2:	7bfb      	ldrb	r3, [r7, #15]
}
  4048b4:	4618      	mov	r0, r3
  4048b6:	3710      	adds	r7, #16
  4048b8:	46bd      	mov	sp, r7
  4048ba:	bd80      	pop	{r7, pc}
  4048bc:	20000090 	.word	0x20000090
  4048c0:	00404539 	.word	0x00404539

004048c4 <drv_gpio_togglePin>:
 * @brief Toggle a GPIO level
 * @param drv_gpio_pins_t pin
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_togglePin(drv_gpio_pins_t pin)
{
  4048c4:	b580      	push	{r7, lr}
  4048c6:	b084      	sub	sp, #16
  4048c8:	af00      	add	r7, sp, #0
  4048ca:	4603      	mov	r3, r0
  4048cc:	71fb      	strb	r3, [r7, #7]
	status_t status = STATUS_PASS;
  4048ce:	2300      	movs	r3, #0
  4048d0:	73fb      	strb	r3, [r7, #15]
	pio_toggle_pin(gpioConfig[pin].pinId);
  4048d2:	79fb      	ldrb	r3, [r7, #7]
  4048d4:	4a05      	ldr	r2, [pc, #20]	; (4048ec <drv_gpio_togglePin+0x28>)
  4048d6:	011b      	lsls	r3, r3, #4
  4048d8:	4413      	add	r3, r2
  4048da:	681b      	ldr	r3, [r3, #0]
  4048dc:	4618      	mov	r0, r3
  4048de:	4b04      	ldr	r3, [pc, #16]	; (4048f0 <drv_gpio_togglePin+0x2c>)
  4048e0:	4798      	blx	r3
	return status;
  4048e2:	7bfb      	ldrb	r3, [r7, #15]
}
  4048e4:	4618      	mov	r0, r3
  4048e6:	3710      	adds	r7, #16
  4048e8:	46bd      	mov	sp, r7
  4048ea:	bd80      	pop	{r7, pc}
  4048ec:	20000090 	.word	0x20000090
  4048f0:	00409015 	.word	0x00409015

004048f4 <drv_gpio_config_interrupt_handler>:
 * @brief Set Interrupt Configuration for the requested pin, and also what handler to use
 * @param drv_gpio_pins_t pinId, unsigned long pinFlag, void* handler 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/
status_t drv_gpio_config_interrupt_handler(drv_gpio_pins_t pin, drv_gpio_interrupt_t pinInt, void* handler)
{
  4048f4:	b590      	push	{r4, r7, lr}
  4048f6:	b08b      	sub	sp, #44	; 0x2c
  4048f8:	af02      	add	r7, sp, #8
  4048fa:	460b      	mov	r3, r1
  4048fc:	603a      	str	r2, [r7, #0]
  4048fe:	4602      	mov	r2, r0
  404900:	71fa      	strb	r2, [r7, #7]
  404902:	71bb      	strb	r3, [r7, #6]
	status_t status = STATUS_FAIL;
  404904:	2301      	movs	r3, #1
  404906:	77fb      	strb	r3, [r7, #31]
	unsigned long PinFlag = 0;
  404908:	2300      	movs	r3, #0
  40490a:	61bb      	str	r3, [r7, #24]
	Pio *p_pio = pio_get_pin_group(gpioConfig[pin].pinId);	//peripheral ID
  40490c:	79fb      	ldrb	r3, [r7, #7]
  40490e:	4a25      	ldr	r2, [pc, #148]	; (4049a4 <drv_gpio_config_interrupt_handler+0xb0>)
  404910:	011b      	lsls	r3, r3, #4
  404912:	4413      	add	r3, r2
  404914:	681b      	ldr	r3, [r3, #0]
  404916:	4618      	mov	r0, r3
  404918:	4b23      	ldr	r3, [pc, #140]	; (4049a8 <drv_gpio_config_interrupt_handler+0xb4>)
  40491a:	4798      	blx	r3
  40491c:	6178      	str	r0, [r7, #20]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[pin].pinId);	//PinMask
  40491e:	79fb      	ldrb	r3, [r7, #7]
  404920:	4a20      	ldr	r2, [pc, #128]	; (4049a4 <drv_gpio_config_interrupt_handler+0xb0>)
  404922:	011b      	lsls	r3, r3, #4
  404924:	4413      	add	r3, r2
  404926:	681b      	ldr	r3, [r3, #0]
  404928:	4618      	mov	r0, r3
  40492a:	4b20      	ldr	r3, [pc, #128]	; (4049ac <drv_gpio_config_interrupt_handler+0xb8>)
  40492c:	4798      	blx	r3
  40492e:	6138      	str	r0, [r7, #16]
	uint32_t PinPio = pio_get_pin_group_id(gpioConfig[pin].pinId);	//Pin ID
  404930:	79fb      	ldrb	r3, [r7, #7]
  404932:	4a1c      	ldr	r2, [pc, #112]	; (4049a4 <drv_gpio_config_interrupt_handler+0xb0>)
  404934:	011b      	lsls	r3, r3, #4
  404936:	4413      	add	r3, r2
  404938:	681b      	ldr	r3, [r3, #0]
  40493a:	4618      	mov	r0, r3
  40493c:	4b1c      	ldr	r3, [pc, #112]	; (4049b0 <drv_gpio_config_interrupt_handler+0xbc>)
  40493e:	4798      	blx	r3
  404940:	60f8      	str	r0, [r7, #12]
	if (pinInt == DRV_GPIO_INTERRUPT_HIGH_EDGE)
  404942:	79bb      	ldrb	r3, [r7, #6]
  404944:	2b00      	cmp	r3, #0
  404946:	d104      	bne.n	404952 <drv_gpio_config_interrupt_handler+0x5e>
	{
		PinFlag = PIO_IT_RISE_EDGE | PIO_IT_AIME;
  404948:	2370      	movs	r3, #112	; 0x70
  40494a:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  40494c:	2300      	movs	r3, #0
  40494e:	77fb      	strb	r3, [r7, #31]
  404950:	e016      	b.n	404980 <drv_gpio_config_interrupt_handler+0x8c>
	} 
	else if(pinInt == DRV_GPIO_INTERRUPT_LOW_EDGE)
  404952:	79bb      	ldrb	r3, [r7, #6]
  404954:	2b01      	cmp	r3, #1
  404956:	d104      	bne.n	404962 <drv_gpio_config_interrupt_handler+0x6e>
	{
		PinFlag = PIO_IT_FALL_EDGE | PIO_IT_AIME;
  404958:	2350      	movs	r3, #80	; 0x50
  40495a:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  40495c:	2300      	movs	r3, #0
  40495e:	77fb      	strb	r3, [r7, #31]
  404960:	e00e      	b.n	404980 <drv_gpio_config_interrupt_handler+0x8c>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_HIGH_LVL)
  404962:	79bb      	ldrb	r3, [r7, #6]
  404964:	2b02      	cmp	r3, #2
  404966:	d104      	bne.n	404972 <drv_gpio_config_interrupt_handler+0x7e>
	{
		PinFlag = PIO_IT_HIGH_LEVEL | PIO_IT_AIME;
  404968:	2330      	movs	r3, #48	; 0x30
  40496a:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  40496c:	2300      	movs	r3, #0
  40496e:	77fb      	strb	r3, [r7, #31]
  404970:	e006      	b.n	404980 <drv_gpio_config_interrupt_handler+0x8c>
	}
	else if (pinInt == DRV_GPIO_INTERRUPT_LOW_LVL)
  404972:	79bb      	ldrb	r3, [r7, #6]
  404974:	2b03      	cmp	r3, #3
  404976:	d103      	bne.n	404980 <drv_gpio_config_interrupt_handler+0x8c>
	{
		PinFlag = PIO_IT_LOW_LEVEL | PIO_IT_AIME;
  404978:	2310      	movs	r3, #16
  40497a:	61bb      	str	r3, [r7, #24]
		status = STATUS_PASS;
  40497c:	2300      	movs	r3, #0
  40497e:	77fb      	strb	r3, [r7, #31]
	}
	pio_handler_set(p_pio, PinPio, PinMask, PinFlag, handler);
  404980:	683b      	ldr	r3, [r7, #0]
  404982:	9300      	str	r3, [sp, #0]
  404984:	6978      	ldr	r0, [r7, #20]
  404986:	68f9      	ldr	r1, [r7, #12]
  404988:	693a      	ldr	r2, [r7, #16]
  40498a:	69bb      	ldr	r3, [r7, #24]
  40498c:	4c09      	ldr	r4, [pc, #36]	; (4049b4 <drv_gpio_config_interrupt_handler+0xc0>)
  40498e:	47a0      	blx	r4
	pio_configure_interrupt(p_pio, PinMask, PinFlag);
  404990:	6978      	ldr	r0, [r7, #20]
  404992:	6939      	ldr	r1, [r7, #16]
  404994:	69ba      	ldr	r2, [r7, #24]
  404996:	4b08      	ldr	r3, [pc, #32]	; (4049b8 <drv_gpio_config_interrupt_handler+0xc4>)
  404998:	4798      	blx	r3
	return status;
  40499a:	7ffb      	ldrb	r3, [r7, #31]
}
  40499c:	4618      	mov	r0, r3
  40499e:	3724      	adds	r7, #36	; 0x24
  4049a0:	46bd      	mov	sp, r7
  4049a2:	bd90      	pop	{r4, r7, pc}
  4049a4:	20000090 	.word	0x20000090
  4049a8:	00409221 	.word	0x00409221
  4049ac:	00409269 	.word	0x00409269
  4049b0:	00409249 	.word	0x00409249
  4049b4:	00409359 	.word	0x00409359
  4049b8:	00408ee5 	.word	0x00408ee5

004049bc <drv_gpio_int_pw>:
 * @brief Interrupt routine for Power Switch
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_pw(uint32_t ul_id, uint32_t ul_mask)
{
  4049bc:	b580      	push	{r7, lr}
  4049be:	b084      	sub	sp, #16
  4049c0:	af00      	add	r7, sp, #0
  4049c2:	6078      	str	r0, [r7, #4]
  4049c4:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_PWR_BTN].pinId);
  4049c6:	4b0e      	ldr	r3, [pc, #56]	; (404a00 <drv_gpio_int_pw+0x44>)
  4049c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
  4049cc:	4618      	mov	r0, r3
  4049ce:	4b0d      	ldr	r3, [pc, #52]	; (404a04 <drv_gpio_int_pw+0x48>)
  4049d0:	4798      	blx	r3
  4049d2:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  4049d4:	480c      	ldr	r0, [pc, #48]	; (404a08 <drv_gpio_int_pw+0x4c>)
  4049d6:	68f9      	ldr	r1, [r7, #12]
  4049d8:	4b0c      	ldr	r3, [pc, #48]	; (404a0c <drv_gpio_int_pw+0x50>)
  4049da:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  4049dc:	4b0a      	ldr	r3, [pc, #40]	; (404a08 <drv_gpio_int_pw+0x4c>)
  4049de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  4049e0:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  4049e2:	68fa      	ldr	r2, [r7, #12]
  4049e4:	683b      	ldr	r3, [r7, #0]
  4049e6:	429a      	cmp	r2, r3
  4049e8:	d103      	bne.n	4049f2 <drv_gpio_int_pw+0x36>
	{
		gpioConfig[DRV_GPIO_PIN_PWR_BTN].gpioSetFlag = 1;
  4049ea:	4b05      	ldr	r3, [pc, #20]	; (404a00 <drv_gpio_int_pw+0x44>)
  4049ec:	2201      	movs	r2, #1
  4049ee:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
	}
	pio_enable_interrupt(PIOA, PinMask);
  4049f2:	4805      	ldr	r0, [pc, #20]	; (404a08 <drv_gpio_int_pw+0x4c>)
  4049f4:	68f9      	ldr	r1, [r7, #12]
  4049f6:	4b06      	ldr	r3, [pc, #24]	; (404a10 <drv_gpio_int_pw+0x54>)
  4049f8:	4798      	blx	r3
}
  4049fa:	3710      	adds	r7, #16
  4049fc:	46bd      	mov	sp, r7
  4049fe:	bd80      	pop	{r7, pc}
  404a00:	20000090 	.word	0x20000090
  404a04:	00409269 	.word	0x00409269
  404a08:	400e0e00 	.word	0x400e0e00
  404a0c:	00408f71 	.word	0x00408f71
  404a10:	00408f51 	.word	0x00408f51

00404a14 <drv_gpio_int_dc1>:
 * @brief Interrupt routine for Jack-1 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc1(uint32_t ul_id, uint32_t ul_mask)
{
  404a14:	b580      	push	{r7, lr}
  404a16:	b084      	sub	sp, #16
  404a18:	af00      	add	r7, sp, #0
  404a1a:	6078      	str	r0, [r7, #4]
  404a1c:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC1_DET].pinId);
  404a1e:	4b0e      	ldr	r3, [pc, #56]	; (404a58 <drv_gpio_int_dc1+0x44>)
  404a20:	6a1b      	ldr	r3, [r3, #32]
  404a22:	4618      	mov	r0, r3
  404a24:	4b0d      	ldr	r3, [pc, #52]	; (404a5c <drv_gpio_int_dc1+0x48>)
  404a26:	4798      	blx	r3
  404a28:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  404a2a:	480d      	ldr	r0, [pc, #52]	; (404a60 <drv_gpio_int_dc1+0x4c>)
  404a2c:	68f9      	ldr	r1, [r7, #12]
  404a2e:	4b0d      	ldr	r3, [pc, #52]	; (404a64 <drv_gpio_int_dc1+0x50>)
  404a30:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  404a32:	4b0b      	ldr	r3, [pc, #44]	; (404a60 <drv_gpio_int_dc1+0x4c>)
  404a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  404a36:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  404a38:	68fa      	ldr	r2, [r7, #12]
  404a3a:	683b      	ldr	r3, [r7, #0]
  404a3c:	429a      	cmp	r2, r3
  404a3e:	d103      	bne.n	404a48 <drv_gpio_int_dc1+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC1_DET].gpioSetFlag = 1;
  404a40:	4b05      	ldr	r3, [pc, #20]	; (404a58 <drv_gpio_int_dc1+0x44>)
  404a42:	2201      	movs	r2, #1
  404a44:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	pio_enable_interrupt(PIOA, PinMask);
  404a48:	4805      	ldr	r0, [pc, #20]	; (404a60 <drv_gpio_int_dc1+0x4c>)
  404a4a:	68f9      	ldr	r1, [r7, #12]
  404a4c:	4b06      	ldr	r3, [pc, #24]	; (404a68 <drv_gpio_int_dc1+0x54>)
  404a4e:	4798      	blx	r3
}
  404a50:	3710      	adds	r7, #16
  404a52:	46bd      	mov	sp, r7
  404a54:	bd80      	pop	{r7, pc}
  404a56:	bf00      	nop
  404a58:	20000090 	.word	0x20000090
  404a5c:	00409269 	.word	0x00409269
  404a60:	400e0e00 	.word	0x400e0e00
  404a64:	00408f71 	.word	0x00408f71
  404a68:	00408f51 	.word	0x00408f51

00404a6c <drv_gpio_int_dc2>:
 * @brief Interrupt routine for Jack-2 Detect
 * @param uint32_t ul_id, uint32_t ul_mask
 * @return 
 ***********************************************************************************************/
static void drv_gpio_int_dc2(uint32_t ul_id, uint32_t ul_mask)
{
  404a6c:	b580      	push	{r7, lr}
  404a6e:	b084      	sub	sp, #16
  404a70:	af00      	add	r7, sp, #0
  404a72:	6078      	str	r0, [r7, #4]
  404a74:	6039      	str	r1, [r7, #0]
	uint32_t PinMask = pio_get_pin_group_mask(gpioConfig[DRV_GPIO_PIN_JC2_DET].pinId);
  404a76:	4b0e      	ldr	r3, [pc, #56]	; (404ab0 <drv_gpio_int_dc2+0x44>)
  404a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404a7a:	4618      	mov	r0, r3
  404a7c:	4b0d      	ldr	r3, [pc, #52]	; (404ab4 <drv_gpio_int_dc2+0x48>)
  404a7e:	4798      	blx	r3
  404a80:	60f8      	str	r0, [r7, #12]
	pio_disable_interrupt(PIOA, PinMask);
  404a82:	480d      	ldr	r0, [pc, #52]	; (404ab8 <drv_gpio_int_dc2+0x4c>)
  404a84:	68f9      	ldr	r1, [r7, #12]
  404a86:	4b0d      	ldr	r3, [pc, #52]	; (404abc <drv_gpio_int_dc2+0x50>)
  404a88:	4798      	blx	r3
	uint32_t ReadIsr = PIOA->PIO_ISR;
  404a8a:	4b0b      	ldr	r3, [pc, #44]	; (404ab8 <drv_gpio_int_dc2+0x4c>)
  404a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  404a8e:	60bb      	str	r3, [r7, #8]
	if (PinMask == ul_mask)
  404a90:	68fa      	ldr	r2, [r7, #12]
  404a92:	683b      	ldr	r3, [r7, #0]
  404a94:	429a      	cmp	r2, r3
  404a96:	d103      	bne.n	404aa0 <drv_gpio_int_dc2+0x34>
	{
		gpioConfig[DRV_GPIO_PIN_JC2_DET].gpioSetFlag = 1;
  404a98:	4b05      	ldr	r3, [pc, #20]	; (404ab0 <drv_gpio_int_dc2+0x44>)
  404a9a:	2201      	movs	r2, #1
  404a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
	pio_enable_interrupt(PIOA, PinMask);
  404aa0:	4805      	ldr	r0, [pc, #20]	; (404ab8 <drv_gpio_int_dc2+0x4c>)
  404aa2:	68f9      	ldr	r1, [r7, #12]
  404aa4:	4b06      	ldr	r3, [pc, #24]	; (404ac0 <drv_gpio_int_dc2+0x54>)
  404aa6:	4798      	blx	r3
}
  404aa8:	3710      	adds	r7, #16
  404aaa:	46bd      	mov	sp, r7
  404aac:	bd80      	pop	{r7, pc}
  404aae:	bf00      	nop
  404ab0:	20000090 	.word	0x20000090
  404ab4:	00409269 	.word	0x00409269
  404ab8:	400e0e00 	.word	0x400e0e00
  404abc:	00408f71 	.word	0x00408f71
  404ac0:	00408f51 	.word	0x00408f51

00404ac4 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  404ac4:	b480      	push	{r7}
  404ac6:	b08b      	sub	sp, #44	; 0x2c
  404ac8:	af00      	add	r7, sp, #0
  404aca:	6078      	str	r0, [r7, #4]
  404acc:	460b      	mov	r3, r1
  404ace:	70fb      	strb	r3, [r7, #3]
  404ad0:	687b      	ldr	r3, [r7, #4]
  404ad2:	627b      	str	r3, [r7, #36]	; 0x24
  404ad4:	78fb      	ldrb	r3, [r7, #3]
  404ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  404ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404adc:	61fb      	str	r3, [r7, #28]
  404ade:	69fb      	ldr	r3, [r7, #28]
  404ae0:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  404ae2:	69bb      	ldr	r3, [r7, #24]
  404ae4:	095b      	lsrs	r3, r3, #5
  404ae6:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404ae8:	697b      	ldr	r3, [r7, #20]
  404aea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404aee:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404af2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  404af4:	613b      	str	r3, [r7, #16]

	if (level) {
  404af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  404afa:	2b00      	cmp	r3, #0
  404afc:	d009      	beq.n	404b12 <ioport_set_pin_level+0x4e>
  404afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404b00:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404b02:	68fb      	ldr	r3, [r7, #12]
  404b04:	f003 031f 	and.w	r3, r3, #31
  404b08:	2201      	movs	r2, #1
  404b0a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404b0c:	693b      	ldr	r3, [r7, #16]
  404b0e:	631a      	str	r2, [r3, #48]	; 0x30
  404b10:	e008      	b.n	404b24 <ioport_set_pin_level+0x60>
  404b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404b14:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404b16:	68bb      	ldr	r3, [r7, #8]
  404b18:	f003 031f 	and.w	r3, r3, #31
  404b1c:	2201      	movs	r2, #1
  404b1e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404b20:	693b      	ldr	r3, [r7, #16]
  404b22:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  404b24:	372c      	adds	r7, #44	; 0x2c
  404b26:	46bd      	mov	sp, r7
  404b28:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b2c:	4770      	bx	lr
  404b2e:	bf00      	nop

00404b30 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  404b30:	b480      	push	{r7}
  404b32:	b089      	sub	sp, #36	; 0x24
  404b34:	af00      	add	r7, sp, #0
  404b36:	6078      	str	r0, [r7, #4]
  404b38:	687b      	ldr	r3, [r7, #4]
  404b3a:	61fb      	str	r3, [r7, #28]
  404b3c:	69fb      	ldr	r3, [r7, #28]
  404b3e:	61bb      	str	r3, [r7, #24]
  404b40:	69bb      	ldr	r3, [r7, #24]
  404b42:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  404b44:	697b      	ldr	r3, [r7, #20]
  404b46:	095b      	lsrs	r3, r3, #5
  404b48:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404b4a:	693b      	ldr	r3, [r7, #16]
  404b4c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404b50:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404b54:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  404b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  404b58:	69fb      	ldr	r3, [r7, #28]
  404b5a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404b5c:	68fb      	ldr	r3, [r7, #12]
  404b5e:	f003 031f 	and.w	r3, r3, #31
  404b62:	2101      	movs	r1, #1
  404b64:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  404b68:	4013      	ands	r3, r2
  404b6a:	2b00      	cmp	r3, #0
  404b6c:	bf0c      	ite	eq
  404b6e:	2300      	moveq	r3, #0
  404b70:	2301      	movne	r3, #1
  404b72:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  404b74:	4618      	mov	r0, r3
  404b76:	3724      	adds	r7, #36	; 0x24
  404b78:	46bd      	mov	sp, r7
  404b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b7e:	4770      	bx	lr

00404b80 <mgr_managerTask>:
 * @brief Handles queued events for the power board.  
 * @param pvParameters, void pointer to structure containing data router configuration. 
 * @return void
 ***********************************************************************************************/
void mgr_managerTask(void *pvParameters)
{
  404b80:	b590      	push	{r4, r7, lr}
  404b82:	b089      	sub	sp, #36	; 0x24
  404b84:	af04      	add	r7, sp, #16
  404b86:	6078      	str	r0, [r7, #4]
	mgr_eventMessage_t msgEvent; 
	//initialize the board
	
	brd_board_init(); 
  404b88:	4b3f      	ldr	r3, [pc, #252]	; (404c88 <mgr_managerTask+0x108>)
  404b8a:	4798      	blx	r3
	printf("startApplication!\r\n");
  404b8c:	483f      	ldr	r0, [pc, #252]	; (404c8c <mgr_managerTask+0x10c>)
  404b8e:	4b40      	ldr	r3, [pc, #256]	; (404c90 <mgr_managerTask+0x110>)
  404b90:	4798      	blx	r3
	//initialize power button listener. 	
	drv_gpio_config_interrupt_handler(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_LOW_EDGE,powerButtonHandler_LowEdge);
  404b92:	200a      	movs	r0, #10
  404b94:	2101      	movs	r1, #1
  404b96:	4a3f      	ldr	r2, [pc, #252]	; (404c94 <mgr_managerTask+0x114>)
  404b98:	4b3f      	ldr	r3, [pc, #252]	; (404c98 <mgr_managerTask+0x118>)
  404b9a:	4798      	blx	r3
	mgr_eventQueue = xQueueCreate( 50, sizeof(mgr_eventMessage_t));
  404b9c:	2032      	movs	r0, #50	; 0x32
  404b9e:	2104      	movs	r1, #4
  404ba0:	2200      	movs	r2, #0
  404ba2:	4b3e      	ldr	r3, [pc, #248]	; (404c9c <mgr_managerTask+0x11c>)
  404ba4:	4798      	blx	r3
  404ba6:	4602      	mov	r2, r0
  404ba8:	4b3d      	ldr	r3, [pc, #244]	; (404ca0 <mgr_managerTask+0x120>)
  404baa:	601a      	str	r2, [r3, #0]
	pwrButtonTimer = xTimerCreate("PowerBnt timer", (SLEEP_ENTRY_WAIT_TIME/portTICK_RATE_MS), pdFALSE, NULL, powerButtonTimerCallback);
  404bac:	4b3d      	ldr	r3, [pc, #244]	; (404ca4 <mgr_managerTask+0x124>)
  404bae:	9300      	str	r3, [sp, #0]
  404bb0:	483d      	ldr	r0, [pc, #244]	; (404ca8 <mgr_managerTask+0x128>)
  404bb2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
  404bb6:	2200      	movs	r2, #0
  404bb8:	2300      	movs	r3, #0
  404bba:	4c3c      	ldr	r4, [pc, #240]	; (404cac <mgr_managerTask+0x12c>)
  404bbc:	47a0      	blx	r4
  404bbe:	4602      	mov	r2, r0
  404bc0:	4b3b      	ldr	r3, [pc, #236]	; (404cb0 <mgr_managerTask+0x130>)
  404bc2:	601a      	str	r2, [r3, #0]
	//start all the other tasks
	int retCode = 0;
  404bc4:	2300      	movs	r3, #0
  404bc6:	60fb      	str	r3, [r7, #12]
	retCode = xTaskCreate(chrg_task_chargeMonitor, "CHRG", TASK_CHRG_MON_STACK_SIZE, &chargeMonitorConfiguration, TASK_CHRG_MON_STACK_PRIORITY, NULL);
  404bc8:	2302      	movs	r3, #2
  404bca:	9300      	str	r3, [sp, #0]
  404bcc:	2300      	movs	r3, #0
  404bce:	9301      	str	r3, [sp, #4]
  404bd0:	2300      	movs	r3, #0
  404bd2:	9302      	str	r3, [sp, #8]
  404bd4:	2300      	movs	r3, #0
  404bd6:	9303      	str	r3, [sp, #12]
  404bd8:	4836      	ldr	r0, [pc, #216]	; (404cb4 <mgr_managerTask+0x134>)
  404bda:	4937      	ldr	r1, [pc, #220]	; (404cb8 <mgr_managerTask+0x138>)
  404bdc:	f44f 7240 	mov.w	r2, #768	; 0x300
  404be0:	4b36      	ldr	r3, [pc, #216]	; (404cbc <mgr_managerTask+0x13c>)
  404be2:	4c37      	ldr	r4, [pc, #220]	; (404cc0 <mgr_managerTask+0x140>)
  404be4:	47a0      	blx	r4
  404be6:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  404be8:	68fb      	ldr	r3, [r7, #12]
  404bea:	2b01      	cmp	r3, #1
  404bec:	d003      	beq.n	404bf6 <mgr_managerTask+0x76>
	{
		printf("Failed to create CHRG task code %d\r\n", retCode);
  404bee:	4835      	ldr	r0, [pc, #212]	; (404cc4 <mgr_managerTask+0x144>)
  404bf0:	68f9      	ldr	r1, [r7, #12]
  404bf2:	4b27      	ldr	r3, [pc, #156]	; (404c90 <mgr_managerTask+0x110>)
  404bf4:	4798      	blx	r3
	}
	retCode = xTaskCreate(cmd_task_commandProcesor, "CMD", TASK_COMMAND_PROC_STACK_SIZE, NULL, TASK_COMMAND_PROC_PRIORITY, NULL);
  404bf6:	2305      	movs	r3, #5
  404bf8:	9300      	str	r3, [sp, #0]
  404bfa:	2300      	movs	r3, #0
  404bfc:	9301      	str	r3, [sp, #4]
  404bfe:	2300      	movs	r3, #0
  404c00:	9302      	str	r3, [sp, #8]
  404c02:	2300      	movs	r3, #0
  404c04:	9303      	str	r3, [sp, #12]
  404c06:	4830      	ldr	r0, [pc, #192]	; (404cc8 <mgr_managerTask+0x148>)
  404c08:	4930      	ldr	r1, [pc, #192]	; (404ccc <mgr_managerTask+0x14c>)
  404c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
  404c0e:	2300      	movs	r3, #0
  404c10:	4c2b      	ldr	r4, [pc, #172]	; (404cc0 <mgr_managerTask+0x140>)
  404c12:	47a0      	blx	r4
  404c14:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  404c16:	68fb      	ldr	r3, [r7, #12]
  404c18:	2b01      	cmp	r3, #1
  404c1a:	d003      	beq.n	404c24 <mgr_managerTask+0xa4>
	{
		printf("Failed to create CMD task code %d\r\n", retCode);
  404c1c:	482c      	ldr	r0, [pc, #176]	; (404cd0 <mgr_managerTask+0x150>)
  404c1e:	68f9      	ldr	r1, [r7, #12]
  404c20:	4b1b      	ldr	r3, [pc, #108]	; (404c90 <mgr_managerTask+0x110>)
  404c22:	4798      	blx	r3
	}
	retCode = xTaskCreate(dat_task_dataRouter, "DAT", TASK_DATA_ROUTER_STACK_SIZE, &dataRouterConfiguration, TASK_DATA_ROUTER_PRIORITY, NULL);
  404c24:	2303      	movs	r3, #3
  404c26:	9300      	str	r3, [sp, #0]
  404c28:	2300      	movs	r3, #0
  404c2a:	9301      	str	r3, [sp, #4]
  404c2c:	2300      	movs	r3, #0
  404c2e:	9302      	str	r3, [sp, #8]
  404c30:	2300      	movs	r3, #0
  404c32:	9303      	str	r3, [sp, #12]
  404c34:	4827      	ldr	r0, [pc, #156]	; (404cd4 <mgr_managerTask+0x154>)
  404c36:	4928      	ldr	r1, [pc, #160]	; (404cd8 <mgr_managerTask+0x158>)
  404c38:	f44f 7240 	mov.w	r2, #768	; 0x300
  404c3c:	4b27      	ldr	r3, [pc, #156]	; (404cdc <mgr_managerTask+0x15c>)
  404c3e:	4c20      	ldr	r4, [pc, #128]	; (404cc0 <mgr_managerTask+0x140>)
  404c40:	47a0      	blx	r4
  404c42:	60f8      	str	r0, [r7, #12]
	if (retCode != pdPASS)
  404c44:	68fb      	ldr	r3, [r7, #12]
  404c46:	2b01      	cmp	r3, #1
  404c48:	d003      	beq.n	404c52 <mgr_managerTask+0xd2>
	{
		printf("Failed to create CMD task code %d\r\n", retCode);
  404c4a:	4821      	ldr	r0, [pc, #132]	; (404cd0 <mgr_managerTask+0x150>)
  404c4c:	68f9      	ldr	r1, [r7, #12]
  404c4e:	4b10      	ldr	r3, [pc, #64]	; (404c90 <mgr_managerTask+0x110>)
  404c50:	4798      	blx	r3
	}
	//enable power to the data board
	drv_gpio_setPinState(DRV_GPIO_PIN_PWR_EN, DRV_GPIO_PIN_STATE_HIGH);
  404c52:	2004      	movs	r0, #4
  404c54:	2101      	movs	r1, #1
  404c56:	4b22      	ldr	r3, [pc, #136]	; (404ce0 <mgr_managerTask+0x160>)
  404c58:	4798      	blx	r3
	while(1)
	{
		// Is button pressed?
		if (ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
  404c5a:	2002      	movs	r0, #2
  404c5c:	4b21      	ldr	r3, [pc, #132]	; (404ce4 <mgr_managerTask+0x164>)
  404c5e:	4798      	blx	r3
  404c60:	4603      	mov	r3, r0
  404c62:	f083 0301 	eor.w	r3, r3, #1
  404c66:	b2db      	uxtb	r3, r3
  404c68:	2b00      	cmp	r3, #0
  404c6a:	d004      	beq.n	404c76 <mgr_managerTask+0xf6>
		{
			// Yes, so turn LED on.
			ioport_set_pin_level(LED_0_PIN, LED_0_ACTIVE);
  404c6c:	2057      	movs	r0, #87	; 0x57
  404c6e:	2100      	movs	r1, #0
  404c70:	4b1d      	ldr	r3, [pc, #116]	; (404ce8 <mgr_managerTask+0x168>)
  404c72:	4798      	blx	r3
  404c74:	e003      	b.n	404c7e <mgr_managerTask+0xfe>
		}
		else
		{
			// No, so turn LED off.
			ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  404c76:	2057      	movs	r0, #87	; 0x57
  404c78:	2101      	movs	r1, #1
  404c7a:	4b1b      	ldr	r3, [pc, #108]	; (404ce8 <mgr_managerTask+0x168>)
  404c7c:	4798      	blx	r3
		}		
		//drv_uart_putString(&uart0Config, "Hello UART0!!!!\r\n"); 
		//drv_uart_putString(&uart1Config, "Hello UART1!!!!\r\n"); 
		vTaskDelay(500); 
  404c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  404c82:	4b1a      	ldr	r3, [pc, #104]	; (404cec <mgr_managerTask+0x16c>)
  404c84:	4798      	blx	r3
				//}
				//break;
				//
			//}
		//}
	}
  404c86:	e7e8      	b.n	404c5a <mgr_managerTask+0xda>
  404c88:	0040400d 	.word	0x0040400d
  404c8c:	0041359c 	.word	0x0041359c
  404c90:	0040a395 	.word	0x0040a395
  404c94:	00404d5d 	.word	0x00404d5d
  404c98:	004048f5 	.word	0x004048f5
  404c9c:	00406785 	.word	0x00406785
  404ca0:	20000cb0 	.word	0x20000cb0
  404ca4:	00404cf1 	.word	0x00404cf1
  404ca8:	004135b0 	.word	0x004135b0
  404cac:	00407c15 	.word	0x00407c15
  404cb0:	20000cb4 	.word	0x20000cb4
  404cb4:	004040cd 	.word	0x004040cd
  404cb8:	004135c0 	.word	0x004135c0
  404cbc:	20000188 	.word	0x20000188
  404cc0:	00406ea9 	.word	0x00406ea9
  404cc4:	004135c8 	.word	0x004135c8
  404cc8:	004041b9 	.word	0x004041b9
  404ccc:	004135f0 	.word	0x004135f0
  404cd0:	004135f4 	.word	0x004135f4
  404cd4:	00404315 	.word	0x00404315
  404cd8:	00413618 	.word	0x00413618
  404cdc:	20000180 	.word	0x20000180
  404ce0:	00404781 	.word	0x00404781
  404ce4:	00404b31 	.word	0x00404b31
  404ce8:	00404ac5 	.word	0x00404ac5
  404cec:	00407069 	.word	0x00407069

00404cf0 <powerButtonTimerCallback>:
}


//static functions
void powerButtonTimerCallback()
{
  404cf0:	b590      	push	{r4, r7, lr}
  404cf2:	b083      	sub	sp, #12
  404cf4:	af00      	add	r7, sp, #0
	mgr_eventMessage_t pwrDownEvent = 
  404cf6:	2300      	movs	r3, #0
  404cf8:	713b      	strb	r3, [r7, #4]
  404cfa:	2300      	movs	r3, #0
  404cfc:	80fb      	strh	r3, [r7, #6]
	{
		.sysEvent = SYS_EVENT_POWER_SWITCH,
		.data = 0		
	};
	//The timer has elapsed, this means it's power down time. 
	if(xQueueSendToBack(mgr_eventQueue,&pwrDownEvent,5) != TRUE)
  404cfe:	4b06      	ldr	r3, [pc, #24]	; (404d18 <powerButtonTimerCallback+0x28>)
  404d00:	681a      	ldr	r2, [r3, #0]
  404d02:	1d3b      	adds	r3, r7, #4
  404d04:	4610      	mov	r0, r2
  404d06:	4619      	mov	r1, r3
  404d08:	2205      	movs	r2, #5
  404d0a:	2300      	movs	r3, #0
  404d0c:	4c03      	ldr	r4, [pc, #12]	; (404d1c <powerButtonTimerCallback+0x2c>)
  404d0e:	47a0      	blx	r4
	{
		//this is an error, we should log it.
	}	
	
	
}
  404d10:	370c      	adds	r7, #12
  404d12:	46bd      	mov	sp, r7
  404d14:	bd90      	pop	{r4, r7, pc}
  404d16:	bf00      	nop
  404d18:	20000cb0 	.word	0x20000cb0
  404d1c:	0040681d 	.word	0x0040681d

00404d20 <powerButtonHandler_HighEdge>:
static void powerButtonHandler_HighEdge()
{
  404d20:	b590      	push	{r4, r7, lr}
  404d22:	b083      	sub	sp, #12
  404d24:	af02      	add	r7, sp, #8
	drv_gpio_config_interrupt_handler(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_LOW_EDGE,powerButtonHandler_LowEdge);
  404d26:	200a      	movs	r0, #10
  404d28:	2101      	movs	r1, #1
  404d2a:	4a08      	ldr	r2, [pc, #32]	; (404d4c <powerButtonHandler_HighEdge+0x2c>)
  404d2c:	4b08      	ldr	r3, [pc, #32]	; (404d50 <powerButtonHandler_HighEdge+0x30>)
  404d2e:	4798      	blx	r3
	xTimerStopFromISR(pwrButtonTimer,pdFALSE); 
  404d30:	4b08      	ldr	r3, [pc, #32]	; (404d54 <powerButtonHandler_HighEdge+0x34>)
  404d32:	681b      	ldr	r3, [r3, #0]
  404d34:	2200      	movs	r2, #0
  404d36:	9200      	str	r2, [sp, #0]
  404d38:	4618      	mov	r0, r3
  404d3a:	2101      	movs	r1, #1
  404d3c:	2200      	movs	r2, #0
  404d3e:	2300      	movs	r3, #0
  404d40:	4c05      	ldr	r4, [pc, #20]	; (404d58 <powerButtonHandler_HighEdge+0x38>)
  404d42:	47a0      	blx	r4
}
  404d44:	3704      	adds	r7, #4
  404d46:	46bd      	mov	sp, r7
  404d48:	bd90      	pop	{r4, r7, pc}
  404d4a:	bf00      	nop
  404d4c:	00404d5d 	.word	0x00404d5d
  404d50:	004048f5 	.word	0x004048f5
  404d54:	20000cb4 	.word	0x20000cb4
  404d58:	00407c91 	.word	0x00407c91

00404d5c <powerButtonHandler_LowEdge>:
static void powerButtonHandler_LowEdge()
{
  404d5c:	b590      	push	{r4, r7, lr}
  404d5e:	b083      	sub	sp, #12
  404d60:	af02      	add	r7, sp, #8
	drv_gpio_config_interrupt_handler(DRV_GPIO_PIN_PWR_BTN, DRV_GPIO_INTERRUPT_HIGH_EDGE,powerButtonHandler_HighEdge);
  404d62:	200a      	movs	r0, #10
  404d64:	2100      	movs	r1, #0
  404d66:	4a09      	ldr	r2, [pc, #36]	; (404d8c <powerButtonHandler_LowEdge+0x30>)
  404d68:	4b09      	ldr	r3, [pc, #36]	; (404d90 <powerButtonHandler_LowEdge+0x34>)
  404d6a:	4798      	blx	r3
	xTimerStartFromISR(pwrButtonTimer,pdFALSE); 
  404d6c:	4b09      	ldr	r3, [pc, #36]	; (404d94 <powerButtonHandler_LowEdge+0x38>)
  404d6e:	681c      	ldr	r4, [r3, #0]
  404d70:	4b09      	ldr	r3, [pc, #36]	; (404d98 <powerButtonHandler_LowEdge+0x3c>)
  404d72:	4798      	blx	r3
  404d74:	4603      	mov	r3, r0
  404d76:	2200      	movs	r2, #0
  404d78:	9200      	str	r2, [sp, #0]
  404d7a:	4620      	mov	r0, r4
  404d7c:	2100      	movs	r1, #0
  404d7e:	461a      	mov	r2, r3
  404d80:	2300      	movs	r3, #0
  404d82:	4c06      	ldr	r4, [pc, #24]	; (404d9c <powerButtonHandler_LowEdge+0x40>)
  404d84:	47a0      	blx	r4
}
  404d86:	3704      	adds	r7, #4
  404d88:	46bd      	mov	sp, r7
  404d8a:	bd90      	pop	{r4, r7, pc}
  404d8c:	00404d21 	.word	0x00404d21
  404d90:	004048f5 	.word	0x004048f5
  404d94:	20000cb4 	.word	0x20000cb4
  404d98:	004072b5 	.word	0x004072b5
  404d9c:	00407c91 	.word	0x00407c91

00404da0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  404da0:	b580      	push	{r7, lr}
  404da2:	b086      	sub	sp, #24
  404da4:	af00      	add	r7, sp, #0
  404da6:	60f8      	str	r0, [r7, #12]
  404da8:	60b9      	str	r1, [r7, #8]
  404daa:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  404dac:	2300      	movs	r3, #0
  404dae:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  404db0:	68fb      	ldr	r3, [r7, #12]
  404db2:	2b00      	cmp	r3, #0
  404db4:	d002      	beq.n	404dbc <_read+0x1c>
		return -1;
  404db6:	f04f 33ff 	mov.w	r3, #4294967295
  404dba:	e014      	b.n	404de6 <_read+0x46>
	}

	for (; len > 0; --len) {
  404dbc:	e00f      	b.n	404dde <_read+0x3e>
		ptr_get(stdio_base, ptr);
  404dbe:	4b0c      	ldr	r3, [pc, #48]	; (404df0 <_read+0x50>)
  404dc0:	681b      	ldr	r3, [r3, #0]
  404dc2:	4a0c      	ldr	r2, [pc, #48]	; (404df4 <_read+0x54>)
  404dc4:	6812      	ldr	r2, [r2, #0]
  404dc6:	4610      	mov	r0, r2
  404dc8:	68b9      	ldr	r1, [r7, #8]
  404dca:	4798      	blx	r3
		ptr++;
  404dcc:	68bb      	ldr	r3, [r7, #8]
  404dce:	3301      	adds	r3, #1
  404dd0:	60bb      	str	r3, [r7, #8]
		nChars++;
  404dd2:	697b      	ldr	r3, [r7, #20]
  404dd4:	3301      	adds	r3, #1
  404dd6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  404dd8:	687b      	ldr	r3, [r7, #4]
  404dda:	3b01      	subs	r3, #1
  404ddc:	607b      	str	r3, [r7, #4]
  404dde:	687b      	ldr	r3, [r7, #4]
  404de0:	2b00      	cmp	r3, #0
  404de2:	dcec      	bgt.n	404dbe <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  404de4:	697b      	ldr	r3, [r7, #20]
}
  404de6:	4618      	mov	r0, r3
  404de8:	3718      	adds	r7, #24
  404dea:	46bd      	mov	sp, r7
  404dec:	bd80      	pop	{r7, pc}
  404dee:	bf00      	nop
  404df0:	20014fa4 	.word	0x20014fa4
  404df4:	2001603c 	.word	0x2001603c

00404df8 <twi_disable_interrupt>:
 *
 * \param p_twi Pointer to a TWI instance.
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
  404df8:	b480      	push	{r7}
  404dfa:	b083      	sub	sp, #12
  404dfc:	af00      	add	r7, sp, #0
  404dfe:	6078      	str	r0, [r7, #4]
  404e00:	6039      	str	r1, [r7, #0]
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
  404e02:	687b      	ldr	r3, [r7, #4]
  404e04:	683a      	ldr	r2, [r7, #0]
  404e06:	629a      	str	r2, [r3, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
  404e08:	687b      	ldr	r3, [r7, #4]
  404e0a:	6a1b      	ldr	r3, [r3, #32]
}
  404e0c:	370c      	adds	r7, #12
  404e0e:	46bd      	mov	sp, r7
  404e10:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e14:	4770      	bx	lr
  404e16:	bf00      	nop

00404e18 <twi_get_interrupt_status>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
  404e18:	b480      	push	{r7}
  404e1a:	b083      	sub	sp, #12
  404e1c:	af00      	add	r7, sp, #0
  404e1e:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_SR;
  404e20:	687b      	ldr	r3, [r7, #4]
  404e22:	6a1b      	ldr	r3, [r3, #32]
}
  404e24:	4618      	mov	r0, r3
  404e26:	370c      	adds	r7, #12
  404e28:	46bd      	mov	sp, r7
  404e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e2e:	4770      	bx	lr

00404e30 <twi_get_interrupt_mask>:
 * \param p_twi Pointer to a TWI instance.
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
  404e30:	b480      	push	{r7}
  404e32:	b083      	sub	sp, #12
  404e34:	af00      	add	r7, sp, #0
  404e36:	6078      	str	r0, [r7, #4]
	return p_twi->TWI_IMR;
  404e38:	687b      	ldr	r3, [r7, #4]
  404e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  404e3c:	4618      	mov	r0, r3
  404e3e:	370c      	adds	r7, #12
  404e40:	46bd      	mov	sp, r7
  404e42:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e46:	4770      	bx	lr

00404e48 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  404e48:	b480      	push	{r7}
  404e4a:	b089      	sub	sp, #36	; 0x24
  404e4c:	af00      	add	r7, sp, #0
  404e4e:	60f8      	str	r0, [r7, #12]
  404e50:	60b9      	str	r1, [r7, #8]
  404e52:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  404e54:	68bb      	ldr	r3, [r7, #8]
  404e56:	011a      	lsls	r2, r3, #4
  404e58:	687b      	ldr	r3, [r7, #4]
  404e5a:	429a      	cmp	r2, r3
  404e5c:	d802      	bhi.n	404e64 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  404e5e:	2310      	movs	r3, #16
  404e60:	61fb      	str	r3, [r7, #28]
  404e62:	e001      	b.n	404e68 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  404e64:	2308      	movs	r3, #8
  404e66:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  404e68:	687b      	ldr	r3, [r7, #4]
  404e6a:	00da      	lsls	r2, r3, #3
  404e6c:	69fb      	ldr	r3, [r7, #28]
  404e6e:	68b9      	ldr	r1, [r7, #8]
  404e70:	fb01 f303 	mul.w	r3, r1, r3
  404e74:	085b      	lsrs	r3, r3, #1
  404e76:	441a      	add	r2, r3
  404e78:	69fb      	ldr	r3, [r7, #28]
  404e7a:	68b9      	ldr	r1, [r7, #8]
  404e7c:	fb01 f303 	mul.w	r3, r1, r3
  404e80:	fbb2 f3f3 	udiv	r3, r2, r3
  404e84:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  404e86:	69bb      	ldr	r3, [r7, #24]
  404e88:	08db      	lsrs	r3, r3, #3
  404e8a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  404e8c:	69bb      	ldr	r3, [r7, #24]
  404e8e:	f003 0307 	and.w	r3, r3, #7
  404e92:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  404e94:	697b      	ldr	r3, [r7, #20]
  404e96:	2b00      	cmp	r3, #0
  404e98:	d003      	beq.n	404ea2 <usart_set_async_baudrate+0x5a>
  404e9a:	697b      	ldr	r3, [r7, #20]
  404e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  404ea0:	d301      	bcc.n	404ea6 <usart_set_async_baudrate+0x5e>
		return 1;
  404ea2:	2301      	movs	r3, #1
  404ea4:	e00f      	b.n	404ec6 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  404ea6:	69fb      	ldr	r3, [r7, #28]
  404ea8:	2b08      	cmp	r3, #8
  404eaa:	d105      	bne.n	404eb8 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  404eac:	68fb      	ldr	r3, [r7, #12]
  404eae:	685b      	ldr	r3, [r3, #4]
  404eb0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  404eb4:	68fb      	ldr	r3, [r7, #12]
  404eb6:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  404eb8:	693b      	ldr	r3, [r7, #16]
  404eba:	041a      	lsls	r2, r3, #16
  404ebc:	697b      	ldr	r3, [r7, #20]
  404ebe:	431a      	orrs	r2, r3
  404ec0:	68fb      	ldr	r3, [r7, #12]
  404ec2:	621a      	str	r2, [r3, #32]

	return 0;
  404ec4:	2300      	movs	r3, #0
}
  404ec6:	4618      	mov	r0, r3
  404ec8:	3724      	adds	r7, #36	; 0x24
  404eca:	46bd      	mov	sp, r7
  404ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ed0:	4770      	bx	lr
  404ed2:	bf00      	nop

00404ed4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  404ed4:	b580      	push	{r7, lr}
  404ed6:	b082      	sub	sp, #8
  404ed8:	af00      	add	r7, sp, #0
  404eda:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  404edc:	6878      	ldr	r0, [r7, #4]
  404ede:	4b0e      	ldr	r3, [pc, #56]	; (404f18 <usart_reset+0x44>)
  404ee0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  404ee2:	687b      	ldr	r3, [r7, #4]
  404ee4:	2200      	movs	r2, #0
  404ee6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  404ee8:	687b      	ldr	r3, [r7, #4]
  404eea:	2200      	movs	r2, #0
  404eec:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  404eee:	687b      	ldr	r3, [r7, #4]
  404ef0:	2200      	movs	r2, #0
  404ef2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  404ef4:	6878      	ldr	r0, [r7, #4]
  404ef6:	4b09      	ldr	r3, [pc, #36]	; (404f1c <usart_reset+0x48>)
  404ef8:	4798      	blx	r3
	usart_reset_rx(p_usart);
  404efa:	6878      	ldr	r0, [r7, #4]
  404efc:	4b08      	ldr	r3, [pc, #32]	; (404f20 <usart_reset+0x4c>)
  404efe:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  404f00:	6878      	ldr	r0, [r7, #4]
  404f02:	4b08      	ldr	r3, [pc, #32]	; (404f24 <usart_reset+0x50>)
  404f04:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  404f06:	6878      	ldr	r0, [r7, #4]
  404f08:	4b07      	ldr	r3, [pc, #28]	; (404f28 <usart_reset+0x54>)
  404f0a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  404f0c:	6878      	ldr	r0, [r7, #4]
  404f0e:	4b07      	ldr	r3, [pc, #28]	; (404f2c <usart_reset+0x58>)
  404f10:	4798      	blx	r3
#endif
}
  404f12:	3708      	adds	r7, #8
  404f14:	46bd      	mov	sp, r7
  404f16:	bd80      	pop	{r7, pc}
  404f18:	0040513d 	.word	0x0040513d
  404f1c:	00404fcd 	.word	0x00404fcd
  404f20:	00404ffd 	.word	0x00404ffd
  404f24:	0040504d 	.word	0x0040504d
  404f28:	00405085 	.word	0x00405085
  404f2c:	00405069 	.word	0x00405069

00404f30 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  404f30:	b580      	push	{r7, lr}
  404f32:	b084      	sub	sp, #16
  404f34:	af00      	add	r7, sp, #0
  404f36:	60f8      	str	r0, [r7, #12]
  404f38:	60b9      	str	r1, [r7, #8]
  404f3a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  404f3c:	68f8      	ldr	r0, [r7, #12]
  404f3e:	4b1a      	ldr	r3, [pc, #104]	; (404fa8 <usart_init_rs232+0x78>)
  404f40:	4798      	blx	r3

	ul_reg_val = 0;
  404f42:	4b1a      	ldr	r3, [pc, #104]	; (404fac <usart_init_rs232+0x7c>)
  404f44:	2200      	movs	r2, #0
  404f46:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  404f48:	68bb      	ldr	r3, [r7, #8]
  404f4a:	2b00      	cmp	r3, #0
  404f4c:	d009      	beq.n	404f62 <usart_init_rs232+0x32>
  404f4e:	68bb      	ldr	r3, [r7, #8]
  404f50:	681b      	ldr	r3, [r3, #0]
  404f52:	68f8      	ldr	r0, [r7, #12]
  404f54:	4619      	mov	r1, r3
  404f56:	687a      	ldr	r2, [r7, #4]
  404f58:	4b15      	ldr	r3, [pc, #84]	; (404fb0 <usart_init_rs232+0x80>)
  404f5a:	4798      	blx	r3
  404f5c:	4603      	mov	r3, r0
  404f5e:	2b00      	cmp	r3, #0
  404f60:	d001      	beq.n	404f66 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  404f62:	2301      	movs	r3, #1
  404f64:	e01b      	b.n	404f9e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404f66:	68bb      	ldr	r3, [r7, #8]
  404f68:	685a      	ldr	r2, [r3, #4]
  404f6a:	68bb      	ldr	r3, [r7, #8]
  404f6c:	689b      	ldr	r3, [r3, #8]
  404f6e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  404f70:	68bb      	ldr	r3, [r7, #8]
  404f72:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404f74:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  404f76:	68bb      	ldr	r3, [r7, #8]
  404f78:	68db      	ldr	r3, [r3, #12]
  404f7a:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404f7c:	4b0b      	ldr	r3, [pc, #44]	; (404fac <usart_init_rs232+0x7c>)
  404f7e:	681b      	ldr	r3, [r3, #0]
  404f80:	431a      	orrs	r2, r3
  404f82:	4b0a      	ldr	r3, [pc, #40]	; (404fac <usart_init_rs232+0x7c>)
  404f84:	601a      	str	r2, [r3, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  404f86:	4b09      	ldr	r3, [pc, #36]	; (404fac <usart_init_rs232+0x7c>)
  404f88:	681a      	ldr	r2, [r3, #0]
  404f8a:	4b08      	ldr	r3, [pc, #32]	; (404fac <usart_init_rs232+0x7c>)
  404f8c:	601a      	str	r2, [r3, #0]

	p_usart->US_MR |= ul_reg_val;
  404f8e:	68fb      	ldr	r3, [r7, #12]
  404f90:	685a      	ldr	r2, [r3, #4]
  404f92:	4b06      	ldr	r3, [pc, #24]	; (404fac <usart_init_rs232+0x7c>)
  404f94:	681b      	ldr	r3, [r3, #0]
  404f96:	431a      	orrs	r2, r3
  404f98:	68fb      	ldr	r3, [r7, #12]
  404f9a:	605a      	str	r2, [r3, #4]

	return 0;
  404f9c:	2300      	movs	r3, #0
}
  404f9e:	4618      	mov	r0, r3
  404fa0:	3710      	adds	r7, #16
  404fa2:	46bd      	mov	sp, r7
  404fa4:	bd80      	pop	{r7, pc}
  404fa6:	bf00      	nop
  404fa8:	00404ed5 	.word	0x00404ed5
  404fac:	20000cb8 	.word	0x20000cb8
  404fb0:	00404e49 	.word	0x00404e49

00404fb4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  404fb4:	b480      	push	{r7}
  404fb6:	b083      	sub	sp, #12
  404fb8:	af00      	add	r7, sp, #0
  404fba:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  404fbc:	687b      	ldr	r3, [r7, #4]
  404fbe:	2240      	movs	r2, #64	; 0x40
  404fc0:	601a      	str	r2, [r3, #0]
}
  404fc2:	370c      	adds	r7, #12
  404fc4:	46bd      	mov	sp, r7
  404fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fca:	4770      	bx	lr

00404fcc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  404fcc:	b480      	push	{r7}
  404fce:	b083      	sub	sp, #12
  404fd0:	af00      	add	r7, sp, #0
  404fd2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  404fd4:	687b      	ldr	r3, [r7, #4]
  404fd6:	2288      	movs	r2, #136	; 0x88
  404fd8:	601a      	str	r2, [r3, #0]
}
  404fda:	370c      	adds	r7, #12
  404fdc:	46bd      	mov	sp, r7
  404fde:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fe2:	4770      	bx	lr

00404fe4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  404fe4:	b480      	push	{r7}
  404fe6:	b083      	sub	sp, #12
  404fe8:	af00      	add	r7, sp, #0
  404fea:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  404fec:	687b      	ldr	r3, [r7, #4]
  404fee:	2210      	movs	r2, #16
  404ff0:	601a      	str	r2, [r3, #0]
}
  404ff2:	370c      	adds	r7, #12
  404ff4:	46bd      	mov	sp, r7
  404ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ffa:	4770      	bx	lr

00404ffc <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  404ffc:	b480      	push	{r7}
  404ffe:	b083      	sub	sp, #12
  405000:	af00      	add	r7, sp, #0
  405002:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  405004:	687b      	ldr	r3, [r7, #4]
  405006:	2224      	movs	r2, #36	; 0x24
  405008:	601a      	str	r2, [r3, #0]
}
  40500a:	370c      	adds	r7, #12
  40500c:	46bd      	mov	sp, r7
  40500e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405012:	4770      	bx	lr

00405014 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  405014:	b480      	push	{r7}
  405016:	b083      	sub	sp, #12
  405018:	af00      	add	r7, sp, #0
  40501a:	6078      	str	r0, [r7, #4]
  40501c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40501e:	687b      	ldr	r3, [r7, #4]
  405020:	683a      	ldr	r2, [r7, #0]
  405022:	609a      	str	r2, [r3, #8]
}
  405024:	370c      	adds	r7, #12
  405026:	46bd      	mov	sp, r7
  405028:	f85d 7b04 	ldr.w	r7, [sp], #4
  40502c:	4770      	bx	lr
  40502e:	bf00      	nop

00405030 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  405030:	b480      	push	{r7}
  405032:	b083      	sub	sp, #12
  405034:	af00      	add	r7, sp, #0
  405036:	6078      	str	r0, [r7, #4]
  405038:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40503a:	687b      	ldr	r3, [r7, #4]
  40503c:	683a      	ldr	r2, [r7, #0]
  40503e:	60da      	str	r2, [r3, #12]
}
  405040:	370c      	adds	r7, #12
  405042:	46bd      	mov	sp, r7
  405044:	f85d 7b04 	ldr.w	r7, [sp], #4
  405048:	4770      	bx	lr
  40504a:	bf00      	nop

0040504c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  40504c:	b480      	push	{r7}
  40504e:	b083      	sub	sp, #12
  405050:	af00      	add	r7, sp, #0
  405052:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  405054:	687b      	ldr	r3, [r7, #4]
  405056:	f44f 7280 	mov.w	r2, #256	; 0x100
  40505a:	601a      	str	r2, [r3, #0]
}
  40505c:	370c      	adds	r7, #12
  40505e:	46bd      	mov	sp, r7
  405060:	f85d 7b04 	ldr.w	r7, [sp], #4
  405064:	4770      	bx	lr
  405066:	bf00      	nop

00405068 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  405068:	b480      	push	{r7}
  40506a:	b083      	sub	sp, #12
  40506c:	af00      	add	r7, sp, #0
  40506e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  405070:	687b      	ldr	r3, [r7, #4]
  405072:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  405076:	601a      	str	r2, [r3, #0]
}
  405078:	370c      	adds	r7, #12
  40507a:	46bd      	mov	sp, r7
  40507c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405080:	4770      	bx	lr
  405082:	bf00      	nop

00405084 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  405084:	b480      	push	{r7}
  405086:	b083      	sub	sp, #12
  405088:	af00      	add	r7, sp, #0
  40508a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40508c:	687b      	ldr	r3, [r7, #4]
  40508e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405092:	601a      	str	r2, [r3, #0]
}
  405094:	370c      	adds	r7, #12
  405096:	46bd      	mov	sp, r7
  405098:	f85d 7b04 	ldr.w	r7, [sp], #4
  40509c:	4770      	bx	lr
  40509e:	bf00      	nop

004050a0 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4050a0:	b480      	push	{r7}
  4050a2:	b083      	sub	sp, #12
  4050a4:	af00      	add	r7, sp, #0
  4050a6:	6078      	str	r0, [r7, #4]
  4050a8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4050aa:	687b      	ldr	r3, [r7, #4]
  4050ac:	695b      	ldr	r3, [r3, #20]
  4050ae:	f003 0302 	and.w	r3, r3, #2
  4050b2:	2b00      	cmp	r3, #0
  4050b4:	d101      	bne.n	4050ba <usart_write+0x1a>
		return 1;
  4050b6:	2301      	movs	r3, #1
  4050b8:	e005      	b.n	4050c6 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4050ba:	683b      	ldr	r3, [r7, #0]
  4050bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4050c0:	687b      	ldr	r3, [r7, #4]
  4050c2:	61da      	str	r2, [r3, #28]
	return 0;
  4050c4:	2300      	movs	r3, #0
}
  4050c6:	4618      	mov	r0, r3
  4050c8:	370c      	adds	r7, #12
  4050ca:	46bd      	mov	sp, r7
  4050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050d0:	4770      	bx	lr
  4050d2:	bf00      	nop

004050d4 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4050d4:	b480      	push	{r7}
  4050d6:	b083      	sub	sp, #12
  4050d8:	af00      	add	r7, sp, #0
  4050da:	6078      	str	r0, [r7, #4]
  4050dc:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4050de:	687b      	ldr	r3, [r7, #4]
  4050e0:	695b      	ldr	r3, [r3, #20]
  4050e2:	f003 0301 	and.w	r3, r3, #1
  4050e6:	2b00      	cmp	r3, #0
  4050e8:	d101      	bne.n	4050ee <usart_read+0x1a>
		return 1;
  4050ea:	2301      	movs	r3, #1
  4050ec:	e006      	b.n	4050fc <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4050ee:	687b      	ldr	r3, [r7, #4]
  4050f0:	699b      	ldr	r3, [r3, #24]
  4050f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4050f6:	683b      	ldr	r3, [r7, #0]
  4050f8:	601a      	str	r2, [r3, #0]

	return 0;
  4050fa:	2300      	movs	r3, #0
}
  4050fc:	4618      	mov	r0, r3
  4050fe:	370c      	adds	r7, #12
  405100:	46bd      	mov	sp, r7
  405102:	f85d 7b04 	ldr.w	r7, [sp], #4
  405106:	4770      	bx	lr

00405108 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
  405108:	b480      	push	{r7}
  40510a:	b083      	sub	sp, #12
  40510c:	af00      	add	r7, sp, #0
  40510e:	6078      	str	r0, [r7, #4]
  405110:	6039      	str	r1, [r7, #0]
	/* Wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  405112:	bf00      	nop
  405114:	687b      	ldr	r3, [r7, #4]
  405116:	695b      	ldr	r3, [r3, #20]
  405118:	f003 0301 	and.w	r3, r3, #1
  40511c:	2b00      	cmp	r3, #0
  40511e:	d0f9      	beq.n	405114 <usart_getchar+0xc>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  405120:	687b      	ldr	r3, [r7, #4]
  405122:	699b      	ldr	r3, [r3, #24]
  405124:	f3c3 0208 	ubfx	r2, r3, #0, #9
  405128:	683b      	ldr	r3, [r7, #0]
  40512a:	601a      	str	r2, [r3, #0]

	return 0;
  40512c:	2300      	movs	r3, #0
}
  40512e:	4618      	mov	r0, r3
  405130:	370c      	adds	r7, #12
  405132:	46bd      	mov	sp, r7
  405134:	f85d 7b04 	ldr.w	r7, [sp], #4
  405138:	4770      	bx	lr
  40513a:	bf00      	nop

0040513c <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  40513c:	b480      	push	{r7}
  40513e:	b083      	sub	sp, #12
  405140:	af00      	add	r7, sp, #0
  405142:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  405144:	687b      	ldr	r3, [r7, #4]
  405146:	4a04      	ldr	r2, [pc, #16]	; (405158 <usart_disable_writeprotect+0x1c>)
  405148:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  40514c:	370c      	adds	r7, #12
  40514e:	46bd      	mov	sp, r7
  405150:	f85d 7b04 	ldr.w	r7, [sp], #4
  405154:	4770      	bx	lr
  405156:	bf00      	nop
  405158:	55534100 	.word	0x55534100

0040515c <vLedTimerCallback>:
drv_led_color_type_t vledColor;	//global variable to store led color, used in timer callback
drv_led_state_type_t vledState; //global variable to store led state, used in timer callback

//Led Timer callback function
void vLedTimerCallback( xTimerHandle xTimer )
{
  40515c:	b590      	push	{r4, r7, lr}
  40515e:	b085      	sub	sp, #20
  405160:	af02      	add	r7, sp, #8
  405162:	6078      	str	r0, [r7, #4]
	if(vledState == DRV_LED_FLASH)	//perform the action only if state is flashing
  405164:	4b2f      	ldr	r3, [pc, #188]	; (405224 <vLedTimerCallback+0xc8>)
  405166:	781b      	ldrb	r3, [r3, #0]
  405168:	2b00      	cmp	r3, #0
  40516a:	d14d      	bne.n	405208 <vLedTimerCallback+0xac>
	{
		//check which led color is set and toggle the pin state
		switch(vledColor)
  40516c:	4b2e      	ldr	r3, [pc, #184]	; (405228 <vLedTimerCallback+0xcc>)
  40516e:	781b      	ldrb	r3, [r3, #0]
  405170:	2b05      	cmp	r3, #5
  405172:	d847      	bhi.n	405204 <vLedTimerCallback+0xa8>
  405174:	a201      	add	r2, pc, #4	; (adr r2, 40517c <vLedTimerCallback+0x20>)
  405176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40517a:	bf00      	nop
  40517c:	00405195 	.word	0x00405195
  405180:	004051a1 	.word	0x004051a1
  405184:	004051ad 	.word	0x004051ad
  405188:	004051b9 	.word	0x004051b9
  40518c:	004051cf 	.word	0x004051cf
  405190:	004051ef 	.word	0x004051ef
		{
			case DRV_LED_RED:
				drv_gpio_togglePin(ledConfig.redLed);
  405194:	4b25      	ldr	r3, [pc, #148]	; (40522c <vLedTimerCallback+0xd0>)
  405196:	781b      	ldrb	r3, [r3, #0]
  405198:	4618      	mov	r0, r3
  40519a:	4b25      	ldr	r3, [pc, #148]	; (405230 <vLedTimerCallback+0xd4>)
  40519c:	4798      	blx	r3
				break;
  40519e:	e032      	b.n	405206 <vLedTimerCallback+0xaa>
			case DRV_LED_BLUE:
				drv_gpio_togglePin(ledConfig.blueLed);
  4051a0:	4b22      	ldr	r3, [pc, #136]	; (40522c <vLedTimerCallback+0xd0>)
  4051a2:	785b      	ldrb	r3, [r3, #1]
  4051a4:	4618      	mov	r0, r3
  4051a6:	4b22      	ldr	r3, [pc, #136]	; (405230 <vLedTimerCallback+0xd4>)
  4051a8:	4798      	blx	r3
				break;
  4051aa:	e02c      	b.n	405206 <vLedTimerCallback+0xaa>
			case DRV_LED_GREEN:
				drv_gpio_togglePin(ledConfig.greenLed);
  4051ac:	4b1f      	ldr	r3, [pc, #124]	; (40522c <vLedTimerCallback+0xd0>)
  4051ae:	789b      	ldrb	r3, [r3, #2]
  4051b0:	4618      	mov	r0, r3
  4051b2:	4b1f      	ldr	r3, [pc, #124]	; (405230 <vLedTimerCallback+0xd4>)
  4051b4:	4798      	blx	r3
				break;
  4051b6:	e026      	b.n	405206 <vLedTimerCallback+0xaa>
			case DRV_LED_YELLOW:
				drv_gpio_togglePin(ledConfig.redLed);
  4051b8:	4b1c      	ldr	r3, [pc, #112]	; (40522c <vLedTimerCallback+0xd0>)
  4051ba:	781b      	ldrb	r3, [r3, #0]
  4051bc:	4618      	mov	r0, r3
  4051be:	4b1c      	ldr	r3, [pc, #112]	; (405230 <vLedTimerCallback+0xd4>)
  4051c0:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.greenLed);
  4051c2:	4b1a      	ldr	r3, [pc, #104]	; (40522c <vLedTimerCallback+0xd0>)
  4051c4:	789b      	ldrb	r3, [r3, #2]
  4051c6:	4618      	mov	r0, r3
  4051c8:	4b19      	ldr	r3, [pc, #100]	; (405230 <vLedTimerCallback+0xd4>)
  4051ca:	4798      	blx	r3
				break;
  4051cc:	e01b      	b.n	405206 <vLedTimerCallback+0xaa>
			case DRV_LED_WHITE:
				drv_gpio_togglePin(ledConfig.redLed);
  4051ce:	4b17      	ldr	r3, [pc, #92]	; (40522c <vLedTimerCallback+0xd0>)
  4051d0:	781b      	ldrb	r3, [r3, #0]
  4051d2:	4618      	mov	r0, r3
  4051d4:	4b16      	ldr	r3, [pc, #88]	; (405230 <vLedTimerCallback+0xd4>)
  4051d6:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.greenLed);
  4051d8:	4b14      	ldr	r3, [pc, #80]	; (40522c <vLedTimerCallback+0xd0>)
  4051da:	789b      	ldrb	r3, [r3, #2]
  4051dc:	4618      	mov	r0, r3
  4051de:	4b14      	ldr	r3, [pc, #80]	; (405230 <vLedTimerCallback+0xd4>)
  4051e0:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.blueLed);
  4051e2:	4b12      	ldr	r3, [pc, #72]	; (40522c <vLedTimerCallback+0xd0>)
  4051e4:	785b      	ldrb	r3, [r3, #1]
  4051e6:	4618      	mov	r0, r3
  4051e8:	4b11      	ldr	r3, [pc, #68]	; (405230 <vLedTimerCallback+0xd4>)
  4051ea:	4798      	blx	r3
				break;
  4051ec:	e00b      	b.n	405206 <vLedTimerCallback+0xaa>
			case DRV_LED_TURQUOISE:
				drv_gpio_togglePin(ledConfig.greenLed);
  4051ee:	4b0f      	ldr	r3, [pc, #60]	; (40522c <vLedTimerCallback+0xd0>)
  4051f0:	789b      	ldrb	r3, [r3, #2]
  4051f2:	4618      	mov	r0, r3
  4051f4:	4b0e      	ldr	r3, [pc, #56]	; (405230 <vLedTimerCallback+0xd4>)
  4051f6:	4798      	blx	r3
				drv_gpio_togglePin(ledConfig.blueLed);
  4051f8:	4b0c      	ldr	r3, [pc, #48]	; (40522c <vLedTimerCallback+0xd0>)
  4051fa:	785b      	ldrb	r3, [r3, #1]
  4051fc:	4618      	mov	r0, r3
  4051fe:	4b0c      	ldr	r3, [pc, #48]	; (405230 <vLedTimerCallback+0xd4>)
  405200:	4798      	blx	r3
				break;
  405202:	e000      	b.n	405206 <vLedTimerCallback+0xaa>
			default:
				break;
  405204:	bf00      	nop
  405206:	e009      	b.n	40521c <vLedTimerCallback+0xc0>
	}
	else
	{
		//usually shouldn't end up here
		//if it does the timer was not stopped while initializing led to SOLID state
		xTimerStop(LedTimer, 0);
  405208:	4b0a      	ldr	r3, [pc, #40]	; (405234 <vLedTimerCallback+0xd8>)
  40520a:	681b      	ldr	r3, [r3, #0]
  40520c:	2200      	movs	r2, #0
  40520e:	9200      	str	r2, [sp, #0]
  405210:	4618      	mov	r0, r3
  405212:	2101      	movs	r1, #1
  405214:	2200      	movs	r2, #0
  405216:	2300      	movs	r3, #0
  405218:	4c07      	ldr	r4, [pc, #28]	; (405238 <vLedTimerCallback+0xdc>)
  40521a:	47a0      	blx	r4
	}
}
  40521c:	370c      	adds	r7, #12
  40521e:	46bd      	mov	sp, r7
  405220:	bd90      	pop	{r4, r7, pc}
  405222:	bf00      	nop
  405224:	20014fb0 	.word	0x20014fb0
  405228:	20014fa8 	.word	0x20014fa8
  40522c:	20014fb4 	.word	0x20014fb4
  405230:	004048c5 	.word	0x004048c5
  405234:	20014fac 	.word	0x20014fac
  405238:	00407c91 	.word	0x00407c91

0040523c <drv_led_init>:
int timerId = 0;
//store the led configuration
status_t drv_led_init(drv_led_config_t* configLed)
{
  40523c:	b590      	push	{r4, r7, lr}
  40523e:	b087      	sub	sp, #28
  405240:	af02      	add	r7, sp, #8
  405242:	6078      	str	r0, [r7, #4]
	status_t result = STATUS_PASS;
  405244:	2300      	movs	r3, #0
  405246:	73fb      	strb	r3, [r7, #15]
	//store the led configuration
	ledConfig.redLed = configLed->redLed;
  405248:	687b      	ldr	r3, [r7, #4]
  40524a:	781a      	ldrb	r2, [r3, #0]
  40524c:	4b0f      	ldr	r3, [pc, #60]	; (40528c <drv_led_init+0x50>)
  40524e:	701a      	strb	r2, [r3, #0]
	ledConfig.blueLed = configLed->blueLed;
  405250:	687b      	ldr	r3, [r7, #4]
  405252:	785a      	ldrb	r2, [r3, #1]
  405254:	4b0d      	ldr	r3, [pc, #52]	; (40528c <drv_led_init+0x50>)
  405256:	705a      	strb	r2, [r3, #1]
	ledConfig.greenLed = configLed->greenLed;
  405258:	687b      	ldr	r3, [r7, #4]
  40525a:	789a      	ldrb	r2, [r3, #2]
  40525c:	4b0b      	ldr	r3, [pc, #44]	; (40528c <drv_led_init+0x50>)
  40525e:	709a      	strb	r2, [r3, #2]
	
	//create LedTimer task
	LedTimer = xTimerCreate("Led Timer", (LED_BLINK_RATE/portTICK_RATE_MS), pdTRUE, &timerId, vLedTimerCallback);
  405260:	4b0b      	ldr	r3, [pc, #44]	; (405290 <drv_led_init+0x54>)
  405262:	9300      	str	r3, [sp, #0]
  405264:	480b      	ldr	r0, [pc, #44]	; (405294 <drv_led_init+0x58>)
  405266:	21fa      	movs	r1, #250	; 0xfa
  405268:	2201      	movs	r2, #1
  40526a:	4b0b      	ldr	r3, [pc, #44]	; (405298 <drv_led_init+0x5c>)
  40526c:	4c0b      	ldr	r4, [pc, #44]	; (40529c <drv_led_init+0x60>)
  40526e:	47a0      	blx	r4
  405270:	4602      	mov	r2, r0
  405272:	4b0b      	ldr	r3, [pc, #44]	; (4052a0 <drv_led_init+0x64>)
  405274:	601a      	str	r2, [r3, #0]
	if (LedTimer == NULL)
  405276:	4b0a      	ldr	r3, [pc, #40]	; (4052a0 <drv_led_init+0x64>)
  405278:	681b      	ldr	r3, [r3, #0]
  40527a:	2b00      	cmp	r3, #0
  40527c:	d101      	bne.n	405282 <drv_led_init+0x46>
	{
		result = STATUS_FAIL;
  40527e:	2301      	movs	r3, #1
  405280:	73fb      	strb	r3, [r7, #15]
	}
	return result;
  405282:	7bfb      	ldrb	r3, [r7, #15]
}
  405284:	4618      	mov	r0, r3
  405286:	3714      	adds	r7, #20
  405288:	46bd      	mov	sp, r7
  40528a:	bd90      	pop	{r4, r7, pc}
  40528c:	20014fb4 	.word	0x20014fb4
  405290:	0040515d 	.word	0x0040515d
  405294:	00413624 	.word	0x00413624
  405298:	20000cbc 	.word	0x20000cbc
  40529c:	00407c15 	.word	0x00407c15
  4052a0:	20014fac 	.word	0x20014fac

004052a4 <drv_led_set>:

status_t drv_led_set(drv_led_color_type_t ledColor, drv_led_state_type_t ledState)
{
  4052a4:	b590      	push	{r4, r7, lr}
  4052a6:	b087      	sub	sp, #28
  4052a8:	af02      	add	r7, sp, #8
  4052aa:	4602      	mov	r2, r0
  4052ac:	460b      	mov	r3, r1
  4052ae:	71fa      	strb	r2, [r7, #7]
  4052b0:	71bb      	strb	r3, [r7, #6]
	status_t result = STATUS_PASS;
  4052b2:	2300      	movs	r3, #0
  4052b4:	73fb      	strb	r3, [r7, #15]
	if(LedTimer != NULL)
  4052b6:	4b6b      	ldr	r3, [pc, #428]	; (405464 <drv_led_set+0x1c0>)
  4052b8:	681b      	ldr	r3, [r3, #0]
  4052ba:	2b00      	cmp	r3, #0
  4052bc:	d011      	beq.n	4052e2 <drv_led_set+0x3e>
	{
		if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  4052be:	4b69      	ldr	r3, [pc, #420]	; (405464 <drv_led_set+0x1c0>)
  4052c0:	681b      	ldr	r3, [r3, #0]
  4052c2:	4618      	mov	r0, r3
  4052c4:	4b68      	ldr	r3, [pc, #416]	; (405468 <drv_led_set+0x1c4>)
  4052c6:	4798      	blx	r3
  4052c8:	4603      	mov	r3, r0
  4052ca:	2b00      	cmp	r3, #0
  4052cc:	d009      	beq.n	4052e2 <drv_led_set+0x3e>
		{
			//timer is active, stop it
			xTimerStop(LedTimer, 0);		
  4052ce:	4b65      	ldr	r3, [pc, #404]	; (405464 <drv_led_set+0x1c0>)
  4052d0:	681b      	ldr	r3, [r3, #0]
  4052d2:	2200      	movs	r2, #0
  4052d4:	9200      	str	r2, [sp, #0]
  4052d6:	4618      	mov	r0, r3
  4052d8:	2101      	movs	r1, #1
  4052da:	2200      	movs	r2, #0
  4052dc:	2300      	movs	r3, #0
  4052de:	4c63      	ldr	r4, [pc, #396]	; (40546c <drv_led_set+0x1c8>)
  4052e0:	47a0      	blx	r4
		}
	}
	//switch off all LEDs
	drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_HIGH);
  4052e2:	4b63      	ldr	r3, [pc, #396]	; (405470 <drv_led_set+0x1cc>)
  4052e4:	781b      	ldrb	r3, [r3, #0]
  4052e6:	4618      	mov	r0, r3
  4052e8:	2101      	movs	r1, #1
  4052ea:	4b62      	ldr	r3, [pc, #392]	; (405474 <drv_led_set+0x1d0>)
  4052ec:	4798      	blx	r3
	drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_HIGH);
  4052ee:	4b60      	ldr	r3, [pc, #384]	; (405470 <drv_led_set+0x1cc>)
  4052f0:	785b      	ldrb	r3, [r3, #1]
  4052f2:	4618      	mov	r0, r3
  4052f4:	2101      	movs	r1, #1
  4052f6:	4b5f      	ldr	r3, [pc, #380]	; (405474 <drv_led_set+0x1d0>)
  4052f8:	4798      	blx	r3
	drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_HIGH);
  4052fa:	4b5d      	ldr	r3, [pc, #372]	; (405470 <drv_led_set+0x1cc>)
  4052fc:	789b      	ldrb	r3, [r3, #2]
  4052fe:	4618      	mov	r0, r3
  405300:	2101      	movs	r1, #1
  405302:	4b5c      	ldr	r3, [pc, #368]	; (405474 <drv_led_set+0x1d0>)
  405304:	4798      	blx	r3
	
	vledColor = ledColor;	//copy the color to a global variable used in timer callback
  405306:	4b5c      	ldr	r3, [pc, #368]	; (405478 <drv_led_set+0x1d4>)
  405308:	79fa      	ldrb	r2, [r7, #7]
  40530a:	701a      	strb	r2, [r3, #0]
	vledState = ledState;	//copy the state to a global variable used in timer callback
  40530c:	4b5b      	ldr	r3, [pc, #364]	; (40547c <drv_led_set+0x1d8>)
  40530e:	79ba      	ldrb	r2, [r7, #6]
  405310:	701a      	strb	r2, [r3, #0]
	switch (ledColor)
  405312:	79fb      	ldrb	r3, [r7, #7]
  405314:	2b06      	cmp	r3, #6
  405316:	d866      	bhi.n	4053e6 <drv_led_set+0x142>
  405318:	a201      	add	r2, pc, #4	; (adr r2, 405320 <drv_led_set+0x7c>)
  40531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40531e:	bf00      	nop
  405320:	0040533d 	.word	0x0040533d
  405324:	0040534b 	.word	0x0040534b
  405328:	00405359 	.word	0x00405359
  40532c:	00405367 	.word	0x00405367
  405330:	00405381 	.word	0x00405381
  405334:	004053a7 	.word	0x004053a7
  405338:	004053c1 	.word	0x004053c1
	{
		case DRV_LED_RED:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  40533c:	4b4c      	ldr	r3, [pc, #304]	; (405470 <drv_led_set+0x1cc>)
  40533e:	781b      	ldrb	r3, [r3, #0]
  405340:	4618      	mov	r0, r3
  405342:	2100      	movs	r1, #0
  405344:	4b4b      	ldr	r3, [pc, #300]	; (405474 <drv_led_set+0x1d0>)
  405346:	4798      	blx	r3
			break;
  405348:	e04e      	b.n	4053e8 <drv_led_set+0x144>
		case DRV_LED_BLUE:
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  40534a:	4b49      	ldr	r3, [pc, #292]	; (405470 <drv_led_set+0x1cc>)
  40534c:	785b      	ldrb	r3, [r3, #1]
  40534e:	4618      	mov	r0, r3
  405350:	2100      	movs	r1, #0
  405352:	4b48      	ldr	r3, [pc, #288]	; (405474 <drv_led_set+0x1d0>)
  405354:	4798      	blx	r3
			break;
  405356:	e047      	b.n	4053e8 <drv_led_set+0x144>
		case DRV_LED_GREEN:
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  405358:	4b45      	ldr	r3, [pc, #276]	; (405470 <drv_led_set+0x1cc>)
  40535a:	789b      	ldrb	r3, [r3, #2]
  40535c:	4618      	mov	r0, r3
  40535e:	2100      	movs	r1, #0
  405360:	4b44      	ldr	r3, [pc, #272]	; (405474 <drv_led_set+0x1d0>)
  405362:	4798      	blx	r3
			break;
  405364:	e040      	b.n	4053e8 <drv_led_set+0x144>
		case DRV_LED_YELLOW:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  405366:	4b42      	ldr	r3, [pc, #264]	; (405470 <drv_led_set+0x1cc>)
  405368:	781b      	ldrb	r3, [r3, #0]
  40536a:	4618      	mov	r0, r3
  40536c:	2100      	movs	r1, #0
  40536e:	4b41      	ldr	r3, [pc, #260]	; (405474 <drv_led_set+0x1d0>)
  405370:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  405372:	4b3f      	ldr	r3, [pc, #252]	; (405470 <drv_led_set+0x1cc>)
  405374:	789b      	ldrb	r3, [r3, #2]
  405376:	4618      	mov	r0, r3
  405378:	2100      	movs	r1, #0
  40537a:	4b3e      	ldr	r3, [pc, #248]	; (405474 <drv_led_set+0x1d0>)
  40537c:	4798      	blx	r3
			break;
  40537e:	e033      	b.n	4053e8 <drv_led_set+0x144>
		case DRV_LED_WHITE:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_LOW);
  405380:	4b3b      	ldr	r3, [pc, #236]	; (405470 <drv_led_set+0x1cc>)
  405382:	781b      	ldrb	r3, [r3, #0]
  405384:	4618      	mov	r0, r3
  405386:	2100      	movs	r1, #0
  405388:	4b3a      	ldr	r3, [pc, #232]	; (405474 <drv_led_set+0x1d0>)
  40538a:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  40538c:	4b38      	ldr	r3, [pc, #224]	; (405470 <drv_led_set+0x1cc>)
  40538e:	789b      	ldrb	r3, [r3, #2]
  405390:	4618      	mov	r0, r3
  405392:	2100      	movs	r1, #0
  405394:	4b37      	ldr	r3, [pc, #220]	; (405474 <drv_led_set+0x1d0>)
  405396:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  405398:	4b35      	ldr	r3, [pc, #212]	; (405470 <drv_led_set+0x1cc>)
  40539a:	785b      	ldrb	r3, [r3, #1]
  40539c:	4618      	mov	r0, r3
  40539e:	2100      	movs	r1, #0
  4053a0:	4b34      	ldr	r3, [pc, #208]	; (405474 <drv_led_set+0x1d0>)
  4053a2:	4798      	blx	r3
			break;
  4053a4:	e020      	b.n	4053e8 <drv_led_set+0x144>
		case DRV_LED_TURQUOISE:
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_LOW);
  4053a6:	4b32      	ldr	r3, [pc, #200]	; (405470 <drv_led_set+0x1cc>)
  4053a8:	789b      	ldrb	r3, [r3, #2]
  4053aa:	4618      	mov	r0, r3
  4053ac:	2100      	movs	r1, #0
  4053ae:	4b31      	ldr	r3, [pc, #196]	; (405474 <drv_led_set+0x1d0>)
  4053b0:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_LOW);
  4053b2:	4b2f      	ldr	r3, [pc, #188]	; (405470 <drv_led_set+0x1cc>)
  4053b4:	785b      	ldrb	r3, [r3, #1]
  4053b6:	4618      	mov	r0, r3
  4053b8:	2100      	movs	r1, #0
  4053ba:	4b2e      	ldr	r3, [pc, #184]	; (405474 <drv_led_set+0x1d0>)
  4053bc:	4798      	blx	r3
			break;
  4053be:	e013      	b.n	4053e8 <drv_led_set+0x144>
		case DRV_LED_OFF:
			drv_gpio_setPinState(ledConfig.redLed, DRV_GPIO_PIN_STATE_HIGH);
  4053c0:	4b2b      	ldr	r3, [pc, #172]	; (405470 <drv_led_set+0x1cc>)
  4053c2:	781b      	ldrb	r3, [r3, #0]
  4053c4:	4618      	mov	r0, r3
  4053c6:	2101      	movs	r1, #1
  4053c8:	4b2a      	ldr	r3, [pc, #168]	; (405474 <drv_led_set+0x1d0>)
  4053ca:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.greenLed, DRV_GPIO_PIN_STATE_HIGH);
  4053cc:	4b28      	ldr	r3, [pc, #160]	; (405470 <drv_led_set+0x1cc>)
  4053ce:	789b      	ldrb	r3, [r3, #2]
  4053d0:	4618      	mov	r0, r3
  4053d2:	2101      	movs	r1, #1
  4053d4:	4b27      	ldr	r3, [pc, #156]	; (405474 <drv_led_set+0x1d0>)
  4053d6:	4798      	blx	r3
			drv_gpio_setPinState(ledConfig.blueLed, DRV_GPIO_PIN_STATE_HIGH);
  4053d8:	4b25      	ldr	r3, [pc, #148]	; (405470 <drv_led_set+0x1cc>)
  4053da:	785b      	ldrb	r3, [r3, #1]
  4053dc:	4618      	mov	r0, r3
  4053de:	2101      	movs	r1, #1
  4053e0:	4b24      	ldr	r3, [pc, #144]	; (405474 <drv_led_set+0x1d0>)
  4053e2:	4798      	blx	r3
			break;
  4053e4:	e000      	b.n	4053e8 <drv_led_set+0x144>
		default:
			break;
  4053e6:	bf00      	nop
	}
	
	if ((ledState == DRV_LED_FLASH) & (ledColor != DRV_LED_OFF))
  4053e8:	79bb      	ldrb	r3, [r7, #6]
  4053ea:	2b00      	cmp	r3, #0
  4053ec:	bf14      	ite	ne
  4053ee:	2300      	movne	r3, #0
  4053f0:	2301      	moveq	r3, #1
  4053f2:	b2da      	uxtb	r2, r3
  4053f4:	79fb      	ldrb	r3, [r7, #7]
  4053f6:	2b06      	cmp	r3, #6
  4053f8:	bf0c      	ite	eq
  4053fa:	2300      	moveq	r3, #0
  4053fc:	2301      	movne	r3, #1
  4053fe:	b2db      	uxtb	r3, r3
  405400:	4013      	ands	r3, r2
  405402:	b2db      	uxtb	r3, r3
  405404:	2b00      	cmp	r3, #0
  405406:	d011      	beq.n	40542c <drv_led_set+0x188>
	{
		if(LedTimer != NULL)
  405408:	4b16      	ldr	r3, [pc, #88]	; (405464 <drv_led_set+0x1c0>)
  40540a:	681b      	ldr	r3, [r3, #0]
  40540c:	2b00      	cmp	r3, #0
  40540e:	d023      	beq.n	405458 <drv_led_set+0x1b4>
		{
			xTimerReset(LedTimer, 0);	
  405410:	4b14      	ldr	r3, [pc, #80]	; (405464 <drv_led_set+0x1c0>)
  405412:	681c      	ldr	r4, [r3, #0]
  405414:	4b1a      	ldr	r3, [pc, #104]	; (405480 <drv_led_set+0x1dc>)
  405416:	4798      	blx	r3
  405418:	4603      	mov	r3, r0
  40541a:	2200      	movs	r2, #0
  40541c:	9200      	str	r2, [sp, #0]
  40541e:	4620      	mov	r0, r4
  405420:	2100      	movs	r1, #0
  405422:	461a      	mov	r2, r3
  405424:	2300      	movs	r3, #0
  405426:	4c11      	ldr	r4, [pc, #68]	; (40546c <drv_led_set+0x1c8>)
  405428:	47a0      	blx	r4
  40542a:	e015      	b.n	405458 <drv_led_set+0x1b4>
		}
		
	}
	else
	{
		if(LedTimer != NULL)
  40542c:	4b0d      	ldr	r3, [pc, #52]	; (405464 <drv_led_set+0x1c0>)
  40542e:	681b      	ldr	r3, [r3, #0]
  405430:	2b00      	cmp	r3, #0
  405432:	d011      	beq.n	405458 <drv_led_set+0x1b4>
		{				
			//stop the timer
			if (xTimerIsTimerActive(LedTimer) != pdFALSE)	//check if timer is active or dormant
  405434:	4b0b      	ldr	r3, [pc, #44]	; (405464 <drv_led_set+0x1c0>)
  405436:	681b      	ldr	r3, [r3, #0]
  405438:	4618      	mov	r0, r3
  40543a:	4b0b      	ldr	r3, [pc, #44]	; (405468 <drv_led_set+0x1c4>)
  40543c:	4798      	blx	r3
  40543e:	4603      	mov	r3, r0
  405440:	2b00      	cmp	r3, #0
  405442:	d009      	beq.n	405458 <drv_led_set+0x1b4>
			{
				xTimerStop(LedTimer, 0);
  405444:	4b07      	ldr	r3, [pc, #28]	; (405464 <drv_led_set+0x1c0>)
  405446:	681b      	ldr	r3, [r3, #0]
  405448:	2200      	movs	r2, #0
  40544a:	9200      	str	r2, [sp, #0]
  40544c:	4618      	mov	r0, r3
  40544e:	2101      	movs	r1, #1
  405450:	2200      	movs	r2, #0
  405452:	2300      	movs	r3, #0
  405454:	4c05      	ldr	r4, [pc, #20]	; (40546c <drv_led_set+0x1c8>)
  405456:	47a0      	blx	r4
			}
		}
	}
	return result;
  405458:	7bfb      	ldrb	r3, [r7, #15]
}
  40545a:	4618      	mov	r0, r3
  40545c:	3714      	adds	r7, #20
  40545e:	46bd      	mov	sp, r7
  405460:	bd90      	pop	{r4, r7, pc}
  405462:	bf00      	nop
  405464:	20014fac 	.word	0x20014fac
  405468:	004081bd 	.word	0x004081bd
  40546c:	00407c91 	.word	0x00407c91
  405470:	20014fb4 	.word	0x20014fb4
  405474:	00404781 	.word	0x00404781
  405478:	20014fa8 	.word	0x20014fa8
  40547c:	20014fb0 	.word	0x20014fb0
  405480:	00407289 	.word	0x00407289

00405484 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  405484:	b480      	push	{r7}
  405486:	b083      	sub	sp, #12
  405488:	af00      	add	r7, sp, #0
  40548a:	4603      	mov	r3, r0
  40548c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40548e:	4b08      	ldr	r3, [pc, #32]	; (4054b0 <NVIC_EnableIRQ+0x2c>)
  405490:	f997 2007 	ldrsb.w	r2, [r7, #7]
  405494:	0952      	lsrs	r2, r2, #5
  405496:	79f9      	ldrb	r1, [r7, #7]
  405498:	f001 011f 	and.w	r1, r1, #31
  40549c:	2001      	movs	r0, #1
  40549e:	fa00 f101 	lsl.w	r1, r0, r1
  4054a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4054a6:	370c      	adds	r7, #12
  4054a8:	46bd      	mov	sp, r7
  4054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054ae:	4770      	bx	lr
  4054b0:	e000e100 	.word	0xe000e100

004054b4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4054b4:	b480      	push	{r7}
  4054b6:	b083      	sub	sp, #12
  4054b8:	af00      	add	r7, sp, #0
  4054ba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4054bc:	687b      	ldr	r3, [r7, #4]
  4054be:	2b07      	cmp	r3, #7
  4054c0:	d825      	bhi.n	40550e <osc_get_rate+0x5a>
  4054c2:	a201      	add	r2, pc, #4	; (adr r2, 4054c8 <osc_get_rate+0x14>)
  4054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4054c8:	004054e9 	.word	0x004054e9
  4054cc:	004054ef 	.word	0x004054ef
  4054d0:	004054f5 	.word	0x004054f5
  4054d4:	004054fb 	.word	0x004054fb
  4054d8:	004054ff 	.word	0x004054ff
  4054dc:	00405503 	.word	0x00405503
  4054e0:	00405507 	.word	0x00405507
  4054e4:	0040550b 	.word	0x0040550b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4054e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4054ec:	e010      	b.n	405510 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4054ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4054f2:	e00d      	b.n	405510 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4054f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4054f8:	e00a      	b.n	405510 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4054fa:	4b08      	ldr	r3, [pc, #32]	; (40551c <osc_get_rate+0x68>)
  4054fc:	e008      	b.n	405510 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4054fe:	4b08      	ldr	r3, [pc, #32]	; (405520 <osc_get_rate+0x6c>)
  405500:	e006      	b.n	405510 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  405502:	4b08      	ldr	r3, [pc, #32]	; (405524 <osc_get_rate+0x70>)
  405504:	e004      	b.n	405510 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  405506:	4b07      	ldr	r3, [pc, #28]	; (405524 <osc_get_rate+0x70>)
  405508:	e002      	b.n	405510 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40550a:	4b06      	ldr	r3, [pc, #24]	; (405524 <osc_get_rate+0x70>)
  40550c:	e000      	b.n	405510 <osc_get_rate+0x5c>
	}

	return 0;
  40550e:	2300      	movs	r3, #0
}
  405510:	4618      	mov	r0, r3
  405512:	370c      	adds	r7, #12
  405514:	46bd      	mov	sp, r7
  405516:	f85d 7b04 	ldr.w	r7, [sp], #4
  40551a:	4770      	bx	lr
  40551c:	003d0900 	.word	0x003d0900
  405520:	007a1200 	.word	0x007a1200
  405524:	00b71b00 	.word	0x00b71b00

00405528 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  405528:	b580      	push	{r7, lr}
  40552a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40552c:	2006      	movs	r0, #6
  40552e:	4b04      	ldr	r3, [pc, #16]	; (405540 <sysclk_get_main_hz+0x18>)
  405530:	4798      	blx	r3
  405532:	4602      	mov	r2, r0
  405534:	4613      	mov	r3, r2
  405536:	009b      	lsls	r3, r3, #2
  405538:	4413      	add	r3, r2
  40553a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40553c:	4618      	mov	r0, r3
  40553e:	bd80      	pop	{r7, pc}
  405540:	004054b5 	.word	0x004054b5

00405544 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  405544:	b580      	push	{r7, lr}
  405546:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  405548:	4b02      	ldr	r3, [pc, #8]	; (405554 <sysclk_get_peripheral_hz+0x10>)
  40554a:	4798      	blx	r3
  40554c:	4603      	mov	r3, r0
  40554e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  405550:	4618      	mov	r0, r3
  405552:	bd80      	pop	{r7, pc}
  405554:	00405529 	.word	0x00405529

00405558 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  405558:	b580      	push	{r7, lr}
  40555a:	b082      	sub	sp, #8
  40555c:	af00      	add	r7, sp, #0
  40555e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  405560:	6878      	ldr	r0, [r7, #4]
  405562:	4b02      	ldr	r3, [pc, #8]	; (40556c <sysclk_enable_peripheral_clock+0x14>)
  405564:	4798      	blx	r3
}
  405566:	3708      	adds	r7, #8
  405568:	46bd      	mov	sp, r7
  40556a:	bd80      	pop	{r7, pc}
  40556c:	00409665 	.word	0x00409665

00405570 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  405570:	b580      	push	{r7, lr}
  405572:	b08c      	sub	sp, #48	; 0x30
  405574:	af00      	add	r7, sp, #0
  405576:	6078      	str	r0, [r7, #4]
  405578:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40557a:	4b31      	ldr	r3, [pc, #196]	; (405640 <usart_serial_init+0xd0>)
  40557c:	4798      	blx	r3
  40557e:	4603      	mov	r3, r0
  405580:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  405582:	683b      	ldr	r3, [r7, #0]
  405584:	681b      	ldr	r3, [r3, #0]
  405586:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  405588:	683b      	ldr	r3, [r7, #0]
  40558a:	689b      	ldr	r3, [r3, #8]
  40558c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40558e:	683b      	ldr	r3, [r7, #0]
  405590:	681b      	ldr	r3, [r3, #0]
  405592:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  405594:	683b      	ldr	r3, [r7, #0]
  405596:	685b      	ldr	r3, [r3, #4]
  405598:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40559a:	683b      	ldr	r3, [r7, #0]
  40559c:	689b      	ldr	r3, [r3, #8]
  40559e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4055a0:	683b      	ldr	r3, [r7, #0]
  4055a2:	7b1b      	ldrb	r3, [r3, #12]
  4055a4:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4055a6:	2300      	movs	r3, #0
  4055a8:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4055aa:	687a      	ldr	r2, [r7, #4]
  4055ac:	4b25      	ldr	r3, [pc, #148]	; (405644 <usart_serial_init+0xd4>)
  4055ae:	429a      	cmp	r2, r3
  4055b0:	d108      	bne.n	4055c4 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  4055b2:	2008      	movs	r0, #8
  4055b4:	4b24      	ldr	r3, [pc, #144]	; (405648 <usart_serial_init+0xd8>)
  4055b6:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4055b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4055bc:	6878      	ldr	r0, [r7, #4]
  4055be:	4619      	mov	r1, r3
  4055c0:	4b22      	ldr	r3, [pc, #136]	; (40564c <usart_serial_init+0xdc>)
  4055c2:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4055c4:	687a      	ldr	r2, [r7, #4]
  4055c6:	4b22      	ldr	r3, [pc, #136]	; (405650 <usart_serial_init+0xe0>)
  4055c8:	429a      	cmp	r2, r3
  4055ca:	d108      	bne.n	4055de <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  4055cc:	2009      	movs	r0, #9
  4055ce:	4b1e      	ldr	r3, [pc, #120]	; (405648 <usart_serial_init+0xd8>)
  4055d0:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4055d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4055d6:	6878      	ldr	r0, [r7, #4]
  4055d8:	4619      	mov	r1, r3
  4055da:	4b1c      	ldr	r3, [pc, #112]	; (40564c <usart_serial_init+0xdc>)
  4055dc:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4055de:	687a      	ldr	r2, [r7, #4]
  4055e0:	4b1c      	ldr	r3, [pc, #112]	; (405654 <usart_serial_init+0xe4>)
  4055e2:	429a      	cmp	r2, r3
  4055e4:	d112      	bne.n	40560c <usart_serial_init+0x9c>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4055e6:	200e      	movs	r0, #14
  4055e8:	4b17      	ldr	r3, [pc, #92]	; (405648 <usart_serial_init+0xd8>)
  4055ea:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4055ec:	4b14      	ldr	r3, [pc, #80]	; (405640 <usart_serial_init+0xd0>)
  4055ee:	4798      	blx	r3
  4055f0:	4603      	mov	r3, r0
  4055f2:	f107 020c 	add.w	r2, r7, #12
  4055f6:	6878      	ldr	r0, [r7, #4]
  4055f8:	4611      	mov	r1, r2
  4055fa:	461a      	mov	r2, r3
  4055fc:	4b16      	ldr	r3, [pc, #88]	; (405658 <usart_serial_init+0xe8>)
  4055fe:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  405600:	6878      	ldr	r0, [r7, #4]
  405602:	4b16      	ldr	r3, [pc, #88]	; (40565c <usart_serial_init+0xec>)
  405604:	4798      	blx	r3
		usart_enable_rx(p_usart);
  405606:	6878      	ldr	r0, [r7, #4]
  405608:	4b15      	ldr	r3, [pc, #84]	; (405660 <usart_serial_init+0xf0>)
  40560a:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40560c:	687a      	ldr	r2, [r7, #4]
  40560e:	4b15      	ldr	r3, [pc, #84]	; (405664 <usart_serial_init+0xf4>)
  405610:	429a      	cmp	r2, r3
  405612:	d112      	bne.n	40563a <usart_serial_init+0xca>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  405614:	200f      	movs	r0, #15
  405616:	4b0c      	ldr	r3, [pc, #48]	; (405648 <usart_serial_init+0xd8>)
  405618:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40561a:	4b09      	ldr	r3, [pc, #36]	; (405640 <usart_serial_init+0xd0>)
  40561c:	4798      	blx	r3
  40561e:	4603      	mov	r3, r0
  405620:	f107 020c 	add.w	r2, r7, #12
  405624:	6878      	ldr	r0, [r7, #4]
  405626:	4611      	mov	r1, r2
  405628:	461a      	mov	r2, r3
  40562a:	4b0b      	ldr	r3, [pc, #44]	; (405658 <usart_serial_init+0xe8>)
  40562c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40562e:	6878      	ldr	r0, [r7, #4]
  405630:	4b0a      	ldr	r3, [pc, #40]	; (40565c <usart_serial_init+0xec>)
  405632:	4798      	blx	r3
		usart_enable_rx(p_usart);
  405634:	6878      	ldr	r0, [r7, #4]
  405636:	4b0a      	ldr	r3, [pc, #40]	; (405660 <usart_serial_init+0xf0>)
  405638:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  40563a:	3730      	adds	r7, #48	; 0x30
  40563c:	46bd      	mov	sp, r7
  40563e:	bd80      	pop	{r7, pc}
  405640:	00405545 	.word	0x00405545
  405644:	400e0600 	.word	0x400e0600
  405648:	00405559 	.word	0x00405559
  40564c:	00408531 	.word	0x00408531
  405650:	400e0800 	.word	0x400e0800
  405654:	40024000 	.word	0x40024000
  405658:	00404f31 	.word	0x00404f31
  40565c:	00404fb5 	.word	0x00404fb5
  405660:	00404fe5 	.word	0x00404fe5
  405664:	40028000 	.word	0x40028000

00405668 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  405668:	b580      	push	{r7, lr}
  40566a:	b082      	sub	sp, #8
  40566c:	af00      	add	r7, sp, #0
  40566e:	6078      	str	r0, [r7, #4]
  405670:	460b      	mov	r3, r1
  405672:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  405674:	687a      	ldr	r2, [r7, #4]
  405676:	4b20      	ldr	r3, [pc, #128]	; (4056f8 <usart_serial_putchar+0x90>)
  405678:	429a      	cmp	r2, r3
  40567a:	d10a      	bne.n	405692 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40567c:	bf00      	nop
  40567e:	78fb      	ldrb	r3, [r7, #3]
  405680:	6878      	ldr	r0, [r7, #4]
  405682:	4619      	mov	r1, r3
  405684:	4b1d      	ldr	r3, [pc, #116]	; (4056fc <usart_serial_putchar+0x94>)
  405686:	4798      	blx	r3
  405688:	4603      	mov	r3, r0
  40568a:	2b00      	cmp	r3, #0
  40568c:	d1f7      	bne.n	40567e <usart_serial_putchar+0x16>
		return 1;
  40568e:	2301      	movs	r3, #1
  405690:	e02d      	b.n	4056ee <usart_serial_putchar+0x86>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  405692:	687a      	ldr	r2, [r7, #4]
  405694:	4b1a      	ldr	r3, [pc, #104]	; (405700 <usart_serial_putchar+0x98>)
  405696:	429a      	cmp	r2, r3
  405698:	d10a      	bne.n	4056b0 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40569a:	bf00      	nop
  40569c:	78fb      	ldrb	r3, [r7, #3]
  40569e:	6878      	ldr	r0, [r7, #4]
  4056a0:	4619      	mov	r1, r3
  4056a2:	4b16      	ldr	r3, [pc, #88]	; (4056fc <usart_serial_putchar+0x94>)
  4056a4:	4798      	blx	r3
  4056a6:	4603      	mov	r3, r0
  4056a8:	2b00      	cmp	r3, #0
  4056aa:	d1f7      	bne.n	40569c <usart_serial_putchar+0x34>
		return 1;
  4056ac:	2301      	movs	r3, #1
  4056ae:	e01e      	b.n	4056ee <usart_serial_putchar+0x86>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4056b0:	687a      	ldr	r2, [r7, #4]
  4056b2:	4b14      	ldr	r3, [pc, #80]	; (405704 <usart_serial_putchar+0x9c>)
  4056b4:	429a      	cmp	r2, r3
  4056b6:	d10a      	bne.n	4056ce <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
  4056b8:	bf00      	nop
  4056ba:	78fb      	ldrb	r3, [r7, #3]
  4056bc:	6878      	ldr	r0, [r7, #4]
  4056be:	4619      	mov	r1, r3
  4056c0:	4b11      	ldr	r3, [pc, #68]	; (405708 <usart_serial_putchar+0xa0>)
  4056c2:	4798      	blx	r3
  4056c4:	4603      	mov	r3, r0
  4056c6:	2b00      	cmp	r3, #0
  4056c8:	d1f7      	bne.n	4056ba <usart_serial_putchar+0x52>
		return 1;
  4056ca:	2301      	movs	r3, #1
  4056cc:	e00f      	b.n	4056ee <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4056ce:	687a      	ldr	r2, [r7, #4]
  4056d0:	4b0e      	ldr	r3, [pc, #56]	; (40570c <usart_serial_putchar+0xa4>)
  4056d2:	429a      	cmp	r2, r3
  4056d4:	d10a      	bne.n	4056ec <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
  4056d6:	bf00      	nop
  4056d8:	78fb      	ldrb	r3, [r7, #3]
  4056da:	6878      	ldr	r0, [r7, #4]
  4056dc:	4619      	mov	r1, r3
  4056de:	4b0a      	ldr	r3, [pc, #40]	; (405708 <usart_serial_putchar+0xa0>)
  4056e0:	4798      	blx	r3
  4056e2:	4603      	mov	r3, r0
  4056e4:	2b00      	cmp	r3, #0
  4056e6:	d1f7      	bne.n	4056d8 <usart_serial_putchar+0x70>
		return 1;
  4056e8:	2301      	movs	r3, #1
  4056ea:	e000      	b.n	4056ee <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4056ec:	2300      	movs	r3, #0
}
  4056ee:	4618      	mov	r0, r3
  4056f0:	3708      	adds	r7, #8
  4056f2:	46bd      	mov	sp, r7
  4056f4:	bd80      	pop	{r7, pc}
  4056f6:	bf00      	nop
  4056f8:	400e0600 	.word	0x400e0600
  4056fc:	004085c9 	.word	0x004085c9
  405700:	400e0800 	.word	0x400e0800
  405704:	40024000 	.word	0x40024000
  405708:	004050a1 	.word	0x004050a1
  40570c:	40028000 	.word	0x40028000

00405710 <drv_uart_init>:
 * @brief initialize uart driver and circular buffer
 * @param uartConfig, the configuration structure for the uart, contains settings.  
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_init(drv_uart_config_t* uartConfig)
{
  405710:	b580      	push	{r7, lr}
  405712:	b084      	sub	sp, #16
  405714:	af00      	add	r7, sp, #0
  405716:	6078      	str	r0, [r7, #4]
	status_t status = STATUS_PASS; 
  405718:	2300      	movs	r3, #0
  40571a:	73fb      	strb	r3, [r7, #15]
	
	if(uartConfig->p_usart == UART0)
  40571c:	687b      	ldr	r3, [r7, #4]
  40571e:	681a      	ldr	r2, [r3, #0]
  405720:	4b7a      	ldr	r3, [pc, #488]	; (40590c <drv_uart_init+0x1fc>)
  405722:	429a      	cmp	r2, r3
  405724:	d103      	bne.n	40572e <drv_uart_init+0x1e>
	{
		uartConfig->mem_index = 0;
  405726:	687b      	ldr	r3, [r7, #4]
  405728:	2200      	movs	r2, #0
  40572a:	615a      	str	r2, [r3, #20]
  40572c:	e01c      	b.n	405768 <drv_uart_init+0x58>
	}
	else if(uartConfig->p_usart == UART1)
  40572e:	687b      	ldr	r3, [r7, #4]
  405730:	681a      	ldr	r2, [r3, #0]
  405732:	4b77      	ldr	r3, [pc, #476]	; (405910 <drv_uart_init+0x200>)
  405734:	429a      	cmp	r2, r3
  405736:	d103      	bne.n	405740 <drv_uart_init+0x30>
	{	
		uartConfig->mem_index = 1;
  405738:	687b      	ldr	r3, [r7, #4]
  40573a:	2201      	movs	r2, #1
  40573c:	615a      	str	r2, [r3, #20]
  40573e:	e013      	b.n	405768 <drv_uart_init+0x58>
	}
	else if(uartConfig->p_usart == USART0)
  405740:	687b      	ldr	r3, [r7, #4]
  405742:	681a      	ldr	r2, [r3, #0]
  405744:	4b73      	ldr	r3, [pc, #460]	; (405914 <drv_uart_init+0x204>)
  405746:	429a      	cmp	r2, r3
  405748:	d103      	bne.n	405752 <drv_uart_init+0x42>
	{	
		uartConfig->mem_index = 2;
  40574a:	687b      	ldr	r3, [r7, #4]
  40574c:	2202      	movs	r2, #2
  40574e:	615a      	str	r2, [r3, #20]
  405750:	e00a      	b.n	405768 <drv_uart_init+0x58>
	}
	else if(uartConfig->p_usart == USART1)
  405752:	687b      	ldr	r3, [r7, #4]
  405754:	681a      	ldr	r2, [r3, #0]
  405756:	4b70      	ldr	r3, [pc, #448]	; (405918 <drv_uart_init+0x208>)
  405758:	429a      	cmp	r2, r3
  40575a:	d103      	bne.n	405764 <drv_uart_init+0x54>
	{

		uartConfig->mem_index = 3;
  40575c:	687b      	ldr	r3, [r7, #4]
  40575e:	2203      	movs	r2, #3
  405760:	615a      	str	r2, [r3, #20]
  405762:	e001      	b.n	405768 <drv_uart_init+0x58>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  405764:	2301      	movs	r3, #1
  405766:	e1a9      	b.n	405abc <drv_uart_init+0x3ac>
	}

	//initialize the circular buffers. 
	if(uartConfig->mem_index < 0 || uartConfig->mem_index > 4)
  405768:	687b      	ldr	r3, [r7, #4]
  40576a:	695b      	ldr	r3, [r3, #20]
  40576c:	2b00      	cmp	r3, #0
  40576e:	db03      	blt.n	405778 <drv_uart_init+0x68>
  405770:	687b      	ldr	r3, [r7, #4]
  405772:	695b      	ldr	r3, [r3, #20]
  405774:	2b04      	cmp	r3, #4
  405776:	dd01      	ble.n	40577c <drv_uart_init+0x6c>
	{
		//ERROR! an incorrect buffer index has been used.  
		return STATUS_FAIL; 
  405778:	2301      	movs	r3, #1
  40577a:	e19f      	b.n	405abc <drv_uart_init+0x3ac>
	}
	//make sure the buffer isn't already initialized. 
	if(uartMemBuf[uartConfig->mem_index].isinit == true)
  40577c:	687b      	ldr	r3, [r7, #4]
  40577e:	695a      	ldr	r2, [r3, #20]
  405780:	4966      	ldr	r1, [pc, #408]	; (40591c <drv_uart_init+0x20c>)
  405782:	4613      	mov	r3, r2
  405784:	015b      	lsls	r3, r3, #5
  405786:	4413      	add	r3, r2
  405788:	015b      	lsls	r3, r3, #5
  40578a:	440b      	add	r3, r1
  40578c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  405790:	799b      	ldrb	r3, [r3, #6]
  405792:	b2db      	uxtb	r3, r3
  405794:	2b01      	cmp	r3, #1
  405796:	d101      	bne.n	40579c <drv_uart_init+0x8c>
	{
		//buffer already in use, call drv_uart_deinit() first
		return STATUS_FAIL; 
  405798:	2301      	movs	r3, #1
  40579a:	e18f      	b.n	405abc <drv_uart_init+0x3ac>
	}
	
	//initialize the UART hardware 
	usart_serial_init(uartConfig->p_usart, &uartConfig->uart_options);
  40579c:	687b      	ldr	r3, [r7, #4]
  40579e:	681a      	ldr	r2, [r3, #0]
  4057a0:	687b      	ldr	r3, [r7, #4]
  4057a2:	3304      	adds	r3, #4
  4057a4:	4610      	mov	r0, r2
  4057a6:	4619      	mov	r1, r3
  4057a8:	4b5d      	ldr	r3, [pc, #372]	; (405920 <drv_uart_init+0x210>)
  4057aa:	4798      	blx	r3
	
	//setup interrupts for the UART
	/* Disable all the interrupts. */
	usart_disable_interrupt(uartConfig->p_usart, ALL_INTERRUPT_MASK);
  4057ac:	687b      	ldr	r3, [r7, #4]
  4057ae:	681b      	ldr	r3, [r3, #0]
  4057b0:	4618      	mov	r0, r3
  4057b2:	f04f 31ff 	mov.w	r1, #4294967295
  4057b6:	4b5b      	ldr	r3, [pc, #364]	; (405924 <drv_uart_init+0x214>)
  4057b8:	4798      	blx	r3
	/* Configure and enable interrupt of USART. */
	if(uartConfig->p_usart == UART0)
  4057ba:	687b      	ldr	r3, [r7, #4]
  4057bc:	681a      	ldr	r2, [r3, #0]
  4057be:	4b53      	ldr	r3, [pc, #332]	; (40590c <drv_uart_init+0x1fc>)
  4057c0:	429a      	cmp	r2, r3
  4057c2:	d11e      	bne.n	405802 <drv_uart_init+0xf2>
	{
		sysclk_enable_peripheral_clock(ID_PIOA);
  4057c4:	200b      	movs	r0, #11
  4057c6:	4b58      	ldr	r3, [pc, #352]	; (405928 <drv_uart_init+0x218>)
  4057c8:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  4057ca:	4b58      	ldr	r3, [pc, #352]	; (40592c <drv_uart_init+0x21c>)
  4057cc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4057d0:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  4057d2:	4b56      	ldr	r3, [pc, #344]	; (40592c <drv_uart_init+0x21c>)
  4057d4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4057d8:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  4057da:	4b54      	ldr	r3, [pc, #336]	; (40592c <drv_uart_init+0x21c>)
  4057dc:	4a53      	ldr	r2, [pc, #332]	; (40592c <drv_uart_init+0x21c>)
  4057de:	6f12      	ldr	r2, [r2, #112]	; 0x70
  4057e0:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  4057e4:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
  4057e6:	4b51      	ldr	r3, [pc, #324]	; (40592c <drv_uart_init+0x21c>)
  4057e8:	4a50      	ldr	r2, [pc, #320]	; (40592c <drv_uart_init+0x21c>)
  4057ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
  4057ec:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
  4057f0:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);				
  4057f2:	4b4e      	ldr	r3, [pc, #312]	; (40592c <drv_uart_init+0x21c>)
  4057f4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4057f8:	605a      	str	r2, [r3, #4]
		NVIC_EnableIRQ(UART0_IRQn);
  4057fa:	2008      	movs	r0, #8
  4057fc:	4b4c      	ldr	r3, [pc, #304]	; (405930 <drv_uart_init+0x220>)
  4057fe:	4798      	blx	r3
  405800:	e09a      	b.n	405938 <drv_uart_init+0x228>
	}
	else if(uartConfig->p_usart == UART1)
  405802:	687b      	ldr	r3, [r7, #4]
  405804:	681a      	ldr	r2, [r3, #0]
  405806:	4b42      	ldr	r3, [pc, #264]	; (405910 <drv_uart_init+0x200>)
  405808:	429a      	cmp	r2, r3
  40580a:	d11b      	bne.n	405844 <drv_uart_init+0x134>
	{
		sysclk_enable_peripheral_clock(ID_PIOB);
  40580c:	200c      	movs	r0, #12
  40580e:	4b46      	ldr	r3, [pc, #280]	; (405928 <drv_uart_init+0x218>)
  405810:	4798      	blx	r3
		PIOB->PIO_IDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  405812:	4b48      	ldr	r3, [pc, #288]	; (405934 <drv_uart_init+0x224>)
  405814:	220c      	movs	r2, #12
  405816:	645a      	str	r2, [r3, #68]	; 0x44
		PIOB->PIO_PUDR       =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  405818:	4b46      	ldr	r3, [pc, #280]	; (405934 <drv_uart_init+0x224>)
  40581a:	220c      	movs	r2, #12
  40581c:	661a      	str	r2, [r3, #96]	; 0x60
		PIOB->PIO_ABCDSR[0] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40581e:	4b45      	ldr	r3, [pc, #276]	; (405934 <drv_uart_init+0x224>)
  405820:	4a44      	ldr	r2, [pc, #272]	; (405934 <drv_uart_init+0x224>)
  405822:	6f12      	ldr	r2, [r2, #112]	; 0x70
  405824:	f022 020c 	bic.w	r2, r2, #12
  405828:	671a      	str	r2, [r3, #112]	; 0x70
		PIOB->PIO_ABCDSR[1] &= ~(PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);
  40582a:	4b42      	ldr	r3, [pc, #264]	; (405934 <drv_uart_init+0x224>)
  40582c:	4a41      	ldr	r2, [pc, #260]	; (405934 <drv_uart_init+0x224>)
  40582e:	6f52      	ldr	r2, [r2, #116]	; 0x74
  405830:	f022 020c 	bic.w	r2, r2, #12
  405834:	675a      	str	r2, [r3, #116]	; 0x74
		PIOB->PIO_PDR        =  (PIO_PB2A_URXD1 | PIO_PB3A_UTXD1);			
  405836:	4b3f      	ldr	r3, [pc, #252]	; (405934 <drv_uart_init+0x224>)
  405838:	220c      	movs	r2, #12
  40583a:	605a      	str	r2, [r3, #4]
		NVIC_EnableIRQ(UART1_IRQn);
  40583c:	2009      	movs	r0, #9
  40583e:	4b3c      	ldr	r3, [pc, #240]	; (405930 <drv_uart_init+0x220>)
  405840:	4798      	blx	r3
  405842:	e079      	b.n	405938 <drv_uart_init+0x228>
	}
	else if(uartConfig->p_usart == USART0)
  405844:	687b      	ldr	r3, [r7, #4]
  405846:	681a      	ldr	r2, [r3, #0]
  405848:	4b32      	ldr	r3, [pc, #200]	; (405914 <drv_uart_init+0x204>)
  40584a:	429a      	cmp	r2, r3
  40584c:	d127      	bne.n	40589e <drv_uart_init+0x18e>
	{
		/* Configure USART0 Pins (PA6 = TX, PA5 = RX). */
		sysclk_enable_peripheral_clock(ID_PIOA);
  40584e:	200b      	movs	r0, #11
  405850:	4b35      	ldr	r3, [pc, #212]	; (405928 <drv_uart_init+0x218>)
  405852:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  405854:	4b35      	ldr	r3, [pc, #212]	; (40592c <drv_uart_init+0x21c>)
  405856:	2260      	movs	r2, #96	; 0x60
  405858:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  40585a:	4b34      	ldr	r3, [pc, #208]	; (40592c <drv_uart_init+0x21c>)
  40585c:	2260      	movs	r2, #96	; 0x60
  40585e:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  405860:	4b32      	ldr	r3, [pc, #200]	; (40592c <drv_uart_init+0x21c>)
  405862:	4a32      	ldr	r2, [pc, #200]	; (40592c <drv_uart_init+0x21c>)
  405864:	6f12      	ldr	r2, [r2, #112]	; 0x70
  405866:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  40586a:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA5A_RXD0 | PIO_PA6A_TXD0 | PIO_PA2B_SCK0);
  40586c:	4b2f      	ldr	r3, [pc, #188]	; (40592c <drv_uart_init+0x21c>)
  40586e:	4a2f      	ldr	r2, [pc, #188]	; (40592c <drv_uart_init+0x21c>)
  405870:	6f52      	ldr	r2, [r2, #116]	; 0x74
  405872:	f022 0264 	bic.w	r2, r2, #100	; 0x64
  405876:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA5A_RXD0 | PIO_PA6A_TXD0);
  405878:	4b2c      	ldr	r3, [pc, #176]	; (40592c <drv_uart_init+0x21c>)
  40587a:	2260      	movs	r2, #96	; 0x60
  40587c:	605a      	str	r2, [r3, #4]
	
		/* configure USART0 enable Pin (PA2) Peripheral-B */
		PIOA->PIO_PUDR   =  (PIO_PA2);
  40587e:	4b2b      	ldr	r3, [pc, #172]	; (40592c <drv_uart_init+0x21c>)
  405880:	2204      	movs	r2, #4
  405882:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   =  (PIO_PA2);
  405884:	4b29      	ldr	r3, [pc, #164]	; (40592c <drv_uart_init+0x21c>)
  405886:	2204      	movs	r2, #4
  405888:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_OER    =  (PIO_PA2);
  40588a:	4b28      	ldr	r3, [pc, #160]	; (40592c <drv_uart_init+0x21c>)
  40588c:	2204      	movs	r2, #4
  40588e:	611a      	str	r2, [r3, #16]
		PIOA->PIO_PER    =  (PIO_PA2);	
  405890:	4b26      	ldr	r3, [pc, #152]	; (40592c <drv_uart_init+0x21c>)
  405892:	2204      	movs	r2, #4
  405894:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(USART0_IRQn);
  405896:	200e      	movs	r0, #14
  405898:	4b25      	ldr	r3, [pc, #148]	; (405930 <drv_uart_init+0x220>)
  40589a:	4798      	blx	r3
  40589c:	e04c      	b.n	405938 <drv_uart_init+0x228>
	}
	else if(uartConfig->p_usart == USART1)
  40589e:	687b      	ldr	r3, [r7, #4]
  4058a0:	681a      	ldr	r2, [r3, #0]
  4058a2:	4b1d      	ldr	r3, [pc, #116]	; (405918 <drv_uart_init+0x208>)
  4058a4:	429a      	cmp	r2, r3
  4058a6:	d12e      	bne.n	405906 <drv_uart_init+0x1f6>
	{		
		/* Configure USART1 Pins (PA22 = TX, PA21 = RX). */
		sysclk_enable_peripheral_clock(ID_PIOA);
  4058a8:	200b      	movs	r0, #11
  4058aa:	4b1f      	ldr	r3, [pc, #124]	; (405928 <drv_uart_init+0x218>)
  4058ac:	4798      	blx	r3
		PIOA->PIO_IDR        =  (PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  4058ae:	4b1f      	ldr	r3, [pc, #124]	; (40592c <drv_uart_init+0x21c>)
  4058b0:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  4058b4:	645a      	str	r2, [r3, #68]	; 0x44
		PIOA->PIO_PUDR       =  (PIO_PA21A_RXD1 |  PIO_PA22A_TXD1);
  4058b6:	4b1d      	ldr	r3, [pc, #116]	; (40592c <drv_uart_init+0x21c>)
  4058b8:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  4058bc:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_ABCDSR[0] &= ~(PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  4058be:	4b1b      	ldr	r3, [pc, #108]	; (40592c <drv_uart_init+0x21c>)
  4058c0:	4a1a      	ldr	r2, [pc, #104]	; (40592c <drv_uart_init+0x21c>)
  4058c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
  4058c4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
  4058c8:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_ABCDSR[1] &= ~(PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  4058ca:	4b18      	ldr	r3, [pc, #96]	; (40592c <drv_uart_init+0x21c>)
  4058cc:	4a17      	ldr	r2, [pc, #92]	; (40592c <drv_uart_init+0x21c>)
  4058ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
  4058d0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
  4058d4:	675a      	str	r2, [r3, #116]	; 0x74
		PIOA->PIO_PDR        =  (PIO_PA21A_RXD1 | PIO_PA22A_TXD1);
  4058d6:	4b15      	ldr	r3, [pc, #84]	; (40592c <drv_uart_init+0x21c>)
  4058d8:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  4058dc:	605a      	str	r2, [r3, #4]
	
		/* configure USART1 enable Pin (PA23) */
		PIOA->PIO_PUDR   =  (PIO_PA23);
  4058de:	4b13      	ldr	r3, [pc, #76]	; (40592c <drv_uart_init+0x21c>)
  4058e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4058e4:	661a      	str	r2, [r3, #96]	; 0x60
		PIOA->PIO_CODR   =  (PIO_PA23);
  4058e6:	4b11      	ldr	r3, [pc, #68]	; (40592c <drv_uart_init+0x21c>)
  4058e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4058ec:	635a      	str	r2, [r3, #52]	; 0x34
		PIOA->PIO_OER    =  (PIO_PA23);
  4058ee:	4b0f      	ldr	r3, [pc, #60]	; (40592c <drv_uart_init+0x21c>)
  4058f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4058f4:	611a      	str	r2, [r3, #16]
		PIOA->PIO_PER    =  (PIO_PA23);		
  4058f6:	4b0d      	ldr	r3, [pc, #52]	; (40592c <drv_uart_init+0x21c>)
  4058f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4058fc:	601a      	str	r2, [r3, #0]
		
		NVIC_EnableIRQ(USART1_IRQn);
  4058fe:	200f      	movs	r0, #15
  405900:	4b0b      	ldr	r3, [pc, #44]	; (405930 <drv_uart_init+0x220>)
  405902:	4798      	blx	r3
  405904:	e018      	b.n	405938 <drv_uart_init+0x228>
	}
	else
	{
		//ERROR! The config settings have an invalid UART pointer
		return STATUS_FAIL;
  405906:	2301      	movs	r3, #1
  405908:	e0d8      	b.n	405abc <drv_uart_init+0x3ac>
  40590a:	bf00      	nop
  40590c:	400e0600 	.word	0x400e0600
  405910:	400e0800 	.word	0x400e0800
  405914:	40024000 	.word	0x40024000
  405918:	40028000 	.word	0x40028000
  40591c:	20014fb8 	.word	0x20014fb8
  405920:	00405571 	.word	0x00405571
  405924:	00405031 	.word	0x00405031
  405928:	00405559 	.word	0x00405559
  40592c:	400e0e00 	.word	0x400e0e00
  405930:	00405485 	.word	0x00405485
  405934:	400e1000 	.word	0x400e1000
	}
	uartMemBuf[uartConfig->mem_index].isinit = true;
  405938:	687b      	ldr	r3, [r7, #4]
  40593a:	695a      	ldr	r2, [r3, #20]
  40593c:	4961      	ldr	r1, [pc, #388]	; (405ac4 <drv_uart_init+0x3b4>)
  40593e:	4613      	mov	r3, r2
  405940:	015b      	lsls	r3, r3, #5
  405942:	4413      	add	r3, r2
  405944:	015b      	lsls	r3, r3, #5
  405946:	440b      	add	r3, r1
  405948:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40594c:	2201      	movs	r2, #1
  40594e:	719a      	strb	r2, [r3, #6]
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY | UART_SR_TXEMPTY); //enable RXRDY interrupt	
  405950:	687b      	ldr	r3, [r7, #4]
  405952:	681b      	ldr	r3, [r3, #0]
  405954:	4618      	mov	r0, r3
  405956:	f240 2101 	movw	r1, #513	; 0x201
  40595a:	4b5b      	ldr	r3, [pc, #364]	; (405ac8 <drv_uart_init+0x3b8>)
  40595c:	4798      	blx	r3
	
	//clear the buffer
	memset(uartMemBuf[uartConfig->mem_index].rx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  40595e:	687b      	ldr	r3, [r7, #4]
  405960:	695a      	ldr	r2, [r3, #20]
  405962:	4613      	mov	r3, r2
  405964:	015b      	lsls	r3, r3, #5
  405966:	4413      	add	r3, r2
  405968:	015b      	lsls	r3, r3, #5
  40596a:	4a56      	ldr	r2, [pc, #344]	; (405ac4 <drv_uart_init+0x3b4>)
  40596c:	4413      	add	r3, r2
  40596e:	4618      	mov	r0, r3
  405970:	2100      	movs	r1, #0
  405972:	f44f 7200 	mov.w	r2, #512	; 0x200
  405976:	4b55      	ldr	r3, [pc, #340]	; (405acc <drv_uart_init+0x3bc>)
  405978:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_first = 0;
  40597a:	687b      	ldr	r3, [r7, #4]
  40597c:	695a      	ldr	r2, [r3, #20]
  40597e:	4951      	ldr	r1, [pc, #324]	; (405ac4 <drv_uart_init+0x3b4>)
  405980:	4613      	mov	r3, r2
  405982:	015b      	lsls	r3, r3, #5
  405984:	4413      	add	r3, r2
  405986:	015b      	lsls	r3, r3, #5
  405988:	440b      	add	r3, r1
  40598a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40598e:	2200      	movs	r2, #0
  405990:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].rx_fifo.i_last = 0;
  405992:	687b      	ldr	r3, [r7, #4]
  405994:	695a      	ldr	r2, [r3, #20]
  405996:	494b      	ldr	r1, [pc, #300]	; (405ac4 <drv_uart_init+0x3b4>)
  405998:	4613      	mov	r3, r2
  40599a:	015b      	lsls	r3, r3, #5
  40599c:	4413      	add	r3, r2
  40599e:	015b      	lsls	r3, r3, #5
  4059a0:	440b      	add	r3, r1
  4059a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4059a6:	2200      	movs	r2, #0
  4059a8:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_full_flag = 0;
  4059aa:	687b      	ldr	r3, [r7, #4]
  4059ac:	695a      	ldr	r2, [r3, #20]
  4059ae:	4945      	ldr	r1, [pc, #276]	; (405ac4 <drv_uart_init+0x3b4>)
  4059b0:	4613      	mov	r3, r2
  4059b2:	015b      	lsls	r3, r3, #5
  4059b4:	4413      	add	r3, r2
  4059b6:	015b      	lsls	r3, r3, #5
  4059b8:	440b      	add	r3, r1
  4059ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4059be:	2200      	movs	r2, #0
  4059c0:	701a      	strb	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag = 0;
  4059c2:	687b      	ldr	r3, [r7, #4]
  4059c4:	695a      	ldr	r2, [r3, #20]
  4059c6:	493f      	ldr	r1, [pc, #252]	; (405ac4 <drv_uart_init+0x3b4>)
  4059c8:	4613      	mov	r3, r2
  4059ca:	015b      	lsls	r3, r3, #5
  4059cc:	4413      	add	r3, r2
  4059ce:	015b      	lsls	r3, r3, #5
  4059d0:	440b      	add	r3, r1
  4059d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4059d6:	2200      	movs	r2, #0
  4059d8:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_rx_fifo_ovf_flag = 0;
  4059da:	687b      	ldr	r3, [r7, #4]
  4059dc:	695a      	ldr	r2, [r3, #20]
  4059de:	4939      	ldr	r1, [pc, #228]	; (405ac4 <drv_uart_init+0x3b4>)
  4059e0:	4613      	mov	r3, r2
  4059e2:	015b      	lsls	r3, r3, #5
  4059e4:	4413      	add	r3, r2
  4059e6:	015b      	lsls	r3, r3, #5
  4059e8:	440b      	add	r3, r1
  4059ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4059ee:	2200      	movs	r2, #0
  4059f0:	705a      	strb	r2, [r3, #1]
	uartMemBuf[uartConfig->mem_index].rx_fifo.num_bytes = 0;
  4059f2:	687b      	ldr	r3, [r7, #4]
  4059f4:	695a      	ldr	r2, [r3, #20]
  4059f6:	4933      	ldr	r1, [pc, #204]	; (405ac4 <drv_uart_init+0x3b4>)
  4059f8:	4613      	mov	r3, r2
  4059fa:	015b      	lsls	r3, r3, #5
  4059fc:	4413      	add	r3, r2
  4059fe:	015b      	lsls	r3, r3, #5
  405a00:	440b      	add	r3, r1
  405a02:	f503 7300 	add.w	r3, r3, #512	; 0x200
  405a06:	2200      	movs	r2, #0
  405a08:	809a      	strh	r2, [r3, #4]

	memset(uartMemBuf[uartConfig->mem_index].tx_fifo.data_buf, 0,FIFO_BUFFER_SIZE);
  405a0a:	687b      	ldr	r3, [r7, #4]
  405a0c:	695a      	ldr	r2, [r3, #20]
  405a0e:	4613      	mov	r3, r2
  405a10:	015b      	lsls	r3, r3, #5
  405a12:	4413      	add	r3, r2
  405a14:	015b      	lsls	r3, r3, #5
  405a16:	f503 7204 	add.w	r2, r3, #528	; 0x210
  405a1a:	4b2a      	ldr	r3, [pc, #168]	; (405ac4 <drv_uart_init+0x3b4>)
  405a1c:	4413      	add	r3, r2
  405a1e:	4618      	mov	r0, r3
  405a20:	2100      	movs	r1, #0
  405a22:	f44f 7200 	mov.w	r2, #512	; 0x200
  405a26:	4b29      	ldr	r3, [pc, #164]	; (405acc <drv_uart_init+0x3bc>)
  405a28:	4798      	blx	r3
	uartMemBuf[uartConfig->mem_index].tx_fifo.i_first = 0;
  405a2a:	687b      	ldr	r3, [r7, #4]
  405a2c:	695a      	ldr	r2, [r3, #20]
  405a2e:	4925      	ldr	r1, [pc, #148]	; (405ac4 <drv_uart_init+0x3b4>)
  405a30:	4613      	mov	r3, r2
  405a32:	015b      	lsls	r3, r3, #5
  405a34:	4413      	add	r3, r2
  405a36:	015b      	lsls	r3, r3, #5
  405a38:	440b      	add	r3, r1
  405a3a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  405a3e:	2200      	movs	r2, #0
  405a40:	801a      	strh	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].tx_fifo.i_last = 0;
  405a42:	687b      	ldr	r3, [r7, #4]
  405a44:	695a      	ldr	r2, [r3, #20]
  405a46:	491f      	ldr	r1, [pc, #124]	; (405ac4 <drv_uart_init+0x3b4>)
  405a48:	4613      	mov	r3, r2
  405a4a:	015b      	lsls	r3, r3, #5
  405a4c:	4413      	add	r3, r2
  405a4e:	015b      	lsls	r3, r3, #5
  405a50:	440b      	add	r3, r1
  405a52:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  405a56:	2200      	movs	r2, #0
  405a58:	805a      	strh	r2, [r3, #2]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_full_flag = 0;
  405a5a:	687b      	ldr	r3, [r7, #4]
  405a5c:	695a      	ldr	r2, [r3, #20]
  405a5e:	4919      	ldr	r1, [pc, #100]	; (405ac4 <drv_uart_init+0x3b4>)
  405a60:	4613      	mov	r3, r2
  405a62:	015b      	lsls	r3, r3, #5
  405a64:	4413      	add	r3, r2
  405a66:	015b      	lsls	r3, r3, #5
  405a68:	440b      	add	r3, r1
  405a6a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  405a6e:	2200      	movs	r2, #0
  405a70:	71da      	strb	r2, [r3, #7]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_not_empty_flag = 0;
  405a72:	687b      	ldr	r3, [r7, #4]
  405a74:	695a      	ldr	r2, [r3, #20]
  405a76:	4913      	ldr	r1, [pc, #76]	; (405ac4 <drv_uart_init+0x3b4>)
  405a78:	4613      	mov	r3, r2
  405a7a:	015b      	lsls	r3, r3, #5
  405a7c:	4413      	add	r3, r2
  405a7e:	015b      	lsls	r3, r3, #5
  405a80:	440b      	add	r3, r1
  405a82:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  405a86:	2200      	movs	r2, #0
  405a88:	719a      	strb	r2, [r3, #6]
	uartMemBuf[uartConfig->mem_index].uart_tx_fifo_ovf_flag = 0;
  405a8a:	687b      	ldr	r3, [r7, #4]
  405a8c:	695a      	ldr	r2, [r3, #20]
  405a8e:	490d      	ldr	r1, [pc, #52]	; (405ac4 <drv_uart_init+0x3b4>)
  405a90:	4613      	mov	r3, r2
  405a92:	015b      	lsls	r3, r3, #5
  405a94:	4413      	add	r3, r2
  405a96:	015b      	lsls	r3, r3, #5
  405a98:	440b      	add	r3, r1
  405a9a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
  405a9e:	2200      	movs	r2, #0
  405aa0:	701a      	strb	r2, [r3, #0]
	uartMemBuf[uartConfig->mem_index].tx_fifo.num_bytes = 0;
  405aa2:	687b      	ldr	r3, [r7, #4]
  405aa4:	695a      	ldr	r2, [r3, #20]
  405aa6:	4907      	ldr	r1, [pc, #28]	; (405ac4 <drv_uart_init+0x3b4>)
  405aa8:	4613      	mov	r3, r2
  405aaa:	015b      	lsls	r3, r3, #5
  405aac:	4413      	add	r3, r2
  405aae:	015b      	lsls	r3, r3, #5
  405ab0:	440b      	add	r3, r1
  405ab2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
  405ab6:	2200      	movs	r2, #0
  405ab8:	809a      	strh	r2, [r3, #4]
	
	return status; 
  405aba:	7bfb      	ldrb	r3, [r7, #15]
}
  405abc:	4618      	mov	r0, r3
  405abe:	3710      	adds	r7, #16
  405ac0:	46bd      	mov	sp, r7
  405ac2:	bd80      	pop	{r7, pc}
  405ac4:	20014fb8 	.word	0x20014fb8
  405ac8:	00405015 	.word	0x00405015
  405acc:	0040a4f1 	.word	0x0040a4f1

00405ad0 <drv_uart_putChar>:
 * the character
 * @param c, the character that will be sent through the uart. 
 * @return STATUS_PASS if successful, STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_putChar(drv_uart_config_t* uartConfig, char c)
{
  405ad0:	b580      	push	{r7, lr}
  405ad2:	b086      	sub	sp, #24
  405ad4:	af00      	add	r7, sp, #0
  405ad6:	6078      	str	r0, [r7, #4]
  405ad8:	460b      	mov	r3, r1
  405ada:	70fb      	strb	r3, [r7, #3]
	status_t status = STATUS_PASS;
  405adc:	2300      	movs	r3, #0
  405ade:	75fb      	strb	r3, [r7, #23]
	//disable the interrupts so we don't fuck up the pointers	
	usart_disable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);	
  405ae0:	687b      	ldr	r3, [r7, #4]
  405ae2:	681b      	ldr	r3, [r3, #0]
  405ae4:	4618      	mov	r0, r3
  405ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
  405aea:	4b30      	ldr	r3, [pc, #192]	; (405bac <drv_uart_putChar+0xdc>)
  405aec:	4798      	blx	r3
	uint32_t val = 0;
  405aee:	2300      	movs	r3, #0
  405af0:	613b      	str	r3, [r7, #16]
	drv_uart_memory_buf_t* memBuf = &uartMemBuf[uartConfig->mem_index]; 
  405af2:	687b      	ldr	r3, [r7, #4]
  405af4:	695a      	ldr	r2, [r3, #20]
  405af6:	4613      	mov	r3, r2
  405af8:	015b      	lsls	r3, r3, #5
  405afa:	4413      	add	r3, r2
  405afc:	015b      	lsls	r3, r3, #5
  405afe:	4a2c      	ldr	r2, [pc, #176]	; (405bb0 <drv_uart_putChar+0xe0>)
  405b00:	4413      	add	r3, r2
  405b02:	60fb      	str	r3, [r7, #12]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  405b04:	68fb      	ldr	r3, [r7, #12]
  405b06:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  405b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405b0e:	d10b      	bne.n	405b28 <drv_uart_putChar+0x58>
	{
		memBuf->uart_tx_fifo_ovf_flag = 1;                     // set the overflow flag
  405b10:	68fb      	ldr	r3, [r7, #12]
  405b12:	2201      	movs	r2, #1
  405b14:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
		memBuf->uart_tx_fifo_dropped_bytes++; //our data stream will be out of sync now...	
  405b18:	68fb      	ldr	r3, [r7, #12]
  405b1a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
  405b1e:	1c5a      	adds	r2, r3, #1
  405b20:	68fb      	ldr	r3, [r7, #12]
  405b22:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  405b26:	e01d      	b.n	405b64 <drv_uart_putChar+0x94>
	}
	else if(memBuf->tx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  405b28:	68fb      	ldr	r3, [r7, #12]
  405b2a:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  405b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405b32:	d217      	bcs.n	405b64 <drv_uart_putChar+0x94>
	{
		memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_last] = c;
  405b34:	68fb      	ldr	r3, [r7, #12]
  405b36:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  405b3a:	68fa      	ldr	r2, [r7, #12]
  405b3c:	4413      	add	r3, r2
  405b3e:	78fa      	ldrb	r2, [r7, #3]
  405b40:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
		memBuf->tx_fifo.i_last++;                              // increment the index of the most recently added element
  405b44:	68fb      	ldr	r3, [r7, #12]
  405b46:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  405b4a:	3301      	adds	r3, #1
  405b4c:	b29a      	uxth	r2, r3
  405b4e:	68fb      	ldr	r3, [r7, #12]
  405b50:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
		memBuf->tx_fifo.num_bytes++;                           // increment the bytes counter
  405b54:	68fb      	ldr	r3, [r7, #12]
  405b56:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  405b5a:	3301      	adds	r3, #1
  405b5c:	b29a      	uxth	r2, r3
  405b5e:	68fb      	ldr	r3, [r7, #12]
  405b60:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		//if(uartConfig->p_usart == UART1)
		//{
			//usart_putchar(UART0, c);
		//}
	}
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  405b64:	68fb      	ldr	r3, [r7, #12]
  405b66:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  405b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405b6e:	d103      	bne.n	405b78 <drv_uart_putChar+0xa8>
	{      // if sw buffer just filled up
		memBuf->uart_tx_fifo_full_flag = 1;                    // set the tx FIFO full flag
  405b70:	68fb      	ldr	r3, [r7, #12]
  405b72:	2201      	movs	r2, #1
  405b74:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	}
	if(memBuf->tx_fifo.i_last == FIFO_BUFFER_SIZE)
  405b78:	68fb      	ldr	r3, [r7, #12]
  405b7a:	f8b3 3412 	ldrh.w	r3, [r3, #1042]	; 0x412
  405b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405b82:	d103      	bne.n	405b8c <drv_uart_putChar+0xbc>
	{         // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_last = 0;                            // roll over the index counter
  405b84:	68fb      	ldr	r3, [r7, #12]
  405b86:	2200      	movs	r2, #0
  405b88:	f8a3 2412 	strh.w	r2, [r3, #1042]	; 0x412
	}
	memBuf->uart_tx_fifo_not_empty_flag = 1;                 // set tx-data ready flag	
  405b8c:	68fb      	ldr	r3, [r7, #12]
  405b8e:	2201      	movs	r2, #1
  405b90:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	//re-enable the interrupts
	usart_enable_interrupt(uartConfig->p_usart, UART_IER_TXEMPTY);		
  405b94:	687b      	ldr	r3, [r7, #4]
  405b96:	681b      	ldr	r3, [r3, #0]
  405b98:	4618      	mov	r0, r3
  405b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
  405b9e:	4b05      	ldr	r3, [pc, #20]	; (405bb4 <drv_uart_putChar+0xe4>)
  405ba0:	4798      	blx	r3
	return status;	
  405ba2:	7dfb      	ldrb	r3, [r7, #23]
}
  405ba4:	4618      	mov	r0, r3
  405ba6:	3718      	adds	r7, #24
  405ba8:	46bd      	mov	sp, r7
  405baa:	bd80      	pop	{r7, pc}
  405bac:	00405031 	.word	0x00405031
  405bb0:	20014fb8 	.word	0x20014fb8
  405bb4:	00405015 	.word	0x00405015

00405bb8 <drv_uart_getChar>:
 * @param *c, the return character
 * @return STATUS_PASS if successful, STATUS_EOF if there were no bytes to read
 *	STATUS_FAIL if there is an error
 ***********************************************************************************************/	
status_t drv_uart_getChar(drv_uart_config_t* uartConfig, char* c)
{
  405bb8:	b580      	push	{r7, lr}
  405bba:	b084      	sub	sp, #16
  405bbc:	af00      	add	r7, sp, #0
  405bbe:	6078      	str	r0, [r7, #4]
  405bc0:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  405bc2:	2300      	movs	r3, #0
  405bc4:	73fb      	strb	r3, [r7, #15]
	
	if(uartMemBuf[uartConfig->mem_index].uart_rx_fifo_not_empty_flag == 1) //check if the buffer has information in it
  405bc6:	687b      	ldr	r3, [r7, #4]
  405bc8:	695a      	ldr	r2, [r3, #20]
  405bca:	4917      	ldr	r1, [pc, #92]	; (405c28 <drv_uart_getChar+0x70>)
  405bcc:	4613      	mov	r3, r2
  405bce:	015b      	lsls	r3, r3, #5
  405bd0:	4413      	add	r3, r2
  405bd2:	015b      	lsls	r3, r3, #5
  405bd4:	440b      	add	r3, r1
  405bd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  405bda:	79db      	ldrb	r3, [r3, #7]
  405bdc:	b2db      	uxtb	r3, r3
  405bde:	2b01      	cmp	r3, #1
  405be0:	d11a      	bne.n	405c18 <drv_uart_getChar+0x60>
	{
		usart_disable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);
  405be2:	687b      	ldr	r3, [r7, #4]
  405be4:	681b      	ldr	r3, [r3, #0]
  405be6:	4618      	mov	r0, r3
  405be8:	2101      	movs	r1, #1
  405bea:	4b10      	ldr	r3, [pc, #64]	; (405c2c <drv_uart_getChar+0x74>)
  405bec:	4798      	blx	r3
		//disable the interrupts so we don't fuck up the pointers		
		status = uart_get_byte(&(uartMemBuf[uartConfig->mem_index]), c); //get the byte from the buffer	
  405bee:	687b      	ldr	r3, [r7, #4]
  405bf0:	695a      	ldr	r2, [r3, #20]
  405bf2:	4613      	mov	r3, r2
  405bf4:	015b      	lsls	r3, r3, #5
  405bf6:	4413      	add	r3, r2
  405bf8:	015b      	lsls	r3, r3, #5
  405bfa:	4a0b      	ldr	r2, [pc, #44]	; (405c28 <drv_uart_getChar+0x70>)
  405bfc:	4413      	add	r3, r2
  405bfe:	4618      	mov	r0, r3
  405c00:	6839      	ldr	r1, [r7, #0]
  405c02:	4b0b      	ldr	r3, [pc, #44]	; (405c30 <drv_uart_getChar+0x78>)
  405c04:	4798      	blx	r3
  405c06:	4603      	mov	r3, r0
  405c08:	73fb      	strb	r3, [r7, #15]
		//re-enable the interrupts
		usart_enable_interrupt(uartConfig->p_usart, UART_IER_RXRDY);				
  405c0a:	687b      	ldr	r3, [r7, #4]
  405c0c:	681b      	ldr	r3, [r3, #0]
  405c0e:	4618      	mov	r0, r3
  405c10:	2101      	movs	r1, #1
  405c12:	4b08      	ldr	r3, [pc, #32]	; (405c34 <drv_uart_getChar+0x7c>)
  405c14:	4798      	blx	r3
  405c16:	e001      	b.n	405c1c <drv_uart_getChar+0x64>
	}
	else
	{
		status = STATUS_EOF; //there's no data return End Of File status code.
  405c18:	2302      	movs	r3, #2
  405c1a:	73fb      	strb	r3, [r7, #15]
	}
	
	return status;	
  405c1c:	7bfb      	ldrb	r3, [r7, #15]
}
  405c1e:	4618      	mov	r0, r3
  405c20:	3710      	adds	r7, #16
  405c22:	46bd      	mov	sp, r7
  405c24:	bd80      	pop	{r7, pc}
  405c26:	bf00      	nop
  405c28:	20014fb8 	.word	0x20014fb8
  405c2c:	00405031 	.word	0x00405031
  405c30:	00405e55 	.word	0x00405e55
  405c34:	00405015 	.word	0x00405015

00405c38 <drv_uart_isInit>:
 * @brief returns the initialized status of the uart
 * @param uartConfig, the configuration structure for the uart
 * @return STATUS_PASS if the driver is initialized,	STATUS_FAIL if not
 ***********************************************************************************************/	
status_t drv_uart_isInit(drv_uart_config_t* uartConfig)
{
  405c38:	b480      	push	{r7}
  405c3a:	b083      	sub	sp, #12
  405c3c:	af00      	add	r7, sp, #0
  405c3e:	6078      	str	r0, [r7, #4]
	if(uartMemBuf[uartConfig->mem_index].isinit)
  405c40:	687b      	ldr	r3, [r7, #4]
  405c42:	695a      	ldr	r2, [r3, #20]
  405c44:	490a      	ldr	r1, [pc, #40]	; (405c70 <drv_uart_isInit+0x38>)
  405c46:	4613      	mov	r3, r2
  405c48:	015b      	lsls	r3, r3, #5
  405c4a:	4413      	add	r3, r2
  405c4c:	015b      	lsls	r3, r3, #5
  405c4e:	440b      	add	r3, r1
  405c50:	f503 7300 	add.w	r3, r3, #512	; 0x200
  405c54:	799b      	ldrb	r3, [r3, #6]
  405c56:	b2db      	uxtb	r3, r3
  405c58:	2b00      	cmp	r3, #0
  405c5a:	d001      	beq.n	405c60 <drv_uart_isInit+0x28>
	{
		return STATUS_PASS;
  405c5c:	2300      	movs	r3, #0
  405c5e:	e000      	b.n	405c62 <drv_uart_isInit+0x2a>
	}
	else
	{
		return STATUS_FAIL; 
  405c60:	2301      	movs	r3, #1
	}
}
  405c62:	4618      	mov	r0, r3
  405c64:	370c      	adds	r7, #12
  405c66:	46bd      	mov	sp, r7
  405c68:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c6c:	4770      	bx	lr
  405c6e:	bf00      	nop
  405c70:	20014fb8 	.word	0x20014fb8

00405c74 <drv_uart_putData>:
		}		
	}
}

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
  405c74:	b580      	push	{r7, lr}
  405c76:	b086      	sub	sp, #24
  405c78:	af00      	add	r7, sp, #0
  405c7a:	60f8      	str	r0, [r7, #12]
  405c7c:	60b9      	str	r1, [r7, #8]
  405c7e:	607a      	str	r2, [r7, #4]
	int i=0;
  405c80:	2300      	movs	r3, #0
  405c82:	617b      	str	r3, [r7, #20]
	for (i=0;i<length;)
  405c84:	2300      	movs	r3, #0
  405c86:	617b      	str	r3, [r7, #20]
  405c88:	e00d      	b.n	405ca6 <drv_uart_putData+0x32>
	{
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
  405c8a:	697b      	ldr	r3, [r7, #20]
  405c8c:	68ba      	ldr	r2, [r7, #8]
  405c8e:	4413      	add	r3, r2
  405c90:	781b      	ldrb	r3, [r3, #0]
  405c92:	68f8      	ldr	r0, [r7, #12]
  405c94:	4619      	mov	r1, r3
  405c96:	4b07      	ldr	r3, [pc, #28]	; (405cb4 <drv_uart_putData+0x40>)
  405c98:	4798      	blx	r3
  405c9a:	4603      	mov	r3, r0
  405c9c:	2b00      	cmp	r3, #0
  405c9e:	d102      	bne.n	405ca6 <drv_uart_putData+0x32>
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
  405ca0:	697b      	ldr	r3, [r7, #20]
  405ca2:	3301      	adds	r3, #1
  405ca4:	617b      	str	r3, [r7, #20]
}

void drv_uart_putData(drv_uart_config_t* uartConfig, char* str, size_t length)
{
	int i=0;
	for (i=0;i<length;)
  405ca6:	697a      	ldr	r2, [r7, #20]
  405ca8:	687b      	ldr	r3, [r7, #4]
  405caa:	429a      	cmp	r2, r3
  405cac:	d3ed      	bcc.n	405c8a <drv_uart_putData+0x16>
		if(drv_uart_putChar(uartConfig, str[i]) == STATUS_PASS)
		{
			i++; //increment only if PASS is returned (it means the data has been sent)
		}
	}
}
  405cae:	3718      	adds	r7, #24
  405cb0:	46bd      	mov	sp, r7
  405cb2:	bd80      	pop	{r7, pc}
  405cb4:	00405ad1 	.word	0x00405ad1

00405cb8 <UART0_Handler>:
	}
}

// interrupt handlers
void UART0_Handler()
{	
  405cb8:	b580      	push	{r7, lr}
  405cba:	b082      	sub	sp, #8
  405cbc:	af00      	add	r7, sp, #0
	//if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized. 
	//{
		//uart_process_byte(UART0, &(uartMemBuf[0]));	
	//}
	uint32_t status = uart_get_status(UART0); 
  405cbe:	4812      	ldr	r0, [pc, #72]	; (405d08 <UART0_Handler+0x50>)
  405cc0:	4b12      	ldr	r3, [pc, #72]	; (405d0c <UART0_Handler+0x54>)
  405cc2:	4798      	blx	r3
  405cc4:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  405cc6:	687b      	ldr	r3, [r7, #4]
  405cc8:	f003 0301 	and.w	r3, r3, #1
  405ccc:	2b00      	cmp	r3, #0
  405cce:	d009      	beq.n	405ce4 <UART0_Handler+0x2c>
	{	
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  405cd0:	4b0f      	ldr	r3, [pc, #60]	; (405d10 <UART0_Handler+0x58>)
  405cd2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
  405cd6:	b2db      	uxtb	r3, r3
  405cd8:	2b00      	cmp	r3, #0
  405cda:	d003      	beq.n	405ce4 <UART0_Handler+0x2c>
		{
			uart_process_byte(UART0, &(uartMemBuf[0]));
  405cdc:	480a      	ldr	r0, [pc, #40]	; (405d08 <UART0_Handler+0x50>)
  405cde:	490c      	ldr	r1, [pc, #48]	; (405d10 <UART0_Handler+0x58>)
  405ce0:	4b0c      	ldr	r3, [pc, #48]	; (405d14 <UART0_Handler+0x5c>)
  405ce2:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  405ce4:	687b      	ldr	r3, [r7, #4]
  405ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
  405cea:	2b00      	cmp	r3, #0
  405cec:	d009      	beq.n	405d02 <UART0_Handler+0x4a>
	{
		if(uartMemBuf[0].isinit) //only handle the interrupt if the driver is initialized.
  405cee:	4b08      	ldr	r3, [pc, #32]	; (405d10 <UART0_Handler+0x58>)
  405cf0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
  405cf4:	b2db      	uxtb	r3, r3
  405cf6:	2b00      	cmp	r3, #0
  405cf8:	d003      	beq.n	405d02 <UART0_Handler+0x4a>
		{
			uart_process_tx_byte(UART0, &(uartMemBuf[0])); 	
  405cfa:	4803      	ldr	r0, [pc, #12]	; (405d08 <UART0_Handler+0x50>)
  405cfc:	4904      	ldr	r1, [pc, #16]	; (405d10 <UART0_Handler+0x58>)
  405cfe:	4b06      	ldr	r3, [pc, #24]	; (405d18 <UART0_Handler+0x60>)
  405d00:	4798      	blx	r3
		}
	}	
}
  405d02:	3708      	adds	r7, #8
  405d04:	46bd      	mov	sp, r7
  405d06:	bd80      	pop	{r7, pc}
  405d08:	400e0600 	.word	0x400e0600
  405d0c:	004085b1 	.word	0x004085b1
  405d10:	20014fb8 	.word	0x20014fb8
  405d14:	00405ee1 	.word	0x00405ee1
  405d18:	00405fa5 	.word	0x00405fa5

00405d1c <UART1_Handler>:

void UART1_Handler()
{
  405d1c:	b580      	push	{r7, lr}
  405d1e:	b082      	sub	sp, #8
  405d20:	af00      	add	r7, sp, #0
	uint32_t status = uart_get_status(UART1); 
  405d22:	4812      	ldr	r0, [pc, #72]	; (405d6c <UART1_Handler+0x50>)
  405d24:	4b12      	ldr	r3, [pc, #72]	; (405d70 <UART1_Handler+0x54>)
  405d26:	4798      	blx	r3
  405d28:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  405d2a:	687b      	ldr	r3, [r7, #4]
  405d2c:	f003 0301 	and.w	r3, r3, #1
  405d30:	2b00      	cmp	r3, #0
  405d32:	d009      	beq.n	405d48 <UART1_Handler+0x2c>
	{	
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  405d34:	4b0f      	ldr	r3, [pc, #60]	; (405d74 <UART1_Handler+0x58>)
  405d36:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
  405d3a:	b2db      	uxtb	r3, r3
  405d3c:	2b00      	cmp	r3, #0
  405d3e:	d003      	beq.n	405d48 <UART1_Handler+0x2c>
		{
			uart_process_byte(UART1, &(uartMemBuf[1]));
  405d40:	480a      	ldr	r0, [pc, #40]	; (405d6c <UART1_Handler+0x50>)
  405d42:	490d      	ldr	r1, [pc, #52]	; (405d78 <UART1_Handler+0x5c>)
  405d44:	4b0d      	ldr	r3, [pc, #52]	; (405d7c <UART1_Handler+0x60>)
  405d46:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  405d48:	687b      	ldr	r3, [r7, #4]
  405d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  405d4e:	2b00      	cmp	r3, #0
  405d50:	d009      	beq.n	405d66 <UART1_Handler+0x4a>
	{
		if(uartMemBuf[1].isinit) //only handle the interrupt if the driver is initialized.
  405d52:	4b08      	ldr	r3, [pc, #32]	; (405d74 <UART1_Handler+0x58>)
  405d54:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
  405d58:	b2db      	uxtb	r3, r3
  405d5a:	2b00      	cmp	r3, #0
  405d5c:	d003      	beq.n	405d66 <UART1_Handler+0x4a>
		{
			uart_process_tx_byte(UART1, &(uartMemBuf[1])); 	
  405d5e:	4803      	ldr	r0, [pc, #12]	; (405d6c <UART1_Handler+0x50>)
  405d60:	4905      	ldr	r1, [pc, #20]	; (405d78 <UART1_Handler+0x5c>)
  405d62:	4b07      	ldr	r3, [pc, #28]	; (405d80 <UART1_Handler+0x64>)
  405d64:	4798      	blx	r3
		}
	}
}
  405d66:	3708      	adds	r7, #8
  405d68:	46bd      	mov	sp, r7
  405d6a:	bd80      	pop	{r7, pc}
  405d6c:	400e0800 	.word	0x400e0800
  405d70:	004085b1 	.word	0x004085b1
  405d74:	20014fb8 	.word	0x20014fb8
  405d78:	200153d8 	.word	0x200153d8
  405d7c:	00405ee1 	.word	0x00405ee1
  405d80:	00405fa5 	.word	0x00405fa5

00405d84 <USART0_Handler>:

void USART0_Handler()
{
  405d84:	b580      	push	{r7, lr}
  405d86:	b082      	sub	sp, #8
  405d88:	af00      	add	r7, sp, #0
	//if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART0, &(uartMemBuf[2]));
	//}
	uint32_t status = uart_get_status(USART0); 
  405d8a:	4812      	ldr	r0, [pc, #72]	; (405dd4 <USART0_Handler+0x50>)
  405d8c:	4b12      	ldr	r3, [pc, #72]	; (405dd8 <USART0_Handler+0x54>)
  405d8e:	4798      	blx	r3
  405d90:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  405d92:	687b      	ldr	r3, [r7, #4]
  405d94:	f003 0301 	and.w	r3, r3, #1
  405d98:	2b00      	cmp	r3, #0
  405d9a:	d009      	beq.n	405db0 <USART0_Handler+0x2c>
	{	
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  405d9c:	4b0f      	ldr	r3, [pc, #60]	; (405ddc <USART0_Handler+0x58>)
  405d9e:	f893 3a46 	ldrb.w	r3, [r3, #2630]	; 0xa46
  405da2:	b2db      	uxtb	r3, r3
  405da4:	2b00      	cmp	r3, #0
  405da6:	d003      	beq.n	405db0 <USART0_Handler+0x2c>
		{
			uart_process_byte(USART0, &(uartMemBuf[2]));
  405da8:	480a      	ldr	r0, [pc, #40]	; (405dd4 <USART0_Handler+0x50>)
  405daa:	490d      	ldr	r1, [pc, #52]	; (405de0 <USART0_Handler+0x5c>)
  405dac:	4b0d      	ldr	r3, [pc, #52]	; (405de4 <USART0_Handler+0x60>)
  405dae:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  405db0:	687b      	ldr	r3, [r7, #4]
  405db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
  405db6:	2b00      	cmp	r3, #0
  405db8:	d009      	beq.n	405dce <USART0_Handler+0x4a>
	{
		if(uartMemBuf[2].isinit) //only handle the interrupt if the driver is initialized.
  405dba:	4b08      	ldr	r3, [pc, #32]	; (405ddc <USART0_Handler+0x58>)
  405dbc:	f893 3a46 	ldrb.w	r3, [r3, #2630]	; 0xa46
  405dc0:	b2db      	uxtb	r3, r3
  405dc2:	2b00      	cmp	r3, #0
  405dc4:	d003      	beq.n	405dce <USART0_Handler+0x4a>
		{
			uart_process_tx_byte(USART0, &(uartMemBuf[2])); 	
  405dc6:	4803      	ldr	r0, [pc, #12]	; (405dd4 <USART0_Handler+0x50>)
  405dc8:	4905      	ldr	r1, [pc, #20]	; (405de0 <USART0_Handler+0x5c>)
  405dca:	4b07      	ldr	r3, [pc, #28]	; (405de8 <USART0_Handler+0x64>)
  405dcc:	4798      	blx	r3
		}
	}	
}
  405dce:	3708      	adds	r7, #8
  405dd0:	46bd      	mov	sp, r7
  405dd2:	bd80      	pop	{r7, pc}
  405dd4:	40024000 	.word	0x40024000
  405dd8:	004085b1 	.word	0x004085b1
  405ddc:	20014fb8 	.word	0x20014fb8
  405de0:	200157f8 	.word	0x200157f8
  405de4:	00405ee1 	.word	0x00405ee1
  405de8:	00405fa5 	.word	0x00405fa5

00405dec <USART1_Handler>:

void USART1_Handler()
{
  405dec:	b580      	push	{r7, lr}
  405dee:	b082      	sub	sp, #8
  405df0:	af00      	add	r7, sp, #0
	//if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
	//{
		//uart_process_byte(USART1, &(uartMemBuf[3]));
	//}
	uint32_t status = uart_get_status(USART1); 
  405df2:	4812      	ldr	r0, [pc, #72]	; (405e3c <USART1_Handler+0x50>)
  405df4:	4b12      	ldr	r3, [pc, #72]	; (405e40 <USART1_Handler+0x54>)
  405df6:	4798      	blx	r3
  405df8:	6078      	str	r0, [r7, #4]
	if(status & UART_SR_RXRDY > 0)
  405dfa:	687b      	ldr	r3, [r7, #4]
  405dfc:	f003 0301 	and.w	r3, r3, #1
  405e00:	2b00      	cmp	r3, #0
  405e02:	d009      	beq.n	405e18 <USART1_Handler+0x2c>
	{	
		if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
  405e04:	4b0f      	ldr	r3, [pc, #60]	; (405e44 <USART1_Handler+0x58>)
  405e06:	f893 3e66 	ldrb.w	r3, [r3, #3686]	; 0xe66
  405e0a:	b2db      	uxtb	r3, r3
  405e0c:	2b00      	cmp	r3, #0
  405e0e:	d003      	beq.n	405e18 <USART1_Handler+0x2c>
		{
			uart_process_byte(USART1, &(uartMemBuf[3]));
  405e10:	480a      	ldr	r0, [pc, #40]	; (405e3c <USART1_Handler+0x50>)
  405e12:	490d      	ldr	r1, [pc, #52]	; (405e48 <USART1_Handler+0x5c>)
  405e14:	4b0d      	ldr	r3, [pc, #52]	; (405e4c <USART1_Handler+0x60>)
  405e16:	4798      	blx	r3
		}
	}
	
	if(status & UART_SR_TXEMPTY)
  405e18:	687b      	ldr	r3, [r7, #4]
  405e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  405e1e:	2b00      	cmp	r3, #0
  405e20:	d009      	beq.n	405e36 <USART1_Handler+0x4a>
	{
		if(uartMemBuf[3].isinit) //only handle the interrupt if the driver is initialized.
  405e22:	4b08      	ldr	r3, [pc, #32]	; (405e44 <USART1_Handler+0x58>)
  405e24:	f893 3e66 	ldrb.w	r3, [r3, #3686]	; 0xe66
  405e28:	b2db      	uxtb	r3, r3
  405e2a:	2b00      	cmp	r3, #0
  405e2c:	d003      	beq.n	405e36 <USART1_Handler+0x4a>
		{
			uart_process_tx_byte(USART1, &(uartMemBuf[3])); 	
  405e2e:	4803      	ldr	r0, [pc, #12]	; (405e3c <USART1_Handler+0x50>)
  405e30:	4905      	ldr	r1, [pc, #20]	; (405e48 <USART1_Handler+0x5c>)
  405e32:	4b07      	ldr	r3, [pc, #28]	; (405e50 <USART1_Handler+0x64>)
  405e34:	4798      	blx	r3
		}
	}	
}
  405e36:	3708      	adds	r7, #8
  405e38:	46bd      	mov	sp, r7
  405e3a:	bd80      	pop	{r7, pc}
  405e3c:	40028000 	.word	0x40028000
  405e40:	004085b1 	.word	0x004085b1
  405e44:	20014fb8 	.word	0x20014fb8
  405e48:	20015c18 	.word	0x20015c18
  405e4c:	00405ee1 	.word	0x00405ee1
  405e50:	00405fa5 	.word	0x00405fa5

00405e54 <uart_get_byte>:


//static functions
static int uart_get_byte(drv_uart_memory_buf_t* memBuf, char* c)
{
  405e54:	b480      	push	{r7}
  405e56:	b085      	sub	sp, #20
  405e58:	af00      	add	r7, sp, #0
  405e5a:	6078      	str	r0, [r7, #4]
  405e5c:	6039      	str	r1, [r7, #0]
	status_t status = STATUS_PASS;
  405e5e:	2300      	movs	r3, #0
  405e60:	73fb      	strb	r3, [r7, #15]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  405e62:	687b      	ldr	r3, [r7, #4]
  405e64:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405e6c:	d103      	bne.n	405e76 <uart_get_byte+0x22>
	{ // if the sw buffer is full
		memBuf->uart_rx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  405e6e:	687b      	ldr	r3, [r7, #4]
  405e70:	2200      	movs	r2, #0
  405e72:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	}
	if(memBuf->rx_fifo.num_bytes > 0)
  405e76:	687b      	ldr	r3, [r7, #4]
  405e78:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405e7c:	2b00      	cmp	r3, #0
  405e7e:	d017      	beq.n	405eb0 <uart_get_byte+0x5c>
	{
		// if data exists in the sw buffer
		*c = memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_first]; // grab the oldest element in the buffer
  405e80:	687b      	ldr	r3, [r7, #4]
  405e82:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  405e86:	687a      	ldr	r2, [r7, #4]
  405e88:	5cd2      	ldrb	r2, [r2, r3]
  405e8a:	683b      	ldr	r3, [r7, #0]
  405e8c:	701a      	strb	r2, [r3, #0]
		memBuf->rx_fifo.i_first++;                        // increment the index of the oldest element
  405e8e:	687b      	ldr	r3, [r7, #4]
  405e90:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  405e94:	3301      	adds	r3, #1
  405e96:	b29a      	uxth	r2, r3
  405e98:	687b      	ldr	r3, [r7, #4]
  405e9a:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
		memBuf->rx_fifo.num_bytes--;                      // decrement the bytes counter
  405e9e:	687b      	ldr	r3, [r7, #4]
  405ea0:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405ea4:	3b01      	subs	r3, #1
  405ea6:	b29a      	uxth	r2, r3
  405ea8:	687b      	ldr	r3, [r7, #4]
  405eaa:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
  405eae:	e005      	b.n	405ebc <uart_get_byte+0x68>
	}
	else
	{                                      // RX sw buffer is empty
		memBuf->uart_rx_fifo_not_empty_flag = 0;          // clear the rx flag
  405eb0:	687b      	ldr	r3, [r7, #4]
  405eb2:	2200      	movs	r2, #0
  405eb4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
		status = STATUS_EOF;
  405eb8:	2302      	movs	r3, #2
  405eba:	73fb      	strb	r3, [r7, #15]
	}
	if(memBuf->rx_fifo.i_first == FIFO_BUFFER_SIZE)
  405ebc:	687b      	ldr	r3, [r7, #4]
  405ebe:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  405ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405ec6:	d103      	bne.n	405ed0 <uart_get_byte+0x7c>
	{   // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_first = 0;                      // roll over the index counter
  405ec8:	687b      	ldr	r3, [r7, #4]
  405eca:	2200      	movs	r2, #0
  405ecc:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}		
	return status;
  405ed0:	7bfb      	ldrb	r3, [r7, #15]
}
  405ed2:	4618      	mov	r0, r3
  405ed4:	3714      	adds	r7, #20
  405ed6:	46bd      	mov	sp, r7
  405ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
  405edc:	4770      	bx	lr
  405ede:	bf00      	nop

00405ee0 <uart_process_byte>:

static void uart_process_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  405ee0:	b580      	push	{r7, lr}
  405ee2:	b084      	sub	sp, #16
  405ee4:	af00      	add	r7, sp, #0
  405ee6:	6078      	str	r0, [r7, #4]
  405ee8:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  405eea:	2300      	movs	r3, #0
  405eec:	60fb      	str	r3, [r7, #12]
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE) // if the sw buffer is full
  405eee:	683b      	ldr	r3, [r7, #0]
  405ef0:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405ef8:	d111      	bne.n	405f1e <uart_process_byte+0x3e>
	{
		memBuf->uart_rx_fifo_ovf_flag = 1;                     // set the overflow flag
  405efa:	683b      	ldr	r3, [r7, #0]
  405efc:	2201      	movs	r2, #1
  405efe:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		//the buffer is full, but we have to clear the interrupt
		memBuf->uart_rx_fifo_dropped_bytes++; //our data stream will be out of sync now...
  405f02:	683b      	ldr	r3, [r7, #0]
  405f04:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  405f08:	1c5a      	adds	r2, r3, #1
  405f0a:	683b      	ldr	r3, [r7, #0]
  405f0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		usart_getchar(p_usart,&val);		
  405f10:	f107 030c 	add.w	r3, r7, #12
  405f14:	6878      	ldr	r0, [r7, #4]
  405f16:	4619      	mov	r1, r3
  405f18:	4b21      	ldr	r3, [pc, #132]	; (405fa0 <uart_process_byte+0xc0>)
  405f1a:	4798      	blx	r3
  405f1c:	e025      	b.n	405f6a <uart_process_byte+0x8a>
	}
	else if(memBuf->rx_fifo.num_bytes < FIFO_BUFFER_SIZE)  // if there's room in the sw buffer
  405f1e:	683b      	ldr	r3, [r7, #0]
  405f20:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405f28:	d21f      	bcs.n	405f6a <uart_process_byte+0x8a>
	{		
		//while((UART0->UART_SR & UART_SR_RXRDY) == 0);
		if(usart_getchar(p_usart,&val) == STATUS_PASS)
  405f2a:	f107 030c 	add.w	r3, r7, #12
  405f2e:	6878      	ldr	r0, [r7, #4]
  405f30:	4619      	mov	r1, r3
  405f32:	4b1b      	ldr	r3, [pc, #108]	; (405fa0 <uart_process_byte+0xc0>)
  405f34:	4798      	blx	r3
  405f36:	4603      	mov	r3, r0
  405f38:	2b00      	cmp	r3, #0
  405f3a:	d116      	bne.n	405f6a <uart_process_byte+0x8a>
		{		
			memBuf->rx_fifo.data_buf[memBuf->rx_fifo.i_last] = (uint8_t)val;
  405f3c:	683b      	ldr	r3, [r7, #0]
  405f3e:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  405f42:	68fa      	ldr	r2, [r7, #12]
  405f44:	b2d1      	uxtb	r1, r2
  405f46:	683a      	ldr	r2, [r7, #0]
  405f48:	54d1      	strb	r1, [r2, r3]
			memBuf->rx_fifo.i_last++;                              // increment the index of the most recently added element
  405f4a:	683b      	ldr	r3, [r7, #0]
  405f4c:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  405f50:	3301      	adds	r3, #1
  405f52:	b29a      	uxth	r2, r3
  405f54:	683b      	ldr	r3, [r7, #0]
  405f56:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
			memBuf->rx_fifo.num_bytes++;                           // increment the bytes counter
  405f5a:	683b      	ldr	r3, [r7, #0]
  405f5c:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405f60:	3301      	adds	r3, #1
  405f62:	b29a      	uxth	r2, r3
  405f64:	683b      	ldr	r3, [r7, #0]
  405f66:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		//if(p_usart == UART1)
		//{
			//usart_putchar(UART0, val);
		//}
	}
	if(memBuf->rx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  405f6a:	683b      	ldr	r3, [r7, #0]
  405f6c:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
  405f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405f74:	d103      	bne.n	405f7e <uart_process_byte+0x9e>
	{      // if sw buffer just filled up
		memBuf->uart_rx_fifo_full_flag = 1;                    // set the RX FIFO full flag
  405f76:	683b      	ldr	r3, [r7, #0]
  405f78:	2201      	movs	r2, #1
  405f7a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	}
	if(memBuf->rx_fifo.i_last == FIFO_BUFFER_SIZE)
  405f7e:	683b      	ldr	r3, [r7, #0]
  405f80:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
  405f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405f88:	d103      	bne.n	405f92 <uart_process_byte+0xb2>
	{         // if the index has reached the end of the buffer,
		memBuf->rx_fifo.i_last = 0;                            // roll over the index counter
  405f8a:	683b      	ldr	r3, [r7, #0]
  405f8c:	2200      	movs	r2, #0
  405f8e:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	}
	memBuf->uart_rx_fifo_not_empty_flag = 1;                 // set received-data flag	
  405f92:	683b      	ldr	r3, [r7, #0]
  405f94:	2201      	movs	r2, #1
  405f96:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
}
  405f9a:	3710      	adds	r7, #16
  405f9c:	46bd      	mov	sp, r7
  405f9e:	bd80      	pop	{r7, pc}
  405fa0:	00405109 	.word	0x00405109

00405fa4 <uart_process_tx_byte>:

static void uart_process_tx_byte(Usart *p_usart, drv_uart_memory_buf_t* memBuf)
{
  405fa4:	b580      	push	{r7, lr}
  405fa6:	b082      	sub	sp, #8
  405fa8:	af00      	add	r7, sp, #0
  405faa:	6078      	str	r0, [r7, #4]
  405fac:	6039      	str	r1, [r7, #0]
	if(memBuf->tx_fifo.num_bytes == FIFO_BUFFER_SIZE)
  405fae:	683b      	ldr	r3, [r7, #0]
  405fb0:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  405fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405fb8:	d103      	bne.n	405fc2 <uart_process_tx_byte+0x1e>
	{ // if the sw buffer is full
		memBuf->uart_tx_fifo_full_flag = 0;               // clear the buffer full flag because we are about to make room
  405fba:	683b      	ldr	r3, [r7, #0]
  405fbc:	2200      	movs	r2, #0
  405fbe:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	}
	if(memBuf->tx_fifo.num_bytes > 0)
  405fc2:	683b      	ldr	r3, [r7, #0]
  405fc4:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  405fc8:	2b00      	cmp	r3, #0
  405fca:	d01b      	beq.n	406004 <uart_process_tx_byte+0x60>
	{
		// if data exists in the sw buffer
		usart_serial_putchar(p_usart,memBuf->tx_fifo.data_buf[memBuf->tx_fifo.i_first]); // send the next value from buffer
  405fcc:	683b      	ldr	r3, [r7, #0]
  405fce:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  405fd2:	683a      	ldr	r2, [r7, #0]
  405fd4:	4413      	add	r3, r2
  405fd6:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
  405fda:	6878      	ldr	r0, [r7, #4]
  405fdc:	4619      	mov	r1, r3
  405fde:	4b14      	ldr	r3, [pc, #80]	; (406030 <uart_process_tx_byte+0x8c>)
  405fe0:	4798      	blx	r3
		memBuf->tx_fifo.i_first++;                        // increment the index of the oldest element
  405fe2:	683b      	ldr	r3, [r7, #0]
  405fe4:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  405fe8:	3301      	adds	r3, #1
  405fea:	b29a      	uxth	r2, r3
  405fec:	683b      	ldr	r3, [r7, #0]
  405fee:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		memBuf->tx_fifo.num_bytes--;                      // decrement the bytes counter
  405ff2:	683b      	ldr	r3, [r7, #0]
  405ff4:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
  405ff8:	3b01      	subs	r3, #1
  405ffa:	b29a      	uxth	r2, r3
  405ffc:	683b      	ldr	r3, [r7, #0]
  405ffe:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
  406002:	e008      	b.n	406016 <uart_process_tx_byte+0x72>
	}
	else
	{   // tx sw buffer is empty
		memBuf->uart_tx_fifo_not_empty_flag = 0;          // clear the tx flag
  406004:	683b      	ldr	r3, [r7, #0]
  406006:	2200      	movs	r2, #0
  406008:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
		uart_disable_interrupt(p_usart,UART_IER_TXEMPTY); //the buffer is empty, stop the interrupt. 
  40600c:	6878      	ldr	r0, [r7, #4]
  40600e:	f44f 7100 	mov.w	r1, #512	; 0x200
  406012:	4b08      	ldr	r3, [pc, #32]	; (406034 <uart_process_tx_byte+0x90>)
  406014:	4798      	blx	r3
	}
	if(memBuf->tx_fifo.i_first == FIFO_BUFFER_SIZE)
  406016:	683b      	ldr	r3, [r7, #0]
  406018:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
  40601c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406020:	d103      	bne.n	40602a <uart_process_tx_byte+0x86>
	{   // if the index has reached the end of the buffer,
		memBuf->tx_fifo.i_first = 0;                      // roll over the index counter
  406022:	683b      	ldr	r3, [r7, #0]
  406024:	2200      	movs	r2, #0
  406026:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}	
  40602a:	3708      	adds	r7, #8
  40602c:	46bd      	mov	sp, r7
  40602e:	bd80      	pop	{r7, pc}
  406030:	00405669 	.word	0x00405669
  406034:	00408595 	.word	0x00408595

00406038 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  406038:	b480      	push	{r7}
  40603a:	b083      	sub	sp, #12
  40603c:	af00      	add	r7, sp, #0
  40603e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  406040:	687b      	ldr	r3, [r7, #4]
  406042:	f103 0208 	add.w	r2, r3, #8
  406046:	687b      	ldr	r3, [r7, #4]
  406048:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40604a:	687b      	ldr	r3, [r7, #4]
  40604c:	f04f 32ff 	mov.w	r2, #4294967295
  406050:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  406052:	687b      	ldr	r3, [r7, #4]
  406054:	f103 0208 	add.w	r2, r3, #8
  406058:	687b      	ldr	r3, [r7, #4]
  40605a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  40605c:	687b      	ldr	r3, [r7, #4]
  40605e:	f103 0208 	add.w	r2, r3, #8
  406062:	687b      	ldr	r3, [r7, #4]
  406064:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  406066:	687b      	ldr	r3, [r7, #4]
  406068:	2200      	movs	r2, #0
  40606a:	601a      	str	r2, [r3, #0]
}
  40606c:	370c      	adds	r7, #12
  40606e:	46bd      	mov	sp, r7
  406070:	f85d 7b04 	ldr.w	r7, [sp], #4
  406074:	4770      	bx	lr
  406076:	bf00      	nop

00406078 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  406078:	b480      	push	{r7}
  40607a:	b083      	sub	sp, #12
  40607c:	af00      	add	r7, sp, #0
  40607e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  406080:	687b      	ldr	r3, [r7, #4]
  406082:	2200      	movs	r2, #0
  406084:	611a      	str	r2, [r3, #16]
}
  406086:	370c      	adds	r7, #12
  406088:	46bd      	mov	sp, r7
  40608a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40608e:	4770      	bx	lr

00406090 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  406090:	b480      	push	{r7}
  406092:	b085      	sub	sp, #20
  406094:	af00      	add	r7, sp, #0
  406096:	6078      	str	r0, [r7, #4]
  406098:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  40609a:	687b      	ldr	r3, [r7, #4]
  40609c:	685b      	ldr	r3, [r3, #4]
  40609e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  4060a0:	68fb      	ldr	r3, [r7, #12]
  4060a2:	685a      	ldr	r2, [r3, #4]
  4060a4:	683b      	ldr	r3, [r7, #0]
  4060a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  4060a8:	687b      	ldr	r3, [r7, #4]
  4060aa:	685a      	ldr	r2, [r3, #4]
  4060ac:	683b      	ldr	r3, [r7, #0]
  4060ae:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4060b0:	68fb      	ldr	r3, [r7, #12]
  4060b2:	685b      	ldr	r3, [r3, #4]
  4060b4:	683a      	ldr	r2, [r7, #0]
  4060b6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  4060b8:	68fb      	ldr	r3, [r7, #12]
  4060ba:	683a      	ldr	r2, [r7, #0]
  4060bc:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  4060be:	687b      	ldr	r3, [r7, #4]
  4060c0:	683a      	ldr	r2, [r7, #0]
  4060c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4060c4:	683b      	ldr	r3, [r7, #0]
  4060c6:	687a      	ldr	r2, [r7, #4]
  4060c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4060ca:	687b      	ldr	r3, [r7, #4]
  4060cc:	681b      	ldr	r3, [r3, #0]
  4060ce:	1c5a      	adds	r2, r3, #1
  4060d0:	687b      	ldr	r3, [r7, #4]
  4060d2:	601a      	str	r2, [r3, #0]
}
  4060d4:	3714      	adds	r7, #20
  4060d6:	46bd      	mov	sp, r7
  4060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4060dc:	4770      	bx	lr
  4060de:	bf00      	nop

004060e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  4060e0:	b480      	push	{r7}
  4060e2:	b085      	sub	sp, #20
  4060e4:	af00      	add	r7, sp, #0
  4060e6:	6078      	str	r0, [r7, #4]
  4060e8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  4060ea:	683b      	ldr	r3, [r7, #0]
  4060ec:	681b      	ldr	r3, [r3, #0]
  4060ee:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4060f0:	68bb      	ldr	r3, [r7, #8]
  4060f2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4060f6:	d103      	bne.n	406100 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  4060f8:	687b      	ldr	r3, [r7, #4]
  4060fa:	691b      	ldr	r3, [r3, #16]
  4060fc:	60fb      	str	r3, [r7, #12]
  4060fe:	e00c      	b.n	40611a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  406100:	687b      	ldr	r3, [r7, #4]
  406102:	3308      	adds	r3, #8
  406104:	60fb      	str	r3, [r7, #12]
  406106:	e002      	b.n	40610e <vListInsert+0x2e>
  406108:	68fb      	ldr	r3, [r7, #12]
  40610a:	685b      	ldr	r3, [r3, #4]
  40610c:	60fb      	str	r3, [r7, #12]
  40610e:	68fb      	ldr	r3, [r7, #12]
  406110:	685b      	ldr	r3, [r3, #4]
  406112:	681a      	ldr	r2, [r3, #0]
  406114:	68bb      	ldr	r3, [r7, #8]
  406116:	429a      	cmp	r2, r3
  406118:	d9f6      	bls.n	406108 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40611a:	68fb      	ldr	r3, [r7, #12]
  40611c:	685a      	ldr	r2, [r3, #4]
  40611e:	683b      	ldr	r3, [r7, #0]
  406120:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  406122:	683b      	ldr	r3, [r7, #0]
  406124:	685b      	ldr	r3, [r3, #4]
  406126:	683a      	ldr	r2, [r7, #0]
  406128:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40612a:	683b      	ldr	r3, [r7, #0]
  40612c:	68fa      	ldr	r2, [r7, #12]
  40612e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  406130:	68fb      	ldr	r3, [r7, #12]
  406132:	683a      	ldr	r2, [r7, #0]
  406134:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  406136:	683b      	ldr	r3, [r7, #0]
  406138:	687a      	ldr	r2, [r7, #4]
  40613a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  40613c:	687b      	ldr	r3, [r7, #4]
  40613e:	681b      	ldr	r3, [r3, #0]
  406140:	1c5a      	adds	r2, r3, #1
  406142:	687b      	ldr	r3, [r7, #4]
  406144:	601a      	str	r2, [r3, #0]
}
  406146:	3714      	adds	r7, #20
  406148:	46bd      	mov	sp, r7
  40614a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40614e:	4770      	bx	lr

00406150 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  406150:	b480      	push	{r7}
  406152:	b085      	sub	sp, #20
  406154:	af00      	add	r7, sp, #0
  406156:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  406158:	687b      	ldr	r3, [r7, #4]
  40615a:	685b      	ldr	r3, [r3, #4]
  40615c:	687a      	ldr	r2, [r7, #4]
  40615e:	6892      	ldr	r2, [r2, #8]
  406160:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  406162:	687b      	ldr	r3, [r7, #4]
  406164:	689b      	ldr	r3, [r3, #8]
  406166:	687a      	ldr	r2, [r7, #4]
  406168:	6852      	ldr	r2, [r2, #4]
  40616a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  40616c:	687b      	ldr	r3, [r7, #4]
  40616e:	691b      	ldr	r3, [r3, #16]
  406170:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  406172:	68fb      	ldr	r3, [r7, #12]
  406174:	685a      	ldr	r2, [r3, #4]
  406176:	687b      	ldr	r3, [r7, #4]
  406178:	429a      	cmp	r2, r3
  40617a:	d103      	bne.n	406184 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40617c:	687b      	ldr	r3, [r7, #4]
  40617e:	689a      	ldr	r2, [r3, #8]
  406180:	68fb      	ldr	r3, [r7, #12]
  406182:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  406184:	687b      	ldr	r3, [r7, #4]
  406186:	2200      	movs	r2, #0
  406188:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  40618a:	68fb      	ldr	r3, [r7, #12]
  40618c:	681b      	ldr	r3, [r3, #0]
  40618e:	1e5a      	subs	r2, r3, #1
  406190:	68fb      	ldr	r3, [r7, #12]
  406192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  406194:	68fb      	ldr	r3, [r7, #12]
  406196:	681b      	ldr	r3, [r3, #0]
}
  406198:	4618      	mov	r0, r3
  40619a:	3714      	adds	r7, #20
  40619c:	46bd      	mov	sp, r7
  40619e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061a2:	4770      	bx	lr

004061a4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4061a4:	b480      	push	{r7}
  4061a6:	b083      	sub	sp, #12
  4061a8:	af00      	add	r7, sp, #0
  4061aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4061ac:	687b      	ldr	r3, [r7, #4]
  4061ae:	2b07      	cmp	r3, #7
  4061b0:	d825      	bhi.n	4061fe <osc_get_rate+0x5a>
  4061b2:	a201      	add	r2, pc, #4	; (adr r2, 4061b8 <osc_get_rate+0x14>)
  4061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4061b8:	004061d9 	.word	0x004061d9
  4061bc:	004061df 	.word	0x004061df
  4061c0:	004061e5 	.word	0x004061e5
  4061c4:	004061eb 	.word	0x004061eb
  4061c8:	004061ef 	.word	0x004061ef
  4061cc:	004061f3 	.word	0x004061f3
  4061d0:	004061f7 	.word	0x004061f7
  4061d4:	004061fb 	.word	0x004061fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4061d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4061dc:	e010      	b.n	406200 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4061de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4061e2:	e00d      	b.n	406200 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4061e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4061e8:	e00a      	b.n	406200 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4061ea:	4b08      	ldr	r3, [pc, #32]	; (40620c <osc_get_rate+0x68>)
  4061ec:	e008      	b.n	406200 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4061ee:	4b08      	ldr	r3, [pc, #32]	; (406210 <osc_get_rate+0x6c>)
  4061f0:	e006      	b.n	406200 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4061f2:	4b08      	ldr	r3, [pc, #32]	; (406214 <osc_get_rate+0x70>)
  4061f4:	e004      	b.n	406200 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4061f6:	4b07      	ldr	r3, [pc, #28]	; (406214 <osc_get_rate+0x70>)
  4061f8:	e002      	b.n	406200 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4061fa:	4b06      	ldr	r3, [pc, #24]	; (406214 <osc_get_rate+0x70>)
  4061fc:	e000      	b.n	406200 <osc_get_rate+0x5c>
	}

	return 0;
  4061fe:	2300      	movs	r3, #0
}
  406200:	4618      	mov	r0, r3
  406202:	370c      	adds	r7, #12
  406204:	46bd      	mov	sp, r7
  406206:	f85d 7b04 	ldr.w	r7, [sp], #4
  40620a:	4770      	bx	lr
  40620c:	003d0900 	.word	0x003d0900
  406210:	007a1200 	.word	0x007a1200
  406214:	00b71b00 	.word	0x00b71b00

00406218 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  406218:	b580      	push	{r7, lr}
  40621a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40621c:	2006      	movs	r0, #6
  40621e:	4b04      	ldr	r3, [pc, #16]	; (406230 <sysclk_get_main_hz+0x18>)
  406220:	4798      	blx	r3
  406222:	4602      	mov	r2, r0
  406224:	4613      	mov	r3, r2
  406226:	009b      	lsls	r3, r3, #2
  406228:	4413      	add	r3, r2
  40622a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40622c:	4618      	mov	r0, r3
  40622e:	bd80      	pop	{r7, pc}
  406230:	004061a5 	.word	0x004061a5

00406234 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  406234:	b580      	push	{r7, lr}
  406236:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  406238:	4b02      	ldr	r3, [pc, #8]	; (406244 <sysclk_get_cpu_hz+0x10>)
  40623a:	4798      	blx	r3
  40623c:	4603      	mov	r3, r0
  40623e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  406240:	4618      	mov	r0, r3
  406242:	bd80      	pop	{r7, pc}
  406244:	00406219 	.word	0x00406219

00406248 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
  406248:	b480      	push	{r7}
  40624a:	b085      	sub	sp, #20
  40624c:	af00      	add	r7, sp, #0
  40624e:	60f8      	str	r0, [r7, #12]
  406250:	60b9      	str	r1, [r7, #8]
  406252:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
  406254:	68fb      	ldr	r3, [r7, #12]
  406256:	3b04      	subs	r3, #4
  406258:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40625a:	68fb      	ldr	r3, [r7, #12]
  40625c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  406260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  406262:	68fb      	ldr	r3, [r7, #12]
  406264:	3b04      	subs	r3, #4
  406266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  406268:	68ba      	ldr	r2, [r7, #8]
  40626a:	68fb      	ldr	r3, [r7, #12]
  40626c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40626e:	68fb      	ldr	r3, [r7, #12]
  406270:	3b04      	subs	r3, #4
  406272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
  406274:	68fb      	ldr	r3, [r7, #12]
  406276:	2200      	movs	r2, #0
  406278:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  40627a:	68fb      	ldr	r3, [r7, #12]
  40627c:	3b14      	subs	r3, #20
  40627e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  406280:	687a      	ldr	r2, [r7, #4]
  406282:	68fb      	ldr	r3, [r7, #12]
  406284:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  406286:	68fb      	ldr	r3, [r7, #12]
  406288:	3b20      	subs	r3, #32
  40628a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  40628c:	68fb      	ldr	r3, [r7, #12]
}
  40628e:	4618      	mov	r0, r3
  406290:	3714      	adds	r7, #20
  406292:	46bd      	mov	sp, r7
  406294:	f85d 7b04 	ldr.w	r7, [sp], #4
  406298:	4770      	bx	lr
  40629a:	bf00      	nop

0040629c <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
  40629c:	4b06      	ldr	r3, [pc, #24]	; (4062b8 <pxCurrentTCBConst2>)
  40629e:	6819      	ldr	r1, [r3, #0]
  4062a0:	6808      	ldr	r0, [r1, #0]
  4062a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4062a6:	f380 8809 	msr	PSP, r0
  4062aa:	f04f 0000 	mov.w	r0, #0
  4062ae:	f380 8811 	msr	BASEPRI, r0
  4062b2:	f04e 0e0d 	orr.w	lr, lr, #13
  4062b6:	4770      	bx	lr

004062b8 <pxCurrentTCBConst2>:
  4062b8:	20014ccc 	.word	0x20014ccc

004062bc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4062bc:	4803      	ldr	r0, [pc, #12]	; (4062cc <prvPortStartFirstTask+0x10>)
  4062be:	6800      	ldr	r0, [r0, #0]
  4062c0:	6800      	ldr	r0, [r0, #0]
  4062c2:	f380 8808 	msr	MSP, r0
  4062c6:	b662      	cpsie	i
  4062c8:	df00      	svc	0
  4062ca:	bf00      	nop
  4062cc:	e000ed08 	.word	0xe000ed08

004062d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  4062d0:	b580      	push	{r7, lr}
  4062d2:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4062d4:	4b0a      	ldr	r3, [pc, #40]	; (406300 <xPortStartScheduler+0x30>)
  4062d6:	4a0a      	ldr	r2, [pc, #40]	; (406300 <xPortStartScheduler+0x30>)
  4062d8:	6812      	ldr	r2, [r2, #0]
  4062da:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4062de:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4062e0:	4b07      	ldr	r3, [pc, #28]	; (406300 <xPortStartScheduler+0x30>)
  4062e2:	4a07      	ldr	r2, [pc, #28]	; (406300 <xPortStartScheduler+0x30>)
  4062e4:	6812      	ldr	r2, [r2, #0]
  4062e6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4062ea:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  4062ec:	4b05      	ldr	r3, [pc, #20]	; (406304 <xPortStartScheduler+0x34>)
  4062ee:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4062f0:	4b05      	ldr	r3, [pc, #20]	; (406308 <xPortStartScheduler+0x38>)
  4062f2:	2200      	movs	r2, #0
  4062f4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4062f6:	4b05      	ldr	r3, [pc, #20]	; (40630c <xPortStartScheduler+0x3c>)
  4062f8:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  4062fa:	2300      	movs	r3, #0
}
  4062fc:	4618      	mov	r0, r3
  4062fe:	bd80      	pop	{r7, pc}
  406300:	e000ed20 	.word	0xe000ed20
  406304:	004063f1 	.word	0x004063f1
  406308:	20000200 	.word	0x20000200
  40630c:	004062bd 	.word	0x004062bd

00406310 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  406310:	b480      	push	{r7}
  406312:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  406314:	4b03      	ldr	r3, [pc, #12]	; (406324 <vPortYieldFromISR+0x14>)
  406316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40631a:	601a      	str	r2, [r3, #0]
}
  40631c:	46bd      	mov	sp, r7
  40631e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406322:	4770      	bx	lr
  406324:	e000ed04 	.word	0xe000ed04

00406328 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  406328:	b580      	push	{r7, lr}
  40632a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  40632c:	4b03      	ldr	r3, [pc, #12]	; (40633c <vPortEnterCritical+0x14>)
  40632e:	4798      	blx	r3
	uxCriticalNesting++;
  406330:	4b03      	ldr	r3, [pc, #12]	; (406340 <vPortEnterCritical+0x18>)
  406332:	681b      	ldr	r3, [r3, #0]
  406334:	1c5a      	adds	r2, r3, #1
  406336:	4b02      	ldr	r3, [pc, #8]	; (406340 <vPortEnterCritical+0x18>)
  406338:	601a      	str	r2, [r3, #0]
}
  40633a:	bd80      	pop	{r7, pc}
  40633c:	0040636d 	.word	0x0040636d
  406340:	20000200 	.word	0x20000200

00406344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  406344:	b580      	push	{r7, lr}
  406346:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  406348:	4b06      	ldr	r3, [pc, #24]	; (406364 <vPortExitCritical+0x20>)
  40634a:	681b      	ldr	r3, [r3, #0]
  40634c:	1e5a      	subs	r2, r3, #1
  40634e:	4b05      	ldr	r3, [pc, #20]	; (406364 <vPortExitCritical+0x20>)
  406350:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
  406352:	4b04      	ldr	r3, [pc, #16]	; (406364 <vPortExitCritical+0x20>)
  406354:	681b      	ldr	r3, [r3, #0]
  406356:	2b00      	cmp	r3, #0
  406358:	d102      	bne.n	406360 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
  40635a:	2000      	movs	r0, #0
  40635c:	4b02      	ldr	r3, [pc, #8]	; (406368 <vPortExitCritical+0x24>)
  40635e:	4798      	blx	r3
	}
}
  406360:	bd80      	pop	{r7, pc}
  406362:	bf00      	nop
  406364:	20000200 	.word	0x20000200
  406368:	00406381 	.word	0x00406381

0040636c <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
  40636c:	f3ef 8011 	mrs	r0, BASEPRI
  406370:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  406374:	f381 8811 	msr	BASEPRI, r1
  406378:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
  40637a:	2300      	movs	r3, #0
}
  40637c:	4618      	mov	r0, r3
  40637e:	bf00      	nop

00406380 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
  406380:	f380 8811 	msr	BASEPRI, r0
  406384:	4770      	bx	lr
  406386:	bf00      	nop

00406388 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
  406388:	f3ef 8009 	mrs	r0, PSP
  40638c:	4b0c      	ldr	r3, [pc, #48]	; (4063c0 <pxCurrentTCBConst>)
  40638e:	681a      	ldr	r2, [r3, #0]
  406390:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  406394:	6010      	str	r0, [r2, #0]
  406396:	e92d 4008 	stmdb	sp!, {r3, lr}
  40639a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  40639e:	f380 8811 	msr	BASEPRI, r0
  4063a2:	f001 f843 	bl	40742c <vTaskSwitchContext>
  4063a6:	f04f 0000 	mov.w	r0, #0
  4063aa:	f380 8811 	msr	BASEPRI, r0
  4063ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4063b2:	6819      	ldr	r1, [r3, #0]
  4063b4:	6808      	ldr	r0, [r1, #0]
  4063b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4063ba:	f380 8809 	msr	PSP, r0
  4063be:	4770      	bx	lr

004063c0 <pxCurrentTCBConst>:
  4063c0:	20014ccc 	.word	0x20014ccc

004063c4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
  4063c4:	b580      	push	{r7, lr}
  4063c6:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4063c8:	4b05      	ldr	r3, [pc, #20]	; (4063e0 <SysTick_Handler+0x1c>)
  4063ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4063ce:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
  4063d0:	4b04      	ldr	r3, [pc, #16]	; (4063e4 <SysTick_Handler+0x20>)
  4063d2:	4798      	blx	r3
	{
		vTaskIncrementTick();
  4063d4:	4b04      	ldr	r3, [pc, #16]	; (4063e8 <SysTick_Handler+0x24>)
  4063d6:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  4063d8:	2000      	movs	r0, #0
  4063da:	4b04      	ldr	r3, [pc, #16]	; (4063ec <SysTick_Handler+0x28>)
  4063dc:	4798      	blx	r3
}
  4063de:	bd80      	pop	{r7, pc}
  4063e0:	e000ed04 	.word	0xe000ed04
  4063e4:	0040636d 	.word	0x0040636d
  4063e8:	004072e5 	.word	0x004072e5
  4063ec:	00406381 	.word	0x00406381

004063f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
  4063f0:	b598      	push	{r3, r4, r7, lr}
  4063f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
  4063f4:	4c06      	ldr	r4, [pc, #24]	; (406410 <vPortSetupTimerInterrupt+0x20>)
  4063f6:	4b07      	ldr	r3, [pc, #28]	; (406414 <vPortSetupTimerInterrupt+0x24>)
  4063f8:	4798      	blx	r3
  4063fa:	4602      	mov	r2, r0
  4063fc:	4b06      	ldr	r3, [pc, #24]	; (406418 <vPortSetupTimerInterrupt+0x28>)
  4063fe:	fba3 1302 	umull	r1, r3, r3, r2
  406402:	099b      	lsrs	r3, r3, #6
  406404:	3b01      	subs	r3, #1
  406406:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
  406408:	4b04      	ldr	r3, [pc, #16]	; (40641c <vPortSetupTimerInterrupt+0x2c>)
  40640a:	2207      	movs	r2, #7
  40640c:	601a      	str	r2, [r3, #0]
}
  40640e:	bd98      	pop	{r3, r4, r7, pc}
  406410:	e000e014 	.word	0xe000e014
  406414:	00406235 	.word	0x00406235
  406418:	10624dd3 	.word	0x10624dd3
  40641c:	e000e010 	.word	0xe000e010

00406420 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  406420:	b580      	push	{r7, lr}
  406422:	b086      	sub	sp, #24
  406424:	af00      	add	r7, sp, #0
  406426:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  406428:	2300      	movs	r3, #0
  40642a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  40642c:	4b36      	ldr	r3, [pc, #216]	; (406508 <pvPortMalloc+0xe8>)
  40642e:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  406430:	4b36      	ldr	r3, [pc, #216]	; (40650c <pvPortMalloc+0xec>)
  406432:	681b      	ldr	r3, [r3, #0]
  406434:	2b00      	cmp	r3, #0
  406436:	d101      	bne.n	40643c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  406438:	4b35      	ldr	r3, [pc, #212]	; (406510 <pvPortMalloc+0xf0>)
  40643a:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  40643c:	687b      	ldr	r3, [r7, #4]
  40643e:	2b00      	cmp	r3, #0
  406440:	d00d      	beq.n	40645e <pvPortMalloc+0x3e>
		{
			xWantedSize += heapSTRUCT_SIZE;
  406442:	2310      	movs	r3, #16
  406444:	687a      	ldr	r2, [r7, #4]
  406446:	4413      	add	r3, r2
  406448:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  40644a:	687b      	ldr	r3, [r7, #4]
  40644c:	f003 0307 	and.w	r3, r3, #7
  406450:	2b00      	cmp	r3, #0
  406452:	d004      	beq.n	40645e <pvPortMalloc+0x3e>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  406454:	687b      	ldr	r3, [r7, #4]
  406456:	f023 0307 	bic.w	r3, r3, #7
  40645a:	3308      	adds	r3, #8
  40645c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  40645e:	687b      	ldr	r3, [r7, #4]
  406460:	2b00      	cmp	r3, #0
  406462:	d045      	beq.n	4064f0 <pvPortMalloc+0xd0>
  406464:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
  406468:	687a      	ldr	r2, [r7, #4]
  40646a:	429a      	cmp	r2, r3
  40646c:	d240      	bcs.n	4064f0 <pvPortMalloc+0xd0>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  40646e:	4b29      	ldr	r3, [pc, #164]	; (406514 <pvPortMalloc+0xf4>)
  406470:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  406472:	4b28      	ldr	r3, [pc, #160]	; (406514 <pvPortMalloc+0xf4>)
  406474:	681b      	ldr	r3, [r3, #0]
  406476:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  406478:	e004      	b.n	406484 <pvPortMalloc+0x64>
			{
				pxPreviousBlock = pxBlock;
  40647a:	697b      	ldr	r3, [r7, #20]
  40647c:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  40647e:	697b      	ldr	r3, [r7, #20]
  406480:	681b      	ldr	r3, [r3, #0]
  406482:	617b      	str	r3, [r7, #20]
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  406484:	697b      	ldr	r3, [r7, #20]
  406486:	685a      	ldr	r2, [r3, #4]
  406488:	687b      	ldr	r3, [r7, #4]
  40648a:	429a      	cmp	r2, r3
  40648c:	d203      	bcs.n	406496 <pvPortMalloc+0x76>
  40648e:	697b      	ldr	r3, [r7, #20]
  406490:	681b      	ldr	r3, [r3, #0]
  406492:	2b00      	cmp	r3, #0
  406494:	d1f1      	bne.n	40647a <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  406496:	4b1d      	ldr	r3, [pc, #116]	; (40650c <pvPortMalloc+0xec>)
  406498:	681b      	ldr	r3, [r3, #0]
  40649a:	697a      	ldr	r2, [r7, #20]
  40649c:	429a      	cmp	r2, r3
  40649e:	d027      	beq.n	4064f0 <pvPortMalloc+0xd0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  4064a0:	693b      	ldr	r3, [r7, #16]
  4064a2:	681a      	ldr	r2, [r3, #0]
  4064a4:	2310      	movs	r3, #16
  4064a6:	4413      	add	r3, r2
  4064a8:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  4064aa:	697b      	ldr	r3, [r7, #20]
  4064ac:	681a      	ldr	r2, [r3, #0]
  4064ae:	693b      	ldr	r3, [r7, #16]
  4064b0:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  4064b2:	697b      	ldr	r3, [r7, #20]
  4064b4:	685a      	ldr	r2, [r3, #4]
  4064b6:	687b      	ldr	r3, [r7, #4]
  4064b8:	1ad2      	subs	r2, r2, r3
  4064ba:	2310      	movs	r3, #16
  4064bc:	005b      	lsls	r3, r3, #1
  4064be:	429a      	cmp	r2, r3
  4064c0:	d90f      	bls.n	4064e2 <pvPortMalloc+0xc2>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  4064c2:	697a      	ldr	r2, [r7, #20]
  4064c4:	687b      	ldr	r3, [r7, #4]
  4064c6:	4413      	add	r3, r2
  4064c8:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  4064ca:	697b      	ldr	r3, [r7, #20]
  4064cc:	685a      	ldr	r2, [r3, #4]
  4064ce:	687b      	ldr	r3, [r7, #4]
  4064d0:	1ad2      	subs	r2, r2, r3
  4064d2:	68bb      	ldr	r3, [r7, #8]
  4064d4:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  4064d6:	697b      	ldr	r3, [r7, #20]
  4064d8:	687a      	ldr	r2, [r7, #4]
  4064da:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  4064dc:	68b8      	ldr	r0, [r7, #8]
  4064de:	4b0e      	ldr	r3, [pc, #56]	; (406518 <pvPortMalloc+0xf8>)
  4064e0:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  4064e2:	4b0e      	ldr	r3, [pc, #56]	; (40651c <pvPortMalloc+0xfc>)
  4064e4:	681a      	ldr	r2, [r3, #0]
  4064e6:	697b      	ldr	r3, [r7, #20]
  4064e8:	685b      	ldr	r3, [r3, #4]
  4064ea:	1ad2      	subs	r2, r2, r3
  4064ec:	4b0b      	ldr	r3, [pc, #44]	; (40651c <pvPortMalloc+0xfc>)
  4064ee:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
  4064f0:	4b0b      	ldr	r3, [pc, #44]	; (406520 <pvPortMalloc+0x100>)
  4064f2:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4064f4:	68fb      	ldr	r3, [r7, #12]
  4064f6:	2b00      	cmp	r3, #0
  4064f8:	d101      	bne.n	4064fe <pvPortMalloc+0xde>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  4064fa:	4b0a      	ldr	r3, [pc, #40]	; (406524 <pvPortMalloc+0x104>)
  4064fc:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  4064fe:	68fb      	ldr	r3, [r7, #12]
}
  406500:	4618      	mov	r0, r3
  406502:	3718      	adds	r7, #24
  406504:	46bd      	mov	sp, r7
  406506:	bd80      	pop	{r7, pc}
  406508:	0040714d 	.word	0x0040714d
  40650c:	20014cc8 	.word	0x20014cc8
  406510:	0040657d 	.word	0x0040657d
  406514:	20014cc0 	.word	0x20014cc0
  406518:	0040660d 	.word	0x0040660d
  40651c:	20000204 	.word	0x20000204
  406520:	00407169 	.word	0x00407169
  406524:	00409cf1 	.word	0x00409cf1

00406528 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  406528:	b580      	push	{r7, lr}
  40652a:	b084      	sub	sp, #16
  40652c:	af00      	add	r7, sp, #0
  40652e:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  406530:	687b      	ldr	r3, [r7, #4]
  406532:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  406534:	687b      	ldr	r3, [r7, #4]
  406536:	2b00      	cmp	r3, #0
  406538:	d014      	beq.n	406564 <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  40653a:	2310      	movs	r3, #16
  40653c:	425b      	negs	r3, r3
  40653e:	68fa      	ldr	r2, [r7, #12]
  406540:	4413      	add	r3, r2
  406542:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  406544:	68fb      	ldr	r3, [r7, #12]
  406546:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  406548:	4b08      	ldr	r3, [pc, #32]	; (40656c <vPortFree+0x44>)
  40654a:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  40654c:	68bb      	ldr	r3, [r7, #8]
  40654e:	685a      	ldr	r2, [r3, #4]
  406550:	4b07      	ldr	r3, [pc, #28]	; (406570 <vPortFree+0x48>)
  406552:	681b      	ldr	r3, [r3, #0]
  406554:	441a      	add	r2, r3
  406556:	4b06      	ldr	r3, [pc, #24]	; (406570 <vPortFree+0x48>)
  406558:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  40655a:	68b8      	ldr	r0, [r7, #8]
  40655c:	4b05      	ldr	r3, [pc, #20]	; (406574 <vPortFree+0x4c>)
  40655e:	4798      	blx	r3
		}
		xTaskResumeAll();
  406560:	4b05      	ldr	r3, [pc, #20]	; (406578 <vPortFree+0x50>)
  406562:	4798      	blx	r3
	}
}
  406564:	3710      	adds	r7, #16
  406566:	46bd      	mov	sp, r7
  406568:	bd80      	pop	{r7, pc}
  40656a:	bf00      	nop
  40656c:	0040714d 	.word	0x0040714d
  406570:	20000204 	.word	0x20000204
  406574:	0040660d 	.word	0x0040660d
  406578:	00407169 	.word	0x00407169

0040657c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  40657c:	b580      	push	{r7, lr}
  40657e:	b082      	sub	sp, #8
  406580:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  406582:	4b1d      	ldr	r3, [pc, #116]	; (4065f8 <prvHeapInit+0x7c>)
  406584:	4a1d      	ldr	r2, [pc, #116]	; (4065fc <prvHeapInit+0x80>)
  406586:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  406588:	4b1b      	ldr	r3, [pc, #108]	; (4065f8 <prvHeapInit+0x7c>)
  40658a:	2200      	movs	r2, #0
  40658c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  40658e:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
  406592:	4b1a      	ldr	r3, [pc, #104]	; (4065fc <prvHeapInit+0x80>)
  406594:	4413      	add	r3, r2
  406596:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  406598:	2310      	movs	r3, #16
  40659a:	425b      	negs	r3, r3
  40659c:	687a      	ldr	r2, [r7, #4]
  40659e:	4413      	add	r3, r2
  4065a0:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  4065a2:	4b17      	ldr	r3, [pc, #92]	; (406600 <prvHeapInit+0x84>)
  4065a4:	687a      	ldr	r2, [r7, #4]
  4065a6:	601a      	str	r2, [r3, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  4065a8:	4b15      	ldr	r3, [pc, #84]	; (406600 <prvHeapInit+0x84>)
  4065aa:	681b      	ldr	r3, [r3, #0]
  4065ac:	f003 0307 	and.w	r3, r3, #7
  4065b0:	2b00      	cmp	r3, #0
  4065b2:	d003      	beq.n	4065bc <prvHeapInit+0x40>
  4065b4:	4b13      	ldr	r3, [pc, #76]	; (406604 <prvHeapInit+0x88>)
  4065b6:	4798      	blx	r3
  4065b8:	bf00      	nop
  4065ba:	e7fd      	b.n	4065b8 <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  4065bc:	4b10      	ldr	r3, [pc, #64]	; (406600 <prvHeapInit+0x84>)
  4065be:	681b      	ldr	r3, [r3, #0]
  4065c0:	2200      	movs	r2, #0
  4065c2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  4065c4:	4b0e      	ldr	r3, [pc, #56]	; (406600 <prvHeapInit+0x84>)
  4065c6:	681b      	ldr	r3, [r3, #0]
  4065c8:	2200      	movs	r2, #0
  4065ca:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  4065cc:	4b0b      	ldr	r3, [pc, #44]	; (4065fc <prvHeapInit+0x80>)
  4065ce:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  4065d0:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
  4065d4:	2310      	movs	r3, #16
  4065d6:	1ad2      	subs	r2, r2, r3
  4065d8:	683b      	ldr	r3, [r7, #0]
  4065da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  4065dc:	4b08      	ldr	r3, [pc, #32]	; (406600 <prvHeapInit+0x84>)
  4065de:	681a      	ldr	r2, [r3, #0]
  4065e0:	683b      	ldr	r3, [r7, #0]
  4065e2:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  4065e4:	4b08      	ldr	r3, [pc, #32]	; (406608 <prvHeapInit+0x8c>)
  4065e6:	681a      	ldr	r2, [r3, #0]
  4065e8:	2310      	movs	r3, #16
  4065ea:	1ad2      	subs	r2, r2, r3
  4065ec:	4b06      	ldr	r3, [pc, #24]	; (406608 <prvHeapInit+0x8c>)
  4065ee:	601a      	str	r2, [r3, #0]
}
  4065f0:	3708      	adds	r7, #8
  4065f2:	46bd      	mov	sp, r7
  4065f4:	bd80      	pop	{r7, pc}
  4065f6:	bf00      	nop
  4065f8:	20014cc0 	.word	0x20014cc0
  4065fc:	20000cc0 	.word	0x20000cc0
  406600:	20014cc8 	.word	0x20014cc8
  406604:	0040636d 	.word	0x0040636d
  406608:	20000204 	.word	0x20000204

0040660c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  40660c:	b480      	push	{r7}
  40660e:	b085      	sub	sp, #20
  406610:	af00      	add	r7, sp, #0
  406612:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  406614:	4b27      	ldr	r3, [pc, #156]	; (4066b4 <prvInsertBlockIntoFreeList+0xa8>)
  406616:	60fb      	str	r3, [r7, #12]
  406618:	e002      	b.n	406620 <prvInsertBlockIntoFreeList+0x14>
  40661a:	68fb      	ldr	r3, [r7, #12]
  40661c:	681b      	ldr	r3, [r3, #0]
  40661e:	60fb      	str	r3, [r7, #12]
  406620:	68fb      	ldr	r3, [r7, #12]
  406622:	681a      	ldr	r2, [r3, #0]
  406624:	687b      	ldr	r3, [r7, #4]
  406626:	429a      	cmp	r2, r3
  406628:	d3f7      	bcc.n	40661a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  40662a:	68fb      	ldr	r3, [r7, #12]
  40662c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  40662e:	68fb      	ldr	r3, [r7, #12]
  406630:	685b      	ldr	r3, [r3, #4]
  406632:	68ba      	ldr	r2, [r7, #8]
  406634:	441a      	add	r2, r3
  406636:	687b      	ldr	r3, [r7, #4]
  406638:	429a      	cmp	r2, r3
  40663a:	d108      	bne.n	40664e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  40663c:	68fb      	ldr	r3, [r7, #12]
  40663e:	685a      	ldr	r2, [r3, #4]
  406640:	687b      	ldr	r3, [r7, #4]
  406642:	685b      	ldr	r3, [r3, #4]
  406644:	441a      	add	r2, r3
  406646:	68fb      	ldr	r3, [r7, #12]
  406648:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  40664a:	68fb      	ldr	r3, [r7, #12]
  40664c:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  40664e:	687b      	ldr	r3, [r7, #4]
  406650:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  406652:	687b      	ldr	r3, [r7, #4]
  406654:	685b      	ldr	r3, [r3, #4]
  406656:	68ba      	ldr	r2, [r7, #8]
  406658:	441a      	add	r2, r3
  40665a:	68fb      	ldr	r3, [r7, #12]
  40665c:	681b      	ldr	r3, [r3, #0]
  40665e:	429a      	cmp	r2, r3
  406660:	d118      	bne.n	406694 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  406662:	68fb      	ldr	r3, [r7, #12]
  406664:	681a      	ldr	r2, [r3, #0]
  406666:	4b14      	ldr	r3, [pc, #80]	; (4066b8 <prvInsertBlockIntoFreeList+0xac>)
  406668:	681b      	ldr	r3, [r3, #0]
  40666a:	429a      	cmp	r2, r3
  40666c:	d00d      	beq.n	40668a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  40666e:	687b      	ldr	r3, [r7, #4]
  406670:	685a      	ldr	r2, [r3, #4]
  406672:	68fb      	ldr	r3, [r7, #12]
  406674:	681b      	ldr	r3, [r3, #0]
  406676:	685b      	ldr	r3, [r3, #4]
  406678:	441a      	add	r2, r3
  40667a:	687b      	ldr	r3, [r7, #4]
  40667c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  40667e:	68fb      	ldr	r3, [r7, #12]
  406680:	681b      	ldr	r3, [r3, #0]
  406682:	681a      	ldr	r2, [r3, #0]
  406684:	687b      	ldr	r3, [r7, #4]
  406686:	601a      	str	r2, [r3, #0]
  406688:	e008      	b.n	40669c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  40668a:	4b0b      	ldr	r3, [pc, #44]	; (4066b8 <prvInsertBlockIntoFreeList+0xac>)
  40668c:	681a      	ldr	r2, [r3, #0]
  40668e:	687b      	ldr	r3, [r7, #4]
  406690:	601a      	str	r2, [r3, #0]
  406692:	e003      	b.n	40669c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  406694:	68fb      	ldr	r3, [r7, #12]
  406696:	681a      	ldr	r2, [r3, #0]
  406698:	687b      	ldr	r3, [r7, #4]
  40669a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  40669c:	68fa      	ldr	r2, [r7, #12]
  40669e:	687b      	ldr	r3, [r7, #4]
  4066a0:	429a      	cmp	r2, r3
  4066a2:	d002      	beq.n	4066aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4066a4:	68fb      	ldr	r3, [r7, #12]
  4066a6:	687a      	ldr	r2, [r7, #4]
  4066a8:	601a      	str	r2, [r3, #0]
	}
}
  4066aa:	3714      	adds	r7, #20
  4066ac:	46bd      	mov	sp, r7
  4066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066b2:	4770      	bx	lr
  4066b4:	20014cc0 	.word	0x20014cc0
  4066b8:	20014cc8 	.word	0x20014cc8

004066bc <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  4066bc:	b580      	push	{r7, lr}
  4066be:	b082      	sub	sp, #8
  4066c0:	af00      	add	r7, sp, #0
  4066c2:	6078      	str	r0, [r7, #4]
  4066c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  4066c6:	687b      	ldr	r3, [r7, #4]
  4066c8:	2b00      	cmp	r3, #0
  4066ca:	d103      	bne.n	4066d4 <xQueueGenericReset+0x18>
  4066cc:	4b27      	ldr	r3, [pc, #156]	; (40676c <xQueueGenericReset+0xb0>)
  4066ce:	4798      	blx	r3
  4066d0:	bf00      	nop
  4066d2:	e7fd      	b.n	4066d0 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  4066d4:	4b26      	ldr	r3, [pc, #152]	; (406770 <xQueueGenericReset+0xb4>)
  4066d6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4066d8:	687b      	ldr	r3, [r7, #4]
  4066da:	681a      	ldr	r2, [r3, #0]
  4066dc:	687b      	ldr	r3, [r7, #4]
  4066de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4066e0:	6879      	ldr	r1, [r7, #4]
  4066e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
  4066e4:	fb01 f303 	mul.w	r3, r1, r3
  4066e8:	441a      	add	r2, r3
  4066ea:	687b      	ldr	r3, [r7, #4]
  4066ec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  4066ee:	687b      	ldr	r3, [r7, #4]
  4066f0:	2200      	movs	r2, #0
  4066f2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4066f4:	687b      	ldr	r3, [r7, #4]
  4066f6:	681a      	ldr	r2, [r3, #0]
  4066f8:	687b      	ldr	r3, [r7, #4]
  4066fa:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  4066fc:	687b      	ldr	r3, [r7, #4]
  4066fe:	681a      	ldr	r2, [r3, #0]
  406700:	687b      	ldr	r3, [r7, #4]
  406702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  406704:	3b01      	subs	r3, #1
  406706:	6879      	ldr	r1, [r7, #4]
  406708:	6c09      	ldr	r1, [r1, #64]	; 0x40
  40670a:	fb01 f303 	mul.w	r3, r1, r3
  40670e:	441a      	add	r2, r3
  406710:	687b      	ldr	r3, [r7, #4]
  406712:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  406714:	687b      	ldr	r3, [r7, #4]
  406716:	f04f 32ff 	mov.w	r2, #4294967295
  40671a:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  40671c:	687b      	ldr	r3, [r7, #4]
  40671e:	f04f 32ff 	mov.w	r2, #4294967295
  406722:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  406724:	683b      	ldr	r3, [r7, #0]
  406726:	2b00      	cmp	r3, #0
  406728:	d10e      	bne.n	406748 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40672a:	687b      	ldr	r3, [r7, #4]
  40672c:	691b      	ldr	r3, [r3, #16]
  40672e:	2b00      	cmp	r3, #0
  406730:	d014      	beq.n	40675c <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  406732:	687b      	ldr	r3, [r7, #4]
  406734:	3310      	adds	r3, #16
  406736:	4618      	mov	r0, r3
  406738:	4b0e      	ldr	r3, [pc, #56]	; (406774 <xQueueGenericReset+0xb8>)
  40673a:	4798      	blx	r3
  40673c:	4603      	mov	r3, r0
  40673e:	2b01      	cmp	r3, #1
  406740:	d10c      	bne.n	40675c <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  406742:	4b0d      	ldr	r3, [pc, #52]	; (406778 <xQueueGenericReset+0xbc>)
  406744:	4798      	blx	r3
  406746:	e009      	b.n	40675c <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  406748:	687b      	ldr	r3, [r7, #4]
  40674a:	3310      	adds	r3, #16
  40674c:	4618      	mov	r0, r3
  40674e:	4b0b      	ldr	r3, [pc, #44]	; (40677c <xQueueGenericReset+0xc0>)
  406750:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  406752:	687b      	ldr	r3, [r7, #4]
  406754:	3324      	adds	r3, #36	; 0x24
  406756:	4618      	mov	r0, r3
  406758:	4b08      	ldr	r3, [pc, #32]	; (40677c <xQueueGenericReset+0xc0>)
  40675a:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  40675c:	4b08      	ldr	r3, [pc, #32]	; (406780 <xQueueGenericReset+0xc4>)
  40675e:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  406760:	2301      	movs	r3, #1
}
  406762:	4618      	mov	r0, r3
  406764:	3708      	adds	r7, #8
  406766:	46bd      	mov	sp, r7
  406768:	bd80      	pop	{r7, pc}
  40676a:	bf00      	nop
  40676c:	0040636d 	.word	0x0040636d
  406770:	00406329 	.word	0x00406329
  406774:	004075b1 	.word	0x004075b1
  406778:	00406311 	.word	0x00406311
  40677c:	00406039 	.word	0x00406039
  406780:	00406345 	.word	0x00406345

00406784 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  406784:	b580      	push	{r7, lr}
  406786:	b088      	sub	sp, #32
  406788:	af00      	add	r7, sp, #0
  40678a:	60f8      	str	r0, [r7, #12]
  40678c:	60b9      	str	r1, [r7, #8]
  40678e:	4613      	mov	r3, r2
  406790:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  406792:	2300      	movs	r3, #0
  406794:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  406796:	68fb      	ldr	r3, [r7, #12]
  406798:	2b00      	cmp	r3, #0
  40679a:	d02a      	beq.n	4067f2 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  40679c:	2050      	movs	r0, #80	; 0x50
  40679e:	4b1b      	ldr	r3, [pc, #108]	; (40680c <xQueueGenericCreate+0x88>)
  4067a0:	4798      	blx	r3
  4067a2:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  4067a4:	69bb      	ldr	r3, [r7, #24]
  4067a6:	2b00      	cmp	r3, #0
  4067a8:	d023      	beq.n	4067f2 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  4067aa:	68fb      	ldr	r3, [r7, #12]
  4067ac:	68ba      	ldr	r2, [r7, #8]
  4067ae:	fb02 f303 	mul.w	r3, r2, r3
  4067b2:	3301      	adds	r3, #1
  4067b4:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  4067b6:	6978      	ldr	r0, [r7, #20]
  4067b8:	4b14      	ldr	r3, [pc, #80]	; (40680c <xQueueGenericCreate+0x88>)
  4067ba:	4798      	blx	r3
  4067bc:	4602      	mov	r2, r0
  4067be:	69bb      	ldr	r3, [r7, #24]
  4067c0:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  4067c2:	69bb      	ldr	r3, [r7, #24]
  4067c4:	681b      	ldr	r3, [r3, #0]
  4067c6:	2b00      	cmp	r3, #0
  4067c8:	d010      	beq.n	4067ec <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  4067ca:	69bb      	ldr	r3, [r7, #24]
  4067cc:	68fa      	ldr	r2, [r7, #12]
  4067ce:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  4067d0:	69bb      	ldr	r3, [r7, #24]
  4067d2:	68ba      	ldr	r2, [r7, #8]
  4067d4:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  4067d6:	69b8      	ldr	r0, [r7, #24]
  4067d8:	2101      	movs	r1, #1
  4067da:	4b0d      	ldr	r3, [pc, #52]	; (406810 <xQueueGenericCreate+0x8c>)
  4067dc:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  4067de:	69bb      	ldr	r3, [r7, #24]
  4067e0:	79fa      	ldrb	r2, [r7, #7]
  4067e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  4067e6:	69bb      	ldr	r3, [r7, #24]
  4067e8:	61fb      	str	r3, [r7, #28]
  4067ea:	e002      	b.n	4067f2 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  4067ec:	69b8      	ldr	r0, [r7, #24]
  4067ee:	4b09      	ldr	r3, [pc, #36]	; (406814 <xQueueGenericCreate+0x90>)
  4067f0:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  4067f2:	69fb      	ldr	r3, [r7, #28]
  4067f4:	2b00      	cmp	r3, #0
  4067f6:	d103      	bne.n	406800 <xQueueGenericCreate+0x7c>
  4067f8:	4b07      	ldr	r3, [pc, #28]	; (406818 <xQueueGenericCreate+0x94>)
  4067fa:	4798      	blx	r3
  4067fc:	bf00      	nop
  4067fe:	e7fd      	b.n	4067fc <xQueueGenericCreate+0x78>

	return xReturn;
  406800:	69fb      	ldr	r3, [r7, #28]
}
  406802:	4618      	mov	r0, r3
  406804:	3720      	adds	r7, #32
  406806:	46bd      	mov	sp, r7
  406808:	bd80      	pop	{r7, pc}
  40680a:	bf00      	nop
  40680c:	00406421 	.word	0x00406421
  406810:	004066bd 	.word	0x004066bd
  406814:	00406529 	.word	0x00406529
  406818:	0040636d 	.word	0x0040636d

0040681c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  40681c:	b580      	push	{r7, lr}
  40681e:	b088      	sub	sp, #32
  406820:	af00      	add	r7, sp, #0
  406822:	60f8      	str	r0, [r7, #12]
  406824:	60b9      	str	r1, [r7, #8]
  406826:	607a      	str	r2, [r7, #4]
  406828:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  40682a:	2300      	movs	r3, #0
  40682c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  40682e:	68fb      	ldr	r3, [r7, #12]
  406830:	2b00      	cmp	r3, #0
  406832:	d103      	bne.n	40683c <xQueueGenericSend+0x20>
  406834:	4b48      	ldr	r3, [pc, #288]	; (406958 <xQueueGenericSend+0x13c>)
  406836:	4798      	blx	r3
  406838:	bf00      	nop
  40683a:	e7fd      	b.n	406838 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  40683c:	68bb      	ldr	r3, [r7, #8]
  40683e:	2b00      	cmp	r3, #0
  406840:	d103      	bne.n	40684a <xQueueGenericSend+0x2e>
  406842:	68fb      	ldr	r3, [r7, #12]
  406844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406846:	2b00      	cmp	r3, #0
  406848:	d101      	bne.n	40684e <xQueueGenericSend+0x32>
  40684a:	2301      	movs	r3, #1
  40684c:	e000      	b.n	406850 <xQueueGenericSend+0x34>
  40684e:	2300      	movs	r3, #0
  406850:	2b00      	cmp	r3, #0
  406852:	d103      	bne.n	40685c <xQueueGenericSend+0x40>
  406854:	4b40      	ldr	r3, [pc, #256]	; (406958 <xQueueGenericSend+0x13c>)
  406856:	4798      	blx	r3
  406858:	bf00      	nop
  40685a:	e7fd      	b.n	406858 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40685c:	4b3f      	ldr	r3, [pc, #252]	; (40695c <xQueueGenericSend+0x140>)
  40685e:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  406860:	68fb      	ldr	r3, [r7, #12]
  406862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406864:	68fb      	ldr	r3, [r7, #12]
  406866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  406868:	429a      	cmp	r2, r3
  40686a:	d216      	bcs.n	40689a <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40686c:	68f8      	ldr	r0, [r7, #12]
  40686e:	68b9      	ldr	r1, [r7, #8]
  406870:	683a      	ldr	r2, [r7, #0]
  406872:	4b3b      	ldr	r3, [pc, #236]	; (406960 <xQueueGenericSend+0x144>)
  406874:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  406876:	68fb      	ldr	r3, [r7, #12]
  406878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40687a:	2b00      	cmp	r3, #0
  40687c:	d009      	beq.n	406892 <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40687e:	68fb      	ldr	r3, [r7, #12]
  406880:	3324      	adds	r3, #36	; 0x24
  406882:	4618      	mov	r0, r3
  406884:	4b37      	ldr	r3, [pc, #220]	; (406964 <xQueueGenericSend+0x148>)
  406886:	4798      	blx	r3
  406888:	4603      	mov	r3, r0
  40688a:	2b01      	cmp	r3, #1
  40688c:	d101      	bne.n	406892 <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  40688e:	4b36      	ldr	r3, [pc, #216]	; (406968 <xQueueGenericSend+0x14c>)
  406890:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  406892:	4b36      	ldr	r3, [pc, #216]	; (40696c <xQueueGenericSend+0x150>)
  406894:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  406896:	2301      	movs	r3, #1
  406898:	e059      	b.n	40694e <xQueueGenericSend+0x132>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  40689a:	687b      	ldr	r3, [r7, #4]
  40689c:	2b00      	cmp	r3, #0
  40689e:	d103      	bne.n	4068a8 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4068a0:	4b32      	ldr	r3, [pc, #200]	; (40696c <xQueueGenericSend+0x150>)
  4068a2:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4068a4:	2300      	movs	r3, #0
  4068a6:	e052      	b.n	40694e <xQueueGenericSend+0x132>
				}
				else if( xEntryTimeSet == pdFALSE )
  4068a8:	69fb      	ldr	r3, [r7, #28]
  4068aa:	2b00      	cmp	r3, #0
  4068ac:	d106      	bne.n	4068bc <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4068ae:	f107 0314 	add.w	r3, r7, #20
  4068b2:	4618      	mov	r0, r3
  4068b4:	4b2e      	ldr	r3, [pc, #184]	; (406970 <xQueueGenericSend+0x154>)
  4068b6:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  4068b8:	2301      	movs	r3, #1
  4068ba:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  4068bc:	4b2b      	ldr	r3, [pc, #172]	; (40696c <xQueueGenericSend+0x150>)
  4068be:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4068c0:	4b2c      	ldr	r3, [pc, #176]	; (406974 <xQueueGenericSend+0x158>)
  4068c2:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4068c4:	4b25      	ldr	r3, [pc, #148]	; (40695c <xQueueGenericSend+0x140>)
  4068c6:	4798      	blx	r3
  4068c8:	68fb      	ldr	r3, [r7, #12]
  4068ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4068cc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4068d0:	d102      	bne.n	4068d8 <xQueueGenericSend+0xbc>
  4068d2:	68fb      	ldr	r3, [r7, #12]
  4068d4:	2200      	movs	r2, #0
  4068d6:	645a      	str	r2, [r3, #68]	; 0x44
  4068d8:	68fb      	ldr	r3, [r7, #12]
  4068da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4068dc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4068e0:	d102      	bne.n	4068e8 <xQueueGenericSend+0xcc>
  4068e2:	68fb      	ldr	r3, [r7, #12]
  4068e4:	2200      	movs	r2, #0
  4068e6:	649a      	str	r2, [r3, #72]	; 0x48
  4068e8:	4b20      	ldr	r3, [pc, #128]	; (40696c <xQueueGenericSend+0x150>)
  4068ea:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4068ec:	f107 0214 	add.w	r2, r7, #20
  4068f0:	1d3b      	adds	r3, r7, #4
  4068f2:	4610      	mov	r0, r2
  4068f4:	4619      	mov	r1, r3
  4068f6:	4b20      	ldr	r3, [pc, #128]	; (406978 <xQueueGenericSend+0x15c>)
  4068f8:	4798      	blx	r3
  4068fa:	4603      	mov	r3, r0
  4068fc:	2b00      	cmp	r3, #0
  4068fe:	d11e      	bne.n	40693e <xQueueGenericSend+0x122>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  406900:	68f8      	ldr	r0, [r7, #12]
  406902:	4b1e      	ldr	r3, [pc, #120]	; (40697c <xQueueGenericSend+0x160>)
  406904:	4798      	blx	r3
  406906:	4603      	mov	r3, r0
  406908:	2b00      	cmp	r3, #0
  40690a:	d012      	beq.n	406932 <xQueueGenericSend+0x116>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40690c:	68fb      	ldr	r3, [r7, #12]
  40690e:	f103 0210 	add.w	r2, r3, #16
  406912:	687b      	ldr	r3, [r7, #4]
  406914:	4610      	mov	r0, r2
  406916:	4619      	mov	r1, r3
  406918:	4b19      	ldr	r3, [pc, #100]	; (406980 <xQueueGenericSend+0x164>)
  40691a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  40691c:	68f8      	ldr	r0, [r7, #12]
  40691e:	4b19      	ldr	r3, [pc, #100]	; (406984 <xQueueGenericSend+0x168>)
  406920:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  406922:	4b19      	ldr	r3, [pc, #100]	; (406988 <xQueueGenericSend+0x16c>)
  406924:	4798      	blx	r3
  406926:	4603      	mov	r3, r0
  406928:	2b00      	cmp	r3, #0
  40692a:	d10f      	bne.n	40694c <xQueueGenericSend+0x130>
				{
					portYIELD_WITHIN_API();
  40692c:	4b0e      	ldr	r3, [pc, #56]	; (406968 <xQueueGenericSend+0x14c>)
  40692e:	4798      	blx	r3
  406930:	e00c      	b.n	40694c <xQueueGenericSend+0x130>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  406932:	68f8      	ldr	r0, [r7, #12]
  406934:	4b13      	ldr	r3, [pc, #76]	; (406984 <xQueueGenericSend+0x168>)
  406936:	4798      	blx	r3
				( void ) xTaskResumeAll();
  406938:	4b13      	ldr	r3, [pc, #76]	; (406988 <xQueueGenericSend+0x16c>)
  40693a:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
  40693c:	e78e      	b.n	40685c <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  40693e:	68f8      	ldr	r0, [r7, #12]
  406940:	4b10      	ldr	r3, [pc, #64]	; (406984 <xQueueGenericSend+0x168>)
  406942:	4798      	blx	r3
			( void ) xTaskResumeAll();
  406944:	4b10      	ldr	r3, [pc, #64]	; (406988 <xQueueGenericSend+0x16c>)
  406946:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  406948:	2300      	movs	r3, #0
  40694a:	e000      	b.n	40694e <xQueueGenericSend+0x132>
		}
	}
  40694c:	e786      	b.n	40685c <xQueueGenericSend+0x40>
}
  40694e:	4618      	mov	r0, r3
  406950:	3720      	adds	r7, #32
  406952:	46bd      	mov	sp, r7
  406954:	bd80      	pop	{r7, pc}
  406956:	bf00      	nop
  406958:	0040636d 	.word	0x0040636d
  40695c:	00406329 	.word	0x00406329
  406960:	00406c21 	.word	0x00406c21
  406964:	004075b1 	.word	0x004075b1
  406968:	00406311 	.word	0x00406311
  40696c:	00406345 	.word	0x00406345
  406970:	0040766d 	.word	0x0040766d
  406974:	0040714d 	.word	0x0040714d
  406978:	004076a5 	.word	0x004076a5
  40697c:	00406e0d 	.word	0x00406e0d
  406980:	004074d1 	.word	0x004074d1
  406984:	00406d31 	.word	0x00406d31
  406988:	00407169 	.word	0x00407169

0040698c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  40698c:	b580      	push	{r7, lr}
  40698e:	b086      	sub	sp, #24
  406990:	af00      	add	r7, sp, #0
  406992:	60f8      	str	r0, [r7, #12]
  406994:	60b9      	str	r1, [r7, #8]
  406996:	607a      	str	r2, [r7, #4]
  406998:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  40699a:	68fb      	ldr	r3, [r7, #12]
  40699c:	2b00      	cmp	r3, #0
  40699e:	d103      	bne.n	4069a8 <xQueueGenericSendFromISR+0x1c>
  4069a0:	4b25      	ldr	r3, [pc, #148]	; (406a38 <xQueueGenericSendFromISR+0xac>)
  4069a2:	4798      	blx	r3
  4069a4:	bf00      	nop
  4069a6:	e7fd      	b.n	4069a4 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  4069a8:	68bb      	ldr	r3, [r7, #8]
  4069aa:	2b00      	cmp	r3, #0
  4069ac:	d103      	bne.n	4069b6 <xQueueGenericSendFromISR+0x2a>
  4069ae:	68fb      	ldr	r3, [r7, #12]
  4069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4069b2:	2b00      	cmp	r3, #0
  4069b4:	d101      	bne.n	4069ba <xQueueGenericSendFromISR+0x2e>
  4069b6:	2301      	movs	r3, #1
  4069b8:	e000      	b.n	4069bc <xQueueGenericSendFromISR+0x30>
  4069ba:	2300      	movs	r3, #0
  4069bc:	2b00      	cmp	r3, #0
  4069be:	d103      	bne.n	4069c8 <xQueueGenericSendFromISR+0x3c>
  4069c0:	4b1d      	ldr	r3, [pc, #116]	; (406a38 <xQueueGenericSendFromISR+0xac>)
  4069c2:	4798      	blx	r3
  4069c4:	bf00      	nop
  4069c6:	e7fd      	b.n	4069c4 <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  4069c8:	4b1b      	ldr	r3, [pc, #108]	; (406a38 <xQueueGenericSendFromISR+0xac>)
  4069ca:	4798      	blx	r3
  4069cc:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4069ce:	68fb      	ldr	r3, [r7, #12]
  4069d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4069d2:	68fb      	ldr	r3, [r7, #12]
  4069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4069d6:	429a      	cmp	r2, r3
  4069d8:	d224      	bcs.n	406a24 <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4069da:	68f8      	ldr	r0, [r7, #12]
  4069dc:	68b9      	ldr	r1, [r7, #8]
  4069de:	683a      	ldr	r2, [r7, #0]
  4069e0:	4b16      	ldr	r3, [pc, #88]	; (406a3c <xQueueGenericSendFromISR+0xb0>)
  4069e2:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4069e4:	68fb      	ldr	r3, [r7, #12]
  4069e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4069ec:	d112      	bne.n	406a14 <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4069ee:	68fb      	ldr	r3, [r7, #12]
  4069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4069f2:	2b00      	cmp	r3, #0
  4069f4:	d013      	beq.n	406a1e <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4069f6:	68fb      	ldr	r3, [r7, #12]
  4069f8:	3324      	adds	r3, #36	; 0x24
  4069fa:	4618      	mov	r0, r3
  4069fc:	4b10      	ldr	r3, [pc, #64]	; (406a40 <xQueueGenericSendFromISR+0xb4>)
  4069fe:	4798      	blx	r3
  406a00:	4603      	mov	r3, r0
  406a02:	2b00      	cmp	r3, #0
  406a04:	d00b      	beq.n	406a1e <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  406a06:	687b      	ldr	r3, [r7, #4]
  406a08:	2b00      	cmp	r3, #0
  406a0a:	d008      	beq.n	406a1e <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  406a0c:	687b      	ldr	r3, [r7, #4]
  406a0e:	2201      	movs	r2, #1
  406a10:	601a      	str	r2, [r3, #0]
  406a12:	e004      	b.n	406a1e <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  406a14:	68fb      	ldr	r3, [r7, #12]
  406a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406a18:	1c5a      	adds	r2, r3, #1
  406a1a:	68fb      	ldr	r3, [r7, #12]
  406a1c:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  406a1e:	2301      	movs	r3, #1
  406a20:	617b      	str	r3, [r7, #20]
  406a22:	e001      	b.n	406a28 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  406a24:	2300      	movs	r3, #0
  406a26:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  406a28:	6938      	ldr	r0, [r7, #16]
  406a2a:	4b06      	ldr	r3, [pc, #24]	; (406a44 <xQueueGenericSendFromISR+0xb8>)
  406a2c:	4798      	blx	r3

	return xReturn;
  406a2e:	697b      	ldr	r3, [r7, #20]
}
  406a30:	4618      	mov	r0, r3
  406a32:	3718      	adds	r7, #24
  406a34:	46bd      	mov	sp, r7
  406a36:	bd80      	pop	{r7, pc}
  406a38:	0040636d 	.word	0x0040636d
  406a3c:	00406c21 	.word	0x00406c21
  406a40:	004075b1 	.word	0x004075b1
  406a44:	00406381 	.word	0x00406381

00406a48 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  406a48:	b580      	push	{r7, lr}
  406a4a:	b088      	sub	sp, #32
  406a4c:	af00      	add	r7, sp, #0
  406a4e:	60f8      	str	r0, [r7, #12]
  406a50:	60b9      	str	r1, [r7, #8]
  406a52:	607a      	str	r2, [r7, #4]
  406a54:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  406a56:	2300      	movs	r3, #0
  406a58:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  406a5a:	68fb      	ldr	r3, [r7, #12]
  406a5c:	2b00      	cmp	r3, #0
  406a5e:	d103      	bne.n	406a68 <xQueueGenericReceive+0x20>
  406a60:	4b60      	ldr	r3, [pc, #384]	; (406be4 <xQueueGenericReceive+0x19c>)
  406a62:	4798      	blx	r3
  406a64:	bf00      	nop
  406a66:	e7fd      	b.n	406a64 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  406a68:	68bb      	ldr	r3, [r7, #8]
  406a6a:	2b00      	cmp	r3, #0
  406a6c:	d103      	bne.n	406a76 <xQueueGenericReceive+0x2e>
  406a6e:	68fb      	ldr	r3, [r7, #12]
  406a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406a72:	2b00      	cmp	r3, #0
  406a74:	d101      	bne.n	406a7a <xQueueGenericReceive+0x32>
  406a76:	2301      	movs	r3, #1
  406a78:	e000      	b.n	406a7c <xQueueGenericReceive+0x34>
  406a7a:	2300      	movs	r3, #0
  406a7c:	2b00      	cmp	r3, #0
  406a7e:	d103      	bne.n	406a88 <xQueueGenericReceive+0x40>
  406a80:	4b58      	ldr	r3, [pc, #352]	; (406be4 <xQueueGenericReceive+0x19c>)
  406a82:	4798      	blx	r3
  406a84:	bf00      	nop
  406a86:	e7fd      	b.n	406a84 <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  406a88:	4b57      	ldr	r3, [pc, #348]	; (406be8 <xQueueGenericReceive+0x1a0>)
  406a8a:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  406a8c:	68fb      	ldr	r3, [r7, #12]
  406a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406a90:	2b00      	cmp	r3, #0
  406a92:	d03b      	beq.n	406b0c <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  406a94:	68fb      	ldr	r3, [r7, #12]
  406a96:	68db      	ldr	r3, [r3, #12]
  406a98:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  406a9a:	68f8      	ldr	r0, [r7, #12]
  406a9c:	68b9      	ldr	r1, [r7, #8]
  406a9e:	4b53      	ldr	r3, [pc, #332]	; (406bec <xQueueGenericReceive+0x1a4>)
  406aa0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  406aa2:	683b      	ldr	r3, [r7, #0]
  406aa4:	2b00      	cmp	r3, #0
  406aa6:	d11c      	bne.n	406ae2 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  406aa8:	68fb      	ldr	r3, [r7, #12]
  406aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406aac:	1e5a      	subs	r2, r3, #1
  406aae:	68fb      	ldr	r3, [r7, #12]
  406ab0:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  406ab2:	68fb      	ldr	r3, [r7, #12]
  406ab4:	681b      	ldr	r3, [r3, #0]
  406ab6:	2b00      	cmp	r3, #0
  406ab8:	d104      	bne.n	406ac4 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  406aba:	4b4d      	ldr	r3, [pc, #308]	; (406bf0 <xQueueGenericReceive+0x1a8>)
  406abc:	4798      	blx	r3
  406abe:	4602      	mov	r2, r0
  406ac0:	68fb      	ldr	r3, [r7, #12]
  406ac2:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  406ac4:	68fb      	ldr	r3, [r7, #12]
  406ac6:	691b      	ldr	r3, [r3, #16]
  406ac8:	2b00      	cmp	r3, #0
  406aca:	d01b      	beq.n	406b04 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  406acc:	68fb      	ldr	r3, [r7, #12]
  406ace:	3310      	adds	r3, #16
  406ad0:	4618      	mov	r0, r3
  406ad2:	4b48      	ldr	r3, [pc, #288]	; (406bf4 <xQueueGenericReceive+0x1ac>)
  406ad4:	4798      	blx	r3
  406ad6:	4603      	mov	r3, r0
  406ad8:	2b01      	cmp	r3, #1
  406ada:	d113      	bne.n	406b04 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  406adc:	4b46      	ldr	r3, [pc, #280]	; (406bf8 <xQueueGenericReceive+0x1b0>)
  406ade:	4798      	blx	r3
  406ae0:	e010      	b.n	406b04 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  406ae2:	68fb      	ldr	r3, [r7, #12]
  406ae4:	69ba      	ldr	r2, [r7, #24]
  406ae6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  406ae8:	68fb      	ldr	r3, [r7, #12]
  406aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406aec:	2b00      	cmp	r3, #0
  406aee:	d009      	beq.n	406b04 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  406af0:	68fb      	ldr	r3, [r7, #12]
  406af2:	3324      	adds	r3, #36	; 0x24
  406af4:	4618      	mov	r0, r3
  406af6:	4b3f      	ldr	r3, [pc, #252]	; (406bf4 <xQueueGenericReceive+0x1ac>)
  406af8:	4798      	blx	r3
  406afa:	4603      	mov	r3, r0
  406afc:	2b00      	cmp	r3, #0
  406afe:	d001      	beq.n	406b04 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  406b00:	4b3d      	ldr	r3, [pc, #244]	; (406bf8 <xQueueGenericReceive+0x1b0>)
  406b02:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  406b04:	4b3d      	ldr	r3, [pc, #244]	; (406bfc <xQueueGenericReceive+0x1b4>)
  406b06:	4798      	blx	r3
				return pdPASS;
  406b08:	2301      	movs	r3, #1
  406b0a:	e066      	b.n	406bda <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  406b0c:	687b      	ldr	r3, [r7, #4]
  406b0e:	2b00      	cmp	r3, #0
  406b10:	d103      	bne.n	406b1a <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  406b12:	4b3a      	ldr	r3, [pc, #232]	; (406bfc <xQueueGenericReceive+0x1b4>)
  406b14:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  406b16:	2300      	movs	r3, #0
  406b18:	e05f      	b.n	406bda <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
  406b1a:	69fb      	ldr	r3, [r7, #28]
  406b1c:	2b00      	cmp	r3, #0
  406b1e:	d106      	bne.n	406b2e <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  406b20:	f107 0310 	add.w	r3, r7, #16
  406b24:	4618      	mov	r0, r3
  406b26:	4b36      	ldr	r3, [pc, #216]	; (406c00 <xQueueGenericReceive+0x1b8>)
  406b28:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  406b2a:	2301      	movs	r3, #1
  406b2c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  406b2e:	4b33      	ldr	r3, [pc, #204]	; (406bfc <xQueueGenericReceive+0x1b4>)
  406b30:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  406b32:	4b34      	ldr	r3, [pc, #208]	; (406c04 <xQueueGenericReceive+0x1bc>)
  406b34:	4798      	blx	r3
		prvLockQueue( pxQueue );
  406b36:	4b2c      	ldr	r3, [pc, #176]	; (406be8 <xQueueGenericReceive+0x1a0>)
  406b38:	4798      	blx	r3
  406b3a:	68fb      	ldr	r3, [r7, #12]
  406b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
  406b42:	d102      	bne.n	406b4a <xQueueGenericReceive+0x102>
  406b44:	68fb      	ldr	r3, [r7, #12]
  406b46:	2200      	movs	r2, #0
  406b48:	645a      	str	r2, [r3, #68]	; 0x44
  406b4a:	68fb      	ldr	r3, [r7, #12]
  406b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
  406b52:	d102      	bne.n	406b5a <xQueueGenericReceive+0x112>
  406b54:	68fb      	ldr	r3, [r7, #12]
  406b56:	2200      	movs	r2, #0
  406b58:	649a      	str	r2, [r3, #72]	; 0x48
  406b5a:	4b28      	ldr	r3, [pc, #160]	; (406bfc <xQueueGenericReceive+0x1b4>)
  406b5c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  406b5e:	f107 0210 	add.w	r2, r7, #16
  406b62:	1d3b      	adds	r3, r7, #4
  406b64:	4610      	mov	r0, r2
  406b66:	4619      	mov	r1, r3
  406b68:	4b27      	ldr	r3, [pc, #156]	; (406c08 <xQueueGenericReceive+0x1c0>)
  406b6a:	4798      	blx	r3
  406b6c:	4603      	mov	r3, r0
  406b6e:	2b00      	cmp	r3, #0
  406b70:	d12b      	bne.n	406bca <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  406b72:	68f8      	ldr	r0, [r7, #12]
  406b74:	4b25      	ldr	r3, [pc, #148]	; (406c0c <xQueueGenericReceive+0x1c4>)
  406b76:	4798      	blx	r3
  406b78:	4603      	mov	r3, r0
  406b7a:	2b00      	cmp	r3, #0
  406b7c:	d01f      	beq.n	406bbe <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  406b7e:	68fb      	ldr	r3, [r7, #12]
  406b80:	681b      	ldr	r3, [r3, #0]
  406b82:	2b00      	cmp	r3, #0
  406b84:	d108      	bne.n	406b98 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  406b86:	4b18      	ldr	r3, [pc, #96]	; (406be8 <xQueueGenericReceive+0x1a0>)
  406b88:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  406b8a:	68fb      	ldr	r3, [r7, #12]
  406b8c:	685b      	ldr	r3, [r3, #4]
  406b8e:	4618      	mov	r0, r3
  406b90:	4b1f      	ldr	r3, [pc, #124]	; (406c10 <xQueueGenericReceive+0x1c8>)
  406b92:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  406b94:	4b19      	ldr	r3, [pc, #100]	; (406bfc <xQueueGenericReceive+0x1b4>)
  406b96:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  406b98:	68fb      	ldr	r3, [r7, #12]
  406b9a:	f103 0224 	add.w	r2, r3, #36	; 0x24
  406b9e:	687b      	ldr	r3, [r7, #4]
  406ba0:	4610      	mov	r0, r2
  406ba2:	4619      	mov	r1, r3
  406ba4:	4b1b      	ldr	r3, [pc, #108]	; (406c14 <xQueueGenericReceive+0x1cc>)
  406ba6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  406ba8:	68f8      	ldr	r0, [r7, #12]
  406baa:	4b1b      	ldr	r3, [pc, #108]	; (406c18 <xQueueGenericReceive+0x1d0>)
  406bac:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  406bae:	4b1b      	ldr	r3, [pc, #108]	; (406c1c <xQueueGenericReceive+0x1d4>)
  406bb0:	4798      	blx	r3
  406bb2:	4603      	mov	r3, r0
  406bb4:	2b00      	cmp	r3, #0
  406bb6:	d10f      	bne.n	406bd8 <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
  406bb8:	4b0f      	ldr	r3, [pc, #60]	; (406bf8 <xQueueGenericReceive+0x1b0>)
  406bba:	4798      	blx	r3
  406bbc:	e00c      	b.n	406bd8 <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  406bbe:	68f8      	ldr	r0, [r7, #12]
  406bc0:	4b15      	ldr	r3, [pc, #84]	; (406c18 <xQueueGenericReceive+0x1d0>)
  406bc2:	4798      	blx	r3
				( void ) xTaskResumeAll();
  406bc4:	4b15      	ldr	r3, [pc, #84]	; (406c1c <xQueueGenericReceive+0x1d4>)
  406bc6:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
  406bc8:	e75e      	b.n	406a88 <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  406bca:	68f8      	ldr	r0, [r7, #12]
  406bcc:	4b12      	ldr	r3, [pc, #72]	; (406c18 <xQueueGenericReceive+0x1d0>)
  406bce:	4798      	blx	r3
			( void ) xTaskResumeAll();
  406bd0:	4b12      	ldr	r3, [pc, #72]	; (406c1c <xQueueGenericReceive+0x1d4>)
  406bd2:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  406bd4:	2300      	movs	r3, #0
  406bd6:	e000      	b.n	406bda <xQueueGenericReceive+0x192>
		}
	}
  406bd8:	e756      	b.n	406a88 <xQueueGenericReceive+0x40>
}
  406bda:	4618      	mov	r0, r3
  406bdc:	3720      	adds	r7, #32
  406bde:	46bd      	mov	sp, r7
  406be0:	bd80      	pop	{r7, pc}
  406be2:	bf00      	nop
  406be4:	0040636d 	.word	0x0040636d
  406be8:	00406329 	.word	0x00406329
  406bec:	00406ce1 	.word	0x00406ce1
  406bf0:	00407a1d 	.word	0x00407a1d
  406bf4:	004075b1 	.word	0x004075b1
  406bf8:	00406311 	.word	0x00406311
  406bfc:	00406345 	.word	0x00406345
  406c00:	0040766d 	.word	0x0040766d
  406c04:	0040714d 	.word	0x0040714d
  406c08:	004076a5 	.word	0x004076a5
  406c0c:	00406dd9 	.word	0x00406dd9
  406c10:	00407a79 	.word	0x00407a79
  406c14:	004074d1 	.word	0x004074d1
  406c18:	00406d31 	.word	0x00406d31
  406c1c:	00407169 	.word	0x00407169

00406c20 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  406c20:	b580      	push	{r7, lr}
  406c22:	b084      	sub	sp, #16
  406c24:	af00      	add	r7, sp, #0
  406c26:	60f8      	str	r0, [r7, #12]
  406c28:	60b9      	str	r1, [r7, #8]
  406c2a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  406c2c:	68fb      	ldr	r3, [r7, #12]
  406c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406c30:	2b00      	cmp	r3, #0
  406c32:	d10c      	bne.n	406c4e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  406c34:	68fb      	ldr	r3, [r7, #12]
  406c36:	681b      	ldr	r3, [r3, #0]
  406c38:	2b00      	cmp	r3, #0
  406c3a:	d145      	bne.n	406cc8 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  406c3c:	68fb      	ldr	r3, [r7, #12]
  406c3e:	685b      	ldr	r3, [r3, #4]
  406c40:	4618      	mov	r0, r3
  406c42:	4b25      	ldr	r3, [pc, #148]	; (406cd8 <prvCopyDataToQueue+0xb8>)
  406c44:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  406c46:	68fb      	ldr	r3, [r7, #12]
  406c48:	2200      	movs	r2, #0
  406c4a:	605a      	str	r2, [r3, #4]
  406c4c:	e03c      	b.n	406cc8 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  406c4e:	687b      	ldr	r3, [r7, #4]
  406c50:	2b00      	cmp	r3, #0
  406c52:	d11a      	bne.n	406c8a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  406c54:	68fb      	ldr	r3, [r7, #12]
  406c56:	689a      	ldr	r2, [r3, #8]
  406c58:	68fb      	ldr	r3, [r7, #12]
  406c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406c5c:	4610      	mov	r0, r2
  406c5e:	68b9      	ldr	r1, [r7, #8]
  406c60:	461a      	mov	r2, r3
  406c62:	4b1e      	ldr	r3, [pc, #120]	; (406cdc <prvCopyDataToQueue+0xbc>)
  406c64:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  406c66:	68fb      	ldr	r3, [r7, #12]
  406c68:	689a      	ldr	r2, [r3, #8]
  406c6a:	68fb      	ldr	r3, [r7, #12]
  406c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406c6e:	441a      	add	r2, r3
  406c70:	68fb      	ldr	r3, [r7, #12]
  406c72:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  406c74:	68fb      	ldr	r3, [r7, #12]
  406c76:	689a      	ldr	r2, [r3, #8]
  406c78:	68fb      	ldr	r3, [r7, #12]
  406c7a:	685b      	ldr	r3, [r3, #4]
  406c7c:	429a      	cmp	r2, r3
  406c7e:	d323      	bcc.n	406cc8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  406c80:	68fb      	ldr	r3, [r7, #12]
  406c82:	681a      	ldr	r2, [r3, #0]
  406c84:	68fb      	ldr	r3, [r7, #12]
  406c86:	609a      	str	r2, [r3, #8]
  406c88:	e01e      	b.n	406cc8 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  406c8a:	68fb      	ldr	r3, [r7, #12]
  406c8c:	68da      	ldr	r2, [r3, #12]
  406c8e:	68fb      	ldr	r3, [r7, #12]
  406c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406c92:	4610      	mov	r0, r2
  406c94:	68b9      	ldr	r1, [r7, #8]
  406c96:	461a      	mov	r2, r3
  406c98:	4b10      	ldr	r3, [pc, #64]	; (406cdc <prvCopyDataToQueue+0xbc>)
  406c9a:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  406c9c:	68fb      	ldr	r3, [r7, #12]
  406c9e:	68da      	ldr	r2, [r3, #12]
  406ca0:	68fb      	ldr	r3, [r7, #12]
  406ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406ca4:	425b      	negs	r3, r3
  406ca6:	441a      	add	r2, r3
  406ca8:	68fb      	ldr	r3, [r7, #12]
  406caa:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  406cac:	68fb      	ldr	r3, [r7, #12]
  406cae:	68da      	ldr	r2, [r3, #12]
  406cb0:	68fb      	ldr	r3, [r7, #12]
  406cb2:	681b      	ldr	r3, [r3, #0]
  406cb4:	429a      	cmp	r2, r3
  406cb6:	d207      	bcs.n	406cc8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  406cb8:	68fb      	ldr	r3, [r7, #12]
  406cba:	685a      	ldr	r2, [r3, #4]
  406cbc:	68fb      	ldr	r3, [r7, #12]
  406cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406cc0:	425b      	negs	r3, r3
  406cc2:	441a      	add	r2, r3
  406cc4:	68fb      	ldr	r3, [r7, #12]
  406cc6:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  406cc8:	68fb      	ldr	r3, [r7, #12]
  406cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406ccc:	1c5a      	adds	r2, r3, #1
  406cce:	68fb      	ldr	r3, [r7, #12]
  406cd0:	639a      	str	r2, [r3, #56]	; 0x38
}
  406cd2:	3710      	adds	r7, #16
  406cd4:	46bd      	mov	sp, r7
  406cd6:	bd80      	pop	{r7, pc}
  406cd8:	00407b29 	.word	0x00407b29
  406cdc:	0040a3bd 	.word	0x0040a3bd

00406ce0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  406ce0:	b580      	push	{r7, lr}
  406ce2:	b082      	sub	sp, #8
  406ce4:	af00      	add	r7, sp, #0
  406ce6:	6078      	str	r0, [r7, #4]
  406ce8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  406cea:	687b      	ldr	r3, [r7, #4]
  406cec:	681b      	ldr	r3, [r3, #0]
  406cee:	2b00      	cmp	r3, #0
  406cf0:	d019      	beq.n	406d26 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  406cf2:	687b      	ldr	r3, [r7, #4]
  406cf4:	68da      	ldr	r2, [r3, #12]
  406cf6:	687b      	ldr	r3, [r7, #4]
  406cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406cfa:	441a      	add	r2, r3
  406cfc:	687b      	ldr	r3, [r7, #4]
  406cfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  406d00:	687b      	ldr	r3, [r7, #4]
  406d02:	68da      	ldr	r2, [r3, #12]
  406d04:	687b      	ldr	r3, [r7, #4]
  406d06:	685b      	ldr	r3, [r3, #4]
  406d08:	429a      	cmp	r2, r3
  406d0a:	d303      	bcc.n	406d14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  406d0c:	687b      	ldr	r3, [r7, #4]
  406d0e:	681a      	ldr	r2, [r3, #0]
  406d10:	687b      	ldr	r3, [r7, #4]
  406d12:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  406d14:	687b      	ldr	r3, [r7, #4]
  406d16:	68da      	ldr	r2, [r3, #12]
  406d18:	687b      	ldr	r3, [r7, #4]
  406d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406d1c:	6838      	ldr	r0, [r7, #0]
  406d1e:	4611      	mov	r1, r2
  406d20:	461a      	mov	r2, r3
  406d22:	4b02      	ldr	r3, [pc, #8]	; (406d2c <prvCopyDataFromQueue+0x4c>)
  406d24:	4798      	blx	r3
	}
}
  406d26:	3708      	adds	r7, #8
  406d28:	46bd      	mov	sp, r7
  406d2a:	bd80      	pop	{r7, pc}
  406d2c:	0040a3bd 	.word	0x0040a3bd

00406d30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  406d30:	b580      	push	{r7, lr}
  406d32:	b082      	sub	sp, #8
  406d34:	af00      	add	r7, sp, #0
  406d36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  406d38:	4b23      	ldr	r3, [pc, #140]	; (406dc8 <prvUnlockQueue+0x98>)
  406d3a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  406d3c:	e014      	b.n	406d68 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  406d3e:	687b      	ldr	r3, [r7, #4]
  406d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406d42:	2b00      	cmp	r3, #0
  406d44:	d00f      	beq.n	406d66 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  406d46:	687b      	ldr	r3, [r7, #4]
  406d48:	3324      	adds	r3, #36	; 0x24
  406d4a:	4618      	mov	r0, r3
  406d4c:	4b1f      	ldr	r3, [pc, #124]	; (406dcc <prvUnlockQueue+0x9c>)
  406d4e:	4798      	blx	r3
  406d50:	4603      	mov	r3, r0
  406d52:	2b00      	cmp	r3, #0
  406d54:	d001      	beq.n	406d5a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  406d56:	4b1e      	ldr	r3, [pc, #120]	; (406dd0 <prvUnlockQueue+0xa0>)
  406d58:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  406d5a:	687b      	ldr	r3, [r7, #4]
  406d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406d5e:	1e5a      	subs	r2, r3, #1
  406d60:	687b      	ldr	r3, [r7, #4]
  406d62:	649a      	str	r2, [r3, #72]	; 0x48
  406d64:	e000      	b.n	406d68 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
  406d66:	e003      	b.n	406d70 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  406d68:	687b      	ldr	r3, [r7, #4]
  406d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406d6c:	2b00      	cmp	r3, #0
  406d6e:	dce6      	bgt.n	406d3e <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  406d70:	687b      	ldr	r3, [r7, #4]
  406d72:	f04f 32ff 	mov.w	r2, #4294967295
  406d76:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  406d78:	4b16      	ldr	r3, [pc, #88]	; (406dd4 <prvUnlockQueue+0xa4>)
  406d7a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  406d7c:	4b12      	ldr	r3, [pc, #72]	; (406dc8 <prvUnlockQueue+0x98>)
  406d7e:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  406d80:	e014      	b.n	406dac <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  406d82:	687b      	ldr	r3, [r7, #4]
  406d84:	691b      	ldr	r3, [r3, #16]
  406d86:	2b00      	cmp	r3, #0
  406d88:	d00f      	beq.n	406daa <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  406d8a:	687b      	ldr	r3, [r7, #4]
  406d8c:	3310      	adds	r3, #16
  406d8e:	4618      	mov	r0, r3
  406d90:	4b0e      	ldr	r3, [pc, #56]	; (406dcc <prvUnlockQueue+0x9c>)
  406d92:	4798      	blx	r3
  406d94:	4603      	mov	r3, r0
  406d96:	2b00      	cmp	r3, #0
  406d98:	d001      	beq.n	406d9e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  406d9a:	4b0d      	ldr	r3, [pc, #52]	; (406dd0 <prvUnlockQueue+0xa0>)
  406d9c:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  406d9e:	687b      	ldr	r3, [r7, #4]
  406da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406da2:	1e5a      	subs	r2, r3, #1
  406da4:	687b      	ldr	r3, [r7, #4]
  406da6:	645a      	str	r2, [r3, #68]	; 0x44
  406da8:	e000      	b.n	406dac <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
  406daa:	e003      	b.n	406db4 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  406dac:	687b      	ldr	r3, [r7, #4]
  406dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406db0:	2b00      	cmp	r3, #0
  406db2:	dce6      	bgt.n	406d82 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  406db4:	687b      	ldr	r3, [r7, #4]
  406db6:	f04f 32ff 	mov.w	r2, #4294967295
  406dba:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  406dbc:	4b05      	ldr	r3, [pc, #20]	; (406dd4 <prvUnlockQueue+0xa4>)
  406dbe:	4798      	blx	r3
}
  406dc0:	3708      	adds	r7, #8
  406dc2:	46bd      	mov	sp, r7
  406dc4:	bd80      	pop	{r7, pc}
  406dc6:	bf00      	nop
  406dc8:	00406329 	.word	0x00406329
  406dcc:	004075b1 	.word	0x004075b1
  406dd0:	00407759 	.word	0x00407759
  406dd4:	00406345 	.word	0x00406345

00406dd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  406dd8:	b580      	push	{r7, lr}
  406dda:	b084      	sub	sp, #16
  406ddc:	af00      	add	r7, sp, #0
  406dde:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  406de0:	4b08      	ldr	r3, [pc, #32]	; (406e04 <prvIsQueueEmpty+0x2c>)
  406de2:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  406de4:	687b      	ldr	r3, [r7, #4]
  406de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406de8:	2b00      	cmp	r3, #0
  406dea:	bf14      	ite	ne
  406dec:	2300      	movne	r3, #0
  406dee:	2301      	moveq	r3, #1
  406df0:	b2db      	uxtb	r3, r3
  406df2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  406df4:	4b04      	ldr	r3, [pc, #16]	; (406e08 <prvIsQueueEmpty+0x30>)
  406df6:	4798      	blx	r3

	return xReturn;
  406df8:	68fb      	ldr	r3, [r7, #12]
}
  406dfa:	4618      	mov	r0, r3
  406dfc:	3710      	adds	r7, #16
  406dfe:	46bd      	mov	sp, r7
  406e00:	bd80      	pop	{r7, pc}
  406e02:	bf00      	nop
  406e04:	00406329 	.word	0x00406329
  406e08:	00406345 	.word	0x00406345

00406e0c <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  406e0c:	b580      	push	{r7, lr}
  406e0e:	b084      	sub	sp, #16
  406e10:	af00      	add	r7, sp, #0
  406e12:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  406e14:	4b09      	ldr	r3, [pc, #36]	; (406e3c <prvIsQueueFull+0x30>)
  406e16:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  406e18:	687b      	ldr	r3, [r7, #4]
  406e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406e1c:	687b      	ldr	r3, [r7, #4]
  406e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  406e20:	429a      	cmp	r2, r3
  406e22:	bf14      	ite	ne
  406e24:	2300      	movne	r3, #0
  406e26:	2301      	moveq	r3, #1
  406e28:	b2db      	uxtb	r3, r3
  406e2a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  406e2c:	4b04      	ldr	r3, [pc, #16]	; (406e40 <prvIsQueueFull+0x34>)
  406e2e:	4798      	blx	r3

	return xReturn;
  406e30:	68fb      	ldr	r3, [r7, #12]
}
  406e32:	4618      	mov	r0, r3
  406e34:	3710      	adds	r7, #16
  406e36:	46bd      	mov	sp, r7
  406e38:	bd80      	pop	{r7, pc}
  406e3a:	bf00      	nop
  406e3c:	00406329 	.word	0x00406329
  406e40:	00406345 	.word	0x00406345

00406e44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  406e44:	b580      	push	{r7, lr}
  406e46:	b082      	sub	sp, #8
  406e48:	af00      	add	r7, sp, #0
  406e4a:	6078      	str	r0, [r7, #4]
  406e4c:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  406e4e:	4b12      	ldr	r3, [pc, #72]	; (406e98 <vQueueWaitForMessageRestricted+0x54>)
  406e50:	4798      	blx	r3
  406e52:	687b      	ldr	r3, [r7, #4]
  406e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  406e56:	f1b3 3fff 	cmp.w	r3, #4294967295
  406e5a:	d102      	bne.n	406e62 <vQueueWaitForMessageRestricted+0x1e>
  406e5c:	687b      	ldr	r3, [r7, #4]
  406e5e:	2200      	movs	r2, #0
  406e60:	645a      	str	r2, [r3, #68]	; 0x44
  406e62:	687b      	ldr	r3, [r7, #4]
  406e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  406e66:	f1b3 3fff 	cmp.w	r3, #4294967295
  406e6a:	d102      	bne.n	406e72 <vQueueWaitForMessageRestricted+0x2e>
  406e6c:	687b      	ldr	r3, [r7, #4]
  406e6e:	2200      	movs	r2, #0
  406e70:	649a      	str	r2, [r3, #72]	; 0x48
  406e72:	4b0a      	ldr	r3, [pc, #40]	; (406e9c <vQueueWaitForMessageRestricted+0x58>)
  406e74:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  406e76:	687b      	ldr	r3, [r7, #4]
  406e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406e7a:	2b00      	cmp	r3, #0
  406e7c:	d105      	bne.n	406e8a <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  406e7e:	687b      	ldr	r3, [r7, #4]
  406e80:	3324      	adds	r3, #36	; 0x24
  406e82:	4618      	mov	r0, r3
  406e84:	6839      	ldr	r1, [r7, #0]
  406e86:	4b06      	ldr	r3, [pc, #24]	; (406ea0 <vQueueWaitForMessageRestricted+0x5c>)
  406e88:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  406e8a:	6878      	ldr	r0, [r7, #4]
  406e8c:	4b05      	ldr	r3, [pc, #20]	; (406ea4 <vQueueWaitForMessageRestricted+0x60>)
  406e8e:	4798      	blx	r3
	}
  406e90:	3708      	adds	r7, #8
  406e92:	46bd      	mov	sp, r7
  406e94:	bd80      	pop	{r7, pc}
  406e96:	bf00      	nop
  406e98:	00406329 	.word	0x00406329
  406e9c:	00406345 	.word	0x00406345
  406ea0:	00407551 	.word	0x00407551
  406ea4:	00406d31 	.word	0x00406d31

00406ea8 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  406ea8:	b590      	push	{r4, r7, lr}
  406eaa:	b08b      	sub	sp, #44	; 0x2c
  406eac:	af02      	add	r7, sp, #8
  406eae:	60f8      	str	r0, [r7, #12]
  406eb0:	60b9      	str	r1, [r7, #8]
  406eb2:	603b      	str	r3, [r7, #0]
  406eb4:	4613      	mov	r3, r2
  406eb6:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  406eb8:	68fb      	ldr	r3, [r7, #12]
  406eba:	2b00      	cmp	r3, #0
  406ebc:	d103      	bne.n	406ec6 <xTaskGenericCreate+0x1e>
  406ebe:	4b5a      	ldr	r3, [pc, #360]	; (407028 <xTaskGenericCreate+0x180>)
  406ec0:	4798      	blx	r3
  406ec2:	bf00      	nop
  406ec4:	e7fd      	b.n	406ec2 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  406ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406ec8:	2b0e      	cmp	r3, #14
  406eca:	d903      	bls.n	406ed4 <xTaskGenericCreate+0x2c>
  406ecc:	4b56      	ldr	r3, [pc, #344]	; (407028 <xTaskGenericCreate+0x180>)
  406ece:	4798      	blx	r3
  406ed0:	bf00      	nop
  406ed2:	e7fd      	b.n	406ed0 <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  406ed4:	88fb      	ldrh	r3, [r7, #6]
  406ed6:	4618      	mov	r0, r3
  406ed8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  406eda:	4b54      	ldr	r3, [pc, #336]	; (40702c <xTaskGenericCreate+0x184>)
  406edc:	4798      	blx	r3
  406ede:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  406ee0:	69bb      	ldr	r3, [r7, #24]
  406ee2:	2b00      	cmp	r3, #0
  406ee4:	f000 8088 	beq.w	406ff8 <xTaskGenericCreate+0x150>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  406ee8:	69bb      	ldr	r3, [r7, #24]
  406eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406eec:	88fb      	ldrh	r3, [r7, #6]
  406eee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  406ef2:	3b01      	subs	r3, #1
  406ef4:	009b      	lsls	r3, r3, #2
  406ef6:	4413      	add	r3, r2
  406ef8:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  406efa:	697b      	ldr	r3, [r7, #20]
  406efc:	f023 0307 	bic.w	r3, r3, #7
  406f00:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  406f02:	697b      	ldr	r3, [r7, #20]
  406f04:	f003 0307 	and.w	r3, r3, #7
  406f08:	2b00      	cmp	r3, #0
  406f0a:	d003      	beq.n	406f14 <xTaskGenericCreate+0x6c>
  406f0c:	4b46      	ldr	r3, [pc, #280]	; (407028 <xTaskGenericCreate+0x180>)
  406f0e:	4798      	blx	r3
  406f10:	bf00      	nop
  406f12:	e7fd      	b.n	406f10 <xTaskGenericCreate+0x68>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  406f14:	88fb      	ldrh	r3, [r7, #6]
  406f16:	9300      	str	r3, [sp, #0]
  406f18:	69b8      	ldr	r0, [r7, #24]
  406f1a:	68b9      	ldr	r1, [r7, #8]
  406f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  406f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  406f20:	4c43      	ldr	r4, [pc, #268]	; (407030 <xTaskGenericCreate+0x188>)
  406f22:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  406f24:	6978      	ldr	r0, [r7, #20]
  406f26:	68f9      	ldr	r1, [r7, #12]
  406f28:	683a      	ldr	r2, [r7, #0]
  406f2a:	4b42      	ldr	r3, [pc, #264]	; (407034 <xTaskGenericCreate+0x18c>)
  406f2c:	4798      	blx	r3
  406f2e:	4602      	mov	r2, r0
  406f30:	69bb      	ldr	r3, [r7, #24]
  406f32:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  406f34:	69bb      	ldr	r3, [r7, #24]
  406f36:	681b      	ldr	r3, [r3, #0]
  406f38:	f003 0307 	and.w	r3, r3, #7
  406f3c:	2b00      	cmp	r3, #0
  406f3e:	d003      	beq.n	406f48 <xTaskGenericCreate+0xa0>
  406f40:	4b39      	ldr	r3, [pc, #228]	; (407028 <xTaskGenericCreate+0x180>)
  406f42:	4798      	blx	r3
  406f44:	bf00      	nop
  406f46:	e7fd      	b.n	406f44 <xTaskGenericCreate+0x9c>

		if( ( void * ) pxCreatedTask != NULL )
  406f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  406f4a:	2b00      	cmp	r3, #0
  406f4c:	d002      	beq.n	406f54 <xTaskGenericCreate+0xac>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  406f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  406f50:	69ba      	ldr	r2, [r7, #24]
  406f52:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  406f54:	4b38      	ldr	r3, [pc, #224]	; (407038 <xTaskGenericCreate+0x190>)
  406f56:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  406f58:	4b38      	ldr	r3, [pc, #224]	; (40703c <xTaskGenericCreate+0x194>)
  406f5a:	681b      	ldr	r3, [r3, #0]
  406f5c:	1c5a      	adds	r2, r3, #1
  406f5e:	4b37      	ldr	r3, [pc, #220]	; (40703c <xTaskGenericCreate+0x194>)
  406f60:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
  406f62:	4b37      	ldr	r3, [pc, #220]	; (407040 <xTaskGenericCreate+0x198>)
  406f64:	681b      	ldr	r3, [r3, #0]
  406f66:	2b00      	cmp	r3, #0
  406f68:	d109      	bne.n	406f7e <xTaskGenericCreate+0xd6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  406f6a:	4b35      	ldr	r3, [pc, #212]	; (407040 <xTaskGenericCreate+0x198>)
  406f6c:	69ba      	ldr	r2, [r7, #24]
  406f6e:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  406f70:	4b32      	ldr	r3, [pc, #200]	; (40703c <xTaskGenericCreate+0x194>)
  406f72:	681b      	ldr	r3, [r3, #0]
  406f74:	2b01      	cmp	r3, #1
  406f76:	d10f      	bne.n	406f98 <xTaskGenericCreate+0xf0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  406f78:	4b32      	ldr	r3, [pc, #200]	; (407044 <xTaskGenericCreate+0x19c>)
  406f7a:	4798      	blx	r3
  406f7c:	e00c      	b.n	406f98 <xTaskGenericCreate+0xf0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  406f7e:	4b32      	ldr	r3, [pc, #200]	; (407048 <xTaskGenericCreate+0x1a0>)
  406f80:	681b      	ldr	r3, [r3, #0]
  406f82:	2b00      	cmp	r3, #0
  406f84:	d108      	bne.n	406f98 <xTaskGenericCreate+0xf0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  406f86:	4b2e      	ldr	r3, [pc, #184]	; (407040 <xTaskGenericCreate+0x198>)
  406f88:	681b      	ldr	r3, [r3, #0]
  406f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406f8e:	429a      	cmp	r2, r3
  406f90:	d802      	bhi.n	406f98 <xTaskGenericCreate+0xf0>
					{
						pxCurrentTCB = pxNewTCB;
  406f92:	4b2b      	ldr	r3, [pc, #172]	; (407040 <xTaskGenericCreate+0x198>)
  406f94:	69ba      	ldr	r2, [r7, #24]
  406f96:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  406f98:	69bb      	ldr	r3, [r7, #24]
  406f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406f9c:	4b2b      	ldr	r3, [pc, #172]	; (40704c <xTaskGenericCreate+0x1a4>)
  406f9e:	681b      	ldr	r3, [r3, #0]
  406fa0:	429a      	cmp	r2, r3
  406fa2:	d903      	bls.n	406fac <xTaskGenericCreate+0x104>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  406fa4:	69bb      	ldr	r3, [r7, #24]
  406fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406fa8:	4b28      	ldr	r3, [pc, #160]	; (40704c <xTaskGenericCreate+0x1a4>)
  406faa:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  406fac:	4b28      	ldr	r3, [pc, #160]	; (407050 <xTaskGenericCreate+0x1a8>)
  406fae:	681a      	ldr	r2, [r3, #0]
  406fb0:	69bb      	ldr	r3, [r7, #24]
  406fb2:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  406fb4:	4b26      	ldr	r3, [pc, #152]	; (407050 <xTaskGenericCreate+0x1a8>)
  406fb6:	681b      	ldr	r3, [r3, #0]
  406fb8:	1c5a      	adds	r2, r3, #1
  406fba:	4b25      	ldr	r3, [pc, #148]	; (407050 <xTaskGenericCreate+0x1a8>)
  406fbc:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  406fbe:	69bb      	ldr	r3, [r7, #24]
  406fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406fc2:	4b24      	ldr	r3, [pc, #144]	; (407054 <xTaskGenericCreate+0x1ac>)
  406fc4:	681b      	ldr	r3, [r3, #0]
  406fc6:	429a      	cmp	r2, r3
  406fc8:	d903      	bls.n	406fd2 <xTaskGenericCreate+0x12a>
  406fca:	69bb      	ldr	r3, [r7, #24]
  406fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406fce:	4b21      	ldr	r3, [pc, #132]	; (407054 <xTaskGenericCreate+0x1ac>)
  406fd0:	601a      	str	r2, [r3, #0]
  406fd2:	69bb      	ldr	r3, [r7, #24]
  406fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406fd6:	4613      	mov	r3, r2
  406fd8:	009b      	lsls	r3, r3, #2
  406fda:	4413      	add	r3, r2
  406fdc:	009b      	lsls	r3, r3, #2
  406fde:	4a1e      	ldr	r2, [pc, #120]	; (407058 <xTaskGenericCreate+0x1b0>)
  406fe0:	441a      	add	r2, r3
  406fe2:	69bb      	ldr	r3, [r7, #24]
  406fe4:	3304      	adds	r3, #4
  406fe6:	4610      	mov	r0, r2
  406fe8:	4619      	mov	r1, r3
  406fea:	4b1c      	ldr	r3, [pc, #112]	; (40705c <xTaskGenericCreate+0x1b4>)
  406fec:	4798      	blx	r3

			xReturn = pdPASS;
  406fee:	2301      	movs	r3, #1
  406ff0:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  406ff2:	4b1b      	ldr	r3, [pc, #108]	; (407060 <xTaskGenericCreate+0x1b8>)
  406ff4:	4798      	blx	r3
  406ff6:	e002      	b.n	406ffe <xTaskGenericCreate+0x156>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  406ff8:	f04f 33ff 	mov.w	r3, #4294967295
  406ffc:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  406ffe:	69fb      	ldr	r3, [r7, #28]
  407000:	2b01      	cmp	r3, #1
  407002:	d10b      	bne.n	40701c <xTaskGenericCreate+0x174>
	{
		if( xSchedulerRunning != pdFALSE )
  407004:	4b10      	ldr	r3, [pc, #64]	; (407048 <xTaskGenericCreate+0x1a0>)
  407006:	681b      	ldr	r3, [r3, #0]
  407008:	2b00      	cmp	r3, #0
  40700a:	d007      	beq.n	40701c <xTaskGenericCreate+0x174>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  40700c:	4b0c      	ldr	r3, [pc, #48]	; (407040 <xTaskGenericCreate+0x198>)
  40700e:	681b      	ldr	r3, [r3, #0]
  407010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  407014:	429a      	cmp	r2, r3
  407016:	d201      	bcs.n	40701c <xTaskGenericCreate+0x174>
			{
				portYIELD_WITHIN_API();
  407018:	4b12      	ldr	r3, [pc, #72]	; (407064 <xTaskGenericCreate+0x1bc>)
  40701a:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  40701c:	69fb      	ldr	r3, [r7, #28]
}
  40701e:	4618      	mov	r0, r3
  407020:	3724      	adds	r7, #36	; 0x24
  407022:	46bd      	mov	sp, r7
  407024:	bd90      	pop	{r4, r7, pc}
  407026:	bf00      	nop
  407028:	0040636d 	.word	0x0040636d
  40702c:	00407989 	.word	0x00407989
  407030:	00407799 	.word	0x00407799
  407034:	00406249 	.word	0x00406249
  407038:	00406329 	.word	0x00406329
  40703c:	20014e6c 	.word	0x20014e6c
  407040:	20014ccc 	.word	0x20014ccc
  407044:	0040780d 	.word	0x0040780d
  407048:	20014e7c 	.word	0x20014e7c
  40704c:	20014e74 	.word	0x20014e74
  407050:	20014e90 	.word	0x20014e90
  407054:	20014e78 	.word	0x20014e78
  407058:	20014cd0 	.word	0x20014cd0
  40705c:	00406091 	.word	0x00406091
  407060:	00406345 	.word	0x00406345
  407064:	00406311 	.word	0x00406311

00407068 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  407068:	b580      	push	{r7, lr}
  40706a:	b084      	sub	sp, #16
  40706c:	af00      	add	r7, sp, #0
  40706e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  407070:	2300      	movs	r3, #0
  407072:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  407074:	687b      	ldr	r3, [r7, #4]
  407076:	2b00      	cmp	r3, #0
  407078:	d012      	beq.n	4070a0 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  40707a:	4b0d      	ldr	r3, [pc, #52]	; (4070b0 <vTaskDelay+0x48>)
  40707c:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  40707e:	4b0d      	ldr	r3, [pc, #52]	; (4070b4 <vTaskDelay+0x4c>)
  407080:	681a      	ldr	r2, [r3, #0]
  407082:	687b      	ldr	r3, [r7, #4]
  407084:	4413      	add	r3, r2
  407086:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  407088:	4b0b      	ldr	r3, [pc, #44]	; (4070b8 <vTaskDelay+0x50>)
  40708a:	681b      	ldr	r3, [r3, #0]
  40708c:	3304      	adds	r3, #4
  40708e:	4618      	mov	r0, r3
  407090:	4b0a      	ldr	r3, [pc, #40]	; (4070bc <vTaskDelay+0x54>)
  407092:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  407094:	68b8      	ldr	r0, [r7, #8]
  407096:	4b0a      	ldr	r3, [pc, #40]	; (4070c0 <vTaskDelay+0x58>)
  407098:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  40709a:	4b0a      	ldr	r3, [pc, #40]	; (4070c4 <vTaskDelay+0x5c>)
  40709c:	4798      	blx	r3
  40709e:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  4070a0:	68fb      	ldr	r3, [r7, #12]
  4070a2:	2b00      	cmp	r3, #0
  4070a4:	d101      	bne.n	4070aa <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  4070a6:	4b08      	ldr	r3, [pc, #32]	; (4070c8 <vTaskDelay+0x60>)
  4070a8:	4798      	blx	r3
		}
	}
  4070aa:	3710      	adds	r7, #16
  4070ac:	46bd      	mov	sp, r7
  4070ae:	bd80      	pop	{r7, pc}
  4070b0:	0040714d 	.word	0x0040714d
  4070b4:	20014e70 	.word	0x20014e70
  4070b8:	20014ccc 	.word	0x20014ccc
  4070bc:	00406151 	.word	0x00406151
  4070c0:	00407919 	.word	0x00407919
  4070c4:	00407169 	.word	0x00407169
  4070c8:	00406311 	.word	0x00406311

004070cc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  4070cc:	b590      	push	{r4, r7, lr}
  4070ce:	b087      	sub	sp, #28
  4070d0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  4070d2:	2300      	movs	r3, #0
  4070d4:	9300      	str	r3, [sp, #0]
  4070d6:	2300      	movs	r3, #0
  4070d8:	9301      	str	r3, [sp, #4]
  4070da:	2300      	movs	r3, #0
  4070dc:	9302      	str	r3, [sp, #8]
  4070de:	2300      	movs	r3, #0
  4070e0:	9303      	str	r3, [sp, #12]
  4070e2:	4812      	ldr	r0, [pc, #72]	; (40712c <vTaskStartScheduler+0x60>)
  4070e4:	4912      	ldr	r1, [pc, #72]	; (407130 <vTaskStartScheduler+0x64>)
  4070e6:	2282      	movs	r2, #130	; 0x82
  4070e8:	2300      	movs	r3, #0
  4070ea:	4c12      	ldr	r4, [pc, #72]	; (407134 <vTaskStartScheduler+0x68>)
  4070ec:	47a0      	blx	r4
  4070ee:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4070f0:	687b      	ldr	r3, [r7, #4]
  4070f2:	2b01      	cmp	r3, #1
  4070f4:	d102      	bne.n	4070fc <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  4070f6:	4b10      	ldr	r3, [pc, #64]	; (407138 <vTaskStartScheduler+0x6c>)
  4070f8:	4798      	blx	r3
  4070fa:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  4070fc:	687b      	ldr	r3, [r7, #4]
  4070fe:	2b01      	cmp	r3, #1
  407100:	d109      	bne.n	407116 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  407102:	4b0e      	ldr	r3, [pc, #56]	; (40713c <vTaskStartScheduler+0x70>)
  407104:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  407106:	4b0e      	ldr	r3, [pc, #56]	; (407140 <vTaskStartScheduler+0x74>)
  407108:	2201      	movs	r2, #1
  40710a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  40710c:	4b0d      	ldr	r3, [pc, #52]	; (407144 <vTaskStartScheduler+0x78>)
  40710e:	2200      	movs	r2, #0
  407110:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  407112:	4b0d      	ldr	r3, [pc, #52]	; (407148 <vTaskStartScheduler+0x7c>)
  407114:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  407116:	687b      	ldr	r3, [r7, #4]
  407118:	2b00      	cmp	r3, #0
  40711a:	d103      	bne.n	407124 <vTaskStartScheduler+0x58>
  40711c:	4b07      	ldr	r3, [pc, #28]	; (40713c <vTaskStartScheduler+0x70>)
  40711e:	4798      	blx	r3
  407120:	bf00      	nop
  407122:	e7fd      	b.n	407120 <vTaskStartScheduler+0x54>
}
  407124:	370c      	adds	r7, #12
  407126:	46bd      	mov	sp, r7
  407128:	bd90      	pop	{r4, r7, pc}
  40712a:	bf00      	nop
  40712c:	00407771 	.word	0x00407771
  407130:	00413630 	.word	0x00413630
  407134:	00406ea9 	.word	0x00406ea9
  407138:	00407bad 	.word	0x00407bad
  40713c:	0040636d 	.word	0x0040636d
  407140:	20014e7c 	.word	0x20014e7c
  407144:	20014e70 	.word	0x20014e70
  407148:	004062d1 	.word	0x004062d1

0040714c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  40714c:	b480      	push	{r7}
  40714e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  407150:	4b04      	ldr	r3, [pc, #16]	; (407164 <vTaskSuspendAll+0x18>)
  407152:	681b      	ldr	r3, [r3, #0]
  407154:	1c5a      	adds	r2, r3, #1
  407156:	4b03      	ldr	r3, [pc, #12]	; (407164 <vTaskSuspendAll+0x18>)
  407158:	601a      	str	r2, [r3, #0]
}
  40715a:	46bd      	mov	sp, r7
  40715c:	f85d 7b04 	ldr.w	r7, [sp], #4
  407160:	4770      	bx	lr
  407162:	bf00      	nop
  407164:	20014e80 	.word	0x20014e80

00407168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  407168:	b590      	push	{r4, r7, lr}
  40716a:	b083      	sub	sp, #12
  40716c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40716e:	2300      	movs	r3, #0
  407170:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  407172:	4b36      	ldr	r3, [pc, #216]	; (40724c <xTaskResumeAll+0xe4>)
  407174:	681b      	ldr	r3, [r3, #0]
  407176:	2b00      	cmp	r3, #0
  407178:	d103      	bne.n	407182 <xTaskResumeAll+0x1a>
  40717a:	4b35      	ldr	r3, [pc, #212]	; (407250 <xTaskResumeAll+0xe8>)
  40717c:	4798      	blx	r3
  40717e:	bf00      	nop
  407180:	e7fd      	b.n	40717e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  407182:	4b34      	ldr	r3, [pc, #208]	; (407254 <xTaskResumeAll+0xec>)
  407184:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  407186:	4b31      	ldr	r3, [pc, #196]	; (40724c <xTaskResumeAll+0xe4>)
  407188:	681b      	ldr	r3, [r3, #0]
  40718a:	1e5a      	subs	r2, r3, #1
  40718c:	4b2f      	ldr	r3, [pc, #188]	; (40724c <xTaskResumeAll+0xe4>)
  40718e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  407190:	4b2e      	ldr	r3, [pc, #184]	; (40724c <xTaskResumeAll+0xe4>)
  407192:	681b      	ldr	r3, [r3, #0]
  407194:	2b00      	cmp	r3, #0
  407196:	d152      	bne.n	40723e <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  407198:	4b2f      	ldr	r3, [pc, #188]	; (407258 <xTaskResumeAll+0xf0>)
  40719a:	681b      	ldr	r3, [r3, #0]
  40719c:	2b00      	cmp	r3, #0
  40719e:	d04e      	beq.n	40723e <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  4071a0:	2300      	movs	r3, #0
  4071a2:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4071a4:	e027      	b.n	4071f6 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  4071a6:	4b2d      	ldr	r3, [pc, #180]	; (40725c <xTaskResumeAll+0xf4>)
  4071a8:	68db      	ldr	r3, [r3, #12]
  4071aa:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  4071ac:	f104 0318 	add.w	r3, r4, #24
  4071b0:	4618      	mov	r0, r3
  4071b2:	4b2b      	ldr	r3, [pc, #172]	; (407260 <xTaskResumeAll+0xf8>)
  4071b4:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  4071b6:	1d23      	adds	r3, r4, #4
  4071b8:	4618      	mov	r0, r3
  4071ba:	4b29      	ldr	r3, [pc, #164]	; (407260 <xTaskResumeAll+0xf8>)
  4071bc:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  4071be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4071c0:	4b28      	ldr	r3, [pc, #160]	; (407264 <xTaskResumeAll+0xfc>)
  4071c2:	681b      	ldr	r3, [r3, #0]
  4071c4:	429a      	cmp	r2, r3
  4071c6:	d902      	bls.n	4071ce <xTaskResumeAll+0x66>
  4071c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4071ca:	4b26      	ldr	r3, [pc, #152]	; (407264 <xTaskResumeAll+0xfc>)
  4071cc:	601a      	str	r2, [r3, #0]
  4071ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4071d0:	4613      	mov	r3, r2
  4071d2:	009b      	lsls	r3, r3, #2
  4071d4:	4413      	add	r3, r2
  4071d6:	009b      	lsls	r3, r3, #2
  4071d8:	4a23      	ldr	r2, [pc, #140]	; (407268 <xTaskResumeAll+0x100>)
  4071da:	441a      	add	r2, r3
  4071dc:	1d23      	adds	r3, r4, #4
  4071de:	4610      	mov	r0, r2
  4071e0:	4619      	mov	r1, r3
  4071e2:	4b22      	ldr	r3, [pc, #136]	; (40726c <xTaskResumeAll+0x104>)
  4071e4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4071e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4071e8:	4b21      	ldr	r3, [pc, #132]	; (407270 <xTaskResumeAll+0x108>)
  4071ea:	681b      	ldr	r3, [r3, #0]
  4071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4071ee:	429a      	cmp	r2, r3
  4071f0:	d301      	bcc.n	4071f6 <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  4071f2:	2301      	movs	r3, #1
  4071f4:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4071f6:	4b19      	ldr	r3, [pc, #100]	; (40725c <xTaskResumeAll+0xf4>)
  4071f8:	681b      	ldr	r3, [r3, #0]
  4071fa:	2b00      	cmp	r3, #0
  4071fc:	d1d3      	bne.n	4071a6 <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4071fe:	4b1d      	ldr	r3, [pc, #116]	; (407274 <xTaskResumeAll+0x10c>)
  407200:	681b      	ldr	r3, [r3, #0]
  407202:	2b00      	cmp	r3, #0
  407204:	d00d      	beq.n	407222 <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  407206:	e006      	b.n	407216 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  407208:	4b1b      	ldr	r3, [pc, #108]	; (407278 <xTaskResumeAll+0x110>)
  40720a:	4798      	blx	r3
						--uxMissedTicks;
  40720c:	4b19      	ldr	r3, [pc, #100]	; (407274 <xTaskResumeAll+0x10c>)
  40720e:	681b      	ldr	r3, [r3, #0]
  407210:	1e5a      	subs	r2, r3, #1
  407212:	4b18      	ldr	r3, [pc, #96]	; (407274 <xTaskResumeAll+0x10c>)
  407214:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  407216:	4b17      	ldr	r3, [pc, #92]	; (407274 <xTaskResumeAll+0x10c>)
  407218:	681b      	ldr	r3, [r3, #0]
  40721a:	2b00      	cmp	r3, #0
  40721c:	d1f4      	bne.n	407208 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  40721e:	2301      	movs	r3, #1
  407220:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  407222:	683b      	ldr	r3, [r7, #0]
  407224:	2b01      	cmp	r3, #1
  407226:	d003      	beq.n	407230 <xTaskResumeAll+0xc8>
  407228:	4b14      	ldr	r3, [pc, #80]	; (40727c <xTaskResumeAll+0x114>)
  40722a:	681b      	ldr	r3, [r3, #0]
  40722c:	2b01      	cmp	r3, #1
  40722e:	d106      	bne.n	40723e <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  407230:	2301      	movs	r3, #1
  407232:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  407234:	4b11      	ldr	r3, [pc, #68]	; (40727c <xTaskResumeAll+0x114>)
  407236:	2200      	movs	r2, #0
  407238:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  40723a:	4b11      	ldr	r3, [pc, #68]	; (407280 <xTaskResumeAll+0x118>)
  40723c:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  40723e:	4b11      	ldr	r3, [pc, #68]	; (407284 <xTaskResumeAll+0x11c>)
  407240:	4798      	blx	r3

	return xAlreadyYielded;
  407242:	687b      	ldr	r3, [r7, #4]
}
  407244:	4618      	mov	r0, r3
  407246:	370c      	adds	r7, #12
  407248:	46bd      	mov	sp, r7
  40724a:	bd90      	pop	{r4, r7, pc}
  40724c:	20014e80 	.word	0x20014e80
  407250:	0040636d 	.word	0x0040636d
  407254:	00406329 	.word	0x00406329
  407258:	20014e6c 	.word	0x20014e6c
  40725c:	20014e2c 	.word	0x20014e2c
  407260:	00406151 	.word	0x00406151
  407264:	20014e78 	.word	0x20014e78
  407268:	20014cd0 	.word	0x20014cd0
  40726c:	00406091 	.word	0x00406091
  407270:	20014ccc 	.word	0x20014ccc
  407274:	20014e84 	.word	0x20014e84
  407278:	004072e5 	.word	0x004072e5
  40727c:	20014e88 	.word	0x20014e88
  407280:	00406311 	.word	0x00406311
  407284:	00406345 	.word	0x00406345

00407288 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  407288:	b580      	push	{r7, lr}
  40728a:	b082      	sub	sp, #8
  40728c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  40728e:	4b06      	ldr	r3, [pc, #24]	; (4072a8 <xTaskGetTickCount+0x20>)
  407290:	4798      	blx	r3
	{
		xTicks = xTickCount;
  407292:	4b06      	ldr	r3, [pc, #24]	; (4072ac <xTaskGetTickCount+0x24>)
  407294:	681b      	ldr	r3, [r3, #0]
  407296:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  407298:	4b05      	ldr	r3, [pc, #20]	; (4072b0 <xTaskGetTickCount+0x28>)
  40729a:	4798      	blx	r3

	return xTicks;
  40729c:	687b      	ldr	r3, [r7, #4]
}
  40729e:	4618      	mov	r0, r3
  4072a0:	3708      	adds	r7, #8
  4072a2:	46bd      	mov	sp, r7
  4072a4:	bd80      	pop	{r7, pc}
  4072a6:	bf00      	nop
  4072a8:	00406329 	.word	0x00406329
  4072ac:	20014e70 	.word	0x20014e70
  4072b0:	00406345 	.word	0x00406345

004072b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
  4072b4:	b580      	push	{r7, lr}
  4072b6:	b082      	sub	sp, #8
  4072b8:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  4072ba:	4b07      	ldr	r3, [pc, #28]	; (4072d8 <xTaskGetTickCountFromISR+0x24>)
  4072bc:	4798      	blx	r3
  4072be:	6078      	str	r0, [r7, #4]
	xReturn = xTickCount;
  4072c0:	4b06      	ldr	r3, [pc, #24]	; (4072dc <xTaskGetTickCountFromISR+0x28>)
  4072c2:	681b      	ldr	r3, [r3, #0]
  4072c4:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  4072c6:	6878      	ldr	r0, [r7, #4]
  4072c8:	4b05      	ldr	r3, [pc, #20]	; (4072e0 <xTaskGetTickCountFromISR+0x2c>)
  4072ca:	4798      	blx	r3

	return xReturn;
  4072cc:	683b      	ldr	r3, [r7, #0]
}
  4072ce:	4618      	mov	r0, r3
  4072d0:	3708      	adds	r7, #8
  4072d2:	46bd      	mov	sp, r7
  4072d4:	bd80      	pop	{r7, pc}
  4072d6:	bf00      	nop
  4072d8:	0040636d 	.word	0x0040636d
  4072dc:	20014e70 	.word	0x20014e70
  4072e0:	00406381 	.word	0x00406381

004072e4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  4072e4:	b580      	push	{r7, lr}
  4072e6:	b084      	sub	sp, #16
  4072e8:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4072ea:	4b44      	ldr	r3, [pc, #272]	; (4073fc <vTaskIncrementTick+0x118>)
  4072ec:	681b      	ldr	r3, [r3, #0]
  4072ee:	2b00      	cmp	r3, #0
  4072f0:	d17c      	bne.n	4073ec <vTaskIncrementTick+0x108>
	{
		++xTickCount;
  4072f2:	4b43      	ldr	r3, [pc, #268]	; (407400 <vTaskIncrementTick+0x11c>)
  4072f4:	681b      	ldr	r3, [r3, #0]
  4072f6:	1c5a      	adds	r2, r3, #1
  4072f8:	4b41      	ldr	r3, [pc, #260]	; (407400 <vTaskIncrementTick+0x11c>)
  4072fa:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
  4072fc:	4b40      	ldr	r3, [pc, #256]	; (407400 <vTaskIncrementTick+0x11c>)
  4072fe:	681b      	ldr	r3, [r3, #0]
  407300:	2b00      	cmp	r3, #0
  407302:	d12a      	bne.n	40735a <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  407304:	4b3f      	ldr	r3, [pc, #252]	; (407404 <vTaskIncrementTick+0x120>)
  407306:	681b      	ldr	r3, [r3, #0]
  407308:	681b      	ldr	r3, [r3, #0]
  40730a:	2b00      	cmp	r3, #0
  40730c:	d003      	beq.n	407316 <vTaskIncrementTick+0x32>
  40730e:	4b3e      	ldr	r3, [pc, #248]	; (407408 <vTaskIncrementTick+0x124>)
  407310:	4798      	blx	r3
  407312:	bf00      	nop
  407314:	e7fd      	b.n	407312 <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  407316:	4b3b      	ldr	r3, [pc, #236]	; (407404 <vTaskIncrementTick+0x120>)
  407318:	681b      	ldr	r3, [r3, #0]
  40731a:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  40731c:	4b3b      	ldr	r3, [pc, #236]	; (40740c <vTaskIncrementTick+0x128>)
  40731e:	681a      	ldr	r2, [r3, #0]
  407320:	4b38      	ldr	r3, [pc, #224]	; (407404 <vTaskIncrementTick+0x120>)
  407322:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
  407324:	4b39      	ldr	r3, [pc, #228]	; (40740c <vTaskIncrementTick+0x128>)
  407326:	68fa      	ldr	r2, [r7, #12]
  407328:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
  40732a:	4b39      	ldr	r3, [pc, #228]	; (407410 <vTaskIncrementTick+0x12c>)
  40732c:	681b      	ldr	r3, [r3, #0]
  40732e:	1c5a      	adds	r2, r3, #1
  407330:	4b37      	ldr	r3, [pc, #220]	; (407410 <vTaskIncrementTick+0x12c>)
  407332:	601a      	str	r2, [r3, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  407334:	4b33      	ldr	r3, [pc, #204]	; (407404 <vTaskIncrementTick+0x120>)
  407336:	681b      	ldr	r3, [r3, #0]
  407338:	681b      	ldr	r3, [r3, #0]
  40733a:	2b00      	cmp	r3, #0
  40733c:	d104      	bne.n	407348 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  40733e:	4b35      	ldr	r3, [pc, #212]	; (407414 <vTaskIncrementTick+0x130>)
  407340:	f04f 32ff 	mov.w	r2, #4294967295
  407344:	601a      	str	r2, [r3, #0]
  407346:	e008      	b.n	40735a <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  407348:	4b2e      	ldr	r3, [pc, #184]	; (407404 <vTaskIncrementTick+0x120>)
  40734a:	681b      	ldr	r3, [r3, #0]
  40734c:	68db      	ldr	r3, [r3, #12]
  40734e:	68db      	ldr	r3, [r3, #12]
  407350:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  407352:	68bb      	ldr	r3, [r7, #8]
  407354:	685a      	ldr	r2, [r3, #4]
  407356:	4b2f      	ldr	r3, [pc, #188]	; (407414 <vTaskIncrementTick+0x130>)
  407358:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  40735a:	4b29      	ldr	r3, [pc, #164]	; (407400 <vTaskIncrementTick+0x11c>)
  40735c:	681a      	ldr	r2, [r3, #0]
  40735e:	4b2d      	ldr	r3, [pc, #180]	; (407414 <vTaskIncrementTick+0x130>)
  407360:	681b      	ldr	r3, [r3, #0]
  407362:	429a      	cmp	r2, r3
  407364:	d341      	bcc.n	4073ea <vTaskIncrementTick+0x106>
  407366:	4b27      	ldr	r3, [pc, #156]	; (407404 <vTaskIncrementTick+0x120>)
  407368:	681b      	ldr	r3, [r3, #0]
  40736a:	681b      	ldr	r3, [r3, #0]
  40736c:	2b00      	cmp	r3, #0
  40736e:	d104      	bne.n	40737a <vTaskIncrementTick+0x96>
  407370:	4b28      	ldr	r3, [pc, #160]	; (407414 <vTaskIncrementTick+0x130>)
  407372:	f04f 32ff 	mov.w	r2, #4294967295
  407376:	601a      	str	r2, [r3, #0]
  407378:	e037      	b.n	4073ea <vTaskIncrementTick+0x106>
  40737a:	4b22      	ldr	r3, [pc, #136]	; (407404 <vTaskIncrementTick+0x120>)
  40737c:	681b      	ldr	r3, [r3, #0]
  40737e:	68db      	ldr	r3, [r3, #12]
  407380:	68db      	ldr	r3, [r3, #12]
  407382:	60bb      	str	r3, [r7, #8]
  407384:	68bb      	ldr	r3, [r7, #8]
  407386:	685b      	ldr	r3, [r3, #4]
  407388:	607b      	str	r3, [r7, #4]
  40738a:	4b1d      	ldr	r3, [pc, #116]	; (407400 <vTaskIncrementTick+0x11c>)
  40738c:	681a      	ldr	r2, [r3, #0]
  40738e:	687b      	ldr	r3, [r7, #4]
  407390:	429a      	cmp	r2, r3
  407392:	d203      	bcs.n	40739c <vTaskIncrementTick+0xb8>
  407394:	4b1f      	ldr	r3, [pc, #124]	; (407414 <vTaskIncrementTick+0x130>)
  407396:	687a      	ldr	r2, [r7, #4]
  407398:	601a      	str	r2, [r3, #0]
  40739a:	e026      	b.n	4073ea <vTaskIncrementTick+0x106>
  40739c:	68bb      	ldr	r3, [r7, #8]
  40739e:	3304      	adds	r3, #4
  4073a0:	4618      	mov	r0, r3
  4073a2:	4b1d      	ldr	r3, [pc, #116]	; (407418 <vTaskIncrementTick+0x134>)
  4073a4:	4798      	blx	r3
  4073a6:	68bb      	ldr	r3, [r7, #8]
  4073a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4073aa:	2b00      	cmp	r3, #0
  4073ac:	d004      	beq.n	4073b8 <vTaskIncrementTick+0xd4>
  4073ae:	68bb      	ldr	r3, [r7, #8]
  4073b0:	3318      	adds	r3, #24
  4073b2:	4618      	mov	r0, r3
  4073b4:	4b18      	ldr	r3, [pc, #96]	; (407418 <vTaskIncrementTick+0x134>)
  4073b6:	4798      	blx	r3
  4073b8:	68bb      	ldr	r3, [r7, #8]
  4073ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4073bc:	4b17      	ldr	r3, [pc, #92]	; (40741c <vTaskIncrementTick+0x138>)
  4073be:	681b      	ldr	r3, [r3, #0]
  4073c0:	429a      	cmp	r2, r3
  4073c2:	d903      	bls.n	4073cc <vTaskIncrementTick+0xe8>
  4073c4:	68bb      	ldr	r3, [r7, #8]
  4073c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4073c8:	4b14      	ldr	r3, [pc, #80]	; (40741c <vTaskIncrementTick+0x138>)
  4073ca:	601a      	str	r2, [r3, #0]
  4073cc:	68bb      	ldr	r3, [r7, #8]
  4073ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4073d0:	4613      	mov	r3, r2
  4073d2:	009b      	lsls	r3, r3, #2
  4073d4:	4413      	add	r3, r2
  4073d6:	009b      	lsls	r3, r3, #2
  4073d8:	4a11      	ldr	r2, [pc, #68]	; (407420 <vTaskIncrementTick+0x13c>)
  4073da:	441a      	add	r2, r3
  4073dc:	68bb      	ldr	r3, [r7, #8]
  4073de:	3304      	adds	r3, #4
  4073e0:	4610      	mov	r0, r2
  4073e2:	4619      	mov	r1, r3
  4073e4:	4b0f      	ldr	r3, [pc, #60]	; (407424 <vTaskIncrementTick+0x140>)
  4073e6:	4798      	blx	r3
  4073e8:	e7bd      	b.n	407366 <vTaskIncrementTick+0x82>
  4073ea:	e004      	b.n	4073f6 <vTaskIncrementTick+0x112>
	}
	else
	{
		++uxMissedTicks;
  4073ec:	4b0e      	ldr	r3, [pc, #56]	; (407428 <vTaskIncrementTick+0x144>)
  4073ee:	681b      	ldr	r3, [r3, #0]
  4073f0:	1c5a      	adds	r2, r3, #1
  4073f2:	4b0d      	ldr	r3, [pc, #52]	; (407428 <vTaskIncrementTick+0x144>)
  4073f4:	601a      	str	r2, [r3, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  4073f6:	3710      	adds	r7, #16
  4073f8:	46bd      	mov	sp, r7
  4073fa:	bd80      	pop	{r7, pc}
  4073fc:	20014e80 	.word	0x20014e80
  407400:	20014e70 	.word	0x20014e70
  407404:	20014e24 	.word	0x20014e24
  407408:	0040636d 	.word	0x0040636d
  40740c:	20014e28 	.word	0x20014e28
  407410:	20014e8c 	.word	0x20014e8c
  407414:	20000208 	.word	0x20000208
  407418:	00406151 	.word	0x00406151
  40741c:	20014e78 	.word	0x20014e78
  407420:	20014cd0 	.word	0x20014cd0
  407424:	00406091 	.word	0x00406091
  407428:	20014e84 	.word	0x20014e84

0040742c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  40742c:	b580      	push	{r7, lr}
  40742e:	b082      	sub	sp, #8
  407430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  407432:	4b21      	ldr	r3, [pc, #132]	; (4074b8 <vTaskSwitchContext+0x8c>)
  407434:	681b      	ldr	r3, [r3, #0]
  407436:	2b00      	cmp	r3, #0
  407438:	d003      	beq.n	407442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  40743a:	4b20      	ldr	r3, [pc, #128]	; (4074bc <vTaskSwitchContext+0x90>)
  40743c:	2201      	movs	r2, #1
  40743e:	601a      	str	r2, [r3, #0]
  407440:	e036      	b.n	4074b0 <vTaskSwitchContext+0x84>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
  407442:	e00c      	b.n	40745e <vTaskSwitchContext+0x32>
  407444:	4b1e      	ldr	r3, [pc, #120]	; (4074c0 <vTaskSwitchContext+0x94>)
  407446:	681b      	ldr	r3, [r3, #0]
  407448:	2b00      	cmp	r3, #0
  40744a:	d103      	bne.n	407454 <vTaskSwitchContext+0x28>
  40744c:	4b1d      	ldr	r3, [pc, #116]	; (4074c4 <vTaskSwitchContext+0x98>)
  40744e:	4798      	blx	r3
  407450:	bf00      	nop
  407452:	e7fd      	b.n	407450 <vTaskSwitchContext+0x24>
  407454:	4b1a      	ldr	r3, [pc, #104]	; (4074c0 <vTaskSwitchContext+0x94>)
  407456:	681b      	ldr	r3, [r3, #0]
  407458:	1e5a      	subs	r2, r3, #1
  40745a:	4b19      	ldr	r3, [pc, #100]	; (4074c0 <vTaskSwitchContext+0x94>)
  40745c:	601a      	str	r2, [r3, #0]
  40745e:	4b18      	ldr	r3, [pc, #96]	; (4074c0 <vTaskSwitchContext+0x94>)
  407460:	681a      	ldr	r2, [r3, #0]
  407462:	4919      	ldr	r1, [pc, #100]	; (4074c8 <vTaskSwitchContext+0x9c>)
  407464:	4613      	mov	r3, r2
  407466:	009b      	lsls	r3, r3, #2
  407468:	4413      	add	r3, r2
  40746a:	009b      	lsls	r3, r3, #2
  40746c:	440b      	add	r3, r1
  40746e:	681b      	ldr	r3, [r3, #0]
  407470:	2b00      	cmp	r3, #0
  407472:	d0e7      	beq.n	407444 <vTaskSwitchContext+0x18>
  407474:	4b12      	ldr	r3, [pc, #72]	; (4074c0 <vTaskSwitchContext+0x94>)
  407476:	681a      	ldr	r2, [r3, #0]
  407478:	4613      	mov	r3, r2
  40747a:	009b      	lsls	r3, r3, #2
  40747c:	4413      	add	r3, r2
  40747e:	009b      	lsls	r3, r3, #2
  407480:	4a11      	ldr	r2, [pc, #68]	; (4074c8 <vTaskSwitchContext+0x9c>)
  407482:	4413      	add	r3, r2
  407484:	607b      	str	r3, [r7, #4]
  407486:	687b      	ldr	r3, [r7, #4]
  407488:	685b      	ldr	r3, [r3, #4]
  40748a:	685a      	ldr	r2, [r3, #4]
  40748c:	687b      	ldr	r3, [r7, #4]
  40748e:	605a      	str	r2, [r3, #4]
  407490:	687b      	ldr	r3, [r7, #4]
  407492:	685a      	ldr	r2, [r3, #4]
  407494:	687b      	ldr	r3, [r7, #4]
  407496:	3308      	adds	r3, #8
  407498:	429a      	cmp	r2, r3
  40749a:	d104      	bne.n	4074a6 <vTaskSwitchContext+0x7a>
  40749c:	687b      	ldr	r3, [r7, #4]
  40749e:	685b      	ldr	r3, [r3, #4]
  4074a0:	685a      	ldr	r2, [r3, #4]
  4074a2:	687b      	ldr	r3, [r7, #4]
  4074a4:	605a      	str	r2, [r3, #4]
  4074a6:	687b      	ldr	r3, [r7, #4]
  4074a8:	685b      	ldr	r3, [r3, #4]
  4074aa:	68da      	ldr	r2, [r3, #12]
  4074ac:	4b07      	ldr	r3, [pc, #28]	; (4074cc <vTaskSwitchContext+0xa0>)
  4074ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
  4074b0:	3708      	adds	r7, #8
  4074b2:	46bd      	mov	sp, r7
  4074b4:	bd80      	pop	{r7, pc}
  4074b6:	bf00      	nop
  4074b8:	20014e80 	.word	0x20014e80
  4074bc:	20014e88 	.word	0x20014e88
  4074c0:	20014e78 	.word	0x20014e78
  4074c4:	0040636d 	.word	0x0040636d
  4074c8:	20014cd0 	.word	0x20014cd0
  4074cc:	20014ccc 	.word	0x20014ccc

004074d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  4074d0:	b580      	push	{r7, lr}
  4074d2:	b084      	sub	sp, #16
  4074d4:	af00      	add	r7, sp, #0
  4074d6:	6078      	str	r0, [r7, #4]
  4074d8:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  4074da:	687b      	ldr	r3, [r7, #4]
  4074dc:	2b00      	cmp	r3, #0
  4074de:	d103      	bne.n	4074e8 <vTaskPlaceOnEventList+0x18>
  4074e0:	4b13      	ldr	r3, [pc, #76]	; (407530 <vTaskPlaceOnEventList+0x60>)
  4074e2:	4798      	blx	r3
  4074e4:	bf00      	nop
  4074e6:	e7fd      	b.n	4074e4 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4074e8:	4b12      	ldr	r3, [pc, #72]	; (407534 <vTaskPlaceOnEventList+0x64>)
  4074ea:	681b      	ldr	r3, [r3, #0]
  4074ec:	3318      	adds	r3, #24
  4074ee:	6878      	ldr	r0, [r7, #4]
  4074f0:	4619      	mov	r1, r3
  4074f2:	4b11      	ldr	r3, [pc, #68]	; (407538 <vTaskPlaceOnEventList+0x68>)
  4074f4:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4074f6:	4b0f      	ldr	r3, [pc, #60]	; (407534 <vTaskPlaceOnEventList+0x64>)
  4074f8:	681b      	ldr	r3, [r3, #0]
  4074fa:	3304      	adds	r3, #4
  4074fc:	4618      	mov	r0, r3
  4074fe:	4b0f      	ldr	r3, [pc, #60]	; (40753c <vTaskPlaceOnEventList+0x6c>)
  407500:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  407502:	683b      	ldr	r3, [r7, #0]
  407504:	f1b3 3fff 	cmp.w	r3, #4294967295
  407508:	d107      	bne.n	40751a <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40750a:	4b0a      	ldr	r3, [pc, #40]	; (407534 <vTaskPlaceOnEventList+0x64>)
  40750c:	681b      	ldr	r3, [r3, #0]
  40750e:	3304      	adds	r3, #4
  407510:	480b      	ldr	r0, [pc, #44]	; (407540 <vTaskPlaceOnEventList+0x70>)
  407512:	4619      	mov	r1, r3
  407514:	4b0b      	ldr	r3, [pc, #44]	; (407544 <vTaskPlaceOnEventList+0x74>)
  407516:	4798      	blx	r3
  407518:	e007      	b.n	40752a <vTaskPlaceOnEventList+0x5a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
  40751a:	4b0b      	ldr	r3, [pc, #44]	; (407548 <vTaskPlaceOnEventList+0x78>)
  40751c:	681a      	ldr	r2, [r3, #0]
  40751e:	683b      	ldr	r3, [r7, #0]
  407520:	4413      	add	r3, r2
  407522:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  407524:	68f8      	ldr	r0, [r7, #12]
  407526:	4b09      	ldr	r3, [pc, #36]	; (40754c <vTaskPlaceOnEventList+0x7c>)
  407528:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  40752a:	3710      	adds	r7, #16
  40752c:	46bd      	mov	sp, r7
  40752e:	bd80      	pop	{r7, pc}
  407530:	0040636d 	.word	0x0040636d
  407534:	20014ccc 	.word	0x20014ccc
  407538:	004060e1 	.word	0x004060e1
  40753c:	00406151 	.word	0x00406151
  407540:	20014e58 	.word	0x20014e58
  407544:	00406091 	.word	0x00406091
  407548:	20014e70 	.word	0x20014e70
  40754c:	00407919 	.word	0x00407919

00407550 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  407550:	b580      	push	{r7, lr}
  407552:	b084      	sub	sp, #16
  407554:	af00      	add	r7, sp, #0
  407556:	6078      	str	r0, [r7, #4]
  407558:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  40755a:	687b      	ldr	r3, [r7, #4]
  40755c:	2b00      	cmp	r3, #0
  40755e:	d103      	bne.n	407568 <vTaskPlaceOnEventListRestricted+0x18>
  407560:	4b0d      	ldr	r3, [pc, #52]	; (407598 <vTaskPlaceOnEventListRestricted+0x48>)
  407562:	4798      	blx	r3
  407564:	bf00      	nop
  407566:	e7fd      	b.n	407564 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  407568:	4b0c      	ldr	r3, [pc, #48]	; (40759c <vTaskPlaceOnEventListRestricted+0x4c>)
  40756a:	681b      	ldr	r3, [r3, #0]
  40756c:	3318      	adds	r3, #24
  40756e:	6878      	ldr	r0, [r7, #4]
  407570:	4619      	mov	r1, r3
  407572:	4b0b      	ldr	r3, [pc, #44]	; (4075a0 <vTaskPlaceOnEventListRestricted+0x50>)
  407574:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  407576:	4b09      	ldr	r3, [pc, #36]	; (40759c <vTaskPlaceOnEventListRestricted+0x4c>)
  407578:	681b      	ldr	r3, [r3, #0]
  40757a:	3304      	adds	r3, #4
  40757c:	4618      	mov	r0, r3
  40757e:	4b09      	ldr	r3, [pc, #36]	; (4075a4 <vTaskPlaceOnEventListRestricted+0x54>)
  407580:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  407582:	4b09      	ldr	r3, [pc, #36]	; (4075a8 <vTaskPlaceOnEventListRestricted+0x58>)
  407584:	681a      	ldr	r2, [r3, #0]
  407586:	683b      	ldr	r3, [r7, #0]
  407588:	4413      	add	r3, r2
  40758a:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  40758c:	68f8      	ldr	r0, [r7, #12]
  40758e:	4b07      	ldr	r3, [pc, #28]	; (4075ac <vTaskPlaceOnEventListRestricted+0x5c>)
  407590:	4798      	blx	r3
	}
  407592:	3710      	adds	r7, #16
  407594:	46bd      	mov	sp, r7
  407596:	bd80      	pop	{r7, pc}
  407598:	0040636d 	.word	0x0040636d
  40759c:	20014ccc 	.word	0x20014ccc
  4075a0:	00406091 	.word	0x00406091
  4075a4:	00406151 	.word	0x00406151
  4075a8:	20014e70 	.word	0x20014e70
  4075ac:	00407919 	.word	0x00407919

004075b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  4075b0:	b580      	push	{r7, lr}
  4075b2:	b084      	sub	sp, #16
  4075b4:	af00      	add	r7, sp, #0
  4075b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4075b8:	687b      	ldr	r3, [r7, #4]
  4075ba:	68db      	ldr	r3, [r3, #12]
  4075bc:	68db      	ldr	r3, [r3, #12]
  4075be:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  4075c0:	68bb      	ldr	r3, [r7, #8]
  4075c2:	2b00      	cmp	r3, #0
  4075c4:	d103      	bne.n	4075ce <xTaskRemoveFromEventList+0x1e>
  4075c6:	4b21      	ldr	r3, [pc, #132]	; (40764c <xTaskRemoveFromEventList+0x9c>)
  4075c8:	4798      	blx	r3
  4075ca:	bf00      	nop
  4075cc:	e7fd      	b.n	4075ca <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4075ce:	68bb      	ldr	r3, [r7, #8]
  4075d0:	3318      	adds	r3, #24
  4075d2:	4618      	mov	r0, r3
  4075d4:	4b1e      	ldr	r3, [pc, #120]	; (407650 <xTaskRemoveFromEventList+0xa0>)
  4075d6:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4075d8:	4b1e      	ldr	r3, [pc, #120]	; (407654 <xTaskRemoveFromEventList+0xa4>)
  4075da:	681b      	ldr	r3, [r3, #0]
  4075dc:	2b00      	cmp	r3, #0
  4075de:	d11d      	bne.n	40761c <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4075e0:	68bb      	ldr	r3, [r7, #8]
  4075e2:	3304      	adds	r3, #4
  4075e4:	4618      	mov	r0, r3
  4075e6:	4b1a      	ldr	r3, [pc, #104]	; (407650 <xTaskRemoveFromEventList+0xa0>)
  4075e8:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  4075ea:	68bb      	ldr	r3, [r7, #8]
  4075ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4075ee:	4b1a      	ldr	r3, [pc, #104]	; (407658 <xTaskRemoveFromEventList+0xa8>)
  4075f0:	681b      	ldr	r3, [r3, #0]
  4075f2:	429a      	cmp	r2, r3
  4075f4:	d903      	bls.n	4075fe <xTaskRemoveFromEventList+0x4e>
  4075f6:	68bb      	ldr	r3, [r7, #8]
  4075f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4075fa:	4b17      	ldr	r3, [pc, #92]	; (407658 <xTaskRemoveFromEventList+0xa8>)
  4075fc:	601a      	str	r2, [r3, #0]
  4075fe:	68bb      	ldr	r3, [r7, #8]
  407600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407602:	4613      	mov	r3, r2
  407604:	009b      	lsls	r3, r3, #2
  407606:	4413      	add	r3, r2
  407608:	009b      	lsls	r3, r3, #2
  40760a:	4a14      	ldr	r2, [pc, #80]	; (40765c <xTaskRemoveFromEventList+0xac>)
  40760c:	441a      	add	r2, r3
  40760e:	68bb      	ldr	r3, [r7, #8]
  407610:	3304      	adds	r3, #4
  407612:	4610      	mov	r0, r2
  407614:	4619      	mov	r1, r3
  407616:	4b12      	ldr	r3, [pc, #72]	; (407660 <xTaskRemoveFromEventList+0xb0>)
  407618:	4798      	blx	r3
  40761a:	e005      	b.n	407628 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40761c:	68bb      	ldr	r3, [r7, #8]
  40761e:	3318      	adds	r3, #24
  407620:	4810      	ldr	r0, [pc, #64]	; (407664 <xTaskRemoveFromEventList+0xb4>)
  407622:	4619      	mov	r1, r3
  407624:	4b0e      	ldr	r3, [pc, #56]	; (407660 <xTaskRemoveFromEventList+0xb0>)
  407626:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  407628:	68bb      	ldr	r3, [r7, #8]
  40762a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40762c:	4b0e      	ldr	r3, [pc, #56]	; (407668 <xTaskRemoveFromEventList+0xb8>)
  40762e:	681b      	ldr	r3, [r3, #0]
  407630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  407632:	429a      	cmp	r2, r3
  407634:	d302      	bcc.n	40763c <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  407636:	2301      	movs	r3, #1
  407638:	60fb      	str	r3, [r7, #12]
  40763a:	e001      	b.n	407640 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  40763c:	2300      	movs	r3, #0
  40763e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  407640:	68fb      	ldr	r3, [r7, #12]
}
  407642:	4618      	mov	r0, r3
  407644:	3710      	adds	r7, #16
  407646:	46bd      	mov	sp, r7
  407648:	bd80      	pop	{r7, pc}
  40764a:	bf00      	nop
  40764c:	0040636d 	.word	0x0040636d
  407650:	00406151 	.word	0x00406151
  407654:	20014e80 	.word	0x20014e80
  407658:	20014e78 	.word	0x20014e78
  40765c:	20014cd0 	.word	0x20014cd0
  407660:	00406091 	.word	0x00406091
  407664:	20014e2c 	.word	0x20014e2c
  407668:	20014ccc 	.word	0x20014ccc

0040766c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  40766c:	b580      	push	{r7, lr}
  40766e:	b082      	sub	sp, #8
  407670:	af00      	add	r7, sp, #0
  407672:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  407674:	687b      	ldr	r3, [r7, #4]
  407676:	2b00      	cmp	r3, #0
  407678:	d103      	bne.n	407682 <vTaskSetTimeOutState+0x16>
  40767a:	4b07      	ldr	r3, [pc, #28]	; (407698 <vTaskSetTimeOutState+0x2c>)
  40767c:	4798      	blx	r3
  40767e:	bf00      	nop
  407680:	e7fd      	b.n	40767e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  407682:	4b06      	ldr	r3, [pc, #24]	; (40769c <vTaskSetTimeOutState+0x30>)
  407684:	681a      	ldr	r2, [r3, #0]
  407686:	687b      	ldr	r3, [r7, #4]
  407688:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40768a:	4b05      	ldr	r3, [pc, #20]	; (4076a0 <vTaskSetTimeOutState+0x34>)
  40768c:	681a      	ldr	r2, [r3, #0]
  40768e:	687b      	ldr	r3, [r7, #4]
  407690:	605a      	str	r2, [r3, #4]
}
  407692:	3708      	adds	r7, #8
  407694:	46bd      	mov	sp, r7
  407696:	bd80      	pop	{r7, pc}
  407698:	0040636d 	.word	0x0040636d
  40769c:	20014e8c 	.word	0x20014e8c
  4076a0:	20014e70 	.word	0x20014e70

004076a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  4076a4:	b580      	push	{r7, lr}
  4076a6:	b084      	sub	sp, #16
  4076a8:	af00      	add	r7, sp, #0
  4076aa:	6078      	str	r0, [r7, #4]
  4076ac:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  4076ae:	687b      	ldr	r3, [r7, #4]
  4076b0:	2b00      	cmp	r3, #0
  4076b2:	d103      	bne.n	4076bc <xTaskCheckForTimeOut+0x18>
  4076b4:	4b22      	ldr	r3, [pc, #136]	; (407740 <xTaskCheckForTimeOut+0x9c>)
  4076b6:	4798      	blx	r3
  4076b8:	bf00      	nop
  4076ba:	e7fd      	b.n	4076b8 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  4076bc:	683b      	ldr	r3, [r7, #0]
  4076be:	2b00      	cmp	r3, #0
  4076c0:	d103      	bne.n	4076ca <xTaskCheckForTimeOut+0x26>
  4076c2:	4b1f      	ldr	r3, [pc, #124]	; (407740 <xTaskCheckForTimeOut+0x9c>)
  4076c4:	4798      	blx	r3
  4076c6:	bf00      	nop
  4076c8:	e7fd      	b.n	4076c6 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  4076ca:	4b1e      	ldr	r3, [pc, #120]	; (407744 <xTaskCheckForTimeOut+0xa0>)
  4076cc:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4076ce:	683b      	ldr	r3, [r7, #0]
  4076d0:	681b      	ldr	r3, [r3, #0]
  4076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4076d6:	d102      	bne.n	4076de <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  4076d8:	2300      	movs	r3, #0
  4076da:	60fb      	str	r3, [r7, #12]
  4076dc:	e029      	b.n	407732 <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  4076de:	687b      	ldr	r3, [r7, #4]
  4076e0:	681a      	ldr	r2, [r3, #0]
  4076e2:	4b19      	ldr	r3, [pc, #100]	; (407748 <xTaskCheckForTimeOut+0xa4>)
  4076e4:	681b      	ldr	r3, [r3, #0]
  4076e6:	429a      	cmp	r2, r3
  4076e8:	d008      	beq.n	4076fc <xTaskCheckForTimeOut+0x58>
  4076ea:	687b      	ldr	r3, [r7, #4]
  4076ec:	685a      	ldr	r2, [r3, #4]
  4076ee:	4b17      	ldr	r3, [pc, #92]	; (40774c <xTaskCheckForTimeOut+0xa8>)
  4076f0:	681b      	ldr	r3, [r3, #0]
  4076f2:	429a      	cmp	r2, r3
  4076f4:	d802      	bhi.n	4076fc <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  4076f6:	2301      	movs	r3, #1
  4076f8:	60fb      	str	r3, [r7, #12]
  4076fa:	e01a      	b.n	407732 <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  4076fc:	4b13      	ldr	r3, [pc, #76]	; (40774c <xTaskCheckForTimeOut+0xa8>)
  4076fe:	681a      	ldr	r2, [r3, #0]
  407700:	687b      	ldr	r3, [r7, #4]
  407702:	685b      	ldr	r3, [r3, #4]
  407704:	1ad2      	subs	r2, r2, r3
  407706:	683b      	ldr	r3, [r7, #0]
  407708:	681b      	ldr	r3, [r3, #0]
  40770a:	429a      	cmp	r2, r3
  40770c:	d20f      	bcs.n	40772e <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  40770e:	683b      	ldr	r3, [r7, #0]
  407710:	681a      	ldr	r2, [r3, #0]
  407712:	687b      	ldr	r3, [r7, #4]
  407714:	6859      	ldr	r1, [r3, #4]
  407716:	4b0d      	ldr	r3, [pc, #52]	; (40774c <xTaskCheckForTimeOut+0xa8>)
  407718:	681b      	ldr	r3, [r3, #0]
  40771a:	1acb      	subs	r3, r1, r3
  40771c:	441a      	add	r2, r3
  40771e:	683b      	ldr	r3, [r7, #0]
  407720:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  407722:	6878      	ldr	r0, [r7, #4]
  407724:	4b0a      	ldr	r3, [pc, #40]	; (407750 <xTaskCheckForTimeOut+0xac>)
  407726:	4798      	blx	r3
			xReturn = pdFALSE;
  407728:	2300      	movs	r3, #0
  40772a:	60fb      	str	r3, [r7, #12]
  40772c:	e001      	b.n	407732 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  40772e:	2301      	movs	r3, #1
  407730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  407732:	4b08      	ldr	r3, [pc, #32]	; (407754 <xTaskCheckForTimeOut+0xb0>)
  407734:	4798      	blx	r3

	return xReturn;
  407736:	68fb      	ldr	r3, [r7, #12]
}
  407738:	4618      	mov	r0, r3
  40773a:	3710      	adds	r7, #16
  40773c:	46bd      	mov	sp, r7
  40773e:	bd80      	pop	{r7, pc}
  407740:	0040636d 	.word	0x0040636d
  407744:	00406329 	.word	0x00406329
  407748:	20014e8c 	.word	0x20014e8c
  40774c:	20014e70 	.word	0x20014e70
  407750:	0040766d 	.word	0x0040766d
  407754:	00406345 	.word	0x00406345

00407758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  407758:	b480      	push	{r7}
  40775a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  40775c:	4b03      	ldr	r3, [pc, #12]	; (40776c <vTaskMissedYield+0x14>)
  40775e:	2201      	movs	r2, #1
  407760:	601a      	str	r2, [r3, #0]
}
  407762:	46bd      	mov	sp, r7
  407764:	f85d 7b04 	ldr.w	r7, [sp], #4
  407768:	4770      	bx	lr
  40776a:	bf00      	nop
  40776c:	20014e88 	.word	0x20014e88

00407770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  407770:	b580      	push	{r7, lr}
  407772:	b082      	sub	sp, #8
  407774:	af00      	add	r7, sp, #0
  407776:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  407778:	4b04      	ldr	r3, [pc, #16]	; (40778c <prvIdleTask+0x1c>)
  40777a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  40777c:	4b04      	ldr	r3, [pc, #16]	; (407790 <prvIdleTask+0x20>)
  40777e:	681b      	ldr	r3, [r3, #0]
  407780:	2b01      	cmp	r3, #1
  407782:	d902      	bls.n	40778a <prvIdleTask+0x1a>
			{
				taskYIELD();
  407784:	4b03      	ldr	r3, [pc, #12]	; (407794 <prvIdleTask+0x24>)
  407786:	4798      	blx	r3
				}
				xTaskResumeAll();
			}
		}
		#endif
	}
  407788:	e7f6      	b.n	407778 <prvIdleTask+0x8>
  40778a:	e7f5      	b.n	407778 <prvIdleTask+0x8>
  40778c:	0040788d 	.word	0x0040788d
  407790:	20014cd0 	.word	0x20014cd0
  407794:	00406311 	.word	0x00406311

00407798 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  407798:	b580      	push	{r7, lr}
  40779a:	b084      	sub	sp, #16
  40779c:	af00      	add	r7, sp, #0
  40779e:	60f8      	str	r0, [r7, #12]
  4077a0:	60b9      	str	r1, [r7, #8]
  4077a2:	607a      	str	r2, [r7, #4]
  4077a4:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  4077a6:	68fb      	ldr	r3, [r7, #12]
  4077a8:	3334      	adds	r3, #52	; 0x34
  4077aa:	4618      	mov	r0, r3
  4077ac:	68b9      	ldr	r1, [r7, #8]
  4077ae:	220a      	movs	r2, #10
  4077b0:	4b14      	ldr	r3, [pc, #80]	; (407804 <prvInitialiseTCBVariables+0x6c>)
  4077b2:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  4077b4:	68fb      	ldr	r3, [r7, #12]
  4077b6:	2200      	movs	r2, #0
  4077b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  4077bc:	687b      	ldr	r3, [r7, #4]
  4077be:	2b0e      	cmp	r3, #14
  4077c0:	d901      	bls.n	4077c6 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  4077c2:	230e      	movs	r3, #14
  4077c4:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  4077c6:	68fb      	ldr	r3, [r7, #12]
  4077c8:	687a      	ldr	r2, [r7, #4]
  4077ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4077cc:	68fb      	ldr	r3, [r7, #12]
  4077ce:	687a      	ldr	r2, [r7, #4]
  4077d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4077d2:	68fb      	ldr	r3, [r7, #12]
  4077d4:	3304      	adds	r3, #4
  4077d6:	4618      	mov	r0, r3
  4077d8:	4b0b      	ldr	r3, [pc, #44]	; (407808 <prvInitialiseTCBVariables+0x70>)
  4077da:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4077dc:	68fb      	ldr	r3, [r7, #12]
  4077de:	3318      	adds	r3, #24
  4077e0:	4618      	mov	r0, r3
  4077e2:	4b09      	ldr	r3, [pc, #36]	; (407808 <prvInitialiseTCBVariables+0x70>)
  4077e4:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4077e6:	68fb      	ldr	r3, [r7, #12]
  4077e8:	68fa      	ldr	r2, [r7, #12]
  4077ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  4077ec:	687b      	ldr	r3, [r7, #4]
  4077ee:	f1c3 020f 	rsb	r2, r3, #15
  4077f2:	68fb      	ldr	r3, [r7, #12]
  4077f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4077f6:	68fb      	ldr	r3, [r7, #12]
  4077f8:	68fa      	ldr	r2, [r7, #12]
  4077fa:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  4077fc:	3710      	adds	r7, #16
  4077fe:	46bd      	mov	sp, r7
  407800:	bd80      	pop	{r7, pc}
  407802:	bf00      	nop
  407804:	0040a8d5 	.word	0x0040a8d5
  407808:	00406079 	.word	0x00406079

0040780c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  40780c:	b580      	push	{r7, lr}
  40780e:	b082      	sub	sp, #8
  407810:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  407812:	2300      	movs	r3, #0
  407814:	607b      	str	r3, [r7, #4]
  407816:	e00c      	b.n	407832 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  407818:	687a      	ldr	r2, [r7, #4]
  40781a:	4613      	mov	r3, r2
  40781c:	009b      	lsls	r3, r3, #2
  40781e:	4413      	add	r3, r2
  407820:	009b      	lsls	r3, r3, #2
  407822:	4a11      	ldr	r2, [pc, #68]	; (407868 <prvInitialiseTaskLists+0x5c>)
  407824:	4413      	add	r3, r2
  407826:	4618      	mov	r0, r3
  407828:	4b10      	ldr	r3, [pc, #64]	; (40786c <prvInitialiseTaskLists+0x60>)
  40782a:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  40782c:	687b      	ldr	r3, [r7, #4]
  40782e:	3301      	adds	r3, #1
  407830:	607b      	str	r3, [r7, #4]
  407832:	687b      	ldr	r3, [r7, #4]
  407834:	2b0e      	cmp	r3, #14
  407836:	d9ef      	bls.n	407818 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  407838:	480d      	ldr	r0, [pc, #52]	; (407870 <prvInitialiseTaskLists+0x64>)
  40783a:	4b0c      	ldr	r3, [pc, #48]	; (40786c <prvInitialiseTaskLists+0x60>)
  40783c:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  40783e:	480d      	ldr	r0, [pc, #52]	; (407874 <prvInitialiseTaskLists+0x68>)
  407840:	4b0a      	ldr	r3, [pc, #40]	; (40786c <prvInitialiseTaskLists+0x60>)
  407842:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  407844:	480c      	ldr	r0, [pc, #48]	; (407878 <prvInitialiseTaskLists+0x6c>)
  407846:	4b09      	ldr	r3, [pc, #36]	; (40786c <prvInitialiseTaskLists+0x60>)
  407848:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  40784a:	480c      	ldr	r0, [pc, #48]	; (40787c <prvInitialiseTaskLists+0x70>)
  40784c:	4b07      	ldr	r3, [pc, #28]	; (40786c <prvInitialiseTaskLists+0x60>)
  40784e:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  407850:	480b      	ldr	r0, [pc, #44]	; (407880 <prvInitialiseTaskLists+0x74>)
  407852:	4b06      	ldr	r3, [pc, #24]	; (40786c <prvInitialiseTaskLists+0x60>)
  407854:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  407856:	4b0b      	ldr	r3, [pc, #44]	; (407884 <prvInitialiseTaskLists+0x78>)
  407858:	4a05      	ldr	r2, [pc, #20]	; (407870 <prvInitialiseTaskLists+0x64>)
  40785a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40785c:	4b0a      	ldr	r3, [pc, #40]	; (407888 <prvInitialiseTaskLists+0x7c>)
  40785e:	4a05      	ldr	r2, [pc, #20]	; (407874 <prvInitialiseTaskLists+0x68>)
  407860:	601a      	str	r2, [r3, #0]
}
  407862:	3708      	adds	r7, #8
  407864:	46bd      	mov	sp, r7
  407866:	bd80      	pop	{r7, pc}
  407868:	20014cd0 	.word	0x20014cd0
  40786c:	00406039 	.word	0x00406039
  407870:	20014dfc 	.word	0x20014dfc
  407874:	20014e10 	.word	0x20014e10
  407878:	20014e2c 	.word	0x20014e2c
  40787c:	20014e40 	.word	0x20014e40
  407880:	20014e58 	.word	0x20014e58
  407884:	20014e24 	.word	0x20014e24
  407888:	20014e28 	.word	0x20014e28

0040788c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  40788c:	b580      	push	{r7, lr}
  40788e:	b082      	sub	sp, #8
  407890:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  407892:	e028      	b.n	4078e6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  407894:	4b17      	ldr	r3, [pc, #92]	; (4078f4 <prvCheckTasksWaitingTermination+0x68>)
  407896:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  407898:	4b17      	ldr	r3, [pc, #92]	; (4078f8 <prvCheckTasksWaitingTermination+0x6c>)
  40789a:	681b      	ldr	r3, [r3, #0]
  40789c:	2b00      	cmp	r3, #0
  40789e:	bf14      	ite	ne
  4078a0:	2300      	movne	r3, #0
  4078a2:	2301      	moveq	r3, #1
  4078a4:	b2db      	uxtb	r3, r3
  4078a6:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  4078a8:	4b14      	ldr	r3, [pc, #80]	; (4078fc <prvCheckTasksWaitingTermination+0x70>)
  4078aa:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  4078ac:	687b      	ldr	r3, [r7, #4]
  4078ae:	2b00      	cmp	r3, #0
  4078b0:	d119      	bne.n	4078e6 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  4078b2:	4b13      	ldr	r3, [pc, #76]	; (407900 <prvCheckTasksWaitingTermination+0x74>)
  4078b4:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  4078b6:	4b10      	ldr	r3, [pc, #64]	; (4078f8 <prvCheckTasksWaitingTermination+0x6c>)
  4078b8:	68db      	ldr	r3, [r3, #12]
  4078ba:	68db      	ldr	r3, [r3, #12]
  4078bc:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  4078be:	683b      	ldr	r3, [r7, #0]
  4078c0:	3304      	adds	r3, #4
  4078c2:	4618      	mov	r0, r3
  4078c4:	4b0f      	ldr	r3, [pc, #60]	; (407904 <prvCheckTasksWaitingTermination+0x78>)
  4078c6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4078c8:	4b0f      	ldr	r3, [pc, #60]	; (407908 <prvCheckTasksWaitingTermination+0x7c>)
  4078ca:	681b      	ldr	r3, [r3, #0]
  4078cc:	1e5a      	subs	r2, r3, #1
  4078ce:	4b0e      	ldr	r3, [pc, #56]	; (407908 <prvCheckTasksWaitingTermination+0x7c>)
  4078d0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
  4078d2:	4b0e      	ldr	r3, [pc, #56]	; (40790c <prvCheckTasksWaitingTermination+0x80>)
  4078d4:	681b      	ldr	r3, [r3, #0]
  4078d6:	1e5a      	subs	r2, r3, #1
  4078d8:	4b0c      	ldr	r3, [pc, #48]	; (40790c <prvCheckTasksWaitingTermination+0x80>)
  4078da:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
  4078dc:	4b0c      	ldr	r3, [pc, #48]	; (407910 <prvCheckTasksWaitingTermination+0x84>)
  4078de:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  4078e0:	6838      	ldr	r0, [r7, #0]
  4078e2:	4b0c      	ldr	r3, [pc, #48]	; (407914 <prvCheckTasksWaitingTermination+0x88>)
  4078e4:	4798      	blx	r3
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  4078e6:	4b09      	ldr	r3, [pc, #36]	; (40790c <prvCheckTasksWaitingTermination+0x80>)
  4078e8:	681b      	ldr	r3, [r3, #0]
  4078ea:	2b00      	cmp	r3, #0
  4078ec:	d1d2      	bne.n	407894 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif
}
  4078ee:	3708      	adds	r7, #8
  4078f0:	46bd      	mov	sp, r7
  4078f2:	bd80      	pop	{r7, pc}
  4078f4:	0040714d 	.word	0x0040714d
  4078f8:	20014e40 	.word	0x20014e40
  4078fc:	00407169 	.word	0x00407169
  407900:	00406329 	.word	0x00406329
  407904:	00406151 	.word	0x00406151
  407908:	20014e6c 	.word	0x20014e6c
  40790c:	20014e54 	.word	0x20014e54
  407910:	00406345 	.word	0x00406345
  407914:	004079f9 	.word	0x004079f9

00407918 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  407918:	b580      	push	{r7, lr}
  40791a:	b082      	sub	sp, #8
  40791c:	af00      	add	r7, sp, #0
  40791e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  407920:	4b13      	ldr	r3, [pc, #76]	; (407970 <prvAddCurrentTaskToDelayedList+0x58>)
  407922:	681b      	ldr	r3, [r3, #0]
  407924:	687a      	ldr	r2, [r7, #4]
  407926:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  407928:	4b12      	ldr	r3, [pc, #72]	; (407974 <prvAddCurrentTaskToDelayedList+0x5c>)
  40792a:	681b      	ldr	r3, [r3, #0]
  40792c:	687a      	ldr	r2, [r7, #4]
  40792e:	429a      	cmp	r2, r3
  407930:	d209      	bcs.n	407946 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  407932:	4b11      	ldr	r3, [pc, #68]	; (407978 <prvAddCurrentTaskToDelayedList+0x60>)
  407934:	681a      	ldr	r2, [r3, #0]
  407936:	4b0e      	ldr	r3, [pc, #56]	; (407970 <prvAddCurrentTaskToDelayedList+0x58>)
  407938:	681b      	ldr	r3, [r3, #0]
  40793a:	3304      	adds	r3, #4
  40793c:	4610      	mov	r0, r2
  40793e:	4619      	mov	r1, r3
  407940:	4b0e      	ldr	r3, [pc, #56]	; (40797c <prvAddCurrentTaskToDelayedList+0x64>)
  407942:	4798      	blx	r3
  407944:	e010      	b.n	407968 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  407946:	4b0e      	ldr	r3, [pc, #56]	; (407980 <prvAddCurrentTaskToDelayedList+0x68>)
  407948:	681a      	ldr	r2, [r3, #0]
  40794a:	4b09      	ldr	r3, [pc, #36]	; (407970 <prvAddCurrentTaskToDelayedList+0x58>)
  40794c:	681b      	ldr	r3, [r3, #0]
  40794e:	3304      	adds	r3, #4
  407950:	4610      	mov	r0, r2
  407952:	4619      	mov	r1, r3
  407954:	4b09      	ldr	r3, [pc, #36]	; (40797c <prvAddCurrentTaskToDelayedList+0x64>)
  407956:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  407958:	4b0a      	ldr	r3, [pc, #40]	; (407984 <prvAddCurrentTaskToDelayedList+0x6c>)
  40795a:	681b      	ldr	r3, [r3, #0]
  40795c:	687a      	ldr	r2, [r7, #4]
  40795e:	429a      	cmp	r2, r3
  407960:	d202      	bcs.n	407968 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
  407962:	4b08      	ldr	r3, [pc, #32]	; (407984 <prvAddCurrentTaskToDelayedList+0x6c>)
  407964:	687a      	ldr	r2, [r7, #4]
  407966:	601a      	str	r2, [r3, #0]
		}
	}
}
  407968:	3708      	adds	r7, #8
  40796a:	46bd      	mov	sp, r7
  40796c:	bd80      	pop	{r7, pc}
  40796e:	bf00      	nop
  407970:	20014ccc 	.word	0x20014ccc
  407974:	20014e70 	.word	0x20014e70
  407978:	20014e28 	.word	0x20014e28
  40797c:	004060e1 	.word	0x004060e1
  407980:	20014e24 	.word	0x20014e24
  407984:	20000208 	.word	0x20000208

00407988 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  407988:	b580      	push	{r7, lr}
  40798a:	b084      	sub	sp, #16
  40798c:	af00      	add	r7, sp, #0
  40798e:	4603      	mov	r3, r0
  407990:	6039      	str	r1, [r7, #0]
  407992:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  407994:	204c      	movs	r0, #76	; 0x4c
  407996:	4b15      	ldr	r3, [pc, #84]	; (4079ec <prvAllocateTCBAndStack+0x64>)
  407998:	4798      	blx	r3
  40799a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  40799c:	68fb      	ldr	r3, [r7, #12]
  40799e:	2b00      	cmp	r3, #0
  4079a0:	d01f      	beq.n	4079e2 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  4079a2:	683b      	ldr	r3, [r7, #0]
  4079a4:	2b00      	cmp	r3, #0
  4079a6:	d106      	bne.n	4079b6 <prvAllocateTCBAndStack+0x2e>
  4079a8:	88fb      	ldrh	r3, [r7, #6]
  4079aa:	009b      	lsls	r3, r3, #2
  4079ac:	4618      	mov	r0, r3
  4079ae:	4b0f      	ldr	r3, [pc, #60]	; (4079ec <prvAllocateTCBAndStack+0x64>)
  4079b0:	4798      	blx	r3
  4079b2:	4603      	mov	r3, r0
  4079b4:	e000      	b.n	4079b8 <prvAllocateTCBAndStack+0x30>
  4079b6:	683b      	ldr	r3, [r7, #0]
  4079b8:	68fa      	ldr	r2, [r7, #12]
  4079ba:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  4079bc:	68fb      	ldr	r3, [r7, #12]
  4079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4079c0:	2b00      	cmp	r3, #0
  4079c2:	d105      	bne.n	4079d0 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  4079c4:	68f8      	ldr	r0, [r7, #12]
  4079c6:	4b0a      	ldr	r3, [pc, #40]	; (4079f0 <prvAllocateTCBAndStack+0x68>)
  4079c8:	4798      	blx	r3
			pxNewTCB = NULL;
  4079ca:	2300      	movs	r3, #0
  4079cc:	60fb      	str	r3, [r7, #12]
  4079ce:	e008      	b.n	4079e2 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  4079d0:	68fb      	ldr	r3, [r7, #12]
  4079d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4079d4:	88fb      	ldrh	r3, [r7, #6]
  4079d6:	009b      	lsls	r3, r3, #2
  4079d8:	4610      	mov	r0, r2
  4079da:	21a5      	movs	r1, #165	; 0xa5
  4079dc:	461a      	mov	r2, r3
  4079de:	4b05      	ldr	r3, [pc, #20]	; (4079f4 <prvAllocateTCBAndStack+0x6c>)
  4079e0:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  4079e2:	68fb      	ldr	r3, [r7, #12]
}
  4079e4:	4618      	mov	r0, r3
  4079e6:	3710      	adds	r7, #16
  4079e8:	46bd      	mov	sp, r7
  4079ea:	bd80      	pop	{r7, pc}
  4079ec:	00406421 	.word	0x00406421
  4079f0:	00406529 	.word	0x00406529
  4079f4:	0040a4f1 	.word	0x0040a4f1

004079f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  4079f8:	b580      	push	{r7, lr}
  4079fa:	b082      	sub	sp, #8
  4079fc:	af00      	add	r7, sp, #0
  4079fe:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  407a00:	687b      	ldr	r3, [r7, #4]
  407a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  407a04:	4618      	mov	r0, r3
  407a06:	4b04      	ldr	r3, [pc, #16]	; (407a18 <prvDeleteTCB+0x20>)
  407a08:	4798      	blx	r3
		vPortFree( pxTCB );
  407a0a:	6878      	ldr	r0, [r7, #4]
  407a0c:	4b02      	ldr	r3, [pc, #8]	; (407a18 <prvDeleteTCB+0x20>)
  407a0e:	4798      	blx	r3
	}
  407a10:	3708      	adds	r7, #8
  407a12:	46bd      	mov	sp, r7
  407a14:	bd80      	pop	{r7, pc}
  407a16:	bf00      	nop
  407a18:	00406529 	.word	0x00406529

00407a1c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  407a1c:	b480      	push	{r7}
  407a1e:	b083      	sub	sp, #12
  407a20:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  407a22:	4b05      	ldr	r3, [pc, #20]	; (407a38 <xTaskGetCurrentTaskHandle+0x1c>)
  407a24:	681b      	ldr	r3, [r3, #0]
  407a26:	607b      	str	r3, [r7, #4]

		return xReturn;
  407a28:	687b      	ldr	r3, [r7, #4]
	}
  407a2a:	4618      	mov	r0, r3
  407a2c:	370c      	adds	r7, #12
  407a2e:	46bd      	mov	sp, r7
  407a30:	f85d 7b04 	ldr.w	r7, [sp], #4
  407a34:	4770      	bx	lr
  407a36:	bf00      	nop
  407a38:	20014ccc 	.word	0x20014ccc

00407a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  407a3c:	b480      	push	{r7}
  407a3e:	b083      	sub	sp, #12
  407a40:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  407a42:	4b0b      	ldr	r3, [pc, #44]	; (407a70 <xTaskGetSchedulerState+0x34>)
  407a44:	681b      	ldr	r3, [r3, #0]
  407a46:	2b00      	cmp	r3, #0
  407a48:	d102      	bne.n	407a50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  407a4a:	2300      	movs	r3, #0
  407a4c:	607b      	str	r3, [r7, #4]
  407a4e:	e008      	b.n	407a62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  407a50:	4b08      	ldr	r3, [pc, #32]	; (407a74 <xTaskGetSchedulerState+0x38>)
  407a52:	681b      	ldr	r3, [r3, #0]
  407a54:	2b00      	cmp	r3, #0
  407a56:	d102      	bne.n	407a5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  407a58:	2301      	movs	r3, #1
  407a5a:	607b      	str	r3, [r7, #4]
  407a5c:	e001      	b.n	407a62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  407a5e:	2302      	movs	r3, #2
  407a60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  407a62:	687b      	ldr	r3, [r7, #4]
	}
  407a64:	4618      	mov	r0, r3
  407a66:	370c      	adds	r7, #12
  407a68:	46bd      	mov	sp, r7
  407a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  407a6e:	4770      	bx	lr
  407a70:	20014e7c 	.word	0x20014e7c
  407a74:	20014e80 	.word	0x20014e80

00407a78 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  407a78:	b580      	push	{r7, lr}
  407a7a:	b084      	sub	sp, #16
  407a7c:	af00      	add	r7, sp, #0
  407a7e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  407a80:	687b      	ldr	r3, [r7, #4]
  407a82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  407a84:	687b      	ldr	r3, [r7, #4]
  407a86:	2b00      	cmp	r3, #0
  407a88:	d041      	beq.n	407b0e <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  407a8a:	68fb      	ldr	r3, [r7, #12]
  407a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407a8e:	4b21      	ldr	r3, [pc, #132]	; (407b14 <vTaskPriorityInherit+0x9c>)
  407a90:	681b      	ldr	r3, [r3, #0]
  407a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  407a94:	429a      	cmp	r2, r3
  407a96:	d23a      	bcs.n	407b0e <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  407a98:	4b1e      	ldr	r3, [pc, #120]	; (407b14 <vTaskPriorityInherit+0x9c>)
  407a9a:	681b      	ldr	r3, [r3, #0]
  407a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  407a9e:	f1c3 020f 	rsb	r2, r3, #15
  407aa2:	68fb      	ldr	r3, [r7, #12]
  407aa4:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  407aa6:	68fb      	ldr	r3, [r7, #12]
  407aa8:	6959      	ldr	r1, [r3, #20]
  407aaa:	68fb      	ldr	r3, [r7, #12]
  407aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407aae:	4613      	mov	r3, r2
  407ab0:	009b      	lsls	r3, r3, #2
  407ab2:	4413      	add	r3, r2
  407ab4:	009b      	lsls	r3, r3, #2
  407ab6:	4a18      	ldr	r2, [pc, #96]	; (407b18 <vTaskPriorityInherit+0xa0>)
  407ab8:	4413      	add	r3, r2
  407aba:	4299      	cmp	r1, r3
  407abc:	d122      	bne.n	407b04 <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  407abe:	68fb      	ldr	r3, [r7, #12]
  407ac0:	3304      	adds	r3, #4
  407ac2:	4618      	mov	r0, r3
  407ac4:	4b15      	ldr	r3, [pc, #84]	; (407b1c <vTaskPriorityInherit+0xa4>)
  407ac6:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  407ac8:	4b12      	ldr	r3, [pc, #72]	; (407b14 <vTaskPriorityInherit+0x9c>)
  407aca:	681b      	ldr	r3, [r3, #0]
  407acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407ace:	68fb      	ldr	r3, [r7, #12]
  407ad0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  407ad2:	68fb      	ldr	r3, [r7, #12]
  407ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407ad6:	4b12      	ldr	r3, [pc, #72]	; (407b20 <vTaskPriorityInherit+0xa8>)
  407ad8:	681b      	ldr	r3, [r3, #0]
  407ada:	429a      	cmp	r2, r3
  407adc:	d903      	bls.n	407ae6 <vTaskPriorityInherit+0x6e>
  407ade:	68fb      	ldr	r3, [r7, #12]
  407ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407ae2:	4b0f      	ldr	r3, [pc, #60]	; (407b20 <vTaskPriorityInherit+0xa8>)
  407ae4:	601a      	str	r2, [r3, #0]
  407ae6:	68fb      	ldr	r3, [r7, #12]
  407ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407aea:	4613      	mov	r3, r2
  407aec:	009b      	lsls	r3, r3, #2
  407aee:	4413      	add	r3, r2
  407af0:	009b      	lsls	r3, r3, #2
  407af2:	4a09      	ldr	r2, [pc, #36]	; (407b18 <vTaskPriorityInherit+0xa0>)
  407af4:	441a      	add	r2, r3
  407af6:	68fb      	ldr	r3, [r7, #12]
  407af8:	3304      	adds	r3, #4
  407afa:	4610      	mov	r0, r2
  407afc:	4619      	mov	r1, r3
  407afe:	4b09      	ldr	r3, [pc, #36]	; (407b24 <vTaskPriorityInherit+0xac>)
  407b00:	4798      	blx	r3
  407b02:	e004      	b.n	407b0e <vTaskPriorityInherit+0x96>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  407b04:	4b03      	ldr	r3, [pc, #12]	; (407b14 <vTaskPriorityInherit+0x9c>)
  407b06:	681b      	ldr	r3, [r3, #0]
  407b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407b0a:	68fb      	ldr	r3, [r7, #12]
  407b0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  407b0e:	3710      	adds	r7, #16
  407b10:	46bd      	mov	sp, r7
  407b12:	bd80      	pop	{r7, pc}
  407b14:	20014ccc 	.word	0x20014ccc
  407b18:	20014cd0 	.word	0x20014cd0
  407b1c:	00406151 	.word	0x00406151
  407b20:	20014e78 	.word	0x20014e78
  407b24:	00406091 	.word	0x00406091

00407b28 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  407b28:	b580      	push	{r7, lr}
  407b2a:	b084      	sub	sp, #16
  407b2c:	af00      	add	r7, sp, #0
  407b2e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  407b30:	687b      	ldr	r3, [r7, #4]
  407b32:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  407b34:	687b      	ldr	r3, [r7, #4]
  407b36:	2b00      	cmp	r3, #0
  407b38:	d02c      	beq.n	407b94 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  407b3a:	68fb      	ldr	r3, [r7, #12]
  407b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407b3e:	68fb      	ldr	r3, [r7, #12]
  407b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  407b42:	429a      	cmp	r2, r3
  407b44:	d026      	beq.n	407b94 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  407b46:	68fb      	ldr	r3, [r7, #12]
  407b48:	3304      	adds	r3, #4
  407b4a:	4618      	mov	r0, r3
  407b4c:	4b13      	ldr	r3, [pc, #76]	; (407b9c <vTaskPriorityDisinherit+0x74>)
  407b4e:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  407b50:	68fb      	ldr	r3, [r7, #12]
  407b52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  407b54:	68fb      	ldr	r3, [r7, #12]
  407b56:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  407b58:	68fb      	ldr	r3, [r7, #12]
  407b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  407b5c:	f1c3 020f 	rsb	r2, r3, #15
  407b60:	68fb      	ldr	r3, [r7, #12]
  407b62:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  407b64:	68fb      	ldr	r3, [r7, #12]
  407b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407b68:	4b0d      	ldr	r3, [pc, #52]	; (407ba0 <vTaskPriorityDisinherit+0x78>)
  407b6a:	681b      	ldr	r3, [r3, #0]
  407b6c:	429a      	cmp	r2, r3
  407b6e:	d903      	bls.n	407b78 <vTaskPriorityDisinherit+0x50>
  407b70:	68fb      	ldr	r3, [r7, #12]
  407b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407b74:	4b0a      	ldr	r3, [pc, #40]	; (407ba0 <vTaskPriorityDisinherit+0x78>)
  407b76:	601a      	str	r2, [r3, #0]
  407b78:	68fb      	ldr	r3, [r7, #12]
  407b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407b7c:	4613      	mov	r3, r2
  407b7e:	009b      	lsls	r3, r3, #2
  407b80:	4413      	add	r3, r2
  407b82:	009b      	lsls	r3, r3, #2
  407b84:	4a07      	ldr	r2, [pc, #28]	; (407ba4 <vTaskPriorityDisinherit+0x7c>)
  407b86:	441a      	add	r2, r3
  407b88:	68fb      	ldr	r3, [r7, #12]
  407b8a:	3304      	adds	r3, #4
  407b8c:	4610      	mov	r0, r2
  407b8e:	4619      	mov	r1, r3
  407b90:	4b05      	ldr	r3, [pc, #20]	; (407ba8 <vTaskPriorityDisinherit+0x80>)
  407b92:	4798      	blx	r3
			}
		}
	}
  407b94:	3710      	adds	r7, #16
  407b96:	46bd      	mov	sp, r7
  407b98:	bd80      	pop	{r7, pc}
  407b9a:	bf00      	nop
  407b9c:	00406151 	.word	0x00406151
  407ba0:	20014e78 	.word	0x20014e78
  407ba4:	20014cd0 	.word	0x20014cd0
  407ba8:	00406091 	.word	0x00406091

00407bac <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  407bac:	b590      	push	{r4, r7, lr}
  407bae:	b087      	sub	sp, #28
  407bb0:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  407bb2:	2300      	movs	r3, #0
  407bb4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  407bb6:	4b11      	ldr	r3, [pc, #68]	; (407bfc <xTimerCreateTimerTask+0x50>)
  407bb8:	4798      	blx	r3

	if( xTimerQueue != NULL )
  407bba:	4b11      	ldr	r3, [pc, #68]	; (407c00 <xTimerCreateTimerTask+0x54>)
  407bbc:	681b      	ldr	r3, [r3, #0]
  407bbe:	2b00      	cmp	r3, #0
  407bc0:	d00f      	beq.n	407be2 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  407bc2:	230e      	movs	r3, #14
  407bc4:	9300      	str	r3, [sp, #0]
  407bc6:	2300      	movs	r3, #0
  407bc8:	9301      	str	r3, [sp, #4]
  407bca:	2300      	movs	r3, #0
  407bcc:	9302      	str	r3, [sp, #8]
  407bce:	2300      	movs	r3, #0
  407bd0:	9303      	str	r3, [sp, #12]
  407bd2:	480c      	ldr	r0, [pc, #48]	; (407c04 <xTimerCreateTimerTask+0x58>)
  407bd4:	490c      	ldr	r1, [pc, #48]	; (407c08 <xTimerCreateTimerTask+0x5c>)
  407bd6:	f44f 7282 	mov.w	r2, #260	; 0x104
  407bda:	2300      	movs	r3, #0
  407bdc:	4c0b      	ldr	r4, [pc, #44]	; (407c0c <xTimerCreateTimerTask+0x60>)
  407bde:	47a0      	blx	r4
  407be0:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  407be2:	687b      	ldr	r3, [r7, #4]
  407be4:	2b00      	cmp	r3, #0
  407be6:	d103      	bne.n	407bf0 <xTimerCreateTimerTask+0x44>
  407be8:	4b09      	ldr	r3, [pc, #36]	; (407c10 <xTimerCreateTimerTask+0x64>)
  407bea:	4798      	blx	r3
  407bec:	bf00      	nop
  407bee:	e7fd      	b.n	407bec <xTimerCreateTimerTask+0x40>
	return xReturn;
  407bf0:	687b      	ldr	r3, [r7, #4]
}
  407bf2:	4618      	mov	r0, r3
  407bf4:	370c      	adds	r7, #12
  407bf6:	46bd      	mov	sp, r7
  407bf8:	bd90      	pop	{r4, r7, pc}
  407bfa:	bf00      	nop
  407bfc:	00408159 	.word	0x00408159
  407c00:	20014ec4 	.word	0x20014ec4
  407c04:	00407dad 	.word	0x00407dad
  407c08:	00413650 	.word	0x00413650
  407c0c:	00406ea9 	.word	0x00406ea9
  407c10:	0040636d 	.word	0x0040636d

00407c14 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
  407c14:	b580      	push	{r7, lr}
  407c16:	b086      	sub	sp, #24
  407c18:	af00      	add	r7, sp, #0
  407c1a:	60f8      	str	r0, [r7, #12]
  407c1c:	60b9      	str	r1, [r7, #8]
  407c1e:	607a      	str	r2, [r7, #4]
  407c20:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
  407c22:	68bb      	ldr	r3, [r7, #8]
  407c24:	2b00      	cmp	r3, #0
  407c26:	d108      	bne.n	407c3a <xTimerCreate+0x26>
	{
		pxNewTimer = NULL;
  407c28:	2300      	movs	r3, #0
  407c2a:	617b      	str	r3, [r7, #20]
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
  407c2c:	68bb      	ldr	r3, [r7, #8]
  407c2e:	2b00      	cmp	r3, #0
  407c30:	d120      	bne.n	407c74 <xTimerCreate+0x60>
  407c32:	4b13      	ldr	r3, [pc, #76]	; (407c80 <xTimerCreate+0x6c>)
  407c34:	4798      	blx	r3
  407c36:	bf00      	nop
  407c38:	e7fd      	b.n	407c36 <xTimerCreate+0x22>
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
  407c3a:	2028      	movs	r0, #40	; 0x28
  407c3c:	4b11      	ldr	r3, [pc, #68]	; (407c84 <xTimerCreate+0x70>)
  407c3e:	4798      	blx	r3
  407c40:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
  407c42:	697b      	ldr	r3, [r7, #20]
  407c44:	2b00      	cmp	r3, #0
  407c46:	d015      	beq.n	407c74 <xTimerCreate+0x60>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
  407c48:	4b0f      	ldr	r3, [pc, #60]	; (407c88 <xTimerCreate+0x74>)
  407c4a:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
  407c4c:	697b      	ldr	r3, [r7, #20]
  407c4e:	68fa      	ldr	r2, [r7, #12]
  407c50:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  407c52:	697b      	ldr	r3, [r7, #20]
  407c54:	68ba      	ldr	r2, [r7, #8]
  407c56:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  407c58:	697b      	ldr	r3, [r7, #20]
  407c5a:	687a      	ldr	r2, [r7, #4]
  407c5c:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  407c5e:	697b      	ldr	r3, [r7, #20]
  407c60:	683a      	ldr	r2, [r7, #0]
  407c62:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  407c64:	697b      	ldr	r3, [r7, #20]
  407c66:	6a3a      	ldr	r2, [r7, #32]
  407c68:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  407c6a:	697b      	ldr	r3, [r7, #20]
  407c6c:	3304      	adds	r3, #4
  407c6e:	4618      	mov	r0, r3
  407c70:	4b06      	ldr	r3, [pc, #24]	; (407c8c <xTimerCreate+0x78>)
  407c72:	4798      	blx	r3
		{
			traceTIMER_CREATE_FAILED();
		}
	}

	return ( xTimerHandle ) pxNewTimer;
  407c74:	697b      	ldr	r3, [r7, #20]
}
  407c76:	4618      	mov	r0, r3
  407c78:	3718      	adds	r7, #24
  407c7a:	46bd      	mov	sp, r7
  407c7c:	bd80      	pop	{r7, pc}
  407c7e:	bf00      	nop
  407c80:	0040636d 	.word	0x0040636d
  407c84:	00406421 	.word	0x00406421
  407c88:	00408159 	.word	0x00408159
  407c8c:	00406079 	.word	0x00406079

00407c90 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  407c90:	b590      	push	{r4, r7, lr}
  407c92:	b089      	sub	sp, #36	; 0x24
  407c94:	af00      	add	r7, sp, #0
  407c96:	60f8      	str	r0, [r7, #12]
  407c98:	60b9      	str	r1, [r7, #8]
  407c9a:	607a      	str	r2, [r7, #4]
  407c9c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  407c9e:	2300      	movs	r3, #0
  407ca0:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  407ca2:	4b1d      	ldr	r3, [pc, #116]	; (407d18 <xTimerGenericCommand+0x88>)
  407ca4:	681b      	ldr	r3, [r3, #0]
  407ca6:	2b00      	cmp	r3, #0
  407ca8:	d030      	beq.n	407d0c <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  407caa:	68bb      	ldr	r3, [r7, #8]
  407cac:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  407cae:	687b      	ldr	r3, [r7, #4]
  407cb0:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  407cb2:	68fb      	ldr	r3, [r7, #12]
  407cb4:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  407cb6:	683b      	ldr	r3, [r7, #0]
  407cb8:	2b00      	cmp	r3, #0
  407cba:	d11c      	bne.n	407cf6 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  407cbc:	4b17      	ldr	r3, [pc, #92]	; (407d1c <xTimerGenericCommand+0x8c>)
  407cbe:	4798      	blx	r3
  407cc0:	4603      	mov	r3, r0
  407cc2:	2b01      	cmp	r3, #1
  407cc4:	d10b      	bne.n	407cde <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  407cc6:	4b14      	ldr	r3, [pc, #80]	; (407d18 <xTimerGenericCommand+0x88>)
  407cc8:	681a      	ldr	r2, [r3, #0]
  407cca:	f107 0310 	add.w	r3, r7, #16
  407cce:	4610      	mov	r0, r2
  407cd0:	4619      	mov	r1, r3
  407cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  407cd4:	2300      	movs	r3, #0
  407cd6:	4c12      	ldr	r4, [pc, #72]	; (407d20 <xTimerGenericCommand+0x90>)
  407cd8:	47a0      	blx	r4
  407cda:	61f8      	str	r0, [r7, #28]
  407cdc:	e016      	b.n	407d0c <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  407cde:	4b0e      	ldr	r3, [pc, #56]	; (407d18 <xTimerGenericCommand+0x88>)
  407ce0:	681a      	ldr	r2, [r3, #0]
  407ce2:	f107 0310 	add.w	r3, r7, #16
  407ce6:	4610      	mov	r0, r2
  407ce8:	4619      	mov	r1, r3
  407cea:	2200      	movs	r2, #0
  407cec:	2300      	movs	r3, #0
  407cee:	4c0c      	ldr	r4, [pc, #48]	; (407d20 <xTimerGenericCommand+0x90>)
  407cf0:	47a0      	blx	r4
  407cf2:	61f8      	str	r0, [r7, #28]
  407cf4:	e00a      	b.n	407d0c <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  407cf6:	4b08      	ldr	r3, [pc, #32]	; (407d18 <xTimerGenericCommand+0x88>)
  407cf8:	681a      	ldr	r2, [r3, #0]
  407cfa:	f107 0310 	add.w	r3, r7, #16
  407cfe:	4610      	mov	r0, r2
  407d00:	4619      	mov	r1, r3
  407d02:	683a      	ldr	r2, [r7, #0]
  407d04:	2300      	movs	r3, #0
  407d06:	4c07      	ldr	r4, [pc, #28]	; (407d24 <xTimerGenericCommand+0x94>)
  407d08:	47a0      	blx	r4
  407d0a:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  407d0c:	69fb      	ldr	r3, [r7, #28]
}
  407d0e:	4618      	mov	r0, r3
  407d10:	3724      	adds	r7, #36	; 0x24
  407d12:	46bd      	mov	sp, r7
  407d14:	bd90      	pop	{r4, r7, pc}
  407d16:	bf00      	nop
  407d18:	20014ec4 	.word	0x20014ec4
  407d1c:	00407a3d 	.word	0x00407a3d
  407d20:	0040681d 	.word	0x0040681d
  407d24:	0040698d 	.word	0x0040698d

00407d28 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  407d28:	b590      	push	{r4, r7, lr}
  407d2a:	b087      	sub	sp, #28
  407d2c:	af02      	add	r7, sp, #8
  407d2e:	6078      	str	r0, [r7, #4]
  407d30:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  407d32:	4b19      	ldr	r3, [pc, #100]	; (407d98 <prvProcessExpiredTimer+0x70>)
  407d34:	681b      	ldr	r3, [r3, #0]
  407d36:	68db      	ldr	r3, [r3, #12]
  407d38:	68db      	ldr	r3, [r3, #12]
  407d3a:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  407d3c:	68fb      	ldr	r3, [r7, #12]
  407d3e:	3304      	adds	r3, #4
  407d40:	4618      	mov	r0, r3
  407d42:	4b16      	ldr	r3, [pc, #88]	; (407d9c <prvProcessExpiredTimer+0x74>)
  407d44:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  407d46:	68fb      	ldr	r3, [r7, #12]
  407d48:	69db      	ldr	r3, [r3, #28]
  407d4a:	2b01      	cmp	r3, #1
  407d4c:	d11c      	bne.n	407d88 <prvProcessExpiredTimer+0x60>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  407d4e:	68fb      	ldr	r3, [r7, #12]
  407d50:	699a      	ldr	r2, [r3, #24]
  407d52:	687b      	ldr	r3, [r7, #4]
  407d54:	4413      	add	r3, r2
  407d56:	68f8      	ldr	r0, [r7, #12]
  407d58:	4619      	mov	r1, r3
  407d5a:	683a      	ldr	r2, [r7, #0]
  407d5c:	687b      	ldr	r3, [r7, #4]
  407d5e:	4c10      	ldr	r4, [pc, #64]	; (407da0 <prvProcessExpiredTimer+0x78>)
  407d60:	47a0      	blx	r4
  407d62:	4603      	mov	r3, r0
  407d64:	2b01      	cmp	r3, #1
  407d66:	d10f      	bne.n	407d88 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  407d68:	2300      	movs	r3, #0
  407d6a:	9300      	str	r3, [sp, #0]
  407d6c:	68f8      	ldr	r0, [r7, #12]
  407d6e:	2100      	movs	r1, #0
  407d70:	687a      	ldr	r2, [r7, #4]
  407d72:	2300      	movs	r3, #0
  407d74:	4c0b      	ldr	r4, [pc, #44]	; (407da4 <prvProcessExpiredTimer+0x7c>)
  407d76:	47a0      	blx	r4
  407d78:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  407d7a:	68bb      	ldr	r3, [r7, #8]
  407d7c:	2b00      	cmp	r3, #0
  407d7e:	d103      	bne.n	407d88 <prvProcessExpiredTimer+0x60>
  407d80:	4b09      	ldr	r3, [pc, #36]	; (407da8 <prvProcessExpiredTimer+0x80>)
  407d82:	4798      	blx	r3
  407d84:	bf00      	nop
  407d86:	e7fd      	b.n	407d84 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  407d88:	68fb      	ldr	r3, [r7, #12]
  407d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  407d8c:	68f8      	ldr	r0, [r7, #12]
  407d8e:	4798      	blx	r3
}
  407d90:	3714      	adds	r7, #20
  407d92:	46bd      	mov	sp, r7
  407d94:	bd90      	pop	{r4, r7, pc}
  407d96:	bf00      	nop
  407d98:	20014ebc 	.word	0x20014ebc
  407d9c:	00406151 	.word	0x00406151
  407da0:	00407ef5 	.word	0x00407ef5
  407da4:	00407c91 	.word	0x00407c91
  407da8:	0040636d 	.word	0x0040636d

00407dac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  407dac:	b580      	push	{r7, lr}
  407dae:	b084      	sub	sp, #16
  407db0:	af00      	add	r7, sp, #0
  407db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  407db4:	f107 0308 	add.w	r3, r7, #8
  407db8:	4618      	mov	r0, r3
  407dba:	4b05      	ldr	r3, [pc, #20]	; (407dd0 <prvTimerTask+0x24>)
  407dbc:	4798      	blx	r3
  407dbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  407dc0:	68bb      	ldr	r3, [r7, #8]
  407dc2:	68f8      	ldr	r0, [r7, #12]
  407dc4:	4619      	mov	r1, r3
  407dc6:	4b03      	ldr	r3, [pc, #12]	; (407dd4 <prvTimerTask+0x28>)
  407dc8:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  407dca:	4b03      	ldr	r3, [pc, #12]	; (407dd8 <prvTimerTask+0x2c>)
  407dcc:	4798      	blx	r3
	}
  407dce:	e7f1      	b.n	407db4 <prvTimerTask+0x8>
  407dd0:	00407e61 	.word	0x00407e61
  407dd4:	00407ddd 	.word	0x00407ddd
  407dd8:	00407f7d 	.word	0x00407f7d

00407ddc <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  407ddc:	b580      	push	{r7, lr}
  407dde:	b084      	sub	sp, #16
  407de0:	af00      	add	r7, sp, #0
  407de2:	6078      	str	r0, [r7, #4]
  407de4:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  407de6:	4b17      	ldr	r3, [pc, #92]	; (407e44 <prvProcessTimerOrBlockTask+0x68>)
  407de8:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  407dea:	f107 0308 	add.w	r3, r7, #8
  407dee:	4618      	mov	r0, r3
  407df0:	4b15      	ldr	r3, [pc, #84]	; (407e48 <prvProcessTimerOrBlockTask+0x6c>)
  407df2:	4798      	blx	r3
  407df4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  407df6:	68bb      	ldr	r3, [r7, #8]
  407df8:	2b00      	cmp	r3, #0
  407dfa:	d11e      	bne.n	407e3a <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  407dfc:	683b      	ldr	r3, [r7, #0]
  407dfe:	2b00      	cmp	r3, #0
  407e00:	d10a      	bne.n	407e18 <prvProcessTimerOrBlockTask+0x3c>
  407e02:	687a      	ldr	r2, [r7, #4]
  407e04:	68fb      	ldr	r3, [r7, #12]
  407e06:	429a      	cmp	r2, r3
  407e08:	d806      	bhi.n	407e18 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  407e0a:	4b10      	ldr	r3, [pc, #64]	; (407e4c <prvProcessTimerOrBlockTask+0x70>)
  407e0c:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  407e0e:	6878      	ldr	r0, [r7, #4]
  407e10:	68f9      	ldr	r1, [r7, #12]
  407e12:	4b0f      	ldr	r3, [pc, #60]	; (407e50 <prvProcessTimerOrBlockTask+0x74>)
  407e14:	4798      	blx	r3
  407e16:	e012      	b.n	407e3e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  407e18:	4b0e      	ldr	r3, [pc, #56]	; (407e54 <prvProcessTimerOrBlockTask+0x78>)
  407e1a:	681a      	ldr	r2, [r3, #0]
  407e1c:	6879      	ldr	r1, [r7, #4]
  407e1e:	68fb      	ldr	r3, [r7, #12]
  407e20:	1acb      	subs	r3, r1, r3
  407e22:	4610      	mov	r0, r2
  407e24:	4619      	mov	r1, r3
  407e26:	4b0c      	ldr	r3, [pc, #48]	; (407e58 <prvProcessTimerOrBlockTask+0x7c>)
  407e28:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  407e2a:	4b08      	ldr	r3, [pc, #32]	; (407e4c <prvProcessTimerOrBlockTask+0x70>)
  407e2c:	4798      	blx	r3
  407e2e:	4603      	mov	r3, r0
  407e30:	2b00      	cmp	r3, #0
  407e32:	d104      	bne.n	407e3e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
  407e34:	4b09      	ldr	r3, [pc, #36]	; (407e5c <prvProcessTimerOrBlockTask+0x80>)
  407e36:	4798      	blx	r3
  407e38:	e001      	b.n	407e3e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			xTaskResumeAll();
  407e3a:	4b04      	ldr	r3, [pc, #16]	; (407e4c <prvProcessTimerOrBlockTask+0x70>)
  407e3c:	4798      	blx	r3
		}
	}
}
  407e3e:	3710      	adds	r7, #16
  407e40:	46bd      	mov	sp, r7
  407e42:	bd80      	pop	{r7, pc}
  407e44:	0040714d 	.word	0x0040714d
  407e48:	00407ea9 	.word	0x00407ea9
  407e4c:	00407169 	.word	0x00407169
  407e50:	00407d29 	.word	0x00407d29
  407e54:	20014ec4 	.word	0x20014ec4
  407e58:	00406e45 	.word	0x00406e45
  407e5c:	00406311 	.word	0x00406311

00407e60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  407e60:	b480      	push	{r7}
  407e62:	b085      	sub	sp, #20
  407e64:	af00      	add	r7, sp, #0
  407e66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  407e68:	4b0e      	ldr	r3, [pc, #56]	; (407ea4 <prvGetNextExpireTime+0x44>)
  407e6a:	681b      	ldr	r3, [r3, #0]
  407e6c:	681b      	ldr	r3, [r3, #0]
  407e6e:	2b00      	cmp	r3, #0
  407e70:	bf14      	ite	ne
  407e72:	2300      	movne	r3, #0
  407e74:	2301      	moveq	r3, #1
  407e76:	b2db      	uxtb	r3, r3
  407e78:	461a      	mov	r2, r3
  407e7a:	687b      	ldr	r3, [r7, #4]
  407e7c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  407e7e:	687b      	ldr	r3, [r7, #4]
  407e80:	681b      	ldr	r3, [r3, #0]
  407e82:	2b00      	cmp	r3, #0
  407e84:	d105      	bne.n	407e92 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  407e86:	4b07      	ldr	r3, [pc, #28]	; (407ea4 <prvGetNextExpireTime+0x44>)
  407e88:	681b      	ldr	r3, [r3, #0]
  407e8a:	68db      	ldr	r3, [r3, #12]
  407e8c:	681b      	ldr	r3, [r3, #0]
  407e8e:	60fb      	str	r3, [r7, #12]
  407e90:	e001      	b.n	407e96 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  407e92:	2300      	movs	r3, #0
  407e94:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  407e96:	68fb      	ldr	r3, [r7, #12]
}
  407e98:	4618      	mov	r0, r3
  407e9a:	3714      	adds	r7, #20
  407e9c:	46bd      	mov	sp, r7
  407e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407ea2:	4770      	bx	lr
  407ea4:	20014ebc 	.word	0x20014ebc

00407ea8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  407ea8:	b580      	push	{r7, lr}
  407eaa:	b084      	sub	sp, #16
  407eac:	af00      	add	r7, sp, #0
  407eae:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  407eb0:	4b0d      	ldr	r3, [pc, #52]	; (407ee8 <prvSampleTimeNow+0x40>)
  407eb2:	4798      	blx	r3
  407eb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  407eb6:	4b0d      	ldr	r3, [pc, #52]	; (407eec <prvSampleTimeNow+0x44>)
  407eb8:	681b      	ldr	r3, [r3, #0]
  407eba:	68fa      	ldr	r2, [r7, #12]
  407ebc:	429a      	cmp	r2, r3
  407ebe:	d208      	bcs.n	407ed2 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  407ec0:	4b0a      	ldr	r3, [pc, #40]	; (407eec <prvSampleTimeNow+0x44>)
  407ec2:	681b      	ldr	r3, [r3, #0]
  407ec4:	4618      	mov	r0, r3
  407ec6:	4b0a      	ldr	r3, [pc, #40]	; (407ef0 <prvSampleTimeNow+0x48>)
  407ec8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  407eca:	687b      	ldr	r3, [r7, #4]
  407ecc:	2201      	movs	r2, #1
  407ece:	601a      	str	r2, [r3, #0]
  407ed0:	e002      	b.n	407ed8 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  407ed2:	687b      	ldr	r3, [r7, #4]
  407ed4:	2200      	movs	r2, #0
  407ed6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  407ed8:	4b04      	ldr	r3, [pc, #16]	; (407eec <prvSampleTimeNow+0x44>)
  407eda:	68fa      	ldr	r2, [r7, #12]
  407edc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
  407ede:	68fb      	ldr	r3, [r7, #12]
}
  407ee0:	4618      	mov	r0, r3
  407ee2:	3710      	adds	r7, #16
  407ee4:	46bd      	mov	sp, r7
  407ee6:	bd80      	pop	{r7, pc}
  407ee8:	00407289 	.word	0x00407289
  407eec:	20014ec8 	.word	0x20014ec8
  407ef0:	00408095 	.word	0x00408095

00407ef4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  407ef4:	b580      	push	{r7, lr}
  407ef6:	b086      	sub	sp, #24
  407ef8:	af00      	add	r7, sp, #0
  407efa:	60f8      	str	r0, [r7, #12]
  407efc:	60b9      	str	r1, [r7, #8]
  407efe:	607a      	str	r2, [r7, #4]
  407f00:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  407f02:	2300      	movs	r3, #0
  407f04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  407f06:	68fb      	ldr	r3, [r7, #12]
  407f08:	68ba      	ldr	r2, [r7, #8]
  407f0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  407f0c:	68fb      	ldr	r3, [r7, #12]
  407f0e:	68fa      	ldr	r2, [r7, #12]
  407f10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  407f12:	68ba      	ldr	r2, [r7, #8]
  407f14:	687b      	ldr	r3, [r7, #4]
  407f16:	429a      	cmp	r2, r3
  407f18:	d812      	bhi.n	407f40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  407f1a:	687a      	ldr	r2, [r7, #4]
  407f1c:	683b      	ldr	r3, [r7, #0]
  407f1e:	1ad2      	subs	r2, r2, r3
  407f20:	68fb      	ldr	r3, [r7, #12]
  407f22:	699b      	ldr	r3, [r3, #24]
  407f24:	429a      	cmp	r2, r3
  407f26:	d302      	bcc.n	407f2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  407f28:	2301      	movs	r3, #1
  407f2a:	617b      	str	r3, [r7, #20]
  407f2c:	e01b      	b.n	407f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  407f2e:	4b10      	ldr	r3, [pc, #64]	; (407f70 <prvInsertTimerInActiveList+0x7c>)
  407f30:	681a      	ldr	r2, [r3, #0]
  407f32:	68fb      	ldr	r3, [r7, #12]
  407f34:	3304      	adds	r3, #4
  407f36:	4610      	mov	r0, r2
  407f38:	4619      	mov	r1, r3
  407f3a:	4b0e      	ldr	r3, [pc, #56]	; (407f74 <prvInsertTimerInActiveList+0x80>)
  407f3c:	4798      	blx	r3
  407f3e:	e012      	b.n	407f66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  407f40:	687a      	ldr	r2, [r7, #4]
  407f42:	683b      	ldr	r3, [r7, #0]
  407f44:	429a      	cmp	r2, r3
  407f46:	d206      	bcs.n	407f56 <prvInsertTimerInActiveList+0x62>
  407f48:	68ba      	ldr	r2, [r7, #8]
  407f4a:	683b      	ldr	r3, [r7, #0]
  407f4c:	429a      	cmp	r2, r3
  407f4e:	d302      	bcc.n	407f56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  407f50:	2301      	movs	r3, #1
  407f52:	617b      	str	r3, [r7, #20]
  407f54:	e007      	b.n	407f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  407f56:	4b08      	ldr	r3, [pc, #32]	; (407f78 <prvInsertTimerInActiveList+0x84>)
  407f58:	681a      	ldr	r2, [r3, #0]
  407f5a:	68fb      	ldr	r3, [r7, #12]
  407f5c:	3304      	adds	r3, #4
  407f5e:	4610      	mov	r0, r2
  407f60:	4619      	mov	r1, r3
  407f62:	4b04      	ldr	r3, [pc, #16]	; (407f74 <prvInsertTimerInActiveList+0x80>)
  407f64:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  407f66:	697b      	ldr	r3, [r7, #20]
}
  407f68:	4618      	mov	r0, r3
  407f6a:	3718      	adds	r7, #24
  407f6c:	46bd      	mov	sp, r7
  407f6e:	bd80      	pop	{r7, pc}
  407f70:	20014ec0 	.word	0x20014ec0
  407f74:	004060e1 	.word	0x004060e1
  407f78:	20014ebc 	.word	0x20014ebc

00407f7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  407f7c:	b590      	push	{r4, r7, lr}
  407f7e:	b08b      	sub	sp, #44	; 0x2c
  407f80:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  407f82:	1d3b      	adds	r3, r7, #4
  407f84:	4618      	mov	r0, r3
  407f86:	4b3b      	ldr	r3, [pc, #236]	; (408074 <prvProcessReceivedCommands+0xf8>)
  407f88:	4798      	blx	r3
  407f8a:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  407f8c:	e061      	b.n	408052 <prvProcessReceivedCommands+0xd6>
	{
		pxTimer = xMessage.pxTimer;
  407f8e:	693b      	ldr	r3, [r7, #16]
  407f90:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  407f92:	69bb      	ldr	r3, [r7, #24]
  407f94:	2b00      	cmp	r3, #0
  407f96:	d008      	beq.n	407faa <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  407f98:	69bb      	ldr	r3, [r7, #24]
  407f9a:	695b      	ldr	r3, [r3, #20]
  407f9c:	2b00      	cmp	r3, #0
  407f9e:	d004      	beq.n	407faa <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  407fa0:	69bb      	ldr	r3, [r7, #24]
  407fa2:	3304      	adds	r3, #4
  407fa4:	4618      	mov	r0, r3
  407fa6:	4b34      	ldr	r3, [pc, #208]	; (408078 <prvProcessReceivedCommands+0xfc>)
  407fa8:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  407faa:	68bb      	ldr	r3, [r7, #8]
  407fac:	2b03      	cmp	r3, #3
  407fae:	d84f      	bhi.n	408050 <prvProcessReceivedCommands+0xd4>
  407fb0:	a201      	add	r2, pc, #4	; (adr r2, 407fb8 <prvProcessReceivedCommands+0x3c>)
  407fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407fb6:	bf00      	nop
  407fb8:	00407fc9 	.word	0x00407fc9
  407fbc:	00408051 	.word	0x00408051
  407fc0:	0040801d 	.word	0x0040801d
  407fc4:	00408049 	.word	0x00408049
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  407fc8:	68fa      	ldr	r2, [r7, #12]
  407fca:	69bb      	ldr	r3, [r7, #24]
  407fcc:	699b      	ldr	r3, [r3, #24]
  407fce:	441a      	add	r2, r3
  407fd0:	68fb      	ldr	r3, [r7, #12]
  407fd2:	69b8      	ldr	r0, [r7, #24]
  407fd4:	4611      	mov	r1, r2
  407fd6:	69fa      	ldr	r2, [r7, #28]
  407fd8:	4c28      	ldr	r4, [pc, #160]	; (40807c <prvProcessReceivedCommands+0x100>)
  407fda:	47a0      	blx	r4
  407fdc:	4603      	mov	r3, r0
  407fde:	2b01      	cmp	r3, #1
  407fe0:	d11b      	bne.n	40801a <prvProcessReceivedCommands+0x9e>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  407fe2:	69bb      	ldr	r3, [r7, #24]
  407fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  407fe6:	69b8      	ldr	r0, [r7, #24]
  407fe8:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  407fea:	69bb      	ldr	r3, [r7, #24]
  407fec:	69db      	ldr	r3, [r3, #28]
  407fee:	2b01      	cmp	r3, #1
  407ff0:	d113      	bne.n	40801a <prvProcessReceivedCommands+0x9e>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  407ff2:	68fa      	ldr	r2, [r7, #12]
  407ff4:	69bb      	ldr	r3, [r7, #24]
  407ff6:	699b      	ldr	r3, [r3, #24]
  407ff8:	4413      	add	r3, r2
  407ffa:	2200      	movs	r2, #0
  407ffc:	9200      	str	r2, [sp, #0]
  407ffe:	69b8      	ldr	r0, [r7, #24]
  408000:	2100      	movs	r1, #0
  408002:	461a      	mov	r2, r3
  408004:	2300      	movs	r3, #0
  408006:	4c1e      	ldr	r4, [pc, #120]	; (408080 <prvProcessReceivedCommands+0x104>)
  408008:	47a0      	blx	r4
  40800a:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  40800c:	697b      	ldr	r3, [r7, #20]
  40800e:	2b00      	cmp	r3, #0
  408010:	d103      	bne.n	40801a <prvProcessReceivedCommands+0x9e>
  408012:	4b1c      	ldr	r3, [pc, #112]	; (408084 <prvProcessReceivedCommands+0x108>)
  408014:	4798      	blx	r3
  408016:	bf00      	nop
  408018:	e7fd      	b.n	408016 <prvProcessReceivedCommands+0x9a>
						( void ) xResult;
					}
				}
				break;
  40801a:	e01a      	b.n	408052 <prvProcessReceivedCommands+0xd6>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  40801c:	68fa      	ldr	r2, [r7, #12]
  40801e:	69bb      	ldr	r3, [r7, #24]
  408020:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  408022:	69bb      	ldr	r3, [r7, #24]
  408024:	699b      	ldr	r3, [r3, #24]
  408026:	2b00      	cmp	r3, #0
  408028:	d103      	bne.n	408032 <prvProcessReceivedCommands+0xb6>
  40802a:	4b16      	ldr	r3, [pc, #88]	; (408084 <prvProcessReceivedCommands+0x108>)
  40802c:	4798      	blx	r3
  40802e:	bf00      	nop
  408030:	e7fd      	b.n	40802e <prvProcessReceivedCommands+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  408032:	69bb      	ldr	r3, [r7, #24]
  408034:	699a      	ldr	r2, [r3, #24]
  408036:	69fb      	ldr	r3, [r7, #28]
  408038:	4413      	add	r3, r2
  40803a:	69b8      	ldr	r0, [r7, #24]
  40803c:	4619      	mov	r1, r3
  40803e:	69fa      	ldr	r2, [r7, #28]
  408040:	69fb      	ldr	r3, [r7, #28]
  408042:	4c0e      	ldr	r4, [pc, #56]	; (40807c <prvProcessReceivedCommands+0x100>)
  408044:	47a0      	blx	r4
				break;
  408046:	e004      	b.n	408052 <prvProcessReceivedCommands+0xd6>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  408048:	69b8      	ldr	r0, [r7, #24]
  40804a:	4b0f      	ldr	r3, [pc, #60]	; (408088 <prvProcessReceivedCommands+0x10c>)
  40804c:	4798      	blx	r3
				break;
  40804e:	e000      	b.n	408052 <prvProcessReceivedCommands+0xd6>

			default	:
				/* Don't expect to get here. */
				break;
  408050:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  408052:	4b0e      	ldr	r3, [pc, #56]	; (40808c <prvProcessReceivedCommands+0x110>)
  408054:	681a      	ldr	r2, [r3, #0]
  408056:	f107 0308 	add.w	r3, r7, #8
  40805a:	4610      	mov	r0, r2
  40805c:	4619      	mov	r1, r3
  40805e:	2200      	movs	r2, #0
  408060:	2300      	movs	r3, #0
  408062:	4c0b      	ldr	r4, [pc, #44]	; (408090 <prvProcessReceivedCommands+0x114>)
  408064:	47a0      	blx	r4
  408066:	4603      	mov	r3, r0
  408068:	2b00      	cmp	r3, #0
  40806a:	d190      	bne.n	407f8e <prvProcessReceivedCommands+0x12>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
  40806c:	3724      	adds	r7, #36	; 0x24
  40806e:	46bd      	mov	sp, r7
  408070:	bd90      	pop	{r4, r7, pc}
  408072:	bf00      	nop
  408074:	00407ea9 	.word	0x00407ea9
  408078:	00406151 	.word	0x00406151
  40807c:	00407ef5 	.word	0x00407ef5
  408080:	00407c91 	.word	0x00407c91
  408084:	0040636d 	.word	0x0040636d
  408088:	00406529 	.word	0x00406529
  40808c:	20014ec4 	.word	0x20014ec4
  408090:	00406a49 	.word	0x00406a49

00408094 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  408094:	b590      	push	{r4, r7, lr}
  408096:	b08b      	sub	sp, #44	; 0x2c
  408098:	af02      	add	r7, sp, #8
  40809a:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40809c:	e03e      	b.n	40811c <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40809e:	4b28      	ldr	r3, [pc, #160]	; (408140 <prvSwitchTimerLists+0xac>)
  4080a0:	681b      	ldr	r3, [r3, #0]
  4080a2:	68db      	ldr	r3, [r3, #12]
  4080a4:	681b      	ldr	r3, [r3, #0]
  4080a6:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4080a8:	4b25      	ldr	r3, [pc, #148]	; (408140 <prvSwitchTimerLists+0xac>)
  4080aa:	681b      	ldr	r3, [r3, #0]
  4080ac:	68db      	ldr	r3, [r3, #12]
  4080ae:	68db      	ldr	r3, [r3, #12]
  4080b0:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  4080b2:	69bb      	ldr	r3, [r7, #24]
  4080b4:	3304      	adds	r3, #4
  4080b6:	4618      	mov	r0, r3
  4080b8:	4b22      	ldr	r3, [pc, #136]	; (408144 <prvSwitchTimerLists+0xb0>)
  4080ba:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4080bc:	69bb      	ldr	r3, [r7, #24]
  4080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4080c0:	69b8      	ldr	r0, [r7, #24]
  4080c2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4080c4:	69bb      	ldr	r3, [r7, #24]
  4080c6:	69db      	ldr	r3, [r3, #28]
  4080c8:	2b01      	cmp	r3, #1
  4080ca:	d127      	bne.n	40811c <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4080cc:	69bb      	ldr	r3, [r7, #24]
  4080ce:	699a      	ldr	r2, [r3, #24]
  4080d0:	69fb      	ldr	r3, [r7, #28]
  4080d2:	4413      	add	r3, r2
  4080d4:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  4080d6:	697a      	ldr	r2, [r7, #20]
  4080d8:	69fb      	ldr	r3, [r7, #28]
  4080da:	429a      	cmp	r2, r3
  4080dc:	d90e      	bls.n	4080fc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4080de:	69bb      	ldr	r3, [r7, #24]
  4080e0:	697a      	ldr	r2, [r7, #20]
  4080e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4080e4:	69bb      	ldr	r3, [r7, #24]
  4080e6:	69ba      	ldr	r2, [r7, #24]
  4080e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4080ea:	4b15      	ldr	r3, [pc, #84]	; (408140 <prvSwitchTimerLists+0xac>)
  4080ec:	681a      	ldr	r2, [r3, #0]
  4080ee:	69bb      	ldr	r3, [r7, #24]
  4080f0:	3304      	adds	r3, #4
  4080f2:	4610      	mov	r0, r2
  4080f4:	4619      	mov	r1, r3
  4080f6:	4b14      	ldr	r3, [pc, #80]	; (408148 <prvSwitchTimerLists+0xb4>)
  4080f8:	4798      	blx	r3
  4080fa:	e00f      	b.n	40811c <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4080fc:	2300      	movs	r3, #0
  4080fe:	9300      	str	r3, [sp, #0]
  408100:	69b8      	ldr	r0, [r7, #24]
  408102:	2100      	movs	r1, #0
  408104:	69fa      	ldr	r2, [r7, #28]
  408106:	2300      	movs	r3, #0
  408108:	4c10      	ldr	r4, [pc, #64]	; (40814c <prvSwitchTimerLists+0xb8>)
  40810a:	47a0      	blx	r4
  40810c:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  40810e:	693b      	ldr	r3, [r7, #16]
  408110:	2b00      	cmp	r3, #0
  408112:	d103      	bne.n	40811c <prvSwitchTimerLists+0x88>
  408114:	4b0e      	ldr	r3, [pc, #56]	; (408150 <prvSwitchTimerLists+0xbc>)
  408116:	4798      	blx	r3
  408118:	bf00      	nop
  40811a:	e7fd      	b.n	408118 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40811c:	4b08      	ldr	r3, [pc, #32]	; (408140 <prvSwitchTimerLists+0xac>)
  40811e:	681b      	ldr	r3, [r3, #0]
  408120:	681b      	ldr	r3, [r3, #0]
  408122:	2b00      	cmp	r3, #0
  408124:	d1bb      	bne.n	40809e <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  408126:	4b06      	ldr	r3, [pc, #24]	; (408140 <prvSwitchTimerLists+0xac>)
  408128:	681b      	ldr	r3, [r3, #0]
  40812a:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  40812c:	4b09      	ldr	r3, [pc, #36]	; (408154 <prvSwitchTimerLists+0xc0>)
  40812e:	681a      	ldr	r2, [r3, #0]
  408130:	4b03      	ldr	r3, [pc, #12]	; (408140 <prvSwitchTimerLists+0xac>)
  408132:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
  408134:	4b07      	ldr	r3, [pc, #28]	; (408154 <prvSwitchTimerLists+0xc0>)
  408136:	68fa      	ldr	r2, [r7, #12]
  408138:	601a      	str	r2, [r3, #0]
}
  40813a:	3724      	adds	r7, #36	; 0x24
  40813c:	46bd      	mov	sp, r7
  40813e:	bd90      	pop	{r4, r7, pc}
  408140:	20014ebc 	.word	0x20014ebc
  408144:	00406151 	.word	0x00406151
  408148:	004060e1 	.word	0x004060e1
  40814c:	00407c91 	.word	0x00407c91
  408150:	0040636d 	.word	0x0040636d
  408154:	20014ec0 	.word	0x20014ec0

00408158 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  408158:	b580      	push	{r7, lr}
  40815a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40815c:	4b0e      	ldr	r3, [pc, #56]	; (408198 <prvCheckForValidListAndQueue+0x40>)
  40815e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  408160:	4b0e      	ldr	r3, [pc, #56]	; (40819c <prvCheckForValidListAndQueue+0x44>)
  408162:	681b      	ldr	r3, [r3, #0]
  408164:	2b00      	cmp	r3, #0
  408166:	d113      	bne.n	408190 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  408168:	480d      	ldr	r0, [pc, #52]	; (4081a0 <prvCheckForValidListAndQueue+0x48>)
  40816a:	4b0e      	ldr	r3, [pc, #56]	; (4081a4 <prvCheckForValidListAndQueue+0x4c>)
  40816c:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  40816e:	480e      	ldr	r0, [pc, #56]	; (4081a8 <prvCheckForValidListAndQueue+0x50>)
  408170:	4b0c      	ldr	r3, [pc, #48]	; (4081a4 <prvCheckForValidListAndQueue+0x4c>)
  408172:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  408174:	4b0d      	ldr	r3, [pc, #52]	; (4081ac <prvCheckForValidListAndQueue+0x54>)
  408176:	4a0a      	ldr	r2, [pc, #40]	; (4081a0 <prvCheckForValidListAndQueue+0x48>)
  408178:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40817a:	4b0d      	ldr	r3, [pc, #52]	; (4081b0 <prvCheckForValidListAndQueue+0x58>)
  40817c:	4a0a      	ldr	r2, [pc, #40]	; (4081a8 <prvCheckForValidListAndQueue+0x50>)
  40817e:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  408180:	2005      	movs	r0, #5
  408182:	210c      	movs	r1, #12
  408184:	2200      	movs	r2, #0
  408186:	4b0b      	ldr	r3, [pc, #44]	; (4081b4 <prvCheckForValidListAndQueue+0x5c>)
  408188:	4798      	blx	r3
  40818a:	4602      	mov	r2, r0
  40818c:	4b03      	ldr	r3, [pc, #12]	; (40819c <prvCheckForValidListAndQueue+0x44>)
  40818e:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  408190:	4b09      	ldr	r3, [pc, #36]	; (4081b8 <prvCheckForValidListAndQueue+0x60>)
  408192:	4798      	blx	r3
}
  408194:	bd80      	pop	{r7, pc}
  408196:	bf00      	nop
  408198:	00406329 	.word	0x00406329
  40819c:	20014ec4 	.word	0x20014ec4
  4081a0:	20014e94 	.word	0x20014e94
  4081a4:	00406039 	.word	0x00406039
  4081a8:	20014ea8 	.word	0x20014ea8
  4081ac:	20014ebc 	.word	0x20014ebc
  4081b0:	20014ec0 	.word	0x20014ec0
  4081b4:	00406785 	.word	0x00406785
  4081b8:	00406345 	.word	0x00406345

004081bc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer )
{
  4081bc:	b580      	push	{r7, lr}
  4081be:	b084      	sub	sp, #16
  4081c0:	af00      	add	r7, sp, #0
  4081c2:	6078      	str	r0, [r7, #4]
portBASE_TYPE xTimerIsInActiveList;
xTIMER *pxTimer = ( xTIMER * ) xTimer;
  4081c4:	687b      	ldr	r3, [r7, #4]
  4081c6:	60fb      	str	r3, [r7, #12]

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
  4081c8:	4b08      	ldr	r3, [pc, #32]	; (4081ec <xTimerIsTimerActive+0x30>)
  4081ca:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
  4081cc:	68fb      	ldr	r3, [r7, #12]
  4081ce:	695b      	ldr	r3, [r3, #20]
  4081d0:	2b00      	cmp	r3, #0
  4081d2:	bf0c      	ite	eq
  4081d4:	2300      	moveq	r3, #0
  4081d6:	2301      	movne	r3, #1
  4081d8:	b2db      	uxtb	r3, r3
  4081da:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
  4081dc:	4b04      	ldr	r3, [pc, #16]	; (4081f0 <xTimerIsTimerActive+0x34>)
  4081de:	4798      	blx	r3

	return xTimerIsInActiveList;
  4081e0:	68bb      	ldr	r3, [r7, #8]
}
  4081e2:	4618      	mov	r0, r3
  4081e4:	3710      	adds	r7, #16
  4081e6:	46bd      	mov	sp, r7
  4081e8:	bd80      	pop	{r7, pc}
  4081ea:	bf00      	nop
  4081ec:	00406329 	.word	0x00406329
  4081f0:	00406345 	.word	0x00406345

004081f4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4081f4:	b580      	push	{r7, lr}
  4081f6:	b086      	sub	sp, #24
  4081f8:	af00      	add	r7, sp, #0
  4081fa:	60f8      	str	r0, [r7, #12]
  4081fc:	60b9      	str	r1, [r7, #8]
  4081fe:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  408200:	2300      	movs	r3, #0
  408202:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  408204:	68fb      	ldr	r3, [r7, #12]
  408206:	2b01      	cmp	r3, #1
  408208:	d008      	beq.n	40821c <_write+0x28>
  40820a:	68fb      	ldr	r3, [r7, #12]
  40820c:	2b02      	cmp	r3, #2
  40820e:	d005      	beq.n	40821c <_write+0x28>
  408210:	68fb      	ldr	r3, [r7, #12]
  408212:	2b03      	cmp	r3, #3
  408214:	d002      	beq.n	40821c <_write+0x28>
		return -1;
  408216:	f04f 33ff 	mov.w	r3, #4294967295
  40821a:	e01b      	b.n	408254 <_write+0x60>
	}

	for (; len != 0; --len) {
  40821c:	e016      	b.n	40824c <_write+0x58>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40821e:	4b0f      	ldr	r3, [pc, #60]	; (40825c <_write+0x68>)
  408220:	681a      	ldr	r2, [r3, #0]
  408222:	4b0f      	ldr	r3, [pc, #60]	; (408260 <_write+0x6c>)
  408224:	6819      	ldr	r1, [r3, #0]
  408226:	68bb      	ldr	r3, [r7, #8]
  408228:	1c58      	adds	r0, r3, #1
  40822a:	60b8      	str	r0, [r7, #8]
  40822c:	781b      	ldrb	r3, [r3, #0]
  40822e:	4608      	mov	r0, r1
  408230:	4619      	mov	r1, r3
  408232:	4790      	blx	r2
  408234:	4603      	mov	r3, r0
  408236:	2b00      	cmp	r3, #0
  408238:	da02      	bge.n	408240 <_write+0x4c>
			return -1;
  40823a:	f04f 33ff 	mov.w	r3, #4294967295
  40823e:	e009      	b.n	408254 <_write+0x60>
		}
		++nChars;
  408240:	697b      	ldr	r3, [r7, #20]
  408242:	3301      	adds	r3, #1
  408244:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  408246:	687b      	ldr	r3, [r7, #4]
  408248:	3b01      	subs	r3, #1
  40824a:	607b      	str	r3, [r7, #4]
  40824c:	687b      	ldr	r3, [r7, #4]
  40824e:	2b00      	cmp	r3, #0
  408250:	d1e5      	bne.n	40821e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  408252:	697b      	ldr	r3, [r7, #20]
}
  408254:	4618      	mov	r0, r3
  408256:	3718      	adds	r7, #24
  408258:	46bd      	mov	sp, r7
  40825a:	bd80      	pop	{r7, pc}
  40825c:	20016038 	.word	0x20016038
  408260:	2001603c 	.word	0x2001603c

00408264 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  408264:	b480      	push	{r7}
  408266:	b083      	sub	sp, #12
  408268:	af00      	add	r7, sp, #0
  40826a:	6078      	str	r0, [r7, #4]
  40826c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  40826e:	683a      	ldr	r2, [r7, #0]
  408270:	f240 2302 	movw	r3, #514	; 0x202
  408274:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  408276:	687a      	ldr	r2, [r7, #4]
  408278:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
  40827a:	370c      	adds	r7, #12
  40827c:	46bd      	mov	sp, r7
  40827e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408282:	4770      	bx	lr

00408284 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  408284:	b480      	push	{r7}
  408286:	b083      	sub	sp, #12
  408288:	af00      	add	r7, sp, #0
  40828a:	6078      	str	r0, [r7, #4]
  40828c:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  40828e:	683b      	ldr	r3, [r7, #0]
  408290:	2b00      	cmp	r3, #0
  408292:	d006      	beq.n	4082a2 <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  408294:	687b      	ldr	r3, [r7, #4]
  408296:	685b      	ldr	r3, [r3, #4]
  408298:	f043 0201 	orr.w	r2, r3, #1
  40829c:	687b      	ldr	r3, [r7, #4]
  40829e:	605a      	str	r2, [r3, #4]
  4082a0:	e005      	b.n	4082ae <rtc_set_hour_mode+0x2a>
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4082a2:	687b      	ldr	r3, [r7, #4]
  4082a4:	685b      	ldr	r3, [r3, #4]
  4082a6:	f023 0201 	bic.w	r2, r3, #1
  4082aa:	687b      	ldr	r3, [r7, #4]
  4082ac:	605a      	str	r2, [r3, #4]
	}
}
  4082ae:	370c      	adds	r7, #12
  4082b0:	46bd      	mov	sp, r7
  4082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4082b6:	4770      	bx	lr

004082b8 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4082b8:	b480      	push	{r7}
  4082ba:	b087      	sub	sp, #28
  4082bc:	af00      	add	r7, sp, #0
  4082be:	60f8      	str	r0, [r7, #12]
  4082c0:	60b9      	str	r1, [r7, #8]
  4082c2:	607a      	str	r2, [r7, #4]
  4082c4:	603b      	str	r3, [r7, #0]
	uint32_t ul_time = 0;
  4082c6:	2300      	movs	r3, #0
  4082c8:	617b      	str	r3, [r7, #20]

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4082ca:	68fb      	ldr	r3, [r7, #12]
  4082cc:	685b      	ldr	r3, [r3, #4]
  4082ce:	f003 0301 	and.w	r3, r3, #1
  4082d2:	2b00      	cmp	r3, #0
  4082d4:	d009      	beq.n	4082ea <rtc_set_time+0x32>
		if (ul_hour > 12) {
  4082d6:	68bb      	ldr	r3, [r7, #8]
  4082d8:	2b0c      	cmp	r3, #12
  4082da:	d906      	bls.n	4082ea <rtc_set_time+0x32>
			ul_hour -= 12;
  4082dc:	68bb      	ldr	r3, [r7, #8]
  4082de:	3b0c      	subs	r3, #12
  4082e0:	60bb      	str	r3, [r7, #8]
			ul_time |= RTC_TIMR_AMPM;
  4082e2:	697b      	ldr	r3, [r7, #20]
  4082e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  4082e8:	617b      	str	r3, [r7, #20]
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4082ea:	68ba      	ldr	r2, [r7, #8]
  4082ec:	4b33      	ldr	r3, [pc, #204]	; (4083bc <rtc_set_time+0x104>)
  4082ee:	fba3 1302 	umull	r1, r3, r3, r2
  4082f2:	08db      	lsrs	r3, r3, #3
  4082f4:	0518      	lsls	r0, r3, #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4082f6:	68b9      	ldr	r1, [r7, #8]
  4082f8:	4b30      	ldr	r3, [pc, #192]	; (4083bc <rtc_set_time+0x104>)
  4082fa:	fba3 2301 	umull	r2, r3, r3, r1
  4082fe:	08da      	lsrs	r2, r3, #3
  408300:	4613      	mov	r3, r2
  408302:	009b      	lsls	r3, r3, #2
  408304:	4413      	add	r3, r2
  408306:	005b      	lsls	r3, r3, #1
  408308:	1aca      	subs	r2, r1, r3
  40830a:	0413      	lsls	r3, r2, #16
			ul_time |= RTC_TIMR_AMPM;
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40830c:	4303      	orrs	r3, r0
  40830e:	697a      	ldr	r2, [r7, #20]
  408310:	4313      	orrs	r3, r2
  408312:	617b      	str	r3, [r7, #20]
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  408314:	687a      	ldr	r2, [r7, #4]
  408316:	4b29      	ldr	r3, [pc, #164]	; (4083bc <rtc_set_time+0x104>)
  408318:	fba3 1302 	umull	r1, r3, r3, r2
  40831c:	08db      	lsrs	r3, r3, #3
  40831e:	0318      	lsls	r0, r3, #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  408320:	6879      	ldr	r1, [r7, #4]
  408322:	4b26      	ldr	r3, [pc, #152]	; (4083bc <rtc_set_time+0x104>)
  408324:	fba3 2301 	umull	r2, r3, r3, r1
  408328:	08da      	lsrs	r2, r3, #3
  40832a:	4613      	mov	r3, r2
  40832c:	009b      	lsls	r3, r3, #2
  40832e:	4413      	add	r3, r2
  408330:	005b      	lsls	r3, r3, #1
  408332:	1aca      	subs	r2, r1, r3
  408334:	0213      	lsls	r3, r2, #8
	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  408336:	4303      	orrs	r3, r0
  408338:	697a      	ldr	r2, [r7, #20]
  40833a:	4313      	orrs	r3, r2
  40833c:	617b      	str	r3, [r7, #20]
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40833e:	683a      	ldr	r2, [r7, #0]
  408340:	4b1e      	ldr	r3, [pc, #120]	; (4083bc <rtc_set_time+0x104>)
  408342:	fba3 1302 	umull	r1, r3, r3, r2
  408346:	08db      	lsrs	r3, r3, #3
  408348:	0118      	lsls	r0, r3, #4
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40834a:	6839      	ldr	r1, [r7, #0]
  40834c:	4b1b      	ldr	r3, [pc, #108]	; (4083bc <rtc_set_time+0x104>)
  40834e:	fba3 2301 	umull	r2, r3, r3, r1
  408352:	08da      	lsrs	r2, r3, #3
  408354:	4613      	mov	r3, r2
  408356:	009b      	lsls	r3, r3, #2
  408358:	4413      	add	r3, r2
  40835a:	005b      	lsls	r3, r3, #1
  40835c:	1aca      	subs	r2, r1, r3
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40835e:	ea40 0302 	orr.w	r3, r0, r2
  408362:	697a      	ldr	r2, [r7, #20]
  408364:	4313      	orrs	r3, r2
  408366:	617b      	str	r3, [r7, #20]
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);

	/* Update time register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  408368:	68fb      	ldr	r3, [r7, #12]
  40836a:	681b      	ldr	r3, [r3, #0]
  40836c:	f043 0201 	orr.w	r2, r3, #1
  408370:	68fb      	ldr	r3, [r7, #12]
  408372:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  408374:	bf00      	nop
  408376:	68fb      	ldr	r3, [r7, #12]
  408378:	699b      	ldr	r3, [r3, #24]
  40837a:	f003 0301 	and.w	r3, r3, #1
  40837e:	2b00      	cmp	r3, #0
  408380:	d0f9      	beq.n	408376 <rtc_set_time+0xbe>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  408382:	68fb      	ldr	r3, [r7, #12]
  408384:	2201      	movs	r2, #1
  408386:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_TIMR = ul_time;
  408388:	68fb      	ldr	r3, [r7, #12]
  40838a:	697a      	ldr	r2, [r7, #20]
  40838c:	609a      	str	r2, [r3, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  40838e:	68fb      	ldr	r3, [r7, #12]
  408390:	681b      	ldr	r3, [r3, #0]
  408392:	f023 0201 	bic.w	r2, r3, #1
  408396:	68fb      	ldr	r3, [r7, #12]
  408398:	601a      	str	r2, [r3, #0]
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  40839a:	68fb      	ldr	r3, [r7, #12]
  40839c:	69db      	ldr	r3, [r3, #28]
  40839e:	f043 0204 	orr.w	r2, r3, #4
  4083a2:	68fb      	ldr	r3, [r7, #12]
  4083a4:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4083a6:	68fb      	ldr	r3, [r7, #12]
  4083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4083aa:	f003 0301 	and.w	r3, r3, #1
}
  4083ae:	4618      	mov	r0, r3
  4083b0:	371c      	adds	r7, #28
  4083b2:	46bd      	mov	sp, r7
  4083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4083b8:	4770      	bx	lr
  4083ba:	bf00      	nop
  4083bc:	cccccccd 	.word	0xcccccccd

004083c0 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4083c0:	b480      	push	{r7}
  4083c2:	b087      	sub	sp, #28
  4083c4:	af00      	add	r7, sp, #0
  4083c6:	60f8      	str	r0, [r7, #12]
  4083c8:	60b9      	str	r1, [r7, #8]
  4083ca:	607a      	str	r2, [r7, #4]
  4083cc:	603b      	str	r3, [r7, #0]
	uint32_t ul_date = 0;
  4083ce:	2300      	movs	r3, #0
  4083d0:	617b      	str	r3, [r7, #20]

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4083d2:	68ba      	ldr	r2, [r7, #8]
  4083d4:	4b46      	ldr	r3, [pc, #280]	; (4084f0 <rtc_set_date+0x130>)
  4083d6:	fba3 1302 	umull	r1, r3, r3, r2
  4083da:	099b      	lsrs	r3, r3, #6
  4083dc:	0118      	lsls	r0, r3, #4
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4083de:	68ba      	ldr	r2, [r7, #8]
  4083e0:	4b44      	ldr	r3, [pc, #272]	; (4084f4 <rtc_set_date+0x134>)
  4083e2:	fba3 1302 	umull	r1, r3, r3, r2
  4083e6:	0959      	lsrs	r1, r3, #5
  4083e8:	4b43      	ldr	r3, [pc, #268]	; (4084f8 <rtc_set_date+0x138>)
  4083ea:	fba3 2301 	umull	r2, r3, r3, r1
  4083ee:	08da      	lsrs	r2, r3, #3
  4083f0:	4613      	mov	r3, r2
  4083f2:	009b      	lsls	r3, r3, #2
  4083f4:	4413      	add	r3, r2
  4083f6:	005b      	lsls	r3, r3, #1
  4083f8:	1aca      	subs	r2, r1, r3
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  4083fa:	ea40 0302 	orr.w	r3, r0, r2
		uint32_t ul_day, uint32_t ul_week)
{
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4083fe:	697a      	ldr	r2, [r7, #20]
  408400:	4313      	orrs	r3, r2
  408402:	617b      	str	r3, [r7, #20]
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  408404:	68ba      	ldr	r2, [r7, #8]
  408406:	4b3c      	ldr	r3, [pc, #240]	; (4084f8 <rtc_set_date+0x138>)
  408408:	fba3 1302 	umull	r1, r3, r3, r2
  40840c:	08d9      	lsrs	r1, r3, #3
  40840e:	4b3a      	ldr	r3, [pc, #232]	; (4084f8 <rtc_set_date+0x138>)
  408410:	fba3 2301 	umull	r2, r3, r3, r1
  408414:	08da      	lsrs	r2, r3, #3
  408416:	4613      	mov	r3, r2
  408418:	009b      	lsls	r3, r3, #2
  40841a:	4413      	add	r3, r2
  40841c:	005b      	lsls	r3, r3, #1
  40841e:	1aca      	subs	r2, r1, r3
  408420:	0310      	lsls	r0, r2, #12
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  408422:	68b9      	ldr	r1, [r7, #8]
  408424:	4b34      	ldr	r3, [pc, #208]	; (4084f8 <rtc_set_date+0x138>)
  408426:	fba3 2301 	umull	r2, r3, r3, r1
  40842a:	08da      	lsrs	r2, r3, #3
  40842c:	4613      	mov	r3, r2
  40842e:	009b      	lsls	r3, r3, #2
  408430:	4413      	add	r3, r2
  408432:	005b      	lsls	r3, r3, #1
  408434:	1aca      	subs	r2, r1, r3
  408436:	0213      	lsls	r3, r2, #8
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  408438:	4303      	orrs	r3, r0
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40843a:	697a      	ldr	r2, [r7, #20]
  40843c:	4313      	orrs	r3, r2
  40843e:	617b      	str	r3, [r7, #20]
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  408440:	687a      	ldr	r2, [r7, #4]
  408442:	4b2d      	ldr	r3, [pc, #180]	; (4084f8 <rtc_set_date+0x138>)
  408444:	fba3 1302 	umull	r1, r3, r3, r2
  408448:	08db      	lsrs	r3, r3, #3
  40844a:	0518      	lsls	r0, r3, #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40844c:	6879      	ldr	r1, [r7, #4]
  40844e:	4b2a      	ldr	r3, [pc, #168]	; (4084f8 <rtc_set_date+0x138>)
  408450:	fba3 2301 	umull	r2, r3, r3, r1
  408454:	08da      	lsrs	r2, r3, #3
  408456:	4613      	mov	r3, r2
  408458:	009b      	lsls	r3, r3, #2
  40845a:	4413      	add	r3, r2
  40845c:	005b      	lsls	r3, r3, #1
  40845e:	1aca      	subs	r2, r1, r3
  408460:	0413      	lsls	r3, r2, #16
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  408462:	4303      	orrs	r3, r0
  408464:	697a      	ldr	r2, [r7, #20]
  408466:	4313      	orrs	r3, r2
  408468:	617b      	str	r3, [r7, #20]
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40846a:	6a3b      	ldr	r3, [r7, #32]
  40846c:	055b      	lsls	r3, r3, #21
  40846e:	697a      	ldr	r2, [r7, #20]
  408470:	4313      	orrs	r3, r2
  408472:	617b      	str	r3, [r7, #20]

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  408474:	683a      	ldr	r2, [r7, #0]
  408476:	4b20      	ldr	r3, [pc, #128]	; (4084f8 <rtc_set_date+0x138>)
  408478:	fba3 1302 	umull	r1, r3, r3, r2
  40847c:	08db      	lsrs	r3, r3, #3
  40847e:	0718      	lsls	r0, r3, #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  408480:	6839      	ldr	r1, [r7, #0]
  408482:	4b1d      	ldr	r3, [pc, #116]	; (4084f8 <rtc_set_date+0x138>)
  408484:	fba3 2301 	umull	r2, r3, r3, r1
  408488:	08da      	lsrs	r2, r3, #3
  40848a:	4613      	mov	r3, r2
  40848c:	009b      	lsls	r3, r3, #2
  40848e:	4413      	add	r3, r2
  408490:	005b      	lsls	r3, r3, #1
  408492:	1aca      	subs	r2, r1, r3
  408494:	0613      	lsls	r3, r2, #24

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  408496:	4303      	orrs	r3, r0
  408498:	697a      	ldr	r2, [r7, #20]
  40849a:	4313      	orrs	r3, r2
  40849c:	617b      	str	r3, [r7, #20]
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);

	/* Update calendar register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40849e:	68fb      	ldr	r3, [r7, #12]
  4084a0:	681b      	ldr	r3, [r3, #0]
  4084a2:	f043 0202 	orr.w	r2, r3, #2
  4084a6:	68fb      	ldr	r3, [r7, #12]
  4084a8:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4084aa:	bf00      	nop
  4084ac:	68fb      	ldr	r3, [r7, #12]
  4084ae:	699b      	ldr	r3, [r3, #24]
  4084b0:	f003 0301 	and.w	r3, r3, #1
  4084b4:	2b00      	cmp	r3, #0
  4084b6:	d0f9      	beq.n	4084ac <rtc_set_date+0xec>

	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4084b8:	68fb      	ldr	r3, [r7, #12]
  4084ba:	2201      	movs	r2, #1
  4084bc:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_CALR = ul_date;
  4084be:	68fb      	ldr	r3, [r7, #12]
  4084c0:	697a      	ldr	r2, [r7, #20]
  4084c2:	60da      	str	r2, [r3, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4084c4:	68fb      	ldr	r3, [r7, #12]
  4084c6:	681b      	ldr	r3, [r3, #0]
  4084c8:	f023 0202 	bic.w	r2, r3, #2
  4084cc:	68fb      	ldr	r3, [r7, #12]
  4084ce:	601a      	str	r2, [r3, #0]
	/* Clear SECENV in SCCR */
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  4084d0:	68fb      	ldr	r3, [r7, #12]
  4084d2:	69db      	ldr	r3, [r3, #28]
  4084d4:	f043 0204 	orr.w	r2, r3, #4
  4084d8:	68fb      	ldr	r3, [r7, #12]
  4084da:	61da      	str	r2, [r3, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4084dc:	68fb      	ldr	r3, [r7, #12]
  4084de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4084e0:	f003 0302 	and.w	r3, r3, #2
}
  4084e4:	4618      	mov	r0, r3
  4084e6:	371c      	adds	r7, #28
  4084e8:	46bd      	mov	sp, r7
  4084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4084ee:	4770      	bx	lr
  4084f0:	10624dd3 	.word	0x10624dd3
  4084f4:	51eb851f 	.word	0x51eb851f
  4084f8:	cccccccd 	.word	0xcccccccd

004084fc <rtc_clear_time_alarm>:
 * \brief Clear the RTC time alarm setting.
 *
 * \param p_rtc Pointer to an RTC instance.
 */
void rtc_clear_time_alarm(Rtc *p_rtc)
{
  4084fc:	b480      	push	{r7}
  4084fe:	b083      	sub	sp, #12
  408500:	af00      	add	r7, sp, #0
  408502:	6078      	str	r0, [r7, #4]
	p_rtc->RTC_TIMALR = 0;
  408504:	687b      	ldr	r3, [r7, #4]
  408506:	2200      	movs	r2, #0
  408508:	611a      	str	r2, [r3, #16]
}
  40850a:	370c      	adds	r7, #12
  40850c:	46bd      	mov	sp, r7
  40850e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408512:	4770      	bx	lr

00408514 <rtc_clear_date_alarm>:
 * \brief Clear the RTC date alarm setting.
 *
 * \param p_rtc Pointer to an RTC instance.
 */
void rtc_clear_date_alarm(Rtc *p_rtc)
{
  408514:	b480      	push	{r7}
  408516:	b083      	sub	sp, #12
  408518:	af00      	add	r7, sp, #0
  40851a:	6078      	str	r0, [r7, #4]
	/* Need a valid value without enabling */
	p_rtc->RTC_CALALR = RTC_CALALR_MONTH(0x01) | RTC_CALALR_DATE(0x01);
  40851c:	687b      	ldr	r3, [r7, #4]
  40851e:	4a03      	ldr	r2, [pc, #12]	; (40852c <rtc_clear_date_alarm+0x18>)
  408520:	615a      	str	r2, [r3, #20]
}
  408522:	370c      	adds	r7, #12
  408524:	46bd      	mov	sp, r7
  408526:	f85d 7b04 	ldr.w	r7, [sp], #4
  40852a:	4770      	bx	lr
  40852c:	01010000 	.word	0x01010000

00408530 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  408530:	b480      	push	{r7}
  408532:	b085      	sub	sp, #20
  408534:	af00      	add	r7, sp, #0
  408536:	6078      	str	r0, [r7, #4]
  408538:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40853a:	2300      	movs	r3, #0
  40853c:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40853e:	687b      	ldr	r3, [r7, #4]
  408540:	22ac      	movs	r2, #172	; 0xac
  408542:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  408544:	683b      	ldr	r3, [r7, #0]
  408546:	681a      	ldr	r2, [r3, #0]
  408548:	683b      	ldr	r3, [r7, #0]
  40854a:	685b      	ldr	r3, [r3, #4]
  40854c:	fbb2 f3f3 	udiv	r3, r2, r3
  408550:	091b      	lsrs	r3, r3, #4
  408552:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  408554:	68fb      	ldr	r3, [r7, #12]
  408556:	2b00      	cmp	r3, #0
  408558:	d003      	beq.n	408562 <uart_init+0x32>
  40855a:	68fb      	ldr	r3, [r7, #12]
  40855c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  408560:	d301      	bcc.n	408566 <uart_init+0x36>
		return 1;
  408562:	2301      	movs	r3, #1
  408564:	e00f      	b.n	408586 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  408566:	687b      	ldr	r3, [r7, #4]
  408568:	68fa      	ldr	r2, [r7, #12]
  40856a:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40856c:	683b      	ldr	r3, [r7, #0]
  40856e:	689a      	ldr	r2, [r3, #8]
  408570:	687b      	ldr	r3, [r7, #4]
  408572:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  408574:	687b      	ldr	r3, [r7, #4]
  408576:	f240 2202 	movw	r2, #514	; 0x202
  40857a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40857e:	687b      	ldr	r3, [r7, #4]
  408580:	2250      	movs	r2, #80	; 0x50
  408582:	601a      	str	r2, [r3, #0]

	return 0;
  408584:	2300      	movs	r3, #0
}
  408586:	4618      	mov	r0, r3
  408588:	3714      	adds	r7, #20
  40858a:	46bd      	mov	sp, r7
  40858c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408590:	4770      	bx	lr
  408592:	bf00      	nop

00408594 <uart_disable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
  408594:	b480      	push	{r7}
  408596:	b083      	sub	sp, #12
  408598:	af00      	add	r7, sp, #0
  40859a:	6078      	str	r0, [r7, #4]
  40859c:	6039      	str	r1, [r7, #0]
	p_uart->UART_IDR = ul_sources;
  40859e:	687b      	ldr	r3, [r7, #4]
  4085a0:	683a      	ldr	r2, [r7, #0]
  4085a2:	60da      	str	r2, [r3, #12]
}
  4085a4:	370c      	adds	r7, #12
  4085a6:	46bd      	mov	sp, r7
  4085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4085ac:	4770      	bx	lr
  4085ae:	bf00      	nop

004085b0 <uart_get_status>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
  4085b0:	b480      	push	{r7}
  4085b2:	b083      	sub	sp, #12
  4085b4:	af00      	add	r7, sp, #0
  4085b6:	6078      	str	r0, [r7, #4]
	return p_uart->UART_SR;
  4085b8:	687b      	ldr	r3, [r7, #4]
  4085ba:	695b      	ldr	r3, [r3, #20]
}
  4085bc:	4618      	mov	r0, r3
  4085be:	370c      	adds	r7, #12
  4085c0:	46bd      	mov	sp, r7
  4085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4085c6:	4770      	bx	lr

004085c8 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  4085c8:	b480      	push	{r7}
  4085ca:	b083      	sub	sp, #12
  4085cc:	af00      	add	r7, sp, #0
  4085ce:	6078      	str	r0, [r7, #4]
  4085d0:	460b      	mov	r3, r1
  4085d2:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4085d4:	687b      	ldr	r3, [r7, #4]
  4085d6:	695b      	ldr	r3, [r3, #20]
  4085d8:	f003 0302 	and.w	r3, r3, #2
  4085dc:	2b00      	cmp	r3, #0
  4085de:	d101      	bne.n	4085e4 <uart_write+0x1c>
		return 1;
  4085e0:	2301      	movs	r3, #1
  4085e2:	e003      	b.n	4085ec <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  4085e4:	78fa      	ldrb	r2, [r7, #3]
  4085e6:	687b      	ldr	r3, [r7, #4]
  4085e8:	61da      	str	r2, [r3, #28]
	return 0;
  4085ea:	2300      	movs	r3, #0
}
  4085ec:	4618      	mov	r0, r3
  4085ee:	370c      	adds	r7, #12
  4085f0:	46bd      	mov	sp, r7
  4085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4085f6:	4770      	bx	lr

004085f8 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  4085f8:	b480      	push	{r7}
  4085fa:	b083      	sub	sp, #12
  4085fc:	af00      	add	r7, sp, #0
  4085fe:	6078      	str	r0, [r7, #4]
  408600:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  408602:	687b      	ldr	r3, [r7, #4]
  408604:	695b      	ldr	r3, [r3, #20]
  408606:	f003 0301 	and.w	r3, r3, #1
  40860a:	2b00      	cmp	r3, #0
  40860c:	d101      	bne.n	408612 <uart_read+0x1a>
		return 1;
  40860e:	2301      	movs	r3, #1
  408610:	e005      	b.n	40861e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  408612:	687b      	ldr	r3, [r7, #4]
  408614:	699b      	ldr	r3, [r3, #24]
  408616:	b2da      	uxtb	r2, r3
  408618:	683b      	ldr	r3, [r7, #0]
  40861a:	701a      	strb	r2, [r3, #0]
	return 0;
  40861c:	2300      	movs	r3, #0
}
  40861e:	4618      	mov	r0, r3
  408620:	370c      	adds	r7, #12
  408622:	46bd      	mov	sp, r7
  408624:	f85d 7b04 	ldr.w	r7, [sp], #4
  408628:	4770      	bx	lr
  40862a:	bf00      	nop

0040862c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40862c:	b580      	push	{r7, lr}
  40862e:	b082      	sub	sp, #8
  408630:	af00      	add	r7, sp, #0
  408632:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  408634:	687b      	ldr	r3, [r7, #4]
  408636:	2b07      	cmp	r3, #7
  408638:	d830      	bhi.n	40869c <osc_enable+0x70>
  40863a:	a201      	add	r2, pc, #4	; (adr r2, 408640 <osc_enable+0x14>)
  40863c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408640:	0040869d 	.word	0x0040869d
  408644:	00408661 	.word	0x00408661
  408648:	00408669 	.word	0x00408669
  40864c:	00408671 	.word	0x00408671
  408650:	00408679 	.word	0x00408679
  408654:	00408681 	.word	0x00408681
  408658:	00408689 	.word	0x00408689
  40865c:	00408693 	.word	0x00408693
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  408660:	2000      	movs	r0, #0
  408662:	4b10      	ldr	r3, [pc, #64]	; (4086a4 <osc_enable+0x78>)
  408664:	4798      	blx	r3
		break;
  408666:	e019      	b.n	40869c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  408668:	2001      	movs	r0, #1
  40866a:	4b0e      	ldr	r3, [pc, #56]	; (4086a4 <osc_enable+0x78>)
  40866c:	4798      	blx	r3
		break;
  40866e:	e015      	b.n	40869c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  408670:	2000      	movs	r0, #0
  408672:	4b0d      	ldr	r3, [pc, #52]	; (4086a8 <osc_enable+0x7c>)
  408674:	4798      	blx	r3
		break;
  408676:	e011      	b.n	40869c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  408678:	2010      	movs	r0, #16
  40867a:	4b0b      	ldr	r3, [pc, #44]	; (4086a8 <osc_enable+0x7c>)
  40867c:	4798      	blx	r3
		break;
  40867e:	e00d      	b.n	40869c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  408680:	2020      	movs	r0, #32
  408682:	4b09      	ldr	r3, [pc, #36]	; (4086a8 <osc_enable+0x7c>)
  408684:	4798      	blx	r3
		break;
  408686:	e009      	b.n	40869c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  408688:	2000      	movs	r0, #0
  40868a:	213e      	movs	r1, #62	; 0x3e
  40868c:	4b07      	ldr	r3, [pc, #28]	; (4086ac <osc_enable+0x80>)
  40868e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  408690:	e004      	b.n	40869c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  408692:	2001      	movs	r0, #1
  408694:	213e      	movs	r1, #62	; 0x3e
  408696:	4b05      	ldr	r3, [pc, #20]	; (4086ac <osc_enable+0x80>)
  408698:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40869a:	bf00      	nop
	}
}
  40869c:	3708      	adds	r7, #8
  40869e:	46bd      	mov	sp, r7
  4086a0:	bd80      	pop	{r7, pc}
  4086a2:	bf00      	nop
  4086a4:	0040948d 	.word	0x0040948d
  4086a8:	004094f9 	.word	0x004094f9
  4086ac:	00409569 	.word	0x00409569

004086b0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4086b0:	b580      	push	{r7, lr}
  4086b2:	b082      	sub	sp, #8
  4086b4:	af00      	add	r7, sp, #0
  4086b6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4086b8:	687b      	ldr	r3, [r7, #4]
  4086ba:	2b07      	cmp	r3, #7
  4086bc:	d826      	bhi.n	40870c <osc_is_ready+0x5c>
  4086be:	a201      	add	r2, pc, #4	; (adr r2, 4086c4 <osc_is_ready+0x14>)
  4086c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4086c4:	004086e5 	.word	0x004086e5
  4086c8:	004086e9 	.word	0x004086e9
  4086cc:	004086e9 	.word	0x004086e9
  4086d0:	004086fb 	.word	0x004086fb
  4086d4:	004086fb 	.word	0x004086fb
  4086d8:	004086fb 	.word	0x004086fb
  4086dc:	004086fb 	.word	0x004086fb
  4086e0:	004086fb 	.word	0x004086fb
	case OSC_SLCK_32K_RC:
		return 1;
  4086e4:	2301      	movs	r3, #1
  4086e6:	e012      	b.n	40870e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4086e8:	4b0b      	ldr	r3, [pc, #44]	; (408718 <osc_is_ready+0x68>)
  4086ea:	4798      	blx	r3
  4086ec:	4603      	mov	r3, r0
  4086ee:	2b00      	cmp	r3, #0
  4086f0:	bf0c      	ite	eq
  4086f2:	2300      	moveq	r3, #0
  4086f4:	2301      	movne	r3, #1
  4086f6:	b2db      	uxtb	r3, r3
  4086f8:	e009      	b.n	40870e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4086fa:	4b08      	ldr	r3, [pc, #32]	; (40871c <osc_is_ready+0x6c>)
  4086fc:	4798      	blx	r3
  4086fe:	4603      	mov	r3, r0
  408700:	2b00      	cmp	r3, #0
  408702:	bf0c      	ite	eq
  408704:	2300      	moveq	r3, #0
  408706:	2301      	movne	r3, #1
  408708:	b2db      	uxtb	r3, r3
  40870a:	e000      	b.n	40870e <osc_is_ready+0x5e>
	}

	return 0;
  40870c:	2300      	movs	r3, #0
}
  40870e:	4618      	mov	r0, r3
  408710:	3708      	adds	r7, #8
  408712:	46bd      	mov	sp, r7
  408714:	bd80      	pop	{r7, pc}
  408716:	bf00      	nop
  408718:	004094c5 	.word	0x004094c5
  40871c:	004095e1 	.word	0x004095e1

00408720 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  408720:	b480      	push	{r7}
  408722:	b083      	sub	sp, #12
  408724:	af00      	add	r7, sp, #0
  408726:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  408728:	687b      	ldr	r3, [r7, #4]
  40872a:	2b07      	cmp	r3, #7
  40872c:	d825      	bhi.n	40877a <osc_get_rate+0x5a>
  40872e:	a201      	add	r2, pc, #4	; (adr r2, 408734 <osc_get_rate+0x14>)
  408730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408734:	00408755 	.word	0x00408755
  408738:	0040875b 	.word	0x0040875b
  40873c:	00408761 	.word	0x00408761
  408740:	00408767 	.word	0x00408767
  408744:	0040876b 	.word	0x0040876b
  408748:	0040876f 	.word	0x0040876f
  40874c:	00408773 	.word	0x00408773
  408750:	00408777 	.word	0x00408777
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  408754:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  408758:	e010      	b.n	40877c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40875a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40875e:	e00d      	b.n	40877c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  408760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  408764:	e00a      	b.n	40877c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  408766:	4b08      	ldr	r3, [pc, #32]	; (408788 <osc_get_rate+0x68>)
  408768:	e008      	b.n	40877c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40876a:	4b08      	ldr	r3, [pc, #32]	; (40878c <osc_get_rate+0x6c>)
  40876c:	e006      	b.n	40877c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40876e:	4b08      	ldr	r3, [pc, #32]	; (408790 <osc_get_rate+0x70>)
  408770:	e004      	b.n	40877c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  408772:	4b07      	ldr	r3, [pc, #28]	; (408790 <osc_get_rate+0x70>)
  408774:	e002      	b.n	40877c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  408776:	4b06      	ldr	r3, [pc, #24]	; (408790 <osc_get_rate+0x70>)
  408778:	e000      	b.n	40877c <osc_get_rate+0x5c>
	}

	return 0;
  40877a:	2300      	movs	r3, #0
}
  40877c:	4618      	mov	r0, r3
  40877e:	370c      	adds	r7, #12
  408780:	46bd      	mov	sp, r7
  408782:	f85d 7b04 	ldr.w	r7, [sp], #4
  408786:	4770      	bx	lr
  408788:	003d0900 	.word	0x003d0900
  40878c:	007a1200 	.word	0x007a1200
  408790:	00b71b00 	.word	0x00b71b00

00408794 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  408794:	b580      	push	{r7, lr}
  408796:	b082      	sub	sp, #8
  408798:	af00      	add	r7, sp, #0
  40879a:	4603      	mov	r3, r0
  40879c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40879e:	bf00      	nop
  4087a0:	79fb      	ldrb	r3, [r7, #7]
  4087a2:	4618      	mov	r0, r3
  4087a4:	4b05      	ldr	r3, [pc, #20]	; (4087bc <osc_wait_ready+0x28>)
  4087a6:	4798      	blx	r3
  4087a8:	4603      	mov	r3, r0
  4087aa:	f083 0301 	eor.w	r3, r3, #1
  4087ae:	b2db      	uxtb	r3, r3
  4087b0:	2b00      	cmp	r3, #0
  4087b2:	d1f5      	bne.n	4087a0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4087b4:	3708      	adds	r7, #8
  4087b6:	46bd      	mov	sp, r7
  4087b8:	bd80      	pop	{r7, pc}
  4087ba:	bf00      	nop
  4087bc:	004086b1 	.word	0x004086b1

004087c0 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4087c0:	b580      	push	{r7, lr}
  4087c2:	b086      	sub	sp, #24
  4087c4:	af00      	add	r7, sp, #0
  4087c6:	60f8      	str	r0, [r7, #12]
  4087c8:	607a      	str	r2, [r7, #4]
  4087ca:	603b      	str	r3, [r7, #0]
  4087cc:	460b      	mov	r3, r1
  4087ce:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4087d0:	7afb      	ldrb	r3, [r7, #11]
  4087d2:	4618      	mov	r0, r3
  4087d4:	4b0d      	ldr	r3, [pc, #52]	; (40880c <pll_config_init+0x4c>)
  4087d6:	4798      	blx	r3
  4087d8:	4602      	mov	r2, r0
  4087da:	687b      	ldr	r3, [r7, #4]
  4087dc:	fbb2 f3f3 	udiv	r3, r2, r3
  4087e0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4087e2:	697b      	ldr	r3, [r7, #20]
  4087e4:	683a      	ldr	r2, [r7, #0]
  4087e6:	fb02 f303 	mul.w	r3, r2, r3
  4087ea:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4087ec:	683b      	ldr	r3, [r7, #0]
  4087ee:	3b01      	subs	r3, #1
  4087f0:	041a      	lsls	r2, r3, #16
  4087f2:	4b07      	ldr	r3, [pc, #28]	; (408810 <pll_config_init+0x50>)
  4087f4:	4013      	ands	r3, r2
  4087f6:	687a      	ldr	r2, [r7, #4]
  4087f8:	b2d2      	uxtb	r2, r2
  4087fa:	4313      	orrs	r3, r2
  4087fc:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  408800:	68fb      	ldr	r3, [r7, #12]
  408802:	601a      	str	r2, [r3, #0]
}
  408804:	3718      	adds	r7, #24
  408806:	46bd      	mov	sp, r7
  408808:	bd80      	pop	{r7, pc}
  40880a:	bf00      	nop
  40880c:	00408721 	.word	0x00408721
  408810:	07ff0000 	.word	0x07ff0000

00408814 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  408814:	b580      	push	{r7, lr}
  408816:	b082      	sub	sp, #8
  408818:	af00      	add	r7, sp, #0
  40881a:	6078      	str	r0, [r7, #4]
  40881c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40881e:	683b      	ldr	r3, [r7, #0]
  408820:	2b00      	cmp	r3, #0
  408822:	d108      	bne.n	408836 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  408824:	4b08      	ldr	r3, [pc, #32]	; (408848 <pll_enable+0x34>)
  408826:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  408828:	4b08      	ldr	r3, [pc, #32]	; (40884c <pll_enable+0x38>)
  40882a:	687a      	ldr	r2, [r7, #4]
  40882c:	6812      	ldr	r2, [r2, #0]
  40882e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  408832:	629a      	str	r2, [r3, #40]	; 0x28
  408834:	e005      	b.n	408842 <pll_enable+0x2e>
	} else {
		pmc_disable_pllbck();
  408836:	4b06      	ldr	r3, [pc, #24]	; (408850 <pll_enable+0x3c>)
  408838:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40883a:	4b04      	ldr	r3, [pc, #16]	; (40884c <pll_enable+0x38>)
  40883c:	687a      	ldr	r2, [r7, #4]
  40883e:	6812      	ldr	r2, [r2, #0]
  408840:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
  408842:	3708      	adds	r7, #8
  408844:	46bd      	mov	sp, r7
  408846:	bd80      	pop	{r7, pc}
  408848:	004095fd 	.word	0x004095fd
  40884c:	400e0400 	.word	0x400e0400
  408850:	00409631 	.word	0x00409631

00408854 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  408854:	b580      	push	{r7, lr}
  408856:	b082      	sub	sp, #8
  408858:	af00      	add	r7, sp, #0
  40885a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40885c:	687b      	ldr	r3, [r7, #4]
  40885e:	2b00      	cmp	r3, #0
  408860:	d103      	bne.n	40886a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  408862:	4b05      	ldr	r3, [pc, #20]	; (408878 <pll_is_locked+0x24>)
  408864:	4798      	blx	r3
  408866:	4603      	mov	r3, r0
  408868:	e002      	b.n	408870 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40886a:	4b04      	ldr	r3, [pc, #16]	; (40887c <pll_is_locked+0x28>)
  40886c:	4798      	blx	r3
  40886e:	4603      	mov	r3, r0
	}
}
  408870:	4618      	mov	r0, r3
  408872:	3708      	adds	r7, #8
  408874:	46bd      	mov	sp, r7
  408876:	bd80      	pop	{r7, pc}
  408878:	00409615 	.word	0x00409615
  40887c:	00409649 	.word	0x00409649

00408880 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  408880:	b580      	push	{r7, lr}
  408882:	b082      	sub	sp, #8
  408884:	af00      	add	r7, sp, #0
  408886:	4603      	mov	r3, r0
  408888:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40888a:	79fb      	ldrb	r3, [r7, #7]
  40888c:	3b03      	subs	r3, #3
  40888e:	2b04      	cmp	r3, #4
  408890:	d808      	bhi.n	4088a4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  408892:	79fb      	ldrb	r3, [r7, #7]
  408894:	4618      	mov	r0, r3
  408896:	4b05      	ldr	r3, [pc, #20]	; (4088ac <pll_enable_source+0x2c>)
  408898:	4798      	blx	r3
		osc_wait_ready(e_src);
  40889a:	79fb      	ldrb	r3, [r7, #7]
  40889c:	4618      	mov	r0, r3
  40889e:	4b04      	ldr	r3, [pc, #16]	; (4088b0 <pll_enable_source+0x30>)
  4088a0:	4798      	blx	r3
		break;
  4088a2:	e000      	b.n	4088a6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4088a4:	bf00      	nop
	}
}
  4088a6:	3708      	adds	r7, #8
  4088a8:	46bd      	mov	sp, r7
  4088aa:	bd80      	pop	{r7, pc}
  4088ac:	0040862d 	.word	0x0040862d
  4088b0:	00408795 	.word	0x00408795

004088b4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4088b4:	b580      	push	{r7, lr}
  4088b6:	b082      	sub	sp, #8
  4088b8:	af00      	add	r7, sp, #0
  4088ba:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4088bc:	bf00      	nop
  4088be:	6878      	ldr	r0, [r7, #4]
  4088c0:	4b04      	ldr	r3, [pc, #16]	; (4088d4 <pll_wait_for_lock+0x20>)
  4088c2:	4798      	blx	r3
  4088c4:	4603      	mov	r3, r0
  4088c6:	2b00      	cmp	r3, #0
  4088c8:	d0f9      	beq.n	4088be <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4088ca:	2300      	movs	r3, #0
}
  4088cc:	4618      	mov	r0, r3
  4088ce:	3708      	adds	r7, #8
  4088d0:	46bd      	mov	sp, r7
  4088d2:	bd80      	pop	{r7, pc}
  4088d4:	00408855 	.word	0x00408855

004088d8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4088d8:	b580      	push	{r7, lr}
  4088da:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4088dc:	2006      	movs	r0, #6
  4088de:	4b04      	ldr	r3, [pc, #16]	; (4088f0 <sysclk_get_main_hz+0x18>)
  4088e0:	4798      	blx	r3
  4088e2:	4602      	mov	r2, r0
  4088e4:	4613      	mov	r3, r2
  4088e6:	009b      	lsls	r3, r3, #2
  4088e8:	4413      	add	r3, r2
  4088ea:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4088ec:	4618      	mov	r0, r3
  4088ee:	bd80      	pop	{r7, pc}
  4088f0:	00408721 	.word	0x00408721

004088f4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4088f4:	b580      	push	{r7, lr}
  4088f6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4088f8:	4b02      	ldr	r3, [pc, #8]	; (408904 <sysclk_get_cpu_hz+0x10>)
  4088fa:	4798      	blx	r3
  4088fc:	4603      	mov	r3, r0
  4088fe:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  408900:	4618      	mov	r0, r3
  408902:	bd80      	pop	{r7, pc}
  408904:	004088d9 	.word	0x004088d9

00408908 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  408908:	b590      	push	{r4, r7, lr}
  40890a:	b083      	sub	sp, #12
  40890c:	af00      	add	r7, sp, #0

#ifdef CONFIG_PLL1_SOURCE
	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_PLL1) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL1_SOURCE);
  40890e:	2006      	movs	r0, #6
  408910:	4b0c      	ldr	r3, [pc, #48]	; (408944 <sysclk_enable_usb+0x3c>)
  408912:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 1);
  408914:	463b      	mov	r3, r7
  408916:	4618      	mov	r0, r3
  408918:	2106      	movs	r1, #6
  40891a:	2202      	movs	r2, #2
  40891c:	2310      	movs	r3, #16
  40891e:	4c0a      	ldr	r4, [pc, #40]	; (408948 <sysclk_enable_usb+0x40>)
  408920:	47a0      	blx	r4
		pll_enable(&pllcfg, 1);
  408922:	463b      	mov	r3, r7
  408924:	4618      	mov	r0, r3
  408926:	2101      	movs	r1, #1
  408928:	4b08      	ldr	r3, [pc, #32]	; (40894c <sysclk_enable_usb+0x44>)
  40892a:	4798      	blx	r3
		pll_wait_for_lock(1);
  40892c:	2001      	movs	r0, #1
  40892e:	4b08      	ldr	r3, [pc, #32]	; (408950 <sysclk_enable_usb+0x48>)
  408930:	4798      	blx	r3
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  408932:	2001      	movs	r0, #1
  408934:	4b07      	ldr	r3, [pc, #28]	; (408954 <sysclk_enable_usb+0x4c>)
  408936:	4798      	blx	r3
		pmc_enable_udpck();
  408938:	4b07      	ldr	r3, [pc, #28]	; (408958 <sysclk_enable_usb+0x50>)
  40893a:	4798      	blx	r3
		return;
  40893c:	bf00      	nop
	}
#endif
}
  40893e:	370c      	adds	r7, #12
  408940:	46bd      	mov	sp, r7
  408942:	bd90      	pop	{r4, r7, pc}
  408944:	00408881 	.word	0x00408881
  408948:	004087c1 	.word	0x004087c1
  40894c:	00408815 	.word	0x00408815
  408950:	004088b5 	.word	0x004088b5
  408954:	0040976d 	.word	0x0040976d
  408958:	00409795 	.word	0x00409795

0040895c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40895c:	b590      	push	{r4, r7, lr}
  40895e:	b083      	sub	sp, #12
  408960:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  408962:	4811      	ldr	r0, [pc, #68]	; (4089a8 <sysclk_init+0x4c>)
  408964:	4b11      	ldr	r3, [pc, #68]	; (4089ac <sysclk_init+0x50>)
  408966:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  408968:	2006      	movs	r0, #6
  40896a:	4b11      	ldr	r3, [pc, #68]	; (4089b0 <sysclk_init+0x54>)
  40896c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40896e:	1d3b      	adds	r3, r7, #4
  408970:	4618      	mov	r0, r3
  408972:	2106      	movs	r1, #6
  408974:	2201      	movs	r2, #1
  408976:	2314      	movs	r3, #20
  408978:	4c0e      	ldr	r4, [pc, #56]	; (4089b4 <sysclk_init+0x58>)
  40897a:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40897c:	1d3b      	adds	r3, r7, #4
  40897e:	4618      	mov	r0, r3
  408980:	2100      	movs	r1, #0
  408982:	4b0d      	ldr	r3, [pc, #52]	; (4089b8 <sysclk_init+0x5c>)
  408984:	4798      	blx	r3
		pll_wait_for_lock(0);
  408986:	2000      	movs	r0, #0
  408988:	4b0c      	ldr	r3, [pc, #48]	; (4089bc <sysclk_init+0x60>)
  40898a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40898c:	2010      	movs	r0, #16
  40898e:	4b0c      	ldr	r3, [pc, #48]	; (4089c0 <sysclk_init+0x64>)
  408990:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  408992:	4b0c      	ldr	r3, [pc, #48]	; (4089c4 <sysclk_init+0x68>)
  408994:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  408996:	4b0c      	ldr	r3, [pc, #48]	; (4089c8 <sysclk_init+0x6c>)
  408998:	4798      	blx	r3
  40899a:	4603      	mov	r3, r0
  40899c:	4618      	mov	r0, r3
  40899e:	4b03      	ldr	r3, [pc, #12]	; (4089ac <sysclk_init+0x50>)
  4089a0:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4089a2:	370c      	adds	r7, #12
  4089a4:	46bd      	mov	sp, r7
  4089a6:	bd90      	pop	{r4, r7, pc}
  4089a8:	07270e00 	.word	0x07270e00
  4089ac:	00409a91 	.word	0x00409a91
  4089b0:	00408881 	.word	0x00408881
  4089b4:	004087c1 	.word	0x004087c1
  4089b8:	00408815 	.word	0x00408815
  4089bc:	004088b5 	.word	0x004088b5
  4089c0:	00409409 	.word	0x00409409
  4089c4:	004098f5 	.word	0x004098f5
  4089c8:	004088f5 	.word	0x004088f5

004089cc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4089cc:	b580      	push	{r7, lr}
  4089ce:	b082      	sub	sp, #8
  4089d0:	af00      	add	r7, sp, #0
  4089d2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4089d4:	6878      	ldr	r0, [r7, #4]
  4089d6:	4b02      	ldr	r3, [pc, #8]	; (4089e0 <sysclk_enable_peripheral_clock+0x14>)
  4089d8:	4798      	blx	r3
}
  4089da:	3708      	adds	r7, #8
  4089dc:	46bd      	mov	sp, r7
  4089de:	bd80      	pop	{r7, pc}
  4089e0:	00409665 	.word	0x00409665

004089e4 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4089e4:	b580      	push	{r7, lr}
  4089e6:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4089e8:	200b      	movs	r0, #11
  4089ea:	4b04      	ldr	r3, [pc, #16]	; (4089fc <ioport_init+0x18>)
  4089ec:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4089ee:	200c      	movs	r0, #12
  4089f0:	4b02      	ldr	r3, [pc, #8]	; (4089fc <ioport_init+0x18>)
  4089f2:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4089f4:	200d      	movs	r0, #13
  4089f6:	4b01      	ldr	r3, [pc, #4]	; (4089fc <ioport_init+0x18>)
  4089f8:	4798      	blx	r3
	arch_ioport_init();
}
  4089fa:	bd80      	pop	{r7, pc}
  4089fc:	004089cd 	.word	0x004089cd

00408a00 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  408a00:	b480      	push	{r7}
  408a02:	b08d      	sub	sp, #52	; 0x34
  408a04:	af00      	add	r7, sp, #0
  408a06:	6078      	str	r0, [r7, #4]
  408a08:	6039      	str	r1, [r7, #0]
  408a0a:	687b      	ldr	r3, [r7, #4]
  408a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  408a0e:	683b      	ldr	r3, [r7, #0]
  408a10:	62bb      	str	r3, [r7, #40]	; 0x28
  408a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408a14:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  408a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408a18:	095a      	lsrs	r2, r3, #5
  408a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408a1c:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  408a1e:	6a3b      	ldr	r3, [r7, #32]
  408a20:	f003 031f 	and.w	r3, r3, #31
  408a24:	2101      	movs	r1, #1
  408a26:	fa01 f303 	lsl.w	r3, r1, r3
  408a2a:	61fa      	str	r2, [r7, #28]
  408a2c:	61bb      	str	r3, [r7, #24]
  408a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408a30:	617b      	str	r3, [r7, #20]
  408a32:	69fb      	ldr	r3, [r7, #28]
  408a34:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  408a36:	693b      	ldr	r3, [r7, #16]
  408a38:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  408a3c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  408a40:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  408a42:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  408a44:	697b      	ldr	r3, [r7, #20]
  408a46:	f003 0308 	and.w	r3, r3, #8
  408a4a:	2b00      	cmp	r3, #0
  408a4c:	d003      	beq.n	408a56 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  408a4e:	68fb      	ldr	r3, [r7, #12]
  408a50:	69ba      	ldr	r2, [r7, #24]
  408a52:	665a      	str	r2, [r3, #100]	; 0x64
  408a54:	e002      	b.n	408a5c <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  408a56:	68fb      	ldr	r3, [r7, #12]
  408a58:	69ba      	ldr	r2, [r7, #24]
  408a5a:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  408a5c:	697b      	ldr	r3, [r7, #20]
  408a5e:	f003 0310 	and.w	r3, r3, #16
  408a62:	2b00      	cmp	r3, #0
  408a64:	d004      	beq.n	408a70 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  408a66:	68fb      	ldr	r3, [r7, #12]
  408a68:	69ba      	ldr	r2, [r7, #24]
  408a6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  408a6e:	e003      	b.n	408a78 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  408a70:	68fb      	ldr	r3, [r7, #12]
  408a72:	69ba      	ldr	r2, [r7, #24]
  408a74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  408a78:	697b      	ldr	r3, [r7, #20]
  408a7a:	f003 0320 	and.w	r3, r3, #32
  408a7e:	2b00      	cmp	r3, #0
  408a80:	d003      	beq.n	408a8a <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  408a82:	68fb      	ldr	r3, [r7, #12]
  408a84:	69ba      	ldr	r2, [r7, #24]
  408a86:	651a      	str	r2, [r3, #80]	; 0x50
  408a88:	e002      	b.n	408a90 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  408a8a:	68fb      	ldr	r3, [r7, #12]
  408a8c:	69ba      	ldr	r2, [r7, #24]
  408a8e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  408a90:	697b      	ldr	r3, [r7, #20]
  408a92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  408a96:	2b00      	cmp	r3, #0
  408a98:	d003      	beq.n	408aa2 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  408a9a:	68fb      	ldr	r3, [r7, #12]
  408a9c:	69ba      	ldr	r2, [r7, #24]
  408a9e:	621a      	str	r2, [r3, #32]
  408aa0:	e002      	b.n	408aa8 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  408aa2:	68fb      	ldr	r3, [r7, #12]
  408aa4:	69ba      	ldr	r2, [r7, #24]
  408aa6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  408aa8:	697b      	ldr	r3, [r7, #20]
  408aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
  408aae:	2b00      	cmp	r3, #0
  408ab0:	d004      	beq.n	408abc <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  408ab2:	68fb      	ldr	r3, [r7, #12]
  408ab4:	69ba      	ldr	r2, [r7, #24]
  408ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  408aba:	e003      	b.n	408ac4 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  408abc:	68fb      	ldr	r3, [r7, #12]
  408abe:	69ba      	ldr	r2, [r7, #24]
  408ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  408ac4:	697b      	ldr	r3, [r7, #20]
  408ac6:	f003 0301 	and.w	r3, r3, #1
  408aca:	2b00      	cmp	r3, #0
  408acc:	d006      	beq.n	408adc <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  408ace:	68fb      	ldr	r3, [r7, #12]
  408ad0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408ad2:	69bb      	ldr	r3, [r7, #24]
  408ad4:	431a      	orrs	r2, r3
  408ad6:	68fb      	ldr	r3, [r7, #12]
  408ad8:	671a      	str	r2, [r3, #112]	; 0x70
  408ada:	e006      	b.n	408aea <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  408adc:	68fb      	ldr	r3, [r7, #12]
  408ade:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408ae0:	69bb      	ldr	r3, [r7, #24]
  408ae2:	43db      	mvns	r3, r3
  408ae4:	401a      	ands	r2, r3
  408ae6:	68fb      	ldr	r3, [r7, #12]
  408ae8:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  408aea:	697b      	ldr	r3, [r7, #20]
  408aec:	f003 0302 	and.w	r3, r3, #2
  408af0:	2b00      	cmp	r3, #0
  408af2:	d006      	beq.n	408b02 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  408af4:	68fb      	ldr	r3, [r7, #12]
  408af6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408af8:	69bb      	ldr	r3, [r7, #24]
  408afa:	431a      	orrs	r2, r3
  408afc:	68fb      	ldr	r3, [r7, #12]
  408afe:	675a      	str	r2, [r3, #116]	; 0x74
  408b00:	e006      	b.n	408b10 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  408b02:	68fb      	ldr	r3, [r7, #12]
  408b04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408b06:	69bb      	ldr	r3, [r7, #24]
  408b08:	43db      	mvns	r3, r3
  408b0a:	401a      	ands	r2, r3
  408b0c:	68fb      	ldr	r3, [r7, #12]
  408b0e:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  408b10:	3734      	adds	r7, #52	; 0x34
  408b12:	46bd      	mov	sp, r7
  408b14:	f85d 7b04 	ldr.w	r7, [sp], #4
  408b18:	4770      	bx	lr
  408b1a:	bf00      	nop

00408b1c <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  408b1c:	b480      	push	{r7}
  408b1e:	b08d      	sub	sp, #52	; 0x34
  408b20:	af00      	add	r7, sp, #0
  408b22:	6078      	str	r0, [r7, #4]
  408b24:	460b      	mov	r3, r1
  408b26:	70fb      	strb	r3, [r7, #3]
  408b28:	687b      	ldr	r3, [r7, #4]
  408b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  408b2c:	78fb      	ldrb	r3, [r7, #3]
  408b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  408b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408b34:	627b      	str	r3, [r7, #36]	; 0x24
  408b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408b38:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  408b3a:	6a3b      	ldr	r3, [r7, #32]
  408b3c:	095b      	lsrs	r3, r3, #5
  408b3e:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  408b40:	69fb      	ldr	r3, [r7, #28]
  408b42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  408b46:	f203 7307 	addw	r3, r3, #1799	; 0x707
  408b4a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  408b4c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  408b4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  408b52:	2b01      	cmp	r3, #1
  408b54:	d109      	bne.n	408b6a <ioport_set_pin_dir+0x4e>
  408b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408b58:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  408b5a:	697b      	ldr	r3, [r7, #20]
  408b5c:	f003 031f 	and.w	r3, r3, #31
  408b60:	2201      	movs	r2, #1
  408b62:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  408b64:	69bb      	ldr	r3, [r7, #24]
  408b66:	611a      	str	r2, [r3, #16]
  408b68:	e00c      	b.n	408b84 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  408b6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  408b6e:	2b00      	cmp	r3, #0
  408b70:	d108      	bne.n	408b84 <ioport_set_pin_dir+0x68>
  408b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408b74:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  408b76:	693b      	ldr	r3, [r7, #16]
  408b78:	f003 031f 	and.w	r3, r3, #31
  408b7c:	2201      	movs	r2, #1
  408b7e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  408b80:	69bb      	ldr	r3, [r7, #24]
  408b82:	615a      	str	r2, [r3, #20]
  408b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408b86:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  408b88:	68fb      	ldr	r3, [r7, #12]
  408b8a:	f003 031f 	and.w	r3, r3, #31
  408b8e:	2201      	movs	r2, #1
  408b90:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  408b92:	69bb      	ldr	r3, [r7, #24]
  408b94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  408b98:	3734      	adds	r7, #52	; 0x34
  408b9a:	46bd      	mov	sp, r7
  408b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408ba0:	4770      	bx	lr
  408ba2:	bf00      	nop

00408ba4 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  408ba4:	b480      	push	{r7}
  408ba6:	b08b      	sub	sp, #44	; 0x2c
  408ba8:	af00      	add	r7, sp, #0
  408baa:	6078      	str	r0, [r7, #4]
  408bac:	460b      	mov	r3, r1
  408bae:	70fb      	strb	r3, [r7, #3]
  408bb0:	687b      	ldr	r3, [r7, #4]
  408bb2:	627b      	str	r3, [r7, #36]	; 0x24
  408bb4:	78fb      	ldrb	r3, [r7, #3]
  408bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  408bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408bbc:	61fb      	str	r3, [r7, #28]
  408bbe:	69fb      	ldr	r3, [r7, #28]
  408bc0:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  408bc2:	69bb      	ldr	r3, [r7, #24]
  408bc4:	095b      	lsrs	r3, r3, #5
  408bc6:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  408bc8:	697b      	ldr	r3, [r7, #20]
  408bca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  408bce:	f203 7307 	addw	r3, r3, #1799	; 0x707
  408bd2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  408bd4:	613b      	str	r3, [r7, #16]

	if (level) {
  408bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  408bda:	2b00      	cmp	r3, #0
  408bdc:	d009      	beq.n	408bf2 <ioport_set_pin_level+0x4e>
  408bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408be0:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  408be2:	68fb      	ldr	r3, [r7, #12]
  408be4:	f003 031f 	and.w	r3, r3, #31
  408be8:	2201      	movs	r2, #1
  408bea:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  408bec:	693b      	ldr	r3, [r7, #16]
  408bee:	631a      	str	r2, [r3, #48]	; 0x30
  408bf0:	e008      	b.n	408c04 <ioport_set_pin_level+0x60>
  408bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408bf4:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  408bf6:	68bb      	ldr	r3, [r7, #8]
  408bf8:	f003 031f 	and.w	r3, r3, #31
  408bfc:	2201      	movs	r2, #1
  408bfe:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  408c00:	693b      	ldr	r3, [r7, #16]
  408c02:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  408c04:	372c      	adds	r7, #44	; 0x2c
  408c06:	46bd      	mov	sp, r7
  408c08:	f85d 7b04 	ldr.w	r7, [sp], #4
  408c0c:	4770      	bx	lr
  408c0e:	bf00      	nop

00408c10 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  408c10:	b580      	push	{r7, lr}
  408c12:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  408c14:	4818      	ldr	r0, [pc, #96]	; (408c78 <board_init+0x68>)
  408c16:	4b19      	ldr	r3, [pc, #100]	; (408c7c <board_init+0x6c>)
  408c18:	4798      	blx	r3

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  408c1a:	4b19      	ldr	r3, [pc, #100]	; (408c80 <board_init+0x70>)
  408c1c:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  408c1e:	2057      	movs	r0, #87	; 0x57
  408c20:	2101      	movs	r1, #1
  408c22:	4b18      	ldr	r3, [pc, #96]	; (408c84 <board_init+0x74>)
  408c24:	4798      	blx	r3
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
  408c26:	2057      	movs	r0, #87	; 0x57
  408c28:	2101      	movs	r1, #1
  408c2a:	4b17      	ldr	r3, [pc, #92]	; (408c88 <board_init+0x78>)
  408c2c:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
  408c2e:	2002      	movs	r0, #2
  408c30:	2100      	movs	r1, #0
  408c32:	4b15      	ldr	r3, [pc, #84]	; (408c88 <board_init+0x78>)
  408c34:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, (BUTTON_0_ACTIVE ?
  408c36:	2002      	movs	r0, #2
  408c38:	2108      	movs	r1, #8
  408c3a:	4b14      	ldr	r3, [pc, #80]	; (408c8c <board_init+0x7c>)
  408c3c:	4798      	blx	r3
				IOPORT_MODE_PULLDOWN : IOPORT_MODE_PULLUP));

	/* Initialize EXT3 LED0, LED1 & LED2, turned off */
	ioport_set_pin_level(IO1_LED1_PIN, !IO1_LED1_ACTIVE);
  408c3e:	2054      	movs	r0, #84	; 0x54
  408c40:	2101      	movs	r1, #1
  408c42:	4b10      	ldr	r3, [pc, #64]	; (408c84 <board_init+0x74>)
  408c44:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED1_PIN, IOPORT_DIR_OUTPUT);
  408c46:	2054      	movs	r0, #84	; 0x54
  408c48:	2101      	movs	r1, #1
  408c4a:	4b0f      	ldr	r3, [pc, #60]	; (408c88 <board_init+0x78>)
  408c4c:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED2_PIN, !IO1_LED2_ACTIVE);
  408c4e:	2010      	movs	r0, #16
  408c50:	2101      	movs	r1, #1
  408c52:	4b0c      	ldr	r3, [pc, #48]	; (408c84 <board_init+0x74>)
  408c54:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED2_PIN, IOPORT_DIR_OUTPUT);
  408c56:	2010      	movs	r0, #16
  408c58:	2101      	movs	r1, #1
  408c5a:	4b0b      	ldr	r3, [pc, #44]	; (408c88 <board_init+0x78>)
  408c5c:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
  408c5e:	2056      	movs	r0, #86	; 0x56
  408c60:	2101      	movs	r1, #1
  408c62:	4b08      	ldr	r3, [pc, #32]	; (408c84 <board_init+0x74>)
  408c64:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
  408c66:	2056      	movs	r0, #86	; 0x56
  408c68:	2101      	movs	r1, #1
  408c6a:	4b07      	ldr	r3, [pc, #28]	; (408c88 <board_init+0x78>)
  408c6c:	4798      	blx	r3

  if ( BUTTON_0_ACTIVE ) {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLDOWN);
	}
  else {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
  408c6e:	2002      	movs	r0, #2
  408c70:	2108      	movs	r1, #8
  408c72:	4b06      	ldr	r3, [pc, #24]	; (408c8c <board_init+0x7c>)
  408c74:	4798      	blx	r3

#endif  



}
  408c76:	bd80      	pop	{r7, pc}
  408c78:	400e1450 	.word	0x400e1450
  408c7c:	00409809 	.word	0x00409809
  408c80:	004089e5 	.word	0x004089e5
  408c84:	00408ba5 	.word	0x00408ba5
  408c88:	00408b1d 	.word	0x00408b1d
  408c8c:	00408a01 	.word	0x00408a01

00408c90 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  408c90:	b480      	push	{r7}
  408c92:	b085      	sub	sp, #20
  408c94:	af00      	add	r7, sp, #0
  408c96:	60f8      	str	r0, [r7, #12]
  408c98:	60b9      	str	r1, [r7, #8]
  408c9a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  408c9c:	687b      	ldr	r3, [r7, #4]
  408c9e:	2b00      	cmp	r3, #0
  408ca0:	d003      	beq.n	408caa <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  408ca2:	68fb      	ldr	r3, [r7, #12]
  408ca4:	68ba      	ldr	r2, [r7, #8]
  408ca6:	665a      	str	r2, [r3, #100]	; 0x64
  408ca8:	e002      	b.n	408cb0 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  408caa:	68fb      	ldr	r3, [r7, #12]
  408cac:	68ba      	ldr	r2, [r7, #8]
  408cae:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  408cb0:	3714      	adds	r7, #20
  408cb2:	46bd      	mov	sp, r7
  408cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
  408cb8:	4770      	bx	lr
  408cba:	bf00      	nop

00408cbc <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  408cbc:	b480      	push	{r7}
  408cbe:	b085      	sub	sp, #20
  408cc0:	af00      	add	r7, sp, #0
  408cc2:	60f8      	str	r0, [r7, #12]
  408cc4:	60b9      	str	r1, [r7, #8]
  408cc6:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  408cc8:	68fb      	ldr	r3, [r7, #12]
  408cca:	68ba      	ldr	r2, [r7, #8]
  408ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  408cd0:	687b      	ldr	r3, [r7, #4]
  408cd2:	005b      	lsls	r3, r3, #1
  408cd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  408cd8:	fbb2 f3f3 	udiv	r3, r2, r3
  408cdc:	3b01      	subs	r3, #1
  408cde:	f3c3 020d 	ubfx	r2, r3, #0, #14
  408ce2:	68fb      	ldr	r3, [r7, #12]
  408ce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  408ce8:	3714      	adds	r7, #20
  408cea:	46bd      	mov	sp, r7
  408cec:	f85d 7b04 	ldr.w	r7, [sp], #4
  408cf0:	4770      	bx	lr
  408cf2:	bf00      	nop

00408cf4 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  408cf4:	b480      	push	{r7}
  408cf6:	b087      	sub	sp, #28
  408cf8:	af00      	add	r7, sp, #0
  408cfa:	60f8      	str	r0, [r7, #12]
  408cfc:	60b9      	str	r1, [r7, #8]
  408cfe:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  408d00:	68fb      	ldr	r3, [r7, #12]
  408d02:	687a      	ldr	r2, [r7, #4]
  408d04:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  408d06:	68bb      	ldr	r3, [r7, #8]
  408d08:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  408d0c:	d04a      	beq.n	408da4 <pio_set_peripheral+0xb0>
  408d0e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  408d12:	d808      	bhi.n	408d26 <pio_set_peripheral+0x32>
  408d14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  408d18:	d016      	beq.n	408d48 <pio_set_peripheral+0x54>
  408d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  408d1e:	d02c      	beq.n	408d7a <pio_set_peripheral+0x86>
  408d20:	2b00      	cmp	r3, #0
  408d22:	d069      	beq.n	408df8 <pio_set_peripheral+0x104>
  408d24:	e064      	b.n	408df0 <pio_set_peripheral+0xfc>
  408d26:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  408d2a:	d065      	beq.n	408df8 <pio_set_peripheral+0x104>
  408d2c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  408d30:	d803      	bhi.n	408d3a <pio_set_peripheral+0x46>
  408d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  408d36:	d04a      	beq.n	408dce <pio_set_peripheral+0xda>
  408d38:	e05a      	b.n	408df0 <pio_set_peripheral+0xfc>
  408d3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  408d3e:	d05b      	beq.n	408df8 <pio_set_peripheral+0x104>
  408d40:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  408d44:	d058      	beq.n	408df8 <pio_set_peripheral+0x104>
  408d46:	e053      	b.n	408df0 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  408d48:	68fb      	ldr	r3, [r7, #12]
  408d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408d4c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  408d4e:	68fb      	ldr	r3, [r7, #12]
  408d50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408d52:	687b      	ldr	r3, [r7, #4]
  408d54:	43d9      	mvns	r1, r3
  408d56:	697b      	ldr	r3, [r7, #20]
  408d58:	400b      	ands	r3, r1
  408d5a:	401a      	ands	r2, r3
  408d5c:	68fb      	ldr	r3, [r7, #12]
  408d5e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  408d60:	68fb      	ldr	r3, [r7, #12]
  408d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408d64:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  408d66:	68fb      	ldr	r3, [r7, #12]
  408d68:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408d6a:	687b      	ldr	r3, [r7, #4]
  408d6c:	43d9      	mvns	r1, r3
  408d6e:	697b      	ldr	r3, [r7, #20]
  408d70:	400b      	ands	r3, r1
  408d72:	401a      	ands	r2, r3
  408d74:	68fb      	ldr	r3, [r7, #12]
  408d76:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  408d78:	e03a      	b.n	408df0 <pio_set_peripheral+0xfc>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  408d7a:	68fb      	ldr	r3, [r7, #12]
  408d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408d7e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  408d80:	687a      	ldr	r2, [r7, #4]
  408d82:	697b      	ldr	r3, [r7, #20]
  408d84:	431a      	orrs	r2, r3
  408d86:	68fb      	ldr	r3, [r7, #12]
  408d88:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  408d8a:	68fb      	ldr	r3, [r7, #12]
  408d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408d8e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  408d90:	68fb      	ldr	r3, [r7, #12]
  408d92:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408d94:	687b      	ldr	r3, [r7, #4]
  408d96:	43d9      	mvns	r1, r3
  408d98:	697b      	ldr	r3, [r7, #20]
  408d9a:	400b      	ands	r3, r1
  408d9c:	401a      	ands	r2, r3
  408d9e:	68fb      	ldr	r3, [r7, #12]
  408da0:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  408da2:	e025      	b.n	408df0 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  408da4:	68fb      	ldr	r3, [r7, #12]
  408da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408da8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  408daa:	68fb      	ldr	r3, [r7, #12]
  408dac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408dae:	687b      	ldr	r3, [r7, #4]
  408db0:	43d9      	mvns	r1, r3
  408db2:	697b      	ldr	r3, [r7, #20]
  408db4:	400b      	ands	r3, r1
  408db6:	401a      	ands	r2, r3
  408db8:	68fb      	ldr	r3, [r7, #12]
  408dba:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  408dbc:	68fb      	ldr	r3, [r7, #12]
  408dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408dc0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  408dc2:	687a      	ldr	r2, [r7, #4]
  408dc4:	697b      	ldr	r3, [r7, #20]
  408dc6:	431a      	orrs	r2, r3
  408dc8:	68fb      	ldr	r3, [r7, #12]
  408dca:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  408dcc:	e010      	b.n	408df0 <pio_set_peripheral+0xfc>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  408dce:	68fb      	ldr	r3, [r7, #12]
  408dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408dd2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  408dd4:	687a      	ldr	r2, [r7, #4]
  408dd6:	697b      	ldr	r3, [r7, #20]
  408dd8:	431a      	orrs	r2, r3
  408dda:	68fb      	ldr	r3, [r7, #12]
  408ddc:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  408dde:	68fb      	ldr	r3, [r7, #12]
  408de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408de2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  408de4:	687a      	ldr	r2, [r7, #4]
  408de6:	697b      	ldr	r3, [r7, #20]
  408de8:	431a      	orrs	r2, r3
  408dea:	68fb      	ldr	r3, [r7, #12]
  408dec:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  408dee:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  408df0:	68fb      	ldr	r3, [r7, #12]
  408df2:	687a      	ldr	r2, [r7, #4]
  408df4:	605a      	str	r2, [r3, #4]
  408df6:	e000      	b.n	408dfa <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  408df8:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  408dfa:	371c      	adds	r7, #28
  408dfc:	46bd      	mov	sp, r7
  408dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
  408e02:	4770      	bx	lr

00408e04 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  408e04:	b580      	push	{r7, lr}
  408e06:	b084      	sub	sp, #16
  408e08:	af00      	add	r7, sp, #0
  408e0a:	60f8      	str	r0, [r7, #12]
  408e0c:	60b9      	str	r1, [r7, #8]
  408e0e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  408e10:	68f8      	ldr	r0, [r7, #12]
  408e12:	68b9      	ldr	r1, [r7, #8]
  408e14:	4b18      	ldr	r3, [pc, #96]	; (408e78 <pio_set_input+0x74>)
  408e16:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  408e18:	687b      	ldr	r3, [r7, #4]
  408e1a:	f003 0301 	and.w	r3, r3, #1
  408e1e:	68f8      	ldr	r0, [r7, #12]
  408e20:	68b9      	ldr	r1, [r7, #8]
  408e22:	461a      	mov	r2, r3
  408e24:	4b15      	ldr	r3, [pc, #84]	; (408e7c <pio_set_input+0x78>)
  408e26:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  408e28:	687b      	ldr	r3, [r7, #4]
  408e2a:	f003 030a 	and.w	r3, r3, #10
  408e2e:	2b00      	cmp	r3, #0
  408e30:	d003      	beq.n	408e3a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  408e32:	68fb      	ldr	r3, [r7, #12]
  408e34:	68ba      	ldr	r2, [r7, #8]
  408e36:	621a      	str	r2, [r3, #32]
  408e38:	e002      	b.n	408e40 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  408e3a:	68fb      	ldr	r3, [r7, #12]
  408e3c:	68ba      	ldr	r2, [r7, #8]
  408e3e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  408e40:	687b      	ldr	r3, [r7, #4]
  408e42:	f003 0302 	and.w	r3, r3, #2
  408e46:	2b00      	cmp	r3, #0
  408e48:	d004      	beq.n	408e54 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  408e4a:	68fb      	ldr	r3, [r7, #12]
  408e4c:	68ba      	ldr	r2, [r7, #8]
  408e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  408e52:	e008      	b.n	408e66 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  408e54:	687b      	ldr	r3, [r7, #4]
  408e56:	f003 0308 	and.w	r3, r3, #8
  408e5a:	2b00      	cmp	r3, #0
  408e5c:	d003      	beq.n	408e66 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  408e5e:	68fb      	ldr	r3, [r7, #12]
  408e60:	68ba      	ldr	r2, [r7, #8]
  408e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  408e66:	68fb      	ldr	r3, [r7, #12]
  408e68:	68ba      	ldr	r2, [r7, #8]
  408e6a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  408e6c:	68fb      	ldr	r3, [r7, #12]
  408e6e:	68ba      	ldr	r2, [r7, #8]
  408e70:	601a      	str	r2, [r3, #0]
}
  408e72:	3710      	adds	r7, #16
  408e74:	46bd      	mov	sp, r7
  408e76:	bd80      	pop	{r7, pc}
  408e78:	00408f71 	.word	0x00408f71
  408e7c:	00408c91 	.word	0x00408c91

00408e80 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  408e80:	b580      	push	{r7, lr}
  408e82:	b084      	sub	sp, #16
  408e84:	af00      	add	r7, sp, #0
  408e86:	60f8      	str	r0, [r7, #12]
  408e88:	60b9      	str	r1, [r7, #8]
  408e8a:	607a      	str	r2, [r7, #4]
  408e8c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  408e8e:	68f8      	ldr	r0, [r7, #12]
  408e90:	68b9      	ldr	r1, [r7, #8]
  408e92:	4b12      	ldr	r3, [pc, #72]	; (408edc <pio_set_output+0x5c>)
  408e94:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  408e96:	68f8      	ldr	r0, [r7, #12]
  408e98:	68b9      	ldr	r1, [r7, #8]
  408e9a:	69ba      	ldr	r2, [r7, #24]
  408e9c:	4b10      	ldr	r3, [pc, #64]	; (408ee0 <pio_set_output+0x60>)
  408e9e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  408ea0:	683b      	ldr	r3, [r7, #0]
  408ea2:	2b00      	cmp	r3, #0
  408ea4:	d003      	beq.n	408eae <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  408ea6:	68fb      	ldr	r3, [r7, #12]
  408ea8:	68ba      	ldr	r2, [r7, #8]
  408eaa:	651a      	str	r2, [r3, #80]	; 0x50
  408eac:	e002      	b.n	408eb4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  408eae:	68fb      	ldr	r3, [r7, #12]
  408eb0:	68ba      	ldr	r2, [r7, #8]
  408eb2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  408eb4:	687b      	ldr	r3, [r7, #4]
  408eb6:	2b00      	cmp	r3, #0
  408eb8:	d003      	beq.n	408ec2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  408eba:	68fb      	ldr	r3, [r7, #12]
  408ebc:	68ba      	ldr	r2, [r7, #8]
  408ebe:	631a      	str	r2, [r3, #48]	; 0x30
  408ec0:	e002      	b.n	408ec8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  408ec2:	68fb      	ldr	r3, [r7, #12]
  408ec4:	68ba      	ldr	r2, [r7, #8]
  408ec6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  408ec8:	68fb      	ldr	r3, [r7, #12]
  408eca:	68ba      	ldr	r2, [r7, #8]
  408ecc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  408ece:	68fb      	ldr	r3, [r7, #12]
  408ed0:	68ba      	ldr	r2, [r7, #8]
  408ed2:	601a      	str	r2, [r3, #0]
}
  408ed4:	3710      	adds	r7, #16
  408ed6:	46bd      	mov	sp, r7
  408ed8:	bd80      	pop	{r7, pc}
  408eda:	bf00      	nop
  408edc:	00408f71 	.word	0x00408f71
  408ee0:	00408c91 	.word	0x00408c91

00408ee4 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  408ee4:	b480      	push	{r7}
  408ee6:	b085      	sub	sp, #20
  408ee8:	af00      	add	r7, sp, #0
  408eea:	60f8      	str	r0, [r7, #12]
  408eec:	60b9      	str	r1, [r7, #8]
  408eee:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  408ef0:	687b      	ldr	r3, [r7, #4]
  408ef2:	f003 0310 	and.w	r3, r3, #16
  408ef6:	2b00      	cmp	r3, #0
  408ef8:	d020      	beq.n	408f3c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  408efa:	68fb      	ldr	r3, [r7, #12]
  408efc:	68ba      	ldr	r2, [r7, #8]
  408efe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  408f02:	687b      	ldr	r3, [r7, #4]
  408f04:	f003 0320 	and.w	r3, r3, #32
  408f08:	2b00      	cmp	r3, #0
  408f0a:	d004      	beq.n	408f16 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  408f0c:	68fb      	ldr	r3, [r7, #12]
  408f0e:	68ba      	ldr	r2, [r7, #8]
  408f10:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  408f14:	e003      	b.n	408f1e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  408f16:	68fb      	ldr	r3, [r7, #12]
  408f18:	68ba      	ldr	r2, [r7, #8]
  408f1a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  408f1e:	687b      	ldr	r3, [r7, #4]
  408f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
  408f24:	2b00      	cmp	r3, #0
  408f26:	d004      	beq.n	408f32 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  408f28:	68fb      	ldr	r3, [r7, #12]
  408f2a:	68ba      	ldr	r2, [r7, #8]
  408f2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  408f30:	e008      	b.n	408f44 <pio_configure_interrupt+0x60>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  408f32:	68fb      	ldr	r3, [r7, #12]
  408f34:	68ba      	ldr	r2, [r7, #8]
  408f36:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  408f3a:	e003      	b.n	408f44 <pio_configure_interrupt+0x60>
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  408f3c:	68fb      	ldr	r3, [r7, #12]
  408f3e:	68ba      	ldr	r2, [r7, #8]
  408f40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  408f44:	3714      	adds	r7, #20
  408f46:	46bd      	mov	sp, r7
  408f48:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f4c:	4770      	bx	lr
  408f4e:	bf00      	nop

00408f50 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  408f50:	b480      	push	{r7}
  408f52:	b083      	sub	sp, #12
  408f54:	af00      	add	r7, sp, #0
  408f56:	6078      	str	r0, [r7, #4]
  408f58:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ISR;
  408f5a:	687b      	ldr	r3, [r7, #4]
  408f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  408f5e:	687b      	ldr	r3, [r7, #4]
  408f60:	683a      	ldr	r2, [r7, #0]
  408f62:	641a      	str	r2, [r3, #64]	; 0x40
}
  408f64:	370c      	adds	r7, #12
  408f66:	46bd      	mov	sp, r7
  408f68:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f6c:	4770      	bx	lr
  408f6e:	bf00      	nop

00408f70 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  408f70:	b480      	push	{r7}
  408f72:	b083      	sub	sp, #12
  408f74:	af00      	add	r7, sp, #0
  408f76:	6078      	str	r0, [r7, #4]
  408f78:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  408f7a:	687b      	ldr	r3, [r7, #4]
  408f7c:	683a      	ldr	r2, [r7, #0]
  408f7e:	645a      	str	r2, [r3, #68]	; 0x44
}
  408f80:	370c      	adds	r7, #12
  408f82:	46bd      	mov	sp, r7
  408f84:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f88:	4770      	bx	lr
  408f8a:	bf00      	nop

00408f8c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  408f8c:	b480      	push	{r7}
  408f8e:	b083      	sub	sp, #12
  408f90:	af00      	add	r7, sp, #0
  408f92:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  408f94:	687b      	ldr	r3, [r7, #4]
  408f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  408f98:	4618      	mov	r0, r3
  408f9a:	370c      	adds	r7, #12
  408f9c:	46bd      	mov	sp, r7
  408f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408fa2:	4770      	bx	lr

00408fa4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  408fa4:	b480      	push	{r7}
  408fa6:	b083      	sub	sp, #12
  408fa8:	af00      	add	r7, sp, #0
  408faa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  408fac:	687b      	ldr	r3, [r7, #4]
  408fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  408fb0:	4618      	mov	r0, r3
  408fb2:	370c      	adds	r7, #12
  408fb4:	46bd      	mov	sp, r7
  408fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
  408fba:	4770      	bx	lr

00408fbc <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  408fbc:	b580      	push	{r7, lr}
  408fbe:	b084      	sub	sp, #16
  408fc0:	af00      	add	r7, sp, #0
  408fc2:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  408fc4:	6878      	ldr	r0, [r7, #4]
  408fc6:	4b07      	ldr	r3, [pc, #28]	; (408fe4 <pio_set_pin_high+0x28>)
  408fc8:	4798      	blx	r3
  408fca:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  408fcc:	687b      	ldr	r3, [r7, #4]
  408fce:	f003 031f 	and.w	r3, r3, #31
  408fd2:	2201      	movs	r2, #1
  408fd4:	fa02 f303 	lsl.w	r3, r2, r3
  408fd8:	461a      	mov	r2, r3
  408fda:	68fb      	ldr	r3, [r7, #12]
  408fdc:	631a      	str	r2, [r3, #48]	; 0x30
}
  408fde:	3710      	adds	r7, #16
  408fe0:	46bd      	mov	sp, r7
  408fe2:	bd80      	pop	{r7, pc}
  408fe4:	00409221 	.word	0x00409221

00408fe8 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  408fe8:	b580      	push	{r7, lr}
  408fea:	b084      	sub	sp, #16
  408fec:	af00      	add	r7, sp, #0
  408fee:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  408ff0:	6878      	ldr	r0, [r7, #4]
  408ff2:	4b07      	ldr	r3, [pc, #28]	; (409010 <pio_set_pin_low+0x28>)
  408ff4:	4798      	blx	r3
  408ff6:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  408ff8:	687b      	ldr	r3, [r7, #4]
  408ffa:	f003 031f 	and.w	r3, r3, #31
  408ffe:	2201      	movs	r2, #1
  409000:	fa02 f303 	lsl.w	r3, r2, r3
  409004:	461a      	mov	r2, r3
  409006:	68fb      	ldr	r3, [r7, #12]
  409008:	635a      	str	r2, [r3, #52]	; 0x34
}
  40900a:	3710      	adds	r7, #16
  40900c:	46bd      	mov	sp, r7
  40900e:	bd80      	pop	{r7, pc}
  409010:	00409221 	.word	0x00409221

00409014 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
  409014:	b580      	push	{r7, lr}
  409016:	b084      	sub	sp, #16
  409018:	af00      	add	r7, sp, #0
  40901a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40901c:	6878      	ldr	r0, [r7, #4]
  40901e:	4b12      	ldr	r3, [pc, #72]	; (409068 <pio_toggle_pin+0x54>)
  409020:	4798      	blx	r3
  409022:	60f8      	str	r0, [r7, #12]

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  409024:	68fb      	ldr	r3, [r7, #12]
  409026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  409028:	687b      	ldr	r3, [r7, #4]
  40902a:	f003 031f 	and.w	r3, r3, #31
  40902e:	2101      	movs	r1, #1
  409030:	fa01 f303 	lsl.w	r3, r1, r3
  409034:	4013      	ands	r3, r2
  409036:	2b00      	cmp	r3, #0
  409038:	d009      	beq.n	40904e <pio_toggle_pin+0x3a>
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40903a:	687b      	ldr	r3, [r7, #4]
  40903c:	f003 031f 	and.w	r3, r3, #31
  409040:	2201      	movs	r2, #1
  409042:	fa02 f303 	lsl.w	r3, r2, r3
  409046:	461a      	mov	r2, r3
  409048:	68fb      	ldr	r3, [r7, #12]
  40904a:	635a      	str	r2, [r3, #52]	; 0x34
  40904c:	e008      	b.n	409060 <pio_toggle_pin+0x4c>
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40904e:	687b      	ldr	r3, [r7, #4]
  409050:	f003 031f 	and.w	r3, r3, #31
  409054:	2201      	movs	r2, #1
  409056:	fa02 f303 	lsl.w	r3, r2, r3
  40905a:	461a      	mov	r2, r3
  40905c:	68fb      	ldr	r3, [r7, #12]
  40905e:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
  409060:	3710      	adds	r7, #16
  409062:	46bd      	mov	sp, r7
  409064:	bd80      	pop	{r7, pc}
  409066:	bf00      	nop
  409068:	00409221 	.word	0x00409221

0040906c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40906c:	b590      	push	{r4, r7, lr}
  40906e:	b087      	sub	sp, #28
  409070:	af02      	add	r7, sp, #8
  409072:	6078      	str	r0, [r7, #4]
  409074:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  409076:	6878      	ldr	r0, [r7, #4]
  409078:	4b64      	ldr	r3, [pc, #400]	; (40920c <pio_configure_pin+0x1a0>)
  40907a:	4798      	blx	r3
  40907c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40907e:	683b      	ldr	r3, [r7, #0]
  409080:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  409084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  409088:	d06b      	beq.n	409162 <pio_configure_pin+0xf6>
  40908a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40908e:	d809      	bhi.n	4090a4 <pio_configure_pin+0x38>
  409090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  409094:	d02d      	beq.n	4090f2 <pio_configure_pin+0x86>
  409096:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40909a:	d046      	beq.n	40912a <pio_configure_pin+0xbe>
  40909c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4090a0:	d00b      	beq.n	4090ba <pio_configure_pin+0x4e>
  4090a2:	e0ac      	b.n	4091fe <pio_configure_pin+0x192>
  4090a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4090a8:	f000 8083 	beq.w	4091b2 <pio_configure_pin+0x146>
  4090ac:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4090b0:	d07f      	beq.n	4091b2 <pio_configure_pin+0x146>
  4090b2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4090b6:	d070      	beq.n	40919a <pio_configure_pin+0x12e>
  4090b8:	e0a1      	b.n	4091fe <pio_configure_pin+0x192>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4090ba:	687b      	ldr	r3, [r7, #4]
  4090bc:	f003 031f 	and.w	r3, r3, #31
  4090c0:	2201      	movs	r2, #1
  4090c2:	fa02 f303 	lsl.w	r3, r2, r3
  4090c6:	68f8      	ldr	r0, [r7, #12]
  4090c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4090cc:	461a      	mov	r2, r3
  4090ce:	4b50      	ldr	r3, [pc, #320]	; (409210 <pio_configure_pin+0x1a4>)
  4090d0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4090d2:	687b      	ldr	r3, [r7, #4]
  4090d4:	f003 031f 	and.w	r3, r3, #31
  4090d8:	2201      	movs	r2, #1
  4090da:	fa02 f303 	lsl.w	r3, r2, r3
  4090de:	461a      	mov	r2, r3
  4090e0:	683b      	ldr	r3, [r7, #0]
  4090e2:	f003 0301 	and.w	r3, r3, #1
  4090e6:	68f8      	ldr	r0, [r7, #12]
  4090e8:	4611      	mov	r1, r2
  4090ea:	461a      	mov	r2, r3
  4090ec:	4b49      	ldr	r3, [pc, #292]	; (409214 <pio_configure_pin+0x1a8>)
  4090ee:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4090f0:	e087      	b.n	409202 <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4090f2:	687b      	ldr	r3, [r7, #4]
  4090f4:	f003 031f 	and.w	r3, r3, #31
  4090f8:	2201      	movs	r2, #1
  4090fa:	fa02 f303 	lsl.w	r3, r2, r3
  4090fe:	68f8      	ldr	r0, [r7, #12]
  409100:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  409104:	461a      	mov	r2, r3
  409106:	4b42      	ldr	r3, [pc, #264]	; (409210 <pio_configure_pin+0x1a4>)
  409108:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40910a:	687b      	ldr	r3, [r7, #4]
  40910c:	f003 031f 	and.w	r3, r3, #31
  409110:	2201      	movs	r2, #1
  409112:	fa02 f303 	lsl.w	r3, r2, r3
  409116:	461a      	mov	r2, r3
  409118:	683b      	ldr	r3, [r7, #0]
  40911a:	f003 0301 	and.w	r3, r3, #1
  40911e:	68f8      	ldr	r0, [r7, #12]
  409120:	4611      	mov	r1, r2
  409122:	461a      	mov	r2, r3
  409124:	4b3b      	ldr	r3, [pc, #236]	; (409214 <pio_configure_pin+0x1a8>)
  409126:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  409128:	e06b      	b.n	409202 <pio_configure_pin+0x196>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40912a:	687b      	ldr	r3, [r7, #4]
  40912c:	f003 031f 	and.w	r3, r3, #31
  409130:	2201      	movs	r2, #1
  409132:	fa02 f303 	lsl.w	r3, r2, r3
  409136:	68f8      	ldr	r0, [r7, #12]
  409138:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40913c:	461a      	mov	r2, r3
  40913e:	4b34      	ldr	r3, [pc, #208]	; (409210 <pio_configure_pin+0x1a4>)
  409140:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  409142:	687b      	ldr	r3, [r7, #4]
  409144:	f003 031f 	and.w	r3, r3, #31
  409148:	2201      	movs	r2, #1
  40914a:	fa02 f303 	lsl.w	r3, r2, r3
  40914e:	461a      	mov	r2, r3
  409150:	683b      	ldr	r3, [r7, #0]
  409152:	f003 0301 	and.w	r3, r3, #1
  409156:	68f8      	ldr	r0, [r7, #12]
  409158:	4611      	mov	r1, r2
  40915a:	461a      	mov	r2, r3
  40915c:	4b2d      	ldr	r3, [pc, #180]	; (409214 <pio_configure_pin+0x1a8>)
  40915e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  409160:	e04f      	b.n	409202 <pio_configure_pin+0x196>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  409162:	687b      	ldr	r3, [r7, #4]
  409164:	f003 031f 	and.w	r3, r3, #31
  409168:	2201      	movs	r2, #1
  40916a:	fa02 f303 	lsl.w	r3, r2, r3
  40916e:	68f8      	ldr	r0, [r7, #12]
  409170:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  409174:	461a      	mov	r2, r3
  409176:	4b26      	ldr	r3, [pc, #152]	; (409210 <pio_configure_pin+0x1a4>)
  409178:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40917a:	687b      	ldr	r3, [r7, #4]
  40917c:	f003 031f 	and.w	r3, r3, #31
  409180:	2201      	movs	r2, #1
  409182:	fa02 f303 	lsl.w	r3, r2, r3
  409186:	461a      	mov	r2, r3
  409188:	683b      	ldr	r3, [r7, #0]
  40918a:	f003 0301 	and.w	r3, r3, #1
  40918e:	68f8      	ldr	r0, [r7, #12]
  409190:	4611      	mov	r1, r2
  409192:	461a      	mov	r2, r3
  409194:	4b1f      	ldr	r3, [pc, #124]	; (409214 <pio_configure_pin+0x1a8>)
  409196:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  409198:	e033      	b.n	409202 <pio_configure_pin+0x196>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40919a:	687b      	ldr	r3, [r7, #4]
  40919c:	f003 031f 	and.w	r3, r3, #31
  4091a0:	2201      	movs	r2, #1
  4091a2:	fa02 f303 	lsl.w	r3, r2, r3
  4091a6:	68f8      	ldr	r0, [r7, #12]
  4091a8:	4619      	mov	r1, r3
  4091aa:	683a      	ldr	r2, [r7, #0]
  4091ac:	4b1a      	ldr	r3, [pc, #104]	; (409218 <pio_configure_pin+0x1ac>)
  4091ae:	4798      	blx	r3
		break;
  4091b0:	e027      	b.n	409202 <pio_configure_pin+0x196>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4091b2:	687b      	ldr	r3, [r7, #4]
  4091b4:	f003 031f 	and.w	r3, r3, #31
  4091b8:	2201      	movs	r2, #1
  4091ba:	fa02 f303 	lsl.w	r3, r2, r3
  4091be:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4091c0:	683b      	ldr	r3, [r7, #0]
  4091c2:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4091c6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4091ca:	bf14      	ite	ne
  4091cc:	2300      	movne	r3, #0
  4091ce:	2301      	moveq	r3, #1
  4091d0:	b2db      	uxtb	r3, r3
  4091d2:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4091d4:	683b      	ldr	r3, [r7, #0]
  4091d6:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4091da:	2b00      	cmp	r3, #0
  4091dc:	bf0c      	ite	eq
  4091de:	2300      	moveq	r3, #0
  4091e0:	2301      	movne	r3, #1
  4091e2:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4091e4:	6838      	ldr	r0, [r7, #0]
  4091e6:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4091ea:	2800      	cmp	r0, #0
  4091ec:	bf0c      	ite	eq
  4091ee:	2000      	moveq	r0, #0
  4091f0:	2001      	movne	r0, #1
  4091f2:	b2c0      	uxtb	r0, r0
  4091f4:	9000      	str	r0, [sp, #0]
  4091f6:	68f8      	ldr	r0, [r7, #12]
  4091f8:	4c08      	ldr	r4, [pc, #32]	; (40921c <pio_configure_pin+0x1b0>)
  4091fa:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4091fc:	e001      	b.n	409202 <pio_configure_pin+0x196>

	default:
		return 0;
  4091fe:	2300      	movs	r3, #0
  409200:	e000      	b.n	409204 <pio_configure_pin+0x198>
	}

	return 1;
  409202:	2301      	movs	r3, #1
}
  409204:	4618      	mov	r0, r3
  409206:	3714      	adds	r7, #20
  409208:	46bd      	mov	sp, r7
  40920a:	bd90      	pop	{r4, r7, pc}
  40920c:	00409221 	.word	0x00409221
  409210:	00408cf5 	.word	0x00408cf5
  409214:	00408c91 	.word	0x00408c91
  409218:	00408e05 	.word	0x00408e05
  40921c:	00408e81 	.word	0x00408e81

00409220 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  409220:	b480      	push	{r7}
  409222:	b085      	sub	sp, #20
  409224:	af00      	add	r7, sp, #0
  409226:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  409228:	687b      	ldr	r3, [r7, #4]
  40922a:	095b      	lsrs	r3, r3, #5
  40922c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  409230:	f203 7307 	addw	r3, r3, #1799	; 0x707
  409234:	025b      	lsls	r3, r3, #9
  409236:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  409238:	68fb      	ldr	r3, [r7, #12]
}
  40923a:	4618      	mov	r0, r3
  40923c:	3714      	adds	r7, #20
  40923e:	46bd      	mov	sp, r7
  409240:	f85d 7b04 	ldr.w	r7, [sp], #4
  409244:	4770      	bx	lr
  409246:	bf00      	nop

00409248 <pio_get_pin_group_id>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port peripheral ID.
 */
uint32_t pio_get_pin_group_id(uint32_t ul_pin)
{
  409248:	b480      	push	{r7}
  40924a:	b085      	sub	sp, #20
  40924c:	af00      	add	r7, sp, #0
  40924e:	6078      	str	r0, [r7, #4]
		ul_id = ID_PIOC;
	} else {
		ul_id = ID_PIOA + (ul_pin >> 5);
	}
#else
	ul_id = ID_PIOA + (ul_pin >> 5);
  409250:	687b      	ldr	r3, [r7, #4]
  409252:	095b      	lsrs	r3, r3, #5
  409254:	330b      	adds	r3, #11
  409256:	60fb      	str	r3, [r7, #12]
#endif
	return ul_id;
  409258:	68fb      	ldr	r3, [r7, #12]
}
  40925a:	4618      	mov	r0, r3
  40925c:	3714      	adds	r7, #20
  40925e:	46bd      	mov	sp, r7
  409260:	f85d 7b04 	ldr.w	r7, [sp], #4
  409264:	4770      	bx	lr
  409266:	bf00      	nop

00409268 <pio_get_pin_group_mask>:
 * \param ul_pin The pin index.
 *
 * \return GPIO port pin mask.
 */
uint32_t pio_get_pin_group_mask(uint32_t ul_pin)
{
  409268:	b480      	push	{r7}
  40926a:	b085      	sub	sp, #20
  40926c:	af00      	add	r7, sp, #0
  40926e:	6078      	str	r0, [r7, #4]
	uint32_t ul_mask = 1 << (ul_pin & 0x1F);
  409270:	687b      	ldr	r3, [r7, #4]
  409272:	f003 031f 	and.w	r3, r3, #31
  409276:	2201      	movs	r2, #1
  409278:	fa02 f303 	lsl.w	r3, r2, r3
  40927c:	60fb      	str	r3, [r7, #12]
	return ul_mask;
  40927e:	68fb      	ldr	r3, [r7, #12]
}
  409280:	4618      	mov	r0, r3
  409282:	3714      	adds	r7, #20
  409284:	46bd      	mov	sp, r7
  409286:	f85d 7b04 	ldr.w	r7, [sp], #4
  40928a:	4770      	bx	lr

0040928c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40928c:	b580      	push	{r7, lr}
  40928e:	b084      	sub	sp, #16
  409290:	af00      	add	r7, sp, #0
  409292:	6078      	str	r0, [r7, #4]
  409294:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  409296:	6878      	ldr	r0, [r7, #4]
  409298:	4b2a      	ldr	r3, [pc, #168]	; (409344 <pio_handler_process+0xb8>)
  40929a:	4798      	blx	r3
  40929c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40929e:	6878      	ldr	r0, [r7, #4]
  4092a0:	4b29      	ldr	r3, [pc, #164]	; (409348 <pio_handler_process+0xbc>)
  4092a2:	4798      	blx	r3
  4092a4:	4603      	mov	r3, r0
  4092a6:	68fa      	ldr	r2, [r7, #12]
  4092a8:	4013      	ands	r3, r2
  4092aa:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4092ac:	68fb      	ldr	r3, [r7, #12]
  4092ae:	2b00      	cmp	r3, #0
  4092b0:	d039      	beq.n	409326 <pio_handler_process+0x9a>
		/* Find triggering source */
		i = 0;
  4092b2:	2300      	movs	r3, #0
  4092b4:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4092b6:	e033      	b.n	409320 <pio_handler_process+0x94>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4092b8:	4a24      	ldr	r2, [pc, #144]	; (40934c <pio_handler_process+0xc0>)
  4092ba:	68bb      	ldr	r3, [r7, #8]
  4092bc:	011b      	lsls	r3, r3, #4
  4092be:	4413      	add	r3, r2
  4092c0:	681a      	ldr	r2, [r3, #0]
  4092c2:	683b      	ldr	r3, [r7, #0]
  4092c4:	429a      	cmp	r2, r3
  4092c6:	d124      	bne.n	409312 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4092c8:	4a20      	ldr	r2, [pc, #128]	; (40934c <pio_handler_process+0xc0>)
  4092ca:	68bb      	ldr	r3, [r7, #8]
  4092cc:	011b      	lsls	r3, r3, #4
  4092ce:	4413      	add	r3, r2
  4092d0:	685a      	ldr	r2, [r3, #4]
  4092d2:	68fb      	ldr	r3, [r7, #12]
  4092d4:	4013      	ands	r3, r2
  4092d6:	2b00      	cmp	r3, #0
  4092d8:	d01b      	beq.n	409312 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4092da:	4a1c      	ldr	r2, [pc, #112]	; (40934c <pio_handler_process+0xc0>)
  4092dc:	68bb      	ldr	r3, [r7, #8]
  4092de:	011b      	lsls	r3, r3, #4
  4092e0:	4413      	add	r3, r2
  4092e2:	3308      	adds	r3, #8
  4092e4:	685b      	ldr	r3, [r3, #4]
  4092e6:	4919      	ldr	r1, [pc, #100]	; (40934c <pio_handler_process+0xc0>)
  4092e8:	68ba      	ldr	r2, [r7, #8]
  4092ea:	0112      	lsls	r2, r2, #4
  4092ec:	440a      	add	r2, r1
  4092ee:	6811      	ldr	r1, [r2, #0]
  4092f0:	4816      	ldr	r0, [pc, #88]	; (40934c <pio_handler_process+0xc0>)
  4092f2:	68ba      	ldr	r2, [r7, #8]
  4092f4:	0112      	lsls	r2, r2, #4
  4092f6:	4402      	add	r2, r0
  4092f8:	6852      	ldr	r2, [r2, #4]
  4092fa:	4608      	mov	r0, r1
  4092fc:	4611      	mov	r1, r2
  4092fe:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  409300:	4a12      	ldr	r2, [pc, #72]	; (40934c <pio_handler_process+0xc0>)
  409302:	68bb      	ldr	r3, [r7, #8]
  409304:	011b      	lsls	r3, r3, #4
  409306:	4413      	add	r3, r2
  409308:	685b      	ldr	r3, [r3, #4]
  40930a:	43db      	mvns	r3, r3
  40930c:	68fa      	ldr	r2, [r7, #12]
  40930e:	4013      	ands	r3, r2
  409310:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  409312:	68bb      	ldr	r3, [r7, #8]
  409314:	3301      	adds	r3, #1
  409316:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  409318:	68bb      	ldr	r3, [r7, #8]
  40931a:	2b06      	cmp	r3, #6
  40931c:	d900      	bls.n	409320 <pio_handler_process+0x94>
				break;
  40931e:	e002      	b.n	409326 <pio_handler_process+0x9a>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  409320:	68fb      	ldr	r3, [r7, #12]
  409322:	2b00      	cmp	r3, #0
  409324:	d1c8      	bne.n	4092b8 <pio_handler_process+0x2c>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  409326:	4b0a      	ldr	r3, [pc, #40]	; (409350 <pio_handler_process+0xc4>)
  409328:	681b      	ldr	r3, [r3, #0]
  40932a:	2b00      	cmp	r3, #0
  40932c:	d007      	beq.n	40933e <pio_handler_process+0xb2>
		if (pio_capture_handler) {
  40932e:	4b09      	ldr	r3, [pc, #36]	; (409354 <pio_handler_process+0xc8>)
  409330:	681b      	ldr	r3, [r3, #0]
  409332:	2b00      	cmp	r3, #0
  409334:	d003      	beq.n	40933e <pio_handler_process+0xb2>
			pio_capture_handler(p_pio);
  409336:	4b07      	ldr	r3, [pc, #28]	; (409354 <pio_handler_process+0xc8>)
  409338:	681b      	ldr	r3, [r3, #0]
  40933a:	6878      	ldr	r0, [r7, #4]
  40933c:	4798      	blx	r3
		}
	}
#endif
}
  40933e:	3710      	adds	r7, #16
  409340:	46bd      	mov	sp, r7
  409342:	bd80      	pop	{r7, pc}
  409344:	00408f8d 	.word	0x00408f8d
  409348:	00408fa5 	.word	0x00408fa5
  40934c:	20014ecc 	.word	0x20014ecc
  409350:	20016040 	.word	0x20016040
  409354:	20014f40 	.word	0x20014f40

00409358 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  409358:	b580      	push	{r7, lr}
  40935a:	b086      	sub	sp, #24
  40935c:	af00      	add	r7, sp, #0
  40935e:	60f8      	str	r0, [r7, #12]
  409360:	60b9      	str	r1, [r7, #8]
  409362:	607a      	str	r2, [r7, #4]
  409364:	603b      	str	r3, [r7, #0]
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  409366:	4b13      	ldr	r3, [pc, #76]	; (4093b4 <pio_handler_set+0x5c>)
  409368:	681b      	ldr	r3, [r3, #0]
  40936a:	2b06      	cmp	r3, #6
  40936c:	d901      	bls.n	409372 <pio_handler_set+0x1a>
		return 1;
  40936e:	2301      	movs	r3, #1
  409370:	e01c      	b.n	4093ac <pio_handler_set+0x54>

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  409372:	4b10      	ldr	r3, [pc, #64]	; (4093b4 <pio_handler_set+0x5c>)
  409374:	681b      	ldr	r3, [r3, #0]
  409376:	011a      	lsls	r2, r3, #4
  409378:	4b0f      	ldr	r3, [pc, #60]	; (4093b8 <pio_handler_set+0x60>)
  40937a:	4413      	add	r3, r2
  40937c:	617b      	str	r3, [r7, #20]
	pSource->id = ul_id;
  40937e:	697b      	ldr	r3, [r7, #20]
  409380:	68ba      	ldr	r2, [r7, #8]
  409382:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  409384:	697b      	ldr	r3, [r7, #20]
  409386:	687a      	ldr	r2, [r7, #4]
  409388:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40938a:	697b      	ldr	r3, [r7, #20]
  40938c:	683a      	ldr	r2, [r7, #0]
  40938e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  409390:	697b      	ldr	r3, [r7, #20]
  409392:	6a3a      	ldr	r2, [r7, #32]
  409394:	60da      	str	r2, [r3, #12]
	gs_ul_nb_sources++;
  409396:	4b07      	ldr	r3, [pc, #28]	; (4093b4 <pio_handler_set+0x5c>)
  409398:	681b      	ldr	r3, [r3, #0]
  40939a:	1c5a      	adds	r2, r3, #1
  40939c:	4b05      	ldr	r3, [pc, #20]	; (4093b4 <pio_handler_set+0x5c>)
  40939e:	601a      	str	r2, [r3, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4093a0:	68f8      	ldr	r0, [r7, #12]
  4093a2:	6879      	ldr	r1, [r7, #4]
  4093a4:	683a      	ldr	r2, [r7, #0]
  4093a6:	4b05      	ldr	r3, [pc, #20]	; (4093bc <pio_handler_set+0x64>)
  4093a8:	4798      	blx	r3

	return 0;
  4093aa:	2300      	movs	r3, #0
}
  4093ac:	4618      	mov	r0, r3
  4093ae:	3718      	adds	r7, #24
  4093b0:	46bd      	mov	sp, r7
  4093b2:	bd80      	pop	{r7, pc}
  4093b4:	20014f3c 	.word	0x20014f3c
  4093b8:	20014ecc 	.word	0x20014ecc
  4093bc:	00408ee5 	.word	0x00408ee5

004093c0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4093c0:	b580      	push	{r7, lr}
  4093c2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4093c4:	4802      	ldr	r0, [pc, #8]	; (4093d0 <PIOA_Handler+0x10>)
  4093c6:	210b      	movs	r1, #11
  4093c8:	4b02      	ldr	r3, [pc, #8]	; (4093d4 <PIOA_Handler+0x14>)
  4093ca:	4798      	blx	r3
}
  4093cc:	bd80      	pop	{r7, pc}
  4093ce:	bf00      	nop
  4093d0:	400e0e00 	.word	0x400e0e00
  4093d4:	0040928d 	.word	0x0040928d

004093d8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4093d8:	b580      	push	{r7, lr}
  4093da:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4093dc:	4802      	ldr	r0, [pc, #8]	; (4093e8 <PIOB_Handler+0x10>)
  4093de:	210c      	movs	r1, #12
  4093e0:	4b02      	ldr	r3, [pc, #8]	; (4093ec <PIOB_Handler+0x14>)
  4093e2:	4798      	blx	r3
}
  4093e4:	bd80      	pop	{r7, pc}
  4093e6:	bf00      	nop
  4093e8:	400e1000 	.word	0x400e1000
  4093ec:	0040928d 	.word	0x0040928d

004093f0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4093f0:	b580      	push	{r7, lr}
  4093f2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4093f4:	4802      	ldr	r0, [pc, #8]	; (409400 <PIOC_Handler+0x10>)
  4093f6:	210d      	movs	r1, #13
  4093f8:	4b02      	ldr	r3, [pc, #8]	; (409404 <PIOC_Handler+0x14>)
  4093fa:	4798      	blx	r3
}
  4093fc:	bd80      	pop	{r7, pc}
  4093fe:	bf00      	nop
  409400:	400e1200 	.word	0x400e1200
  409404:	0040928d 	.word	0x0040928d

00409408 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  409408:	b480      	push	{r7}
  40940a:	b085      	sub	sp, #20
  40940c:	af00      	add	r7, sp, #0
  40940e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  409410:	4b1d      	ldr	r3, [pc, #116]	; (409488 <pmc_switch_mck_to_pllack+0x80>)
  409412:	4a1d      	ldr	r2, [pc, #116]	; (409488 <pmc_switch_mck_to_pllack+0x80>)
  409414:	6b12      	ldr	r2, [r2, #48]	; 0x30
  409416:	f022 0170 	bic.w	r1, r2, #112	; 0x70
  40941a:	687a      	ldr	r2, [r7, #4]
  40941c:	430a      	orrs	r2, r1
  40941e:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  409420:	f44f 6300 	mov.w	r3, #2048	; 0x800
  409424:	60fb      	str	r3, [r7, #12]
  409426:	e007      	b.n	409438 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  409428:	68fb      	ldr	r3, [r7, #12]
  40942a:	2b00      	cmp	r3, #0
  40942c:	d101      	bne.n	409432 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40942e:	2301      	movs	r3, #1
  409430:	e023      	b.n	40947a <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  409432:	68fb      	ldr	r3, [r7, #12]
  409434:	3b01      	subs	r3, #1
  409436:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  409438:	4b13      	ldr	r3, [pc, #76]	; (409488 <pmc_switch_mck_to_pllack+0x80>)
  40943a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40943c:	f003 0308 	and.w	r3, r3, #8
  409440:	2b00      	cmp	r3, #0
  409442:	d0f1      	beq.n	409428 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  409444:	4b10      	ldr	r3, [pc, #64]	; (409488 <pmc_switch_mck_to_pllack+0x80>)
  409446:	4a10      	ldr	r2, [pc, #64]	; (409488 <pmc_switch_mck_to_pllack+0x80>)
  409448:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40944a:	f022 0203 	bic.w	r2, r2, #3
  40944e:	f042 0202 	orr.w	r2, r2, #2
  409452:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  409454:	f44f 6300 	mov.w	r3, #2048	; 0x800
  409458:	60fb      	str	r3, [r7, #12]
  40945a:	e007      	b.n	40946c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40945c:	68fb      	ldr	r3, [r7, #12]
  40945e:	2b00      	cmp	r3, #0
  409460:	d101      	bne.n	409466 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  409462:	2301      	movs	r3, #1
  409464:	e009      	b.n	40947a <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  409466:	68fb      	ldr	r3, [r7, #12]
  409468:	3b01      	subs	r3, #1
  40946a:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40946c:	4b06      	ldr	r3, [pc, #24]	; (409488 <pmc_switch_mck_to_pllack+0x80>)
  40946e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  409470:	f003 0308 	and.w	r3, r3, #8
  409474:	2b00      	cmp	r3, #0
  409476:	d0f1      	beq.n	40945c <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  409478:	2300      	movs	r3, #0
}
  40947a:	4618      	mov	r0, r3
  40947c:	3714      	adds	r7, #20
  40947e:	46bd      	mov	sp, r7
  409480:	f85d 7b04 	ldr.w	r7, [sp], #4
  409484:	4770      	bx	lr
  409486:	bf00      	nop
  409488:	400e0400 	.word	0x400e0400

0040948c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40948c:	b480      	push	{r7}
  40948e:	b083      	sub	sp, #12
  409490:	af00      	add	r7, sp, #0
  409492:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  409494:	687b      	ldr	r3, [r7, #4]
  409496:	2b01      	cmp	r3, #1
  409498:	d107      	bne.n	4094aa <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40949a:	4a08      	ldr	r2, [pc, #32]	; (4094bc <pmc_switch_sclk_to_32kxtal+0x30>)
  40949c:	4b07      	ldr	r3, [pc, #28]	; (4094bc <pmc_switch_sclk_to_32kxtal+0x30>)
  40949e:	689b      	ldr	r3, [r3, #8]
  4094a0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4094a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4094a8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4094aa:	4b04      	ldr	r3, [pc, #16]	; (4094bc <pmc_switch_sclk_to_32kxtal+0x30>)
  4094ac:	4a04      	ldr	r2, [pc, #16]	; (4094c0 <pmc_switch_sclk_to_32kxtal+0x34>)
  4094ae:	601a      	str	r2, [r3, #0]
}
  4094b0:	370c      	adds	r7, #12
  4094b2:	46bd      	mov	sp, r7
  4094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4094b8:	4770      	bx	lr
  4094ba:	bf00      	nop
  4094bc:	400e1410 	.word	0x400e1410
  4094c0:	a5000008 	.word	0xa5000008

004094c4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4094c4:	b480      	push	{r7}
  4094c6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4094c8:	4b09      	ldr	r3, [pc, #36]	; (4094f0 <pmc_osc_is_ready_32kxtal+0x2c>)
  4094ca:	695b      	ldr	r3, [r3, #20]
  4094cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4094d0:	2b00      	cmp	r3, #0
  4094d2:	d007      	beq.n	4094e4 <pmc_osc_is_ready_32kxtal+0x20>
  4094d4:	4b07      	ldr	r3, [pc, #28]	; (4094f4 <pmc_osc_is_ready_32kxtal+0x30>)
  4094d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4094d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4094dc:	2b00      	cmp	r3, #0
  4094de:	d001      	beq.n	4094e4 <pmc_osc_is_ready_32kxtal+0x20>
  4094e0:	2301      	movs	r3, #1
  4094e2:	e000      	b.n	4094e6 <pmc_osc_is_ready_32kxtal+0x22>
  4094e4:	2300      	movs	r3, #0
}
  4094e6:	4618      	mov	r0, r3
  4094e8:	46bd      	mov	sp, r7
  4094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4094ee:	4770      	bx	lr
  4094f0:	400e1410 	.word	0x400e1410
  4094f4:	400e0400 	.word	0x400e0400

004094f8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4094f8:	b480      	push	{r7}
  4094fa:	b083      	sub	sp, #12
  4094fc:	af00      	add	r7, sp, #0
  4094fe:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  409500:	4a18      	ldr	r2, [pc, #96]	; (409564 <pmc_switch_mainck_to_fastrc+0x6c>)
  409502:	4b18      	ldr	r3, [pc, #96]	; (409564 <pmc_switch_mainck_to_fastrc+0x6c>)
  409504:	6a1b      	ldr	r3, [r3, #32]
  409506:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40950a:	f043 0308 	orr.w	r3, r3, #8
  40950e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  409510:	bf00      	nop
  409512:	4b14      	ldr	r3, [pc, #80]	; (409564 <pmc_switch_mainck_to_fastrc+0x6c>)
  409514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  409516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40951a:	2b00      	cmp	r3, #0
  40951c:	d0f9      	beq.n	409512 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40951e:	4a11      	ldr	r2, [pc, #68]	; (409564 <pmc_switch_mainck_to_fastrc+0x6c>)
  409520:	4b10      	ldr	r3, [pc, #64]	; (409564 <pmc_switch_mainck_to_fastrc+0x6c>)
  409522:	6a1b      	ldr	r3, [r3, #32]
  409524:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  409528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40952c:	6879      	ldr	r1, [r7, #4]
  40952e:	430b      	orrs	r3, r1
  409530:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  409534:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  409536:	bf00      	nop
  409538:	4b0a      	ldr	r3, [pc, #40]	; (409564 <pmc_switch_mainck_to_fastrc+0x6c>)
  40953a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40953c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  409540:	2b00      	cmp	r3, #0
  409542:	d0f9      	beq.n	409538 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  409544:	4a07      	ldr	r2, [pc, #28]	; (409564 <pmc_switch_mainck_to_fastrc+0x6c>)
  409546:	4b07      	ldr	r3, [pc, #28]	; (409564 <pmc_switch_mainck_to_fastrc+0x6c>)
  409548:	6a1b      	ldr	r3, [r3, #32]
  40954a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40954e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  409552:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  409556:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  409558:	370c      	adds	r7, #12
  40955a:	46bd      	mov	sp, r7
  40955c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409560:	4770      	bx	lr
  409562:	bf00      	nop
  409564:	400e0400 	.word	0x400e0400

00409568 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  409568:	b480      	push	{r7}
  40956a:	b083      	sub	sp, #12
  40956c:	af00      	add	r7, sp, #0
  40956e:	6078      	str	r0, [r7, #4]
  409570:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  409572:	687b      	ldr	r3, [r7, #4]
  409574:	2b00      	cmp	r3, #0
  409576:	d008      	beq.n	40958a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  409578:	4916      	ldr	r1, [pc, #88]	; (4095d4 <pmc_switch_mainck_to_xtal+0x6c>)
  40957a:	4b16      	ldr	r3, [pc, #88]	; (4095d4 <pmc_switch_mainck_to_xtal+0x6c>)
  40957c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40957e:	4a16      	ldr	r2, [pc, #88]	; (4095d8 <pmc_switch_mainck_to_xtal+0x70>)
  409580:	401a      	ands	r2, r3
  409582:	4b16      	ldr	r3, [pc, #88]	; (4095dc <pmc_switch_mainck_to_xtal+0x74>)
  409584:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  409586:	620b      	str	r3, [r1, #32]
  409588:	e01e      	b.n	4095c8 <pmc_switch_mainck_to_xtal+0x60>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40958a:	4a12      	ldr	r2, [pc, #72]	; (4095d4 <pmc_switch_mainck_to_xtal+0x6c>)
  40958c:	4b11      	ldr	r3, [pc, #68]	; (4095d4 <pmc_switch_mainck_to_xtal+0x6c>)
  40958e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  409590:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  409594:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  409598:	6839      	ldr	r1, [r7, #0]
  40959a:	0209      	lsls	r1, r1, #8
  40959c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40959e:	430b      	orrs	r3, r1
  4095a0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4095a4:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4095a8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4095aa:	bf00      	nop
  4095ac:	4b09      	ldr	r3, [pc, #36]	; (4095d4 <pmc_switch_mainck_to_xtal+0x6c>)
  4095ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4095b0:	f003 0301 	and.w	r3, r3, #1
  4095b4:	2b00      	cmp	r3, #0
  4095b6:	d0f9      	beq.n	4095ac <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4095b8:	4a06      	ldr	r2, [pc, #24]	; (4095d4 <pmc_switch_mainck_to_xtal+0x6c>)
  4095ba:	4b06      	ldr	r3, [pc, #24]	; (4095d4 <pmc_switch_mainck_to_xtal+0x6c>)
  4095bc:	6a1b      	ldr	r3, [r3, #32]
  4095be:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4095c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4095c6:	6213      	str	r3, [r2, #32]
	}
}
  4095c8:	370c      	adds	r7, #12
  4095ca:	46bd      	mov	sp, r7
  4095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4095d0:	4770      	bx	lr
  4095d2:	bf00      	nop
  4095d4:	400e0400 	.word	0x400e0400
  4095d8:	fec8fffc 	.word	0xfec8fffc
  4095dc:	01370002 	.word	0x01370002

004095e0 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4095e0:	b480      	push	{r7}
  4095e2:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4095e4:	4b04      	ldr	r3, [pc, #16]	; (4095f8 <pmc_osc_is_ready_mainck+0x18>)
  4095e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4095e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4095ec:	4618      	mov	r0, r3
  4095ee:	46bd      	mov	sp, r7
  4095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4095f4:	4770      	bx	lr
  4095f6:	bf00      	nop
  4095f8:	400e0400 	.word	0x400e0400

004095fc <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4095fc:	b480      	push	{r7}
  4095fe:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  409600:	4b03      	ldr	r3, [pc, #12]	; (409610 <pmc_disable_pllack+0x14>)
  409602:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  409606:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  409608:	46bd      	mov	sp, r7
  40960a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40960e:	4770      	bx	lr
  409610:	400e0400 	.word	0x400e0400

00409614 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  409614:	b480      	push	{r7}
  409616:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  409618:	4b04      	ldr	r3, [pc, #16]	; (40962c <pmc_is_locked_pllack+0x18>)
  40961a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40961c:	f003 0302 	and.w	r3, r3, #2
}
  409620:	4618      	mov	r0, r3
  409622:	46bd      	mov	sp, r7
  409624:	f85d 7b04 	ldr.w	r7, [sp], #4
  409628:	4770      	bx	lr
  40962a:	bf00      	nop
  40962c:	400e0400 	.word	0x400e0400

00409630 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  409630:	b480      	push	{r7}
  409632:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  409634:	4b03      	ldr	r3, [pc, #12]	; (409644 <pmc_disable_pllbck+0x14>)
  409636:	2200      	movs	r2, #0
  409638:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40963a:	46bd      	mov	sp, r7
  40963c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409640:	4770      	bx	lr
  409642:	bf00      	nop
  409644:	400e0400 	.word	0x400e0400

00409648 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  409648:	b480      	push	{r7}
  40964a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40964c:	4b04      	ldr	r3, [pc, #16]	; (409660 <pmc_is_locked_pllbck+0x18>)
  40964e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  409650:	f003 0304 	and.w	r3, r3, #4
}
  409654:	4618      	mov	r0, r3
  409656:	46bd      	mov	sp, r7
  409658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40965c:	4770      	bx	lr
  40965e:	bf00      	nop
  409660:	400e0400 	.word	0x400e0400

00409664 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  409664:	b480      	push	{r7}
  409666:	b083      	sub	sp, #12
  409668:	af00      	add	r7, sp, #0
  40966a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40966c:	687b      	ldr	r3, [r7, #4]
  40966e:	2b22      	cmp	r3, #34	; 0x22
  409670:	d901      	bls.n	409676 <pmc_enable_periph_clk+0x12>
		return 1;
  409672:	2301      	movs	r3, #1
  409674:	e02f      	b.n	4096d6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  409676:	687b      	ldr	r3, [r7, #4]
  409678:	2b1f      	cmp	r3, #31
  40967a:	d813      	bhi.n	4096a4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40967c:	4b19      	ldr	r3, [pc, #100]	; (4096e4 <pmc_enable_periph_clk+0x80>)
  40967e:	699a      	ldr	r2, [r3, #24]
  409680:	687b      	ldr	r3, [r7, #4]
  409682:	2101      	movs	r1, #1
  409684:	fa01 f303 	lsl.w	r3, r1, r3
  409688:	401a      	ands	r2, r3
  40968a:	687b      	ldr	r3, [r7, #4]
  40968c:	2101      	movs	r1, #1
  40968e:	fa01 f303 	lsl.w	r3, r1, r3
  409692:	429a      	cmp	r2, r3
  409694:	d01e      	beq.n	4096d4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  409696:	4b13      	ldr	r3, [pc, #76]	; (4096e4 <pmc_enable_periph_clk+0x80>)
  409698:	687a      	ldr	r2, [r7, #4]
  40969a:	2101      	movs	r1, #1
  40969c:	fa01 f202 	lsl.w	r2, r1, r2
  4096a0:	611a      	str	r2, [r3, #16]
  4096a2:	e017      	b.n	4096d4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
  4096a4:	687b      	ldr	r3, [r7, #4]
  4096a6:	3b20      	subs	r3, #32
  4096a8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4096aa:	4b0e      	ldr	r3, [pc, #56]	; (4096e4 <pmc_enable_periph_clk+0x80>)
  4096ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4096b0:	687b      	ldr	r3, [r7, #4]
  4096b2:	2101      	movs	r1, #1
  4096b4:	fa01 f303 	lsl.w	r3, r1, r3
  4096b8:	401a      	ands	r2, r3
  4096ba:	687b      	ldr	r3, [r7, #4]
  4096bc:	2101      	movs	r1, #1
  4096be:	fa01 f303 	lsl.w	r3, r1, r3
  4096c2:	429a      	cmp	r2, r3
  4096c4:	d006      	beq.n	4096d4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4096c6:	4b07      	ldr	r3, [pc, #28]	; (4096e4 <pmc_enable_periph_clk+0x80>)
  4096c8:	687a      	ldr	r2, [r7, #4]
  4096ca:	2101      	movs	r1, #1
  4096cc:	fa01 f202 	lsl.w	r2, r1, r2
  4096d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4096d4:	2300      	movs	r3, #0
}
  4096d6:	4618      	mov	r0, r3
  4096d8:	370c      	adds	r7, #12
  4096da:	46bd      	mov	sp, r7
  4096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4096e0:	4770      	bx	lr
  4096e2:	bf00      	nop
  4096e4:	400e0400 	.word	0x400e0400

004096e8 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
  4096e8:	b480      	push	{r7}
  4096ea:	b083      	sub	sp, #12
  4096ec:	af00      	add	r7, sp, #0
  4096ee:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4096f0:	687b      	ldr	r3, [r7, #4]
  4096f2:	2b22      	cmp	r3, #34	; 0x22
  4096f4:	d901      	bls.n	4096fa <pmc_disable_periph_clk+0x12>
		return 1;
  4096f6:	2301      	movs	r3, #1
  4096f8:	e02f      	b.n	40975a <pmc_disable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4096fa:	687b      	ldr	r3, [r7, #4]
  4096fc:	2b1f      	cmp	r3, #31
  4096fe:	d813      	bhi.n	409728 <pmc_disable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  409700:	4b19      	ldr	r3, [pc, #100]	; (409768 <pmc_disable_periph_clk+0x80>)
  409702:	699a      	ldr	r2, [r3, #24]
  409704:	687b      	ldr	r3, [r7, #4]
  409706:	2101      	movs	r1, #1
  409708:	fa01 f303 	lsl.w	r3, r1, r3
  40970c:	401a      	ands	r2, r3
  40970e:	687b      	ldr	r3, [r7, #4]
  409710:	2101      	movs	r1, #1
  409712:	fa01 f303 	lsl.w	r3, r1, r3
  409716:	429a      	cmp	r2, r3
  409718:	d11e      	bne.n	409758 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR0 = 1 << ul_id;
  40971a:	4b13      	ldr	r3, [pc, #76]	; (409768 <pmc_disable_periph_clk+0x80>)
  40971c:	687a      	ldr	r2, [r7, #4]
  40971e:	2101      	movs	r1, #1
  409720:	fa01 f202 	lsl.w	r2, r1, r2
  409724:	615a      	str	r2, [r3, #20]
  409726:	e017      	b.n	409758 <pmc_disable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
  409728:	687b      	ldr	r3, [r7, #4]
  40972a:	3b20      	subs	r3, #32
  40972c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40972e:	4b0e      	ldr	r3, [pc, #56]	; (409768 <pmc_disable_periph_clk+0x80>)
  409730:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  409734:	687b      	ldr	r3, [r7, #4]
  409736:	2101      	movs	r1, #1
  409738:	fa01 f303 	lsl.w	r3, r1, r3
  40973c:	401a      	ands	r2, r3
  40973e:	687b      	ldr	r3, [r7, #4]
  409740:	2101      	movs	r1, #1
  409742:	fa01 f303 	lsl.w	r3, r1, r3
  409746:	429a      	cmp	r2, r3
  409748:	d106      	bne.n	409758 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR1 = 1 << ul_id;
  40974a:	4b07      	ldr	r3, [pc, #28]	; (409768 <pmc_disable_periph_clk+0x80>)
  40974c:	687a      	ldr	r2, [r7, #4]
  40974e:	2101      	movs	r1, #1
  409750:	fa01 f202 	lsl.w	r2, r1, r2
  409754:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		}
#endif
	}
	return 0;
  409758:	2300      	movs	r3, #0
}
  40975a:	4618      	mov	r0, r3
  40975c:	370c      	adds	r7, #12
  40975e:	46bd      	mov	sp, r7
  409760:	f85d 7b04 	ldr.w	r7, [sp], #4
  409764:	4770      	bx	lr
  409766:	bf00      	nop
  409768:	400e0400 	.word	0x400e0400

0040976c <pmc_switch_udpck_to_pllbck>:
 * \brief Switch UDP (USB) clock source selection to PLLB clock.
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
  40976c:	b480      	push	{r7}
  40976e:	b083      	sub	sp, #12
  409770:	af00      	add	r7, sp, #0
  409772:	6078      	str	r0, [r7, #4]
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  409774:	4b06      	ldr	r3, [pc, #24]	; (409790 <pmc_switch_udpck_to_pllbck+0x24>)
  409776:	687a      	ldr	r2, [r7, #4]
  409778:	0212      	lsls	r2, r2, #8
  40977a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  40977e:	f042 0201 	orr.w	r2, r2, #1
  409782:	639a      	str	r2, [r3, #56]	; 0x38
}
  409784:	370c      	adds	r7, #12
  409786:	46bd      	mov	sp, r7
  409788:	f85d 7b04 	ldr.w	r7, [sp], #4
  40978c:	4770      	bx	lr
  40978e:	bf00      	nop
  409790:	400e0400 	.word	0x400e0400

00409794 <pmc_enable_udpck>:
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55)
/**
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
  409794:	b480      	push	{r7}
  409796:	af00      	add	r7, sp, #0
# if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  409798:	4b03      	ldr	r3, [pc, #12]	; (4097a8 <pmc_enable_udpck+0x14>)
  40979a:	2280      	movs	r2, #128	; 0x80
  40979c:	601a      	str	r2, [r3, #0]
# else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
# endif
}
  40979e:	46bd      	mov	sp, r7
  4097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4097a4:	4770      	bx	lr
  4097a6:	bf00      	nop
  4097a8:	400e0400 	.word	0x400e0400

004097ac <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
  4097ac:	b480      	push	{r7}
  4097ae:	b083      	sub	sp, #12
  4097b0:	af00      	add	r7, sp, #0
  4097b2:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4097b4:	687b      	ldr	r3, [r7, #4]
  4097b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
  4097ba:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
  4097bc:	4b05      	ldr	r3, [pc, #20]	; (4097d4 <pmc_set_fast_startup_input+0x28>)
  4097be:	4a05      	ldr	r2, [pc, #20]	; (4097d4 <pmc_set_fast_startup_input+0x28>)
  4097c0:	6f11      	ldr	r1, [r2, #112]	; 0x70
  4097c2:	687a      	ldr	r2, [r7, #4]
  4097c4:	430a      	orrs	r2, r1
  4097c6:	671a      	str	r2, [r3, #112]	; 0x70
}
  4097c8:	370c      	adds	r7, #12
  4097ca:	46bd      	mov	sp, r7
  4097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4097d0:	4770      	bx	lr
  4097d2:	bf00      	nop
  4097d4:	400e0400 	.word	0x400e0400

004097d8 <pmc_is_wakeup_clocks_restored>:
#endif
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
  4097d8:	b480      	push	{r7}
  4097da:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
  4097dc:	4b09      	ldr	r3, [pc, #36]	; (409804 <pmc_is_wakeup_clocks_restored+0x2c>)
  4097de:	781b      	ldrb	r3, [r3, #0]
  4097e0:	b2db      	uxtb	r3, r3
  4097e2:	2b00      	cmp	r3, #0
  4097e4:	bf0c      	ite	eq
  4097e6:	2300      	moveq	r3, #0
  4097e8:	2301      	movne	r3, #1
  4097ea:	b2db      	uxtb	r3, r3
  4097ec:	f083 0301 	eor.w	r3, r3, #1
  4097f0:	b2db      	uxtb	r3, r3
  4097f2:	f003 0301 	and.w	r3, r3, #1
  4097f6:	b2db      	uxtb	r3, r3
}
  4097f8:	4618      	mov	r0, r3
  4097fa:	46bd      	mov	sp, r7
  4097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  409800:	4770      	bx	lr
  409802:	bf00      	nop
  409804:	20014f44 	.word	0x20014f44

00409808 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  409808:	b480      	push	{r7}
  40980a:	b083      	sub	sp, #12
  40980c:	af00      	add	r7, sp, #0
  40980e:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  409810:	687b      	ldr	r3, [r7, #4]
  409812:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  409816:	605a      	str	r2, [r3, #4]

}
  409818:	370c      	adds	r7, #12
  40981a:	46bd      	mov	sp, r7
  40981c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409820:	4770      	bx	lr
  409822:	bf00      	nop

00409824 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  409824:	b580      	push	{r7, lr}
  409826:	b084      	sub	sp, #16
  409828:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  40982a:	4b27      	ldr	r3, [pc, #156]	; (4098c8 <Reset_Handler+0xa4>)
  40982c:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  40982e:	4b27      	ldr	r3, [pc, #156]	; (4098cc <Reset_Handler+0xa8>)
  409830:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  409832:	68fa      	ldr	r2, [r7, #12]
  409834:	68bb      	ldr	r3, [r7, #8]
  409836:	429a      	cmp	r2, r3
  409838:	d90d      	bls.n	409856 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  40983a:	e007      	b.n	40984c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  40983c:	68bb      	ldr	r3, [r7, #8]
  40983e:	1d1a      	adds	r2, r3, #4
  409840:	60ba      	str	r2, [r7, #8]
  409842:	68fa      	ldr	r2, [r7, #12]
  409844:	1d11      	adds	r1, r2, #4
  409846:	60f9      	str	r1, [r7, #12]
  409848:	6812      	ldr	r2, [r2, #0]
  40984a:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40984c:	68ba      	ldr	r2, [r7, #8]
  40984e:	4b20      	ldr	r3, [pc, #128]	; (4098d0 <Reset_Handler+0xac>)
  409850:	429a      	cmp	r2, r3
  409852:	d3f3      	bcc.n	40983c <Reset_Handler+0x18>
  409854:	e020      	b.n	409898 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  409856:	68fa      	ldr	r2, [r7, #12]
  409858:	68bb      	ldr	r3, [r7, #8]
  40985a:	429a      	cmp	r2, r3
  40985c:	d21c      	bcs.n	409898 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40985e:	4a1c      	ldr	r2, [pc, #112]	; (4098d0 <Reset_Handler+0xac>)
  409860:	4b1a      	ldr	r3, [pc, #104]	; (4098cc <Reset_Handler+0xa8>)
  409862:	1ad3      	subs	r3, r2, r3
  409864:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  409866:	68fa      	ldr	r2, [r7, #12]
  409868:	687b      	ldr	r3, [r7, #4]
  40986a:	4413      	add	r3, r2
  40986c:	3b04      	subs	r3, #4
  40986e:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  409870:	68ba      	ldr	r2, [r7, #8]
  409872:	687b      	ldr	r3, [r7, #4]
  409874:	4413      	add	r3, r2
  409876:	3b04      	subs	r3, #4
  409878:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40987a:	e00a      	b.n	409892 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  40987c:	68bb      	ldr	r3, [r7, #8]
  40987e:	1f1a      	subs	r2, r3, #4
  409880:	60ba      	str	r2, [r7, #8]
  409882:	68fa      	ldr	r2, [r7, #12]
  409884:	1f11      	subs	r1, r2, #4
  409886:	60f9      	str	r1, [r7, #12]
  409888:	6812      	ldr	r2, [r2, #0]
  40988a:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40988c:	687b      	ldr	r3, [r7, #4]
  40988e:	3b04      	subs	r3, #4
  409890:	607b      	str	r3, [r7, #4]
  409892:	687b      	ldr	r3, [r7, #4]
  409894:	2b00      	cmp	r3, #0
  409896:	d1f1      	bne.n	40987c <Reset_Handler+0x58>
  409898:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40989a:	4b0e      	ldr	r3, [pc, #56]	; (4098d4 <Reset_Handler+0xb0>)
  40989c:	60bb      	str	r3, [r7, #8]
  40989e:	e004      	b.n	4098aa <Reset_Handler+0x86>
		*pDest++ = 0;
  4098a0:	68bb      	ldr	r3, [r7, #8]
  4098a2:	1d1a      	adds	r2, r3, #4
  4098a4:	60ba      	str	r2, [r7, #8]
  4098a6:	2200      	movs	r2, #0
  4098a8:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4098aa:	68ba      	ldr	r2, [r7, #8]
  4098ac:	4b0a      	ldr	r3, [pc, #40]	; (4098d8 <Reset_Handler+0xb4>)
  4098ae:	429a      	cmp	r2, r3
  4098b0:	d3f6      	bcc.n	4098a0 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  4098b2:	4b0a      	ldr	r3, [pc, #40]	; (4098dc <Reset_Handler+0xb8>)
  4098b4:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  4098b6:	4b0a      	ldr	r3, [pc, #40]	; (4098e0 <Reset_Handler+0xbc>)
  4098b8:	68fa      	ldr	r2, [r7, #12]
  4098ba:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4098bc:	4b09      	ldr	r3, [pc, #36]	; (4098e4 <Reset_Handler+0xc0>)
  4098be:	4798      	blx	r3

	/* Branch to main function */
	main();
  4098c0:	4b09      	ldr	r3, [pc, #36]	; (4098e8 <Reset_Handler+0xc4>)
  4098c2:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4098c4:	e7fe      	b.n	4098c4 <Reset_Handler+0xa0>
  4098c6:	bf00      	nop
  4098c8:	00413ae4 	.word	0x00413ae4
  4098cc:	20000000 	.word	0x20000000
  4098d0:	20000abc 	.word	0x20000abc
  4098d4:	20000ac0 	.word	0x20000ac0
  4098d8:	20016048 	.word	0x20016048
  4098dc:	00400000 	.word	0x00400000
  4098e0:	e000ed00 	.word	0xe000ed00
  4098e4:	0040a345 	.word	0x0040a345
  4098e8:	00409cf9 	.word	0x00409cf9

004098ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4098ec:	b480      	push	{r7}
  4098ee:	af00      	add	r7, sp, #0
	while (1) {
	}
  4098f0:	e7fe      	b.n	4098f0 <Dummy_Handler+0x4>
  4098f2:	bf00      	nop

004098f4 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  4098f4:	b480      	push	{r7}
  4098f6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4098f8:	4b5d      	ldr	r3, [pc, #372]	; (409a70 <SystemCoreClockUpdate+0x17c>)
  4098fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4098fc:	f003 0303 	and.w	r3, r3, #3
  409900:	2b03      	cmp	r3, #3
  409902:	f200 8096 	bhi.w	409a32 <SystemCoreClockUpdate+0x13e>
  409906:	a101      	add	r1, pc, #4	; (adr r1, 40990c <SystemCoreClockUpdate+0x18>)
  409908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  40990c:	0040991d 	.word	0x0040991d
  409910:	0040993d 	.word	0x0040993d
  409914:	00409987 	.word	0x00409987
  409918:	00409987 	.word	0x00409987
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40991c:	4b55      	ldr	r3, [pc, #340]	; (409a74 <SystemCoreClockUpdate+0x180>)
  40991e:	695b      	ldr	r3, [r3, #20]
  409920:	f003 0380 	and.w	r3, r3, #128	; 0x80
  409924:	2b00      	cmp	r3, #0
  409926:	d004      	beq.n	409932 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  409928:	4b53      	ldr	r3, [pc, #332]	; (409a78 <SystemCoreClockUpdate+0x184>)
  40992a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40992e:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  409930:	e080      	b.n	409a34 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  409932:	4b51      	ldr	r3, [pc, #324]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409934:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  409938:	601a      	str	r2, [r3, #0]
			}
		break;
  40993a:	e07b      	b.n	409a34 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40993c:	4b4c      	ldr	r3, [pc, #304]	; (409a70 <SystemCoreClockUpdate+0x17c>)
  40993e:	6a1b      	ldr	r3, [r3, #32]
  409940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  409944:	2b00      	cmp	r3, #0
  409946:	d003      	beq.n	409950 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  409948:	4b4b      	ldr	r3, [pc, #300]	; (409a78 <SystemCoreClockUpdate+0x184>)
  40994a:	4a4c      	ldr	r2, [pc, #304]	; (409a7c <SystemCoreClockUpdate+0x188>)
  40994c:	601a      	str	r2, [r3, #0]
  40994e:	e019      	b.n	409984 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  409950:	4b49      	ldr	r3, [pc, #292]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409952:	4a4b      	ldr	r2, [pc, #300]	; (409a80 <SystemCoreClockUpdate+0x18c>)
  409954:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  409956:	4b46      	ldr	r3, [pc, #280]	; (409a70 <SystemCoreClockUpdate+0x17c>)
  409958:	6a1b      	ldr	r3, [r3, #32]
  40995a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40995e:	2b10      	cmp	r3, #16
  409960:	d008      	beq.n	409974 <SystemCoreClockUpdate+0x80>
  409962:	2b20      	cmp	r3, #32
  409964:	d00a      	beq.n	40997c <SystemCoreClockUpdate+0x88>
  409966:	2b00      	cmp	r3, #0
  409968:	d000      	beq.n	40996c <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  40996a:	e00b      	b.n	409984 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40996c:	4b42      	ldr	r3, [pc, #264]	; (409a78 <SystemCoreClockUpdate+0x184>)
  40996e:	4a44      	ldr	r2, [pc, #272]	; (409a80 <SystemCoreClockUpdate+0x18c>)
  409970:	601a      	str	r2, [r3, #0]
			break;
  409972:	e007      	b.n	409984 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  409974:	4b40      	ldr	r3, [pc, #256]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409976:	4a43      	ldr	r2, [pc, #268]	; (409a84 <SystemCoreClockUpdate+0x190>)
  409978:	601a      	str	r2, [r3, #0]
			break;
  40997a:	e003      	b.n	409984 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40997c:	4b3e      	ldr	r3, [pc, #248]	; (409a78 <SystemCoreClockUpdate+0x184>)
  40997e:	4a3f      	ldr	r2, [pc, #252]	; (409a7c <SystemCoreClockUpdate+0x188>)
  409980:	601a      	str	r2, [r3, #0]
			break;
  409982:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  409984:	e056      	b.n	409a34 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  409986:	4b3a      	ldr	r3, [pc, #232]	; (409a70 <SystemCoreClockUpdate+0x17c>)
  409988:	6a1b      	ldr	r3, [r3, #32]
  40998a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40998e:	2b00      	cmp	r3, #0
  409990:	d003      	beq.n	40999a <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  409992:	4b39      	ldr	r3, [pc, #228]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409994:	4a39      	ldr	r2, [pc, #228]	; (409a7c <SystemCoreClockUpdate+0x188>)
  409996:	601a      	str	r2, [r3, #0]
  409998:	e019      	b.n	4099ce <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40999a:	4b37      	ldr	r3, [pc, #220]	; (409a78 <SystemCoreClockUpdate+0x184>)
  40999c:	4a38      	ldr	r2, [pc, #224]	; (409a80 <SystemCoreClockUpdate+0x18c>)
  40999e:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4099a0:	4b33      	ldr	r3, [pc, #204]	; (409a70 <SystemCoreClockUpdate+0x17c>)
  4099a2:	6a1b      	ldr	r3, [r3, #32]
  4099a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4099a8:	2b10      	cmp	r3, #16
  4099aa:	d008      	beq.n	4099be <SystemCoreClockUpdate+0xca>
  4099ac:	2b20      	cmp	r3, #32
  4099ae:	d00a      	beq.n	4099c6 <SystemCoreClockUpdate+0xd2>
  4099b0:	2b00      	cmp	r3, #0
  4099b2:	d000      	beq.n	4099b6 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  4099b4:	e00b      	b.n	4099ce <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4099b6:	4b30      	ldr	r3, [pc, #192]	; (409a78 <SystemCoreClockUpdate+0x184>)
  4099b8:	4a31      	ldr	r2, [pc, #196]	; (409a80 <SystemCoreClockUpdate+0x18c>)
  4099ba:	601a      	str	r2, [r3, #0]
					break;
  4099bc:	e007      	b.n	4099ce <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4099be:	4b2e      	ldr	r3, [pc, #184]	; (409a78 <SystemCoreClockUpdate+0x184>)
  4099c0:	4a30      	ldr	r2, [pc, #192]	; (409a84 <SystemCoreClockUpdate+0x190>)
  4099c2:	601a      	str	r2, [r3, #0]
					break;
  4099c4:	e003      	b.n	4099ce <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4099c6:	4b2c      	ldr	r3, [pc, #176]	; (409a78 <SystemCoreClockUpdate+0x184>)
  4099c8:	4a2c      	ldr	r2, [pc, #176]	; (409a7c <SystemCoreClockUpdate+0x188>)
  4099ca:	601a      	str	r2, [r3, #0]
					break;
  4099cc:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4099ce:	4b28      	ldr	r3, [pc, #160]	; (409a70 <SystemCoreClockUpdate+0x17c>)
  4099d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4099d2:	f003 0303 	and.w	r3, r3, #3
  4099d6:	2b02      	cmp	r3, #2
  4099d8:	d115      	bne.n	409a06 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4099da:	4b25      	ldr	r3, [pc, #148]	; (409a70 <SystemCoreClockUpdate+0x17c>)
  4099dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4099de:	4b2a      	ldr	r3, [pc, #168]	; (409a88 <SystemCoreClockUpdate+0x194>)
  4099e0:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  4099e2:	0c1b      	lsrs	r3, r3, #16
  4099e4:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4099e6:	4a24      	ldr	r2, [pc, #144]	; (409a78 <SystemCoreClockUpdate+0x184>)
  4099e8:	6812      	ldr	r2, [r2, #0]
  4099ea:	fb02 f203 	mul.w	r2, r2, r3
  4099ee:	4b22      	ldr	r3, [pc, #136]	; (409a78 <SystemCoreClockUpdate+0x184>)
  4099f0:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4099f2:	4b21      	ldr	r3, [pc, #132]	; (409a78 <SystemCoreClockUpdate+0x184>)
  4099f4:	681a      	ldr	r2, [r3, #0]
  4099f6:	4b1e      	ldr	r3, [pc, #120]	; (409a70 <SystemCoreClockUpdate+0x17c>)
  4099f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  4099fa:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4099fc:	fbb2 f2f3 	udiv	r2, r2, r3
  409a00:	4b1d      	ldr	r3, [pc, #116]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409a02:	601a      	str	r2, [r3, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  409a04:	e016      	b.n	409a34 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  409a06:	4b1a      	ldr	r3, [pc, #104]	; (409a70 <SystemCoreClockUpdate+0x17c>)
  409a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  409a0a:	4b1f      	ldr	r3, [pc, #124]	; (409a88 <SystemCoreClockUpdate+0x194>)
  409a0c:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  409a0e:	0c1b      	lsrs	r3, r3, #16
  409a10:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  409a12:	4a19      	ldr	r2, [pc, #100]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409a14:	6812      	ldr	r2, [r2, #0]
  409a16:	fb02 f203 	mul.w	r2, r2, r3
  409a1a:	4b17      	ldr	r3, [pc, #92]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409a1c:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  409a1e:	4b16      	ldr	r3, [pc, #88]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409a20:	681a      	ldr	r2, [r3, #0]
  409a22:	4b13      	ldr	r3, [pc, #76]	; (409a70 <SystemCoreClockUpdate+0x17c>)
  409a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  409a26:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  409a28:	fbb2 f2f3 	udiv	r2, r2, r3
  409a2c:	4b12      	ldr	r3, [pc, #72]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409a2e:	601a      	str	r2, [r3, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  409a30:	e000      	b.n	409a34 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  409a32:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  409a34:	4b0e      	ldr	r3, [pc, #56]	; (409a70 <SystemCoreClockUpdate+0x17c>)
  409a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409a38:	f003 0370 	and.w	r3, r3, #112	; 0x70
  409a3c:	2b70      	cmp	r3, #112	; 0x70
  409a3e:	d108      	bne.n	409a52 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  409a40:	4b0d      	ldr	r3, [pc, #52]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409a42:	681a      	ldr	r2, [r3, #0]
  409a44:	4b11      	ldr	r3, [pc, #68]	; (409a8c <SystemCoreClockUpdate+0x198>)
  409a46:	fba3 1302 	umull	r1, r3, r3, r2
  409a4a:	085a      	lsrs	r2, r3, #1
  409a4c:	4b0a      	ldr	r3, [pc, #40]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409a4e:	601a      	str	r2, [r3, #0]
  409a50:	e009      	b.n	409a66 <SystemCoreClockUpdate+0x172>
	} else {
		SystemCoreClock >>=
  409a52:	4b09      	ldr	r3, [pc, #36]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409a54:	681a      	ldr	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  409a56:	4b06      	ldr	r3, [pc, #24]	; (409a70 <SystemCoreClockUpdate+0x17c>)
  409a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  409a5e:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  409a60:	40da      	lsrs	r2, r3
  409a62:	4b05      	ldr	r3, [pc, #20]	; (409a78 <SystemCoreClockUpdate+0x184>)
  409a64:	601a      	str	r2, [r3, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  409a66:	46bd      	mov	sp, r7
  409a68:	f85d 7b04 	ldr.w	r7, [sp], #4
  409a6c:	4770      	bx	lr
  409a6e:	bf00      	nop
  409a70:	400e0400 	.word	0x400e0400
  409a74:	400e1410 	.word	0x400e1410
  409a78:	20000210 	.word	0x20000210
  409a7c:	00b71b00 	.word	0x00b71b00
  409a80:	003d0900 	.word	0x003d0900
  409a84:	007a1200 	.word	0x007a1200
  409a88:	07ff0000 	.word	0x07ff0000
  409a8c:	aaaaaaab 	.word	0xaaaaaaab

00409a90 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  409a90:	b480      	push	{r7}
  409a92:	b083      	sub	sp, #12
  409a94:	af00      	add	r7, sp, #0
  409a96:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  409a98:	687a      	ldr	r2, [r7, #4]
  409a9a:	4b22      	ldr	r3, [pc, #136]	; (409b24 <system_init_flash+0x94>)
  409a9c:	429a      	cmp	r2, r3
  409a9e:	d808      	bhi.n	409ab2 <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  409aa0:	4b21      	ldr	r3, [pc, #132]	; (409b28 <system_init_flash+0x98>)
  409aa2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  409aa6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  409aa8:	4b20      	ldr	r3, [pc, #128]	; (409b2c <system_init_flash+0x9c>)
  409aaa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  409aae:	601a      	str	r2, [r3, #0]
  409ab0:	e033      	b.n	409b1a <system_init_flash+0x8a>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  409ab2:	687a      	ldr	r2, [r7, #4]
  409ab4:	4b1e      	ldr	r3, [pc, #120]	; (409b30 <system_init_flash+0xa0>)
  409ab6:	429a      	cmp	r2, r3
  409ab8:	d806      	bhi.n	409ac8 <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  409aba:	4b1b      	ldr	r3, [pc, #108]	; (409b28 <system_init_flash+0x98>)
  409abc:	4a1d      	ldr	r2, [pc, #116]	; (409b34 <system_init_flash+0xa4>)
  409abe:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  409ac0:	4b1a      	ldr	r3, [pc, #104]	; (409b2c <system_init_flash+0x9c>)
  409ac2:	4a1c      	ldr	r2, [pc, #112]	; (409b34 <system_init_flash+0xa4>)
  409ac4:	601a      	str	r2, [r3, #0]
  409ac6:	e028      	b.n	409b1a <system_init_flash+0x8a>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  409ac8:	687a      	ldr	r2, [r7, #4]
  409aca:	4b1b      	ldr	r3, [pc, #108]	; (409b38 <system_init_flash+0xa8>)
  409acc:	429a      	cmp	r2, r3
  409ace:	d806      	bhi.n	409ade <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  409ad0:	4b15      	ldr	r3, [pc, #84]	; (409b28 <system_init_flash+0x98>)
  409ad2:	4a1a      	ldr	r2, [pc, #104]	; (409b3c <system_init_flash+0xac>)
  409ad4:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  409ad6:	4b15      	ldr	r3, [pc, #84]	; (409b2c <system_init_flash+0x9c>)
  409ad8:	4a18      	ldr	r2, [pc, #96]	; (409b3c <system_init_flash+0xac>)
  409ada:	601a      	str	r2, [r3, #0]
  409adc:	e01d      	b.n	409b1a <system_init_flash+0x8a>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  409ade:	687a      	ldr	r2, [r7, #4]
  409ae0:	4b17      	ldr	r3, [pc, #92]	; (409b40 <system_init_flash+0xb0>)
  409ae2:	429a      	cmp	r2, r3
  409ae4:	d806      	bhi.n	409af4 <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  409ae6:	4b10      	ldr	r3, [pc, #64]	; (409b28 <system_init_flash+0x98>)
  409ae8:	4a16      	ldr	r2, [pc, #88]	; (409b44 <system_init_flash+0xb4>)
  409aea:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  409aec:	4b0f      	ldr	r3, [pc, #60]	; (409b2c <system_init_flash+0x9c>)
  409aee:	4a15      	ldr	r2, [pc, #84]	; (409b44 <system_init_flash+0xb4>)
  409af0:	601a      	str	r2, [r3, #0]
  409af2:	e012      	b.n	409b1a <system_init_flash+0x8a>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  409af4:	687a      	ldr	r2, [r7, #4]
  409af6:	4b14      	ldr	r3, [pc, #80]	; (409b48 <system_init_flash+0xb8>)
  409af8:	429a      	cmp	r2, r3
  409afa:	d808      	bhi.n	409b0e <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  409afc:	4b0a      	ldr	r3, [pc, #40]	; (409b28 <system_init_flash+0x98>)
  409afe:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  409b02:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  409b04:	4b09      	ldr	r3, [pc, #36]	; (409b2c <system_init_flash+0x9c>)
  409b06:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  409b0a:	601a      	str	r2, [r3, #0]
  409b0c:	e005      	b.n	409b1a <system_init_flash+0x8a>
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  409b0e:	4b06      	ldr	r3, [pc, #24]	; (409b28 <system_init_flash+0x98>)
  409b10:	4a0e      	ldr	r2, [pc, #56]	; (409b4c <system_init_flash+0xbc>)
  409b12:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  409b14:	4b05      	ldr	r3, [pc, #20]	; (409b2c <system_init_flash+0x9c>)
  409b16:	4a0d      	ldr	r2, [pc, #52]	; (409b4c <system_init_flash+0xbc>)
  409b18:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  409b1a:	370c      	adds	r7, #12
  409b1c:	46bd      	mov	sp, r7
  409b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409b22:	4770      	bx	lr
  409b24:	01312cff 	.word	0x01312cff
  409b28:	400e0a00 	.word	0x400e0a00
  409b2c:	400e0c00 	.word	0x400e0c00
  409b30:	026259ff 	.word	0x026259ff
  409b34:	04000100 	.word	0x04000100
  409b38:	039386ff 	.word	0x039386ff
  409b3c:	04000200 	.word	0x04000200
  409b40:	04c4b3ff 	.word	0x04c4b3ff
  409b44:	04000300 	.word	0x04000300
  409b48:	05f5e0ff 	.word	0x05f5e0ff
  409b4c:	04000500 	.word	0x04000500

00409b50 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  409b50:	b480      	push	{r7}
  409b52:	b085      	sub	sp, #20
  409b54:	af00      	add	r7, sp, #0
  409b56:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  409b58:	4b10      	ldr	r3, [pc, #64]	; (409b9c <_sbrk+0x4c>)
  409b5a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  409b5c:	4b10      	ldr	r3, [pc, #64]	; (409ba0 <_sbrk+0x50>)
  409b5e:	681b      	ldr	r3, [r3, #0]
  409b60:	2b00      	cmp	r3, #0
  409b62:	d102      	bne.n	409b6a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  409b64:	4b0e      	ldr	r3, [pc, #56]	; (409ba0 <_sbrk+0x50>)
  409b66:	4a0f      	ldr	r2, [pc, #60]	; (409ba4 <_sbrk+0x54>)
  409b68:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  409b6a:	4b0d      	ldr	r3, [pc, #52]	; (409ba0 <_sbrk+0x50>)
  409b6c:	681b      	ldr	r3, [r3, #0]
  409b6e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  409b70:	68ba      	ldr	r2, [r7, #8]
  409b72:	687b      	ldr	r3, [r7, #4]
  409b74:	441a      	add	r2, r3
  409b76:	68fb      	ldr	r3, [r7, #12]
  409b78:	429a      	cmp	r2, r3
  409b7a:	dd02      	ble.n	409b82 <_sbrk+0x32>
		return (caddr_t) -1;	
  409b7c:	f04f 33ff 	mov.w	r3, #4294967295
  409b80:	e006      	b.n	409b90 <_sbrk+0x40>
	}

	heap += incr;
  409b82:	4b07      	ldr	r3, [pc, #28]	; (409ba0 <_sbrk+0x50>)
  409b84:	681a      	ldr	r2, [r3, #0]
  409b86:	687b      	ldr	r3, [r7, #4]
  409b88:	441a      	add	r2, r3
  409b8a:	4b05      	ldr	r3, [pc, #20]	; (409ba0 <_sbrk+0x50>)
  409b8c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
  409b8e:	68bb      	ldr	r3, [r7, #8]
}
  409b90:	4618      	mov	r0, r3
  409b92:	3714      	adds	r7, #20
  409b94:	46bd      	mov	sp, r7
  409b96:	f85d 7b04 	ldr.w	r7, [sp], #4
  409b9a:	4770      	bx	lr
  409b9c:	20027ffc 	.word	0x20027ffc
  409ba0:	20014f48 	.word	0x20014f48
  409ba4:	20019048 	.word	0x20019048

00409ba8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  409ba8:	b480      	push	{r7}
  409baa:	b083      	sub	sp, #12
  409bac:	af00      	add	r7, sp, #0
  409bae:	6078      	str	r0, [r7, #4]
	return -1;
  409bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
  409bb4:	4618      	mov	r0, r3
  409bb6:	370c      	adds	r7, #12
  409bb8:	46bd      	mov	sp, r7
  409bba:	f85d 7b04 	ldr.w	r7, [sp], #4
  409bbe:	4770      	bx	lr

00409bc0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  409bc0:	b480      	push	{r7}
  409bc2:	b083      	sub	sp, #12
  409bc4:	af00      	add	r7, sp, #0
  409bc6:	6078      	str	r0, [r7, #4]
  409bc8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  409bca:	683b      	ldr	r3, [r7, #0]
  409bcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  409bd0:	605a      	str	r2, [r3, #4]

	return 0;
  409bd2:	2300      	movs	r3, #0
}
  409bd4:	4618      	mov	r0, r3
  409bd6:	370c      	adds	r7, #12
  409bd8:	46bd      	mov	sp, r7
  409bda:	f85d 7b04 	ldr.w	r7, [sp], #4
  409bde:	4770      	bx	lr

00409be0 <_isatty>:

extern int _isatty(int file)
{
  409be0:	b480      	push	{r7}
  409be2:	b083      	sub	sp, #12
  409be4:	af00      	add	r7, sp, #0
  409be6:	6078      	str	r0, [r7, #4]
	return 1;
  409be8:	2301      	movs	r3, #1
}
  409bea:	4618      	mov	r0, r3
  409bec:	370c      	adds	r7, #12
  409bee:	46bd      	mov	sp, r7
  409bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
  409bf4:	4770      	bx	lr
  409bf6:	bf00      	nop

00409bf8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  409bf8:	b480      	push	{r7}
  409bfa:	b085      	sub	sp, #20
  409bfc:	af00      	add	r7, sp, #0
  409bfe:	60f8      	str	r0, [r7, #12]
  409c00:	60b9      	str	r1, [r7, #8]
  409c02:	607a      	str	r2, [r7, #4]
	return 0;
  409c04:	2300      	movs	r3, #0
}
  409c06:	4618      	mov	r0, r3
  409c08:	3714      	adds	r7, #20
  409c0a:	46bd      	mov	sp, r7
  409c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409c10:	4770      	bx	lr
  409c12:	bf00      	nop

00409c14 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  409c14:	b480      	push	{r7}
  409c16:	b08b      	sub	sp, #44	; 0x2c
  409c18:	af00      	add	r7, sp, #0
  409c1a:	6078      	str	r0, [r7, #4]
  409c1c:	460b      	mov	r3, r1
  409c1e:	70fb      	strb	r3, [r7, #3]
  409c20:	687b      	ldr	r3, [r7, #4]
  409c22:	627b      	str	r3, [r7, #36]	; 0x24
  409c24:	78fb      	ldrb	r3, [r7, #3]
  409c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  409c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409c2c:	61fb      	str	r3, [r7, #28]
  409c2e:	69fb      	ldr	r3, [r7, #28]
  409c30:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  409c32:	69bb      	ldr	r3, [r7, #24]
  409c34:	095b      	lsrs	r3, r3, #5
  409c36:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  409c38:	697b      	ldr	r3, [r7, #20]
  409c3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  409c3e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  409c42:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  409c44:	613b      	str	r3, [r7, #16]

	if (level) {
  409c46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  409c4a:	2b00      	cmp	r3, #0
  409c4c:	d009      	beq.n	409c62 <ioport_set_pin_level+0x4e>
  409c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409c50:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  409c52:	68fb      	ldr	r3, [r7, #12]
  409c54:	f003 031f 	and.w	r3, r3, #31
  409c58:	2201      	movs	r2, #1
  409c5a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  409c5c:	693b      	ldr	r3, [r7, #16]
  409c5e:	631a      	str	r2, [r3, #48]	; 0x30
  409c60:	e008      	b.n	409c74 <ioport_set_pin_level+0x60>
  409c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409c64:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  409c66:	68bb      	ldr	r3, [r7, #8]
  409c68:	f003 031f 	and.w	r3, r3, #31
  409c6c:	2201      	movs	r2, #1
  409c6e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  409c70:	693b      	ldr	r3, [r7, #16]
  409c72:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  409c74:	372c      	adds	r7, #44	; 0x2c
  409c76:	46bd      	mov	sp, r7
  409c78:	f85d 7b04 	ldr.w	r7, [sp], #4
  409c7c:	4770      	bx	lr
  409c7e:	bf00      	nop

00409c80 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  409c80:	b480      	push	{r7}
  409c82:	b089      	sub	sp, #36	; 0x24
  409c84:	af00      	add	r7, sp, #0
  409c86:	6078      	str	r0, [r7, #4]
  409c88:	687b      	ldr	r3, [r7, #4]
  409c8a:	61fb      	str	r3, [r7, #28]
  409c8c:	69fb      	ldr	r3, [r7, #28]
  409c8e:	61bb      	str	r3, [r7, #24]
  409c90:	69bb      	ldr	r3, [r7, #24]
  409c92:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  409c94:	697b      	ldr	r3, [r7, #20]
  409c96:	095b      	lsrs	r3, r3, #5
  409c98:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  409c9a:	693b      	ldr	r3, [r7, #16]
  409c9c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  409ca0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  409ca4:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  409ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  409ca8:	69fb      	ldr	r3, [r7, #28]
  409caa:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  409cac:	68fb      	ldr	r3, [r7, #12]
  409cae:	f003 031f 	and.w	r3, r3, #31
  409cb2:	2101      	movs	r1, #1
  409cb4:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  409cb8:	4013      	ands	r3, r2
  409cba:	2b00      	cmp	r3, #0
  409cbc:	bf0c      	ite	eq
  409cbe:	2300      	moveq	r3, #0
  409cc0:	2301      	movne	r3, #1
  409cc2:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  409cc4:	4618      	mov	r0, r3
  409cc6:	3724      	adds	r7, #36	; 0x24
  409cc8:	46bd      	mov	sp, r7
  409cca:	f85d 7b04 	ldr.w	r7, [sp], #4
  409cce:	4770      	bx	lr

00409cd0 <HardFault_Handler>:
#include "chrg_chargeMonitor.h"

extern void xPortSysTickHandler(void);
extern void vApplicationMallocFailedHook( void );
void HardFault_Handler()
{
  409cd0:	b480      	push	{r7}
  409cd2:	af00      	add	r7, sp, #0
	while(1); 
  409cd4:	e7fe      	b.n	409cd4 <HardFault_Handler+0x4>
  409cd6:	bf00      	nop

00409cd8 <MemManage_Handler>:
}
void MemManage_Handler()
{
  409cd8:	b480      	push	{r7}
  409cda:	af00      	add	r7, sp, #0
	while(1); 
  409cdc:	e7fe      	b.n	409cdc <MemManage_Handler+0x4>
  409cde:	bf00      	nop

00409ce0 <BusFault_Handler>:
}
void BusFault_Handler()
{
  409ce0:	b480      	push	{r7}
  409ce2:	af00      	add	r7, sp, #0
	while(1); 
  409ce4:	e7fe      	b.n	409ce4 <BusFault_Handler+0x4>
  409ce6:	bf00      	nop

00409ce8 <UsageFault_Handler>:
}
void UsageFault_Handler()
{
  409ce8:	b480      	push	{r7}
  409cea:	af00      	add	r7, sp, #0
	while(1); 
  409cec:	e7fe      	b.n	409cec <UsageFault_Handler+0x4>
  409cee:	bf00      	nop

00409cf0 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
  409cf0:	b480      	push	{r7}
  409cf2:	af00      	add	r7, sp, #0
	while(1);
  409cf4:	e7fe      	b.n	409cf4 <vApplicationMallocFailedHook+0x4>
  409cf6:	bf00      	nop

00409cf8 <main>:
	////sgSysTickCount++;
	//xPortSysTickHandler();
//}

int main (void)
{
  409cf8:	b590      	push	{r4, r7, lr}
  409cfa:	b087      	sub	sp, #28
  409cfc:	af04      	add	r7, sp, #16
	irq_initialize_vectors();
	cpu_irq_enable();
  409cfe:	4b1b      	ldr	r3, [pc, #108]	; (409d6c <main+0x74>)
  409d00:	2201      	movs	r2, #1
  409d02:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  409d04:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  409d08:	b662      	cpsie	i
	////Initialize system clock and peripherals
	sysclk_init();	
  409d0a:	4b19      	ldr	r3, [pc, #100]	; (409d70 <main+0x78>)
  409d0c:	4798      	blx	r3
	board_init();
  409d0e:	4b19      	ldr	r3, [pc, #100]	; (409d74 <main+0x7c>)
  409d10:	4798      	blx	r3
	// Insert application code here, after the board has been initialized.
	//start all the tasks
	int retCode = xTaskCreate(mgr_managerTask, "MGR", TASK_MANAGER_STACK_SIZE, NULL, TASK_MANAGER_PRIORITY, NULL);
  409d12:	2304      	movs	r3, #4
  409d14:	9300      	str	r3, [sp, #0]
  409d16:	2300      	movs	r3, #0
  409d18:	9301      	str	r3, [sp, #4]
  409d1a:	2300      	movs	r3, #0
  409d1c:	9302      	str	r3, [sp, #8]
  409d1e:	2300      	movs	r3, #0
  409d20:	9303      	str	r3, [sp, #12]
  409d22:	4815      	ldr	r0, [pc, #84]	; (409d78 <main+0x80>)
  409d24:	4915      	ldr	r1, [pc, #84]	; (409d7c <main+0x84>)
  409d26:	f44f 7200 	mov.w	r2, #512	; 0x200
  409d2a:	2300      	movs	r3, #0
  409d2c:	4c14      	ldr	r4, [pc, #80]	; (409d80 <main+0x88>)
  409d2e:	47a0      	blx	r4
  409d30:	6078      	str	r0, [r7, #4]
	if (retCode != pdPASS)
  409d32:	687b      	ldr	r3, [r7, #4]
  409d34:	2b01      	cmp	r3, #1
  409d36:	d003      	beq.n	409d40 <main+0x48>
	{
		printf("Failed to create MGR task code %d\r\n", retCode);
  409d38:	4812      	ldr	r0, [pc, #72]	; (409d84 <main+0x8c>)
  409d3a:	6879      	ldr	r1, [r7, #4]
  409d3c:	4b12      	ldr	r3, [pc, #72]	; (409d88 <main+0x90>)
  409d3e:	4798      	blx	r3
	}	
	/* Start the scheduler. */
	vTaskStartScheduler();	
  409d40:	4b12      	ldr	r3, [pc, #72]	; (409d8c <main+0x94>)
  409d42:	4798      	blx	r3
	
	// This skeleton code simply sets the LED to the state of the button.
	while (1) 
	{
		// Is button pressed?
		if (ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) 
  409d44:	2002      	movs	r0, #2
  409d46:	4b12      	ldr	r3, [pc, #72]	; (409d90 <main+0x98>)
  409d48:	4798      	blx	r3
  409d4a:	4603      	mov	r3, r0
  409d4c:	f083 0301 	eor.w	r3, r3, #1
  409d50:	b2db      	uxtb	r3, r3
  409d52:	2b00      	cmp	r3, #0
  409d54:	d004      	beq.n	409d60 <main+0x68>
		{
			// Yes, so turn LED on.
			ioport_set_pin_level(LED_0_PIN, LED_0_ACTIVE);
  409d56:	2057      	movs	r0, #87	; 0x57
  409d58:	2100      	movs	r1, #0
  409d5a:	4b0e      	ldr	r3, [pc, #56]	; (409d94 <main+0x9c>)
  409d5c:	4798      	blx	r3
		{
			// No, so turn LED off.
			ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
		}

	}
  409d5e:	e7f1      	b.n	409d44 <main+0x4c>
			ioport_set_pin_level(LED_0_PIN, LED_0_ACTIVE);
		}
		else 
		{
			// No, so turn LED off.
			ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  409d60:	2057      	movs	r0, #87	; 0x57
  409d62:	2101      	movs	r1, #1
  409d64:	4b0b      	ldr	r3, [pc, #44]	; (409d94 <main+0x9c>)
  409d66:	4798      	blx	r3
		}

	}
  409d68:	e7ec      	b.n	409d44 <main+0x4c>
  409d6a:	bf00      	nop
  409d6c:	2000020c 	.word	0x2000020c
  409d70:	0040895d 	.word	0x0040895d
  409d74:	00408c11 	.word	0x00408c11
  409d78:	00404b81 	.word	0x00404b81
  409d7c:	00413658 	.word	0x00413658
  409d80:	00406ea9 	.word	0x00406ea9
  409d84:	0041365c 	.word	0x0041365c
  409d88:	0040a395 	.word	0x0040a395
  409d8c:	004070cd 	.word	0x004070cd
  409d90:	00409c81 	.word	0x00409c81
  409d94:	00409c15 	.word	0x00409c15

00409d98 <__aeabi_uldivmod>:
  409d98:	b94b      	cbnz	r3, 409dae <__aeabi_uldivmod+0x16>
  409d9a:	b942      	cbnz	r2, 409dae <__aeabi_uldivmod+0x16>
  409d9c:	2900      	cmp	r1, #0
  409d9e:	bf08      	it	eq
  409da0:	2800      	cmpeq	r0, #0
  409da2:	d002      	beq.n	409daa <__aeabi_uldivmod+0x12>
  409da4:	f04f 31ff 	mov.w	r1, #4294967295
  409da8:	4608      	mov	r0, r1
  409daa:	f000 b83b 	b.w	409e24 <__aeabi_idiv0>
  409dae:	b082      	sub	sp, #8
  409db0:	46ec      	mov	ip, sp
  409db2:	e92d 5000 	stmdb	sp!, {ip, lr}
  409db6:	f000 f81d 	bl	409df4 <__gnu_uldivmod_helper>
  409dba:	f8dd e004 	ldr.w	lr, [sp, #4]
  409dbe:	b002      	add	sp, #8
  409dc0:	bc0c      	pop	{r2, r3}
  409dc2:	4770      	bx	lr

00409dc4 <__gnu_ldivmod_helper>:
  409dc4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  409dc8:	9e06      	ldr	r6, [sp, #24]
  409dca:	4614      	mov	r4, r2
  409dcc:	461d      	mov	r5, r3
  409dce:	4680      	mov	r8, r0
  409dd0:	4689      	mov	r9, r1
  409dd2:	f000 f829 	bl	409e28 <__divdi3>
  409dd6:	fb04 f301 	mul.w	r3, r4, r1
  409dda:	fb00 3305 	mla	r3, r0, r5, r3
  409dde:	fba4 4500 	umull	r4, r5, r4, r0
  409de2:	441d      	add	r5, r3
  409de4:	ebb8 0404 	subs.w	r4, r8, r4
  409de8:	eb69 0505 	sbc.w	r5, r9, r5
  409dec:	e9c6 4500 	strd	r4, r5, [r6]
  409df0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00409df4 <__gnu_uldivmod_helper>:
  409df4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  409df8:	9e06      	ldr	r6, [sp, #24]
  409dfa:	4614      	mov	r4, r2
  409dfc:	4680      	mov	r8, r0
  409dfe:	4689      	mov	r9, r1
  409e00:	461d      	mov	r5, r3
  409e02:	f000 f95d 	bl	40a0c0 <__udivdi3>
  409e06:	fb00 f505 	mul.w	r5, r0, r5
  409e0a:	fb04 5301 	mla	r3, r4, r1, r5
  409e0e:	fba0 4504 	umull	r4, r5, r0, r4
  409e12:	441d      	add	r5, r3
  409e14:	ebb8 0404 	subs.w	r4, r8, r4
  409e18:	eb69 0505 	sbc.w	r5, r9, r5
  409e1c:	e9c6 4500 	strd	r4, r5, [r6]
  409e20:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00409e24 <__aeabi_idiv0>:
  409e24:	4770      	bx	lr
  409e26:	bf00      	nop

00409e28 <__divdi3>:
  409e28:	2900      	cmp	r1, #0
  409e2a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409e2e:	f2c0 809f 	blt.w	409f70 <__divdi3+0x148>
  409e32:	2400      	movs	r4, #0
  409e34:	2b00      	cmp	r3, #0
  409e36:	f2c0 8096 	blt.w	409f66 <__divdi3+0x13e>
  409e3a:	4615      	mov	r5, r2
  409e3c:	4606      	mov	r6, r0
  409e3e:	460f      	mov	r7, r1
  409e40:	2b00      	cmp	r3, #0
  409e42:	d13e      	bne.n	409ec2 <__divdi3+0x9a>
  409e44:	428a      	cmp	r2, r1
  409e46:	d957      	bls.n	409ef8 <__divdi3+0xd0>
  409e48:	fab2 f382 	clz	r3, r2
  409e4c:	b14b      	cbz	r3, 409e62 <__divdi3+0x3a>
  409e4e:	f1c3 0220 	rsb	r2, r3, #32
  409e52:	fa01 f703 	lsl.w	r7, r1, r3
  409e56:	fa20 f202 	lsr.w	r2, r0, r2
  409e5a:	409d      	lsls	r5, r3
  409e5c:	4317      	orrs	r7, r2
  409e5e:	fa00 f603 	lsl.w	r6, r0, r3
  409e62:	0c29      	lsrs	r1, r5, #16
  409e64:	fbb7 f2f1 	udiv	r2, r7, r1
  409e68:	0c33      	lsrs	r3, r6, #16
  409e6a:	fb01 7c12 	mls	ip, r1, r2, r7
  409e6e:	b2a8      	uxth	r0, r5
  409e70:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  409e74:	fb00 f302 	mul.w	r3, r0, r2
  409e78:	42bb      	cmp	r3, r7
  409e7a:	d909      	bls.n	409e90 <__divdi3+0x68>
  409e7c:	197f      	adds	r7, r7, r5
  409e7e:	f102 3cff 	add.w	ip, r2, #4294967295
  409e82:	f080 8101 	bcs.w	40a088 <__divdi3+0x260>
  409e86:	42bb      	cmp	r3, r7
  409e88:	f240 80fe 	bls.w	40a088 <__divdi3+0x260>
  409e8c:	3a02      	subs	r2, #2
  409e8e:	442f      	add	r7, r5
  409e90:	1aff      	subs	r7, r7, r3
  409e92:	fbb7 f3f1 	udiv	r3, r7, r1
  409e96:	b2b6      	uxth	r6, r6
  409e98:	fb01 7113 	mls	r1, r1, r3, r7
  409e9c:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  409ea0:	fb00 f003 	mul.w	r0, r0, r3
  409ea4:	4288      	cmp	r0, r1
  409ea6:	d908      	bls.n	409eba <__divdi3+0x92>
  409ea8:	1949      	adds	r1, r1, r5
  409eaa:	f103 37ff 	add.w	r7, r3, #4294967295
  409eae:	f080 80ed 	bcs.w	40a08c <__divdi3+0x264>
  409eb2:	4288      	cmp	r0, r1
  409eb4:	f240 80ea 	bls.w	40a08c <__divdi3+0x264>
  409eb8:	3b02      	subs	r3, #2
  409eba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  409ebe:	2300      	movs	r3, #0
  409ec0:	e003      	b.n	409eca <__divdi3+0xa2>
  409ec2:	428b      	cmp	r3, r1
  409ec4:	d90a      	bls.n	409edc <__divdi3+0xb4>
  409ec6:	2300      	movs	r3, #0
  409ec8:	461a      	mov	r2, r3
  409eca:	4610      	mov	r0, r2
  409ecc:	4619      	mov	r1, r3
  409ece:	b114      	cbz	r4, 409ed6 <__divdi3+0xae>
  409ed0:	4240      	negs	r0, r0
  409ed2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409ed6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  409eda:	4770      	bx	lr
  409edc:	fab3 f883 	clz	r8, r3
  409ee0:	f1b8 0f00 	cmp.w	r8, #0
  409ee4:	f040 8084 	bne.w	409ff0 <__divdi3+0x1c8>
  409ee8:	428b      	cmp	r3, r1
  409eea:	d302      	bcc.n	409ef2 <__divdi3+0xca>
  409eec:	4282      	cmp	r2, r0
  409eee:	f200 80de 	bhi.w	40a0ae <__divdi3+0x286>
  409ef2:	2300      	movs	r3, #0
  409ef4:	2201      	movs	r2, #1
  409ef6:	e7e8      	b.n	409eca <__divdi3+0xa2>
  409ef8:	b912      	cbnz	r2, 409f00 <__divdi3+0xd8>
  409efa:	2301      	movs	r3, #1
  409efc:	fbb3 f5f2 	udiv	r5, r3, r2
  409f00:	fab5 f285 	clz	r2, r5
  409f04:	2a00      	cmp	r2, #0
  409f06:	d139      	bne.n	409f7c <__divdi3+0x154>
  409f08:	1b7f      	subs	r7, r7, r5
  409f0a:	0c28      	lsrs	r0, r5, #16
  409f0c:	fa1f fc85 	uxth.w	ip, r5
  409f10:	2301      	movs	r3, #1
  409f12:	fbb7 f1f0 	udiv	r1, r7, r0
  409f16:	0c32      	lsrs	r2, r6, #16
  409f18:	fb00 7711 	mls	r7, r0, r1, r7
  409f1c:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  409f20:	fb0c f201 	mul.w	r2, ip, r1
  409f24:	42ba      	cmp	r2, r7
  409f26:	d907      	bls.n	409f38 <__divdi3+0x110>
  409f28:	197f      	adds	r7, r7, r5
  409f2a:	f101 38ff 	add.w	r8, r1, #4294967295
  409f2e:	d202      	bcs.n	409f36 <__divdi3+0x10e>
  409f30:	42ba      	cmp	r2, r7
  409f32:	f200 80c1 	bhi.w	40a0b8 <__divdi3+0x290>
  409f36:	4641      	mov	r1, r8
  409f38:	1abf      	subs	r7, r7, r2
  409f3a:	fbb7 f2f0 	udiv	r2, r7, r0
  409f3e:	b2b6      	uxth	r6, r6
  409f40:	fb00 7012 	mls	r0, r0, r2, r7
  409f44:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  409f48:	fb0c fc02 	mul.w	ip, ip, r2
  409f4c:	4584      	cmp	ip, r0
  409f4e:	d907      	bls.n	409f60 <__divdi3+0x138>
  409f50:	1940      	adds	r0, r0, r5
  409f52:	f102 37ff 	add.w	r7, r2, #4294967295
  409f56:	d202      	bcs.n	409f5e <__divdi3+0x136>
  409f58:	4584      	cmp	ip, r0
  409f5a:	f200 80ab 	bhi.w	40a0b4 <__divdi3+0x28c>
  409f5e:	463a      	mov	r2, r7
  409f60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  409f64:	e7b1      	b.n	409eca <__divdi3+0xa2>
  409f66:	43e4      	mvns	r4, r4
  409f68:	4252      	negs	r2, r2
  409f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409f6e:	e764      	b.n	409e3a <__divdi3+0x12>
  409f70:	4240      	negs	r0, r0
  409f72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409f76:	f04f 34ff 	mov.w	r4, #4294967295
  409f7a:	e75b      	b.n	409e34 <__divdi3+0xc>
  409f7c:	4095      	lsls	r5, r2
  409f7e:	f1c2 0320 	rsb	r3, r2, #32
  409f82:	fa27 f103 	lsr.w	r1, r7, r3
  409f86:	0c28      	lsrs	r0, r5, #16
  409f88:	fa26 f303 	lsr.w	r3, r6, r3
  409f8c:	4097      	lsls	r7, r2
  409f8e:	fbb1 f8f0 	udiv	r8, r1, r0
  409f92:	431f      	orrs	r7, r3
  409f94:	0c3b      	lsrs	r3, r7, #16
  409f96:	fb00 1118 	mls	r1, r0, r8, r1
  409f9a:	fa1f fc85 	uxth.w	ip, r5
  409f9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  409fa2:	fb0c f308 	mul.w	r3, ip, r8
  409fa6:	428b      	cmp	r3, r1
  409fa8:	fa06 f602 	lsl.w	r6, r6, r2
  409fac:	d908      	bls.n	409fc0 <__divdi3+0x198>
  409fae:	1949      	adds	r1, r1, r5
  409fb0:	f108 32ff 	add.w	r2, r8, #4294967295
  409fb4:	d279      	bcs.n	40a0aa <__divdi3+0x282>
  409fb6:	428b      	cmp	r3, r1
  409fb8:	d977      	bls.n	40a0aa <__divdi3+0x282>
  409fba:	f1a8 0802 	sub.w	r8, r8, #2
  409fbe:	4429      	add	r1, r5
  409fc0:	1ac9      	subs	r1, r1, r3
  409fc2:	fbb1 f3f0 	udiv	r3, r1, r0
  409fc6:	b2bf      	uxth	r7, r7
  409fc8:	fb00 1113 	mls	r1, r0, r3, r1
  409fcc:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  409fd0:	fb0c f203 	mul.w	r2, ip, r3
  409fd4:	42ba      	cmp	r2, r7
  409fd6:	d907      	bls.n	409fe8 <__divdi3+0x1c0>
  409fd8:	197f      	adds	r7, r7, r5
  409fda:	f103 31ff 	add.w	r1, r3, #4294967295
  409fde:	d260      	bcs.n	40a0a2 <__divdi3+0x27a>
  409fe0:	42ba      	cmp	r2, r7
  409fe2:	d95e      	bls.n	40a0a2 <__divdi3+0x27a>
  409fe4:	3b02      	subs	r3, #2
  409fe6:	442f      	add	r7, r5
  409fe8:	1abf      	subs	r7, r7, r2
  409fea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  409fee:	e790      	b.n	409f12 <__divdi3+0xea>
  409ff0:	f1c8 0220 	rsb	r2, r8, #32
  409ff4:	fa03 fc08 	lsl.w	ip, r3, r8
  409ff8:	fa25 f302 	lsr.w	r3, r5, r2
  409ffc:	ea43 0c0c 	orr.w	ip, r3, ip
  40a000:	ea4f 491c 	mov.w	r9, ip, lsr #16
  40a004:	fa21 f302 	lsr.w	r3, r1, r2
  40a008:	fa01 f708 	lsl.w	r7, r1, r8
  40a00c:	fa20 f202 	lsr.w	r2, r0, r2
  40a010:	fbb3 f1f9 	udiv	r1, r3, r9
  40a014:	4317      	orrs	r7, r2
  40a016:	fb09 3311 	mls	r3, r9, r1, r3
  40a01a:	0c3a      	lsrs	r2, r7, #16
  40a01c:	fa1f fb8c 	uxth.w	fp, ip
  40a020:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  40a024:	fb0b fa01 	mul.w	sl, fp, r1
  40a028:	459a      	cmp	sl, r3
  40a02a:	fa05 f008 	lsl.w	r0, r5, r8
  40a02e:	d908      	bls.n	40a042 <__divdi3+0x21a>
  40a030:	eb13 030c 	adds.w	r3, r3, ip
  40a034:	f101 32ff 	add.w	r2, r1, #4294967295
  40a038:	d235      	bcs.n	40a0a6 <__divdi3+0x27e>
  40a03a:	459a      	cmp	sl, r3
  40a03c:	d933      	bls.n	40a0a6 <__divdi3+0x27e>
  40a03e:	3902      	subs	r1, #2
  40a040:	4463      	add	r3, ip
  40a042:	ebca 0303 	rsb	r3, sl, r3
  40a046:	fbb3 f2f9 	udiv	r2, r3, r9
  40a04a:	fb09 3312 	mls	r3, r9, r2, r3
  40a04e:	b2bf      	uxth	r7, r7
  40a050:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40a054:	fb0b f902 	mul.w	r9, fp, r2
  40a058:	45b9      	cmp	r9, r7
  40a05a:	d908      	bls.n	40a06e <__divdi3+0x246>
  40a05c:	eb17 070c 	adds.w	r7, r7, ip
  40a060:	f102 33ff 	add.w	r3, r2, #4294967295
  40a064:	d21b      	bcs.n	40a09e <__divdi3+0x276>
  40a066:	45b9      	cmp	r9, r7
  40a068:	d919      	bls.n	40a09e <__divdi3+0x276>
  40a06a:	3a02      	subs	r2, #2
  40a06c:	4467      	add	r7, ip
  40a06e:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  40a072:	fba5 0100 	umull	r0, r1, r5, r0
  40a076:	ebc9 0707 	rsb	r7, r9, r7
  40a07a:	428f      	cmp	r7, r1
  40a07c:	f04f 0300 	mov.w	r3, #0
  40a080:	d30a      	bcc.n	40a098 <__divdi3+0x270>
  40a082:	d005      	beq.n	40a090 <__divdi3+0x268>
  40a084:	462a      	mov	r2, r5
  40a086:	e720      	b.n	409eca <__divdi3+0xa2>
  40a088:	4662      	mov	r2, ip
  40a08a:	e701      	b.n	409e90 <__divdi3+0x68>
  40a08c:	463b      	mov	r3, r7
  40a08e:	e714      	b.n	409eba <__divdi3+0x92>
  40a090:	fa06 f608 	lsl.w	r6, r6, r8
  40a094:	4286      	cmp	r6, r0
  40a096:	d2f5      	bcs.n	40a084 <__divdi3+0x25c>
  40a098:	1e6a      	subs	r2, r5, #1
  40a09a:	2300      	movs	r3, #0
  40a09c:	e715      	b.n	409eca <__divdi3+0xa2>
  40a09e:	461a      	mov	r2, r3
  40a0a0:	e7e5      	b.n	40a06e <__divdi3+0x246>
  40a0a2:	460b      	mov	r3, r1
  40a0a4:	e7a0      	b.n	409fe8 <__divdi3+0x1c0>
  40a0a6:	4611      	mov	r1, r2
  40a0a8:	e7cb      	b.n	40a042 <__divdi3+0x21a>
  40a0aa:	4690      	mov	r8, r2
  40a0ac:	e788      	b.n	409fc0 <__divdi3+0x198>
  40a0ae:	4643      	mov	r3, r8
  40a0b0:	4642      	mov	r2, r8
  40a0b2:	e70a      	b.n	409eca <__divdi3+0xa2>
  40a0b4:	3a02      	subs	r2, #2
  40a0b6:	e753      	b.n	409f60 <__divdi3+0x138>
  40a0b8:	3902      	subs	r1, #2
  40a0ba:	442f      	add	r7, r5
  40a0bc:	e73c      	b.n	409f38 <__divdi3+0x110>
  40a0be:	bf00      	nop

0040a0c0 <__udivdi3>:
  40a0c0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40a0c4:	4614      	mov	r4, r2
  40a0c6:	4605      	mov	r5, r0
  40a0c8:	460e      	mov	r6, r1
  40a0ca:	2b00      	cmp	r3, #0
  40a0cc:	d143      	bne.n	40a156 <__udivdi3+0x96>
  40a0ce:	428a      	cmp	r2, r1
  40a0d0:	d953      	bls.n	40a17a <__udivdi3+0xba>
  40a0d2:	fab2 f782 	clz	r7, r2
  40a0d6:	b157      	cbz	r7, 40a0ee <__udivdi3+0x2e>
  40a0d8:	f1c7 0620 	rsb	r6, r7, #32
  40a0dc:	fa20 f606 	lsr.w	r6, r0, r6
  40a0e0:	fa01 f307 	lsl.w	r3, r1, r7
  40a0e4:	fa02 f407 	lsl.w	r4, r2, r7
  40a0e8:	431e      	orrs	r6, r3
  40a0ea:	fa00 f507 	lsl.w	r5, r0, r7
  40a0ee:	0c21      	lsrs	r1, r4, #16
  40a0f0:	fbb6 f2f1 	udiv	r2, r6, r1
  40a0f4:	0c2b      	lsrs	r3, r5, #16
  40a0f6:	fb01 6712 	mls	r7, r1, r2, r6
  40a0fa:	b2a0      	uxth	r0, r4
  40a0fc:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  40a100:	fb00 f302 	mul.w	r3, r0, r2
  40a104:	42b3      	cmp	r3, r6
  40a106:	d909      	bls.n	40a11c <__udivdi3+0x5c>
  40a108:	1936      	adds	r6, r6, r4
  40a10a:	f102 37ff 	add.w	r7, r2, #4294967295
  40a10e:	f080 80f6 	bcs.w	40a2fe <__udivdi3+0x23e>
  40a112:	42b3      	cmp	r3, r6
  40a114:	f240 80f3 	bls.w	40a2fe <__udivdi3+0x23e>
  40a118:	3a02      	subs	r2, #2
  40a11a:	4426      	add	r6, r4
  40a11c:	1af6      	subs	r6, r6, r3
  40a11e:	fbb6 f3f1 	udiv	r3, r6, r1
  40a122:	b2ad      	uxth	r5, r5
  40a124:	fb01 6113 	mls	r1, r1, r3, r6
  40a128:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  40a12c:	fb00 f003 	mul.w	r0, r0, r3
  40a130:	4288      	cmp	r0, r1
  40a132:	d908      	bls.n	40a146 <__udivdi3+0x86>
  40a134:	1909      	adds	r1, r1, r4
  40a136:	f103 36ff 	add.w	r6, r3, #4294967295
  40a13a:	f080 80e2 	bcs.w	40a302 <__udivdi3+0x242>
  40a13e:	4288      	cmp	r0, r1
  40a140:	f240 80df 	bls.w	40a302 <__udivdi3+0x242>
  40a144:	3b02      	subs	r3, #2
  40a146:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40a14a:	2300      	movs	r3, #0
  40a14c:	4610      	mov	r0, r2
  40a14e:	4619      	mov	r1, r3
  40a150:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40a154:	4770      	bx	lr
  40a156:	428b      	cmp	r3, r1
  40a158:	d84a      	bhi.n	40a1f0 <__udivdi3+0x130>
  40a15a:	fab3 f683 	clz	r6, r3
  40a15e:	2e00      	cmp	r6, #0
  40a160:	d14d      	bne.n	40a1fe <__udivdi3+0x13e>
  40a162:	428b      	cmp	r3, r1
  40a164:	d302      	bcc.n	40a16c <__udivdi3+0xac>
  40a166:	4282      	cmp	r2, r0
  40a168:	f200 80d6 	bhi.w	40a318 <__udivdi3+0x258>
  40a16c:	2300      	movs	r3, #0
  40a16e:	2201      	movs	r2, #1
  40a170:	4610      	mov	r0, r2
  40a172:	4619      	mov	r1, r3
  40a174:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40a178:	4770      	bx	lr
  40a17a:	b912      	cbnz	r2, 40a182 <__udivdi3+0xc2>
  40a17c:	2401      	movs	r4, #1
  40a17e:	fbb4 f4f2 	udiv	r4, r4, r2
  40a182:	fab4 f284 	clz	r2, r4
  40a186:	2a00      	cmp	r2, #0
  40a188:	d17c      	bne.n	40a284 <__udivdi3+0x1c4>
  40a18a:	1b09      	subs	r1, r1, r4
  40a18c:	0c26      	lsrs	r6, r4, #16
  40a18e:	b2a7      	uxth	r7, r4
  40a190:	2301      	movs	r3, #1
  40a192:	fbb1 f0f6 	udiv	r0, r1, r6
  40a196:	0c2a      	lsrs	r2, r5, #16
  40a198:	fb06 1110 	mls	r1, r6, r0, r1
  40a19c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  40a1a0:	fb07 f200 	mul.w	r2, r7, r0
  40a1a4:	428a      	cmp	r2, r1
  40a1a6:	d907      	bls.n	40a1b8 <__udivdi3+0xf8>
  40a1a8:	1909      	adds	r1, r1, r4
  40a1aa:	f100 3cff 	add.w	ip, r0, #4294967295
  40a1ae:	d202      	bcs.n	40a1b6 <__udivdi3+0xf6>
  40a1b0:	428a      	cmp	r2, r1
  40a1b2:	f200 80c3 	bhi.w	40a33c <__udivdi3+0x27c>
  40a1b6:	4660      	mov	r0, ip
  40a1b8:	1a89      	subs	r1, r1, r2
  40a1ba:	fbb1 f2f6 	udiv	r2, r1, r6
  40a1be:	b2ad      	uxth	r5, r5
  40a1c0:	fb06 1112 	mls	r1, r6, r2, r1
  40a1c4:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  40a1c8:	fb07 f702 	mul.w	r7, r7, r2
  40a1cc:	42af      	cmp	r7, r5
  40a1ce:	d908      	bls.n	40a1e2 <__udivdi3+0x122>
  40a1d0:	192c      	adds	r4, r5, r4
  40a1d2:	f102 31ff 	add.w	r1, r2, #4294967295
  40a1d6:	f080 8096 	bcs.w	40a306 <__udivdi3+0x246>
  40a1da:	42a7      	cmp	r7, r4
  40a1dc:	f240 8093 	bls.w	40a306 <__udivdi3+0x246>
  40a1e0:	3a02      	subs	r2, #2
  40a1e2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  40a1e6:	4610      	mov	r0, r2
  40a1e8:	4619      	mov	r1, r3
  40a1ea:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40a1ee:	4770      	bx	lr
  40a1f0:	2300      	movs	r3, #0
  40a1f2:	461a      	mov	r2, r3
  40a1f4:	4610      	mov	r0, r2
  40a1f6:	4619      	mov	r1, r3
  40a1f8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40a1fc:	4770      	bx	lr
  40a1fe:	f1c6 0520 	rsb	r5, r6, #32
  40a202:	fa22 f405 	lsr.w	r4, r2, r5
  40a206:	40b3      	lsls	r3, r6
  40a208:	431c      	orrs	r4, r3
  40a20a:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40a20e:	fa21 f305 	lsr.w	r3, r1, r5
  40a212:	fa01 f706 	lsl.w	r7, r1, r6
  40a216:	fa20 f505 	lsr.w	r5, r0, r5
  40a21a:	fbb3 fcf8 	udiv	ip, r3, r8
  40a21e:	432f      	orrs	r7, r5
  40a220:	fb08 331c 	mls	r3, r8, ip, r3
  40a224:	0c3d      	lsrs	r5, r7, #16
  40a226:	fa1f fa84 	uxth.w	sl, r4
  40a22a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  40a22e:	fb0a f90c 	mul.w	r9, sl, ip
  40a232:	4599      	cmp	r9, r3
  40a234:	fa02 fb06 	lsl.w	fp, r2, r6
  40a238:	d904      	bls.n	40a244 <__udivdi3+0x184>
  40a23a:	191b      	adds	r3, r3, r4
  40a23c:	f10c 32ff 	add.w	r2, ip, #4294967295
  40a240:	d36d      	bcc.n	40a31e <__udivdi3+0x25e>
  40a242:	4694      	mov	ip, r2
  40a244:	ebc9 0303 	rsb	r3, r9, r3
  40a248:	fbb3 f5f8 	udiv	r5, r3, r8
  40a24c:	fb08 3315 	mls	r3, r8, r5, r3
  40a250:	b2bf      	uxth	r7, r7
  40a252:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40a256:	fb0a f805 	mul.w	r8, sl, r5
  40a25a:	45b8      	cmp	r8, r7
  40a25c:	d904      	bls.n	40a268 <__udivdi3+0x1a8>
  40a25e:	193f      	adds	r7, r7, r4
  40a260:	f105 33ff 	add.w	r3, r5, #4294967295
  40a264:	d361      	bcc.n	40a32a <__udivdi3+0x26a>
  40a266:	461d      	mov	r5, r3
  40a268:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  40a26c:	fbac 230b 	umull	r2, r3, ip, fp
  40a270:	ebc8 0707 	rsb	r7, r8, r7
  40a274:	429f      	cmp	r7, r3
  40a276:	f04f 0500 	mov.w	r5, #0
  40a27a:	d349      	bcc.n	40a310 <__udivdi3+0x250>
  40a27c:	d045      	beq.n	40a30a <__udivdi3+0x24a>
  40a27e:	4662      	mov	r2, ip
  40a280:	462b      	mov	r3, r5
  40a282:	e763      	b.n	40a14c <__udivdi3+0x8c>
  40a284:	4094      	lsls	r4, r2
  40a286:	f1c2 0320 	rsb	r3, r2, #32
  40a28a:	fa21 fc03 	lsr.w	ip, r1, r3
  40a28e:	0c26      	lsrs	r6, r4, #16
  40a290:	fa20 f303 	lsr.w	r3, r0, r3
  40a294:	fa01 f502 	lsl.w	r5, r1, r2
  40a298:	fbbc f8f6 	udiv	r8, ip, r6
  40a29c:	ea43 0105 	orr.w	r1, r3, r5
  40a2a0:	0c0b      	lsrs	r3, r1, #16
  40a2a2:	fb06 cc18 	mls	ip, r6, r8, ip
  40a2a6:	b2a7      	uxth	r7, r4
  40a2a8:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  40a2ac:	fb07 f308 	mul.w	r3, r7, r8
  40a2b0:	4563      	cmp	r3, ip
  40a2b2:	fa00 f502 	lsl.w	r5, r0, r2
  40a2b6:	d909      	bls.n	40a2cc <__udivdi3+0x20c>
  40a2b8:	eb1c 0c04 	adds.w	ip, ip, r4
  40a2bc:	f108 32ff 	add.w	r2, r8, #4294967295
  40a2c0:	d23a      	bcs.n	40a338 <__udivdi3+0x278>
  40a2c2:	4563      	cmp	r3, ip
  40a2c4:	d938      	bls.n	40a338 <__udivdi3+0x278>
  40a2c6:	f1a8 0802 	sub.w	r8, r8, #2
  40a2ca:	44a4      	add	ip, r4
  40a2cc:	ebc3 0c0c 	rsb	ip, r3, ip
  40a2d0:	fbbc f3f6 	udiv	r3, ip, r6
  40a2d4:	b289      	uxth	r1, r1
  40a2d6:	fb06 cc13 	mls	ip, r6, r3, ip
  40a2da:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  40a2de:	fb07 f203 	mul.w	r2, r7, r3
  40a2e2:	428a      	cmp	r2, r1
  40a2e4:	d907      	bls.n	40a2f6 <__udivdi3+0x236>
  40a2e6:	1909      	adds	r1, r1, r4
  40a2e8:	f103 30ff 	add.w	r0, r3, #4294967295
  40a2ec:	d222      	bcs.n	40a334 <__udivdi3+0x274>
  40a2ee:	428a      	cmp	r2, r1
  40a2f0:	d920      	bls.n	40a334 <__udivdi3+0x274>
  40a2f2:	3b02      	subs	r3, #2
  40a2f4:	4421      	add	r1, r4
  40a2f6:	1a89      	subs	r1, r1, r2
  40a2f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40a2fc:	e749      	b.n	40a192 <__udivdi3+0xd2>
  40a2fe:	463a      	mov	r2, r7
  40a300:	e70c      	b.n	40a11c <__udivdi3+0x5c>
  40a302:	4633      	mov	r3, r6
  40a304:	e71f      	b.n	40a146 <__udivdi3+0x86>
  40a306:	460a      	mov	r2, r1
  40a308:	e76b      	b.n	40a1e2 <__udivdi3+0x122>
  40a30a:	40b0      	lsls	r0, r6
  40a30c:	4290      	cmp	r0, r2
  40a30e:	d2b6      	bcs.n	40a27e <__udivdi3+0x1be>
  40a310:	f10c 32ff 	add.w	r2, ip, #4294967295
  40a314:	2300      	movs	r3, #0
  40a316:	e719      	b.n	40a14c <__udivdi3+0x8c>
  40a318:	4633      	mov	r3, r6
  40a31a:	4632      	mov	r2, r6
  40a31c:	e716      	b.n	40a14c <__udivdi3+0x8c>
  40a31e:	4599      	cmp	r9, r3
  40a320:	d98f      	bls.n	40a242 <__udivdi3+0x182>
  40a322:	f1ac 0c02 	sub.w	ip, ip, #2
  40a326:	4423      	add	r3, r4
  40a328:	e78c      	b.n	40a244 <__udivdi3+0x184>
  40a32a:	45b8      	cmp	r8, r7
  40a32c:	d99b      	bls.n	40a266 <__udivdi3+0x1a6>
  40a32e:	3d02      	subs	r5, #2
  40a330:	4427      	add	r7, r4
  40a332:	e799      	b.n	40a268 <__udivdi3+0x1a8>
  40a334:	4603      	mov	r3, r0
  40a336:	e7de      	b.n	40a2f6 <__udivdi3+0x236>
  40a338:	4690      	mov	r8, r2
  40a33a:	e7c7      	b.n	40a2cc <__udivdi3+0x20c>
  40a33c:	3802      	subs	r0, #2
  40a33e:	4421      	add	r1, r4
  40a340:	e73a      	b.n	40a1b8 <__udivdi3+0xf8>
  40a342:	bf00      	nop

0040a344 <__libc_init_array>:
  40a344:	b570      	push	{r4, r5, r6, lr}
  40a346:	4e0f      	ldr	r6, [pc, #60]	; (40a384 <__libc_init_array+0x40>)
  40a348:	4d0f      	ldr	r5, [pc, #60]	; (40a388 <__libc_init_array+0x44>)
  40a34a:	1b76      	subs	r6, r6, r5
  40a34c:	10b6      	asrs	r6, r6, #2
  40a34e:	d007      	beq.n	40a360 <__libc_init_array+0x1c>
  40a350:	3d04      	subs	r5, #4
  40a352:	2400      	movs	r4, #0
  40a354:	3401      	adds	r4, #1
  40a356:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40a35a:	4798      	blx	r3
  40a35c:	42a6      	cmp	r6, r4
  40a35e:	d1f9      	bne.n	40a354 <__libc_init_array+0x10>
  40a360:	4e0a      	ldr	r6, [pc, #40]	; (40a38c <__libc_init_array+0x48>)
  40a362:	4d0b      	ldr	r5, [pc, #44]	; (40a390 <__libc_init_array+0x4c>)
  40a364:	1b76      	subs	r6, r6, r5
  40a366:	f009 fba7 	bl	413ab8 <_init>
  40a36a:	10b6      	asrs	r6, r6, #2
  40a36c:	d008      	beq.n	40a380 <__libc_init_array+0x3c>
  40a36e:	3d04      	subs	r5, #4
  40a370:	2400      	movs	r4, #0
  40a372:	3401      	adds	r4, #1
  40a374:	f855 3f04 	ldr.w	r3, [r5, #4]!
  40a378:	4798      	blx	r3
  40a37a:	42a6      	cmp	r6, r4
  40a37c:	d1f9      	bne.n	40a372 <__libc_init_array+0x2e>
  40a37e:	bd70      	pop	{r4, r5, r6, pc}
  40a380:	bd70      	pop	{r4, r5, r6, pc}
  40a382:	bf00      	nop
  40a384:	00413ac4 	.word	0x00413ac4
  40a388:	00413ac4 	.word	0x00413ac4
  40a38c:	00413acc 	.word	0x00413acc
  40a390:	00413ac4 	.word	0x00413ac4

0040a394 <iprintf>:
  40a394:	b40f      	push	{r0, r1, r2, r3}
  40a396:	b500      	push	{lr}
  40a398:	4a07      	ldr	r2, [pc, #28]	; (40a3b8 <iprintf+0x24>)
  40a39a:	b083      	sub	sp, #12
  40a39c:	ab04      	add	r3, sp, #16
  40a39e:	6810      	ldr	r0, [r2, #0]
  40a3a0:	f853 2b04 	ldr.w	r2, [r3], #4
  40a3a4:	6881      	ldr	r1, [r0, #8]
  40a3a6:	9301      	str	r3, [sp, #4]
  40a3a8:	f002 fcbc 	bl	40cd24 <_vfiprintf_r>
  40a3ac:	b003      	add	sp, #12
  40a3ae:	f85d eb04 	ldr.w	lr, [sp], #4
  40a3b2:	b004      	add	sp, #16
  40a3b4:	4770      	bx	lr
  40a3b6:	bf00      	nop
  40a3b8:	20000640 	.word	0x20000640

0040a3bc <memcpy>:
  40a3bc:	4684      	mov	ip, r0
  40a3be:	ea41 0300 	orr.w	r3, r1, r0
  40a3c2:	f013 0303 	ands.w	r3, r3, #3
  40a3c6:	d16d      	bne.n	40a4a4 <memcpy+0xe8>
  40a3c8:	3a40      	subs	r2, #64	; 0x40
  40a3ca:	d341      	bcc.n	40a450 <memcpy+0x94>
  40a3cc:	f851 3b04 	ldr.w	r3, [r1], #4
  40a3d0:	f840 3b04 	str.w	r3, [r0], #4
  40a3d4:	f851 3b04 	ldr.w	r3, [r1], #4
  40a3d8:	f840 3b04 	str.w	r3, [r0], #4
  40a3dc:	f851 3b04 	ldr.w	r3, [r1], #4
  40a3e0:	f840 3b04 	str.w	r3, [r0], #4
  40a3e4:	f851 3b04 	ldr.w	r3, [r1], #4
  40a3e8:	f840 3b04 	str.w	r3, [r0], #4
  40a3ec:	f851 3b04 	ldr.w	r3, [r1], #4
  40a3f0:	f840 3b04 	str.w	r3, [r0], #4
  40a3f4:	f851 3b04 	ldr.w	r3, [r1], #4
  40a3f8:	f840 3b04 	str.w	r3, [r0], #4
  40a3fc:	f851 3b04 	ldr.w	r3, [r1], #4
  40a400:	f840 3b04 	str.w	r3, [r0], #4
  40a404:	f851 3b04 	ldr.w	r3, [r1], #4
  40a408:	f840 3b04 	str.w	r3, [r0], #4
  40a40c:	f851 3b04 	ldr.w	r3, [r1], #4
  40a410:	f840 3b04 	str.w	r3, [r0], #4
  40a414:	f851 3b04 	ldr.w	r3, [r1], #4
  40a418:	f840 3b04 	str.w	r3, [r0], #4
  40a41c:	f851 3b04 	ldr.w	r3, [r1], #4
  40a420:	f840 3b04 	str.w	r3, [r0], #4
  40a424:	f851 3b04 	ldr.w	r3, [r1], #4
  40a428:	f840 3b04 	str.w	r3, [r0], #4
  40a42c:	f851 3b04 	ldr.w	r3, [r1], #4
  40a430:	f840 3b04 	str.w	r3, [r0], #4
  40a434:	f851 3b04 	ldr.w	r3, [r1], #4
  40a438:	f840 3b04 	str.w	r3, [r0], #4
  40a43c:	f851 3b04 	ldr.w	r3, [r1], #4
  40a440:	f840 3b04 	str.w	r3, [r0], #4
  40a444:	f851 3b04 	ldr.w	r3, [r1], #4
  40a448:	f840 3b04 	str.w	r3, [r0], #4
  40a44c:	3a40      	subs	r2, #64	; 0x40
  40a44e:	d2bd      	bcs.n	40a3cc <memcpy+0x10>
  40a450:	3230      	adds	r2, #48	; 0x30
  40a452:	d311      	bcc.n	40a478 <memcpy+0xbc>
  40a454:	f851 3b04 	ldr.w	r3, [r1], #4
  40a458:	f840 3b04 	str.w	r3, [r0], #4
  40a45c:	f851 3b04 	ldr.w	r3, [r1], #4
  40a460:	f840 3b04 	str.w	r3, [r0], #4
  40a464:	f851 3b04 	ldr.w	r3, [r1], #4
  40a468:	f840 3b04 	str.w	r3, [r0], #4
  40a46c:	f851 3b04 	ldr.w	r3, [r1], #4
  40a470:	f840 3b04 	str.w	r3, [r0], #4
  40a474:	3a10      	subs	r2, #16
  40a476:	d2ed      	bcs.n	40a454 <memcpy+0x98>
  40a478:	320c      	adds	r2, #12
  40a47a:	d305      	bcc.n	40a488 <memcpy+0xcc>
  40a47c:	f851 3b04 	ldr.w	r3, [r1], #4
  40a480:	f840 3b04 	str.w	r3, [r0], #4
  40a484:	3a04      	subs	r2, #4
  40a486:	d2f9      	bcs.n	40a47c <memcpy+0xc0>
  40a488:	3204      	adds	r2, #4
  40a48a:	d008      	beq.n	40a49e <memcpy+0xe2>
  40a48c:	07d2      	lsls	r2, r2, #31
  40a48e:	bf1c      	itt	ne
  40a490:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40a494:	f800 3b01 	strbne.w	r3, [r0], #1
  40a498:	d301      	bcc.n	40a49e <memcpy+0xe2>
  40a49a:	880b      	ldrh	r3, [r1, #0]
  40a49c:	8003      	strh	r3, [r0, #0]
  40a49e:	4660      	mov	r0, ip
  40a4a0:	4770      	bx	lr
  40a4a2:	bf00      	nop
  40a4a4:	2a08      	cmp	r2, #8
  40a4a6:	d313      	bcc.n	40a4d0 <memcpy+0x114>
  40a4a8:	078b      	lsls	r3, r1, #30
  40a4aa:	d08d      	beq.n	40a3c8 <memcpy+0xc>
  40a4ac:	f010 0303 	ands.w	r3, r0, #3
  40a4b0:	d08a      	beq.n	40a3c8 <memcpy+0xc>
  40a4b2:	f1c3 0304 	rsb	r3, r3, #4
  40a4b6:	1ad2      	subs	r2, r2, r3
  40a4b8:	07db      	lsls	r3, r3, #31
  40a4ba:	bf1c      	itt	ne
  40a4bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40a4c0:	f800 3b01 	strbne.w	r3, [r0], #1
  40a4c4:	d380      	bcc.n	40a3c8 <memcpy+0xc>
  40a4c6:	f831 3b02 	ldrh.w	r3, [r1], #2
  40a4ca:	f820 3b02 	strh.w	r3, [r0], #2
  40a4ce:	e77b      	b.n	40a3c8 <memcpy+0xc>
  40a4d0:	3a04      	subs	r2, #4
  40a4d2:	d3d9      	bcc.n	40a488 <memcpy+0xcc>
  40a4d4:	3a01      	subs	r2, #1
  40a4d6:	f811 3b01 	ldrb.w	r3, [r1], #1
  40a4da:	f800 3b01 	strb.w	r3, [r0], #1
  40a4de:	d2f9      	bcs.n	40a4d4 <memcpy+0x118>
  40a4e0:	780b      	ldrb	r3, [r1, #0]
  40a4e2:	7003      	strb	r3, [r0, #0]
  40a4e4:	784b      	ldrb	r3, [r1, #1]
  40a4e6:	7043      	strb	r3, [r0, #1]
  40a4e8:	788b      	ldrb	r3, [r1, #2]
  40a4ea:	7083      	strb	r3, [r0, #2]
  40a4ec:	4660      	mov	r0, ip
  40a4ee:	4770      	bx	lr

0040a4f0 <memset>:
  40a4f0:	b4f0      	push	{r4, r5, r6, r7}
  40a4f2:	0784      	lsls	r4, r0, #30
  40a4f4:	d043      	beq.n	40a57e <memset+0x8e>
  40a4f6:	1e54      	subs	r4, r2, #1
  40a4f8:	2a00      	cmp	r2, #0
  40a4fa:	d03e      	beq.n	40a57a <memset+0x8a>
  40a4fc:	b2cd      	uxtb	r5, r1
  40a4fe:	4603      	mov	r3, r0
  40a500:	e003      	b.n	40a50a <memset+0x1a>
  40a502:	1e62      	subs	r2, r4, #1
  40a504:	2c00      	cmp	r4, #0
  40a506:	d038      	beq.n	40a57a <memset+0x8a>
  40a508:	4614      	mov	r4, r2
  40a50a:	f803 5b01 	strb.w	r5, [r3], #1
  40a50e:	079a      	lsls	r2, r3, #30
  40a510:	d1f7      	bne.n	40a502 <memset+0x12>
  40a512:	2c03      	cmp	r4, #3
  40a514:	d92a      	bls.n	40a56c <memset+0x7c>
  40a516:	b2cd      	uxtb	r5, r1
  40a518:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40a51c:	2c0f      	cmp	r4, #15
  40a51e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40a522:	d915      	bls.n	40a550 <memset+0x60>
  40a524:	f1a4 0710 	sub.w	r7, r4, #16
  40a528:	093f      	lsrs	r7, r7, #4
  40a52a:	f103 0610 	add.w	r6, r3, #16
  40a52e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  40a532:	461a      	mov	r2, r3
  40a534:	6015      	str	r5, [r2, #0]
  40a536:	6055      	str	r5, [r2, #4]
  40a538:	6095      	str	r5, [r2, #8]
  40a53a:	60d5      	str	r5, [r2, #12]
  40a53c:	3210      	adds	r2, #16
  40a53e:	42b2      	cmp	r2, r6
  40a540:	d1f8      	bne.n	40a534 <memset+0x44>
  40a542:	f004 040f 	and.w	r4, r4, #15
  40a546:	3701      	adds	r7, #1
  40a548:	2c03      	cmp	r4, #3
  40a54a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  40a54e:	d90d      	bls.n	40a56c <memset+0x7c>
  40a550:	461e      	mov	r6, r3
  40a552:	4622      	mov	r2, r4
  40a554:	3a04      	subs	r2, #4
  40a556:	2a03      	cmp	r2, #3
  40a558:	f846 5b04 	str.w	r5, [r6], #4
  40a55c:	d8fa      	bhi.n	40a554 <memset+0x64>
  40a55e:	1f22      	subs	r2, r4, #4
  40a560:	f022 0203 	bic.w	r2, r2, #3
  40a564:	3204      	adds	r2, #4
  40a566:	4413      	add	r3, r2
  40a568:	f004 0403 	and.w	r4, r4, #3
  40a56c:	b12c      	cbz	r4, 40a57a <memset+0x8a>
  40a56e:	b2c9      	uxtb	r1, r1
  40a570:	441c      	add	r4, r3
  40a572:	f803 1b01 	strb.w	r1, [r3], #1
  40a576:	42a3      	cmp	r3, r4
  40a578:	d1fb      	bne.n	40a572 <memset+0x82>
  40a57a:	bcf0      	pop	{r4, r5, r6, r7}
  40a57c:	4770      	bx	lr
  40a57e:	4614      	mov	r4, r2
  40a580:	4603      	mov	r3, r0
  40a582:	e7c6      	b.n	40a512 <memset+0x22>

0040a584 <setbuf>:
  40a584:	2900      	cmp	r1, #0
  40a586:	bf0c      	ite	eq
  40a588:	2202      	moveq	r2, #2
  40a58a:	2200      	movne	r2, #0
  40a58c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a590:	f000 b800 	b.w	40a594 <setvbuf>

0040a594 <setvbuf>:
  40a594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a598:	4c3c      	ldr	r4, [pc, #240]	; (40a68c <setvbuf+0xf8>)
  40a59a:	6825      	ldr	r5, [r4, #0]
  40a59c:	4688      	mov	r8, r1
  40a59e:	4604      	mov	r4, r0
  40a5a0:	4616      	mov	r6, r2
  40a5a2:	461f      	mov	r7, r3
  40a5a4:	b115      	cbz	r5, 40a5ac <setvbuf+0x18>
  40a5a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40a5a8:	2b00      	cmp	r3, #0
  40a5aa:	d04f      	beq.n	40a64c <setvbuf+0xb8>
  40a5ac:	2e02      	cmp	r6, #2
  40a5ae:	d830      	bhi.n	40a612 <setvbuf+0x7e>
  40a5b0:	2f00      	cmp	r7, #0
  40a5b2:	db2e      	blt.n	40a612 <setvbuf+0x7e>
  40a5b4:	4628      	mov	r0, r5
  40a5b6:	4621      	mov	r1, r4
  40a5b8:	f004 fb10 	bl	40ebdc <_fflush_r>
  40a5bc:	89a3      	ldrh	r3, [r4, #12]
  40a5be:	2200      	movs	r2, #0
  40a5c0:	6062      	str	r2, [r4, #4]
  40a5c2:	61a2      	str	r2, [r4, #24]
  40a5c4:	061a      	lsls	r2, r3, #24
  40a5c6:	d428      	bmi.n	40a61a <setvbuf+0x86>
  40a5c8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40a5cc:	b29b      	uxth	r3, r3
  40a5ce:	2e02      	cmp	r6, #2
  40a5d0:	81a3      	strh	r3, [r4, #12]
  40a5d2:	d02d      	beq.n	40a630 <setvbuf+0x9c>
  40a5d4:	f1b8 0f00 	cmp.w	r8, #0
  40a5d8:	d03c      	beq.n	40a654 <setvbuf+0xc0>
  40a5da:	2e01      	cmp	r6, #1
  40a5dc:	d013      	beq.n	40a606 <setvbuf+0x72>
  40a5de:	b29b      	uxth	r3, r3
  40a5e0:	f003 0008 	and.w	r0, r3, #8
  40a5e4:	4a2a      	ldr	r2, [pc, #168]	; (40a690 <setvbuf+0xfc>)
  40a5e6:	63ea      	str	r2, [r5, #60]	; 0x3c
  40a5e8:	b280      	uxth	r0, r0
  40a5ea:	f8c4 8000 	str.w	r8, [r4]
  40a5ee:	f8c4 8010 	str.w	r8, [r4, #16]
  40a5f2:	6167      	str	r7, [r4, #20]
  40a5f4:	b178      	cbz	r0, 40a616 <setvbuf+0x82>
  40a5f6:	f013 0f03 	tst.w	r3, #3
  40a5fa:	bf18      	it	ne
  40a5fc:	2700      	movne	r7, #0
  40a5fe:	60a7      	str	r7, [r4, #8]
  40a600:	2000      	movs	r0, #0
  40a602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a606:	f043 0301 	orr.w	r3, r3, #1
  40a60a:	427a      	negs	r2, r7
  40a60c:	81a3      	strh	r3, [r4, #12]
  40a60e:	61a2      	str	r2, [r4, #24]
  40a610:	e7e5      	b.n	40a5de <setvbuf+0x4a>
  40a612:	f04f 30ff 	mov.w	r0, #4294967295
  40a616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a61a:	4628      	mov	r0, r5
  40a61c:	6921      	ldr	r1, [r4, #16]
  40a61e:	f004 fc3b 	bl	40ee98 <_free_r>
  40a622:	89a3      	ldrh	r3, [r4, #12]
  40a624:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  40a628:	b29b      	uxth	r3, r3
  40a62a:	2e02      	cmp	r6, #2
  40a62c:	81a3      	strh	r3, [r4, #12]
  40a62e:	d1d1      	bne.n	40a5d4 <setvbuf+0x40>
  40a630:	2000      	movs	r0, #0
  40a632:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40a636:	f043 0302 	orr.w	r3, r3, #2
  40a63a:	2500      	movs	r5, #0
  40a63c:	2101      	movs	r1, #1
  40a63e:	81a3      	strh	r3, [r4, #12]
  40a640:	60a5      	str	r5, [r4, #8]
  40a642:	6022      	str	r2, [r4, #0]
  40a644:	6122      	str	r2, [r4, #16]
  40a646:	6161      	str	r1, [r4, #20]
  40a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a64c:	4628      	mov	r0, r5
  40a64e:	f004 fae1 	bl	40ec14 <__sinit>
  40a652:	e7ab      	b.n	40a5ac <setvbuf+0x18>
  40a654:	2f00      	cmp	r7, #0
  40a656:	bf08      	it	eq
  40a658:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40a65c:	4638      	mov	r0, r7
  40a65e:	f004 ff3b 	bl	40f4d8 <malloc>
  40a662:	4680      	mov	r8, r0
  40a664:	b128      	cbz	r0, 40a672 <setvbuf+0xde>
  40a666:	89a3      	ldrh	r3, [r4, #12]
  40a668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a66c:	b29b      	uxth	r3, r3
  40a66e:	81a3      	strh	r3, [r4, #12]
  40a670:	e7b3      	b.n	40a5da <setvbuf+0x46>
  40a672:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40a676:	f004 ff2f 	bl	40f4d8 <malloc>
  40a67a:	4680      	mov	r8, r0
  40a67c:	b918      	cbnz	r0, 40a686 <setvbuf+0xf2>
  40a67e:	89a3      	ldrh	r3, [r4, #12]
  40a680:	f04f 30ff 	mov.w	r0, #4294967295
  40a684:	e7d5      	b.n	40a632 <setvbuf+0x9e>
  40a686:	f44f 6780 	mov.w	r7, #1024	; 0x400
  40a68a:	e7ec      	b.n	40a666 <setvbuf+0xd2>
  40a68c:	20000640 	.word	0x20000640
  40a690:	0040ec09 	.word	0x0040ec09

0040a694 <sprintf>:
  40a694:	b40e      	push	{r1, r2, r3}
  40a696:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a698:	b09c      	sub	sp, #112	; 0x70
  40a69a:	ab21      	add	r3, sp, #132	; 0x84
  40a69c:	490f      	ldr	r1, [pc, #60]	; (40a6dc <sprintf+0x48>)
  40a69e:	f853 2b04 	ldr.w	r2, [r3], #4
  40a6a2:	9301      	str	r3, [sp, #4]
  40a6a4:	4605      	mov	r5, r0
  40a6a6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40a6aa:	6808      	ldr	r0, [r1, #0]
  40a6ac:	9502      	str	r5, [sp, #8]
  40a6ae:	f44f 7702 	mov.w	r7, #520	; 0x208
  40a6b2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40a6b6:	a902      	add	r1, sp, #8
  40a6b8:	9506      	str	r5, [sp, #24]
  40a6ba:	f8ad 7014 	strh.w	r7, [sp, #20]
  40a6be:	9404      	str	r4, [sp, #16]
  40a6c0:	9407      	str	r4, [sp, #28]
  40a6c2:	f8ad 6016 	strh.w	r6, [sp, #22]
  40a6c6:	f000 f937 	bl	40a938 <_svfprintf_r>
  40a6ca:	9b02      	ldr	r3, [sp, #8]
  40a6cc:	2200      	movs	r2, #0
  40a6ce:	701a      	strb	r2, [r3, #0]
  40a6d0:	b01c      	add	sp, #112	; 0x70
  40a6d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40a6d6:	b003      	add	sp, #12
  40a6d8:	4770      	bx	lr
  40a6da:	bf00      	nop
  40a6dc:	20000640 	.word	0x20000640

0040a6e0 <sscanf>:
  40a6e0:	b40e      	push	{r1, r2, r3}
  40a6e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a6e4:	b09c      	sub	sp, #112	; 0x70
  40a6e6:	ac21      	add	r4, sp, #132	; 0x84
  40a6e8:	f44f 7201 	mov.w	r2, #516	; 0x204
  40a6ec:	f854 6b04 	ldr.w	r6, [r4], #4
  40a6f0:	f8ad 2014 	strh.w	r2, [sp, #20]
  40a6f4:	9002      	str	r0, [sp, #8]
  40a6f6:	9006      	str	r0, [sp, #24]
  40a6f8:	f000 f862 	bl	40a7c0 <strlen>
  40a6fc:	4b0c      	ldr	r3, [pc, #48]	; (40a730 <sscanf+0x50>)
  40a6fe:	9401      	str	r4, [sp, #4]
  40a700:	4605      	mov	r5, r0
  40a702:	4632      	mov	r2, r6
  40a704:	4f0b      	ldr	r7, [pc, #44]	; (40a734 <sscanf+0x54>)
  40a706:	6818      	ldr	r0, [r3, #0]
  40a708:	9503      	str	r5, [sp, #12]
  40a70a:	4623      	mov	r3, r4
  40a70c:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40a710:	2400      	movs	r4, #0
  40a712:	a902      	add	r1, sp, #8
  40a714:	9507      	str	r5, [sp, #28]
  40a716:	970a      	str	r7, [sp, #40]	; 0x28
  40a718:	940e      	str	r4, [sp, #56]	; 0x38
  40a71a:	9413      	str	r4, [sp, #76]	; 0x4c
  40a71c:	f8ad 6016 	strh.w	r6, [sp, #22]
  40a720:	f001 fb86 	bl	40be30 <__ssvfscanf_r>
  40a724:	b01c      	add	sp, #112	; 0x70
  40a726:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40a72a:	b003      	add	sp, #12
  40a72c:	4770      	bx	lr
  40a72e:	bf00      	nop
  40a730:	20000640 	.word	0x20000640
  40a734:	0040a75d 	.word	0x0040a75d

0040a738 <__sread>:
  40a738:	b510      	push	{r4, lr}
  40a73a:	460c      	mov	r4, r1
  40a73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a740:	f005 feaa 	bl	410498 <_read_r>
  40a744:	2800      	cmp	r0, #0
  40a746:	db03      	blt.n	40a750 <__sread+0x18>
  40a748:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40a74a:	4403      	add	r3, r0
  40a74c:	6523      	str	r3, [r4, #80]	; 0x50
  40a74e:	bd10      	pop	{r4, pc}
  40a750:	89a3      	ldrh	r3, [r4, #12]
  40a752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40a756:	81a3      	strh	r3, [r4, #12]
  40a758:	bd10      	pop	{r4, pc}
  40a75a:	bf00      	nop

0040a75c <__seofread>:
  40a75c:	2000      	movs	r0, #0
  40a75e:	4770      	bx	lr

0040a760 <__swrite>:
  40a760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a764:	460c      	mov	r4, r1
  40a766:	8989      	ldrh	r1, [r1, #12]
  40a768:	461d      	mov	r5, r3
  40a76a:	05cb      	lsls	r3, r1, #23
  40a76c:	4616      	mov	r6, r2
  40a76e:	4607      	mov	r7, r0
  40a770:	d506      	bpl.n	40a780 <__swrite+0x20>
  40a772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a776:	2200      	movs	r2, #0
  40a778:	2302      	movs	r3, #2
  40a77a:	f004 fe29 	bl	40f3d0 <_lseek_r>
  40a77e:	89a1      	ldrh	r1, [r4, #12]
  40a780:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40a784:	81a1      	strh	r1, [r4, #12]
  40a786:	4638      	mov	r0, r7
  40a788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a78c:	4632      	mov	r2, r6
  40a78e:	462b      	mov	r3, r5
  40a790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a794:	f003 b92c 	b.w	40d9f0 <_write_r>

0040a798 <__sseek>:
  40a798:	b510      	push	{r4, lr}
  40a79a:	460c      	mov	r4, r1
  40a79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a7a0:	f004 fe16 	bl	40f3d0 <_lseek_r>
  40a7a4:	89a3      	ldrh	r3, [r4, #12]
  40a7a6:	1c42      	adds	r2, r0, #1
  40a7a8:	bf0e      	itee	eq
  40a7aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40a7ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40a7b2:	6520      	strne	r0, [r4, #80]	; 0x50
  40a7b4:	81a3      	strh	r3, [r4, #12]
  40a7b6:	bd10      	pop	{r4, pc}

0040a7b8 <__sclose>:
  40a7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a7bc:	f003 b99e 	b.w	40dafc <_close_r>

0040a7c0 <strlen>:
  40a7c0:	f020 0103 	bic.w	r1, r0, #3
  40a7c4:	f010 0003 	ands.w	r0, r0, #3
  40a7c8:	f1c0 0000 	rsb	r0, r0, #0
  40a7cc:	f851 3b04 	ldr.w	r3, [r1], #4
  40a7d0:	f100 0c04 	add.w	ip, r0, #4
  40a7d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40a7d8:	f06f 0200 	mvn.w	r2, #0
  40a7dc:	bf1c      	itt	ne
  40a7de:	fa22 f20c 	lsrne.w	r2, r2, ip
  40a7e2:	4313      	orrne	r3, r2
  40a7e4:	f04f 0c01 	mov.w	ip, #1
  40a7e8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40a7ec:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40a7f0:	eba3 020c 	sub.w	r2, r3, ip
  40a7f4:	ea22 0203 	bic.w	r2, r2, r3
  40a7f8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  40a7fc:	bf04      	itt	eq
  40a7fe:	f851 3b04 	ldreq.w	r3, [r1], #4
  40a802:	3004      	addeq	r0, #4
  40a804:	d0f4      	beq.n	40a7f0 <strlen+0x30>
  40a806:	f013 0fff 	tst.w	r3, #255	; 0xff
  40a80a:	bf1f      	itttt	ne
  40a80c:	3001      	addne	r0, #1
  40a80e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  40a812:	3001      	addne	r0, #1
  40a814:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  40a818:	bf18      	it	ne
  40a81a:	3001      	addne	r0, #1
  40a81c:	4770      	bx	lr
  40a81e:	bf00      	nop

0040a820 <strncmp>:
  40a820:	b430      	push	{r4, r5}
  40a822:	2a00      	cmp	r2, #0
  40a824:	d04a      	beq.n	40a8bc <strncmp+0x9c>
  40a826:	ea40 0301 	orr.w	r3, r0, r1
  40a82a:	f013 0303 	ands.w	r3, r3, #3
  40a82e:	d12d      	bne.n	40a88c <strncmp+0x6c>
  40a830:	2a03      	cmp	r2, #3
  40a832:	d92b      	bls.n	40a88c <strncmp+0x6c>
  40a834:	6804      	ldr	r4, [r0, #0]
  40a836:	680d      	ldr	r5, [r1, #0]
  40a838:	42ac      	cmp	r4, r5
  40a83a:	d127      	bne.n	40a88c <strncmp+0x6c>
  40a83c:	3a04      	subs	r2, #4
  40a83e:	d03d      	beq.n	40a8bc <strncmp+0x9c>
  40a840:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  40a844:	ea25 0404 	bic.w	r4, r5, r4
  40a848:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40a84c:	d13c      	bne.n	40a8c8 <strncmp+0xa8>
  40a84e:	460c      	mov	r4, r1
  40a850:	4603      	mov	r3, r0
  40a852:	e00e      	b.n	40a872 <strncmp+0x52>
  40a854:	685b      	ldr	r3, [r3, #4]
  40a856:	6864      	ldr	r4, [r4, #4]
  40a858:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40a85c:	42a3      	cmp	r3, r4
  40a85e:	ea25 0503 	bic.w	r5, r5, r3
  40a862:	d113      	bne.n	40a88c <strncmp+0x6c>
  40a864:	3a04      	subs	r2, #4
  40a866:	d029      	beq.n	40a8bc <strncmp+0x9c>
  40a868:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  40a86c:	d129      	bne.n	40a8c2 <strncmp+0xa2>
  40a86e:	4603      	mov	r3, r0
  40a870:	460c      	mov	r4, r1
  40a872:	2a03      	cmp	r2, #3
  40a874:	f100 0004 	add.w	r0, r0, #4
  40a878:	f101 0104 	add.w	r1, r1, #4
  40a87c:	d8ea      	bhi.n	40a854 <strncmp+0x34>
  40a87e:	1e55      	subs	r5, r2, #1
  40a880:	b92a      	cbnz	r2, 40a88e <strncmp+0x6e>
  40a882:	7918      	ldrb	r0, [r3, #4]
  40a884:	7922      	ldrb	r2, [r4, #4]
  40a886:	1a80      	subs	r0, r0, r2
  40a888:	bc30      	pop	{r4, r5}
  40a88a:	4770      	bx	lr
  40a88c:	1e55      	subs	r5, r2, #1
  40a88e:	7803      	ldrb	r3, [r0, #0]
  40a890:	780a      	ldrb	r2, [r1, #0]
  40a892:	4293      	cmp	r3, r2
  40a894:	d11a      	bne.n	40a8cc <strncmp+0xac>
  40a896:	b1dd      	cbz	r5, 40a8d0 <strncmp+0xb0>
  40a898:	b1b3      	cbz	r3, 40a8c8 <strncmp+0xa8>
  40a89a:	1c6c      	adds	r4, r5, #1
  40a89c:	440c      	add	r4, r1
  40a89e:	1c8b      	adds	r3, r1, #2
  40a8a0:	4601      	mov	r1, r0
  40a8a2:	e004      	b.n	40a8ae <strncmp+0x8e>
  40a8a4:	42a3      	cmp	r3, r4
  40a8a6:	d00c      	beq.n	40a8c2 <strncmp+0xa2>
  40a8a8:	3301      	adds	r3, #1
  40a8aa:	2800      	cmp	r0, #0
  40a8ac:	d0ec      	beq.n	40a888 <strncmp+0x68>
  40a8ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40a8b2:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  40a8b6:	4290      	cmp	r0, r2
  40a8b8:	d0f4      	beq.n	40a8a4 <strncmp+0x84>
  40a8ba:	e7e4      	b.n	40a886 <strncmp+0x66>
  40a8bc:	4610      	mov	r0, r2
  40a8be:	bc30      	pop	{r4, r5}
  40a8c0:	4770      	bx	lr
  40a8c2:	2000      	movs	r0, #0
  40a8c4:	bc30      	pop	{r4, r5}
  40a8c6:	4770      	bx	lr
  40a8c8:	4618      	mov	r0, r3
  40a8ca:	e7dd      	b.n	40a888 <strncmp+0x68>
  40a8cc:	4618      	mov	r0, r3
  40a8ce:	e7da      	b.n	40a886 <strncmp+0x66>
  40a8d0:	4628      	mov	r0, r5
  40a8d2:	e7d9      	b.n	40a888 <strncmp+0x68>

0040a8d4 <strncpy>:
  40a8d4:	ea40 0301 	orr.w	r3, r0, r1
  40a8d8:	079b      	lsls	r3, r3, #30
  40a8da:	b470      	push	{r4, r5, r6}
  40a8dc:	d12a      	bne.n	40a934 <strncpy+0x60>
  40a8de:	2a03      	cmp	r2, #3
  40a8e0:	d928      	bls.n	40a934 <strncpy+0x60>
  40a8e2:	460c      	mov	r4, r1
  40a8e4:	4603      	mov	r3, r0
  40a8e6:	4621      	mov	r1, r4
  40a8e8:	f854 5b04 	ldr.w	r5, [r4], #4
  40a8ec:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
  40a8f0:	ea26 0605 	bic.w	r6, r6, r5
  40a8f4:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
  40a8f8:	d105      	bne.n	40a906 <strncpy+0x32>
  40a8fa:	3a04      	subs	r2, #4
  40a8fc:	2a03      	cmp	r2, #3
  40a8fe:	f843 5b04 	str.w	r5, [r3], #4
  40a902:	4621      	mov	r1, r4
  40a904:	d8ef      	bhi.n	40a8e6 <strncpy+0x12>
  40a906:	b19a      	cbz	r2, 40a930 <strncpy+0x5c>
  40a908:	780c      	ldrb	r4, [r1, #0]
  40a90a:	701c      	strb	r4, [r3, #0]
  40a90c:	3a01      	subs	r2, #1
  40a90e:	3301      	adds	r3, #1
  40a910:	b13c      	cbz	r4, 40a922 <strncpy+0x4e>
  40a912:	b16a      	cbz	r2, 40a930 <strncpy+0x5c>
  40a914:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  40a918:	f803 4b01 	strb.w	r4, [r3], #1
  40a91c:	3a01      	subs	r2, #1
  40a91e:	2c00      	cmp	r4, #0
  40a920:	d1f7      	bne.n	40a912 <strncpy+0x3e>
  40a922:	b12a      	cbz	r2, 40a930 <strncpy+0x5c>
  40a924:	441a      	add	r2, r3
  40a926:	2100      	movs	r1, #0
  40a928:	f803 1b01 	strb.w	r1, [r3], #1
  40a92c:	4293      	cmp	r3, r2
  40a92e:	d1fb      	bne.n	40a928 <strncpy+0x54>
  40a930:	bc70      	pop	{r4, r5, r6}
  40a932:	4770      	bx	lr
  40a934:	4603      	mov	r3, r0
  40a936:	e7e6      	b.n	40a906 <strncpy+0x32>

0040a938 <_svfprintf_r>:
  40a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a93c:	b0c9      	sub	sp, #292	; 0x124
  40a93e:	4691      	mov	r9, r2
  40a940:	9310      	str	r3, [sp, #64]	; 0x40
  40a942:	910c      	str	r1, [sp, #48]	; 0x30
  40a944:	900d      	str	r0, [sp, #52]	; 0x34
  40a946:	f004 fd3f 	bl	40f3c8 <_localeconv_r>
  40a94a:	6800      	ldr	r0, [r0, #0]
  40a94c:	9015      	str	r0, [sp, #84]	; 0x54
  40a94e:	f7ff ff37 	bl	40a7c0 <strlen>
  40a952:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a954:	9018      	str	r0, [sp, #96]	; 0x60
  40a956:	89a3      	ldrh	r3, [r4, #12]
  40a958:	061a      	lsls	r2, r3, #24
  40a95a:	d503      	bpl.n	40a964 <_svfprintf_r+0x2c>
  40a95c:	6923      	ldr	r3, [r4, #16]
  40a95e:	2b00      	cmp	r3, #0
  40a960:	f001 808d 	beq.w	40ba7e <_svfprintf_r+0x1146>
  40a964:	ac38      	add	r4, sp, #224	; 0xe0
  40a966:	46a4      	mov	ip, r4
  40a968:	9408      	str	r4, [sp, #32]
  40a96a:	942b      	str	r4, [sp, #172]	; 0xac
  40a96c:	2500      	movs	r5, #0
  40a96e:	2400      	movs	r4, #0
  40a970:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40a974:	2300      	movs	r3, #0
  40a976:	9311      	str	r3, [sp, #68]	; 0x44
  40a978:	932d      	str	r3, [sp, #180]	; 0xb4
  40a97a:	932c      	str	r3, [sp, #176]	; 0xb0
  40a97c:	931a      	str	r3, [sp, #104]	; 0x68
  40a97e:	9319      	str	r3, [sp, #100]	; 0x64
  40a980:	930e      	str	r3, [sp, #56]	; 0x38
  40a982:	4666      	mov	r6, ip
  40a984:	f899 3000 	ldrb.w	r3, [r9]
  40a988:	2b00      	cmp	r3, #0
  40a98a:	f000 80f8 	beq.w	40ab7e <_svfprintf_r+0x246>
  40a98e:	2b25      	cmp	r3, #37	; 0x25
  40a990:	f000 80f5 	beq.w	40ab7e <_svfprintf_r+0x246>
  40a994:	f109 0201 	add.w	r2, r9, #1
  40a998:	e001      	b.n	40a99e <_svfprintf_r+0x66>
  40a99a:	2b25      	cmp	r3, #37	; 0x25
  40a99c:	d004      	beq.n	40a9a8 <_svfprintf_r+0x70>
  40a99e:	4614      	mov	r4, r2
  40a9a0:	3201      	adds	r2, #1
  40a9a2:	7823      	ldrb	r3, [r4, #0]
  40a9a4:	2b00      	cmp	r3, #0
  40a9a6:	d1f8      	bne.n	40a99a <_svfprintf_r+0x62>
  40a9a8:	ebc9 0504 	rsb	r5, r9, r4
  40a9ac:	b17d      	cbz	r5, 40a9ce <_svfprintf_r+0x96>
  40a9ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40a9b0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40a9b2:	f8c6 9000 	str.w	r9, [r6]
  40a9b6:	3301      	adds	r3, #1
  40a9b8:	442a      	add	r2, r5
  40a9ba:	2b07      	cmp	r3, #7
  40a9bc:	6075      	str	r5, [r6, #4]
  40a9be:	922d      	str	r2, [sp, #180]	; 0xb4
  40a9c0:	932c      	str	r3, [sp, #176]	; 0xb0
  40a9c2:	f300 80c2 	bgt.w	40ab4a <_svfprintf_r+0x212>
  40a9c6:	3608      	adds	r6, #8
  40a9c8:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a9ca:	4428      	add	r0, r5
  40a9cc:	900e      	str	r0, [sp, #56]	; 0x38
  40a9ce:	7823      	ldrb	r3, [r4, #0]
  40a9d0:	2b00      	cmp	r3, #0
  40a9d2:	f000 80c2 	beq.w	40ab5a <_svfprintf_r+0x222>
  40a9d6:	2300      	movs	r3, #0
  40a9d8:	f894 8001 	ldrb.w	r8, [r4, #1]
  40a9dc:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40a9e0:	461a      	mov	r2, r3
  40a9e2:	930f      	str	r3, [sp, #60]	; 0x3c
  40a9e4:	9309      	str	r3, [sp, #36]	; 0x24
  40a9e6:	f104 0901 	add.w	r9, r4, #1
  40a9ea:	f04f 34ff 	mov.w	r4, #4294967295
  40a9ee:	940a      	str	r4, [sp, #40]	; 0x28
  40a9f0:	f109 0901 	add.w	r9, r9, #1
  40a9f4:	f1a8 0320 	sub.w	r3, r8, #32
  40a9f8:	2b58      	cmp	r3, #88	; 0x58
  40a9fa:	f200 83c7 	bhi.w	40b18c <_svfprintf_r+0x854>
  40a9fe:	e8df f013 	tbh	[pc, r3, lsl #1]
  40aa02:	026a      	.short	0x026a
  40aa04:	03c503c5 	.word	0x03c503c5
  40aa08:	03c50271 	.word	0x03c50271
  40aa0c:	03c503c5 	.word	0x03c503c5
  40aa10:	03c503c5 	.word	0x03c503c5
  40aa14:	031403c5 	.word	0x031403c5
  40aa18:	03c50364 	.word	0x03c50364
  40aa1c:	00c0009d 	.word	0x00c0009d
  40aa20:	027803c5 	.word	0x027803c5
  40aa24:	027f027f 	.word	0x027f027f
  40aa28:	027f027f 	.word	0x027f027f
  40aa2c:	027f027f 	.word	0x027f027f
  40aa30:	027f027f 	.word	0x027f027f
  40aa34:	03c5027f 	.word	0x03c5027f
  40aa38:	03c503c5 	.word	0x03c503c5
  40aa3c:	03c503c5 	.word	0x03c503c5
  40aa40:	03c503c5 	.word	0x03c503c5
  40aa44:	03c503c5 	.word	0x03c503c5
  40aa48:	029003c5 	.word	0x029003c5
  40aa4c:	03c5036f 	.word	0x03c5036f
  40aa50:	03c5036f 	.word	0x03c5036f
  40aa54:	03c503c5 	.word	0x03c503c5
  40aa58:	036803c5 	.word	0x036803c5
  40aa5c:	03c503c5 	.word	0x03c503c5
  40aa60:	03c50078 	.word	0x03c50078
  40aa64:	03c503c5 	.word	0x03c503c5
  40aa68:	03c503c5 	.word	0x03c503c5
  40aa6c:	03c50059 	.word	0x03c50059
  40aa70:	02af03c5 	.word	0x02af03c5
  40aa74:	03c503c5 	.word	0x03c503c5
  40aa78:	03c503c5 	.word	0x03c503c5
  40aa7c:	03c503c5 	.word	0x03c503c5
  40aa80:	03c503c5 	.word	0x03c503c5
  40aa84:	03c503c5 	.word	0x03c503c5
  40aa88:	03480337 	.word	0x03480337
  40aa8c:	036f036f 	.word	0x036f036f
  40aa90:	02ff036f 	.word	0x02ff036f
  40aa94:	03c50348 	.word	0x03c50348
  40aa98:	030803c5 	.word	0x030803c5
  40aa9c:	02c503c5 	.word	0x02c503c5
  40aaa0:	0321007c 	.word	0x0321007c
  40aaa4:	03c503a5 	.word	0x03c503a5
  40aaa8:	03c502d9 	.word	0x03c502d9
  40aaac:	03c5005f 	.word	0x03c5005f
  40aab0:	00de03c5 	.word	0x00de03c5
  40aab4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40aab8:	f04c 0c10 	orr.w	ip, ip, #16
  40aabc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40aac0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40aac2:	06a2      	lsls	r2, r4, #26
  40aac4:	f100 8356 	bmi.w	40b174 <_svfprintf_r+0x83c>
  40aac8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40aaca:	06e3      	lsls	r3, r4, #27
  40aacc:	f100 85e0 	bmi.w	40b690 <_svfprintf_r+0xd58>
  40aad0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40aad4:	f01c 0f40 	tst.w	ip, #64	; 0x40
  40aad8:	f000 85da 	beq.w	40b690 <_svfprintf_r+0xd58>
  40aadc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40aae0:	f8bc 4000 	ldrh.w	r4, [ip]
  40aae4:	f10c 0c04 	add.w	ip, ip, #4
  40aae8:	2500      	movs	r5, #0
  40aaea:	2301      	movs	r3, #1
  40aaec:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40aaf0:	e08c      	b.n	40ac0c <_svfprintf_r+0x2d4>
  40aaf2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40aaf4:	f045 0510 	orr.w	r5, r5, #16
  40aaf8:	9509      	str	r5, [sp, #36]	; 0x24
  40aafa:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40aafe:	f01c 0320 	ands.w	r3, ip, #32
  40ab02:	f040 832c 	bne.w	40b15e <_svfprintf_r+0x826>
  40ab06:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ab0a:	f01c 0210 	ands.w	r2, ip, #16
  40ab0e:	f040 85b8 	bne.w	40b682 <_svfprintf_r+0xd4a>
  40ab12:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ab16:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  40ab1a:	f000 85b2 	beq.w	40b682 <_svfprintf_r+0xd4a>
  40ab1e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40ab22:	f8bc 4000 	ldrh.w	r4, [ip]
  40ab26:	f10c 0c04 	add.w	ip, ip, #4
  40ab2a:	4613      	mov	r3, r2
  40ab2c:	2500      	movs	r5, #0
  40ab2e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40ab32:	e06b      	b.n	40ac0c <_svfprintf_r+0x2d4>
  40ab34:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40ab36:	9310      	str	r3, [sp, #64]	; 0x40
  40ab38:	4264      	negs	r4, r4
  40ab3a:	940f      	str	r4, [sp, #60]	; 0x3c
  40ab3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ab3e:	f045 0504 	orr.w	r5, r5, #4
  40ab42:	9509      	str	r5, [sp, #36]	; 0x24
  40ab44:	f899 8000 	ldrb.w	r8, [r9]
  40ab48:	e752      	b.n	40a9f0 <_svfprintf_r+0xb8>
  40ab4a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40ab4c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40ab4e:	aa2b      	add	r2, sp, #172	; 0xac
  40ab50:	f007 f982 	bl	411e58 <__ssprint_r>
  40ab54:	b940      	cbnz	r0, 40ab68 <_svfprintf_r+0x230>
  40ab56:	ae38      	add	r6, sp, #224	; 0xe0
  40ab58:	e736      	b.n	40a9c8 <_svfprintf_r+0x90>
  40ab5a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40ab5c:	b123      	cbz	r3, 40ab68 <_svfprintf_r+0x230>
  40ab5e:	980d      	ldr	r0, [sp, #52]	; 0x34
  40ab60:	990c      	ldr	r1, [sp, #48]	; 0x30
  40ab62:	aa2b      	add	r2, sp, #172	; 0xac
  40ab64:	f007 f978 	bl	411e58 <__ssprint_r>
  40ab68:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40ab6a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40ab6c:	89a3      	ldrh	r3, [r4, #12]
  40ab6e:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ab72:	bf18      	it	ne
  40ab74:	f04f 30ff 	movne.w	r0, #4294967295
  40ab78:	b049      	add	sp, #292	; 0x124
  40ab7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ab7e:	464c      	mov	r4, r9
  40ab80:	e725      	b.n	40a9ce <_svfprintf_r+0x96>
  40ab82:	f899 8000 	ldrb.w	r8, [r9]
  40ab86:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  40ab8a:	f109 0001 	add.w	r0, r9, #1
  40ab8e:	f001 8118 	beq.w	40bdc2 <_svfprintf_r+0x148a>
  40ab92:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40ab96:	2b09      	cmp	r3, #9
  40ab98:	bf98      	it	ls
  40ab9a:	2100      	movls	r1, #0
  40ab9c:	f201 8077 	bhi.w	40bc8e <_svfprintf_r+0x1356>
  40aba0:	f810 8b01 	ldrb.w	r8, [r0], #1
  40aba4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40aba8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40abac:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40abb0:	2b09      	cmp	r3, #9
  40abb2:	d9f5      	bls.n	40aba0 <_svfprintf_r+0x268>
  40abb4:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  40abb8:	910a      	str	r1, [sp, #40]	; 0x28
  40abba:	4681      	mov	r9, r0
  40abbc:	e71a      	b.n	40a9f4 <_svfprintf_r+0xbc>
  40abbe:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40abc0:	4ca1      	ldr	r4, [pc, #644]	; (40ae48 <_svfprintf_r+0x510>)
  40abc2:	941a      	str	r4, [sp, #104]	; 0x68
  40abc4:	06af      	lsls	r7, r5, #26
  40abc6:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40abca:	f140 81d1 	bpl.w	40af70 <_svfprintf_r+0x638>
  40abce:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40abd2:	f10c 0307 	add.w	r3, ip, #7
  40abd6:	f023 0307 	bic.w	r3, r3, #7
  40abda:	f103 0408 	add.w	r4, r3, #8
  40abde:	9410      	str	r4, [sp, #64]	; 0x40
  40abe0:	e9d3 4500 	ldrd	r4, r5, [r3]
  40abe4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40abe8:	f01c 0f01 	tst.w	ip, #1
  40abec:	f000 8464 	beq.w	40b4b8 <_svfprintf_r+0xb80>
  40abf0:	ea54 0005 	orrs.w	r0, r4, r5
  40abf4:	f000 8460 	beq.w	40b4b8 <_svfprintf_r+0xb80>
  40abf8:	2330      	movs	r3, #48	; 0x30
  40abfa:	f04c 0c02 	orr.w	ip, ip, #2
  40abfe:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40ac02:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  40ac06:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40ac0a:	2302      	movs	r3, #2
  40ac0c:	f04f 0a00 	mov.w	sl, #0
  40ac10:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40ac14:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ac16:	2900      	cmp	r1, #0
  40ac18:	db05      	blt.n	40ac26 <_svfprintf_r+0x2ee>
  40ac1a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ac1e:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  40ac22:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40ac26:	ea54 0005 	orrs.w	r0, r4, r5
  40ac2a:	f040 82c7 	bne.w	40b1bc <_svfprintf_r+0x884>
  40ac2e:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ac30:	2900      	cmp	r1, #0
  40ac32:	f040 82c3 	bne.w	40b1bc <_svfprintf_r+0x884>
  40ac36:	2b00      	cmp	r3, #0
  40ac38:	f040 843a 	bne.w	40b4b0 <_svfprintf_r+0xb78>
  40ac3c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ac40:	f01c 0f01 	tst.w	ip, #1
  40ac44:	f000 8434 	beq.w	40b4b0 <_svfprintf_r+0xb78>
  40ac48:	af48      	add	r7, sp, #288	; 0x120
  40ac4a:	2330      	movs	r3, #48	; 0x30
  40ac4c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40ac50:	9d08      	ldr	r5, [sp, #32]
  40ac52:	1bec      	subs	r4, r5, r7
  40ac54:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40ac58:	2500      	movs	r5, #0
  40ac5a:	4564      	cmp	r4, ip
  40ac5c:	bfa8      	it	ge
  40ac5e:	46a4      	movge	ip, r4
  40ac60:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40ac64:	9514      	str	r5, [sp, #80]	; 0x50
  40ac66:	f1ba 0f00 	cmp.w	sl, #0
  40ac6a:	d002      	beq.n	40ac72 <_svfprintf_r+0x33a>
  40ac6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40ac6e:	3501      	adds	r5, #1
  40ac70:	950b      	str	r5, [sp, #44]	; 0x2c
  40ac72:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ac74:	f013 0302 	ands.w	r3, r3, #2
  40ac78:	9312      	str	r3, [sp, #72]	; 0x48
  40ac7a:	d002      	beq.n	40ac82 <_svfprintf_r+0x34a>
  40ac7c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40ac7e:	3502      	adds	r5, #2
  40ac80:	950b      	str	r5, [sp, #44]	; 0x2c
  40ac82:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ac86:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  40ac8a:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  40ac8e:	f040 8292 	bne.w	40b1b6 <_svfprintf_r+0x87e>
  40ac92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ac94:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40ac98:	ebcc 0b05 	rsb	fp, ip, r5
  40ac9c:	f1bb 0f00 	cmp.w	fp, #0
  40aca0:	f340 8289 	ble.w	40b1b6 <_svfprintf_r+0x87e>
  40aca4:	f1bb 0f10 	cmp.w	fp, #16
  40aca8:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40acaa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40acac:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 40ae50 <_svfprintf_r+0x518>
  40acb0:	dd2c      	ble.n	40ad0c <_svfprintf_r+0x3d4>
  40acb2:	971b      	str	r7, [sp, #108]	; 0x6c
  40acb4:	4630      	mov	r0, r6
  40acb6:	4657      	mov	r7, sl
  40acb8:	2510      	movs	r5, #16
  40acba:	46ca      	mov	sl, r9
  40acbc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40acbe:	46a1      	mov	r9, r4
  40acc0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40acc2:	e006      	b.n	40acd2 <_svfprintf_r+0x39a>
  40acc4:	f1ab 0b10 	sub.w	fp, fp, #16
  40acc8:	f1bb 0f10 	cmp.w	fp, #16
  40accc:	f100 0008 	add.w	r0, r0, #8
  40acd0:	dd17      	ble.n	40ad02 <_svfprintf_r+0x3ca>
  40acd2:	3201      	adds	r2, #1
  40acd4:	3110      	adds	r1, #16
  40acd6:	2a07      	cmp	r2, #7
  40acd8:	912d      	str	r1, [sp, #180]	; 0xb4
  40acda:	922c      	str	r2, [sp, #176]	; 0xb0
  40acdc:	6007      	str	r7, [r0, #0]
  40acde:	6045      	str	r5, [r0, #4]
  40ace0:	ddf0      	ble.n	40acc4 <_svfprintf_r+0x38c>
  40ace2:	4620      	mov	r0, r4
  40ace4:	4631      	mov	r1, r6
  40ace6:	aa2b      	add	r2, sp, #172	; 0xac
  40ace8:	f007 f8b6 	bl	411e58 <__ssprint_r>
  40acec:	2800      	cmp	r0, #0
  40acee:	f47f af3b 	bne.w	40ab68 <_svfprintf_r+0x230>
  40acf2:	f1ab 0b10 	sub.w	fp, fp, #16
  40acf6:	f1bb 0f10 	cmp.w	fp, #16
  40acfa:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40acfc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40acfe:	a838      	add	r0, sp, #224	; 0xe0
  40ad00:	dce7      	bgt.n	40acd2 <_svfprintf_r+0x39a>
  40ad02:	464c      	mov	r4, r9
  40ad04:	46d1      	mov	r9, sl
  40ad06:	46ba      	mov	sl, r7
  40ad08:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40ad0a:	4606      	mov	r6, r0
  40ad0c:	3201      	adds	r2, #1
  40ad0e:	eb0b 0c01 	add.w	ip, fp, r1
  40ad12:	2a07      	cmp	r2, #7
  40ad14:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40ad18:	922c      	str	r2, [sp, #176]	; 0xb0
  40ad1a:	e886 0c00 	stmia.w	r6, {sl, fp}
  40ad1e:	f300 841c 	bgt.w	40b55a <_svfprintf_r+0xc22>
  40ad22:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40ad26:	3608      	adds	r6, #8
  40ad28:	f1ba 0f00 	cmp.w	sl, #0
  40ad2c:	d00f      	beq.n	40ad4e <_svfprintf_r+0x416>
  40ad2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40ad30:	3301      	adds	r3, #1
  40ad32:	f10c 0c01 	add.w	ip, ip, #1
  40ad36:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  40ad3a:	2201      	movs	r2, #1
  40ad3c:	2b07      	cmp	r3, #7
  40ad3e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40ad42:	932c      	str	r3, [sp, #176]	; 0xb0
  40ad44:	e886 0006 	stmia.w	r6, {r1, r2}
  40ad48:	f300 839a 	bgt.w	40b480 <_svfprintf_r+0xb48>
  40ad4c:	3608      	adds	r6, #8
  40ad4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ad50:	b173      	cbz	r3, 40ad70 <_svfprintf_r+0x438>
  40ad52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40ad54:	3301      	adds	r3, #1
  40ad56:	f10c 0c02 	add.w	ip, ip, #2
  40ad5a:	a924      	add	r1, sp, #144	; 0x90
  40ad5c:	2202      	movs	r2, #2
  40ad5e:	2b07      	cmp	r3, #7
  40ad60:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40ad64:	932c      	str	r3, [sp, #176]	; 0xb0
  40ad66:	e886 0006 	stmia.w	r6, {r1, r2}
  40ad6a:	f300 8395 	bgt.w	40b498 <_svfprintf_r+0xb60>
  40ad6e:	3608      	adds	r6, #8
  40ad70:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  40ad72:	2d80      	cmp	r5, #128	; 0x80
  40ad74:	f000 82cc 	beq.w	40b310 <_svfprintf_r+0x9d8>
  40ad78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40ad7a:	ebc4 0a05 	rsb	sl, r4, r5
  40ad7e:	f1ba 0f00 	cmp.w	sl, #0
  40ad82:	dd3b      	ble.n	40adfc <_svfprintf_r+0x4c4>
  40ad84:	f1ba 0f10 	cmp.w	sl, #16
  40ad88:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40ad8a:	4d30      	ldr	r5, [pc, #192]	; (40ae4c <_svfprintf_r+0x514>)
  40ad8c:	dd2b      	ble.n	40ade6 <_svfprintf_r+0x4ae>
  40ad8e:	940a      	str	r4, [sp, #40]	; 0x28
  40ad90:	4632      	mov	r2, r6
  40ad92:	f04f 0b10 	mov.w	fp, #16
  40ad96:	462e      	mov	r6, r5
  40ad98:	4661      	mov	r1, ip
  40ad9a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40ad9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40ad9e:	e006      	b.n	40adae <_svfprintf_r+0x476>
  40ada0:	f1aa 0a10 	sub.w	sl, sl, #16
  40ada4:	f1ba 0f10 	cmp.w	sl, #16
  40ada8:	f102 0208 	add.w	r2, r2, #8
  40adac:	dd17      	ble.n	40adde <_svfprintf_r+0x4a6>
  40adae:	3301      	adds	r3, #1
  40adb0:	3110      	adds	r1, #16
  40adb2:	2b07      	cmp	r3, #7
  40adb4:	912d      	str	r1, [sp, #180]	; 0xb4
  40adb6:	932c      	str	r3, [sp, #176]	; 0xb0
  40adb8:	e882 0840 	stmia.w	r2, {r6, fp}
  40adbc:	ddf0      	ble.n	40ada0 <_svfprintf_r+0x468>
  40adbe:	4620      	mov	r0, r4
  40adc0:	4629      	mov	r1, r5
  40adc2:	aa2b      	add	r2, sp, #172	; 0xac
  40adc4:	f007 f848 	bl	411e58 <__ssprint_r>
  40adc8:	2800      	cmp	r0, #0
  40adca:	f47f aecd 	bne.w	40ab68 <_svfprintf_r+0x230>
  40adce:	f1aa 0a10 	sub.w	sl, sl, #16
  40add2:	f1ba 0f10 	cmp.w	sl, #16
  40add6:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40add8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40adda:	aa38      	add	r2, sp, #224	; 0xe0
  40addc:	dce7      	bgt.n	40adae <_svfprintf_r+0x476>
  40adde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40ade0:	4635      	mov	r5, r6
  40ade2:	468c      	mov	ip, r1
  40ade4:	4616      	mov	r6, r2
  40ade6:	3301      	adds	r3, #1
  40ade8:	44d4      	add	ip, sl
  40adea:	2b07      	cmp	r3, #7
  40adec:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40adf0:	932c      	str	r3, [sp, #176]	; 0xb0
  40adf2:	e886 0420 	stmia.w	r6, {r5, sl}
  40adf6:	f300 8337 	bgt.w	40b468 <_svfprintf_r+0xb30>
  40adfa:	3608      	adds	r6, #8
  40adfc:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40adfe:	05ed      	lsls	r5, r5, #23
  40ae00:	f100 8226 	bmi.w	40b250 <_svfprintf_r+0x918>
  40ae04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40ae06:	6037      	str	r7, [r6, #0]
  40ae08:	3301      	adds	r3, #1
  40ae0a:	44a4      	add	ip, r4
  40ae0c:	2b07      	cmp	r3, #7
  40ae0e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40ae12:	6074      	str	r4, [r6, #4]
  40ae14:	932c      	str	r3, [sp, #176]	; 0xb0
  40ae16:	f300 8311 	bgt.w	40b43c <_svfprintf_r+0xb04>
  40ae1a:	3608      	adds	r6, #8
  40ae1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ae1e:	0763      	lsls	r3, r4, #29
  40ae20:	d549      	bpl.n	40aeb6 <_svfprintf_r+0x57e>
  40ae22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ae24:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40ae26:	1a2c      	subs	r4, r5, r0
  40ae28:	2c00      	cmp	r4, #0
  40ae2a:	dd44      	ble.n	40aeb6 <_svfprintf_r+0x57e>
  40ae2c:	2c10      	cmp	r4, #16
  40ae2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40ae30:	f8df a01c 	ldr.w	sl, [pc, #28]	; 40ae50 <_svfprintf_r+0x518>
  40ae34:	dd2b      	ble.n	40ae8e <_svfprintf_r+0x556>
  40ae36:	4657      	mov	r7, sl
  40ae38:	2510      	movs	r5, #16
  40ae3a:	4662      	mov	r2, ip
  40ae3c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  40ae40:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  40ae44:	e00b      	b.n	40ae5e <_svfprintf_r+0x526>
  40ae46:	bf00      	nop
  40ae48:	004136bc 	.word	0x004136bc
  40ae4c:	00413688 	.word	0x00413688
  40ae50:	004136dc 	.word	0x004136dc
  40ae54:	3c10      	subs	r4, #16
  40ae56:	2c10      	cmp	r4, #16
  40ae58:	f106 0608 	add.w	r6, r6, #8
  40ae5c:	dd15      	ble.n	40ae8a <_svfprintf_r+0x552>
  40ae5e:	3301      	adds	r3, #1
  40ae60:	3210      	adds	r2, #16
  40ae62:	2b07      	cmp	r3, #7
  40ae64:	922d      	str	r2, [sp, #180]	; 0xb4
  40ae66:	932c      	str	r3, [sp, #176]	; 0xb0
  40ae68:	6037      	str	r7, [r6, #0]
  40ae6a:	6075      	str	r5, [r6, #4]
  40ae6c:	ddf2      	ble.n	40ae54 <_svfprintf_r+0x51c>
  40ae6e:	4650      	mov	r0, sl
  40ae70:	4641      	mov	r1, r8
  40ae72:	aa2b      	add	r2, sp, #172	; 0xac
  40ae74:	f006 fff0 	bl	411e58 <__ssprint_r>
  40ae78:	2800      	cmp	r0, #0
  40ae7a:	f47f ae75 	bne.w	40ab68 <_svfprintf_r+0x230>
  40ae7e:	3c10      	subs	r4, #16
  40ae80:	2c10      	cmp	r4, #16
  40ae82:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40ae84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40ae86:	ae38      	add	r6, sp, #224	; 0xe0
  40ae88:	dce9      	bgt.n	40ae5e <_svfprintf_r+0x526>
  40ae8a:	4694      	mov	ip, r2
  40ae8c:	46ba      	mov	sl, r7
  40ae8e:	3301      	adds	r3, #1
  40ae90:	44a4      	add	ip, r4
  40ae92:	2b07      	cmp	r3, #7
  40ae94:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40ae98:	932c      	str	r3, [sp, #176]	; 0xb0
  40ae9a:	f8c6 a000 	str.w	sl, [r6]
  40ae9e:	6074      	str	r4, [r6, #4]
  40aea0:	dd09      	ble.n	40aeb6 <_svfprintf_r+0x57e>
  40aea2:	980d      	ldr	r0, [sp, #52]	; 0x34
  40aea4:	990c      	ldr	r1, [sp, #48]	; 0x30
  40aea6:	aa2b      	add	r2, sp, #172	; 0xac
  40aea8:	f006 ffd6 	bl	411e58 <__ssprint_r>
  40aeac:	2800      	cmp	r0, #0
  40aeae:	f47f ae5b 	bne.w	40ab68 <_svfprintf_r+0x230>
  40aeb2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40aeb6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40aeb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40aeba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40aebc:	42a8      	cmp	r0, r5
  40aebe:	bfac      	ite	ge
  40aec0:	1824      	addge	r4, r4, r0
  40aec2:	1964      	addlt	r4, r4, r5
  40aec4:	940e      	str	r4, [sp, #56]	; 0x38
  40aec6:	f1bc 0f00 	cmp.w	ip, #0
  40aeca:	f040 82c3 	bne.w	40b454 <_svfprintf_r+0xb1c>
  40aece:	2300      	movs	r3, #0
  40aed0:	932c      	str	r3, [sp, #176]	; 0xb0
  40aed2:	ae38      	add	r6, sp, #224	; 0xe0
  40aed4:	e556      	b.n	40a984 <_svfprintf_r+0x4c>
  40aed6:	f899 8000 	ldrb.w	r8, [r9]
  40aeda:	2a00      	cmp	r2, #0
  40aedc:	f47f ad88 	bne.w	40a9f0 <_svfprintf_r+0xb8>
  40aee0:	2220      	movs	r2, #32
  40aee2:	e585      	b.n	40a9f0 <_svfprintf_r+0xb8>
  40aee4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40aee6:	f045 0501 	orr.w	r5, r5, #1
  40aeea:	9509      	str	r5, [sp, #36]	; 0x24
  40aeec:	f899 8000 	ldrb.w	r8, [r9]
  40aef0:	e57e      	b.n	40a9f0 <_svfprintf_r+0xb8>
  40aef2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40aef4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  40aef8:	9509      	str	r5, [sp, #36]	; 0x24
  40aefa:	f899 8000 	ldrb.w	r8, [r9]
  40aefe:	e577      	b.n	40a9f0 <_svfprintf_r+0xb8>
  40af00:	2400      	movs	r4, #0
  40af02:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40af06:	940f      	str	r4, [sp, #60]	; 0x3c
  40af08:	4621      	mov	r1, r4
  40af0a:	f819 8b01 	ldrb.w	r8, [r9], #1
  40af0e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40af12:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  40af16:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40af1a:	2b09      	cmp	r3, #9
  40af1c:	d9f5      	bls.n	40af0a <_svfprintf_r+0x5d2>
  40af1e:	910f      	str	r1, [sp, #60]	; 0x3c
  40af20:	e568      	b.n	40a9f4 <_svfprintf_r+0xbc>
  40af22:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40af26:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40af2a:	f04c 0c10 	orr.w	ip, ip, #16
  40af2e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40af32:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40af34:	06a3      	lsls	r3, r4, #26
  40af36:	f140 80b2 	bpl.w	40b09e <_svfprintf_r+0x766>
  40af3a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40af3c:	1de9      	adds	r1, r5, #7
  40af3e:	f021 0107 	bic.w	r1, r1, #7
  40af42:	e9d1 2300 	ldrd	r2, r3, [r1]
  40af46:	3108      	adds	r1, #8
  40af48:	9110      	str	r1, [sp, #64]	; 0x40
  40af4a:	4614      	mov	r4, r2
  40af4c:	461d      	mov	r5, r3
  40af4e:	2a00      	cmp	r2, #0
  40af50:	f173 0000 	sbcs.w	r0, r3, #0
  40af54:	f2c0 838b 	blt.w	40b66e <_svfprintf_r+0xd36>
  40af58:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40af5c:	2301      	movs	r3, #1
  40af5e:	e659      	b.n	40ac14 <_svfprintf_r+0x2dc>
  40af60:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40af62:	4cb7      	ldr	r4, [pc, #732]	; (40b240 <_svfprintf_r+0x908>)
  40af64:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40af68:	06af      	lsls	r7, r5, #26
  40af6a:	941a      	str	r4, [sp, #104]	; 0x68
  40af6c:	f53f ae2f 	bmi.w	40abce <_svfprintf_r+0x296>
  40af70:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40af72:	06ed      	lsls	r5, r5, #27
  40af74:	f140 845d 	bpl.w	40b832 <_svfprintf_r+0xefa>
  40af78:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40af7c:	f8dc 4000 	ldr.w	r4, [ip]
  40af80:	f10c 0c04 	add.w	ip, ip, #4
  40af84:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40af88:	2500      	movs	r5, #0
  40af8a:	e62b      	b.n	40abe4 <_svfprintf_r+0x2ac>
  40af8c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40af90:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40af94:	f01c 0f20 	tst.w	ip, #32
  40af98:	f000 843d 	beq.w	40b816 <_svfprintf_r+0xede>
  40af9c:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40af9e:	6821      	ldr	r1, [r4, #0]
  40afa0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40afa2:	17e5      	asrs	r5, r4, #31
  40afa4:	462b      	mov	r3, r5
  40afa6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40afa8:	4622      	mov	r2, r4
  40afaa:	3504      	adds	r5, #4
  40afac:	9510      	str	r5, [sp, #64]	; 0x40
  40afae:	e9c1 2300 	strd	r2, r3, [r1]
  40afb2:	e4e7      	b.n	40a984 <_svfprintf_r+0x4c>
  40afb4:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40afb6:	6827      	ldr	r7, [r4, #0]
  40afb8:	f04f 0a00 	mov.w	sl, #0
  40afbc:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40afc0:	1d25      	adds	r5, r4, #4
  40afc2:	2f00      	cmp	r7, #0
  40afc4:	f000 85f5 	beq.w	40bbb2 <_svfprintf_r+0x127a>
  40afc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40afca:	2c00      	cmp	r4, #0
  40afcc:	4638      	mov	r0, r7
  40afce:	f2c0 85a7 	blt.w	40bb20 <_svfprintf_r+0x11e8>
  40afd2:	4651      	mov	r1, sl
  40afd4:	4622      	mov	r2, r4
  40afd6:	f004 fd67 	bl	40faa8 <memchr>
  40afda:	2800      	cmp	r0, #0
  40afdc:	f000 861f 	beq.w	40bc1e <_svfprintf_r+0x12e6>
  40afe0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40afe2:	9510      	str	r5, [sp, #64]	; 0x40
  40afe4:	1bc0      	subs	r0, r0, r7
  40afe6:	42a0      	cmp	r0, r4
  40afe8:	bfb8      	it	lt
  40afea:	4604      	movlt	r4, r0
  40afec:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  40aff0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40aff4:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  40aff8:	950b      	str	r5, [sp, #44]	; 0x2c
  40affa:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40affe:	e632      	b.n	40ac66 <_svfprintf_r+0x32e>
  40b000:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b004:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  40b008:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40b00c:	f899 8000 	ldrb.w	r8, [r9]
  40b010:	e4ee      	b.n	40a9f0 <_svfprintf_r+0xb8>
  40b012:	f899 8000 	ldrb.w	r8, [r9]
  40b016:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  40b01a:	464b      	mov	r3, r9
  40b01c:	f000 848b 	beq.w	40b936 <_svfprintf_r+0xffe>
  40b020:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40b022:	f045 0510 	orr.w	r5, r5, #16
  40b026:	9509      	str	r5, [sp, #36]	; 0x24
  40b028:	e4e2      	b.n	40a9f0 <_svfprintf_r+0xb8>
  40b02a:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40b02c:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b02e:	6824      	ldr	r4, [r4, #0]
  40b030:	940f      	str	r4, [sp, #60]	; 0x3c
  40b032:	2c00      	cmp	r4, #0
  40b034:	f105 0304 	add.w	r3, r5, #4
  40b038:	f6ff ad7c 	blt.w	40ab34 <_svfprintf_r+0x1fc>
  40b03c:	9310      	str	r3, [sp, #64]	; 0x40
  40b03e:	f899 8000 	ldrb.w	r8, [r9]
  40b042:	e4d5      	b.n	40a9f0 <_svfprintf_r+0xb8>
  40b044:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40b046:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b04a:	487e      	ldr	r0, [pc, #504]	; (40b244 <_svfprintf_r+0x90c>)
  40b04c:	6814      	ldr	r4, [r2, #0]
  40b04e:	901a      	str	r0, [sp, #104]	; 0x68
  40b050:	2330      	movs	r3, #48	; 0x30
  40b052:	1d15      	adds	r5, r2, #4
  40b054:	f04f 0878 	mov.w	r8, #120	; 0x78
  40b058:	f04c 0c02 	orr.w	ip, ip, #2
  40b05c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  40b060:	9510      	str	r5, [sp, #64]	; 0x40
  40b062:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40b066:	2500      	movs	r5, #0
  40b068:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  40b06c:	2302      	movs	r3, #2
  40b06e:	e5cd      	b.n	40ac0c <_svfprintf_r+0x2d4>
  40b070:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40b072:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b074:	6812      	ldr	r2, [r2, #0]
  40b076:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  40b07a:	2300      	movs	r3, #0
  40b07c:	2401      	movs	r4, #1
  40b07e:	3504      	adds	r5, #4
  40b080:	469a      	mov	sl, r3
  40b082:	940b      	str	r4, [sp, #44]	; 0x2c
  40b084:	9510      	str	r5, [sp, #64]	; 0x40
  40b086:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40b08a:	930a      	str	r3, [sp, #40]	; 0x28
  40b08c:	9314      	str	r3, [sp, #80]	; 0x50
  40b08e:	af2e      	add	r7, sp, #184	; 0xb8
  40b090:	e5ef      	b.n	40ac72 <_svfprintf_r+0x33a>
  40b092:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40b094:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40b098:	06a3      	lsls	r3, r4, #26
  40b09a:	f53f af4e 	bmi.w	40af3a <_svfprintf_r+0x602>
  40b09e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b0a2:	f01c 0f10 	tst.w	ip, #16
  40b0a6:	f040 82d2 	bne.w	40b64e <_svfprintf_r+0xd16>
  40b0aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40b0ac:	0667      	lsls	r7, r4, #25
  40b0ae:	f140 82ce 	bpl.w	40b64e <_svfprintf_r+0xd16>
  40b0b2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40b0b6:	f9bc 4000 	ldrsh.w	r4, [ip]
  40b0ba:	f10c 0c04 	add.w	ip, ip, #4
  40b0be:	17e5      	asrs	r5, r4, #31
  40b0c0:	4622      	mov	r2, r4
  40b0c2:	462b      	mov	r3, r5
  40b0c4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40b0c8:	e741      	b.n	40af4e <_svfprintf_r+0x616>
  40b0ca:	f899 8000 	ldrb.w	r8, [r9]
  40b0ce:	222b      	movs	r2, #43	; 0x2b
  40b0d0:	e48e      	b.n	40a9f0 <_svfprintf_r+0xb8>
  40b0d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40b0d4:	f045 0508 	orr.w	r5, r5, #8
  40b0d8:	9509      	str	r5, [sp, #36]	; 0x24
  40b0da:	f899 8000 	ldrb.w	r8, [r9]
  40b0de:	e487      	b.n	40a9f0 <_svfprintf_r+0xb8>
  40b0e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b0e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40b0e4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40b0e8:	1deb      	adds	r3, r5, #7
  40b0ea:	0725      	lsls	r5, r4, #28
  40b0ec:	f023 0307 	bic.w	r3, r3, #7
  40b0f0:	f140 838a 	bpl.w	40b808 <_svfprintf_r+0xed0>
  40b0f4:	e9d3 4500 	ldrd	r4, r5, [r3]
  40b0f8:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40b0fc:	f103 0c08 	add.w	ip, r3, #8
  40b100:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40b104:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40b108:	f005 fbc0 	bl	41088c <__fpclassifyd>
  40b10c:	2801      	cmp	r0, #1
  40b10e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40b112:	f040 835f 	bne.w	40b7d4 <_svfprintf_r+0xe9c>
  40b116:	2200      	movs	r2, #0
  40b118:	2300      	movs	r3, #0
  40b11a:	f008 f94f 	bl	4133bc <__aeabi_dcmplt>
  40b11e:	2800      	cmp	r0, #0
  40b120:	f040 856d 	bne.w	40bbfe <_svfprintf_r+0x12c6>
  40b124:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40b128:	2503      	movs	r5, #3
  40b12a:	950b      	str	r5, [sp, #44]	; 0x2c
  40b12c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40b12e:	4f46      	ldr	r7, [pc, #280]	; (40b248 <_svfprintf_r+0x910>)
  40b130:	4b46      	ldr	r3, [pc, #280]	; (40b24c <_svfprintf_r+0x914>)
  40b132:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  40b136:	2400      	movs	r4, #0
  40b138:	9509      	str	r5, [sp, #36]	; 0x24
  40b13a:	2500      	movs	r5, #0
  40b13c:	940a      	str	r4, [sp, #40]	; 0x28
  40b13e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40b142:	bfd8      	it	le
  40b144:	461f      	movle	r7, r3
  40b146:	2403      	movs	r4, #3
  40b148:	9514      	str	r5, [sp, #80]	; 0x50
  40b14a:	e58c      	b.n	40ac66 <_svfprintf_r+0x32e>
  40b14c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b150:	f04c 0c20 	orr.w	ip, ip, #32
  40b154:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40b158:	f899 8000 	ldrb.w	r8, [r9]
  40b15c:	e448      	b.n	40a9f0 <_svfprintf_r+0xb8>
  40b15e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40b160:	1de3      	adds	r3, r4, #7
  40b162:	f023 0307 	bic.w	r3, r3, #7
  40b166:	f103 0508 	add.w	r5, r3, #8
  40b16a:	9510      	str	r5, [sp, #64]	; 0x40
  40b16c:	e9d3 4500 	ldrd	r4, r5, [r3]
  40b170:	2300      	movs	r3, #0
  40b172:	e54b      	b.n	40ac0c <_svfprintf_r+0x2d4>
  40b174:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b176:	1deb      	adds	r3, r5, #7
  40b178:	f023 0307 	bic.w	r3, r3, #7
  40b17c:	f103 0c08 	add.w	ip, r3, #8
  40b180:	e9d3 4500 	ldrd	r4, r5, [r3]
  40b184:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40b188:	2301      	movs	r3, #1
  40b18a:	e53f      	b.n	40ac0c <_svfprintf_r+0x2d4>
  40b18c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40b190:	f1b8 0f00 	cmp.w	r8, #0
  40b194:	f43f ace1 	beq.w	40ab5a <_svfprintf_r+0x222>
  40b198:	2300      	movs	r3, #0
  40b19a:	f04f 0c01 	mov.w	ip, #1
  40b19e:	469a      	mov	sl, r3
  40b1a0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40b1a4:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  40b1a8:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40b1ac:	930a      	str	r3, [sp, #40]	; 0x28
  40b1ae:	9314      	str	r3, [sp, #80]	; 0x50
  40b1b0:	4664      	mov	r4, ip
  40b1b2:	af2e      	add	r7, sp, #184	; 0xb8
  40b1b4:	e55d      	b.n	40ac72 <_svfprintf_r+0x33a>
  40b1b6:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b1ba:	e5b5      	b.n	40ad28 <_svfprintf_r+0x3f0>
  40b1bc:	2b01      	cmp	r3, #1
  40b1be:	f000 80ec 	beq.w	40b39a <_svfprintf_r+0xa62>
  40b1c2:	2b02      	cmp	r3, #2
  40b1c4:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  40b1c8:	d118      	bne.n	40b1fc <_svfprintf_r+0x8c4>
  40b1ca:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  40b1ce:	4619      	mov	r1, r3
  40b1d0:	f004 000f 	and.w	r0, r4, #15
  40b1d4:	0922      	lsrs	r2, r4, #4
  40b1d6:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  40b1da:	460f      	mov	r7, r1
  40b1dc:	092b      	lsrs	r3, r5, #4
  40b1de:	f81c 1000 	ldrb.w	r1, [ip, r0]
  40b1e2:	7039      	strb	r1, [r7, #0]
  40b1e4:	ea52 0003 	orrs.w	r0, r2, r3
  40b1e8:	4614      	mov	r4, r2
  40b1ea:	461d      	mov	r5, r3
  40b1ec:	f107 31ff 	add.w	r1, r7, #4294967295
  40b1f0:	d1ee      	bne.n	40b1d0 <_svfprintf_r+0x898>
  40b1f2:	9d08      	ldr	r5, [sp, #32]
  40b1f4:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  40b1f8:	1bec      	subs	r4, r5, r7
  40b1fa:	e52b      	b.n	40ac54 <_svfprintf_r+0x31c>
  40b1fc:	08e0      	lsrs	r0, r4, #3
  40b1fe:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  40b202:	f004 0207 	and.w	r2, r4, #7
  40b206:	08e9      	lsrs	r1, r5, #3
  40b208:	3230      	adds	r2, #48	; 0x30
  40b20a:	ea50 0c01 	orrs.w	ip, r0, r1
  40b20e:	461f      	mov	r7, r3
  40b210:	701a      	strb	r2, [r3, #0]
  40b212:	4604      	mov	r4, r0
  40b214:	460d      	mov	r5, r1
  40b216:	f103 33ff 	add.w	r3, r3, #4294967295
  40b21a:	d1ef      	bne.n	40b1fc <_svfprintf_r+0x8c4>
  40b21c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40b21e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  40b222:	07e0      	lsls	r0, r4, #31
  40b224:	4639      	mov	r1, r7
  40b226:	f140 80c1 	bpl.w	40b3ac <_svfprintf_r+0xa74>
  40b22a:	2a30      	cmp	r2, #48	; 0x30
  40b22c:	f000 80be 	beq.w	40b3ac <_svfprintf_r+0xa74>
  40b230:	9d08      	ldr	r5, [sp, #32]
  40b232:	461f      	mov	r7, r3
  40b234:	2330      	movs	r3, #48	; 0x30
  40b236:	1bec      	subs	r4, r5, r7
  40b238:	f801 3c01 	strb.w	r3, [r1, #-1]
  40b23c:	e50a      	b.n	40ac54 <_svfprintf_r+0x31c>
  40b23e:	bf00      	nop
  40b240:	004136a8 	.word	0x004136a8
  40b244:	004136bc 	.word	0x004136bc
  40b248:	0041369c 	.word	0x0041369c
  40b24c:	00413698 	.word	0x00413698
  40b250:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40b254:	f340 80ad 	ble.w	40b3b2 <_svfprintf_r+0xa7a>
  40b258:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40b25c:	2200      	movs	r2, #0
  40b25e:	2300      	movs	r3, #0
  40b260:	f8cd c01c 	str.w	ip, [sp, #28]
  40b264:	f008 f8a0 	bl	4133a8 <__aeabi_dcmpeq>
  40b268:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40b26c:	2800      	cmp	r0, #0
  40b26e:	f000 8126 	beq.w	40b4be <_svfprintf_r+0xb86>
  40b272:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b274:	4aaa      	ldr	r2, [pc, #680]	; (40b520 <_svfprintf_r+0xbe8>)
  40b276:	6032      	str	r2, [r6, #0]
  40b278:	3301      	adds	r3, #1
  40b27a:	f10c 0c01 	add.w	ip, ip, #1
  40b27e:	2201      	movs	r2, #1
  40b280:	2b07      	cmp	r3, #7
  40b282:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b286:	932c      	str	r3, [sp, #176]	; 0xb0
  40b288:	6072      	str	r2, [r6, #4]
  40b28a:	f300 82f7 	bgt.w	40b87c <_svfprintf_r+0xf44>
  40b28e:	3608      	adds	r6, #8
  40b290:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40b292:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40b294:	42a3      	cmp	r3, r4
  40b296:	db03      	blt.n	40b2a0 <_svfprintf_r+0x968>
  40b298:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40b29a:	07ec      	lsls	r4, r5, #31
  40b29c:	f57f adbe 	bpl.w	40ae1c <_svfprintf_r+0x4e4>
  40b2a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b2a2:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40b2a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40b2a6:	6034      	str	r4, [r6, #0]
  40b2a8:	3301      	adds	r3, #1
  40b2aa:	44ac      	add	ip, r5
  40b2ac:	2b07      	cmp	r3, #7
  40b2ae:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b2b2:	6075      	str	r5, [r6, #4]
  40b2b4:	932c      	str	r3, [sp, #176]	; 0xb0
  40b2b6:	f300 8348 	bgt.w	40b94a <_svfprintf_r+0x1012>
  40b2ba:	3608      	adds	r6, #8
  40b2bc:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40b2be:	1e6c      	subs	r4, r5, #1
  40b2c0:	2c00      	cmp	r4, #0
  40b2c2:	f77f adab 	ble.w	40ae1c <_svfprintf_r+0x4e4>
  40b2c6:	2c10      	cmp	r4, #16
  40b2c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b2ca:	4d96      	ldr	r5, [pc, #600]	; (40b524 <_svfprintf_r+0xbec>)
  40b2cc:	f340 8197 	ble.w	40b5fe <_svfprintf_r+0xcc6>
  40b2d0:	2710      	movs	r7, #16
  40b2d2:	4662      	mov	r2, ip
  40b2d4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40b2d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40b2dc:	e004      	b.n	40b2e8 <_svfprintf_r+0x9b0>
  40b2de:	3608      	adds	r6, #8
  40b2e0:	3c10      	subs	r4, #16
  40b2e2:	2c10      	cmp	r4, #16
  40b2e4:	f340 818a 	ble.w	40b5fc <_svfprintf_r+0xcc4>
  40b2e8:	3301      	adds	r3, #1
  40b2ea:	3210      	adds	r2, #16
  40b2ec:	2b07      	cmp	r3, #7
  40b2ee:	922d      	str	r2, [sp, #180]	; 0xb4
  40b2f0:	932c      	str	r3, [sp, #176]	; 0xb0
  40b2f2:	e886 00a0 	stmia.w	r6, {r5, r7}
  40b2f6:	ddf2      	ble.n	40b2de <_svfprintf_r+0x9a6>
  40b2f8:	4640      	mov	r0, r8
  40b2fa:	4651      	mov	r1, sl
  40b2fc:	aa2b      	add	r2, sp, #172	; 0xac
  40b2fe:	f006 fdab 	bl	411e58 <__ssprint_r>
  40b302:	2800      	cmp	r0, #0
  40b304:	f47f ac30 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b308:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40b30a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b30c:	ae38      	add	r6, sp, #224	; 0xe0
  40b30e:	e7e7      	b.n	40b2e0 <_svfprintf_r+0x9a8>
  40b310:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40b312:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40b314:	ebc0 0a05 	rsb	sl, r0, r5
  40b318:	f1ba 0f00 	cmp.w	sl, #0
  40b31c:	f77f ad2c 	ble.w	40ad78 <_svfprintf_r+0x440>
  40b320:	f1ba 0f10 	cmp.w	sl, #16
  40b324:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b326:	4d7f      	ldr	r5, [pc, #508]	; (40b524 <_svfprintf_r+0xbec>)
  40b328:	dd2b      	ble.n	40b382 <_svfprintf_r+0xa4a>
  40b32a:	9412      	str	r4, [sp, #72]	; 0x48
  40b32c:	4632      	mov	r2, r6
  40b32e:	f04f 0b10 	mov.w	fp, #16
  40b332:	462e      	mov	r6, r5
  40b334:	4661      	mov	r1, ip
  40b336:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40b338:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40b33a:	e006      	b.n	40b34a <_svfprintf_r+0xa12>
  40b33c:	f1aa 0a10 	sub.w	sl, sl, #16
  40b340:	f1ba 0f10 	cmp.w	sl, #16
  40b344:	f102 0208 	add.w	r2, r2, #8
  40b348:	dd17      	ble.n	40b37a <_svfprintf_r+0xa42>
  40b34a:	3301      	adds	r3, #1
  40b34c:	3110      	adds	r1, #16
  40b34e:	2b07      	cmp	r3, #7
  40b350:	912d      	str	r1, [sp, #180]	; 0xb4
  40b352:	932c      	str	r3, [sp, #176]	; 0xb0
  40b354:	e882 0840 	stmia.w	r2, {r6, fp}
  40b358:	ddf0      	ble.n	40b33c <_svfprintf_r+0xa04>
  40b35a:	4620      	mov	r0, r4
  40b35c:	4629      	mov	r1, r5
  40b35e:	aa2b      	add	r2, sp, #172	; 0xac
  40b360:	f006 fd7a 	bl	411e58 <__ssprint_r>
  40b364:	2800      	cmp	r0, #0
  40b366:	f47f abff 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b36a:	f1aa 0a10 	sub.w	sl, sl, #16
  40b36e:	f1ba 0f10 	cmp.w	sl, #16
  40b372:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40b374:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b376:	aa38      	add	r2, sp, #224	; 0xe0
  40b378:	dce7      	bgt.n	40b34a <_svfprintf_r+0xa12>
  40b37a:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40b37c:	4635      	mov	r5, r6
  40b37e:	468c      	mov	ip, r1
  40b380:	4616      	mov	r6, r2
  40b382:	3301      	adds	r3, #1
  40b384:	44d4      	add	ip, sl
  40b386:	2b07      	cmp	r3, #7
  40b388:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b38c:	932c      	str	r3, [sp, #176]	; 0xb0
  40b38e:	e886 0420 	stmia.w	r6, {r5, sl}
  40b392:	f300 8212 	bgt.w	40b7ba <_svfprintf_r+0xe82>
  40b396:	3608      	adds	r6, #8
  40b398:	e4ee      	b.n	40ad78 <_svfprintf_r+0x440>
  40b39a:	2d00      	cmp	r5, #0
  40b39c:	bf08      	it	eq
  40b39e:	2c0a      	cmpeq	r4, #10
  40b3a0:	f080 8138 	bcs.w	40b614 <_svfprintf_r+0xcdc>
  40b3a4:	af48      	add	r7, sp, #288	; 0x120
  40b3a6:	3430      	adds	r4, #48	; 0x30
  40b3a8:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40b3ac:	9d08      	ldr	r5, [sp, #32]
  40b3ae:	1bec      	subs	r4, r5, r7
  40b3b0:	e450      	b.n	40ac54 <_svfprintf_r+0x31c>
  40b3b2:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40b3b4:	2c01      	cmp	r4, #1
  40b3b6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40b3b8:	f340 81d5 	ble.w	40b766 <_svfprintf_r+0xe2e>
  40b3bc:	3401      	adds	r4, #1
  40b3be:	f10c 0301 	add.w	r3, ip, #1
  40b3c2:	2201      	movs	r2, #1
  40b3c4:	2c07      	cmp	r4, #7
  40b3c6:	6037      	str	r7, [r6, #0]
  40b3c8:	932d      	str	r3, [sp, #180]	; 0xb4
  40b3ca:	942c      	str	r4, [sp, #176]	; 0xb0
  40b3cc:	6072      	str	r2, [r6, #4]
  40b3ce:	f300 81db 	bgt.w	40b788 <_svfprintf_r+0xe50>
  40b3d2:	3608      	adds	r6, #8
  40b3d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  40b3d8:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40b3da:	6035      	str	r5, [r6, #0]
  40b3dc:	3401      	adds	r4, #1
  40b3de:	4498      	add	r8, r3
  40b3e0:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40b3e2:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40b3e6:	2c07      	cmp	r4, #7
  40b3e8:	942c      	str	r4, [sp, #176]	; 0xb0
  40b3ea:	6075      	str	r5, [r6, #4]
  40b3ec:	f300 81d8 	bgt.w	40b7a0 <_svfprintf_r+0xe68>
  40b3f0:	3608      	adds	r6, #8
  40b3f2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40b3f6:	2200      	movs	r2, #0
  40b3f8:	2300      	movs	r3, #0
  40b3fa:	f007 ffd5 	bl	4133a8 <__aeabi_dcmpeq>
  40b3fe:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40b400:	2800      	cmp	r0, #0
  40b402:	f040 80b9 	bne.w	40b578 <_svfprintf_r+0xc40>
  40b406:	1e6b      	subs	r3, r5, #1
  40b408:	3401      	adds	r4, #1
  40b40a:	3701      	adds	r7, #1
  40b40c:	4498      	add	r8, r3
  40b40e:	2c07      	cmp	r4, #7
  40b410:	942c      	str	r4, [sp, #176]	; 0xb0
  40b412:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40b416:	6037      	str	r7, [r6, #0]
  40b418:	6073      	str	r3, [r6, #4]
  40b41a:	f300 80e2 	bgt.w	40b5e2 <_svfprintf_r+0xcaa>
  40b41e:	3608      	adds	r6, #8
  40b420:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  40b424:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40b426:	3401      	adds	r4, #1
  40b428:	44c4      	add	ip, r8
  40b42a:	ab27      	add	r3, sp, #156	; 0x9c
  40b42c:	2c07      	cmp	r4, #7
  40b42e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b432:	942c      	str	r4, [sp, #176]	; 0xb0
  40b434:	e886 0028 	stmia.w	r6, {r3, r5}
  40b438:	f77f acef 	ble.w	40ae1a <_svfprintf_r+0x4e2>
  40b43c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b43e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b440:	aa2b      	add	r2, sp, #172	; 0xac
  40b442:	f006 fd09 	bl	411e58 <__ssprint_r>
  40b446:	2800      	cmp	r0, #0
  40b448:	f47f ab8e 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b44c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b450:	ae38      	add	r6, sp, #224	; 0xe0
  40b452:	e4e3      	b.n	40ae1c <_svfprintf_r+0x4e4>
  40b454:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b456:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b458:	aa2b      	add	r2, sp, #172	; 0xac
  40b45a:	f006 fcfd 	bl	411e58 <__ssprint_r>
  40b45e:	2800      	cmp	r0, #0
  40b460:	f43f ad35 	beq.w	40aece <_svfprintf_r+0x596>
  40b464:	f7ff bb80 	b.w	40ab68 <_svfprintf_r+0x230>
  40b468:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b46a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b46c:	aa2b      	add	r2, sp, #172	; 0xac
  40b46e:	f006 fcf3 	bl	411e58 <__ssprint_r>
  40b472:	2800      	cmp	r0, #0
  40b474:	f47f ab78 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b478:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b47c:	ae38      	add	r6, sp, #224	; 0xe0
  40b47e:	e4bd      	b.n	40adfc <_svfprintf_r+0x4c4>
  40b480:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b482:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b484:	aa2b      	add	r2, sp, #172	; 0xac
  40b486:	f006 fce7 	bl	411e58 <__ssprint_r>
  40b48a:	2800      	cmp	r0, #0
  40b48c:	f47f ab6c 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b490:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b494:	ae38      	add	r6, sp, #224	; 0xe0
  40b496:	e45a      	b.n	40ad4e <_svfprintf_r+0x416>
  40b498:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b49a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b49c:	aa2b      	add	r2, sp, #172	; 0xac
  40b49e:	f006 fcdb 	bl	411e58 <__ssprint_r>
  40b4a2:	2800      	cmp	r0, #0
  40b4a4:	f47f ab60 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b4a8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b4ac:	ae38      	add	r6, sp, #224	; 0xe0
  40b4ae:	e45f      	b.n	40ad70 <_svfprintf_r+0x438>
  40b4b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40b4b2:	af38      	add	r7, sp, #224	; 0xe0
  40b4b4:	f7ff bbce 	b.w	40ac54 <_svfprintf_r+0x31c>
  40b4b8:	2302      	movs	r3, #2
  40b4ba:	f7ff bba7 	b.w	40ac0c <_svfprintf_r+0x2d4>
  40b4be:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40b4c0:	2b00      	cmp	r3, #0
  40b4c2:	f340 81e7 	ble.w	40b894 <_svfprintf_r+0xf5c>
  40b4c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40b4c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40b4ca:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  40b4ce:	42ac      	cmp	r4, r5
  40b4d0:	bfa8      	it	ge
  40b4d2:	462c      	movge	r4, r5
  40b4d4:	2c00      	cmp	r4, #0
  40b4d6:	44ba      	add	sl, r7
  40b4d8:	dd0b      	ble.n	40b4f2 <_svfprintf_r+0xbba>
  40b4da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b4dc:	6037      	str	r7, [r6, #0]
  40b4de:	3301      	adds	r3, #1
  40b4e0:	44a4      	add	ip, r4
  40b4e2:	2b07      	cmp	r3, #7
  40b4e4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b4e8:	6074      	str	r4, [r6, #4]
  40b4ea:	932c      	str	r3, [sp, #176]	; 0xb0
  40b4ec:	f300 8328 	bgt.w	40bb40 <_svfprintf_r+0x1208>
  40b4f0:	3608      	adds	r6, #8
  40b4f2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40b4f4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  40b4f8:	1b2c      	subs	r4, r5, r4
  40b4fa:	2c00      	cmp	r4, #0
  40b4fc:	f340 80db 	ble.w	40b6b6 <_svfprintf_r+0xd7e>
  40b500:	2c10      	cmp	r4, #16
  40b502:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b504:	4d07      	ldr	r5, [pc, #28]	; (40b524 <_svfprintf_r+0xbec>)
  40b506:	f340 81ad 	ble.w	40b864 <_svfprintf_r+0xf2c>
  40b50a:	970a      	str	r7, [sp, #40]	; 0x28
  40b50c:	f04f 0810 	mov.w	r8, #16
  40b510:	462f      	mov	r7, r5
  40b512:	4662      	mov	r2, ip
  40b514:	4625      	mov	r5, r4
  40b516:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  40b51a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40b51c:	e009      	b.n	40b532 <_svfprintf_r+0xbfa>
  40b51e:	bf00      	nop
  40b520:	004136d8 	.word	0x004136d8
  40b524:	00413688 	.word	0x00413688
  40b528:	3608      	adds	r6, #8
  40b52a:	3d10      	subs	r5, #16
  40b52c:	2d10      	cmp	r5, #16
  40b52e:	f340 8195 	ble.w	40b85c <_svfprintf_r+0xf24>
  40b532:	3301      	adds	r3, #1
  40b534:	3210      	adds	r2, #16
  40b536:	2b07      	cmp	r3, #7
  40b538:	922d      	str	r2, [sp, #180]	; 0xb4
  40b53a:	932c      	str	r3, [sp, #176]	; 0xb0
  40b53c:	e886 0180 	stmia.w	r6, {r7, r8}
  40b540:	ddf2      	ble.n	40b528 <_svfprintf_r+0xbf0>
  40b542:	4658      	mov	r0, fp
  40b544:	4621      	mov	r1, r4
  40b546:	aa2b      	add	r2, sp, #172	; 0xac
  40b548:	f006 fc86 	bl	411e58 <__ssprint_r>
  40b54c:	2800      	cmp	r0, #0
  40b54e:	f47f ab0b 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b552:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40b554:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b556:	ae38      	add	r6, sp, #224	; 0xe0
  40b558:	e7e7      	b.n	40b52a <_svfprintf_r+0xbf2>
  40b55a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b55c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b55e:	aa2b      	add	r2, sp, #172	; 0xac
  40b560:	f006 fc7a 	bl	411e58 <__ssprint_r>
  40b564:	2800      	cmp	r0, #0
  40b566:	f47f aaff 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b56a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40b56e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b572:	ae38      	add	r6, sp, #224	; 0xe0
  40b574:	f7ff bbd8 	b.w	40ad28 <_svfprintf_r+0x3f0>
  40b578:	1e6f      	subs	r7, r5, #1
  40b57a:	2f00      	cmp	r7, #0
  40b57c:	f77f af50 	ble.w	40b420 <_svfprintf_r+0xae8>
  40b580:	2f10      	cmp	r7, #16
  40b582:	4db3      	ldr	r5, [pc, #716]	; (40b850 <_svfprintf_r+0xf18>)
  40b584:	dd23      	ble.n	40b5ce <_svfprintf_r+0xc96>
  40b586:	4643      	mov	r3, r8
  40b588:	f04f 0a10 	mov.w	sl, #16
  40b58c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40b590:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40b594:	e004      	b.n	40b5a0 <_svfprintf_r+0xc68>
  40b596:	3f10      	subs	r7, #16
  40b598:	2f10      	cmp	r7, #16
  40b59a:	f106 0608 	add.w	r6, r6, #8
  40b59e:	dd15      	ble.n	40b5cc <_svfprintf_r+0xc94>
  40b5a0:	3401      	adds	r4, #1
  40b5a2:	3310      	adds	r3, #16
  40b5a4:	2c07      	cmp	r4, #7
  40b5a6:	932d      	str	r3, [sp, #180]	; 0xb4
  40b5a8:	942c      	str	r4, [sp, #176]	; 0xb0
  40b5aa:	e886 0420 	stmia.w	r6, {r5, sl}
  40b5ae:	ddf2      	ble.n	40b596 <_svfprintf_r+0xc5e>
  40b5b0:	4640      	mov	r0, r8
  40b5b2:	4659      	mov	r1, fp
  40b5b4:	aa2b      	add	r2, sp, #172	; 0xac
  40b5b6:	f006 fc4f 	bl	411e58 <__ssprint_r>
  40b5ba:	2800      	cmp	r0, #0
  40b5bc:	f47f aad4 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b5c0:	3f10      	subs	r7, #16
  40b5c2:	2f10      	cmp	r7, #16
  40b5c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40b5c6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40b5c8:	ae38      	add	r6, sp, #224	; 0xe0
  40b5ca:	dce9      	bgt.n	40b5a0 <_svfprintf_r+0xc68>
  40b5cc:	4698      	mov	r8, r3
  40b5ce:	3401      	adds	r4, #1
  40b5d0:	44b8      	add	r8, r7
  40b5d2:	2c07      	cmp	r4, #7
  40b5d4:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40b5d8:	942c      	str	r4, [sp, #176]	; 0xb0
  40b5da:	e886 00a0 	stmia.w	r6, {r5, r7}
  40b5de:	f77f af1e 	ble.w	40b41e <_svfprintf_r+0xae6>
  40b5e2:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b5e4:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b5e6:	aa2b      	add	r2, sp, #172	; 0xac
  40b5e8:	f006 fc36 	bl	411e58 <__ssprint_r>
  40b5ec:	2800      	cmp	r0, #0
  40b5ee:	f47f aabb 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b5f2:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  40b5f6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40b5f8:	ae38      	add	r6, sp, #224	; 0xe0
  40b5fa:	e711      	b.n	40b420 <_svfprintf_r+0xae8>
  40b5fc:	4694      	mov	ip, r2
  40b5fe:	3301      	adds	r3, #1
  40b600:	44a4      	add	ip, r4
  40b602:	2b07      	cmp	r3, #7
  40b604:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b608:	932c      	str	r3, [sp, #176]	; 0xb0
  40b60a:	6035      	str	r5, [r6, #0]
  40b60c:	6074      	str	r4, [r6, #4]
  40b60e:	f77f ac04 	ble.w	40ae1a <_svfprintf_r+0x4e2>
  40b612:	e713      	b.n	40b43c <_svfprintf_r+0xb04>
  40b614:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  40b618:	4620      	mov	r0, r4
  40b61a:	4629      	mov	r1, r5
  40b61c:	220a      	movs	r2, #10
  40b61e:	2300      	movs	r3, #0
  40b620:	f7fe fbba 	bl	409d98 <__aeabi_uldivmod>
  40b624:	3230      	adds	r2, #48	; 0x30
  40b626:	f88b 2000 	strb.w	r2, [fp]
  40b62a:	4620      	mov	r0, r4
  40b62c:	4629      	mov	r1, r5
  40b62e:	220a      	movs	r2, #10
  40b630:	2300      	movs	r3, #0
  40b632:	f7fe fbb1 	bl	409d98 <__aeabi_uldivmod>
  40b636:	4604      	mov	r4, r0
  40b638:	460d      	mov	r5, r1
  40b63a:	ea54 0c05 	orrs.w	ip, r4, r5
  40b63e:	465f      	mov	r7, fp
  40b640:	f10b 3bff 	add.w	fp, fp, #4294967295
  40b644:	d1e8      	bne.n	40b618 <_svfprintf_r+0xce0>
  40b646:	9d08      	ldr	r5, [sp, #32]
  40b648:	1bec      	subs	r4, r5, r7
  40b64a:	f7ff bb03 	b.w	40ac54 <_svfprintf_r+0x31c>
  40b64e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b650:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40b654:	682c      	ldr	r4, [r5, #0]
  40b656:	17e5      	asrs	r5, r4, #31
  40b658:	4622      	mov	r2, r4
  40b65a:	462b      	mov	r3, r5
  40b65c:	f10c 0c04 	add.w	ip, ip, #4
  40b660:	2a00      	cmp	r2, #0
  40b662:	f173 0000 	sbcs.w	r0, r3, #0
  40b666:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40b66a:	f6bf ac75 	bge.w	40af58 <_svfprintf_r+0x620>
  40b66e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40b672:	4264      	negs	r4, r4
  40b674:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40b678:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40b67c:	2301      	movs	r3, #1
  40b67e:	f7ff bac9 	b.w	40ac14 <_svfprintf_r+0x2dc>
  40b682:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b684:	682c      	ldr	r4, [r5, #0]
  40b686:	3504      	adds	r5, #4
  40b688:	9510      	str	r5, [sp, #64]	; 0x40
  40b68a:	2500      	movs	r5, #0
  40b68c:	f7ff babe 	b.w	40ac0c <_svfprintf_r+0x2d4>
  40b690:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b692:	682c      	ldr	r4, [r5, #0]
  40b694:	3504      	adds	r5, #4
  40b696:	9510      	str	r5, [sp, #64]	; 0x40
  40b698:	2301      	movs	r3, #1
  40b69a:	2500      	movs	r5, #0
  40b69c:	f7ff bab6 	b.w	40ac0c <_svfprintf_r+0x2d4>
  40b6a0:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b6a2:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b6a4:	aa2b      	add	r2, sp, #172	; 0xac
  40b6a6:	f006 fbd7 	bl	411e58 <__ssprint_r>
  40b6aa:	2800      	cmp	r0, #0
  40b6ac:	f47f aa5c 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b6b0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b6b4:	ae38      	add	r6, sp, #224	; 0xe0
  40b6b6:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40b6b8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40b6ba:	442f      	add	r7, r5
  40b6bc:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40b6be:	42ac      	cmp	r4, r5
  40b6c0:	db42      	blt.n	40b748 <_svfprintf_r+0xe10>
  40b6c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40b6c4:	07e9      	lsls	r1, r5, #31
  40b6c6:	d43f      	bmi.n	40b748 <_svfprintf_r+0xe10>
  40b6c8:	9811      	ldr	r0, [sp, #68]	; 0x44
  40b6ca:	ebc7 050a 	rsb	r5, r7, sl
  40b6ce:	1b04      	subs	r4, r0, r4
  40b6d0:	42ac      	cmp	r4, r5
  40b6d2:	bfb8      	it	lt
  40b6d4:	4625      	movlt	r5, r4
  40b6d6:	2d00      	cmp	r5, #0
  40b6d8:	dd0b      	ble.n	40b6f2 <_svfprintf_r+0xdba>
  40b6da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b6dc:	6037      	str	r7, [r6, #0]
  40b6de:	3301      	adds	r3, #1
  40b6e0:	44ac      	add	ip, r5
  40b6e2:	2b07      	cmp	r3, #7
  40b6e4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b6e8:	6075      	str	r5, [r6, #4]
  40b6ea:	932c      	str	r3, [sp, #176]	; 0xb0
  40b6ec:	f300 8252 	bgt.w	40bb94 <_svfprintf_r+0x125c>
  40b6f0:	3608      	adds	r6, #8
  40b6f2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  40b6f6:	1b64      	subs	r4, r4, r5
  40b6f8:	2c00      	cmp	r4, #0
  40b6fa:	f77f ab8f 	ble.w	40ae1c <_svfprintf_r+0x4e4>
  40b6fe:	2c10      	cmp	r4, #16
  40b700:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b702:	4d53      	ldr	r5, [pc, #332]	; (40b850 <_svfprintf_r+0xf18>)
  40b704:	f77f af7b 	ble.w	40b5fe <_svfprintf_r+0xcc6>
  40b708:	2710      	movs	r7, #16
  40b70a:	4662      	mov	r2, ip
  40b70c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40b710:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40b714:	e004      	b.n	40b720 <_svfprintf_r+0xde8>
  40b716:	3608      	adds	r6, #8
  40b718:	3c10      	subs	r4, #16
  40b71a:	2c10      	cmp	r4, #16
  40b71c:	f77f af6e 	ble.w	40b5fc <_svfprintf_r+0xcc4>
  40b720:	3301      	adds	r3, #1
  40b722:	3210      	adds	r2, #16
  40b724:	2b07      	cmp	r3, #7
  40b726:	922d      	str	r2, [sp, #180]	; 0xb4
  40b728:	932c      	str	r3, [sp, #176]	; 0xb0
  40b72a:	e886 00a0 	stmia.w	r6, {r5, r7}
  40b72e:	ddf2      	ble.n	40b716 <_svfprintf_r+0xdde>
  40b730:	4640      	mov	r0, r8
  40b732:	4651      	mov	r1, sl
  40b734:	aa2b      	add	r2, sp, #172	; 0xac
  40b736:	f006 fb8f 	bl	411e58 <__ssprint_r>
  40b73a:	2800      	cmp	r0, #0
  40b73c:	f47f aa14 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b740:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40b742:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b744:	ae38      	add	r6, sp, #224	; 0xe0
  40b746:	e7e7      	b.n	40b718 <_svfprintf_r+0xde0>
  40b748:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b74a:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40b74c:	6035      	str	r5, [r6, #0]
  40b74e:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40b750:	6075      	str	r5, [r6, #4]
  40b752:	3301      	adds	r3, #1
  40b754:	44ac      	add	ip, r5
  40b756:	2b07      	cmp	r3, #7
  40b758:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b75c:	932c      	str	r3, [sp, #176]	; 0xb0
  40b75e:	f300 81fb 	bgt.w	40bb58 <_svfprintf_r+0x1220>
  40b762:	3608      	adds	r6, #8
  40b764:	e7b0      	b.n	40b6c8 <_svfprintf_r+0xd90>
  40b766:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40b768:	07ea      	lsls	r2, r5, #31
  40b76a:	f53f ae27 	bmi.w	40b3bc <_svfprintf_r+0xa84>
  40b76e:	3401      	adds	r4, #1
  40b770:	f10c 0801 	add.w	r8, ip, #1
  40b774:	2301      	movs	r3, #1
  40b776:	2c07      	cmp	r4, #7
  40b778:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40b77c:	942c      	str	r4, [sp, #176]	; 0xb0
  40b77e:	6037      	str	r7, [r6, #0]
  40b780:	6073      	str	r3, [r6, #4]
  40b782:	f77f ae4c 	ble.w	40b41e <_svfprintf_r+0xae6>
  40b786:	e72c      	b.n	40b5e2 <_svfprintf_r+0xcaa>
  40b788:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b78a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b78c:	aa2b      	add	r2, sp, #172	; 0xac
  40b78e:	f006 fb63 	bl	411e58 <__ssprint_r>
  40b792:	2800      	cmp	r0, #0
  40b794:	f47f a9e8 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b798:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40b79a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40b79c:	ae38      	add	r6, sp, #224	; 0xe0
  40b79e:	e619      	b.n	40b3d4 <_svfprintf_r+0xa9c>
  40b7a0:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b7a2:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b7a4:	aa2b      	add	r2, sp, #172	; 0xac
  40b7a6:	f006 fb57 	bl	411e58 <__ssprint_r>
  40b7aa:	2800      	cmp	r0, #0
  40b7ac:	f47f a9dc 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b7b0:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  40b7b4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40b7b6:	ae38      	add	r6, sp, #224	; 0xe0
  40b7b8:	e61b      	b.n	40b3f2 <_svfprintf_r+0xaba>
  40b7ba:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b7bc:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b7be:	aa2b      	add	r2, sp, #172	; 0xac
  40b7c0:	f006 fb4a 	bl	411e58 <__ssprint_r>
  40b7c4:	2800      	cmp	r0, #0
  40b7c6:	f47f a9cf 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b7ca:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b7ce:	ae38      	add	r6, sp, #224	; 0xe0
  40b7d0:	f7ff bad2 	b.w	40ad78 <_svfprintf_r+0x440>
  40b7d4:	f005 f85a 	bl	41088c <__fpclassifyd>
  40b7d8:	2800      	cmp	r0, #0
  40b7da:	f040 80c2 	bne.w	40b962 <_svfprintf_r+0x102a>
  40b7de:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40b7e0:	4f1c      	ldr	r7, [pc, #112]	; (40b854 <_svfprintf_r+0xf1c>)
  40b7e2:	4b1d      	ldr	r3, [pc, #116]	; (40b858 <_svfprintf_r+0xf20>)
  40b7e4:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40b7e8:	900a      	str	r0, [sp, #40]	; 0x28
  40b7ea:	f04f 0c03 	mov.w	ip, #3
  40b7ee:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40b7f2:	9409      	str	r4, [sp, #36]	; 0x24
  40b7f4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40b7f8:	9014      	str	r0, [sp, #80]	; 0x50
  40b7fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40b7fe:	bfd8      	it	le
  40b800:	461f      	movle	r7, r3
  40b802:	4664      	mov	r4, ip
  40b804:	f7ff ba2f 	b.w	40ac66 <_svfprintf_r+0x32e>
  40b808:	e9d3 4500 	ldrd	r4, r5, [r3]
  40b80c:	3308      	adds	r3, #8
  40b80e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  40b812:	9310      	str	r3, [sp, #64]	; 0x40
  40b814:	e476      	b.n	40b104 <_svfprintf_r+0x7cc>
  40b816:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b81a:	f01c 0f10 	tst.w	ip, #16
  40b81e:	f000 8155 	beq.w	40bacc <_svfprintf_r+0x1194>
  40b822:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40b824:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40b826:	6823      	ldr	r3, [r4, #0]
  40b828:	3404      	adds	r4, #4
  40b82a:	9410      	str	r4, [sp, #64]	; 0x40
  40b82c:	601d      	str	r5, [r3, #0]
  40b82e:	f7ff b8a9 	b.w	40a984 <_svfprintf_r+0x4c>
  40b832:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40b834:	0664      	lsls	r4, r4, #25
  40b836:	f140 8142 	bpl.w	40babe <_svfprintf_r+0x1186>
  40b83a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40b83e:	f8bc 4000 	ldrh.w	r4, [ip]
  40b842:	f10c 0c04 	add.w	ip, ip, #4
  40b846:	2500      	movs	r5, #0
  40b848:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40b84c:	f7ff b9ca 	b.w	40abe4 <_svfprintf_r+0x2ac>
  40b850:	00413688 	.word	0x00413688
  40b854:	004136a4 	.word	0x004136a4
  40b858:	004136a0 	.word	0x004136a0
  40b85c:	462c      	mov	r4, r5
  40b85e:	463d      	mov	r5, r7
  40b860:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b862:	4694      	mov	ip, r2
  40b864:	3301      	adds	r3, #1
  40b866:	44a4      	add	ip, r4
  40b868:	2b07      	cmp	r3, #7
  40b86a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b86e:	932c      	str	r3, [sp, #176]	; 0xb0
  40b870:	6035      	str	r5, [r6, #0]
  40b872:	6074      	str	r4, [r6, #4]
  40b874:	f73f af14 	bgt.w	40b6a0 <_svfprintf_r+0xd68>
  40b878:	3608      	adds	r6, #8
  40b87a:	e71c      	b.n	40b6b6 <_svfprintf_r+0xd7e>
  40b87c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b87e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b880:	aa2b      	add	r2, sp, #172	; 0xac
  40b882:	f006 fae9 	bl	411e58 <__ssprint_r>
  40b886:	2800      	cmp	r0, #0
  40b888:	f47f a96e 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b88c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b890:	ae38      	add	r6, sp, #224	; 0xe0
  40b892:	e4fd      	b.n	40b290 <_svfprintf_r+0x958>
  40b894:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40b896:	49b7      	ldr	r1, [pc, #732]	; (40bb74 <_svfprintf_r+0x123c>)
  40b898:	6031      	str	r1, [r6, #0]
  40b89a:	3201      	adds	r2, #1
  40b89c:	f10c 0c01 	add.w	ip, ip, #1
  40b8a0:	2101      	movs	r1, #1
  40b8a2:	2a07      	cmp	r2, #7
  40b8a4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40b8a8:	922c      	str	r2, [sp, #176]	; 0xb0
  40b8aa:	6071      	str	r1, [r6, #4]
  40b8ac:	f300 80f7 	bgt.w	40ba9e <_svfprintf_r+0x1166>
  40b8b0:	3608      	adds	r6, #8
  40b8b2:	461c      	mov	r4, r3
  40b8b4:	b92c      	cbnz	r4, 40b8c2 <_svfprintf_r+0xf8a>
  40b8b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40b8b8:	b91d      	cbnz	r5, 40b8c2 <_svfprintf_r+0xf8a>
  40b8ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40b8bc:	07e8      	lsls	r0, r5, #31
  40b8be:	f57f aaad 	bpl.w	40ae1c <_svfprintf_r+0x4e4>
  40b8c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b8c4:	9918      	ldr	r1, [sp, #96]	; 0x60
  40b8c6:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40b8c8:	6035      	str	r5, [r6, #0]
  40b8ca:	3301      	adds	r3, #1
  40b8cc:	4461      	add	r1, ip
  40b8ce:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40b8d0:	912d      	str	r1, [sp, #180]	; 0xb4
  40b8d2:	2b07      	cmp	r3, #7
  40b8d4:	6075      	str	r5, [r6, #4]
  40b8d6:	932c      	str	r3, [sp, #176]	; 0xb0
  40b8d8:	f300 81de 	bgt.w	40bc98 <_svfprintf_r+0x1360>
  40b8dc:	f106 0208 	add.w	r2, r6, #8
  40b8e0:	4264      	negs	r4, r4
  40b8e2:	2c00      	cmp	r4, #0
  40b8e4:	f340 810b 	ble.w	40bafe <_svfprintf_r+0x11c6>
  40b8e8:	2c10      	cmp	r4, #16
  40b8ea:	4da3      	ldr	r5, [pc, #652]	; (40bb78 <_svfprintf_r+0x1240>)
  40b8ec:	f340 8148 	ble.w	40bb80 <_svfprintf_r+0x1248>
  40b8f0:	46a3      	mov	fp, r4
  40b8f2:	2610      	movs	r6, #16
  40b8f4:	460c      	mov	r4, r1
  40b8f6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40b8fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  40b8fe:	e006      	b.n	40b90e <_svfprintf_r+0xfd6>
  40b900:	3208      	adds	r2, #8
  40b902:	f1ab 0b10 	sub.w	fp, fp, #16
  40b906:	f1bb 0f10 	cmp.w	fp, #16
  40b90a:	f340 8137 	ble.w	40bb7c <_svfprintf_r+0x1244>
  40b90e:	3301      	adds	r3, #1
  40b910:	3410      	adds	r4, #16
  40b912:	2b07      	cmp	r3, #7
  40b914:	942d      	str	r4, [sp, #180]	; 0xb4
  40b916:	932c      	str	r3, [sp, #176]	; 0xb0
  40b918:	e882 0060 	stmia.w	r2, {r5, r6}
  40b91c:	ddf0      	ble.n	40b900 <_svfprintf_r+0xfc8>
  40b91e:	4640      	mov	r0, r8
  40b920:	4651      	mov	r1, sl
  40b922:	aa2b      	add	r2, sp, #172	; 0xac
  40b924:	f006 fa98 	bl	411e58 <__ssprint_r>
  40b928:	2800      	cmp	r0, #0
  40b92a:	f47f a91d 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b92e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
  40b930:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40b932:	aa38      	add	r2, sp, #224	; 0xe0
  40b934:	e7e5      	b.n	40b902 <_svfprintf_r+0xfca>
  40b936:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40b938:	f893 8001 	ldrb.w	r8, [r3, #1]
  40b93c:	f044 0420 	orr.w	r4, r4, #32
  40b940:	f109 0901 	add.w	r9, r9, #1
  40b944:	9409      	str	r4, [sp, #36]	; 0x24
  40b946:	f7ff b853 	b.w	40a9f0 <_svfprintf_r+0xb8>
  40b94a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b94c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b94e:	aa2b      	add	r2, sp, #172	; 0xac
  40b950:	f006 fa82 	bl	411e58 <__ssprint_r>
  40b954:	2800      	cmp	r0, #0
  40b956:	f47f a907 	bne.w	40ab68 <_svfprintf_r+0x230>
  40b95a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40b95e:	ae38      	add	r6, sp, #224	; 0xe0
  40b960:	e4ac      	b.n	40b2bc <_svfprintf_r+0x984>
  40b962:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40b964:	3501      	adds	r5, #1
  40b966:	f028 0a20 	bic.w	sl, r8, #32
  40b96a:	f000 80a5 	beq.w	40bab8 <_svfprintf_r+0x1180>
  40b96e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40b972:	d104      	bne.n	40b97e <_svfprintf_r+0x1046>
  40b974:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40b976:	2d00      	cmp	r5, #0
  40b978:	bf08      	it	eq
  40b97a:	2501      	moveq	r5, #1
  40b97c:	950a      	str	r5, [sp, #40]	; 0x28
  40b97e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40b982:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b986:	2b00      	cmp	r3, #0
  40b988:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  40b98c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40b990:	f2c0 819c 	blt.w	40bccc <_svfprintf_r+0x1394>
  40b994:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  40b998:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  40b99c:	f04f 0b00 	mov.w	fp, #0
  40b9a0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40b9a4:	f000 819b 	beq.w	40bcde <_svfprintf_r+0x13a6>
  40b9a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  40b9ac:	f000 81a9 	beq.w	40bd02 <_svfprintf_r+0x13ca>
  40b9b0:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  40b9b4:	bf0a      	itet	eq
  40b9b6:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
  40b9b8:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40b9ba:	1c65      	addeq	r5, r4, #1
  40b9bc:	2002      	movs	r0, #2
  40b9be:	a925      	add	r1, sp, #148	; 0x94
  40b9c0:	aa26      	add	r2, sp, #152	; 0x98
  40b9c2:	ab29      	add	r3, sp, #164	; 0xa4
  40b9c4:	e88d 0021 	stmia.w	sp, {r0, r5}
  40b9c8:	9203      	str	r2, [sp, #12]
  40b9ca:	9304      	str	r3, [sp, #16]
  40b9cc:	9102      	str	r1, [sp, #8]
  40b9ce:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b9d0:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  40b9d4:	f002 f93c 	bl	40dc50 <_dtoa_r>
  40b9d8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  40b9dc:	4607      	mov	r7, r0
  40b9de:	d002      	beq.n	40b9e6 <_svfprintf_r+0x10ae>
  40b9e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40b9e4:	d105      	bne.n	40b9f2 <_svfprintf_r+0x10ba>
  40b9e6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40b9ea:	f01c 0f01 	tst.w	ip, #1
  40b9ee:	f000 819c 	beq.w	40bd2a <_svfprintf_r+0x13f2>
  40b9f2:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  40b9f6:	eb07 0405 	add.w	r4, r7, r5
  40b9fa:	f000 811c 	beq.w	40bc36 <_svfprintf_r+0x12fe>
  40b9fe:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  40ba02:	2200      	movs	r2, #0
  40ba04:	2300      	movs	r3, #0
  40ba06:	f007 fccf 	bl	4133a8 <__aeabi_dcmpeq>
  40ba0a:	2800      	cmp	r0, #0
  40ba0c:	f040 8105 	bne.w	40bc1a <_svfprintf_r+0x12e2>
  40ba10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40ba12:	429c      	cmp	r4, r3
  40ba14:	d906      	bls.n	40ba24 <_svfprintf_r+0x10ec>
  40ba16:	2130      	movs	r1, #48	; 0x30
  40ba18:	1c5a      	adds	r2, r3, #1
  40ba1a:	9229      	str	r2, [sp, #164]	; 0xa4
  40ba1c:	7019      	strb	r1, [r3, #0]
  40ba1e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40ba20:	429c      	cmp	r4, r3
  40ba22:	d8f9      	bhi.n	40ba18 <_svfprintf_r+0x10e0>
  40ba24:	1bdb      	subs	r3, r3, r7
  40ba26:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40ba2a:	9311      	str	r3, [sp, #68]	; 0x44
  40ba2c:	f000 80ed 	beq.w	40bc0a <_svfprintf_r+0x12d2>
  40ba30:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40ba34:	f340 81f2 	ble.w	40be1c <_svfprintf_r+0x14e4>
  40ba38:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40ba3c:	f000 8168 	beq.w	40bd10 <_svfprintf_r+0x13d8>
  40ba40:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ba42:	9414      	str	r4, [sp, #80]	; 0x50
  40ba44:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40ba46:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40ba48:	42ac      	cmp	r4, r5
  40ba4a:	f300 8132 	bgt.w	40bcb2 <_svfprintf_r+0x137a>
  40ba4e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ba52:	f01c 0f01 	tst.w	ip, #1
  40ba56:	f040 81ad 	bne.w	40bdb4 <_svfprintf_r+0x147c>
  40ba5a:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  40ba5e:	462c      	mov	r4, r5
  40ba60:	f04f 0867 	mov.w	r8, #103	; 0x67
  40ba64:	f1bb 0f00 	cmp.w	fp, #0
  40ba68:	f040 80b2 	bne.w	40bbd0 <_svfprintf_r+0x1298>
  40ba6c:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40ba6e:	930b      	str	r3, [sp, #44]	; 0x2c
  40ba70:	9509      	str	r5, [sp, #36]	; 0x24
  40ba72:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  40ba76:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40ba7a:	f7ff b8f4 	b.w	40ac66 <_svfprintf_r+0x32e>
  40ba7e:	980d      	ldr	r0, [sp, #52]	; 0x34
  40ba80:	2140      	movs	r1, #64	; 0x40
  40ba82:	f003 fd31 	bl	40f4e8 <_malloc_r>
  40ba86:	6020      	str	r0, [r4, #0]
  40ba88:	6120      	str	r0, [r4, #16]
  40ba8a:	2800      	cmp	r0, #0
  40ba8c:	f000 81bf 	beq.w	40be0e <_svfprintf_r+0x14d6>
  40ba90:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  40ba94:	2340      	movs	r3, #64	; 0x40
  40ba96:	f8cc 3014 	str.w	r3, [ip, #20]
  40ba9a:	f7fe bf63 	b.w	40a964 <_svfprintf_r+0x2c>
  40ba9e:	980d      	ldr	r0, [sp, #52]	; 0x34
  40baa0:	990c      	ldr	r1, [sp, #48]	; 0x30
  40baa2:	aa2b      	add	r2, sp, #172	; 0xac
  40baa4:	f006 f9d8 	bl	411e58 <__ssprint_r>
  40baa8:	2800      	cmp	r0, #0
  40baaa:	f47f a85d 	bne.w	40ab68 <_svfprintf_r+0x230>
  40baae:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40bab0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40bab4:	ae38      	add	r6, sp, #224	; 0xe0
  40bab6:	e6fd      	b.n	40b8b4 <_svfprintf_r+0xf7c>
  40bab8:	2406      	movs	r4, #6
  40baba:	940a      	str	r4, [sp, #40]	; 0x28
  40babc:	e75f      	b.n	40b97e <_svfprintf_r+0x1046>
  40babe:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40bac0:	682c      	ldr	r4, [r5, #0]
  40bac2:	3504      	adds	r5, #4
  40bac4:	9510      	str	r5, [sp, #64]	; 0x40
  40bac6:	2500      	movs	r5, #0
  40bac8:	f7ff b88c 	b.w	40abe4 <_svfprintf_r+0x2ac>
  40bacc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40bad0:	f01c 0f40 	tst.w	ip, #64	; 0x40
  40bad4:	f000 8087 	beq.w	40bbe6 <_svfprintf_r+0x12ae>
  40bad8:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40bada:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40badc:	6823      	ldr	r3, [r4, #0]
  40bade:	3404      	adds	r4, #4
  40bae0:	9410      	str	r4, [sp, #64]	; 0x40
  40bae2:	801d      	strh	r5, [r3, #0]
  40bae4:	f7fe bf4e 	b.w	40a984 <_svfprintf_r+0x4c>
  40bae8:	980d      	ldr	r0, [sp, #52]	; 0x34
  40baea:	990c      	ldr	r1, [sp, #48]	; 0x30
  40baec:	aa2b      	add	r2, sp, #172	; 0xac
  40baee:	f006 f9b3 	bl	411e58 <__ssprint_r>
  40baf2:	2800      	cmp	r0, #0
  40baf4:	f47f a838 	bne.w	40ab68 <_svfprintf_r+0x230>
  40baf8:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40bafa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40bafc:	aa38      	add	r2, sp, #224	; 0xe0
  40bafe:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  40bb02:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40bb04:	6017      	str	r7, [r2, #0]
  40bb06:	3301      	adds	r3, #1
  40bb08:	448c      	add	ip, r1
  40bb0a:	2b07      	cmp	r3, #7
  40bb0c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40bb10:	932c      	str	r3, [sp, #176]	; 0xb0
  40bb12:	6054      	str	r4, [r2, #4]
  40bb14:	f73f ac92 	bgt.w	40b43c <_svfprintf_r+0xb04>
  40bb18:	f102 0608 	add.w	r6, r2, #8
  40bb1c:	f7ff b97e 	b.w	40ae1c <_svfprintf_r+0x4e4>
  40bb20:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40bb24:	f7fe fe4c 	bl	40a7c0 <strlen>
  40bb28:	9510      	str	r5, [sp, #64]	; 0x40
  40bb2a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  40bb2e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40bb30:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40bb34:	4604      	mov	r4, r0
  40bb36:	9514      	str	r5, [sp, #80]	; 0x50
  40bb38:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40bb3c:	f7ff b893 	b.w	40ac66 <_svfprintf_r+0x32e>
  40bb40:	980d      	ldr	r0, [sp, #52]	; 0x34
  40bb42:	990c      	ldr	r1, [sp, #48]	; 0x30
  40bb44:	aa2b      	add	r2, sp, #172	; 0xac
  40bb46:	f006 f987 	bl	411e58 <__ssprint_r>
  40bb4a:	2800      	cmp	r0, #0
  40bb4c:	f47f a80c 	bne.w	40ab68 <_svfprintf_r+0x230>
  40bb50:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40bb54:	ae38      	add	r6, sp, #224	; 0xe0
  40bb56:	e4cc      	b.n	40b4f2 <_svfprintf_r+0xbba>
  40bb58:	980d      	ldr	r0, [sp, #52]	; 0x34
  40bb5a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40bb5c:	aa2b      	add	r2, sp, #172	; 0xac
  40bb5e:	f006 f97b 	bl	411e58 <__ssprint_r>
  40bb62:	2800      	cmp	r0, #0
  40bb64:	f47f a800 	bne.w	40ab68 <_svfprintf_r+0x230>
  40bb68:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40bb6a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40bb6e:	ae38      	add	r6, sp, #224	; 0xe0
  40bb70:	e5aa      	b.n	40b6c8 <_svfprintf_r+0xd90>
  40bb72:	bf00      	nop
  40bb74:	004136d8 	.word	0x004136d8
  40bb78:	00413688 	.word	0x00413688
  40bb7c:	4621      	mov	r1, r4
  40bb7e:	465c      	mov	r4, fp
  40bb80:	3301      	adds	r3, #1
  40bb82:	4421      	add	r1, r4
  40bb84:	2b07      	cmp	r3, #7
  40bb86:	912d      	str	r1, [sp, #180]	; 0xb4
  40bb88:	932c      	str	r3, [sp, #176]	; 0xb0
  40bb8a:	6015      	str	r5, [r2, #0]
  40bb8c:	6054      	str	r4, [r2, #4]
  40bb8e:	dcab      	bgt.n	40bae8 <_svfprintf_r+0x11b0>
  40bb90:	3208      	adds	r2, #8
  40bb92:	e7b4      	b.n	40bafe <_svfprintf_r+0x11c6>
  40bb94:	980d      	ldr	r0, [sp, #52]	; 0x34
  40bb96:	990c      	ldr	r1, [sp, #48]	; 0x30
  40bb98:	aa2b      	add	r2, sp, #172	; 0xac
  40bb9a:	f006 f95d 	bl	411e58 <__ssprint_r>
  40bb9e:	2800      	cmp	r0, #0
  40bba0:	f47e afe2 	bne.w	40ab68 <_svfprintf_r+0x230>
  40bba4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40bba6:	9911      	ldr	r1, [sp, #68]	; 0x44
  40bba8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40bbac:	1b0c      	subs	r4, r1, r4
  40bbae:	ae38      	add	r6, sp, #224	; 0xe0
  40bbb0:	e59f      	b.n	40b6f2 <_svfprintf_r+0xdba>
  40bbb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40bbb4:	9714      	str	r7, [sp, #80]	; 0x50
  40bbb6:	2c06      	cmp	r4, #6
  40bbb8:	bf28      	it	cs
  40bbba:	2406      	movcs	r4, #6
  40bbbc:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40bbc0:	46ba      	mov	sl, r7
  40bbc2:	970a      	str	r7, [sp, #40]	; 0x28
  40bbc4:	9510      	str	r5, [sp, #64]	; 0x40
  40bbc6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40bbca:	4f97      	ldr	r7, [pc, #604]	; (40be28 <_svfprintf_r+0x14f0>)
  40bbcc:	f7ff b84b 	b.w	40ac66 <_svfprintf_r+0x32e>
  40bbd0:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40bbd2:	9509      	str	r5, [sp, #36]	; 0x24
  40bbd4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40bbd8:	2500      	movs	r5, #0
  40bbda:	930b      	str	r3, [sp, #44]	; 0x2c
  40bbdc:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40bbe0:	950a      	str	r5, [sp, #40]	; 0x28
  40bbe2:	f7ff b843 	b.w	40ac6c <_svfprintf_r+0x334>
  40bbe6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40bbea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40bbec:	f8dc 3000 	ldr.w	r3, [ip]
  40bbf0:	f10c 0c04 	add.w	ip, ip, #4
  40bbf4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40bbf8:	601c      	str	r4, [r3, #0]
  40bbfa:	f7fe bec3 	b.w	40a984 <_svfprintf_r+0x4c>
  40bbfe:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40bc02:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40bc06:	f7ff ba8f 	b.w	40b128 <_svfprintf_r+0x7f0>
  40bc0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40bc0c:	1cdc      	adds	r4, r3, #3
  40bc0e:	db19      	blt.n	40bc44 <_svfprintf_r+0x130c>
  40bc10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40bc12:	429c      	cmp	r4, r3
  40bc14:	db16      	blt.n	40bc44 <_svfprintf_r+0x130c>
  40bc16:	9314      	str	r3, [sp, #80]	; 0x50
  40bc18:	e714      	b.n	40ba44 <_svfprintf_r+0x110c>
  40bc1a:	4623      	mov	r3, r4
  40bc1c:	e702      	b.n	40ba24 <_svfprintf_r+0x10ec>
  40bc1e:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40bc22:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40bc26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40bc28:	9510      	str	r5, [sp, #64]	; 0x40
  40bc2a:	900a      	str	r0, [sp, #40]	; 0x28
  40bc2c:	9014      	str	r0, [sp, #80]	; 0x50
  40bc2e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40bc32:	f7ff b818 	b.w	40ac66 <_svfprintf_r+0x32e>
  40bc36:	783b      	ldrb	r3, [r7, #0]
  40bc38:	2b30      	cmp	r3, #48	; 0x30
  40bc3a:	f000 80ad 	beq.w	40bd98 <_svfprintf_r+0x1460>
  40bc3e:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40bc40:	442c      	add	r4, r5
  40bc42:	e6dc      	b.n	40b9fe <_svfprintf_r+0x10c6>
  40bc44:	f1a8 0802 	sub.w	r8, r8, #2
  40bc48:	3b01      	subs	r3, #1
  40bc4a:	2b00      	cmp	r3, #0
  40bc4c:	9325      	str	r3, [sp, #148]	; 0x94
  40bc4e:	bfba      	itte	lt
  40bc50:	425b      	neglt	r3, r3
  40bc52:	222d      	movlt	r2, #45	; 0x2d
  40bc54:	222b      	movge	r2, #43	; 0x2b
  40bc56:	2b09      	cmp	r3, #9
  40bc58:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  40bc5c:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  40bc60:	dc65      	bgt.n	40bd2e <_svfprintf_r+0x13f6>
  40bc62:	3330      	adds	r3, #48	; 0x30
  40bc64:	2230      	movs	r2, #48	; 0x30
  40bc66:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  40bc6a:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  40bc6e:	ab28      	add	r3, sp, #160	; 0xa0
  40bc70:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40bc72:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40bc74:	aa27      	add	r2, sp, #156	; 0x9c
  40bc76:	1a9a      	subs	r2, r3, r2
  40bc78:	2d01      	cmp	r5, #1
  40bc7a:	9219      	str	r2, [sp, #100]	; 0x64
  40bc7c:	4414      	add	r4, r2
  40bc7e:	f340 80b7 	ble.w	40bdf0 <_svfprintf_r+0x14b8>
  40bc82:	3401      	adds	r4, #1
  40bc84:	2500      	movs	r5, #0
  40bc86:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40bc8a:	9514      	str	r5, [sp, #80]	; 0x50
  40bc8c:	e6ea      	b.n	40ba64 <_svfprintf_r+0x112c>
  40bc8e:	2400      	movs	r4, #0
  40bc90:	4681      	mov	r9, r0
  40bc92:	940a      	str	r4, [sp, #40]	; 0x28
  40bc94:	f7fe beae 	b.w	40a9f4 <_svfprintf_r+0xbc>
  40bc98:	980d      	ldr	r0, [sp, #52]	; 0x34
  40bc9a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40bc9c:	aa2b      	add	r2, sp, #172	; 0xac
  40bc9e:	f006 f8db 	bl	411e58 <__ssprint_r>
  40bca2:	2800      	cmp	r0, #0
  40bca4:	f47e af60 	bne.w	40ab68 <_svfprintf_r+0x230>
  40bca8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40bcaa:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40bcac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40bcae:	aa38      	add	r2, sp, #224	; 0xe0
  40bcb0:	e616      	b.n	40b8e0 <_svfprintf_r+0xfa8>
  40bcb2:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40bcb4:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40bcb6:	2c00      	cmp	r4, #0
  40bcb8:	bfd4      	ite	le
  40bcba:	f1c4 0402 	rsble	r4, r4, #2
  40bcbe:	2401      	movgt	r4, #1
  40bcc0:	442c      	add	r4, r5
  40bcc2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40bcc6:	f04f 0867 	mov.w	r8, #103	; 0x67
  40bcca:	e6cb      	b.n	40ba64 <_svfprintf_r+0x112c>
  40bccc:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40bcce:	9816      	ldr	r0, [sp, #88]	; 0x58
  40bcd0:	9020      	str	r0, [sp, #128]	; 0x80
  40bcd2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40bcd6:	9121      	str	r1, [sp, #132]	; 0x84
  40bcd8:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40bcdc:	e660      	b.n	40b9a0 <_svfprintf_r+0x1068>
  40bcde:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40bce0:	9501      	str	r5, [sp, #4]
  40bce2:	2003      	movs	r0, #3
  40bce4:	a925      	add	r1, sp, #148	; 0x94
  40bce6:	aa26      	add	r2, sp, #152	; 0x98
  40bce8:	ab29      	add	r3, sp, #164	; 0xa4
  40bcea:	9000      	str	r0, [sp, #0]
  40bcec:	9203      	str	r2, [sp, #12]
  40bcee:	9304      	str	r3, [sp, #16]
  40bcf0:	9102      	str	r1, [sp, #8]
  40bcf2:	980d      	ldr	r0, [sp, #52]	; 0x34
  40bcf4:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  40bcf8:	f001 ffaa 	bl	40dc50 <_dtoa_r>
  40bcfc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40bcfe:	4607      	mov	r7, r0
  40bd00:	e677      	b.n	40b9f2 <_svfprintf_r+0x10ba>
  40bd02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40bd04:	9401      	str	r4, [sp, #4]
  40bd06:	2003      	movs	r0, #3
  40bd08:	a925      	add	r1, sp, #148	; 0x94
  40bd0a:	aa26      	add	r2, sp, #152	; 0x98
  40bd0c:	ab29      	add	r3, sp, #164	; 0xa4
  40bd0e:	e7ec      	b.n	40bcea <_svfprintf_r+0x13b2>
  40bd10:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40bd12:	9514      	str	r5, [sp, #80]	; 0x50
  40bd14:	2d00      	cmp	r5, #0
  40bd16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40bd18:	dd63      	ble.n	40bde2 <_svfprintf_r+0x14aa>
  40bd1a:	bbb4      	cbnz	r4, 40bd8a <_svfprintf_r+0x1452>
  40bd1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40bd1e:	07e8      	lsls	r0, r5, #31
  40bd20:	d433      	bmi.n	40bd8a <_svfprintf_r+0x1452>
  40bd22:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40bd24:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40bd28:	e69c      	b.n	40ba64 <_svfprintf_r+0x112c>
  40bd2a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40bd2c:	e67a      	b.n	40ba24 <_svfprintf_r+0x10ec>
  40bd2e:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
  40bd32:	4d3e      	ldr	r5, [pc, #248]	; (40be2c <_svfprintf_r+0x14f4>)
  40bd34:	17da      	asrs	r2, r3, #31
  40bd36:	fb85 5103 	smull	r5, r1, r5, r3
  40bd3a:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
  40bd3e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  40bd42:	4602      	mov	r2, r0
  40bd44:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  40bd48:	f103 0030 	add.w	r0, r3, #48	; 0x30
  40bd4c:	2909      	cmp	r1, #9
  40bd4e:	7010      	strb	r0, [r2, #0]
  40bd50:	460b      	mov	r3, r1
  40bd52:	f102 30ff 	add.w	r0, r2, #4294967295
  40bd56:	dcec      	bgt.n	40bd32 <_svfprintf_r+0x13fa>
  40bd58:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40bd5c:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  40bd60:	b2d9      	uxtb	r1, r3
  40bd62:	4284      	cmp	r4, r0
  40bd64:	f802 1c01 	strb.w	r1, [r2, #-1]
  40bd68:	d95a      	bls.n	40be20 <_svfprintf_r+0x14e8>
  40bd6a:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  40bd6e:	4613      	mov	r3, r2
  40bd70:	e001      	b.n	40bd76 <_svfprintf_r+0x143e>
  40bd72:	f813 1b01 	ldrb.w	r1, [r3], #1
  40bd76:	42a3      	cmp	r3, r4
  40bd78:	f800 1f01 	strb.w	r1, [r0, #1]!
  40bd7c:	d1f9      	bne.n	40bd72 <_svfprintf_r+0x143a>
  40bd7e:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  40bd82:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
  40bd86:	3bf6      	subs	r3, #246	; 0xf6
  40bd88:	e772      	b.n	40bc70 <_svfprintf_r+0x1338>
  40bd8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40bd8c:	1c6c      	adds	r4, r5, #1
  40bd8e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40bd90:	442c      	add	r4, r5
  40bd92:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40bd96:	e665      	b.n	40ba64 <_svfprintf_r+0x112c>
  40bd98:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  40bd9c:	2200      	movs	r2, #0
  40bd9e:	2300      	movs	r3, #0
  40bda0:	f007 fb02 	bl	4133a8 <__aeabi_dcmpeq>
  40bda4:	2800      	cmp	r0, #0
  40bda6:	f47f af4a 	bne.w	40bc3e <_svfprintf_r+0x1306>
  40bdaa:	f1c5 0501 	rsb	r5, r5, #1
  40bdae:	9525      	str	r5, [sp, #148]	; 0x94
  40bdb0:	442c      	add	r4, r5
  40bdb2:	e624      	b.n	40b9fe <_svfprintf_r+0x10c6>
  40bdb4:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40bdb6:	1c6c      	adds	r4, r5, #1
  40bdb8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40bdbc:	f04f 0867 	mov.w	r8, #103	; 0x67
  40bdc0:	e650      	b.n	40ba64 <_svfprintf_r+0x112c>
  40bdc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40bdc4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40bdc8:	682d      	ldr	r5, [r5, #0]
  40bdca:	f899 8001 	ldrb.w	r8, [r9, #1]
  40bdce:	950a      	str	r5, [sp, #40]	; 0x28
  40bdd0:	f10c 0304 	add.w	r3, ip, #4
  40bdd4:	2d00      	cmp	r5, #0
  40bdd6:	9310      	str	r3, [sp, #64]	; 0x40
  40bdd8:	4681      	mov	r9, r0
  40bdda:	f6be ae09 	bge.w	40a9f0 <_svfprintf_r+0xb8>
  40bdde:	f7fe be04 	b.w	40a9ea <_svfprintf_r+0xb2>
  40bde2:	b97c      	cbnz	r4, 40be04 <_svfprintf_r+0x14cc>
  40bde4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40bde6:	07e9      	lsls	r1, r5, #31
  40bde8:	d40c      	bmi.n	40be04 <_svfprintf_r+0x14cc>
  40bdea:	2301      	movs	r3, #1
  40bdec:	461c      	mov	r4, r3
  40bdee:	e639      	b.n	40ba64 <_svfprintf_r+0x112c>
  40bdf0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40bdf4:	f01c 0301 	ands.w	r3, ip, #1
  40bdf8:	f47f af43 	bne.w	40bc82 <_svfprintf_r+0x134a>
  40bdfc:	9314      	str	r3, [sp, #80]	; 0x50
  40bdfe:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40be02:	e62f      	b.n	40ba64 <_svfprintf_r+0x112c>
  40be04:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40be06:	1cac      	adds	r4, r5, #2
  40be08:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40be0c:	e62a      	b.n	40ba64 <_svfprintf_r+0x112c>
  40be0e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  40be10:	230c      	movs	r3, #12
  40be12:	602b      	str	r3, [r5, #0]
  40be14:	f04f 30ff 	mov.w	r0, #4294967295
  40be18:	f7fe beae 	b.w	40ab78 <_svfprintf_r+0x240>
  40be1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40be1e:	e713      	b.n	40bc48 <_svfprintf_r+0x1310>
  40be20:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  40be24:	e724      	b.n	40bc70 <_svfprintf_r+0x1338>
  40be26:	bf00      	nop
  40be28:	004136d0 	.word	0x004136d0
  40be2c:	66666667 	.word	0x66666667

0040be30 <__ssvfscanf_r>:
  40be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40be34:	460d      	mov	r5, r1
  40be36:	8989      	ldrh	r1, [r1, #12]
  40be38:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
  40be3c:	048c      	lsls	r4, r1, #18
  40be3e:	900e      	str	r0, [sp, #56]	; 0x38
  40be40:	9306      	str	r3, [sp, #24]
  40be42:	d406      	bmi.n	40be52 <__ssvfscanf_r+0x22>
  40be44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40be46:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40be4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40be4e:	81a9      	strh	r1, [r5, #12]
  40be50:	666b      	str	r3, [r5, #100]	; 0x64
  40be52:	4692      	mov	sl, r2
  40be54:	2400      	movs	r4, #0
  40be56:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40be5a:	9409      	str	r4, [sp, #36]	; 0x24
  40be5c:	940c      	str	r4, [sp, #48]	; 0x30
  40be5e:	46a1      	mov	r9, r4
  40be60:	940b      	str	r4, [sp, #44]	; 0x2c
  40be62:	f8df 83e4 	ldr.w	r8, [pc, #996]	; 40c248 <__ssvfscanf_r+0x418>
  40be66:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40be68:	9313      	str	r3, [sp, #76]	; 0x4c
  40be6a:	b343      	cbz	r3, 40bebe <__ssvfscanf_r+0x8e>
  40be6c:	f8d8 1000 	ldr.w	r1, [r8]
  40be70:	18c8      	adds	r0, r1, r3
  40be72:	7840      	ldrb	r0, [r0, #1]
  40be74:	f000 0008 	and.w	r0, r0, #8
  40be78:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  40be7c:	b320      	cbz	r0, 40bec8 <__ssvfscanf_r+0x98>
  40be7e:	686b      	ldr	r3, [r5, #4]
  40be80:	e00e      	b.n	40bea0 <__ssvfscanf_r+0x70>
  40be82:	682b      	ldr	r3, [r5, #0]
  40be84:	f8d8 2000 	ldr.w	r2, [r8]
  40be88:	7819      	ldrb	r1, [r3, #0]
  40be8a:	440a      	add	r2, r1
  40be8c:	3301      	adds	r3, #1
  40be8e:	7852      	ldrb	r2, [r2, #1]
  40be90:	0710      	lsls	r0, r2, #28
  40be92:	d50d      	bpl.n	40beb0 <__ssvfscanf_r+0x80>
  40be94:	686a      	ldr	r2, [r5, #4]
  40be96:	602b      	str	r3, [r5, #0]
  40be98:	1e53      	subs	r3, r2, #1
  40be9a:	f109 0901 	add.w	r9, r9, #1
  40be9e:	606b      	str	r3, [r5, #4]
  40bea0:	2b00      	cmp	r3, #0
  40bea2:	dcee      	bgt.n	40be82 <__ssvfscanf_r+0x52>
  40bea4:	4630      	mov	r0, r6
  40bea6:	4629      	mov	r1, r5
  40bea8:	f006 f896 	bl	411fd8 <__ssrefill_r>
  40beac:	2800      	cmp	r0, #0
  40beae:	d0e8      	beq.n	40be82 <__ssvfscanf_r+0x52>
  40beb0:	4652      	mov	r2, sl
  40beb2:	4692      	mov	sl, r2
  40beb4:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40beb8:	9313      	str	r3, [sp, #76]	; 0x4c
  40beba:	2b00      	cmp	r3, #0
  40bebc:	d1d6      	bne.n	40be6c <__ssvfscanf_r+0x3c>
  40bebe:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40bec0:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40bec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bec8:	2b25      	cmp	r3, #37	; 0x25
  40beca:	f040 8084 	bne.w	40bfd6 <__ssvfscanf_r+0x1a6>
  40bece:	7853      	ldrb	r3, [r2, #1]
  40bed0:	463c      	mov	r4, r7
  40bed2:	f10a 0201 	add.w	r2, sl, #1
  40bed6:	2b78      	cmp	r3, #120	; 0x78
  40bed8:	f200 82e5 	bhi.w	40c4a6 <__ssvfscanf_r+0x676>
  40bedc:	e8df f013 	tbh	[pc, r3, lsl #1]
  40bee0:	02e3008f 	.word	0x02e3008f
  40bee4:	02e302e3 	.word	0x02e302e3
  40bee8:	02e302e3 	.word	0x02e302e3
  40beec:	02e302e3 	.word	0x02e302e3
  40bef0:	02e302e3 	.word	0x02e302e3
  40bef4:	02e302e3 	.word	0x02e302e3
  40bef8:	02e302e3 	.word	0x02e302e3
  40befc:	02e302e3 	.word	0x02e302e3
  40bf00:	02e302e3 	.word	0x02e302e3
  40bf04:	02e302e3 	.word	0x02e302e3
  40bf08:	02e302e3 	.word	0x02e302e3
  40bf0c:	02e302e3 	.word	0x02e302e3
  40bf10:	02e302e3 	.word	0x02e302e3
  40bf14:	02e302e3 	.word	0x02e302e3
  40bf18:	02e302e3 	.word	0x02e302e3
  40bf1c:	02e302e3 	.word	0x02e302e3
  40bf20:	02e302e3 	.word	0x02e302e3
  40bf24:	02e302e3 	.word	0x02e302e3
  40bf28:	007902e3 	.word	0x007902e3
  40bf2c:	02e302e3 	.word	0x02e302e3
  40bf30:	02e302e3 	.word	0x02e302e3
  40bf34:	02e30226 	.word	0x02e30226
  40bf38:	02e302e3 	.word	0x02e302e3
  40bf3c:	02e302e3 	.word	0x02e302e3
  40bf40:	024f024f 	.word	0x024f024f
  40bf44:	024f024f 	.word	0x024f024f
  40bf48:	024f024f 	.word	0x024f024f
  40bf4c:	024f024f 	.word	0x024f024f
  40bf50:	024f024f 	.word	0x024f024f
  40bf54:	02e302e3 	.word	0x02e302e3
  40bf58:	02e302e3 	.word	0x02e302e3
  40bf5c:	02e302e3 	.word	0x02e302e3
  40bf60:	02e302e3 	.word	0x02e302e3
  40bf64:	02e302e3 	.word	0x02e302e3
  40bf68:	0273022c 	.word	0x0273022c
  40bf6c:	027302e3 	.word	0x027302e3
  40bf70:	02e302e3 	.word	0x02e302e3
  40bf74:	02e302e3 	.word	0x02e302e3
  40bf78:	02e3026d 	.word	0x02e3026d
  40bf7c:	026302e3 	.word	0x026302e3
  40bf80:	02e302e3 	.word	0x02e302e3
  40bf84:	02e302e3 	.word	0x02e302e3
  40bf88:	02e302e3 	.word	0x02e302e3
  40bf8c:	02e302e3 	.word	0x02e302e3
  40bf90:	02e30259 	.word	0x02e30259
  40bf94:	029302e3 	.word	0x029302e3
  40bf98:	02e302e3 	.word	0x02e302e3
  40bf9c:	02e302e3 	.word	0x02e302e3
  40bfa0:	02e302e3 	.word	0x02e302e3
  40bfa4:	028d02e3 	.word	0x028d02e3
  40bfa8:	0273029e 	.word	0x0273029e
  40bfac:	02730273 	.word	0x02730273
  40bfb0:	00950287 	.word	0x00950287
  40bfb4:	02e302e3 	.word	0x02e302e3
  40bfb8:	02e302b6 	.word	0x02e302b6
  40bfbc:	02770279 	.word	0x02770279
  40bfc0:	02e302ac 	.word	0x02e302ac
  40bfc4:	02a802e3 	.word	0x02a802e3
  40bfc8:	02a002e3 	.word	0x02a002e3
  40bfcc:	02e302e3 	.word	0x02e302e3
  40bfd0:	0259      	.short	0x0259
  40bfd2:	9207      	str	r2, [sp, #28]
  40bfd4:	4692      	mov	sl, r2
  40bfd6:	686b      	ldr	r3, [r5, #4]
  40bfd8:	2b00      	cmp	r3, #0
  40bfda:	f340 8557 	ble.w	40ca8c <__ssvfscanf_r+0xc5c>
  40bfde:	682b      	ldr	r3, [r5, #0]
  40bfe0:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
  40bfe4:	7819      	ldrb	r1, [r3, #0]
  40bfe6:	4291      	cmp	r1, r2
  40bfe8:	f47f af69 	bne.w	40bebe <__ssvfscanf_r+0x8e>
  40bfec:	686a      	ldr	r2, [r5, #4]
  40bfee:	3301      	adds	r3, #1
  40bff0:	3a01      	subs	r2, #1
  40bff2:	606a      	str	r2, [r5, #4]
  40bff4:	602b      	str	r3, [r5, #0]
  40bff6:	f109 0901 	add.w	r9, r9, #1
  40bffa:	4652      	mov	r2, sl
  40bffc:	e759      	b.n	40beb2 <__ssvfscanf_r+0x82>
  40bffe:	f04f 30ff 	mov.w	r0, #4294967295
  40c002:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40c006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c00a:	9207      	str	r2, [sp, #28]
  40c00c:	2300      	movs	r3, #0
  40c00e:	4a8d      	ldr	r2, [pc, #564]	; (40c244 <__ssvfscanf_r+0x414>)
  40c010:	9209      	str	r2, [sp, #36]	; 0x24
  40c012:	930c      	str	r3, [sp, #48]	; 0x30
  40c014:	f04f 0a03 	mov.w	sl, #3
  40c018:	686b      	ldr	r3, [r5, #4]
  40c01a:	2b00      	cmp	r3, #0
  40c01c:	f340 8199 	ble.w	40c352 <__ssvfscanf_r+0x522>
  40c020:	0679      	lsls	r1, r7, #25
  40c022:	d512      	bpl.n	40c04a <__ssvfscanf_r+0x21a>
  40c024:	f10a 3aff 	add.w	sl, sl, #4294967295
  40c028:	f1ba 0f03 	cmp.w	sl, #3
  40c02c:	f200 80b7 	bhi.w	40c19e <__ssvfscanf_r+0x36e>
  40c030:	e8df f01a 	tbh	[pc, sl, lsl #1]
  40c034:	008e00da 	.word	0x008e00da
  40c038:	0244001e 	.word	0x0244001e
  40c03c:	4630      	mov	r0, r6
  40c03e:	4629      	mov	r1, r5
  40c040:	f005 ffca 	bl	411fd8 <__ssrefill_r>
  40c044:	2800      	cmp	r0, #0
  40c046:	f040 818b 	bne.w	40c360 <__ssvfscanf_r+0x530>
  40c04a:	f8d8 1000 	ldr.w	r1, [r8]
  40c04e:	682b      	ldr	r3, [r5, #0]
  40c050:	e000      	b.n	40c054 <__ssvfscanf_r+0x224>
  40c052:	602b      	str	r3, [r5, #0]
  40c054:	781a      	ldrb	r2, [r3, #0]
  40c056:	440a      	add	r2, r1
  40c058:	3301      	adds	r3, #1
  40c05a:	7852      	ldrb	r2, [r2, #1]
  40c05c:	0712      	lsls	r2, r2, #28
  40c05e:	d5e1      	bpl.n	40c024 <__ssvfscanf_r+0x1f4>
  40c060:	686a      	ldr	r2, [r5, #4]
  40c062:	3a01      	subs	r2, #1
  40c064:	2a00      	cmp	r2, #0
  40c066:	f109 0901 	add.w	r9, r9, #1
  40c06a:	606a      	str	r2, [r5, #4]
  40c06c:	dcf1      	bgt.n	40c052 <__ssvfscanf_r+0x222>
  40c06e:	e7e5      	b.n	40c03c <__ssvfscanf_r+0x20c>
  40c070:	1e63      	subs	r3, r4, #1
  40c072:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  40c076:	bf86      	itte	hi
  40c078:	f46f 71ae 	mvnhi.w	r1, #348	; 0x15c
  40c07c:	1863      	addhi	r3, r4, r1
  40c07e:	2300      	movls	r3, #0
  40c080:	f04f 0b00 	mov.w	fp, #0
  40c084:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40c088:	9308      	str	r3, [sp, #32]
  40c08a:	465b      	mov	r3, fp
  40c08c:	46b3      	mov	fp, r6
  40c08e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40c090:	f8cd c014 	str.w	ip, [sp, #20]
  40c094:	46e2      	mov	sl, ip
  40c096:	bf88      	it	hi
  40c098:	f240 145d 	movwhi	r4, #349	; 0x15d
  40c09c:	f447 6758 	orr.w	r7, r7, #3456	; 0xd80
  40c0a0:	46cc      	mov	ip, r9
  40c0a2:	6828      	ldr	r0, [r5, #0]
  40c0a4:	7801      	ldrb	r1, [r0, #0]
  40c0a6:	f1a1 022b 	sub.w	r2, r1, #43	; 0x2b
  40c0aa:	2a4d      	cmp	r2, #77	; 0x4d
  40c0ac:	f200 80e2 	bhi.w	40c274 <__ssvfscanf_r+0x444>
  40c0b0:	e8df f012 	tbh	[pc, r2, lsl #1]
  40c0b4:	00e00126 	.word	0x00e00126
  40c0b8:	00e00126 	.word	0x00e00126
  40c0bc:	00fd00e0 	.word	0x00fd00e0
  40c0c0:	00cc00cc 	.word	0x00cc00cc
  40c0c4:	00cc00cc 	.word	0x00cc00cc
  40c0c8:	00cc00cc 	.word	0x00cc00cc
  40c0cc:	013600cc 	.word	0x013600cc
  40c0d0:	00e00136 	.word	0x00e00136
  40c0d4:	00e000e0 	.word	0x00e000e0
  40c0d8:	00e000e0 	.word	0x00e000e0
  40c0dc:	00e000e0 	.word	0x00e000e0
  40c0e0:	01210121 	.word	0x01210121
  40c0e4:	01210121 	.word	0x01210121
  40c0e8:	01210121 	.word	0x01210121
  40c0ec:	00e000e0 	.word	0x00e000e0
  40c0f0:	00e000e0 	.word	0x00e000e0
  40c0f4:	00e000e0 	.word	0x00e000e0
  40c0f8:	00e000e0 	.word	0x00e000e0
  40c0fc:	00e000e0 	.word	0x00e000e0
  40c100:	00e000e0 	.word	0x00e000e0
  40c104:	00e000e0 	.word	0x00e000e0
  40c108:	00e000e0 	.word	0x00e000e0
  40c10c:	012b00e0 	.word	0x012b00e0
  40c110:	00e000e0 	.word	0x00e000e0
  40c114:	00e000e0 	.word	0x00e000e0
  40c118:	00e000e0 	.word	0x00e000e0
  40c11c:	00e000e0 	.word	0x00e000e0
  40c120:	01210121 	.word	0x01210121
  40c124:	01210121 	.word	0x01210121
  40c128:	01210121 	.word	0x01210121
  40c12c:	00e000e0 	.word	0x00e000e0
  40c130:	00e000e0 	.word	0x00e000e0
  40c134:	00e000e0 	.word	0x00e000e0
  40c138:	00e000e0 	.word	0x00e000e0
  40c13c:	00e000e0 	.word	0x00e000e0
  40c140:	00e000e0 	.word	0x00e000e0
  40c144:	00e000e0 	.word	0x00e000e0
  40c148:	00e000e0 	.word	0x00e000e0
  40c14c:	012b00e0 	.word	0x012b00e0
  40c150:	2c00      	cmp	r4, #0
  40c152:	bf08      	it	eq
  40c154:	f04f 34ff 	moveq.w	r4, #4294967295
  40c158:	f017 0301 	ands.w	r3, r7, #1
  40c15c:	f040 817f 	bne.w	40c45e <__ssvfscanf_r+0x62e>
  40c160:	06f9      	lsls	r1, r7, #27
  40c162:	f140 8390 	bpl.w	40c886 <__ssvfscanf_r+0xa56>
  40c166:	461f      	mov	r7, r3
  40c168:	f8d8 1000 	ldr.w	r1, [r8]
  40c16c:	682b      	ldr	r3, [r5, #0]
  40c16e:	781a      	ldrb	r2, [r3, #0]
  40c170:	440a      	add	r2, r1
  40c172:	3301      	adds	r3, #1
  40c174:	7852      	ldrb	r2, [r2, #1]
  40c176:	0712      	lsls	r2, r2, #28
  40c178:	d431      	bmi.n	40c1de <__ssvfscanf_r+0x3ae>
  40c17a:	686a      	ldr	r2, [r5, #4]
  40c17c:	602b      	str	r3, [r5, #0]
  40c17e:	3701      	adds	r7, #1
  40c180:	3a01      	subs	r2, #1
  40c182:	42bc      	cmp	r4, r7
  40c184:	606a      	str	r2, [r5, #4]
  40c186:	d02a      	beq.n	40c1de <__ssvfscanf_r+0x3ae>
  40c188:	2a00      	cmp	r2, #0
  40c18a:	dcf0      	bgt.n	40c16e <__ssvfscanf_r+0x33e>
  40c18c:	4630      	mov	r0, r6
  40c18e:	4629      	mov	r1, r5
  40c190:	f005 ff22 	bl	411fd8 <__ssrefill_r>
  40c194:	bb18      	cbnz	r0, 40c1de <__ssvfscanf_r+0x3ae>
  40c196:	f8d8 1000 	ldr.w	r1, [r8]
  40c19a:	682b      	ldr	r3, [r5, #0]
  40c19c:	e7e7      	b.n	40c16e <__ssvfscanf_r+0x33e>
  40c19e:	2c00      	cmp	r4, #0
  40c1a0:	bf08      	it	eq
  40c1a2:	2401      	moveq	r4, #1
  40c1a4:	f017 0301 	ands.w	r3, r7, #1
  40c1a8:	f040 839f 	bne.w	40c8ea <__ssvfscanf_r+0xaba>
  40c1ac:	06f9      	lsls	r1, r7, #27
  40c1ae:	f140 8454 	bpl.w	40ca5a <__ssvfscanf_r+0xc2a>
  40c1b2:	461f      	mov	r7, r3
  40c1b4:	e008      	b.n	40c1c8 <__ssvfscanf_r+0x398>
  40c1b6:	441a      	add	r2, r3
  40c1b8:	602a      	str	r2, [r5, #0]
  40c1ba:	441f      	add	r7, r3
  40c1bc:	1ae4      	subs	r4, r4, r3
  40c1be:	f005 ff0b 	bl	411fd8 <__ssrefill_r>
  40c1c2:	2800      	cmp	r0, #0
  40c1c4:	f040 8441 	bne.w	40ca4a <__ssvfscanf_r+0xc1a>
  40c1c8:	686b      	ldr	r3, [r5, #4]
  40c1ca:	682a      	ldr	r2, [r5, #0]
  40c1cc:	42a3      	cmp	r3, r4
  40c1ce:	4630      	mov	r0, r6
  40c1d0:	4629      	mov	r1, r5
  40c1d2:	dbf0      	blt.n	40c1b6 <__ssvfscanf_r+0x386>
  40c1d4:	1b1b      	subs	r3, r3, r4
  40c1d6:	4422      	add	r2, r4
  40c1d8:	606b      	str	r3, [r5, #4]
  40c1da:	4427      	add	r7, r4
  40c1dc:	602a      	str	r2, [r5, #0]
  40c1de:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c1e2:	44b9      	add	r9, r7
  40c1e4:	4652      	mov	r2, sl
  40c1e6:	e664      	b.n	40beb2 <__ssvfscanf_r+0x82>
  40c1e8:	2c00      	cmp	r4, #0
  40c1ea:	bf08      	it	eq
  40c1ec:	f04f 34ff 	moveq.w	r4, #4294967295
  40c1f0:	06fa      	lsls	r2, r7, #27
  40c1f2:	f140 8315 	bpl.w	40c820 <__ssvfscanf_r+0x9f0>
  40c1f6:	682b      	ldr	r3, [r5, #0]
  40c1f8:	2700      	movs	r7, #0
  40c1fa:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  40c1fe:	781a      	ldrb	r2, [r3, #0]
  40c200:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40c204:	3301      	adds	r3, #1
  40c206:	b1aa      	cbz	r2, 40c234 <__ssvfscanf_r+0x404>
  40c208:	686a      	ldr	r2, [r5, #4]
  40c20a:	602b      	str	r3, [r5, #0]
  40c20c:	3701      	adds	r7, #1
  40c20e:	3a01      	subs	r2, #1
  40c210:	42bc      	cmp	r4, r7
  40c212:	606a      	str	r2, [r5, #4]
  40c214:	d0e3      	beq.n	40c1de <__ssvfscanf_r+0x3ae>
  40c216:	2a00      	cmp	r2, #0
  40c218:	dcf1      	bgt.n	40c1fe <__ssvfscanf_r+0x3ce>
  40c21a:	4630      	mov	r0, r6
  40c21c:	4629      	mov	r1, r5
  40c21e:	f005 fedb 	bl	411fd8 <__ssrefill_r>
  40c222:	2800      	cmp	r0, #0
  40c224:	d1db      	bne.n	40c1de <__ssvfscanf_r+0x3ae>
  40c226:	682b      	ldr	r3, [r5, #0]
  40c228:	781a      	ldrb	r2, [r3, #0]
  40c22a:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40c22e:	3301      	adds	r3, #1
  40c230:	2a00      	cmp	r2, #0
  40c232:	d1e9      	bne.n	40c208 <__ssvfscanf_r+0x3d8>
  40c234:	2f00      	cmp	r7, #0
  40c236:	f43f ae42 	beq.w	40bebe <__ssvfscanf_r+0x8e>
  40c23a:	44b9      	add	r9, r7
  40c23c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c240:	e7d0      	b.n	40c1e4 <__ssvfscanf_r+0x3b4>
  40c242:	bf00      	nop
  40c244:	004118f9 	.word	0x004118f9
  40c248:	20000644 	.word	0x20000644
  40c24c:	f8df 9364 	ldr.w	r9, [pc, #868]	; 40c5b4 <__ssvfscanf_r+0x784>
  40c250:	f939 6016 	ldrsh.w	r6, [r9, r6, lsl #1]
  40c254:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  40c258:	686a      	ldr	r2, [r5, #4]
  40c25a:	f88a 1000 	strb.w	r1, [sl]
  40c25e:	3a01      	subs	r2, #1
  40c260:	2a00      	cmp	r2, #0
  40c262:	f10a 0a01 	add.w	sl, sl, #1
  40c266:	606a      	str	r2, [r5, #4]
  40c268:	dd38      	ble.n	40c2dc <__ssvfscanf_r+0x4ac>
  40c26a:	3001      	adds	r0, #1
  40c26c:	6028      	str	r0, [r5, #0]
  40c26e:	3c01      	subs	r4, #1
  40c270:	f47f af17 	bne.w	40c0a2 <__ssvfscanf_r+0x272>
  40c274:	05f9      	lsls	r1, r7, #23
  40c276:	960c      	str	r6, [sp, #48]	; 0x30
  40c278:	46e1      	mov	r9, ip
  40c27a:	465e      	mov	r6, fp
  40c27c:	469b      	mov	fp, r3
  40c27e:	d508      	bpl.n	40c292 <__ssvfscanf_r+0x462>
  40c280:	9c05      	ldr	r4, [sp, #20]
  40c282:	45a2      	cmp	sl, r4
  40c284:	f200 840a 	bhi.w	40ca9c <__ssvfscanf_r+0xc6c>
  40c288:	f8dd c014 	ldr.w	ip, [sp, #20]
  40c28c:	45e2      	cmp	sl, ip
  40c28e:	f43f ae16 	beq.w	40bebe <__ssvfscanf_r+0x8e>
  40c292:	f017 0410 	ands.w	r4, r7, #16
  40c296:	f000 8372 	beq.w	40c97e <__ssvfscanf_r+0xb4e>
  40c29a:	f8dd c014 	ldr.w	ip, [sp, #20]
  40c29e:	ebcc 0a0a 	rsb	sl, ip, sl
  40c2a2:	44d3      	add	fp, sl
  40c2a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c2a8:	44d9      	add	r9, fp
  40c2aa:	4652      	mov	r2, sl
  40c2ac:	e601      	b.n	40beb2 <__ssvfscanf_r+0x82>
  40c2ae:	053a      	lsls	r2, r7, #20
  40c2b0:	d5d2      	bpl.n	40c258 <__ssvfscanf_r+0x428>
  40c2b2:	b916      	cbnz	r6, 40c2ba <__ssvfscanf_r+0x48a>
  40c2b4:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  40c2b8:	2608      	movs	r6, #8
  40c2ba:	057a      	lsls	r2, r7, #21
  40c2bc:	f100 837d 	bmi.w	40c9ba <__ssvfscanf_r+0xb8a>
  40c2c0:	9a08      	ldr	r2, [sp, #32]
  40c2c2:	f427 7760 	bic.w	r7, r7, #896	; 0x380
  40c2c6:	b112      	cbz	r2, 40c2ce <__ssvfscanf_r+0x49e>
  40c2c8:	3a01      	subs	r2, #1
  40c2ca:	9208      	str	r2, [sp, #32]
  40c2cc:	3401      	adds	r4, #1
  40c2ce:	686a      	ldr	r2, [r5, #4]
  40c2d0:	3a01      	subs	r2, #1
  40c2d2:	2a00      	cmp	r2, #0
  40c2d4:	f103 0301 	add.w	r3, r3, #1
  40c2d8:	606a      	str	r2, [r5, #4]
  40c2da:	dcc6      	bgt.n	40c26a <__ssvfscanf_r+0x43a>
  40c2dc:	4658      	mov	r0, fp
  40c2de:	4629      	mov	r1, r5
  40c2e0:	9303      	str	r3, [sp, #12]
  40c2e2:	f8cd c010 	str.w	ip, [sp, #16]
  40c2e6:	f005 fe77 	bl	411fd8 <__ssrefill_r>
  40c2ea:	9b03      	ldr	r3, [sp, #12]
  40c2ec:	f8dd c010 	ldr.w	ip, [sp, #16]
  40c2f0:	2800      	cmp	r0, #0
  40c2f2:	d0bc      	beq.n	40c26e <__ssvfscanf_r+0x43e>
  40c2f4:	e7be      	b.n	40c274 <__ssvfscanf_r+0x444>
  40c2f6:	2e0a      	cmp	r6, #10
  40c2f8:	ddbc      	ble.n	40c274 <__ssvfscanf_r+0x444>
  40c2fa:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  40c2fe:	e7ab      	b.n	40c258 <__ssvfscanf_r+0x428>
  40c300:	063a      	lsls	r2, r7, #24
  40c302:	d5b7      	bpl.n	40c274 <__ssvfscanf_r+0x444>
  40c304:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40c308:	e7a6      	b.n	40c258 <__ssvfscanf_r+0x428>
  40c30a:	f407 62c0 	and.w	r2, r7, #1536	; 0x600
  40c30e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40c312:	d1af      	bne.n	40c274 <__ssvfscanf_r+0x444>
  40c314:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  40c318:	f447 67a0 	orr.w	r7, r7, #1280	; 0x500
  40c31c:	2610      	movs	r6, #16
  40c31e:	e79b      	b.n	40c258 <__ssvfscanf_r+0x428>
  40c320:	4aa4      	ldr	r2, [pc, #656]	; (40c5b4 <__ssvfscanf_r+0x784>)
  40c322:	f932 6016 	ldrsh.w	r6, [r2, r6, lsl #1]
  40c326:	2e08      	cmp	r6, #8
  40c328:	dce7      	bgt.n	40c2fa <__ssvfscanf_r+0x4ca>
  40c32a:	e7a3      	b.n	40c274 <__ssvfscanf_r+0x444>
  40c32c:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40c330:	f047 0710 	orr.w	r7, r7, #16
  40c334:	4692      	mov	sl, r2
  40c336:	e5cc      	b.n	40bed2 <__ssvfscanf_r+0xa2>
  40c338:	9207      	str	r2, [sp, #28]
  40c33a:	f047 0701 	orr.w	r7, r7, #1
  40c33e:	686b      	ldr	r3, [r5, #4]
  40c340:	489d      	ldr	r0, [pc, #628]	; (40c5b8 <__ssvfscanf_r+0x788>)
  40c342:	9009      	str	r0, [sp, #36]	; 0x24
  40c344:	210a      	movs	r1, #10
  40c346:	2b00      	cmp	r3, #0
  40c348:	910c      	str	r1, [sp, #48]	; 0x30
  40c34a:	f04f 0a03 	mov.w	sl, #3
  40c34e:	f73f ae67 	bgt.w	40c020 <__ssvfscanf_r+0x1f0>
  40c352:	4630      	mov	r0, r6
  40c354:	4629      	mov	r1, r5
  40c356:	f005 fe3f 	bl	411fd8 <__ssrefill_r>
  40c35a:	2800      	cmp	r0, #0
  40c35c:	f43f ae60 	beq.w	40c020 <__ssvfscanf_r+0x1f0>
  40c360:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c362:	2c00      	cmp	r4, #0
  40c364:	f43f ae4b 	beq.w	40bffe <__ssvfscanf_r+0x1ce>
  40c368:	89ab      	ldrh	r3, [r5, #12]
  40c36a:	4620      	mov	r0, r4
  40c36c:	f013 0f40 	tst.w	r3, #64	; 0x40
  40c370:	bf18      	it	ne
  40c372:	f04f 30ff 	movne.w	r0, #4294967295
  40c376:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  40c37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c37e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40c382:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  40c386:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  40c38a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40c38e:	4692      	mov	sl, r2
  40c390:	e59f      	b.n	40bed2 <__ssvfscanf_r+0xa2>
  40c392:	9207      	str	r2, [sp, #28]
  40c394:	2310      	movs	r3, #16
  40c396:	4a89      	ldr	r2, [pc, #548]	; (40c5bc <__ssvfscanf_r+0x78c>)
  40c398:	9209      	str	r2, [sp, #36]	; 0x24
  40c39a:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  40c39e:	930c      	str	r3, [sp, #48]	; 0x30
  40c3a0:	f04f 0a03 	mov.w	sl, #3
  40c3a4:	e638      	b.n	40c018 <__ssvfscanf_r+0x1e8>
  40c3a6:	9207      	str	r2, [sp, #28]
  40c3a8:	f047 0701 	orr.w	r7, r7, #1
  40c3ac:	4a83      	ldr	r2, [pc, #524]	; (40c5bc <__ssvfscanf_r+0x78c>)
  40c3ae:	9209      	str	r2, [sp, #36]	; 0x24
  40c3b0:	2308      	movs	r3, #8
  40c3b2:	930c      	str	r3, [sp, #48]	; 0x30
  40c3b4:	f04f 0a03 	mov.w	sl, #3
  40c3b8:	e62e      	b.n	40c018 <__ssvfscanf_r+0x1e8>
  40c3ba:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40c3be:	f047 0702 	orr.w	r7, r7, #2
  40c3c2:	4692      	mov	sl, r2
  40c3c4:	e585      	b.n	40bed2 <__ssvfscanf_r+0xa2>
  40c3c6:	9207      	str	r2, [sp, #28]
  40c3c8:	f04f 0a04 	mov.w	sl, #4
  40c3cc:	e624      	b.n	40c018 <__ssvfscanf_r+0x1e8>
  40c3ce:	9207      	str	r2, [sp, #28]
  40c3d0:	e7ec      	b.n	40c3ac <__ssvfscanf_r+0x57c>
  40c3d2:	06f9      	lsls	r1, r7, #27
  40c3d4:	9207      	str	r2, [sp, #28]
  40c3d6:	d462      	bmi.n	40c49e <__ssvfscanf_r+0x66e>
  40c3d8:	077b      	lsls	r3, r7, #29
  40c3da:	f140 8381 	bpl.w	40cae0 <__ssvfscanf_r+0xcb0>
  40c3de:	9c06      	ldr	r4, [sp, #24]
  40c3e0:	6823      	ldr	r3, [r4, #0]
  40c3e2:	3404      	adds	r4, #4
  40c3e4:	4692      	mov	sl, r2
  40c3e6:	f8a3 9000 	strh.w	r9, [r3]
  40c3ea:	9406      	str	r4, [sp, #24]
  40c3ec:	e560      	b.n	40beb0 <__ssvfscanf_r+0x80>
  40c3ee:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40c3f2:	f047 0704 	orr.w	r7, r7, #4
  40c3f6:	4692      	mov	sl, r2
  40c3f8:	e56b      	b.n	40bed2 <__ssvfscanf_r+0xa2>
  40c3fa:	9207      	str	r2, [sp, #28]
  40c3fc:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40c400:	f04f 0a00 	mov.w	sl, #0
  40c404:	e608      	b.n	40c018 <__ssvfscanf_r+0x1e8>
  40c406:	4611      	mov	r1, r2
  40c408:	a816      	add	r0, sp, #88	; 0x58
  40c40a:	9207      	str	r2, [sp, #28]
  40c40c:	f004 fa78 	bl	410900 <__sccl>
  40c410:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40c414:	9007      	str	r0, [sp, #28]
  40c416:	f04f 0a01 	mov.w	sl, #1
  40c41a:	e5fd      	b.n	40c018 <__ssvfscanf_r+0x1e8>
  40c41c:	9207      	str	r2, [sp, #28]
  40c41e:	e78e      	b.n	40c33e <__ssvfscanf_r+0x50e>
  40c420:	4866      	ldr	r0, [pc, #408]	; (40c5bc <__ssvfscanf_r+0x78c>)
  40c422:	9207      	str	r2, [sp, #28]
  40c424:	210a      	movs	r1, #10
  40c426:	9009      	str	r0, [sp, #36]	; 0x24
  40c428:	910c      	str	r1, [sp, #48]	; 0x30
  40c42a:	f04f 0a03 	mov.w	sl, #3
  40c42e:	e5f3      	b.n	40c018 <__ssvfscanf_r+0x1e8>
  40c430:	9207      	str	r2, [sp, #28]
  40c432:	f04f 0a02 	mov.w	sl, #2
  40c436:	e5ef      	b.n	40c018 <__ssvfscanf_r+0x1e8>
  40c438:	4860      	ldr	r0, [pc, #384]	; (40c5bc <__ssvfscanf_r+0x78c>)
  40c43a:	9207      	str	r2, [sp, #28]
  40c43c:	2110      	movs	r1, #16
  40c43e:	f447 7708 	orr.w	r7, r7, #544	; 0x220
  40c442:	9009      	str	r0, [sp, #36]	; 0x24
  40c444:	910c      	str	r1, [sp, #48]	; 0x30
  40c446:	f04f 0a03 	mov.w	sl, #3
  40c44a:	e5e5      	b.n	40c018 <__ssvfscanf_r+0x1e8>
  40c44c:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40c450:	2b6c      	cmp	r3, #108	; 0x6c
  40c452:	f000 8336 	beq.w	40cac2 <__ssvfscanf_r+0xc92>
  40c456:	f047 0701 	orr.w	r7, r7, #1
  40c45a:	4692      	mov	sl, r2
  40c45c:	e539      	b.n	40bed2 <__ssvfscanf_r+0xa2>
  40c45e:	a814      	add	r0, sp, #80	; 0x50
  40c460:	2100      	movs	r1, #0
  40c462:	2208      	movs	r2, #8
  40c464:	900a      	str	r0, [sp, #40]	; 0x28
  40c466:	f7fe f843 	bl	40a4f0 <memset>
  40c46a:	f017 0b10 	ands.w	fp, r7, #16
  40c46e:	f000 82bd 	beq.w	40c9ec <__ssvfscanf_r+0xbbc>
  40c472:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
  40c476:	2200      	movs	r2, #0
  40c478:	6829      	ldr	r1, [r5, #0]
  40c47a:	f8d8 3000 	ldr.w	r3, [r8]
  40c47e:	7809      	ldrb	r1, [r1, #0]
  40c480:	440b      	add	r3, r1
  40c482:	785b      	ldrb	r3, [r3, #1]
  40c484:	0718      	lsls	r0, r3, #28
  40c486:	d402      	bmi.n	40c48e <__ssvfscanf_r+0x65e>
  40c488:	2c00      	cmp	r4, #0
  40c48a:	f040 8372 	bne.w	40cb72 <__ssvfscanf_r+0xd42>
  40c48e:	f1bb 0f00 	cmp.w	fp, #0
  40c492:	d104      	bne.n	40c49e <__ssvfscanf_r+0x66e>
  40c494:	f8ca b000 	str.w	fp, [sl]
  40c498:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c49a:	3401      	adds	r4, #1
  40c49c:	940b      	str	r4, [sp, #44]	; 0x2c
  40c49e:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c4a2:	4652      	mov	r2, sl
  40c4a4:	e505      	b.n	40beb2 <__ssvfscanf_r+0x82>
  40c4a6:	440b      	add	r3, r1
  40c4a8:	9207      	str	r2, [sp, #28]
  40c4aa:	785b      	ldrb	r3, [r3, #1]
  40c4ac:	f003 0303 	and.w	r3, r3, #3
  40c4b0:	2b01      	cmp	r3, #1
  40c4b2:	f47f af44 	bne.w	40c33e <__ssvfscanf_r+0x50e>
  40c4b6:	f047 0701 	orr.w	r7, r7, #1
  40c4ba:	e740      	b.n	40c33e <__ssvfscanf_r+0x50e>
  40c4bc:	4630      	mov	r0, r6
  40c4be:	f002 ff83 	bl	40f3c8 <_localeconv_r>
  40c4c2:	1e63      	subs	r3, r4, #1
  40c4c4:	6800      	ldr	r0, [r0, #0]
  40c4c6:	900f      	str	r0, [sp, #60]	; 0x3c
  40c4c8:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  40c4cc:	f240 81a5 	bls.w	40c81a <__ssvfscanf_r+0x9ea>
  40c4d0:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
  40c4d4:	4404      	add	r4, r0
  40c4d6:	940d      	str	r4, [sp, #52]	; 0x34
  40c4d8:	f240 145d 	movw	r4, #349	; 0x15d
  40c4dc:	f04f 0a00 	mov.w	sl, #0
  40c4e0:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40c4e4:	960e      	str	r6, [sp, #56]	; 0x38
  40c4e6:	f8cd c014 	str.w	ip, [sp, #20]
  40c4ea:	f447 67f0 	orr.w	r7, r7, #1920	; 0x780
  40c4ee:	4653      	mov	r3, sl
  40c4f0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  40c4f4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  40c4f8:	f8cd a020 	str.w	sl, [sp, #32]
  40c4fc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  40c500:	46e3      	mov	fp, ip
  40c502:	4656      	mov	r6, sl
  40c504:	6828      	ldr	r0, [r5, #0]
  40c506:	7802      	ldrb	r2, [r0, #0]
  40c508:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
  40c50c:	294e      	cmp	r1, #78	; 0x4e
  40c50e:	f200 8156 	bhi.w	40c7be <__ssvfscanf_r+0x98e>
  40c512:	e8df f011 	tbh	[pc, r1, lsl #1]
  40c516:	007e      	.short	0x007e
  40c518:	007e0154 	.word	0x007e0154
  40c51c:	01540154 	.word	0x01540154
  40c520:	00550072 	.word	0x00550072
  40c524:	00550055 	.word	0x00550055
  40c528:	00550055 	.word	0x00550055
  40c52c:	00550055 	.word	0x00550055
  40c530:	00550055 	.word	0x00550055
  40c534:	01540154 	.word	0x01540154
  40c538:	01540154 	.word	0x01540154
  40c53c:	01540154 	.word	0x01540154
  40c540:	014f0154 	.word	0x014f0154
  40c544:	01540154 	.word	0x01540154
  40c548:	01350154 	.word	0x01350154
  40c54c:	0154012e 	.word	0x0154012e
  40c550:	00a40154 	.word	0x00a40154
  40c554:	01540154 	.word	0x01540154
  40c558:	01540154 	.word	0x01540154
  40c55c:	0154008f 	.word	0x0154008f
  40c560:	01540154 	.word	0x01540154
  40c564:	01540154 	.word	0x01540154
  40c568:	01540089 	.word	0x01540089
  40c56c:	01540154 	.word	0x01540154
  40c570:	00830154 	.word	0x00830154
  40c574:	01540154 	.word	0x01540154
  40c578:	01540154 	.word	0x01540154
  40c57c:	01540154 	.word	0x01540154
  40c580:	014f0154 	.word	0x014f0154
  40c584:	01540154 	.word	0x01540154
  40c588:	01350154 	.word	0x01350154
  40c58c:	0154012e 	.word	0x0154012e
  40c590:	00a40154 	.word	0x00a40154
  40c594:	01540154 	.word	0x01540154
  40c598:	01540154 	.word	0x01540154
  40c59c:	0154008f 	.word	0x0154008f
  40c5a0:	01540154 	.word	0x01540154
  40c5a4:	01540154 	.word	0x01540154
  40c5a8:	01540089 	.word	0x01540089
  40c5ac:	01540154 	.word	0x01540154
  40c5b0:	00830154 	.word	0x00830154
  40c5b4:	004136ec 	.word	0x004136ec
  40c5b8:	004118f9 	.word	0x004118f9
  40c5bc:	00411ba9 	.word	0x00411ba9
  40c5c0:	eb03 010a 	add.w	r1, r3, sl
  40c5c4:	b999      	cbnz	r1, 40c5ee <__ssvfscanf_r+0x7be>
  40c5c6:	f427 77c0 	bic.w	r7, r7, #384	; 0x180
  40c5ca:	f88b 2000 	strb.w	r2, [fp]
  40c5ce:	f10b 0b01 	add.w	fp, fp, #1
  40c5d2:	686a      	ldr	r2, [r5, #4]
  40c5d4:	3a01      	subs	r2, #1
  40c5d6:	2a00      	cmp	r2, #0
  40c5d8:	f104 34ff 	add.w	r4, r4, #4294967295
  40c5dc:	f109 0901 	add.w	r9, r9, #1
  40c5e0:	606a      	str	r2, [r5, #4]
  40c5e2:	f340 80fa 	ble.w	40c7da <__ssvfscanf_r+0x9aa>
  40c5e6:	3001      	adds	r0, #1
  40c5e8:	6028      	str	r0, [r5, #0]
  40c5ea:	2c00      	cmp	r4, #0
  40c5ec:	d18a      	bne.n	40c504 <__ssvfscanf_r+0x6d4>
  40c5ee:	9608      	str	r6, [sp, #32]
  40c5f0:	9c08      	ldr	r4, [sp, #32]
  40c5f2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40c5f4:	2c00      	cmp	r4, #0
  40c5f6:	d041      	beq.n	40c67c <__ssvfscanf_r+0x84c>
  40c5f8:	e10c      	b.n	40c814 <__ssvfscanf_r+0x9e4>
  40c5fa:	05f9      	lsls	r1, r7, #23
  40c5fc:	d5e0      	bpl.n	40c5c0 <__ssvfscanf_r+0x790>
  40c5fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40c600:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40c604:	3601      	adds	r6, #1
  40c606:	2a00      	cmp	r2, #0
  40c608:	d0e3      	beq.n	40c5d2 <__ssvfscanf_r+0x7a2>
  40c60a:	3a01      	subs	r2, #1
  40c60c:	920d      	str	r2, [sp, #52]	; 0x34
  40c60e:	3401      	adds	r4, #1
  40c610:	e7df      	b.n	40c5d2 <__ssvfscanf_r+0x7a2>
  40c612:	0639      	lsls	r1, r7, #24
  40c614:	d5eb      	bpl.n	40c5ee <__ssvfscanf_r+0x7be>
  40c616:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40c61a:	e7d6      	b.n	40c5ca <__ssvfscanf_r+0x79a>
  40c61c:	f1ba 0f07 	cmp.w	sl, #7
  40c620:	d1e5      	bne.n	40c5ee <__ssvfscanf_r+0x7be>
  40c622:	f04f 0a08 	mov.w	sl, #8
  40c626:	e7d0      	b.n	40c5ca <__ssvfscanf_r+0x79a>
  40c628:	f1ba 0f06 	cmp.w	sl, #6
  40c62c:	d1df      	bne.n	40c5ee <__ssvfscanf_r+0x7be>
  40c62e:	f04f 0a07 	mov.w	sl, #7
  40c632:	e7ca      	b.n	40c5ca <__ssvfscanf_r+0x79a>
  40c634:	2b00      	cmp	r3, #0
  40c636:	f040 80e6 	bne.w	40c806 <__ssvfscanf_r+0x9d6>
  40c63a:	b92e      	cbnz	r6, 40c648 <__ssvfscanf_r+0x818>
  40c63c:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  40c640:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  40c644:	f000 8239 	beq.w	40caba <__ssvfscanf_r+0xc8a>
  40c648:	f1ba 0f01 	cmp.w	sl, #1
  40c64c:	d002      	beq.n	40c654 <__ssvfscanf_r+0x824>
  40c64e:	f1ba 0f04 	cmp.w	sl, #4
  40c652:	d1cc      	bne.n	40c5ee <__ssvfscanf_r+0x7be>
  40c654:	f10a 0a01 	add.w	sl, sl, #1
  40c658:	fa5f fa8a 	uxtb.w	sl, sl
  40c65c:	e7b5      	b.n	40c5ca <__ssvfscanf_r+0x79a>
  40c65e:	f1ba 0f00 	cmp.w	sl, #0
  40c662:	f040 80c7 	bne.w	40c7f4 <__ssvfscanf_r+0x9c4>
  40c666:	2e00      	cmp	r6, #0
  40c668:	f040 80d2 	bne.w	40c810 <__ssvfscanf_r+0x9e0>
  40c66c:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  40c670:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  40c674:	f000 821c 	beq.w	40cab0 <__ssvfscanf_r+0xc80>
  40c678:	9608      	str	r6, [sp, #32]
  40c67a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40c67c:	f103 3cff 	add.w	ip, r3, #4294967295
  40c680:	f1bc 0f01 	cmp.w	ip, #1
  40c684:	f240 82dc 	bls.w	40cc40 <__ssvfscanf_r+0xe10>
  40c688:	f10a 32ff 	add.w	r2, sl, #4294967295
  40c68c:	2a06      	cmp	r2, #6
  40c68e:	d822      	bhi.n	40c6d6 <__ssvfscanf_r+0x8a6>
  40c690:	f1ba 0f02 	cmp.w	sl, #2
  40c694:	f240 82ad 	bls.w	40cbf2 <__ssvfscanf_r+0xdc2>
  40c698:	f1ba 0f03 	cmp.w	sl, #3
  40c69c:	d01b      	beq.n	40c6d6 <__ssvfscanf_r+0x8a6>
  40c69e:	f1aa 0a04 	sub.w	sl, sl, #4
  40c6a2:	fa5f fa8a 	uxtb.w	sl, sl
  40c6a6:	f10b 34ff 	add.w	r4, fp, #4294967295
  40c6aa:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40c6ae:	ebca 0404 	rsb	r4, sl, r4
  40c6b2:	46da      	mov	sl, fp
  40c6b4:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
  40c6b8:	4630      	mov	r0, r6
  40c6ba:	462a      	mov	r2, r5
  40c6bc:	f005 fc4c 	bl	411f58 <_sungetc_r>
  40c6c0:	45a2      	cmp	sl, r4
  40c6c2:	d1f7      	bne.n	40c6b4 <__ssvfscanf_r+0x884>
  40c6c4:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40c6c8:	f109 39ff 	add.w	r9, r9, #4294967295
  40c6cc:	ea6f 020c 	mvn.w	r2, ip
  40c6d0:	ebcc 0909 	rsb	r9, ip, r9
  40c6d4:	4493      	add	fp, r2
  40c6d6:	05f8      	lsls	r0, r7, #23
  40c6d8:	d51c      	bpl.n	40c714 <__ssvfscanf_r+0x8e4>
  40c6da:	0579      	lsls	r1, r7, #21
  40c6dc:	f100 829b 	bmi.w	40cc16 <__ssvfscanf_r+0xde6>
  40c6e0:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
  40c6e4:	2965      	cmp	r1, #101	; 0x65
  40c6e6:	f10b 34ff 	add.w	r4, fp, #4294967295
  40c6ea:	f109 3aff 	add.w	sl, r9, #4294967295
  40c6ee:	d00b      	beq.n	40c708 <__ssvfscanf_r+0x8d8>
  40c6f0:	2945      	cmp	r1, #69	; 0x45
  40c6f2:	d009      	beq.n	40c708 <__ssvfscanf_r+0x8d8>
  40c6f4:	4630      	mov	r0, r6
  40c6f6:	462a      	mov	r2, r5
  40c6f8:	f005 fc2e 	bl	411f58 <_sungetc_r>
  40c6fc:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
  40c700:	f1a9 0a02 	sub.w	sl, r9, #2
  40c704:	f1ab 0402 	sub.w	r4, fp, #2
  40c708:	4630      	mov	r0, r6
  40c70a:	462a      	mov	r2, r5
  40c70c:	f005 fc24 	bl	411f58 <_sungetc_r>
  40c710:	46d1      	mov	r9, sl
  40c712:	46a3      	mov	fp, r4
  40c714:	f017 0210 	ands.w	r2, r7, #16
  40c718:	f47f aec1 	bne.w	40c49e <__ssvfscanf_r+0x66e>
  40c71c:	f407 61c0 	and.w	r1, r7, #1536	; 0x600
  40c720:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  40c724:	f88b 2000 	strb.w	r2, [fp]
  40c728:	f000 81d3 	beq.w	40cad2 <__ssvfscanf_r+0xca2>
  40c72c:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40c72e:	2c00      	cmp	r4, #0
  40c730:	f040 816e 	bne.w	40ca10 <__ssvfscanf_r+0xbe0>
  40c734:	2200      	movs	r2, #0
  40c736:	9905      	ldr	r1, [sp, #20]
  40c738:	4630      	mov	r0, r6
  40c73a:	f004 f93d 	bl	4109b8 <_strtod_r>
  40c73e:	07fa      	lsls	r2, r7, #31
  40c740:	4682      	mov	sl, r0
  40c742:	468b      	mov	fp, r1
  40c744:	f100 8132 	bmi.w	40c9ac <__ssvfscanf_r+0xb7c>
  40c748:	07bb      	lsls	r3, r7, #30
  40c74a:	f140 81e8 	bpl.w	40cb1e <__ssvfscanf_r+0xcee>
  40c74e:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c752:	f8dc 3000 	ldr.w	r3, [ip]
  40c756:	f10c 0c04 	add.w	ip, ip, #4
  40c75a:	f8cd c018 	str.w	ip, [sp, #24]
  40c75e:	e9c3 ab00 	strd	sl, fp, [r3]
  40c762:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c764:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c768:	3401      	adds	r4, #1
  40c76a:	940b      	str	r4, [sp, #44]	; 0x2c
  40c76c:	4652      	mov	r2, sl
  40c76e:	f7ff bba0 	b.w	40beb2 <__ssvfscanf_r+0x82>
  40c772:	f1ba 0f02 	cmp.w	sl, #2
  40c776:	f47f af3a 	bne.w	40c5ee <__ssvfscanf_r+0x7be>
  40c77a:	f04f 0a03 	mov.w	sl, #3
  40c77e:	e724      	b.n	40c5ca <__ssvfscanf_r+0x79a>
  40c780:	f407 61a0 	and.w	r1, r7, #1280	; 0x500
  40c784:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  40c788:	d005      	beq.n	40c796 <__ssvfscanf_r+0x966>
  40c78a:	0579      	lsls	r1, r7, #21
  40c78c:	f57f af2f 	bpl.w	40c5ee <__ssvfscanf_r+0x7be>
  40c790:	2e00      	cmp	r6, #0
  40c792:	f43f af71 	beq.w	40c678 <__ssvfscanf_r+0x848>
  40c796:	05b9      	lsls	r1, r7, #22
  40c798:	d406      	bmi.n	40c7a8 <__ssvfscanf_r+0x978>
  40c79a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40c79e:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  40c7a2:	ebcc 0606 	rsb	r6, ip, r6
  40c7a6:	9610      	str	r6, [sp, #64]	; 0x40
  40c7a8:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40c7ac:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
  40c7b0:	2600      	movs	r6, #0
  40c7b2:	e70a      	b.n	40c5ca <__ssvfscanf_r+0x79a>
  40c7b4:	2b01      	cmp	r3, #1
  40c7b6:	f47f af1a 	bne.w	40c5ee <__ssvfscanf_r+0x7be>
  40c7ba:	2302      	movs	r3, #2
  40c7bc:	e705      	b.n	40c5ca <__ssvfscanf_r+0x79a>
  40c7be:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  40c7c2:	f89c 1000 	ldrb.w	r1, [ip]
  40c7c6:	4291      	cmp	r1, r2
  40c7c8:	f47f af11 	bne.w	40c5ee <__ssvfscanf_r+0x7be>
  40c7cc:	05b9      	lsls	r1, r7, #22
  40c7ce:	f57f af0e 	bpl.w	40c5ee <__ssvfscanf_r+0x7be>
  40c7d2:	f427 7720 	bic.w	r7, r7, #640	; 0x280
  40c7d6:	960a      	str	r6, [sp, #40]	; 0x28
  40c7d8:	e6f7      	b.n	40c5ca <__ssvfscanf_r+0x79a>
  40c7da:	980e      	ldr	r0, [sp, #56]	; 0x38
  40c7dc:	9303      	str	r3, [sp, #12]
  40c7de:	4629      	mov	r1, r5
  40c7e0:	f005 fbfa 	bl	411fd8 <__ssrefill_r>
  40c7e4:	9b03      	ldr	r3, [sp, #12]
  40c7e6:	2800      	cmp	r0, #0
  40c7e8:	f47f af01 	bne.w	40c5ee <__ssvfscanf_r+0x7be>
  40c7ec:	2c00      	cmp	r4, #0
  40c7ee:	f47f ae89 	bne.w	40c504 <__ssvfscanf_r+0x6d4>
  40c7f2:	e6fc      	b.n	40c5ee <__ssvfscanf_r+0x7be>
  40c7f4:	f1ba 0f03 	cmp.w	sl, #3
  40c7f8:	f43f af2c 	beq.w	40c654 <__ssvfscanf_r+0x824>
  40c7fc:	f1ba 0f05 	cmp.w	sl, #5
  40c800:	f43f af28 	beq.w	40c654 <__ssvfscanf_r+0x824>
  40c804:	e6f3      	b.n	40c5ee <__ssvfscanf_r+0x7be>
  40c806:	2b02      	cmp	r3, #2
  40c808:	f47f af1e 	bne.w	40c648 <__ssvfscanf_r+0x818>
  40c80c:	2303      	movs	r3, #3
  40c80e:	e6dc      	b.n	40c5ca <__ssvfscanf_r+0x79a>
  40c810:	9608      	str	r6, [sp, #32]
  40c812:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40c814:	f427 7780 	bic.w	r7, r7, #256	; 0x100
  40c818:	e730      	b.n	40c67c <__ssvfscanf_r+0x84c>
  40c81a:	2200      	movs	r2, #0
  40c81c:	920d      	str	r2, [sp, #52]	; 0x34
  40c81e:	e65d      	b.n	40c4dc <__ssvfscanf_r+0x6ac>
  40c820:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c824:	f8dc 7000 	ldr.w	r7, [ip]
  40c828:	f10c 0204 	add.w	r2, ip, #4
  40c82c:	9206      	str	r2, [sp, #24]
  40c82e:	46ba      	mov	sl, r7
  40c830:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  40c834:	682b      	ldr	r3, [r5, #0]
  40c836:	781a      	ldrb	r2, [r3, #0]
  40c838:	f81b 2002 	ldrb.w	r2, [fp, r2]
  40c83c:	1c59      	adds	r1, r3, #1
  40c83e:	b1a2      	cbz	r2, 40c86a <__ssvfscanf_r+0xa3a>
  40c840:	686a      	ldr	r2, [r5, #4]
  40c842:	6029      	str	r1, [r5, #0]
  40c844:	3a01      	subs	r2, #1
  40c846:	606a      	str	r2, [r5, #4]
  40c848:	781b      	ldrb	r3, [r3, #0]
  40c84a:	f80a 3b01 	strb.w	r3, [sl], #1
  40c84e:	3c01      	subs	r4, #1
  40c850:	d00b      	beq.n	40c86a <__ssvfscanf_r+0xa3a>
  40c852:	686b      	ldr	r3, [r5, #4]
  40c854:	2b00      	cmp	r3, #0
  40c856:	dced      	bgt.n	40c834 <__ssvfscanf_r+0xa04>
  40c858:	4630      	mov	r0, r6
  40c85a:	4629      	mov	r1, r5
  40c85c:	f005 fbbc 	bl	411fd8 <__ssrefill_r>
  40c860:	2800      	cmp	r0, #0
  40c862:	d0e7      	beq.n	40c834 <__ssvfscanf_r+0xa04>
  40c864:	4557      	cmp	r7, sl
  40c866:	f43f ad7b 	beq.w	40c360 <__ssvfscanf_r+0x530>
  40c86a:	ebba 0707 	subs.w	r7, sl, r7
  40c86e:	f43f ab26 	beq.w	40bebe <__ssvfscanf_r+0x8e>
  40c872:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c874:	2300      	movs	r3, #0
  40c876:	3401      	adds	r4, #1
  40c878:	f88a 3000 	strb.w	r3, [sl]
  40c87c:	940b      	str	r4, [sp, #44]	; 0x2c
  40c87e:	44b9      	add	r9, r7
  40c880:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c884:	e4ae      	b.n	40c1e4 <__ssvfscanf_r+0x3b4>
  40c886:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c88a:	f8dc 7000 	ldr.w	r7, [ip]
  40c88e:	f10c 0a04 	add.w	sl, ip, #4
  40c892:	46bb      	mov	fp, r7
  40c894:	682b      	ldr	r3, [r5, #0]
  40c896:	f8d8 2000 	ldr.w	r2, [r8]
  40c89a:	7819      	ldrb	r1, [r3, #0]
  40c89c:	440a      	add	r2, r1
  40c89e:	1c59      	adds	r1, r3, #1
  40c8a0:	7852      	ldrb	r2, [r2, #1]
  40c8a2:	0710      	lsls	r0, r2, #28
  40c8a4:	d411      	bmi.n	40c8ca <__ssvfscanf_r+0xa9a>
  40c8a6:	686a      	ldr	r2, [r5, #4]
  40c8a8:	6029      	str	r1, [r5, #0]
  40c8aa:	3a01      	subs	r2, #1
  40c8ac:	606a      	str	r2, [r5, #4]
  40c8ae:	781b      	ldrb	r3, [r3, #0]
  40c8b0:	f80b 3b01 	strb.w	r3, [fp], #1
  40c8b4:	3c01      	subs	r4, #1
  40c8b6:	d008      	beq.n	40c8ca <__ssvfscanf_r+0xa9a>
  40c8b8:	686b      	ldr	r3, [r5, #4]
  40c8ba:	2b00      	cmp	r3, #0
  40c8bc:	dcea      	bgt.n	40c894 <__ssvfscanf_r+0xa64>
  40c8be:	4630      	mov	r0, r6
  40c8c0:	4629      	mov	r1, r5
  40c8c2:	f005 fb89 	bl	411fd8 <__ssrefill_r>
  40c8c6:	2800      	cmp	r0, #0
  40c8c8:	d0e4      	beq.n	40c894 <__ssvfscanf_r+0xa64>
  40c8ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c8cc:	f8cd a018 	str.w	sl, [sp, #24]
  40c8d0:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40c8d4:	ebc7 070b 	rsb	r7, r7, fp
  40c8d8:	2300      	movs	r3, #0
  40c8da:	3401      	adds	r4, #1
  40c8dc:	44b9      	add	r9, r7
  40c8de:	940b      	str	r4, [sp, #44]	; 0x2c
  40c8e0:	f88b 3000 	strb.w	r3, [fp]
  40c8e4:	4652      	mov	r2, sl
  40c8e6:	f7ff bae4 	b.w	40beb2 <__ssvfscanf_r+0x82>
  40c8ea:	ab14      	add	r3, sp, #80	; 0x50
  40c8ec:	4618      	mov	r0, r3
  40c8ee:	2100      	movs	r1, #0
  40c8f0:	2208      	movs	r2, #8
  40c8f2:	930a      	str	r3, [sp, #40]	; 0x28
  40c8f4:	f7fd fdfc 	bl	40a4f0 <memset>
  40c8f8:	f017 0710 	ands.w	r7, r7, #16
  40c8fc:	970d      	str	r7, [sp, #52]	; 0x34
  40c8fe:	d06c      	beq.n	40c9da <__ssvfscanf_r+0xbaa>
  40c900:	f04f 0a00 	mov.w	sl, #0
  40c904:	9608      	str	r6, [sp, #32]
  40c906:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40c908:	f8cd 9014 	str.w	r9, [sp, #20]
  40c90c:	f04f 0b00 	mov.w	fp, #0
  40c910:	af56      	add	r7, sp, #344	; 0x158
  40c912:	f002 fd53 	bl	40f3bc <__locale_mb_cur_max>
  40c916:	4558      	cmp	r0, fp
  40c918:	f43f ad22 	beq.w	40c360 <__ssvfscanf_r+0x530>
  40c91c:	682b      	ldr	r3, [r5, #0]
  40c91e:	6869      	ldr	r1, [r5, #4]
  40c920:	f813 eb01 	ldrb.w	lr, [r3], #1
  40c924:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c926:	602b      	str	r3, [r5, #0]
  40c928:	3901      	subs	r1, #1
  40c92a:	f10b 0901 	add.w	r9, fp, #1
  40c92e:	9000      	str	r0, [sp, #0]
  40c930:	464b      	mov	r3, r9
  40c932:	6069      	str	r1, [r5, #4]
  40c934:	9808      	ldr	r0, [sp, #32]
  40c936:	f807 e00b 	strb.w	lr, [r7, fp]
  40c93a:	4651      	mov	r1, sl
  40c93c:	463a      	mov	r2, r7
  40c93e:	f003 f86f 	bl	40fa20 <_mbrtowc_r>
  40c942:	1c43      	adds	r3, r0, #1
  40c944:	f43f ad0c 	beq.w	40c360 <__ssvfscanf_r+0x530>
  40c948:	2800      	cmp	r0, #0
  40c94a:	d177      	bne.n	40ca3c <__ssvfscanf_r+0xc0c>
  40c94c:	b90e      	cbnz	r6, 40c952 <__ssvfscanf_r+0xb22>
  40c94e:	f8ca 6000 	str.w	r6, [sl]
  40c952:	9905      	ldr	r1, [sp, #20]
  40c954:	4449      	add	r1, r9
  40c956:	9105      	str	r1, [sp, #20]
  40c958:	3c01      	subs	r4, #1
  40c95a:	2e00      	cmp	r6, #0
  40c95c:	d172      	bne.n	40ca44 <__ssvfscanf_r+0xc14>
  40c95e:	f10a 0a04 	add.w	sl, sl, #4
  40c962:	46b3      	mov	fp, r6
  40c964:	686b      	ldr	r3, [r5, #4]
  40c966:	2b00      	cmp	r3, #0
  40c968:	dd2a      	ble.n	40c9c0 <__ssvfscanf_r+0xb90>
  40c96a:	2c00      	cmp	r4, #0
  40c96c:	d1d1      	bne.n	40c912 <__ssvfscanf_r+0xae2>
  40c96e:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40c972:	9e08      	ldr	r6, [sp, #32]
  40c974:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40c976:	2c00      	cmp	r4, #0
  40c978:	f43f ad8e 	beq.w	40c498 <__ssvfscanf_r+0x668>
  40c97c:	e58f      	b.n	40c49e <__ssvfscanf_r+0x66e>
  40c97e:	4622      	mov	r2, r4
  40c980:	f88a 4000 	strb.w	r4, [sl]
  40c984:	4630      	mov	r0, r6
  40c986:	9905      	ldr	r1, [sp, #20]
  40c988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c98a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c98c:	47a0      	blx	r4
  40c98e:	06ba      	lsls	r2, r7, #26
  40c990:	d535      	bpl.n	40c9fe <__ssvfscanf_r+0xbce>
  40c992:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c996:	f8dc 3000 	ldr.w	r3, [ip]
  40c99a:	f10c 0c04 	add.w	ip, ip, #4
  40c99e:	f8cd c018 	str.w	ip, [sp, #24]
  40c9a2:	6018      	str	r0, [r3, #0]
  40c9a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c9a6:	3401      	adds	r4, #1
  40c9a8:	940b      	str	r4, [sp, #44]	; 0x2c
  40c9aa:	e476      	b.n	40c29a <__ssvfscanf_r+0x46a>
  40c9ac:	9c06      	ldr	r4, [sp, #24]
  40c9ae:	6823      	ldr	r3, [r4, #0]
  40c9b0:	3404      	adds	r4, #4
  40c9b2:	9406      	str	r4, [sp, #24]
  40c9b4:	e9c3 ab00 	strd	sl, fp, [r3]
  40c9b8:	e6d3      	b.n	40c762 <__ssvfscanf_r+0x932>
  40c9ba:	f427 67b0 	bic.w	r7, r7, #1408	; 0x580
  40c9be:	e44b      	b.n	40c258 <__ssvfscanf_r+0x428>
  40c9c0:	9808      	ldr	r0, [sp, #32]
  40c9c2:	4629      	mov	r1, r5
  40c9c4:	f005 fb08 	bl	411fd8 <__ssrefill_r>
  40c9c8:	2800      	cmp	r0, #0
  40c9ca:	d0ce      	beq.n	40c96a <__ssvfscanf_r+0xb3a>
  40c9cc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40c9d0:	9e08      	ldr	r6, [sp, #32]
  40c9d2:	f1bb 0f00 	cmp.w	fp, #0
  40c9d6:	d0cd      	beq.n	40c974 <__ssvfscanf_r+0xb44>
  40c9d8:	e4c2      	b.n	40c360 <__ssvfscanf_r+0x530>
  40c9da:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c9de:	f8dc a000 	ldr.w	sl, [ip]
  40c9e2:	f10c 0c04 	add.w	ip, ip, #4
  40c9e6:	f8cd c018 	str.w	ip, [sp, #24]
  40c9ea:	e78b      	b.n	40c904 <__ssvfscanf_r+0xad4>
  40c9ec:	f8dd c018 	ldr.w	ip, [sp, #24]
  40c9f0:	f8dc a000 	ldr.w	sl, [ip]
  40c9f4:	f10c 0c04 	add.w	ip, ip, #4
  40c9f8:	f8cd c018 	str.w	ip, [sp, #24]
  40c9fc:	e53b      	b.n	40c476 <__ssvfscanf_r+0x646>
  40c9fe:	077b      	lsls	r3, r7, #29
  40ca00:	f140 809b 	bpl.w	40cb3a <__ssvfscanf_r+0xd0a>
  40ca04:	9c06      	ldr	r4, [sp, #24]
  40ca06:	6823      	ldr	r3, [r4, #0]
  40ca08:	3404      	adds	r4, #4
  40ca0a:	9406      	str	r4, [sp, #24]
  40ca0c:	8018      	strh	r0, [r3, #0]
  40ca0e:	e7c9      	b.n	40c9a4 <__ssvfscanf_r+0xb74>
  40ca10:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  40ca14:	4630      	mov	r0, r6
  40ca16:	f10c 0101 	add.w	r1, ip, #1
  40ca1a:	230a      	movs	r3, #10
  40ca1c:	f004 ff6c 	bl	4118f8 <_strtol_r>
  40ca20:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
  40ca24:	1b02      	subs	r2, r0, r4
  40ca26:	f20d 21ab 	addw	r1, sp, #683	; 0x2ab
  40ca2a:	458b      	cmp	fp, r1
  40ca2c:	bf28      	it	cs
  40ca2e:	f20d 2baa 	addwcs	fp, sp, #682	; 0x2aa
  40ca32:	4658      	mov	r0, fp
  40ca34:	499b      	ldr	r1, [pc, #620]	; (40cca4 <__ssvfscanf_r+0xe74>)
  40ca36:	f7fd fe2d 	bl	40a694 <sprintf>
  40ca3a:	e67b      	b.n	40c734 <__ssvfscanf_r+0x904>
  40ca3c:	3002      	adds	r0, #2
  40ca3e:	d188      	bne.n	40c952 <__ssvfscanf_r+0xb22>
  40ca40:	46cb      	mov	fp, r9
  40ca42:	e78f      	b.n	40c964 <__ssvfscanf_r+0xb34>
  40ca44:	f04f 0b00 	mov.w	fp, #0
  40ca48:	e78c      	b.n	40c964 <__ssvfscanf_r+0xb34>
  40ca4a:	2f00      	cmp	r7, #0
  40ca4c:	f43f ac88 	beq.w	40c360 <__ssvfscanf_r+0x530>
  40ca50:	44b9      	add	r9, r7
  40ca52:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40ca56:	f7ff bbc5 	b.w	40c1e4 <__ssvfscanf_r+0x3b4>
  40ca5a:	f8dd c018 	ldr.w	ip, [sp, #24]
  40ca5e:	4623      	mov	r3, r4
  40ca60:	f8dc 1000 	ldr.w	r1, [ip]
  40ca64:	9500      	str	r5, [sp, #0]
  40ca66:	4630      	mov	r0, r6
  40ca68:	2201      	movs	r2, #1
  40ca6a:	f005 fad3 	bl	412014 <_sfread_r>
  40ca6e:	9c06      	ldr	r4, [sp, #24]
  40ca70:	1d23      	adds	r3, r4, #4
  40ca72:	2800      	cmp	r0, #0
  40ca74:	f43f ac74 	beq.w	40c360 <__ssvfscanf_r+0x530>
  40ca78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40ca7a:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40ca7e:	9306      	str	r3, [sp, #24]
  40ca80:	3401      	adds	r4, #1
  40ca82:	4481      	add	r9, r0
  40ca84:	940b      	str	r4, [sp, #44]	; 0x2c
  40ca86:	4652      	mov	r2, sl
  40ca88:	f7ff ba13 	b.w	40beb2 <__ssvfscanf_r+0x82>
  40ca8c:	4630      	mov	r0, r6
  40ca8e:	4629      	mov	r1, r5
  40ca90:	f005 faa2 	bl	411fd8 <__ssrefill_r>
  40ca94:	2800      	cmp	r0, #0
  40ca96:	f43f aaa2 	beq.w	40bfde <__ssvfscanf_r+0x1ae>
  40ca9a:	e461      	b.n	40c360 <__ssvfscanf_r+0x530>
  40ca9c:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
  40caa0:	4630      	mov	r0, r6
  40caa2:	462a      	mov	r2, r5
  40caa4:	f005 fa58 	bl	411f58 <_sungetc_r>
  40caa8:	f10a 3aff 	add.w	sl, sl, #4294967295
  40caac:	f7ff bbec 	b.w	40c288 <__ssvfscanf_r+0x458>
  40cab0:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40cab4:	f04f 0a01 	mov.w	sl, #1
  40cab8:	e587      	b.n	40c5ca <__ssvfscanf_r+0x79a>
  40caba:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40cabe:	2301      	movs	r3, #1
  40cac0:	e583      	b.n	40c5ca <__ssvfscanf_r+0x79a>
  40cac2:	f89a 3002 	ldrb.w	r3, [sl, #2]
  40cac6:	f047 0702 	orr.w	r7, r7, #2
  40caca:	f10a 0a02 	add.w	sl, sl, #2
  40cace:	f7ff ba00 	b.w	40bed2 <__ssvfscanf_r+0xa2>
  40cad2:	9b08      	ldr	r3, [sp, #32]
  40cad4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40cad6:	1b19      	subs	r1, r3, r4
  40cad8:	424a      	negs	r2, r1
  40cada:	2900      	cmp	r1, #0
  40cadc:	d1a3      	bne.n	40ca26 <__ssvfscanf_r+0xbf6>
  40cade:	e629      	b.n	40c734 <__ssvfscanf_r+0x904>
  40cae0:	07fc      	lsls	r4, r7, #31
  40cae2:	d40e      	bmi.n	40cb02 <__ssvfscanf_r+0xcd2>
  40cae4:	07b8      	lsls	r0, r7, #30
  40cae6:	d50c      	bpl.n	40cb02 <__ssvfscanf_r+0xcd2>
  40cae8:	9c06      	ldr	r4, [sp, #24]
  40caea:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40caee:	6821      	ldr	r1, [r4, #0]
  40caf0:	464a      	mov	r2, r9
  40caf2:	ea4f 73e9 	mov.w	r3, r9, asr #31
  40caf6:	3404      	adds	r4, #4
  40caf8:	9406      	str	r4, [sp, #24]
  40cafa:	e9c1 2300 	strd	r2, r3, [r1]
  40cafe:	f7ff b9d7 	b.w	40beb0 <__ssvfscanf_r+0x80>
  40cb02:	f8dd c018 	ldr.w	ip, [sp, #24]
  40cb06:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40cb0a:	f8dc 3000 	ldr.w	r3, [ip]
  40cb0e:	f10c 0c04 	add.w	ip, ip, #4
  40cb12:	f8c3 9000 	str.w	r9, [r3]
  40cb16:	f8cd c018 	str.w	ip, [sp, #24]
  40cb1a:	f7ff b9c9 	b.w	40beb0 <__ssvfscanf_r+0x80>
  40cb1e:	9c06      	ldr	r4, [sp, #24]
  40cb20:	1d27      	adds	r7, r4, #4
  40cb22:	6824      	ldr	r4, [r4, #0]
  40cb24:	f003 feb2 	bl	41088c <__fpclassifyd>
  40cb28:	2800      	cmp	r0, #0
  40cb2a:	d056      	beq.n	40cbda <__ssvfscanf_r+0xdaa>
  40cb2c:	4650      	mov	r0, sl
  40cb2e:	4659      	mov	r1, fp
  40cb30:	f006 fcb4 	bl	41349c <__aeabi_d2f>
  40cb34:	9706      	str	r7, [sp, #24]
  40cb36:	6020      	str	r0, [r4, #0]
  40cb38:	e613      	b.n	40c762 <__ssvfscanf_r+0x932>
  40cb3a:	f017 0201 	ands.w	r2, r7, #1
  40cb3e:	f47f af28 	bne.w	40c992 <__ssvfscanf_r+0xb62>
  40cb42:	07bc      	lsls	r4, r7, #30
  40cb44:	f140 8097 	bpl.w	40cc76 <__ssvfscanf_r+0xe46>
  40cb48:	4b57      	ldr	r3, [pc, #348]	; (40cca8 <__ssvfscanf_r+0xe78>)
  40cb4a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40cb4c:	9905      	ldr	r1, [sp, #20]
  40cb4e:	429c      	cmp	r4, r3
  40cb50:	4630      	mov	r0, r6
  40cb52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cb54:	f000 80a2 	beq.w	40cc9c <__ssvfscanf_r+0xe6c>
  40cb58:	f004 ff58 	bl	411a0c <_strtoll_r>
  40cb5c:	f8dd c018 	ldr.w	ip, [sp, #24]
  40cb60:	f8dc 3000 	ldr.w	r3, [ip]
  40cb64:	f10c 0c04 	add.w	ip, ip, #4
  40cb68:	f8cd c018 	str.w	ip, [sp, #24]
  40cb6c:	e9c3 0100 	strd	r0, r1, [r3]
  40cb70:	e718      	b.n	40c9a4 <__ssvfscanf_r+0xb74>
  40cb72:	9204      	str	r2, [sp, #16]
  40cb74:	f002 fc22 	bl	40f3bc <__locale_mb_cur_max>
  40cb78:	9a04      	ldr	r2, [sp, #16]
  40cb7a:	4290      	cmp	r0, r2
  40cb7c:	f43f abf0 	beq.w	40c360 <__ssvfscanf_r+0x530>
  40cb80:	682b      	ldr	r3, [r5, #0]
  40cb82:	6869      	ldr	r1, [r5, #4]
  40cb84:	f813 eb01 	ldrb.w	lr, [r3], #1
  40cb88:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cb8a:	602b      	str	r3, [r5, #0]
  40cb8c:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  40cb90:	1c57      	adds	r7, r2, #1
  40cb92:	3901      	subs	r1, #1
  40cb94:	9000      	str	r0, [sp, #0]
  40cb96:	463b      	mov	r3, r7
  40cb98:	6069      	str	r1, [r5, #4]
  40cb9a:	f80c e002 	strb.w	lr, [ip, r2]
  40cb9e:	4630      	mov	r0, r6
  40cba0:	4651      	mov	r1, sl
  40cba2:	4662      	mov	r2, ip
  40cba4:	f002 ff3c 	bl	40fa20 <_mbrtowc_r>
  40cba8:	1c43      	adds	r3, r0, #1
  40cbaa:	f43f abd9 	beq.w	40c360 <__ssvfscanf_r+0x530>
  40cbae:	b9c8      	cbnz	r0, 40cbe4 <__ssvfscanf_r+0xdb4>
  40cbb0:	f8ca 0000 	str.w	r0, [sl]
  40cbb4:	f002 fbf0 	bl	40f398 <iswspace>
  40cbb8:	2800      	cmp	r0, #0
  40cbba:	d053      	beq.n	40cc64 <__ssvfscanf_r+0xe34>
  40cbbc:	2f00      	cmp	r7, #0
  40cbbe:	f43f ac66 	beq.w	40c48e <__ssvfscanf_r+0x65e>
  40cbc2:	ac56      	add	r4, sp, #344	; 0x158
  40cbc4:	443c      	add	r4, r7
  40cbc6:	3f01      	subs	r7, #1
  40cbc8:	4630      	mov	r0, r6
  40cbca:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40cbce:	462a      	mov	r2, r5
  40cbd0:	f005 f9c2 	bl	411f58 <_sungetc_r>
  40cbd4:	2f00      	cmp	r7, #0
  40cbd6:	d1f6      	bne.n	40cbc6 <__ssvfscanf_r+0xd96>
  40cbd8:	e459      	b.n	40c48e <__ssvfscanf_r+0x65e>
  40cbda:	f003 fec9 	bl	410970 <nanf>
  40cbde:	9706      	str	r7, [sp, #24]
  40cbe0:	6020      	str	r0, [r4, #0]
  40cbe2:	e5be      	b.n	40c762 <__ssvfscanf_r+0x932>
  40cbe4:	3002      	adds	r0, #2
  40cbe6:	d128      	bne.n	40cc3a <__ssvfscanf_r+0xe0a>
  40cbe8:	686b      	ldr	r3, [r5, #4]
  40cbea:	2b00      	cmp	r3, #0
  40cbec:	dd4b      	ble.n	40cc86 <__ssvfscanf_r+0xe56>
  40cbee:	463a      	mov	r2, r7
  40cbf0:	e442      	b.n	40c478 <__ssvfscanf_r+0x648>
  40cbf2:	9c05      	ldr	r4, [sp, #20]
  40cbf4:	45a3      	cmp	fp, r4
  40cbf6:	bf88      	it	hi
  40cbf8:	465c      	movhi	r4, fp
  40cbfa:	f67f a960 	bls.w	40bebe <__ssvfscanf_r+0x8e>
  40cbfe:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40cc02:	980e      	ldr	r0, [sp, #56]	; 0x38
  40cc04:	462a      	mov	r2, r5
  40cc06:	f005 f9a7 	bl	411f58 <_sungetc_r>
  40cc0a:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40cc0e:	454c      	cmp	r4, r9
  40cc10:	d1f5      	bne.n	40cbfe <__ssvfscanf_r+0xdce>
  40cc12:	f7ff b954 	b.w	40bebe <__ssvfscanf_r+0x8e>
  40cc16:	f8dd c014 	ldr.w	ip, [sp, #20]
  40cc1a:	45e3      	cmp	fp, ip
  40cc1c:	f67f a94f 	bls.w	40bebe <__ssvfscanf_r+0x8e>
  40cc20:	465c      	mov	r4, fp
  40cc22:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40cc26:	980e      	ldr	r0, [sp, #56]	; 0x38
  40cc28:	462a      	mov	r2, r5
  40cc2a:	f005 f995 	bl	411f58 <_sungetc_r>
  40cc2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40cc32:	454c      	cmp	r4, r9
  40cc34:	d1f5      	bne.n	40cc22 <__ssvfscanf_r+0xdf2>
  40cc36:	f7ff b942 	b.w	40bebe <__ssvfscanf_r+0x8e>
  40cc3a:	f8da 0000 	ldr.w	r0, [sl]
  40cc3e:	e7b9      	b.n	40cbb4 <__ssvfscanf_r+0xd84>
  40cc40:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40cc44:	45cb      	cmp	fp, r9
  40cc46:	f67f a93a 	bls.w	40bebe <__ssvfscanf_r+0x8e>
  40cc4a:	465c      	mov	r4, fp
  40cc4c:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  40cc50:	980e      	ldr	r0, [sp, #56]	; 0x38
  40cc52:	462a      	mov	r2, r5
  40cc54:	f005 f980 	bl	411f58 <_sungetc_r>
  40cc58:	f8dd c014 	ldr.w	ip, [sp, #20]
  40cc5c:	4564      	cmp	r4, ip
  40cc5e:	d1f5      	bne.n	40cc4c <__ssvfscanf_r+0xe1c>
  40cc60:	f7ff b92d 	b.w	40bebe <__ssvfscanf_r+0x8e>
  40cc64:	44b9      	add	r9, r7
  40cc66:	3c01      	subs	r4, #1
  40cc68:	f1bb 0f00 	cmp.w	fp, #0
  40cc6c:	d109      	bne.n	40cc82 <__ssvfscanf_r+0xe52>
  40cc6e:	f10a 0a04 	add.w	sl, sl, #4
  40cc72:	465f      	mov	r7, fp
  40cc74:	e7b8      	b.n	40cbe8 <__ssvfscanf_r+0xdb8>
  40cc76:	9c06      	ldr	r4, [sp, #24]
  40cc78:	6823      	ldr	r3, [r4, #0]
  40cc7a:	3404      	adds	r4, #4
  40cc7c:	9406      	str	r4, [sp, #24]
  40cc7e:	6018      	str	r0, [r3, #0]
  40cc80:	e690      	b.n	40c9a4 <__ssvfscanf_r+0xb74>
  40cc82:	4607      	mov	r7, r0
  40cc84:	e7b0      	b.n	40cbe8 <__ssvfscanf_r+0xdb8>
  40cc86:	4630      	mov	r0, r6
  40cc88:	4629      	mov	r1, r5
  40cc8a:	f005 f9a5 	bl	411fd8 <__ssrefill_r>
  40cc8e:	2800      	cmp	r0, #0
  40cc90:	d0ad      	beq.n	40cbee <__ssvfscanf_r+0xdbe>
  40cc92:	2f00      	cmp	r7, #0
  40cc94:	f47f ab64 	bne.w	40c360 <__ssvfscanf_r+0x530>
  40cc98:	f7ff bbf9 	b.w	40c48e <__ssvfscanf_r+0x65e>
  40cc9c:	f005 f814 	bl	411cc8 <_strtoull_r>
  40cca0:	e75c      	b.n	40cb5c <__ssvfscanf_r+0xd2c>
  40cca2:	bf00      	nop
  40cca4:	00413710 	.word	0x00413710
  40cca8:	00411ba9 	.word	0x00411ba9

0040ccac <__sprint_r.part.0>:
  40ccac:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40ccae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ccb2:	049c      	lsls	r4, r3, #18
  40ccb4:	460e      	mov	r6, r1
  40ccb6:	4680      	mov	r8, r0
  40ccb8:	4691      	mov	r9, r2
  40ccba:	d52a      	bpl.n	40cd12 <__sprint_r.part.0+0x66>
  40ccbc:	6893      	ldr	r3, [r2, #8]
  40ccbe:	6812      	ldr	r2, [r2, #0]
  40ccc0:	f102 0a08 	add.w	sl, r2, #8
  40ccc4:	b31b      	cbz	r3, 40cd0e <__sprint_r.part.0+0x62>
  40ccc6:	e91a 00a0 	ldmdb	sl, {r5, r7}
  40ccca:	08bf      	lsrs	r7, r7, #2
  40cccc:	d017      	beq.n	40ccfe <__sprint_r.part.0+0x52>
  40ccce:	3d04      	subs	r5, #4
  40ccd0:	2400      	movs	r4, #0
  40ccd2:	e001      	b.n	40ccd8 <__sprint_r.part.0+0x2c>
  40ccd4:	42a7      	cmp	r7, r4
  40ccd6:	d010      	beq.n	40ccfa <__sprint_r.part.0+0x4e>
  40ccd8:	4640      	mov	r0, r8
  40ccda:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40ccde:	4632      	mov	r2, r6
  40cce0:	f002 f82e 	bl	40ed40 <_fputwc_r>
  40cce4:	1c43      	adds	r3, r0, #1
  40cce6:	f104 0401 	add.w	r4, r4, #1
  40ccea:	d1f3      	bne.n	40ccd4 <__sprint_r.part.0+0x28>
  40ccec:	2300      	movs	r3, #0
  40ccee:	f8c9 3008 	str.w	r3, [r9, #8]
  40ccf2:	f8c9 3004 	str.w	r3, [r9, #4]
  40ccf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ccfa:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40ccfe:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
  40cd02:	f8c9 3008 	str.w	r3, [r9, #8]
  40cd06:	f10a 0a08 	add.w	sl, sl, #8
  40cd0a:	2b00      	cmp	r3, #0
  40cd0c:	d1db      	bne.n	40ccc6 <__sprint_r.part.0+0x1a>
  40cd0e:	2000      	movs	r0, #0
  40cd10:	e7ec      	b.n	40ccec <__sprint_r.part.0+0x40>
  40cd12:	f002 f98f 	bl	40f034 <__sfvwrite_r>
  40cd16:	2300      	movs	r3, #0
  40cd18:	f8c9 3008 	str.w	r3, [r9, #8]
  40cd1c:	f8c9 3004 	str.w	r3, [r9, #4]
  40cd20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040cd24 <_vfiprintf_r>:
  40cd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cd28:	b0b1      	sub	sp, #196	; 0xc4
  40cd2a:	461c      	mov	r4, r3
  40cd2c:	9102      	str	r1, [sp, #8]
  40cd2e:	4690      	mov	r8, r2
  40cd30:	9308      	str	r3, [sp, #32]
  40cd32:	9006      	str	r0, [sp, #24]
  40cd34:	b118      	cbz	r0, 40cd3e <_vfiprintf_r+0x1a>
  40cd36:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40cd38:	2b00      	cmp	r3, #0
  40cd3a:	f000 80e8 	beq.w	40cf0e <_vfiprintf_r+0x1ea>
  40cd3e:	9d02      	ldr	r5, [sp, #8]
  40cd40:	89ab      	ldrh	r3, [r5, #12]
  40cd42:	b29a      	uxth	r2, r3
  40cd44:	0490      	lsls	r0, r2, #18
  40cd46:	d407      	bmi.n	40cd58 <_vfiprintf_r+0x34>
  40cd48:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  40cd4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40cd4e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  40cd52:	81ab      	strh	r3, [r5, #12]
  40cd54:	b29a      	uxth	r2, r3
  40cd56:	6669      	str	r1, [r5, #100]	; 0x64
  40cd58:	0711      	lsls	r1, r2, #28
  40cd5a:	f140 80b7 	bpl.w	40cecc <_vfiprintf_r+0x1a8>
  40cd5e:	f8dd b008 	ldr.w	fp, [sp, #8]
  40cd62:	f8db 3010 	ldr.w	r3, [fp, #16]
  40cd66:	2b00      	cmp	r3, #0
  40cd68:	f000 80b0 	beq.w	40cecc <_vfiprintf_r+0x1a8>
  40cd6c:	f002 021a 	and.w	r2, r2, #26
  40cd70:	2a0a      	cmp	r2, #10
  40cd72:	f000 80b7 	beq.w	40cee4 <_vfiprintf_r+0x1c0>
  40cd76:	2300      	movs	r3, #0
  40cd78:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  40cd7c:	930a      	str	r3, [sp, #40]	; 0x28
  40cd7e:	9315      	str	r3, [sp, #84]	; 0x54
  40cd80:	9314      	str	r3, [sp, #80]	; 0x50
  40cd82:	9309      	str	r3, [sp, #36]	; 0x24
  40cd84:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  40cd88:	464e      	mov	r6, r9
  40cd8a:	f898 3000 	ldrb.w	r3, [r8]
  40cd8e:	2b00      	cmp	r3, #0
  40cd90:	f000 84c4 	beq.w	40d71c <_vfiprintf_r+0x9f8>
  40cd94:	2b25      	cmp	r3, #37	; 0x25
  40cd96:	f000 84c1 	beq.w	40d71c <_vfiprintf_r+0x9f8>
  40cd9a:	f108 0201 	add.w	r2, r8, #1
  40cd9e:	e001      	b.n	40cda4 <_vfiprintf_r+0x80>
  40cda0:	2b25      	cmp	r3, #37	; 0x25
  40cda2:	d004      	beq.n	40cdae <_vfiprintf_r+0x8a>
  40cda4:	4614      	mov	r4, r2
  40cda6:	3201      	adds	r2, #1
  40cda8:	7823      	ldrb	r3, [r4, #0]
  40cdaa:	2b00      	cmp	r3, #0
  40cdac:	d1f8      	bne.n	40cda0 <_vfiprintf_r+0x7c>
  40cdae:	ebc8 0504 	rsb	r5, r8, r4
  40cdb2:	b195      	cbz	r5, 40cdda <_vfiprintf_r+0xb6>
  40cdb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40cdb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40cdb8:	f8c6 8000 	str.w	r8, [r6]
  40cdbc:	3301      	adds	r3, #1
  40cdbe:	442a      	add	r2, r5
  40cdc0:	2b07      	cmp	r3, #7
  40cdc2:	6075      	str	r5, [r6, #4]
  40cdc4:	9215      	str	r2, [sp, #84]	; 0x54
  40cdc6:	9314      	str	r3, [sp, #80]	; 0x50
  40cdc8:	dd7b      	ble.n	40cec2 <_vfiprintf_r+0x19e>
  40cdca:	2a00      	cmp	r2, #0
  40cdcc:	f040 84d4 	bne.w	40d778 <_vfiprintf_r+0xa54>
  40cdd0:	9809      	ldr	r0, [sp, #36]	; 0x24
  40cdd2:	9214      	str	r2, [sp, #80]	; 0x50
  40cdd4:	4428      	add	r0, r5
  40cdd6:	464e      	mov	r6, r9
  40cdd8:	9009      	str	r0, [sp, #36]	; 0x24
  40cdda:	7823      	ldrb	r3, [r4, #0]
  40cddc:	2b00      	cmp	r3, #0
  40cdde:	f000 83e9 	beq.w	40d5b4 <_vfiprintf_r+0x890>
  40cde2:	2100      	movs	r1, #0
  40cde4:	f04f 0200 	mov.w	r2, #0
  40cde8:	f04f 3cff 	mov.w	ip, #4294967295
  40cdec:	7863      	ldrb	r3, [r4, #1]
  40cdee:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
  40cdf2:	9104      	str	r1, [sp, #16]
  40cdf4:	468a      	mov	sl, r1
  40cdf6:	f104 0801 	add.w	r8, r4, #1
  40cdfa:	4608      	mov	r0, r1
  40cdfc:	4665      	mov	r5, ip
  40cdfe:	f108 0801 	add.w	r8, r8, #1
  40ce02:	f1a3 0220 	sub.w	r2, r3, #32
  40ce06:	2a58      	cmp	r2, #88	; 0x58
  40ce08:	f200 82d5 	bhi.w	40d3b6 <_vfiprintf_r+0x692>
  40ce0c:	e8df f012 	tbh	[pc, r2, lsl #1]
  40ce10:	02d302c7 	.word	0x02d302c7
  40ce14:	02ce02d3 	.word	0x02ce02d3
  40ce18:	02d302d3 	.word	0x02d302d3
  40ce1c:	02d302d3 	.word	0x02d302d3
  40ce20:	02d302d3 	.word	0x02d302d3
  40ce24:	028b027e 	.word	0x028b027e
  40ce28:	008402d3 	.word	0x008402d3
  40ce2c:	02d3028f 	.word	0x02d3028f
  40ce30:	0194012b 	.word	0x0194012b
  40ce34:	01940194 	.word	0x01940194
  40ce38:	01940194 	.word	0x01940194
  40ce3c:	01940194 	.word	0x01940194
  40ce40:	01940194 	.word	0x01940194
  40ce44:	02d302d3 	.word	0x02d302d3
  40ce48:	02d302d3 	.word	0x02d302d3
  40ce4c:	02d302d3 	.word	0x02d302d3
  40ce50:	02d302d3 	.word	0x02d302d3
  40ce54:	02d302d3 	.word	0x02d302d3
  40ce58:	02d30130 	.word	0x02d30130
  40ce5c:	02d302d3 	.word	0x02d302d3
  40ce60:	02d302d3 	.word	0x02d302d3
  40ce64:	02d302d3 	.word	0x02d302d3
  40ce68:	02d302d3 	.word	0x02d302d3
  40ce6c:	017902d3 	.word	0x017902d3
  40ce70:	02d302d3 	.word	0x02d302d3
  40ce74:	02d302d3 	.word	0x02d302d3
  40ce78:	01a202d3 	.word	0x01a202d3
  40ce7c:	02d302d3 	.word	0x02d302d3
  40ce80:	02d301bd 	.word	0x02d301bd
  40ce84:	02d302d3 	.word	0x02d302d3
  40ce88:	02d302d3 	.word	0x02d302d3
  40ce8c:	02d302d3 	.word	0x02d302d3
  40ce90:	02d302d3 	.word	0x02d302d3
  40ce94:	01e202d3 	.word	0x01e202d3
  40ce98:	02d301f8 	.word	0x02d301f8
  40ce9c:	02d302d3 	.word	0x02d302d3
  40cea0:	01f80214 	.word	0x01f80214
  40cea4:	02d302d3 	.word	0x02d302d3
  40cea8:	02d30219 	.word	0x02d30219
  40ceac:	00890226 	.word	0x00890226
  40ceb0:	02790264 	.word	0x02790264
  40ceb4:	023802d3 	.word	0x023802d3
  40ceb8:	011902d3 	.word	0x011902d3
  40cebc:	02d302d3 	.word	0x02d302d3
  40cec0:	02ab      	.short	0x02ab
  40cec2:	3608      	adds	r6, #8
  40cec4:	9809      	ldr	r0, [sp, #36]	; 0x24
  40cec6:	4428      	add	r0, r5
  40cec8:	9009      	str	r0, [sp, #36]	; 0x24
  40ceca:	e786      	b.n	40cdda <_vfiprintf_r+0xb6>
  40cecc:	9806      	ldr	r0, [sp, #24]
  40cece:	9902      	ldr	r1, [sp, #8]
  40ced0:	f000 fda2 	bl	40da18 <__swsetup_r>
  40ced4:	b9b0      	cbnz	r0, 40cf04 <_vfiprintf_r+0x1e0>
  40ced6:	9d02      	ldr	r5, [sp, #8]
  40ced8:	89aa      	ldrh	r2, [r5, #12]
  40ceda:	f002 021a 	and.w	r2, r2, #26
  40cede:	2a0a      	cmp	r2, #10
  40cee0:	f47f af49 	bne.w	40cd76 <_vfiprintf_r+0x52>
  40cee4:	f8dd b008 	ldr.w	fp, [sp, #8]
  40cee8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40ceec:	2b00      	cmp	r3, #0
  40ceee:	f6ff af42 	blt.w	40cd76 <_vfiprintf_r+0x52>
  40cef2:	9806      	ldr	r0, [sp, #24]
  40cef4:	4659      	mov	r1, fp
  40cef6:	4642      	mov	r2, r8
  40cef8:	4623      	mov	r3, r4
  40cefa:	f000 fd3d 	bl	40d978 <__sbprintf>
  40cefe:	b031      	add	sp, #196	; 0xc4
  40cf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cf04:	f04f 30ff 	mov.w	r0, #4294967295
  40cf08:	b031      	add	sp, #196	; 0xc4
  40cf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cf0e:	f001 fe81 	bl	40ec14 <__sinit>
  40cf12:	e714      	b.n	40cd3e <_vfiprintf_r+0x1a>
  40cf14:	4240      	negs	r0, r0
  40cf16:	9308      	str	r3, [sp, #32]
  40cf18:	f04a 0a04 	orr.w	sl, sl, #4
  40cf1c:	f898 3000 	ldrb.w	r3, [r8]
  40cf20:	e76d      	b.n	40cdfe <_vfiprintf_r+0xda>
  40cf22:	f01a 0320 	ands.w	r3, sl, #32
  40cf26:	9004      	str	r0, [sp, #16]
  40cf28:	46ac      	mov	ip, r5
  40cf2a:	f000 80f2 	beq.w	40d112 <_vfiprintf_r+0x3ee>
  40cf2e:	f8dd b020 	ldr.w	fp, [sp, #32]
  40cf32:	f10b 0307 	add.w	r3, fp, #7
  40cf36:	f023 0307 	bic.w	r3, r3, #7
  40cf3a:	f103 0408 	add.w	r4, r3, #8
  40cf3e:	9408      	str	r4, [sp, #32]
  40cf40:	e9d3 4500 	ldrd	r4, r5, [r3]
  40cf44:	2300      	movs	r3, #0
  40cf46:	f04f 0000 	mov.w	r0, #0
  40cf4a:	2100      	movs	r1, #0
  40cf4c:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
  40cf50:	f8cd c014 	str.w	ip, [sp, #20]
  40cf54:	9107      	str	r1, [sp, #28]
  40cf56:	f1bc 0f00 	cmp.w	ip, #0
  40cf5a:	bfa8      	it	ge
  40cf5c:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  40cf60:	ea54 0205 	orrs.w	r2, r4, r5
  40cf64:	f040 80ad 	bne.w	40d0c2 <_vfiprintf_r+0x39e>
  40cf68:	f1bc 0f00 	cmp.w	ip, #0
  40cf6c:	f040 80a9 	bne.w	40d0c2 <_vfiprintf_r+0x39e>
  40cf70:	2b00      	cmp	r3, #0
  40cf72:	f040 83bc 	bne.w	40d6ee <_vfiprintf_r+0x9ca>
  40cf76:	f01a 0f01 	tst.w	sl, #1
  40cf7a:	f000 83b8 	beq.w	40d6ee <_vfiprintf_r+0x9ca>
  40cf7e:	af30      	add	r7, sp, #192	; 0xc0
  40cf80:	2330      	movs	r3, #48	; 0x30
  40cf82:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40cf86:	ebc7 0409 	rsb	r4, r7, r9
  40cf8a:	9405      	str	r4, [sp, #20]
  40cf8c:	f8dd b014 	ldr.w	fp, [sp, #20]
  40cf90:	9c07      	ldr	r4, [sp, #28]
  40cf92:	45e3      	cmp	fp, ip
  40cf94:	bfb8      	it	lt
  40cf96:	46e3      	movlt	fp, ip
  40cf98:	f8cd b00c 	str.w	fp, [sp, #12]
  40cf9c:	b11c      	cbz	r4, 40cfa6 <_vfiprintf_r+0x282>
  40cf9e:	f10b 0b01 	add.w	fp, fp, #1
  40cfa2:	f8cd b00c 	str.w	fp, [sp, #12]
  40cfa6:	f01a 0502 	ands.w	r5, sl, #2
  40cfaa:	9507      	str	r5, [sp, #28]
  40cfac:	d005      	beq.n	40cfba <_vfiprintf_r+0x296>
  40cfae:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40cfb2:	f10b 0b02 	add.w	fp, fp, #2
  40cfb6:	f8cd b00c 	str.w	fp, [sp, #12]
  40cfba:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
  40cfbe:	930b      	str	r3, [sp, #44]	; 0x2c
  40cfc0:	f040 8217 	bne.w	40d3f2 <_vfiprintf_r+0x6ce>
  40cfc4:	9d04      	ldr	r5, [sp, #16]
  40cfc6:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40cfca:	ebcb 0405 	rsb	r4, fp, r5
  40cfce:	2c00      	cmp	r4, #0
  40cfd0:	f340 820f 	ble.w	40d3f2 <_vfiprintf_r+0x6ce>
  40cfd4:	2c10      	cmp	r4, #16
  40cfd6:	f340 8488 	ble.w	40d8ea <_vfiprintf_r+0xbc6>
  40cfda:	4dbd      	ldr	r5, [pc, #756]	; (40d2d0 <_vfiprintf_r+0x5ac>)
  40cfdc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40cfde:	9814      	ldr	r0, [sp, #80]	; 0x50
  40cfe0:	462b      	mov	r3, r5
  40cfe2:	f04f 0b10 	mov.w	fp, #16
  40cfe6:	4625      	mov	r5, r4
  40cfe8:	4664      	mov	r4, ip
  40cfea:	46b4      	mov	ip, r6
  40cfec:	461e      	mov	r6, r3
  40cfee:	e006      	b.n	40cffe <_vfiprintf_r+0x2da>
  40cff0:	1c83      	adds	r3, r0, #2
  40cff2:	f10c 0c08 	add.w	ip, ip, #8
  40cff6:	4608      	mov	r0, r1
  40cff8:	3d10      	subs	r5, #16
  40cffa:	2d10      	cmp	r5, #16
  40cffc:	dd11      	ble.n	40d022 <_vfiprintf_r+0x2fe>
  40cffe:	1c41      	adds	r1, r0, #1
  40d000:	3210      	adds	r2, #16
  40d002:	2907      	cmp	r1, #7
  40d004:	9215      	str	r2, [sp, #84]	; 0x54
  40d006:	e88c 0840 	stmia.w	ip, {r6, fp}
  40d00a:	9114      	str	r1, [sp, #80]	; 0x50
  40d00c:	ddf0      	ble.n	40cff0 <_vfiprintf_r+0x2cc>
  40d00e:	2a00      	cmp	r2, #0
  40d010:	f040 81e2 	bne.w	40d3d8 <_vfiprintf_r+0x6b4>
  40d014:	3d10      	subs	r5, #16
  40d016:	2d10      	cmp	r5, #16
  40d018:	f04f 0301 	mov.w	r3, #1
  40d01c:	4610      	mov	r0, r2
  40d01e:	46cc      	mov	ip, r9
  40d020:	dced      	bgt.n	40cffe <_vfiprintf_r+0x2da>
  40d022:	4631      	mov	r1, r6
  40d024:	4666      	mov	r6, ip
  40d026:	46a4      	mov	ip, r4
  40d028:	462c      	mov	r4, r5
  40d02a:	460d      	mov	r5, r1
  40d02c:	4422      	add	r2, r4
  40d02e:	2b07      	cmp	r3, #7
  40d030:	9215      	str	r2, [sp, #84]	; 0x54
  40d032:	6035      	str	r5, [r6, #0]
  40d034:	6074      	str	r4, [r6, #4]
  40d036:	9314      	str	r3, [sp, #80]	; 0x50
  40d038:	f300 8369 	bgt.w	40d70e <_vfiprintf_r+0x9ea>
  40d03c:	3608      	adds	r6, #8
  40d03e:	1c59      	adds	r1, r3, #1
  40d040:	e1da      	b.n	40d3f8 <_vfiprintf_r+0x6d4>
  40d042:	f01a 0f20 	tst.w	sl, #32
  40d046:	9004      	str	r0, [sp, #16]
  40d048:	46ac      	mov	ip, r5
  40d04a:	f000 808b 	beq.w	40d164 <_vfiprintf_r+0x440>
  40d04e:	9d08      	ldr	r5, [sp, #32]
  40d050:	1deb      	adds	r3, r5, #7
  40d052:	f023 0307 	bic.w	r3, r3, #7
  40d056:	f103 0b08 	add.w	fp, r3, #8
  40d05a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d05e:	f8cd b020 	str.w	fp, [sp, #32]
  40d062:	2301      	movs	r3, #1
  40d064:	e76f      	b.n	40cf46 <_vfiprintf_r+0x222>
  40d066:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
  40d06a:	f898 3000 	ldrb.w	r3, [r8]
  40d06e:	e6c6      	b.n	40cdfe <_vfiprintf_r+0xda>
  40d070:	f04a 0a10 	orr.w	sl, sl, #16
  40d074:	f01a 0f20 	tst.w	sl, #32
  40d078:	9004      	str	r0, [sp, #16]
  40d07a:	46ac      	mov	ip, r5
  40d07c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40d080:	f000 80c6 	beq.w	40d210 <_vfiprintf_r+0x4ec>
  40d084:	9c08      	ldr	r4, [sp, #32]
  40d086:	1de1      	adds	r1, r4, #7
  40d088:	f021 0107 	bic.w	r1, r1, #7
  40d08c:	e9d1 2300 	ldrd	r2, r3, [r1]
  40d090:	3108      	adds	r1, #8
  40d092:	9108      	str	r1, [sp, #32]
  40d094:	4614      	mov	r4, r2
  40d096:	461d      	mov	r5, r3
  40d098:	2a00      	cmp	r2, #0
  40d09a:	f173 0000 	sbcs.w	r0, r3, #0
  40d09e:	f2c0 83cd 	blt.w	40d83c <_vfiprintf_r+0xb18>
  40d0a2:	f1bc 0f00 	cmp.w	ip, #0
  40d0a6:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
  40d0aa:	9107      	str	r1, [sp, #28]
  40d0ac:	bfa8      	it	ge
  40d0ae:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  40d0b2:	ea54 0205 	orrs.w	r2, r4, r5
  40d0b6:	f8cd c014 	str.w	ip, [sp, #20]
  40d0ba:	f04f 0301 	mov.w	r3, #1
  40d0be:	f43f af53 	beq.w	40cf68 <_vfiprintf_r+0x244>
  40d0c2:	2b01      	cmp	r3, #1
  40d0c4:	f000 8315 	beq.w	40d6f2 <_vfiprintf_r+0x9ce>
  40d0c8:	2b02      	cmp	r3, #2
  40d0ca:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
  40d0ce:	f040 8248 	bne.w	40d562 <_vfiprintf_r+0x83e>
  40d0d2:	980a      	ldr	r0, [sp, #40]	; 0x28
  40d0d4:	4619      	mov	r1, r3
  40d0d6:	0922      	lsrs	r2, r4, #4
  40d0d8:	f004 040f 	and.w	r4, r4, #15
  40d0dc:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  40d0e0:	460f      	mov	r7, r1
  40d0e2:	092b      	lsrs	r3, r5, #4
  40d0e4:	5d01      	ldrb	r1, [r0, r4]
  40d0e6:	7039      	strb	r1, [r7, #0]
  40d0e8:	ea52 0b03 	orrs.w	fp, r2, r3
  40d0ec:	4614      	mov	r4, r2
  40d0ee:	461d      	mov	r5, r3
  40d0f0:	f107 31ff 	add.w	r1, r7, #4294967295
  40d0f4:	d1ef      	bne.n	40d0d6 <_vfiprintf_r+0x3b2>
  40d0f6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40d0fa:	ebc7 0309 	rsb	r3, r7, r9
  40d0fe:	9305      	str	r3, [sp, #20]
  40d100:	e744      	b.n	40cf8c <_vfiprintf_r+0x268>
  40d102:	f04a 0a10 	orr.w	sl, sl, #16
  40d106:	f01a 0320 	ands.w	r3, sl, #32
  40d10a:	9004      	str	r0, [sp, #16]
  40d10c:	46ac      	mov	ip, r5
  40d10e:	f47f af0e 	bne.w	40cf2e <_vfiprintf_r+0x20a>
  40d112:	f01a 0210 	ands.w	r2, sl, #16
  40d116:	f040 830f 	bne.w	40d738 <_vfiprintf_r+0xa14>
  40d11a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
  40d11e:	f000 830b 	beq.w	40d738 <_vfiprintf_r+0xa14>
  40d122:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d126:	f8bb 4000 	ldrh.w	r4, [fp]
  40d12a:	f10b 0b04 	add.w	fp, fp, #4
  40d12e:	4613      	mov	r3, r2
  40d130:	2500      	movs	r5, #0
  40d132:	f8cd b020 	str.w	fp, [sp, #32]
  40d136:	e706      	b.n	40cf46 <_vfiprintf_r+0x222>
  40d138:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40d13c:	2000      	movs	r0, #0
  40d13e:	f818 3b01 	ldrb.w	r3, [r8], #1
  40d142:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40d146:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  40d14a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40d14e:	2a09      	cmp	r2, #9
  40d150:	d9f5      	bls.n	40d13e <_vfiprintf_r+0x41a>
  40d152:	e656      	b.n	40ce02 <_vfiprintf_r+0xde>
  40d154:	f04a 0a10 	orr.w	sl, sl, #16
  40d158:	f01a 0f20 	tst.w	sl, #32
  40d15c:	9004      	str	r0, [sp, #16]
  40d15e:	46ac      	mov	ip, r5
  40d160:	f47f af75 	bne.w	40d04e <_vfiprintf_r+0x32a>
  40d164:	f01a 0f10 	tst.w	sl, #16
  40d168:	f040 82ec 	bne.w	40d744 <_vfiprintf_r+0xa20>
  40d16c:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40d170:	f000 82e8 	beq.w	40d744 <_vfiprintf_r+0xa20>
  40d174:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d178:	f8bb 4000 	ldrh.w	r4, [fp]
  40d17c:	f10b 0b04 	add.w	fp, fp, #4
  40d180:	2500      	movs	r5, #0
  40d182:	2301      	movs	r3, #1
  40d184:	f8cd b020 	str.w	fp, [sp, #32]
  40d188:	e6dd      	b.n	40cf46 <_vfiprintf_r+0x222>
  40d18a:	46ac      	mov	ip, r5
  40d18c:	f01a 0f20 	tst.w	sl, #32
  40d190:	4d50      	ldr	r5, [pc, #320]	; (40d2d4 <_vfiprintf_r+0x5b0>)
  40d192:	9004      	str	r0, [sp, #16]
  40d194:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40d198:	950a      	str	r5, [sp, #40]	; 0x28
  40d19a:	f000 80ee 	beq.w	40d37a <_vfiprintf_r+0x656>
  40d19e:	9d08      	ldr	r5, [sp, #32]
  40d1a0:	1dea      	adds	r2, r5, #7
  40d1a2:	f022 0207 	bic.w	r2, r2, #7
  40d1a6:	e9d2 4500 	ldrd	r4, r5, [r2]
  40d1aa:	f102 0b08 	add.w	fp, r2, #8
  40d1ae:	f8cd b020 	str.w	fp, [sp, #32]
  40d1b2:	f01a 0f01 	tst.w	sl, #1
  40d1b6:	f000 82a8 	beq.w	40d70a <_vfiprintf_r+0x9e6>
  40d1ba:	ea54 0b05 	orrs.w	fp, r4, r5
  40d1be:	f000 82a4 	beq.w	40d70a <_vfiprintf_r+0x9e6>
  40d1c2:	2230      	movs	r2, #48	; 0x30
  40d1c4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  40d1c8:	f04a 0a02 	orr.w	sl, sl, #2
  40d1cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40d1d0:	2302      	movs	r3, #2
  40d1d2:	e6b8      	b.n	40cf46 <_vfiprintf_r+0x222>
  40d1d4:	9b08      	ldr	r3, [sp, #32]
  40d1d6:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d1da:	681b      	ldr	r3, [r3, #0]
  40d1dc:	9004      	str	r0, [sp, #16]
  40d1de:	2401      	movs	r4, #1
  40d1e0:	f04f 0500 	mov.w	r5, #0
  40d1e4:	f10b 0b04 	add.w	fp, fp, #4
  40d1e8:	9403      	str	r4, [sp, #12]
  40d1ea:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  40d1ee:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  40d1f2:	f8cd b020 	str.w	fp, [sp, #32]
  40d1f6:	9405      	str	r4, [sp, #20]
  40d1f8:	af16      	add	r7, sp, #88	; 0x58
  40d1fa:	f04f 0c00 	mov.w	ip, #0
  40d1fe:	e6d2      	b.n	40cfa6 <_vfiprintf_r+0x282>
  40d200:	f01a 0f20 	tst.w	sl, #32
  40d204:	9004      	str	r0, [sp, #16]
  40d206:	46ac      	mov	ip, r5
  40d208:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40d20c:	f47f af3a 	bne.w	40d084 <_vfiprintf_r+0x360>
  40d210:	f01a 0f10 	tst.w	sl, #16
  40d214:	f040 82a4 	bne.w	40d760 <_vfiprintf_r+0xa3c>
  40d218:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40d21c:	f000 82a0 	beq.w	40d760 <_vfiprintf_r+0xa3c>
  40d220:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d224:	f9bb 4000 	ldrsh.w	r4, [fp]
  40d228:	f10b 0b04 	add.w	fp, fp, #4
  40d22c:	17e5      	asrs	r5, r4, #31
  40d22e:	4622      	mov	r2, r4
  40d230:	462b      	mov	r3, r5
  40d232:	f8cd b020 	str.w	fp, [sp, #32]
  40d236:	e72f      	b.n	40d098 <_vfiprintf_r+0x374>
  40d238:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
  40d23c:	f898 3000 	ldrb.w	r3, [r8]
  40d240:	e5dd      	b.n	40cdfe <_vfiprintf_r+0xda>
  40d242:	f898 3000 	ldrb.w	r3, [r8]
  40d246:	4642      	mov	r2, r8
  40d248:	2b6c      	cmp	r3, #108	; 0x6c
  40d24a:	bf03      	ittte	eq
  40d24c:	f108 0801 	addeq.w	r8, r8, #1
  40d250:	f04a 0a20 	orreq.w	sl, sl, #32
  40d254:	7853      	ldrbeq	r3, [r2, #1]
  40d256:	f04a 0a10 	orrne.w	sl, sl, #16
  40d25a:	e5d0      	b.n	40cdfe <_vfiprintf_r+0xda>
  40d25c:	f01a 0f20 	tst.w	sl, #32
  40d260:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40d264:	f000 82f8 	beq.w	40d858 <_vfiprintf_r+0xb34>
  40d268:	9c08      	ldr	r4, [sp, #32]
  40d26a:	6821      	ldr	r1, [r4, #0]
  40d26c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d26e:	17e5      	asrs	r5, r4, #31
  40d270:	462b      	mov	r3, r5
  40d272:	9d08      	ldr	r5, [sp, #32]
  40d274:	4622      	mov	r2, r4
  40d276:	3504      	adds	r5, #4
  40d278:	9508      	str	r5, [sp, #32]
  40d27a:	e9c1 2300 	strd	r2, r3, [r1]
  40d27e:	e584      	b.n	40cd8a <_vfiprintf_r+0x66>
  40d280:	9c08      	ldr	r4, [sp, #32]
  40d282:	9004      	str	r0, [sp, #16]
  40d284:	6827      	ldr	r7, [r4, #0]
  40d286:	46ac      	mov	ip, r5
  40d288:	f04f 0500 	mov.w	r5, #0
  40d28c:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  40d290:	3404      	adds	r4, #4
  40d292:	2f00      	cmp	r7, #0
  40d294:	f000 8334 	beq.w	40d900 <_vfiprintf_r+0xbdc>
  40d298:	f1bc 0f00 	cmp.w	ip, #0
  40d29c:	4638      	mov	r0, r7
  40d29e:	f2c0 8308 	blt.w	40d8b2 <_vfiprintf_r+0xb8e>
  40d2a2:	4662      	mov	r2, ip
  40d2a4:	2100      	movs	r1, #0
  40d2a6:	f8cd c004 	str.w	ip, [sp, #4]
  40d2aa:	f002 fbfd 	bl	40faa8 <memchr>
  40d2ae:	f8dd c004 	ldr.w	ip, [sp, #4]
  40d2b2:	2800      	cmp	r0, #0
  40d2b4:	f000 833c 	beq.w	40d930 <_vfiprintf_r+0xc0c>
  40d2b8:	1bc0      	subs	r0, r0, r7
  40d2ba:	4560      	cmp	r0, ip
  40d2bc:	bfa8      	it	ge
  40d2be:	4660      	movge	r0, ip
  40d2c0:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  40d2c4:	9005      	str	r0, [sp, #20]
  40d2c6:	9408      	str	r4, [sp, #32]
  40d2c8:	9507      	str	r5, [sp, #28]
  40d2ca:	f04f 0c00 	mov.w	ip, #0
  40d2ce:	e65d      	b.n	40cf8c <_vfiprintf_r+0x268>
  40d2d0:	00413728 	.word	0x00413728
  40d2d4:	004136a8 	.word	0x004136a8
  40d2d8:	9a08      	ldr	r2, [sp, #32]
  40d2da:	9004      	str	r0, [sp, #16]
  40d2dc:	2330      	movs	r3, #48	; 0x30
  40d2de:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40d2e2:	f102 0b04 	add.w	fp, r2, #4
  40d2e6:	2378      	movs	r3, #120	; 0x78
  40d2e8:	48af      	ldr	r0, [pc, #700]	; (40d5a8 <_vfiprintf_r+0x884>)
  40d2ea:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  40d2ee:	46ac      	mov	ip, r5
  40d2f0:	6814      	ldr	r4, [r2, #0]
  40d2f2:	f8cd b020 	str.w	fp, [sp, #32]
  40d2f6:	f04a 0a02 	orr.w	sl, sl, #2
  40d2fa:	2500      	movs	r5, #0
  40d2fc:	900a      	str	r0, [sp, #40]	; 0x28
  40d2fe:	2302      	movs	r3, #2
  40d300:	e621      	b.n	40cf46 <_vfiprintf_r+0x222>
  40d302:	f04a 0a20 	orr.w	sl, sl, #32
  40d306:	f898 3000 	ldrb.w	r3, [r8]
  40d30a:	e578      	b.n	40cdfe <_vfiprintf_r+0xda>
  40d30c:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d310:	f8db 0000 	ldr.w	r0, [fp]
  40d314:	2800      	cmp	r0, #0
  40d316:	f10b 0304 	add.w	r3, fp, #4
  40d31a:	f6ff adfb 	blt.w	40cf14 <_vfiprintf_r+0x1f0>
  40d31e:	9308      	str	r3, [sp, #32]
  40d320:	f898 3000 	ldrb.w	r3, [r8]
  40d324:	e56b      	b.n	40cdfe <_vfiprintf_r+0xda>
  40d326:	f898 3000 	ldrb.w	r3, [r8]
  40d32a:	212b      	movs	r1, #43	; 0x2b
  40d32c:	e567      	b.n	40cdfe <_vfiprintf_r+0xda>
  40d32e:	f898 3000 	ldrb.w	r3, [r8]
  40d332:	2b2a      	cmp	r3, #42	; 0x2a
  40d334:	f108 0401 	add.w	r4, r8, #1
  40d338:	f000 8309 	beq.w	40d94e <_vfiprintf_r+0xc2a>
  40d33c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40d340:	2a09      	cmp	r2, #9
  40d342:	bf98      	it	ls
  40d344:	2500      	movls	r5, #0
  40d346:	f200 82fe 	bhi.w	40d946 <_vfiprintf_r+0xc22>
  40d34a:	f814 3b01 	ldrb.w	r3, [r4], #1
  40d34e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40d352:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40d356:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40d35a:	2a09      	cmp	r2, #9
  40d35c:	d9f5      	bls.n	40d34a <_vfiprintf_r+0x626>
  40d35e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  40d362:	46a0      	mov	r8, r4
  40d364:	e54d      	b.n	40ce02 <_vfiprintf_r+0xde>
  40d366:	4c90      	ldr	r4, [pc, #576]	; (40d5a8 <_vfiprintf_r+0x884>)
  40d368:	9004      	str	r0, [sp, #16]
  40d36a:	f01a 0f20 	tst.w	sl, #32
  40d36e:	46ac      	mov	ip, r5
  40d370:	940a      	str	r4, [sp, #40]	; 0x28
  40d372:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40d376:	f47f af12 	bne.w	40d19e <_vfiprintf_r+0x47a>
  40d37a:	f01a 0f10 	tst.w	sl, #16
  40d37e:	f040 81e9 	bne.w	40d754 <_vfiprintf_r+0xa30>
  40d382:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40d386:	f000 81e5 	beq.w	40d754 <_vfiprintf_r+0xa30>
  40d38a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d38e:	f8bb 4000 	ldrh.w	r4, [fp]
  40d392:	f10b 0b04 	add.w	fp, fp, #4
  40d396:	2500      	movs	r5, #0
  40d398:	f8cd b020 	str.w	fp, [sp, #32]
  40d39c:	e709      	b.n	40d1b2 <_vfiprintf_r+0x48e>
  40d39e:	f898 3000 	ldrb.w	r3, [r8]
  40d3a2:	2900      	cmp	r1, #0
  40d3a4:	f47f ad2b 	bne.w	40cdfe <_vfiprintf_r+0xda>
  40d3a8:	2120      	movs	r1, #32
  40d3aa:	e528      	b.n	40cdfe <_vfiprintf_r+0xda>
  40d3ac:	f04a 0a01 	orr.w	sl, sl, #1
  40d3b0:	f898 3000 	ldrb.w	r3, [r8]
  40d3b4:	e523      	b.n	40cdfe <_vfiprintf_r+0xda>
  40d3b6:	9004      	str	r0, [sp, #16]
  40d3b8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  40d3bc:	2b00      	cmp	r3, #0
  40d3be:	f000 80f9 	beq.w	40d5b4 <_vfiprintf_r+0x890>
  40d3c2:	2501      	movs	r5, #1
  40d3c4:	f04f 0b00 	mov.w	fp, #0
  40d3c8:	9503      	str	r5, [sp, #12]
  40d3ca:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  40d3ce:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  40d3d2:	9505      	str	r5, [sp, #20]
  40d3d4:	af16      	add	r7, sp, #88	; 0x58
  40d3d6:	e710      	b.n	40d1fa <_vfiprintf_r+0x4d6>
  40d3d8:	9806      	ldr	r0, [sp, #24]
  40d3da:	9902      	ldr	r1, [sp, #8]
  40d3dc:	aa13      	add	r2, sp, #76	; 0x4c
  40d3de:	f7ff fc65 	bl	40ccac <__sprint_r.part.0>
  40d3e2:	2800      	cmp	r0, #0
  40d3e4:	f040 80ed 	bne.w	40d5c2 <_vfiprintf_r+0x89e>
  40d3e8:	9814      	ldr	r0, [sp, #80]	; 0x50
  40d3ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d3ec:	1c43      	adds	r3, r0, #1
  40d3ee:	46cc      	mov	ip, r9
  40d3f0:	e602      	b.n	40cff8 <_vfiprintf_r+0x2d4>
  40d3f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d3f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d3f6:	1c59      	adds	r1, r3, #1
  40d3f8:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
  40d3fc:	b168      	cbz	r0, 40d41a <_vfiprintf_r+0x6f6>
  40d3fe:	3201      	adds	r2, #1
  40d400:	f10d 0047 	add.w	r0, sp, #71	; 0x47
  40d404:	2301      	movs	r3, #1
  40d406:	2907      	cmp	r1, #7
  40d408:	9215      	str	r2, [sp, #84]	; 0x54
  40d40a:	9114      	str	r1, [sp, #80]	; 0x50
  40d40c:	e886 0009 	stmia.w	r6, {r0, r3}
  40d410:	f300 8160 	bgt.w	40d6d4 <_vfiprintf_r+0x9b0>
  40d414:	460b      	mov	r3, r1
  40d416:	3608      	adds	r6, #8
  40d418:	3101      	adds	r1, #1
  40d41a:	9c07      	ldr	r4, [sp, #28]
  40d41c:	b164      	cbz	r4, 40d438 <_vfiprintf_r+0x714>
  40d41e:	3202      	adds	r2, #2
  40d420:	a812      	add	r0, sp, #72	; 0x48
  40d422:	2302      	movs	r3, #2
  40d424:	2907      	cmp	r1, #7
  40d426:	9215      	str	r2, [sp, #84]	; 0x54
  40d428:	9114      	str	r1, [sp, #80]	; 0x50
  40d42a:	e886 0009 	stmia.w	r6, {r0, r3}
  40d42e:	f300 8157 	bgt.w	40d6e0 <_vfiprintf_r+0x9bc>
  40d432:	460b      	mov	r3, r1
  40d434:	3608      	adds	r6, #8
  40d436:	3101      	adds	r1, #1
  40d438:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40d43a:	2d80      	cmp	r5, #128	; 0x80
  40d43c:	f000 8101 	beq.w	40d642 <_vfiprintf_r+0x91e>
  40d440:	9d05      	ldr	r5, [sp, #20]
  40d442:	ebc5 040c 	rsb	r4, r5, ip
  40d446:	2c00      	cmp	r4, #0
  40d448:	dd2f      	ble.n	40d4aa <_vfiprintf_r+0x786>
  40d44a:	2c10      	cmp	r4, #16
  40d44c:	4d57      	ldr	r5, [pc, #348]	; (40d5ac <_vfiprintf_r+0x888>)
  40d44e:	dd22      	ble.n	40d496 <_vfiprintf_r+0x772>
  40d450:	4630      	mov	r0, r6
  40d452:	f04f 0b10 	mov.w	fp, #16
  40d456:	462e      	mov	r6, r5
  40d458:	4625      	mov	r5, r4
  40d45a:	9c06      	ldr	r4, [sp, #24]
  40d45c:	e006      	b.n	40d46c <_vfiprintf_r+0x748>
  40d45e:	f103 0c02 	add.w	ip, r3, #2
  40d462:	3008      	adds	r0, #8
  40d464:	460b      	mov	r3, r1
  40d466:	3d10      	subs	r5, #16
  40d468:	2d10      	cmp	r5, #16
  40d46a:	dd10      	ble.n	40d48e <_vfiprintf_r+0x76a>
  40d46c:	1c59      	adds	r1, r3, #1
  40d46e:	3210      	adds	r2, #16
  40d470:	2907      	cmp	r1, #7
  40d472:	9215      	str	r2, [sp, #84]	; 0x54
  40d474:	e880 0840 	stmia.w	r0, {r6, fp}
  40d478:	9114      	str	r1, [sp, #80]	; 0x50
  40d47a:	ddf0      	ble.n	40d45e <_vfiprintf_r+0x73a>
  40d47c:	2a00      	cmp	r2, #0
  40d47e:	d163      	bne.n	40d548 <_vfiprintf_r+0x824>
  40d480:	3d10      	subs	r5, #16
  40d482:	2d10      	cmp	r5, #16
  40d484:	f04f 0c01 	mov.w	ip, #1
  40d488:	4613      	mov	r3, r2
  40d48a:	4648      	mov	r0, r9
  40d48c:	dcee      	bgt.n	40d46c <_vfiprintf_r+0x748>
  40d48e:	462c      	mov	r4, r5
  40d490:	4661      	mov	r1, ip
  40d492:	4635      	mov	r5, r6
  40d494:	4606      	mov	r6, r0
  40d496:	4422      	add	r2, r4
  40d498:	2907      	cmp	r1, #7
  40d49a:	9215      	str	r2, [sp, #84]	; 0x54
  40d49c:	6035      	str	r5, [r6, #0]
  40d49e:	6074      	str	r4, [r6, #4]
  40d4a0:	9114      	str	r1, [sp, #80]	; 0x50
  40d4a2:	f300 80c1 	bgt.w	40d628 <_vfiprintf_r+0x904>
  40d4a6:	3608      	adds	r6, #8
  40d4a8:	3101      	adds	r1, #1
  40d4aa:	9d05      	ldr	r5, [sp, #20]
  40d4ac:	6037      	str	r7, [r6, #0]
  40d4ae:	442a      	add	r2, r5
  40d4b0:	2907      	cmp	r1, #7
  40d4b2:	9215      	str	r2, [sp, #84]	; 0x54
  40d4b4:	6075      	str	r5, [r6, #4]
  40d4b6:	9114      	str	r1, [sp, #80]	; 0x50
  40d4b8:	f340 80c1 	ble.w	40d63e <_vfiprintf_r+0x91a>
  40d4bc:	2a00      	cmp	r2, #0
  40d4be:	f040 8130 	bne.w	40d722 <_vfiprintf_r+0x9fe>
  40d4c2:	9214      	str	r2, [sp, #80]	; 0x50
  40d4c4:	464e      	mov	r6, r9
  40d4c6:	f01a 0f04 	tst.w	sl, #4
  40d4ca:	f000 808b 	beq.w	40d5e4 <_vfiprintf_r+0x8c0>
  40d4ce:	9d04      	ldr	r5, [sp, #16]
  40d4d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40d4d4:	ebcb 0405 	rsb	r4, fp, r5
  40d4d8:	2c00      	cmp	r4, #0
  40d4da:	f340 8083 	ble.w	40d5e4 <_vfiprintf_r+0x8c0>
  40d4de:	2c10      	cmp	r4, #16
  40d4e0:	f340 8222 	ble.w	40d928 <_vfiprintf_r+0xc04>
  40d4e4:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d4e6:	4d32      	ldr	r5, [pc, #200]	; (40d5b0 <_vfiprintf_r+0x88c>)
  40d4e8:	f8dd a018 	ldr.w	sl, [sp, #24]
  40d4ec:	f8dd b008 	ldr.w	fp, [sp, #8]
  40d4f0:	2710      	movs	r7, #16
  40d4f2:	e005      	b.n	40d500 <_vfiprintf_r+0x7dc>
  40d4f4:	1c88      	adds	r0, r1, #2
  40d4f6:	3608      	adds	r6, #8
  40d4f8:	4619      	mov	r1, r3
  40d4fa:	3c10      	subs	r4, #16
  40d4fc:	2c10      	cmp	r4, #16
  40d4fe:	dd10      	ble.n	40d522 <_vfiprintf_r+0x7fe>
  40d500:	1c4b      	adds	r3, r1, #1
  40d502:	3210      	adds	r2, #16
  40d504:	2b07      	cmp	r3, #7
  40d506:	9215      	str	r2, [sp, #84]	; 0x54
  40d508:	e886 00a0 	stmia.w	r6, {r5, r7}
  40d50c:	9314      	str	r3, [sp, #80]	; 0x50
  40d50e:	ddf1      	ble.n	40d4f4 <_vfiprintf_r+0x7d0>
  40d510:	2a00      	cmp	r2, #0
  40d512:	d17d      	bne.n	40d610 <_vfiprintf_r+0x8ec>
  40d514:	3c10      	subs	r4, #16
  40d516:	2c10      	cmp	r4, #16
  40d518:	f04f 0001 	mov.w	r0, #1
  40d51c:	4611      	mov	r1, r2
  40d51e:	464e      	mov	r6, r9
  40d520:	dcee      	bgt.n	40d500 <_vfiprintf_r+0x7dc>
  40d522:	4422      	add	r2, r4
  40d524:	2807      	cmp	r0, #7
  40d526:	9215      	str	r2, [sp, #84]	; 0x54
  40d528:	6035      	str	r5, [r6, #0]
  40d52a:	6074      	str	r4, [r6, #4]
  40d52c:	9014      	str	r0, [sp, #80]	; 0x50
  40d52e:	dd59      	ble.n	40d5e4 <_vfiprintf_r+0x8c0>
  40d530:	2a00      	cmp	r2, #0
  40d532:	d14f      	bne.n	40d5d4 <_vfiprintf_r+0x8b0>
  40d534:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d536:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40d53a:	9d04      	ldr	r5, [sp, #16]
  40d53c:	45ab      	cmp	fp, r5
  40d53e:	bfac      	ite	ge
  40d540:	445c      	addge	r4, fp
  40d542:	1964      	addlt	r4, r4, r5
  40d544:	9409      	str	r4, [sp, #36]	; 0x24
  40d546:	e05e      	b.n	40d606 <_vfiprintf_r+0x8e2>
  40d548:	4620      	mov	r0, r4
  40d54a:	9902      	ldr	r1, [sp, #8]
  40d54c:	aa13      	add	r2, sp, #76	; 0x4c
  40d54e:	f7ff fbad 	bl	40ccac <__sprint_r.part.0>
  40d552:	2800      	cmp	r0, #0
  40d554:	d135      	bne.n	40d5c2 <_vfiprintf_r+0x89e>
  40d556:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d558:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d55a:	f103 0c01 	add.w	ip, r3, #1
  40d55e:	4648      	mov	r0, r9
  40d560:	e781      	b.n	40d466 <_vfiprintf_r+0x742>
  40d562:	08e0      	lsrs	r0, r4, #3
  40d564:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  40d568:	f004 0207 	and.w	r2, r4, #7
  40d56c:	08e9      	lsrs	r1, r5, #3
  40d56e:	3230      	adds	r2, #48	; 0x30
  40d570:	ea50 0b01 	orrs.w	fp, r0, r1
  40d574:	461f      	mov	r7, r3
  40d576:	701a      	strb	r2, [r3, #0]
  40d578:	4604      	mov	r4, r0
  40d57a:	460d      	mov	r5, r1
  40d57c:	f103 33ff 	add.w	r3, r3, #4294967295
  40d580:	d1ef      	bne.n	40d562 <_vfiprintf_r+0x83e>
  40d582:	f01a 0f01 	tst.w	sl, #1
  40d586:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40d58a:	4639      	mov	r1, r7
  40d58c:	f000 80b9 	beq.w	40d702 <_vfiprintf_r+0x9de>
  40d590:	2a30      	cmp	r2, #48	; 0x30
  40d592:	f43f acf8 	beq.w	40cf86 <_vfiprintf_r+0x262>
  40d596:	461f      	mov	r7, r3
  40d598:	ebc7 0509 	rsb	r5, r7, r9
  40d59c:	2330      	movs	r3, #48	; 0x30
  40d59e:	9505      	str	r5, [sp, #20]
  40d5a0:	f801 3c01 	strb.w	r3, [r1, #-1]
  40d5a4:	e4f2      	b.n	40cf8c <_vfiprintf_r+0x268>
  40d5a6:	bf00      	nop
  40d5a8:	004136bc 	.word	0x004136bc
  40d5ac:	00413718 	.word	0x00413718
  40d5b0:	00413728 	.word	0x00413728
  40d5b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d5b6:	b123      	cbz	r3, 40d5c2 <_vfiprintf_r+0x89e>
  40d5b8:	9806      	ldr	r0, [sp, #24]
  40d5ba:	9902      	ldr	r1, [sp, #8]
  40d5bc:	aa13      	add	r2, sp, #76	; 0x4c
  40d5be:	f7ff fb75 	bl	40ccac <__sprint_r.part.0>
  40d5c2:	9c02      	ldr	r4, [sp, #8]
  40d5c4:	89a3      	ldrh	r3, [r4, #12]
  40d5c6:	065b      	lsls	r3, r3, #25
  40d5c8:	f53f ac9c 	bmi.w	40cf04 <_vfiprintf_r+0x1e0>
  40d5cc:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d5ce:	b031      	add	sp, #196	; 0xc4
  40d5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d5d4:	9806      	ldr	r0, [sp, #24]
  40d5d6:	9902      	ldr	r1, [sp, #8]
  40d5d8:	aa13      	add	r2, sp, #76	; 0x4c
  40d5da:	f7ff fb67 	bl	40ccac <__sprint_r.part.0>
  40d5de:	2800      	cmp	r0, #0
  40d5e0:	d1ef      	bne.n	40d5c2 <_vfiprintf_r+0x89e>
  40d5e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d5e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d5e6:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40d5ea:	9d04      	ldr	r5, [sp, #16]
  40d5ec:	45ab      	cmp	fp, r5
  40d5ee:	bfac      	ite	ge
  40d5f0:	445c      	addge	r4, fp
  40d5f2:	1964      	addlt	r4, r4, r5
  40d5f4:	9409      	str	r4, [sp, #36]	; 0x24
  40d5f6:	b132      	cbz	r2, 40d606 <_vfiprintf_r+0x8e2>
  40d5f8:	9806      	ldr	r0, [sp, #24]
  40d5fa:	9902      	ldr	r1, [sp, #8]
  40d5fc:	aa13      	add	r2, sp, #76	; 0x4c
  40d5fe:	f7ff fb55 	bl	40ccac <__sprint_r.part.0>
  40d602:	2800      	cmp	r0, #0
  40d604:	d1dd      	bne.n	40d5c2 <_vfiprintf_r+0x89e>
  40d606:	2000      	movs	r0, #0
  40d608:	9014      	str	r0, [sp, #80]	; 0x50
  40d60a:	464e      	mov	r6, r9
  40d60c:	f7ff bbbd 	b.w	40cd8a <_vfiprintf_r+0x66>
  40d610:	4650      	mov	r0, sl
  40d612:	4659      	mov	r1, fp
  40d614:	aa13      	add	r2, sp, #76	; 0x4c
  40d616:	f7ff fb49 	bl	40ccac <__sprint_r.part.0>
  40d61a:	2800      	cmp	r0, #0
  40d61c:	d1d1      	bne.n	40d5c2 <_vfiprintf_r+0x89e>
  40d61e:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d620:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d622:	1c48      	adds	r0, r1, #1
  40d624:	464e      	mov	r6, r9
  40d626:	e768      	b.n	40d4fa <_vfiprintf_r+0x7d6>
  40d628:	2a00      	cmp	r2, #0
  40d62a:	f040 80fa 	bne.w	40d822 <_vfiprintf_r+0xafe>
  40d62e:	9c05      	ldr	r4, [sp, #20]
  40d630:	9720      	str	r7, [sp, #128]	; 0x80
  40d632:	2301      	movs	r3, #1
  40d634:	9421      	str	r4, [sp, #132]	; 0x84
  40d636:	9415      	str	r4, [sp, #84]	; 0x54
  40d638:	4622      	mov	r2, r4
  40d63a:	9314      	str	r3, [sp, #80]	; 0x50
  40d63c:	464e      	mov	r6, r9
  40d63e:	3608      	adds	r6, #8
  40d640:	e741      	b.n	40d4c6 <_vfiprintf_r+0x7a2>
  40d642:	9d04      	ldr	r5, [sp, #16]
  40d644:	f8dd b00c 	ldr.w	fp, [sp, #12]
  40d648:	ebcb 0405 	rsb	r4, fp, r5
  40d64c:	2c00      	cmp	r4, #0
  40d64e:	f77f aef7 	ble.w	40d440 <_vfiprintf_r+0x71c>
  40d652:	2c10      	cmp	r4, #16
  40d654:	4da8      	ldr	r5, [pc, #672]	; (40d8f8 <_vfiprintf_r+0xbd4>)
  40d656:	f340 8174 	ble.w	40d942 <_vfiprintf_r+0xc1e>
  40d65a:	4629      	mov	r1, r5
  40d65c:	f04f 0b10 	mov.w	fp, #16
  40d660:	4625      	mov	r5, r4
  40d662:	4664      	mov	r4, ip
  40d664:	46b4      	mov	ip, r6
  40d666:	460e      	mov	r6, r1
  40d668:	e006      	b.n	40d678 <_vfiprintf_r+0x954>
  40d66a:	1c98      	adds	r0, r3, #2
  40d66c:	f10c 0c08 	add.w	ip, ip, #8
  40d670:	460b      	mov	r3, r1
  40d672:	3d10      	subs	r5, #16
  40d674:	2d10      	cmp	r5, #16
  40d676:	dd0f      	ble.n	40d698 <_vfiprintf_r+0x974>
  40d678:	1c59      	adds	r1, r3, #1
  40d67a:	3210      	adds	r2, #16
  40d67c:	2907      	cmp	r1, #7
  40d67e:	9215      	str	r2, [sp, #84]	; 0x54
  40d680:	e88c 0840 	stmia.w	ip, {r6, fp}
  40d684:	9114      	str	r1, [sp, #80]	; 0x50
  40d686:	ddf0      	ble.n	40d66a <_vfiprintf_r+0x946>
  40d688:	b9ba      	cbnz	r2, 40d6ba <_vfiprintf_r+0x996>
  40d68a:	3d10      	subs	r5, #16
  40d68c:	2d10      	cmp	r5, #16
  40d68e:	f04f 0001 	mov.w	r0, #1
  40d692:	4613      	mov	r3, r2
  40d694:	46cc      	mov	ip, r9
  40d696:	dcef      	bgt.n	40d678 <_vfiprintf_r+0x954>
  40d698:	4633      	mov	r3, r6
  40d69a:	4666      	mov	r6, ip
  40d69c:	46a4      	mov	ip, r4
  40d69e:	462c      	mov	r4, r5
  40d6a0:	461d      	mov	r5, r3
  40d6a2:	4422      	add	r2, r4
  40d6a4:	2807      	cmp	r0, #7
  40d6a6:	9215      	str	r2, [sp, #84]	; 0x54
  40d6a8:	6035      	str	r5, [r6, #0]
  40d6aa:	6074      	str	r4, [r6, #4]
  40d6ac:	9014      	str	r0, [sp, #80]	; 0x50
  40d6ae:	f300 80b2 	bgt.w	40d816 <_vfiprintf_r+0xaf2>
  40d6b2:	3608      	adds	r6, #8
  40d6b4:	1c41      	adds	r1, r0, #1
  40d6b6:	4603      	mov	r3, r0
  40d6b8:	e6c2      	b.n	40d440 <_vfiprintf_r+0x71c>
  40d6ba:	9806      	ldr	r0, [sp, #24]
  40d6bc:	9902      	ldr	r1, [sp, #8]
  40d6be:	aa13      	add	r2, sp, #76	; 0x4c
  40d6c0:	f7ff faf4 	bl	40ccac <__sprint_r.part.0>
  40d6c4:	2800      	cmp	r0, #0
  40d6c6:	f47f af7c 	bne.w	40d5c2 <_vfiprintf_r+0x89e>
  40d6ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d6cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d6ce:	1c58      	adds	r0, r3, #1
  40d6d0:	46cc      	mov	ip, r9
  40d6d2:	e7ce      	b.n	40d672 <_vfiprintf_r+0x94e>
  40d6d4:	2a00      	cmp	r2, #0
  40d6d6:	d17c      	bne.n	40d7d2 <_vfiprintf_r+0xaae>
  40d6d8:	4619      	mov	r1, r3
  40d6da:	464e      	mov	r6, r9
  40d6dc:	4613      	mov	r3, r2
  40d6de:	e69c      	b.n	40d41a <_vfiprintf_r+0x6f6>
  40d6e0:	2a00      	cmp	r2, #0
  40d6e2:	f040 8087 	bne.w	40d7f4 <_vfiprintf_r+0xad0>
  40d6e6:	2101      	movs	r1, #1
  40d6e8:	4613      	mov	r3, r2
  40d6ea:	464e      	mov	r6, r9
  40d6ec:	e6a4      	b.n	40d438 <_vfiprintf_r+0x714>
  40d6ee:	464f      	mov	r7, r9
  40d6f0:	e44c      	b.n	40cf8c <_vfiprintf_r+0x268>
  40d6f2:	2d00      	cmp	r5, #0
  40d6f4:	bf08      	it	eq
  40d6f6:	2c0a      	cmpeq	r4, #10
  40d6f8:	d249      	bcs.n	40d78e <_vfiprintf_r+0xa6a>
  40d6fa:	af30      	add	r7, sp, #192	; 0xc0
  40d6fc:	3430      	adds	r4, #48	; 0x30
  40d6fe:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40d702:	ebc7 0309 	rsb	r3, r7, r9
  40d706:	9305      	str	r3, [sp, #20]
  40d708:	e440      	b.n	40cf8c <_vfiprintf_r+0x268>
  40d70a:	2302      	movs	r3, #2
  40d70c:	e41b      	b.n	40cf46 <_vfiprintf_r+0x222>
  40d70e:	2a00      	cmp	r2, #0
  40d710:	f040 80b2 	bne.w	40d878 <_vfiprintf_r+0xb54>
  40d714:	4613      	mov	r3, r2
  40d716:	2101      	movs	r1, #1
  40d718:	464e      	mov	r6, r9
  40d71a:	e66d      	b.n	40d3f8 <_vfiprintf_r+0x6d4>
  40d71c:	4644      	mov	r4, r8
  40d71e:	f7ff bb5c 	b.w	40cdda <_vfiprintf_r+0xb6>
  40d722:	9806      	ldr	r0, [sp, #24]
  40d724:	9902      	ldr	r1, [sp, #8]
  40d726:	aa13      	add	r2, sp, #76	; 0x4c
  40d728:	f7ff fac0 	bl	40ccac <__sprint_r.part.0>
  40d72c:	2800      	cmp	r0, #0
  40d72e:	f47f af48 	bne.w	40d5c2 <_vfiprintf_r+0x89e>
  40d732:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d734:	464e      	mov	r6, r9
  40d736:	e6c6      	b.n	40d4c6 <_vfiprintf_r+0x7a2>
  40d738:	9d08      	ldr	r5, [sp, #32]
  40d73a:	682c      	ldr	r4, [r5, #0]
  40d73c:	3504      	adds	r5, #4
  40d73e:	9508      	str	r5, [sp, #32]
  40d740:	2500      	movs	r5, #0
  40d742:	e400      	b.n	40cf46 <_vfiprintf_r+0x222>
  40d744:	9d08      	ldr	r5, [sp, #32]
  40d746:	682c      	ldr	r4, [r5, #0]
  40d748:	3504      	adds	r5, #4
  40d74a:	9508      	str	r5, [sp, #32]
  40d74c:	2301      	movs	r3, #1
  40d74e:	2500      	movs	r5, #0
  40d750:	f7ff bbf9 	b.w	40cf46 <_vfiprintf_r+0x222>
  40d754:	9d08      	ldr	r5, [sp, #32]
  40d756:	682c      	ldr	r4, [r5, #0]
  40d758:	3504      	adds	r5, #4
  40d75a:	9508      	str	r5, [sp, #32]
  40d75c:	2500      	movs	r5, #0
  40d75e:	e528      	b.n	40d1b2 <_vfiprintf_r+0x48e>
  40d760:	9d08      	ldr	r5, [sp, #32]
  40d762:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d766:	682c      	ldr	r4, [r5, #0]
  40d768:	f10b 0b04 	add.w	fp, fp, #4
  40d76c:	17e5      	asrs	r5, r4, #31
  40d76e:	f8cd b020 	str.w	fp, [sp, #32]
  40d772:	4622      	mov	r2, r4
  40d774:	462b      	mov	r3, r5
  40d776:	e48f      	b.n	40d098 <_vfiprintf_r+0x374>
  40d778:	9806      	ldr	r0, [sp, #24]
  40d77a:	9902      	ldr	r1, [sp, #8]
  40d77c:	aa13      	add	r2, sp, #76	; 0x4c
  40d77e:	f7ff fa95 	bl	40ccac <__sprint_r.part.0>
  40d782:	2800      	cmp	r0, #0
  40d784:	f47f af1d 	bne.w	40d5c2 <_vfiprintf_r+0x89e>
  40d788:	464e      	mov	r6, r9
  40d78a:	f7ff bb9b 	b.w	40cec4 <_vfiprintf_r+0x1a0>
  40d78e:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
  40d792:	9603      	str	r6, [sp, #12]
  40d794:	465e      	mov	r6, fp
  40d796:	46e3      	mov	fp, ip
  40d798:	4620      	mov	r0, r4
  40d79a:	4629      	mov	r1, r5
  40d79c:	220a      	movs	r2, #10
  40d79e:	2300      	movs	r3, #0
  40d7a0:	f7fc fafa 	bl	409d98 <__aeabi_uldivmod>
  40d7a4:	3230      	adds	r2, #48	; 0x30
  40d7a6:	7032      	strb	r2, [r6, #0]
  40d7a8:	4620      	mov	r0, r4
  40d7aa:	4629      	mov	r1, r5
  40d7ac:	220a      	movs	r2, #10
  40d7ae:	2300      	movs	r3, #0
  40d7b0:	f7fc faf2 	bl	409d98 <__aeabi_uldivmod>
  40d7b4:	4604      	mov	r4, r0
  40d7b6:	460d      	mov	r5, r1
  40d7b8:	ea54 0005 	orrs.w	r0, r4, r5
  40d7bc:	4637      	mov	r7, r6
  40d7be:	f106 36ff 	add.w	r6, r6, #4294967295
  40d7c2:	d1e9      	bne.n	40d798 <_vfiprintf_r+0xa74>
  40d7c4:	ebc7 0309 	rsb	r3, r7, r9
  40d7c8:	46dc      	mov	ip, fp
  40d7ca:	9e03      	ldr	r6, [sp, #12]
  40d7cc:	9305      	str	r3, [sp, #20]
  40d7ce:	f7ff bbdd 	b.w	40cf8c <_vfiprintf_r+0x268>
  40d7d2:	9806      	ldr	r0, [sp, #24]
  40d7d4:	9902      	ldr	r1, [sp, #8]
  40d7d6:	f8cd c004 	str.w	ip, [sp, #4]
  40d7da:	aa13      	add	r2, sp, #76	; 0x4c
  40d7dc:	f7ff fa66 	bl	40ccac <__sprint_r.part.0>
  40d7e0:	f8dd c004 	ldr.w	ip, [sp, #4]
  40d7e4:	2800      	cmp	r0, #0
  40d7e6:	f47f aeec 	bne.w	40d5c2 <_vfiprintf_r+0x89e>
  40d7ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d7ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d7ee:	1c59      	adds	r1, r3, #1
  40d7f0:	464e      	mov	r6, r9
  40d7f2:	e612      	b.n	40d41a <_vfiprintf_r+0x6f6>
  40d7f4:	9806      	ldr	r0, [sp, #24]
  40d7f6:	9902      	ldr	r1, [sp, #8]
  40d7f8:	f8cd c004 	str.w	ip, [sp, #4]
  40d7fc:	aa13      	add	r2, sp, #76	; 0x4c
  40d7fe:	f7ff fa55 	bl	40ccac <__sprint_r.part.0>
  40d802:	f8dd c004 	ldr.w	ip, [sp, #4]
  40d806:	2800      	cmp	r0, #0
  40d808:	f47f aedb 	bne.w	40d5c2 <_vfiprintf_r+0x89e>
  40d80c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d80e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d810:	1c59      	adds	r1, r3, #1
  40d812:	464e      	mov	r6, r9
  40d814:	e610      	b.n	40d438 <_vfiprintf_r+0x714>
  40d816:	2a00      	cmp	r2, #0
  40d818:	d156      	bne.n	40d8c8 <_vfiprintf_r+0xba4>
  40d81a:	2101      	movs	r1, #1
  40d81c:	4613      	mov	r3, r2
  40d81e:	464e      	mov	r6, r9
  40d820:	e60e      	b.n	40d440 <_vfiprintf_r+0x71c>
  40d822:	9806      	ldr	r0, [sp, #24]
  40d824:	9902      	ldr	r1, [sp, #8]
  40d826:	aa13      	add	r2, sp, #76	; 0x4c
  40d828:	f7ff fa40 	bl	40ccac <__sprint_r.part.0>
  40d82c:	2800      	cmp	r0, #0
  40d82e:	f47f aec8 	bne.w	40d5c2 <_vfiprintf_r+0x89e>
  40d832:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d834:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d836:	3101      	adds	r1, #1
  40d838:	464e      	mov	r6, r9
  40d83a:	e636      	b.n	40d4aa <_vfiprintf_r+0x786>
  40d83c:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40d840:	4264      	negs	r4, r4
  40d842:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40d846:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  40d84a:	f8cd b01c 	str.w	fp, [sp, #28]
  40d84e:	f8cd c014 	str.w	ip, [sp, #20]
  40d852:	2301      	movs	r3, #1
  40d854:	f7ff bb7f 	b.w	40cf56 <_vfiprintf_r+0x232>
  40d858:	f01a 0f10 	tst.w	sl, #16
  40d85c:	d11d      	bne.n	40d89a <_vfiprintf_r+0xb76>
  40d85e:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40d862:	d059      	beq.n	40d918 <_vfiprintf_r+0xbf4>
  40d864:	9d08      	ldr	r5, [sp, #32]
  40d866:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40d86a:	682b      	ldr	r3, [r5, #0]
  40d86c:	3504      	adds	r5, #4
  40d86e:	9508      	str	r5, [sp, #32]
  40d870:	f8a3 b000 	strh.w	fp, [r3]
  40d874:	f7ff ba89 	b.w	40cd8a <_vfiprintf_r+0x66>
  40d878:	9806      	ldr	r0, [sp, #24]
  40d87a:	9902      	ldr	r1, [sp, #8]
  40d87c:	f8cd c004 	str.w	ip, [sp, #4]
  40d880:	aa13      	add	r2, sp, #76	; 0x4c
  40d882:	f7ff fa13 	bl	40ccac <__sprint_r.part.0>
  40d886:	f8dd c004 	ldr.w	ip, [sp, #4]
  40d88a:	2800      	cmp	r0, #0
  40d88c:	f47f ae99 	bne.w	40d5c2 <_vfiprintf_r+0x89e>
  40d890:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d892:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d894:	1c59      	adds	r1, r3, #1
  40d896:	464e      	mov	r6, r9
  40d898:	e5ae      	b.n	40d3f8 <_vfiprintf_r+0x6d4>
  40d89a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d89e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d8a0:	f8db 3000 	ldr.w	r3, [fp]
  40d8a4:	f10b 0b04 	add.w	fp, fp, #4
  40d8a8:	f8cd b020 	str.w	fp, [sp, #32]
  40d8ac:	601c      	str	r4, [r3, #0]
  40d8ae:	f7ff ba6c 	b.w	40cd8a <_vfiprintf_r+0x66>
  40d8b2:	9408      	str	r4, [sp, #32]
  40d8b4:	f7fc ff84 	bl	40a7c0 <strlen>
  40d8b8:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
  40d8bc:	9005      	str	r0, [sp, #20]
  40d8be:	9407      	str	r4, [sp, #28]
  40d8c0:	f04f 0c00 	mov.w	ip, #0
  40d8c4:	f7ff bb62 	b.w	40cf8c <_vfiprintf_r+0x268>
  40d8c8:	9806      	ldr	r0, [sp, #24]
  40d8ca:	9902      	ldr	r1, [sp, #8]
  40d8cc:	f8cd c004 	str.w	ip, [sp, #4]
  40d8d0:	aa13      	add	r2, sp, #76	; 0x4c
  40d8d2:	f7ff f9eb 	bl	40ccac <__sprint_r.part.0>
  40d8d6:	f8dd c004 	ldr.w	ip, [sp, #4]
  40d8da:	2800      	cmp	r0, #0
  40d8dc:	f47f ae71 	bne.w	40d5c2 <_vfiprintf_r+0x89e>
  40d8e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d8e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d8e4:	1c59      	adds	r1, r3, #1
  40d8e6:	464e      	mov	r6, r9
  40d8e8:	e5aa      	b.n	40d440 <_vfiprintf_r+0x71c>
  40d8ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d8ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d8ee:	4d03      	ldr	r5, [pc, #12]	; (40d8fc <_vfiprintf_r+0xbd8>)
  40d8f0:	3301      	adds	r3, #1
  40d8f2:	f7ff bb9b 	b.w	40d02c <_vfiprintf_r+0x308>
  40d8f6:	bf00      	nop
  40d8f8:	00413718 	.word	0x00413718
  40d8fc:	00413728 	.word	0x00413728
  40d900:	f1bc 0f06 	cmp.w	ip, #6
  40d904:	bf34      	ite	cc
  40d906:	4663      	movcc	r3, ip
  40d908:	2306      	movcs	r3, #6
  40d90a:	9408      	str	r4, [sp, #32]
  40d90c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
  40d910:	9305      	str	r3, [sp, #20]
  40d912:	9403      	str	r4, [sp, #12]
  40d914:	4f16      	ldr	r7, [pc, #88]	; (40d970 <_vfiprintf_r+0xc4c>)
  40d916:	e470      	b.n	40d1fa <_vfiprintf_r+0x4d6>
  40d918:	9c08      	ldr	r4, [sp, #32]
  40d91a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d91c:	6823      	ldr	r3, [r4, #0]
  40d91e:	3404      	adds	r4, #4
  40d920:	9408      	str	r4, [sp, #32]
  40d922:	601d      	str	r5, [r3, #0]
  40d924:	f7ff ba31 	b.w	40cd8a <_vfiprintf_r+0x66>
  40d928:	9814      	ldr	r0, [sp, #80]	; 0x50
  40d92a:	4d12      	ldr	r5, [pc, #72]	; (40d974 <_vfiprintf_r+0xc50>)
  40d92c:	3001      	adds	r0, #1
  40d92e:	e5f8      	b.n	40d522 <_vfiprintf_r+0x7fe>
  40d930:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  40d934:	f8cd c014 	str.w	ip, [sp, #20]
  40d938:	9507      	str	r5, [sp, #28]
  40d93a:	9408      	str	r4, [sp, #32]
  40d93c:	4684      	mov	ip, r0
  40d93e:	f7ff bb25 	b.w	40cf8c <_vfiprintf_r+0x268>
  40d942:	4608      	mov	r0, r1
  40d944:	e6ad      	b.n	40d6a2 <_vfiprintf_r+0x97e>
  40d946:	46a0      	mov	r8, r4
  40d948:	2500      	movs	r5, #0
  40d94a:	f7ff ba5a 	b.w	40ce02 <_vfiprintf_r+0xde>
  40d94e:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d952:	f898 3001 	ldrb.w	r3, [r8, #1]
  40d956:	f8db 5000 	ldr.w	r5, [fp]
  40d95a:	f10b 0204 	add.w	r2, fp, #4
  40d95e:	2d00      	cmp	r5, #0
  40d960:	9208      	str	r2, [sp, #32]
  40d962:	46a0      	mov	r8, r4
  40d964:	f6bf aa4b 	bge.w	40cdfe <_vfiprintf_r+0xda>
  40d968:	f04f 35ff 	mov.w	r5, #4294967295
  40d96c:	f7ff ba47 	b.w	40cdfe <_vfiprintf_r+0xda>
  40d970:	004136d0 	.word	0x004136d0
  40d974:	00413728 	.word	0x00413728

0040d978 <__sbprintf>:
  40d978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40d97c:	460c      	mov	r4, r1
  40d97e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  40d982:	f8b1 900c 	ldrh.w	r9, [r1, #12]
  40d986:	69e7      	ldr	r7, [r4, #28]
  40d988:	6e49      	ldr	r1, [r1, #100]	; 0x64
  40d98a:	f8b4 800e 	ldrh.w	r8, [r4, #14]
  40d98e:	9119      	str	r1, [sp, #100]	; 0x64
  40d990:	ad1a      	add	r5, sp, #104	; 0x68
  40d992:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40d996:	f04f 0e00 	mov.w	lr, #0
  40d99a:	9707      	str	r7, [sp, #28]
  40d99c:	f029 0902 	bic.w	r9, r9, #2
  40d9a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40d9a2:	9500      	str	r5, [sp, #0]
  40d9a4:	4669      	mov	r1, sp
  40d9a6:	9504      	str	r5, [sp, #16]
  40d9a8:	9602      	str	r6, [sp, #8]
  40d9aa:	9605      	str	r6, [sp, #20]
  40d9ac:	f8ad 900c 	strh.w	r9, [sp, #12]
  40d9b0:	f8ad 800e 	strh.w	r8, [sp, #14]
  40d9b4:	9709      	str	r7, [sp, #36]	; 0x24
  40d9b6:	f8cd e018 	str.w	lr, [sp, #24]
  40d9ba:	4606      	mov	r6, r0
  40d9bc:	f7ff f9b2 	bl	40cd24 <_vfiprintf_r>
  40d9c0:	1e05      	subs	r5, r0, #0
  40d9c2:	db07      	blt.n	40d9d4 <__sbprintf+0x5c>
  40d9c4:	4630      	mov	r0, r6
  40d9c6:	4669      	mov	r1, sp
  40d9c8:	f001 f908 	bl	40ebdc <_fflush_r>
  40d9cc:	2800      	cmp	r0, #0
  40d9ce:	bf18      	it	ne
  40d9d0:	f04f 35ff 	movne.w	r5, #4294967295
  40d9d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40d9d8:	065b      	lsls	r3, r3, #25
  40d9da:	d503      	bpl.n	40d9e4 <__sbprintf+0x6c>
  40d9dc:	89a3      	ldrh	r3, [r4, #12]
  40d9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d9e2:	81a3      	strh	r3, [r4, #12]
  40d9e4:	4628      	mov	r0, r5
  40d9e6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  40d9ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d9ee:	bf00      	nop

0040d9f0 <_write_r>:
  40d9f0:	b570      	push	{r4, r5, r6, lr}
  40d9f2:	4c08      	ldr	r4, [pc, #32]	; (40da14 <_write_r+0x24>)
  40d9f4:	4606      	mov	r6, r0
  40d9f6:	2500      	movs	r5, #0
  40d9f8:	4608      	mov	r0, r1
  40d9fa:	4611      	mov	r1, r2
  40d9fc:	461a      	mov	r2, r3
  40d9fe:	6025      	str	r5, [r4, #0]
  40da00:	f7fa fbf8 	bl	4081f4 <_write>
  40da04:	1c43      	adds	r3, r0, #1
  40da06:	d000      	beq.n	40da0a <_write_r+0x1a>
  40da08:	bd70      	pop	{r4, r5, r6, pc}
  40da0a:	6823      	ldr	r3, [r4, #0]
  40da0c:	2b00      	cmp	r3, #0
  40da0e:	d0fb      	beq.n	40da08 <_write_r+0x18>
  40da10:	6033      	str	r3, [r6, #0]
  40da12:	bd70      	pop	{r4, r5, r6, pc}
  40da14:	20016044 	.word	0x20016044

0040da18 <__swsetup_r>:
  40da18:	4b2f      	ldr	r3, [pc, #188]	; (40dad8 <__swsetup_r+0xc0>)
  40da1a:	681b      	ldr	r3, [r3, #0]
  40da1c:	b570      	push	{r4, r5, r6, lr}
  40da1e:	4606      	mov	r6, r0
  40da20:	460c      	mov	r4, r1
  40da22:	b113      	cbz	r3, 40da2a <__swsetup_r+0x12>
  40da24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40da26:	2a00      	cmp	r2, #0
  40da28:	d036      	beq.n	40da98 <__swsetup_r+0x80>
  40da2a:	89a5      	ldrh	r5, [r4, #12]
  40da2c:	b2ab      	uxth	r3, r5
  40da2e:	0719      	lsls	r1, r3, #28
  40da30:	d50c      	bpl.n	40da4c <__swsetup_r+0x34>
  40da32:	6922      	ldr	r2, [r4, #16]
  40da34:	b1aa      	cbz	r2, 40da62 <__swsetup_r+0x4a>
  40da36:	f013 0101 	ands.w	r1, r3, #1
  40da3a:	d01e      	beq.n	40da7a <__swsetup_r+0x62>
  40da3c:	6963      	ldr	r3, [r4, #20]
  40da3e:	2100      	movs	r1, #0
  40da40:	425b      	negs	r3, r3
  40da42:	61a3      	str	r3, [r4, #24]
  40da44:	60a1      	str	r1, [r4, #8]
  40da46:	b1f2      	cbz	r2, 40da86 <__swsetup_r+0x6e>
  40da48:	2000      	movs	r0, #0
  40da4a:	bd70      	pop	{r4, r5, r6, pc}
  40da4c:	06da      	lsls	r2, r3, #27
  40da4e:	d53b      	bpl.n	40dac8 <__swsetup_r+0xb0>
  40da50:	075b      	lsls	r3, r3, #29
  40da52:	d425      	bmi.n	40daa0 <__swsetup_r+0x88>
  40da54:	6922      	ldr	r2, [r4, #16]
  40da56:	f045 0308 	orr.w	r3, r5, #8
  40da5a:	81a3      	strh	r3, [r4, #12]
  40da5c:	b29b      	uxth	r3, r3
  40da5e:	2a00      	cmp	r2, #0
  40da60:	d1e9      	bne.n	40da36 <__swsetup_r+0x1e>
  40da62:	f403 7120 	and.w	r1, r3, #640	; 0x280
  40da66:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  40da6a:	d0e4      	beq.n	40da36 <__swsetup_r+0x1e>
  40da6c:	4630      	mov	r0, r6
  40da6e:	4621      	mov	r1, r4
  40da70:	f001 fcc2 	bl	40f3f8 <__smakebuf_r>
  40da74:	89a3      	ldrh	r3, [r4, #12]
  40da76:	6922      	ldr	r2, [r4, #16]
  40da78:	e7dd      	b.n	40da36 <__swsetup_r+0x1e>
  40da7a:	0798      	lsls	r0, r3, #30
  40da7c:	bf58      	it	pl
  40da7e:	6961      	ldrpl	r1, [r4, #20]
  40da80:	60a1      	str	r1, [r4, #8]
  40da82:	2a00      	cmp	r2, #0
  40da84:	d1e0      	bne.n	40da48 <__swsetup_r+0x30>
  40da86:	89a3      	ldrh	r3, [r4, #12]
  40da88:	061a      	lsls	r2, r3, #24
  40da8a:	d5dd      	bpl.n	40da48 <__swsetup_r+0x30>
  40da8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40da90:	81a3      	strh	r3, [r4, #12]
  40da92:	f04f 30ff 	mov.w	r0, #4294967295
  40da96:	bd70      	pop	{r4, r5, r6, pc}
  40da98:	4618      	mov	r0, r3
  40da9a:	f001 f8bb 	bl	40ec14 <__sinit>
  40da9e:	e7c4      	b.n	40da2a <__swsetup_r+0x12>
  40daa0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40daa2:	b149      	cbz	r1, 40dab8 <__swsetup_r+0xa0>
  40daa4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40daa8:	4299      	cmp	r1, r3
  40daaa:	d003      	beq.n	40dab4 <__swsetup_r+0x9c>
  40daac:	4630      	mov	r0, r6
  40daae:	f001 f9f3 	bl	40ee98 <_free_r>
  40dab2:	89a5      	ldrh	r5, [r4, #12]
  40dab4:	2300      	movs	r3, #0
  40dab6:	6323      	str	r3, [r4, #48]	; 0x30
  40dab8:	f025 0524 	bic.w	r5, r5, #36	; 0x24
  40dabc:	2300      	movs	r3, #0
  40dabe:	6922      	ldr	r2, [r4, #16]
  40dac0:	6063      	str	r3, [r4, #4]
  40dac2:	b2ad      	uxth	r5, r5
  40dac4:	6022      	str	r2, [r4, #0]
  40dac6:	e7c6      	b.n	40da56 <__swsetup_r+0x3e>
  40dac8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  40dacc:	2309      	movs	r3, #9
  40dace:	6033      	str	r3, [r6, #0]
  40dad0:	f04f 30ff 	mov.w	r0, #4294967295
  40dad4:	81a5      	strh	r5, [r4, #12]
  40dad6:	bd70      	pop	{r4, r5, r6, pc}
  40dad8:	20000640 	.word	0x20000640

0040dadc <register_fini>:
  40dadc:	4b02      	ldr	r3, [pc, #8]	; (40dae8 <register_fini+0xc>)
  40dade:	b113      	cbz	r3, 40dae6 <register_fini+0xa>
  40dae0:	4802      	ldr	r0, [pc, #8]	; (40daec <register_fini+0x10>)
  40dae2:	f000 b805 	b.w	40daf0 <atexit>
  40dae6:	4770      	bx	lr
  40dae8:	00000000 	.word	0x00000000
  40daec:	0040ed11 	.word	0x0040ed11

0040daf0 <atexit>:
  40daf0:	4601      	mov	r1, r0
  40daf2:	2000      	movs	r0, #0
  40daf4:	4602      	mov	r2, r0
  40daf6:	4603      	mov	r3, r0
  40daf8:	f004 bb92 	b.w	412220 <__register_exitproc>

0040dafc <_close_r>:
  40dafc:	b538      	push	{r3, r4, r5, lr}
  40dafe:	4c07      	ldr	r4, [pc, #28]	; (40db1c <_close_r+0x20>)
  40db00:	2300      	movs	r3, #0
  40db02:	4605      	mov	r5, r0
  40db04:	4608      	mov	r0, r1
  40db06:	6023      	str	r3, [r4, #0]
  40db08:	f7fc f84e 	bl	409ba8 <_close>
  40db0c:	1c43      	adds	r3, r0, #1
  40db0e:	d000      	beq.n	40db12 <_close_r+0x16>
  40db10:	bd38      	pop	{r3, r4, r5, pc}
  40db12:	6823      	ldr	r3, [r4, #0]
  40db14:	2b00      	cmp	r3, #0
  40db16:	d0fb      	beq.n	40db10 <_close_r+0x14>
  40db18:	602b      	str	r3, [r5, #0]
  40db1a:	bd38      	pop	{r3, r4, r5, pc}
  40db1c:	20016044 	.word	0x20016044

0040db20 <quorem>:
  40db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40db24:	6903      	ldr	r3, [r0, #16]
  40db26:	690d      	ldr	r5, [r1, #16]
  40db28:	429d      	cmp	r5, r3
  40db2a:	b083      	sub	sp, #12
  40db2c:	4683      	mov	fp, r0
  40db2e:	f300 808b 	bgt.w	40dc48 <quorem+0x128>
  40db32:	3d01      	subs	r5, #1
  40db34:	f101 0414 	add.w	r4, r1, #20
  40db38:	f100 0a14 	add.w	sl, r0, #20
  40db3c:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
  40db40:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  40db44:	3201      	adds	r2, #1
  40db46:	fbb3 f8f2 	udiv	r8, r3, r2
  40db4a:	00aa      	lsls	r2, r5, #2
  40db4c:	4691      	mov	r9, r2
  40db4e:	9200      	str	r2, [sp, #0]
  40db50:	4452      	add	r2, sl
  40db52:	44a1      	add	r9, r4
  40db54:	9201      	str	r2, [sp, #4]
  40db56:	f1b8 0f00 	cmp.w	r8, #0
  40db5a:	d03d      	beq.n	40dbd8 <quorem+0xb8>
  40db5c:	f04f 0e00 	mov.w	lr, #0
  40db60:	4670      	mov	r0, lr
  40db62:	4622      	mov	r2, r4
  40db64:	4653      	mov	r3, sl
  40db66:	468c      	mov	ip, r1
  40db68:	f852 6b04 	ldr.w	r6, [r2], #4
  40db6c:	6819      	ldr	r1, [r3, #0]
  40db6e:	b2b7      	uxth	r7, r6
  40db70:	0c36      	lsrs	r6, r6, #16
  40db72:	fb07 ee08 	mla	lr, r7, r8, lr
  40db76:	fb06 f608 	mul.w	r6, r6, r8
  40db7a:	eb06 461e 	add.w	r6, r6, lr, lsr #16
  40db7e:	fa1f f78e 	uxth.w	r7, lr
  40db82:	1bc7      	subs	r7, r0, r7
  40db84:	b2b0      	uxth	r0, r6
  40db86:	fa17 f781 	uxtah	r7, r7, r1
  40db8a:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
  40db8e:	eb00 4027 	add.w	r0, r0, r7, asr #16
  40db92:	b2bf      	uxth	r7, r7
  40db94:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
  40db98:	4591      	cmp	r9, r2
  40db9a:	f843 7b04 	str.w	r7, [r3], #4
  40db9e:	ea4f 4020 	mov.w	r0, r0, asr #16
  40dba2:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  40dba6:	d2df      	bcs.n	40db68 <quorem+0x48>
  40dba8:	9a00      	ldr	r2, [sp, #0]
  40dbaa:	f85a 3002 	ldr.w	r3, [sl, r2]
  40dbae:	4661      	mov	r1, ip
  40dbb0:	b993      	cbnz	r3, 40dbd8 <quorem+0xb8>
  40dbb2:	9a01      	ldr	r2, [sp, #4]
  40dbb4:	1f13      	subs	r3, r2, #4
  40dbb6:	459a      	cmp	sl, r3
  40dbb8:	d20c      	bcs.n	40dbd4 <quorem+0xb4>
  40dbba:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40dbbe:	b94b      	cbnz	r3, 40dbd4 <quorem+0xb4>
  40dbc0:	f1a2 0308 	sub.w	r3, r2, #8
  40dbc4:	e002      	b.n	40dbcc <quorem+0xac>
  40dbc6:	681a      	ldr	r2, [r3, #0]
  40dbc8:	3b04      	subs	r3, #4
  40dbca:	b91a      	cbnz	r2, 40dbd4 <quorem+0xb4>
  40dbcc:	459a      	cmp	sl, r3
  40dbce:	f105 35ff 	add.w	r5, r5, #4294967295
  40dbd2:	d3f8      	bcc.n	40dbc6 <quorem+0xa6>
  40dbd4:	f8cb 5010 	str.w	r5, [fp, #16]
  40dbd8:	4658      	mov	r0, fp
  40dbda:	f002 fa7b 	bl	4100d4 <__mcmp>
  40dbde:	2800      	cmp	r0, #0
  40dbe0:	db2e      	blt.n	40dc40 <quorem+0x120>
  40dbe2:	f108 0801 	add.w	r8, r8, #1
  40dbe6:	4653      	mov	r3, sl
  40dbe8:	2200      	movs	r2, #0
  40dbea:	f854 6b04 	ldr.w	r6, [r4], #4
  40dbee:	6818      	ldr	r0, [r3, #0]
  40dbf0:	b2b1      	uxth	r1, r6
  40dbf2:	1a52      	subs	r2, r2, r1
  40dbf4:	0c36      	lsrs	r6, r6, #16
  40dbf6:	fa12 f180 	uxtah	r1, r2, r0
  40dbfa:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
  40dbfe:	eb02 4221 	add.w	r2, r2, r1, asr #16
  40dc02:	b289      	uxth	r1, r1
  40dc04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  40dc08:	45a1      	cmp	r9, r4
  40dc0a:	f843 1b04 	str.w	r1, [r3], #4
  40dc0e:	ea4f 4222 	mov.w	r2, r2, asr #16
  40dc12:	d2ea      	bcs.n	40dbea <quorem+0xca>
  40dc14:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
  40dc18:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
  40dc1c:	b982      	cbnz	r2, 40dc40 <quorem+0x120>
  40dc1e:	1f1a      	subs	r2, r3, #4
  40dc20:	4592      	cmp	sl, r2
  40dc22:	d20b      	bcs.n	40dc3c <quorem+0x11c>
  40dc24:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40dc28:	b942      	cbnz	r2, 40dc3c <quorem+0x11c>
  40dc2a:	3b08      	subs	r3, #8
  40dc2c:	e002      	b.n	40dc34 <quorem+0x114>
  40dc2e:	681a      	ldr	r2, [r3, #0]
  40dc30:	3b04      	subs	r3, #4
  40dc32:	b91a      	cbnz	r2, 40dc3c <quorem+0x11c>
  40dc34:	459a      	cmp	sl, r3
  40dc36:	f105 35ff 	add.w	r5, r5, #4294967295
  40dc3a:	d3f8      	bcc.n	40dc2e <quorem+0x10e>
  40dc3c:	f8cb 5010 	str.w	r5, [fp, #16]
  40dc40:	4640      	mov	r0, r8
  40dc42:	b003      	add	sp, #12
  40dc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dc48:	2000      	movs	r0, #0
  40dc4a:	b003      	add	sp, #12
  40dc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040dc50 <_dtoa_r>:
  40dc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dc54:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40dc56:	b09b      	sub	sp, #108	; 0x6c
  40dc58:	4604      	mov	r4, r0
  40dc5a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
  40dc5c:	4692      	mov	sl, r2
  40dc5e:	469b      	mov	fp, r3
  40dc60:	b149      	cbz	r1, 40dc76 <_dtoa_r+0x26>
  40dc62:	6c43      	ldr	r3, [r0, #68]	; 0x44
  40dc64:	604b      	str	r3, [r1, #4]
  40dc66:	2201      	movs	r2, #1
  40dc68:	fa02 f303 	lsl.w	r3, r2, r3
  40dc6c:	608b      	str	r3, [r1, #8]
  40dc6e:	f001 ffed 	bl	40fc4c <_Bfree>
  40dc72:	2300      	movs	r3, #0
  40dc74:	6423      	str	r3, [r4, #64]	; 0x40
  40dc76:	f1bb 0f00 	cmp.w	fp, #0
  40dc7a:	46d9      	mov	r9, fp
  40dc7c:	db33      	blt.n	40dce6 <_dtoa_r+0x96>
  40dc7e:	2300      	movs	r3, #0
  40dc80:	602b      	str	r3, [r5, #0]
  40dc82:	4ba5      	ldr	r3, [pc, #660]	; (40df18 <_dtoa_r+0x2c8>)
  40dc84:	461a      	mov	r2, r3
  40dc86:	ea09 0303 	and.w	r3, r9, r3
  40dc8a:	4293      	cmp	r3, r2
  40dc8c:	d014      	beq.n	40dcb8 <_dtoa_r+0x68>
  40dc8e:	4650      	mov	r0, sl
  40dc90:	4659      	mov	r1, fp
  40dc92:	2200      	movs	r2, #0
  40dc94:	2300      	movs	r3, #0
  40dc96:	f005 fb87 	bl	4133a8 <__aeabi_dcmpeq>
  40dc9a:	4680      	mov	r8, r0
  40dc9c:	b348      	cbz	r0, 40dcf2 <_dtoa_r+0xa2>
  40dc9e:	9e26      	ldr	r6, [sp, #152]	; 0x98
  40dca0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  40dca2:	2301      	movs	r3, #1
  40dca4:	6033      	str	r3, [r6, #0]
  40dca6:	2d00      	cmp	r5, #0
  40dca8:	f000 80c9 	beq.w	40de3e <_dtoa_r+0x1ee>
  40dcac:	489b      	ldr	r0, [pc, #620]	; (40df1c <_dtoa_r+0x2cc>)
  40dcae:	6028      	str	r0, [r5, #0]
  40dcb0:	3801      	subs	r0, #1
  40dcb2:	b01b      	add	sp, #108	; 0x6c
  40dcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dcb8:	9d26      	ldr	r5, [sp, #152]	; 0x98
  40dcba:	f242 730f 	movw	r3, #9999	; 0x270f
  40dcbe:	602b      	str	r3, [r5, #0]
  40dcc0:	f1ba 0f00 	cmp.w	sl, #0
  40dcc4:	f000 80a4 	beq.w	40de10 <_dtoa_r+0x1c0>
  40dcc8:	4895      	ldr	r0, [pc, #596]	; (40df20 <_dtoa_r+0x2d0>)
  40dcca:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  40dccc:	2e00      	cmp	r6, #0
  40dcce:	d0f0      	beq.n	40dcb2 <_dtoa_r+0x62>
  40dcd0:	78c3      	ldrb	r3, [r0, #3]
  40dcd2:	2b00      	cmp	r3, #0
  40dcd4:	f000 80b5 	beq.w	40de42 <_dtoa_r+0x1f2>
  40dcd8:	f100 0308 	add.w	r3, r0, #8
  40dcdc:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  40dcde:	602b      	str	r3, [r5, #0]
  40dce0:	b01b      	add	sp, #108	; 0x6c
  40dce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dce6:	2301      	movs	r3, #1
  40dce8:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  40dcec:	602b      	str	r3, [r5, #0]
  40dcee:	46cb      	mov	fp, r9
  40dcf0:	e7c7      	b.n	40dc82 <_dtoa_r+0x32>
  40dcf2:	aa19      	add	r2, sp, #100	; 0x64
  40dcf4:	ab18      	add	r3, sp, #96	; 0x60
  40dcf6:	e88d 000c 	stmia.w	sp, {r2, r3}
  40dcfa:	4620      	mov	r0, r4
  40dcfc:	4652      	mov	r2, sl
  40dcfe:	465b      	mov	r3, fp
  40dd00:	f002 faf0 	bl	4102e4 <__d2b>
  40dd04:	ea5f 5519 	movs.w	r5, r9, lsr #20
  40dd08:	900a      	str	r0, [sp, #40]	; 0x28
  40dd0a:	f040 808a 	bne.w	40de22 <_dtoa_r+0x1d2>
  40dd0e:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40dd10:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40dd12:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40dd16:	443d      	add	r5, r7
  40dd18:	429d      	cmp	r5, r3
  40dd1a:	f2c0 8294 	blt.w	40e246 <_dtoa_r+0x5f6>
  40dd1e:	331f      	adds	r3, #31
  40dd20:	f205 4212 	addw	r2, r5, #1042	; 0x412
  40dd24:	1b5b      	subs	r3, r3, r5
  40dd26:	fa09 f303 	lsl.w	r3, r9, r3
  40dd2a:	fa2a f202 	lsr.w	r2, sl, r2
  40dd2e:	ea43 0002 	orr.w	r0, r3, r2
  40dd32:	f005 f85b 	bl	412dec <__aeabi_ui2d>
  40dd36:	2601      	movs	r6, #1
  40dd38:	3d01      	subs	r5, #1
  40dd3a:	46b8      	mov	r8, r7
  40dd3c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40dd40:	9616      	str	r6, [sp, #88]	; 0x58
  40dd42:	2200      	movs	r2, #0
  40dd44:	4b77      	ldr	r3, [pc, #476]	; (40df24 <_dtoa_r+0x2d4>)
  40dd46:	f004 ff13 	bl	412b70 <__aeabi_dsub>
  40dd4a:	a36d      	add	r3, pc, #436	; (adr r3, 40df00 <_dtoa_r+0x2b0>)
  40dd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40dd50:	f005 f8c2 	bl	412ed8 <__aeabi_dmul>
  40dd54:	a36c      	add	r3, pc, #432	; (adr r3, 40df08 <_dtoa_r+0x2b8>)
  40dd56:	e9d3 2300 	ldrd	r2, r3, [r3]
  40dd5a:	f004 ff0b 	bl	412b74 <__adddf3>
  40dd5e:	4606      	mov	r6, r0
  40dd60:	4628      	mov	r0, r5
  40dd62:	460f      	mov	r7, r1
  40dd64:	f005 f852 	bl	412e0c <__aeabi_i2d>
  40dd68:	a369      	add	r3, pc, #420	; (adr r3, 40df10 <_dtoa_r+0x2c0>)
  40dd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40dd6e:	f005 f8b3 	bl	412ed8 <__aeabi_dmul>
  40dd72:	4602      	mov	r2, r0
  40dd74:	460b      	mov	r3, r1
  40dd76:	4630      	mov	r0, r6
  40dd78:	4639      	mov	r1, r7
  40dd7a:	f004 fefb 	bl	412b74 <__adddf3>
  40dd7e:	4606      	mov	r6, r0
  40dd80:	460f      	mov	r7, r1
  40dd82:	f005 fb43 	bl	41340c <__aeabi_d2iz>
  40dd86:	4639      	mov	r1, r7
  40dd88:	9007      	str	r0, [sp, #28]
  40dd8a:	2200      	movs	r2, #0
  40dd8c:	4630      	mov	r0, r6
  40dd8e:	2300      	movs	r3, #0
  40dd90:	f005 fb14 	bl	4133bc <__aeabi_dcmplt>
  40dd94:	2800      	cmp	r0, #0
  40dd96:	f040 8228 	bne.w	40e1ea <_dtoa_r+0x59a>
  40dd9a:	9e07      	ldr	r6, [sp, #28]
  40dd9c:	2e16      	cmp	r6, #22
  40dd9e:	f200 8221 	bhi.w	40e1e4 <_dtoa_r+0x594>
  40dda2:	4b61      	ldr	r3, [pc, #388]	; (40df28 <_dtoa_r+0x2d8>)
  40dda4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40dda8:	e9d3 0100 	ldrd	r0, r1, [r3]
  40ddac:	4652      	mov	r2, sl
  40ddae:	465b      	mov	r3, fp
  40ddb0:	f005 fb22 	bl	4133f8 <__aeabi_dcmpgt>
  40ddb4:	2800      	cmp	r0, #0
  40ddb6:	f000 824b 	beq.w	40e250 <_dtoa_r+0x600>
  40ddba:	3e01      	subs	r6, #1
  40ddbc:	9607      	str	r6, [sp, #28]
  40ddbe:	2600      	movs	r6, #0
  40ddc0:	960e      	str	r6, [sp, #56]	; 0x38
  40ddc2:	ebc5 0508 	rsb	r5, r5, r8
  40ddc6:	3d01      	subs	r5, #1
  40ddc8:	9506      	str	r5, [sp, #24]
  40ddca:	f100 8225 	bmi.w	40e218 <_dtoa_r+0x5c8>
  40ddce:	2500      	movs	r5, #0
  40ddd0:	9508      	str	r5, [sp, #32]
  40ddd2:	9e07      	ldr	r6, [sp, #28]
  40ddd4:	2e00      	cmp	r6, #0
  40ddd6:	f2c0 8216 	blt.w	40e206 <_dtoa_r+0x5b6>
  40ddda:	9d06      	ldr	r5, [sp, #24]
  40dddc:	960d      	str	r6, [sp, #52]	; 0x34
  40ddde:	4435      	add	r5, r6
  40dde0:	2600      	movs	r6, #0
  40dde2:	9506      	str	r5, [sp, #24]
  40dde4:	960c      	str	r6, [sp, #48]	; 0x30
  40dde6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40dde8:	2d09      	cmp	r5, #9
  40ddea:	d82c      	bhi.n	40de46 <_dtoa_r+0x1f6>
  40ddec:	2d05      	cmp	r5, #5
  40ddee:	bfc4      	itt	gt
  40ddf0:	3d04      	subgt	r5, #4
  40ddf2:	9524      	strgt	r5, [sp, #144]	; 0x90
  40ddf4:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40ddf6:	f1a6 0302 	sub.w	r3, r6, #2
  40ddfa:	bfcc      	ite	gt
  40ddfc:	2500      	movgt	r5, #0
  40ddfe:	2501      	movle	r5, #1
  40de00:	2b03      	cmp	r3, #3
  40de02:	d822      	bhi.n	40de4a <_dtoa_r+0x1fa>
  40de04:	e8df f013 	tbh	[pc, r3, lsl #1]
  40de08:	029e03b7 	.word	0x029e03b7
  40de0c:	049a03c0 	.word	0x049a03c0
  40de10:	4a46      	ldr	r2, [pc, #280]	; (40df2c <_dtoa_r+0x2dc>)
  40de12:	4b43      	ldr	r3, [pc, #268]	; (40df20 <_dtoa_r+0x2d0>)
  40de14:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40de18:	2800      	cmp	r0, #0
  40de1a:	bf0c      	ite	eq
  40de1c:	4610      	moveq	r0, r2
  40de1e:	4618      	movne	r0, r3
  40de20:	e753      	b.n	40dcca <_dtoa_r+0x7a>
  40de22:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40de26:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40de2a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  40de2e:	4650      	mov	r0, sl
  40de30:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40de34:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40de38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  40de3c:	e781      	b.n	40dd42 <_dtoa_r+0xf2>
  40de3e:	483c      	ldr	r0, [pc, #240]	; (40df30 <_dtoa_r+0x2e0>)
  40de40:	e737      	b.n	40dcb2 <_dtoa_r+0x62>
  40de42:	1cc3      	adds	r3, r0, #3
  40de44:	e74a      	b.n	40dcdc <_dtoa_r+0x8c>
  40de46:	2500      	movs	r5, #0
  40de48:	9524      	str	r5, [sp, #144]	; 0x90
  40de4a:	2500      	movs	r5, #0
  40de4c:	6465      	str	r5, [r4, #68]	; 0x44
  40de4e:	4629      	mov	r1, r5
  40de50:	4620      	mov	r0, r4
  40de52:	f001 fed5 	bl	40fc00 <_Balloc>
  40de56:	f04f 39ff 	mov.w	r9, #4294967295
  40de5a:	2601      	movs	r6, #1
  40de5c:	9009      	str	r0, [sp, #36]	; 0x24
  40de5e:	9525      	str	r5, [sp, #148]	; 0x94
  40de60:	6420      	str	r0, [r4, #64]	; 0x40
  40de62:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40de66:	960b      	str	r6, [sp, #44]	; 0x2c
  40de68:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40de6a:	2b00      	cmp	r3, #0
  40de6c:	f2c0 80d2 	blt.w	40e014 <_dtoa_r+0x3c4>
  40de70:	9e07      	ldr	r6, [sp, #28]
  40de72:	2e0e      	cmp	r6, #14
  40de74:	f300 80ce 	bgt.w	40e014 <_dtoa_r+0x3c4>
  40de78:	4b2b      	ldr	r3, [pc, #172]	; (40df28 <_dtoa_r+0x2d8>)
  40de7a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40de7e:	e9d3 0100 	ldrd	r0, r1, [r3]
  40de82:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40de86:	9925      	ldr	r1, [sp, #148]	; 0x94
  40de88:	2900      	cmp	r1, #0
  40de8a:	f2c0 8380 	blt.w	40e58e <_dtoa_r+0x93e>
  40de8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40de92:	4659      	mov	r1, fp
  40de94:	4650      	mov	r0, sl
  40de96:	f005 f949 	bl	41312c <__aeabi_ddiv>
  40de9a:	f005 fab7 	bl	41340c <__aeabi_d2iz>
  40de9e:	4605      	mov	r5, r0
  40dea0:	f004 ffb4 	bl	412e0c <__aeabi_i2d>
  40dea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40dea8:	f005 f816 	bl	412ed8 <__aeabi_dmul>
  40deac:	4602      	mov	r2, r0
  40deae:	460b      	mov	r3, r1
  40deb0:	4650      	mov	r0, sl
  40deb2:	4659      	mov	r1, fp
  40deb4:	f004 fe5c 	bl	412b70 <__aeabi_dsub>
  40deb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40deba:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40debe:	f1b9 0f01 	cmp.w	r9, #1
  40dec2:	4606      	mov	r6, r0
  40dec4:	460f      	mov	r7, r1
  40dec6:	7013      	strb	r3, [r2, #0]
  40dec8:	f102 0b01 	add.w	fp, r2, #1
  40decc:	d064      	beq.n	40df98 <_dtoa_r+0x348>
  40dece:	2200      	movs	r2, #0
  40ded0:	4b18      	ldr	r3, [pc, #96]	; (40df34 <_dtoa_r+0x2e4>)
  40ded2:	f005 f801 	bl	412ed8 <__aeabi_dmul>
  40ded6:	2200      	movs	r2, #0
  40ded8:	2300      	movs	r3, #0
  40deda:	4606      	mov	r6, r0
  40dedc:	460f      	mov	r7, r1
  40dede:	f005 fa63 	bl	4133a8 <__aeabi_dcmpeq>
  40dee2:	2800      	cmp	r0, #0
  40dee4:	f040 8081 	bne.w	40dfea <_dtoa_r+0x39a>
  40dee8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  40deec:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40deee:	9403      	str	r4, [sp, #12]
  40def0:	44c8      	add	r8, r9
  40def2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  40def6:	f105 0902 	add.w	r9, r5, #2
  40defa:	e028      	b.n	40df4e <_dtoa_r+0x2fe>
  40defc:	f3af 8000 	nop.w
  40df00:	636f4361 	.word	0x636f4361
  40df04:	3fd287a7 	.word	0x3fd287a7
  40df08:	8b60c8b3 	.word	0x8b60c8b3
  40df0c:	3fc68a28 	.word	0x3fc68a28
  40df10:	509f79fb 	.word	0x509f79fb
  40df14:	3fd34413 	.word	0x3fd34413
  40df18:	7ff00000 	.word	0x7ff00000
  40df1c:	004136d9 	.word	0x004136d9
  40df20:	00413848 	.word	0x00413848
  40df24:	3ff80000 	.word	0x3ff80000
  40df28:	00413858 	.word	0x00413858
  40df2c:	0041383c 	.word	0x0041383c
  40df30:	004136d8 	.word	0x004136d8
  40df34:	40240000 	.word	0x40240000
  40df38:	f004 ffce 	bl	412ed8 <__aeabi_dmul>
  40df3c:	2200      	movs	r2, #0
  40df3e:	2300      	movs	r3, #0
  40df40:	4606      	mov	r6, r0
  40df42:	460f      	mov	r7, r1
  40df44:	f005 fa30 	bl	4133a8 <__aeabi_dcmpeq>
  40df48:	2800      	cmp	r0, #0
  40df4a:	f040 83c1 	bne.w	40e6d0 <_dtoa_r+0xa80>
  40df4e:	4652      	mov	r2, sl
  40df50:	465b      	mov	r3, fp
  40df52:	4630      	mov	r0, r6
  40df54:	4639      	mov	r1, r7
  40df56:	f005 f8e9 	bl	41312c <__aeabi_ddiv>
  40df5a:	f005 fa57 	bl	41340c <__aeabi_d2iz>
  40df5e:	4605      	mov	r5, r0
  40df60:	f004 ff54 	bl	412e0c <__aeabi_i2d>
  40df64:	4652      	mov	r2, sl
  40df66:	465b      	mov	r3, fp
  40df68:	f004 ffb6 	bl	412ed8 <__aeabi_dmul>
  40df6c:	4602      	mov	r2, r0
  40df6e:	460b      	mov	r3, r1
  40df70:	4630      	mov	r0, r6
  40df72:	4639      	mov	r1, r7
  40df74:	f004 fdfc 	bl	412b70 <__aeabi_dsub>
  40df78:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  40df7c:	45c1      	cmp	r9, r8
  40df7e:	f809 ec01 	strb.w	lr, [r9, #-1]
  40df82:	464c      	mov	r4, r9
  40df84:	4606      	mov	r6, r0
  40df86:	460f      	mov	r7, r1
  40df88:	f04f 0200 	mov.w	r2, #0
  40df8c:	4ba7      	ldr	r3, [pc, #668]	; (40e22c <_dtoa_r+0x5dc>)
  40df8e:	f109 0901 	add.w	r9, r9, #1
  40df92:	d1d1      	bne.n	40df38 <_dtoa_r+0x2e8>
  40df94:	46a3      	mov	fp, r4
  40df96:	9c03      	ldr	r4, [sp, #12]
  40df98:	4632      	mov	r2, r6
  40df9a:	463b      	mov	r3, r7
  40df9c:	4630      	mov	r0, r6
  40df9e:	4639      	mov	r1, r7
  40dfa0:	f004 fde8 	bl	412b74 <__adddf3>
  40dfa4:	4606      	mov	r6, r0
  40dfa6:	460f      	mov	r7, r1
  40dfa8:	4632      	mov	r2, r6
  40dfaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40dfae:	463b      	mov	r3, r7
  40dfb0:	f005 fa04 	bl	4133bc <__aeabi_dcmplt>
  40dfb4:	b940      	cbnz	r0, 40dfc8 <_dtoa_r+0x378>
  40dfb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40dfba:	4632      	mov	r2, r6
  40dfbc:	463b      	mov	r3, r7
  40dfbe:	f005 f9f3 	bl	4133a8 <__aeabi_dcmpeq>
  40dfc2:	b190      	cbz	r0, 40dfea <_dtoa_r+0x39a>
  40dfc4:	07eb      	lsls	r3, r5, #31
  40dfc6:	d510      	bpl.n	40dfea <_dtoa_r+0x39a>
  40dfc8:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  40dfcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dfce:	e005      	b.n	40dfdc <_dtoa_r+0x38c>
  40dfd0:	429a      	cmp	r2, r3
  40dfd2:	f000 8428 	beq.w	40e826 <_dtoa_r+0xbd6>
  40dfd6:	f813 5c01 	ldrb.w	r5, [r3, #-1]
  40dfda:	469b      	mov	fp, r3
  40dfdc:	2d39      	cmp	r5, #57	; 0x39
  40dfde:	f10b 33ff 	add.w	r3, fp, #4294967295
  40dfe2:	d0f5      	beq.n	40dfd0 <_dtoa_r+0x380>
  40dfe4:	1c6a      	adds	r2, r5, #1
  40dfe6:	b2d2      	uxtb	r2, r2
  40dfe8:	701a      	strb	r2, [r3, #0]
  40dfea:	4620      	mov	r0, r4
  40dfec:	990a      	ldr	r1, [sp, #40]	; 0x28
  40dfee:	f001 fe2d 	bl	40fc4c <_Bfree>
  40dff2:	9e07      	ldr	r6, [sp, #28]
  40dff4:	9d26      	ldr	r5, [sp, #152]	; 0x98
  40dff6:	1c73      	adds	r3, r6, #1
  40dff8:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  40dffa:	2200      	movs	r2, #0
  40dffc:	f88b 2000 	strb.w	r2, [fp]
  40e000:	602b      	str	r3, [r5, #0]
  40e002:	2e00      	cmp	r6, #0
  40e004:	f000 8325 	beq.w	40e652 <_dtoa_r+0xa02>
  40e008:	9809      	ldr	r0, [sp, #36]	; 0x24
  40e00a:	f8c6 b000 	str.w	fp, [r6]
  40e00e:	b01b      	add	sp, #108	; 0x6c
  40e010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e014:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40e016:	2d00      	cmp	r5, #0
  40e018:	f000 8103 	beq.w	40e222 <_dtoa_r+0x5d2>
  40e01c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40e01e:	2e01      	cmp	r6, #1
  40e020:	f340 82dc 	ble.w	40e5dc <_dtoa_r+0x98c>
  40e024:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40e026:	f109 37ff 	add.w	r7, r9, #4294967295
  40e02a:	42be      	cmp	r6, r7
  40e02c:	f2c0 8389 	blt.w	40e742 <_dtoa_r+0xaf2>
  40e030:	1bf7      	subs	r7, r6, r7
  40e032:	f1b9 0f00 	cmp.w	r9, #0
  40e036:	f2c0 8486 	blt.w	40e946 <_dtoa_r+0xcf6>
  40e03a:	9d08      	ldr	r5, [sp, #32]
  40e03c:	464b      	mov	r3, r9
  40e03e:	9e08      	ldr	r6, [sp, #32]
  40e040:	441e      	add	r6, r3
  40e042:	9608      	str	r6, [sp, #32]
  40e044:	9e06      	ldr	r6, [sp, #24]
  40e046:	4620      	mov	r0, r4
  40e048:	441e      	add	r6, r3
  40e04a:	2101      	movs	r1, #1
  40e04c:	9606      	str	r6, [sp, #24]
  40e04e:	f001 feed 	bl	40fe2c <__i2b>
  40e052:	4606      	mov	r6, r0
  40e054:	b165      	cbz	r5, 40e070 <_dtoa_r+0x420>
  40e056:	9806      	ldr	r0, [sp, #24]
  40e058:	2800      	cmp	r0, #0
  40e05a:	dd09      	ble.n	40e070 <_dtoa_r+0x420>
  40e05c:	4603      	mov	r3, r0
  40e05e:	9908      	ldr	r1, [sp, #32]
  40e060:	42ab      	cmp	r3, r5
  40e062:	bfa8      	it	ge
  40e064:	462b      	movge	r3, r5
  40e066:	1ac9      	subs	r1, r1, r3
  40e068:	1ac0      	subs	r0, r0, r3
  40e06a:	9108      	str	r1, [sp, #32]
  40e06c:	1aed      	subs	r5, r5, r3
  40e06e:	9006      	str	r0, [sp, #24]
  40e070:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e072:	2a00      	cmp	r2, #0
  40e074:	dd1d      	ble.n	40e0b2 <_dtoa_r+0x462>
  40e076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e078:	2b00      	cmp	r3, #0
  40e07a:	f000 8358 	beq.w	40e72e <_dtoa_r+0xade>
  40e07e:	2f00      	cmp	r7, #0
  40e080:	dd11      	ble.n	40e0a6 <_dtoa_r+0x456>
  40e082:	4631      	mov	r1, r6
  40e084:	463a      	mov	r2, r7
  40e086:	4620      	mov	r0, r4
  40e088:	f001 ff78 	bl	40ff7c <__pow5mult>
  40e08c:	4606      	mov	r6, r0
  40e08e:	4631      	mov	r1, r6
  40e090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40e092:	4620      	mov	r0, r4
  40e094:	f001 fed4 	bl	40fe40 <__multiply>
  40e098:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e09a:	4680      	mov	r8, r0
  40e09c:	4620      	mov	r0, r4
  40e09e:	f001 fdd5 	bl	40fc4c <_Bfree>
  40e0a2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  40e0a6:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  40e0aa:	ebbe 0207 	subs.w	r2, lr, r7
  40e0ae:	f040 828f 	bne.w	40e5d0 <_dtoa_r+0x980>
  40e0b2:	4620      	mov	r0, r4
  40e0b4:	2101      	movs	r1, #1
  40e0b6:	f001 feb9 	bl	40fe2c <__i2b>
  40e0ba:	4680      	mov	r8, r0
  40e0bc:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e0be:	2800      	cmp	r0, #0
  40e0c0:	dd05      	ble.n	40e0ce <_dtoa_r+0x47e>
  40e0c2:	4641      	mov	r1, r8
  40e0c4:	4620      	mov	r0, r4
  40e0c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40e0c8:	f001 ff58 	bl	40ff7c <__pow5mult>
  40e0cc:	4680      	mov	r8, r0
  40e0ce:	9924      	ldr	r1, [sp, #144]	; 0x90
  40e0d0:	2901      	cmp	r1, #1
  40e0d2:	f340 82c1 	ble.w	40e658 <_dtoa_r+0xa08>
  40e0d6:	2700      	movs	r7, #0
  40e0d8:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e0da:	2800      	cmp	r0, #0
  40e0dc:	f040 82af 	bne.w	40e63e <_dtoa_r+0x9ee>
  40e0e0:	2001      	movs	r0, #1
  40e0e2:	9b06      	ldr	r3, [sp, #24]
  40e0e4:	4403      	add	r3, r0
  40e0e6:	f013 031f 	ands.w	r3, r3, #31
  40e0ea:	f000 80a1 	beq.w	40e230 <_dtoa_r+0x5e0>
  40e0ee:	f1c3 0220 	rsb	r2, r3, #32
  40e0f2:	2a04      	cmp	r2, #4
  40e0f4:	f340 84b5 	ble.w	40ea62 <_dtoa_r+0xe12>
  40e0f8:	9908      	ldr	r1, [sp, #32]
  40e0fa:	9a06      	ldr	r2, [sp, #24]
  40e0fc:	f1c3 031c 	rsb	r3, r3, #28
  40e100:	4419      	add	r1, r3
  40e102:	441a      	add	r2, r3
  40e104:	9108      	str	r1, [sp, #32]
  40e106:	441d      	add	r5, r3
  40e108:	9206      	str	r2, [sp, #24]
  40e10a:	9908      	ldr	r1, [sp, #32]
  40e10c:	2900      	cmp	r1, #0
  40e10e:	dd05      	ble.n	40e11c <_dtoa_r+0x4cc>
  40e110:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e112:	9a08      	ldr	r2, [sp, #32]
  40e114:	4620      	mov	r0, r4
  40e116:	f001 ff7f 	bl	410018 <__lshift>
  40e11a:	900a      	str	r0, [sp, #40]	; 0x28
  40e11c:	9a06      	ldr	r2, [sp, #24]
  40e11e:	2a00      	cmp	r2, #0
  40e120:	dd04      	ble.n	40e12c <_dtoa_r+0x4dc>
  40e122:	4641      	mov	r1, r8
  40e124:	4620      	mov	r0, r4
  40e126:	f001 ff77 	bl	410018 <__lshift>
  40e12a:	4680      	mov	r8, r0
  40e12c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40e12e:	2b00      	cmp	r3, #0
  40e130:	f040 826a 	bne.w	40e608 <_dtoa_r+0x9b8>
  40e134:	f1b9 0f00 	cmp.w	r9, #0
  40e138:	f340 82a6 	ble.w	40e688 <_dtoa_r+0xa38>
  40e13c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e13e:	2800      	cmp	r0, #0
  40e140:	f040 8088 	bne.w	40e254 <_dtoa_r+0x604>
  40e144:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40e146:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40e148:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40e14c:	e006      	b.n	40e15c <_dtoa_r+0x50c>
  40e14e:	4639      	mov	r1, r7
  40e150:	4620      	mov	r0, r4
  40e152:	220a      	movs	r2, #10
  40e154:	2300      	movs	r3, #0
  40e156:	f001 fd83 	bl	40fc60 <__multadd>
  40e15a:	4607      	mov	r7, r0
  40e15c:	4638      	mov	r0, r7
  40e15e:	4641      	mov	r1, r8
  40e160:	f7ff fcde 	bl	40db20 <quorem>
  40e164:	3030      	adds	r0, #48	; 0x30
  40e166:	f80b 0005 	strb.w	r0, [fp, r5]
  40e16a:	3501      	adds	r5, #1
  40e16c:	45a9      	cmp	r9, r5
  40e16e:	dcee      	bgt.n	40e14e <_dtoa_r+0x4fe>
  40e170:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40e174:	970a      	str	r7, [sp, #40]	; 0x28
  40e176:	4682      	mov	sl, r0
  40e178:	f1b9 0f01 	cmp.w	r9, #1
  40e17c:	bfac      	ite	ge
  40e17e:	44cb      	addge	fp, r9
  40e180:	f10b 0b01 	addlt.w	fp, fp, #1
  40e184:	2500      	movs	r5, #0
  40e186:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e188:	2201      	movs	r2, #1
  40e18a:	4620      	mov	r0, r4
  40e18c:	f001 ff44 	bl	410018 <__lshift>
  40e190:	4641      	mov	r1, r8
  40e192:	900a      	str	r0, [sp, #40]	; 0x28
  40e194:	f001 ff9e 	bl	4100d4 <__mcmp>
  40e198:	2800      	cmp	r0, #0
  40e19a:	f340 8309 	ble.w	40e7b0 <_dtoa_r+0xb60>
  40e19e:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  40e1a2:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e1a4:	e005      	b.n	40e1b2 <_dtoa_r+0x562>
  40e1a6:	4299      	cmp	r1, r3
  40e1a8:	f000 828b 	beq.w	40e6c2 <_dtoa_r+0xa72>
  40e1ac:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  40e1b0:	469b      	mov	fp, r3
  40e1b2:	2a39      	cmp	r2, #57	; 0x39
  40e1b4:	f10b 33ff 	add.w	r3, fp, #4294967295
  40e1b8:	d0f5      	beq.n	40e1a6 <_dtoa_r+0x556>
  40e1ba:	3201      	adds	r2, #1
  40e1bc:	701a      	strb	r2, [r3, #0]
  40e1be:	4641      	mov	r1, r8
  40e1c0:	4620      	mov	r0, r4
  40e1c2:	f001 fd43 	bl	40fc4c <_Bfree>
  40e1c6:	2e00      	cmp	r6, #0
  40e1c8:	f43f af0f 	beq.w	40dfea <_dtoa_r+0x39a>
  40e1cc:	b12d      	cbz	r5, 40e1da <_dtoa_r+0x58a>
  40e1ce:	42b5      	cmp	r5, r6
  40e1d0:	d003      	beq.n	40e1da <_dtoa_r+0x58a>
  40e1d2:	4629      	mov	r1, r5
  40e1d4:	4620      	mov	r0, r4
  40e1d6:	f001 fd39 	bl	40fc4c <_Bfree>
  40e1da:	4631      	mov	r1, r6
  40e1dc:	4620      	mov	r0, r4
  40e1de:	f001 fd35 	bl	40fc4c <_Bfree>
  40e1e2:	e702      	b.n	40dfea <_dtoa_r+0x39a>
  40e1e4:	2601      	movs	r6, #1
  40e1e6:	960e      	str	r6, [sp, #56]	; 0x38
  40e1e8:	e5eb      	b.n	40ddc2 <_dtoa_r+0x172>
  40e1ea:	9807      	ldr	r0, [sp, #28]
  40e1ec:	f004 fe0e 	bl	412e0c <__aeabi_i2d>
  40e1f0:	4632      	mov	r2, r6
  40e1f2:	463b      	mov	r3, r7
  40e1f4:	f005 f8d8 	bl	4133a8 <__aeabi_dcmpeq>
  40e1f8:	2800      	cmp	r0, #0
  40e1fa:	f47f adce 	bne.w	40dd9a <_dtoa_r+0x14a>
  40e1fe:	9e07      	ldr	r6, [sp, #28]
  40e200:	3e01      	subs	r6, #1
  40e202:	9607      	str	r6, [sp, #28]
  40e204:	e5c9      	b.n	40dd9a <_dtoa_r+0x14a>
  40e206:	9e07      	ldr	r6, [sp, #28]
  40e208:	9d08      	ldr	r5, [sp, #32]
  40e20a:	1bad      	subs	r5, r5, r6
  40e20c:	9508      	str	r5, [sp, #32]
  40e20e:	4275      	negs	r5, r6
  40e210:	2600      	movs	r6, #0
  40e212:	950c      	str	r5, [sp, #48]	; 0x30
  40e214:	960d      	str	r6, [sp, #52]	; 0x34
  40e216:	e5e6      	b.n	40dde6 <_dtoa_r+0x196>
  40e218:	426d      	negs	r5, r5
  40e21a:	2600      	movs	r6, #0
  40e21c:	9508      	str	r5, [sp, #32]
  40e21e:	9606      	str	r6, [sp, #24]
  40e220:	e5d7      	b.n	40ddd2 <_dtoa_r+0x182>
  40e222:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40e224:	9d08      	ldr	r5, [sp, #32]
  40e226:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40e228:	e714      	b.n	40e054 <_dtoa_r+0x404>
  40e22a:	bf00      	nop
  40e22c:	40240000 	.word	0x40240000
  40e230:	231c      	movs	r3, #28
  40e232:	f8dd e020 	ldr.w	lr, [sp, #32]
  40e236:	9806      	ldr	r0, [sp, #24]
  40e238:	449e      	add	lr, r3
  40e23a:	4418      	add	r0, r3
  40e23c:	f8cd e020 	str.w	lr, [sp, #32]
  40e240:	441d      	add	r5, r3
  40e242:	9006      	str	r0, [sp, #24]
  40e244:	e761      	b.n	40e10a <_dtoa_r+0x4ba>
  40e246:	48a7      	ldr	r0, [pc, #668]	; (40e4e4 <_dtoa_r+0x894>)
  40e248:	1b40      	subs	r0, r0, r5
  40e24a:	fa0a f000 	lsl.w	r0, sl, r0
  40e24e:	e570      	b.n	40dd32 <_dtoa_r+0xe2>
  40e250:	900e      	str	r0, [sp, #56]	; 0x38
  40e252:	e5b6      	b.n	40ddc2 <_dtoa_r+0x172>
  40e254:	2d00      	cmp	r5, #0
  40e256:	dd05      	ble.n	40e264 <_dtoa_r+0x614>
  40e258:	4631      	mov	r1, r6
  40e25a:	462a      	mov	r2, r5
  40e25c:	4620      	mov	r0, r4
  40e25e:	f001 fedb 	bl	410018 <__lshift>
  40e262:	4606      	mov	r6, r0
  40e264:	2f00      	cmp	r7, #0
  40e266:	f040 82e8 	bne.w	40e83a <_dtoa_r+0xbea>
  40e26a:	4637      	mov	r7, r6
  40e26c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e26e:	9809      	ldr	r0, [sp, #36]	; 0x24
  40e270:	444d      	add	r5, r9
  40e272:	9508      	str	r5, [sp, #32]
  40e274:	f00a 0501 	and.w	r5, sl, #1
  40e278:	950b      	str	r5, [sp, #44]	; 0x2c
  40e27a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  40e27e:	1c45      	adds	r5, r0, #1
  40e280:	e00a      	b.n	40e298 <_dtoa_r+0x648>
  40e282:	f001 fced 	bl	40fc60 <__multadd>
  40e286:	4639      	mov	r1, r7
  40e288:	4606      	mov	r6, r0
  40e28a:	220a      	movs	r2, #10
  40e28c:	4620      	mov	r0, r4
  40e28e:	2300      	movs	r3, #0
  40e290:	f001 fce6 	bl	40fc60 <__multadd>
  40e294:	4607      	mov	r7, r0
  40e296:	3501      	adds	r5, #1
  40e298:	4641      	mov	r1, r8
  40e29a:	4648      	mov	r0, r9
  40e29c:	f7ff fc40 	bl	40db20 <quorem>
  40e2a0:	4631      	mov	r1, r6
  40e2a2:	4683      	mov	fp, r0
  40e2a4:	4648      	mov	r0, r9
  40e2a6:	f001 ff15 	bl	4100d4 <__mcmp>
  40e2aa:	4641      	mov	r1, r8
  40e2ac:	9003      	str	r0, [sp, #12]
  40e2ae:	463a      	mov	r2, r7
  40e2b0:	4620      	mov	r0, r4
  40e2b2:	f001 ff33 	bl	41011c <__mdiff>
  40e2b6:	68c2      	ldr	r2, [r0, #12]
  40e2b8:	1e69      	subs	r1, r5, #1
  40e2ba:	4603      	mov	r3, r0
  40e2bc:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
  40e2c0:	9106      	str	r1, [sp, #24]
  40e2c2:	2a00      	cmp	r2, #0
  40e2c4:	f040 8193 	bne.w	40e5ee <_dtoa_r+0x99e>
  40e2c8:	4619      	mov	r1, r3
  40e2ca:	4648      	mov	r0, r9
  40e2cc:	9302      	str	r3, [sp, #8]
  40e2ce:	f001 ff01 	bl	4100d4 <__mcmp>
  40e2d2:	9b02      	ldr	r3, [sp, #8]
  40e2d4:	4602      	mov	r2, r0
  40e2d6:	4619      	mov	r1, r3
  40e2d8:	4620      	mov	r0, r4
  40e2da:	9202      	str	r2, [sp, #8]
  40e2dc:	f001 fcb6 	bl	40fc4c <_Bfree>
  40e2e0:	9a02      	ldr	r2, [sp, #8]
  40e2e2:	b92a      	cbnz	r2, 40e2f0 <_dtoa_r+0x6a0>
  40e2e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40e2e6:	b91b      	cbnz	r3, 40e2f0 <_dtoa_r+0x6a0>
  40e2e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e2ea:	2800      	cmp	r0, #0
  40e2ec:	f000 8391 	beq.w	40ea12 <_dtoa_r+0xdc2>
  40e2f0:	9b03      	ldr	r3, [sp, #12]
  40e2f2:	2b00      	cmp	r3, #0
  40e2f4:	f2c0 8234 	blt.w	40e760 <_dtoa_r+0xb10>
  40e2f8:	d105      	bne.n	40e306 <_dtoa_r+0x6b6>
  40e2fa:	9824      	ldr	r0, [sp, #144]	; 0x90
  40e2fc:	b918      	cbnz	r0, 40e306 <_dtoa_r+0x6b6>
  40e2fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40e300:	2900      	cmp	r1, #0
  40e302:	f000 822d 	beq.w	40e760 <_dtoa_r+0xb10>
  40e306:	2a00      	cmp	r2, #0
  40e308:	f300 82ab 	bgt.w	40e862 <_dtoa_r+0xc12>
  40e30c:	f8dd e020 	ldr.w	lr, [sp, #32]
  40e310:	f805 ac01 	strb.w	sl, [r5, #-1]
  40e314:	4575      	cmp	r5, lr
  40e316:	46ab      	mov	fp, r5
  40e318:	f000 82b3 	beq.w	40e882 <_dtoa_r+0xc32>
  40e31c:	4649      	mov	r1, r9
  40e31e:	220a      	movs	r2, #10
  40e320:	2300      	movs	r3, #0
  40e322:	4620      	mov	r0, r4
  40e324:	f001 fc9c 	bl	40fc60 <__multadd>
  40e328:	42be      	cmp	r6, r7
  40e32a:	4681      	mov	r9, r0
  40e32c:	4631      	mov	r1, r6
  40e32e:	4620      	mov	r0, r4
  40e330:	f04f 020a 	mov.w	r2, #10
  40e334:	f04f 0300 	mov.w	r3, #0
  40e338:	d1a3      	bne.n	40e282 <_dtoa_r+0x632>
  40e33a:	f001 fc91 	bl	40fc60 <__multadd>
  40e33e:	4606      	mov	r6, r0
  40e340:	4607      	mov	r7, r0
  40e342:	e7a8      	b.n	40e296 <_dtoa_r+0x646>
  40e344:	2600      	movs	r6, #0
  40e346:	960b      	str	r6, [sp, #44]	; 0x2c
  40e348:	9e07      	ldr	r6, [sp, #28]
  40e34a:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
  40e34e:	44b6      	add	lr, r6
  40e350:	f10e 0901 	add.w	r9, lr, #1
  40e354:	f1b9 0f00 	cmp.w	r9, #0
  40e358:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  40e35c:	464e      	mov	r6, r9
  40e35e:	f340 8150 	ble.w	40e602 <_dtoa_r+0x9b2>
  40e362:	2100      	movs	r1, #0
  40e364:	2e17      	cmp	r6, #23
  40e366:	6461      	str	r1, [r4, #68]	; 0x44
  40e368:	d90a      	bls.n	40e380 <_dtoa_r+0x730>
  40e36a:	2201      	movs	r2, #1
  40e36c:	2304      	movs	r3, #4
  40e36e:	005b      	lsls	r3, r3, #1
  40e370:	f103 0014 	add.w	r0, r3, #20
  40e374:	42b0      	cmp	r0, r6
  40e376:	4611      	mov	r1, r2
  40e378:	f102 0201 	add.w	r2, r2, #1
  40e37c:	d9f7      	bls.n	40e36e <_dtoa_r+0x71e>
  40e37e:	6461      	str	r1, [r4, #68]	; 0x44
  40e380:	4620      	mov	r0, r4
  40e382:	f001 fc3d 	bl	40fc00 <_Balloc>
  40e386:	2e0e      	cmp	r6, #14
  40e388:	9009      	str	r0, [sp, #36]	; 0x24
  40e38a:	6420      	str	r0, [r4, #64]	; 0x40
  40e38c:	f63f ad6c 	bhi.w	40de68 <_dtoa_r+0x218>
  40e390:	2d00      	cmp	r5, #0
  40e392:	f43f ad69 	beq.w	40de68 <_dtoa_r+0x218>
  40e396:	9d07      	ldr	r5, [sp, #28]
  40e398:	2d00      	cmp	r5, #0
  40e39a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
  40e39e:	f340 821b 	ble.w	40e7d8 <_dtoa_r+0xb88>
  40e3a2:	4b51      	ldr	r3, [pc, #324]	; (40e4e8 <_dtoa_r+0x898>)
  40e3a4:	f005 020f 	and.w	r2, r5, #15
  40e3a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40e3ac:	112d      	asrs	r5, r5, #4
  40e3ae:	e9d3 6700 	ldrd	r6, r7, [r3]
  40e3b2:	06eb      	lsls	r3, r5, #27
  40e3b4:	f140 81cd 	bpl.w	40e752 <_dtoa_r+0xb02>
  40e3b8:	4b4c      	ldr	r3, [pc, #304]	; (40e4ec <_dtoa_r+0x89c>)
  40e3ba:	4650      	mov	r0, sl
  40e3bc:	4659      	mov	r1, fp
  40e3be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40e3c2:	f004 feb3 	bl	41312c <__aeabi_ddiv>
  40e3c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40e3ca:	f005 050f 	and.w	r5, r5, #15
  40e3ce:	f04f 0803 	mov.w	r8, #3
  40e3d2:	b18d      	cbz	r5, 40e3f8 <_dtoa_r+0x7a8>
  40e3d4:	f8df a114 	ldr.w	sl, [pc, #276]	; 40e4ec <_dtoa_r+0x89c>
  40e3d8:	4630      	mov	r0, r6
  40e3da:	4639      	mov	r1, r7
  40e3dc:	07ee      	lsls	r6, r5, #31
  40e3de:	d505      	bpl.n	40e3ec <_dtoa_r+0x79c>
  40e3e0:	e9da 2300 	ldrd	r2, r3, [sl]
  40e3e4:	f108 0801 	add.w	r8, r8, #1
  40e3e8:	f004 fd76 	bl	412ed8 <__aeabi_dmul>
  40e3ec:	106d      	asrs	r5, r5, #1
  40e3ee:	f10a 0a08 	add.w	sl, sl, #8
  40e3f2:	d1f3      	bne.n	40e3dc <_dtoa_r+0x78c>
  40e3f4:	4606      	mov	r6, r0
  40e3f6:	460f      	mov	r7, r1
  40e3f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40e3fc:	4632      	mov	r2, r6
  40e3fe:	463b      	mov	r3, r7
  40e400:	f004 fe94 	bl	41312c <__aeabi_ddiv>
  40e404:	4682      	mov	sl, r0
  40e406:	468b      	mov	fp, r1
  40e408:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40e40a:	b145      	cbz	r5, 40e41e <_dtoa_r+0x7ce>
  40e40c:	4650      	mov	r0, sl
  40e40e:	4659      	mov	r1, fp
  40e410:	2200      	movs	r2, #0
  40e412:	4b37      	ldr	r3, [pc, #220]	; (40e4f0 <_dtoa_r+0x8a0>)
  40e414:	f004 ffd2 	bl	4133bc <__aeabi_dcmplt>
  40e418:	2800      	cmp	r0, #0
  40e41a:	f040 82a9 	bne.w	40e970 <_dtoa_r+0xd20>
  40e41e:	4640      	mov	r0, r8
  40e420:	f004 fcf4 	bl	412e0c <__aeabi_i2d>
  40e424:	4652      	mov	r2, sl
  40e426:	465b      	mov	r3, fp
  40e428:	f004 fd56 	bl	412ed8 <__aeabi_dmul>
  40e42c:	2200      	movs	r2, #0
  40e42e:	4b31      	ldr	r3, [pc, #196]	; (40e4f4 <_dtoa_r+0x8a4>)
  40e430:	f004 fba0 	bl	412b74 <__adddf3>
  40e434:	4606      	mov	r6, r0
  40e436:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40e43a:	f1b9 0f00 	cmp.w	r9, #0
  40e43e:	f000 815a 	beq.w	40e6f6 <_dtoa_r+0xaa6>
  40e442:	9d07      	ldr	r5, [sp, #28]
  40e444:	9517      	str	r5, [sp, #92]	; 0x5c
  40e446:	46c8      	mov	r8, r9
  40e448:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40e44a:	2d00      	cmp	r5, #0
  40e44c:	f000 8222 	beq.w	40e894 <_dtoa_r+0xc44>
  40e450:	4b25      	ldr	r3, [pc, #148]	; (40e4e8 <_dtoa_r+0x898>)
  40e452:	4929      	ldr	r1, [pc, #164]	; (40e4f8 <_dtoa_r+0x8a8>)
  40e454:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40e458:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40e45c:	2000      	movs	r0, #0
  40e45e:	f004 fe65 	bl	41312c <__aeabi_ddiv>
  40e462:	4632      	mov	r2, r6
  40e464:	463b      	mov	r3, r7
  40e466:	f004 fb83 	bl	412b70 <__aeabi_dsub>
  40e46a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40e46e:	4659      	mov	r1, fp
  40e470:	4650      	mov	r0, sl
  40e472:	f004 ffcb 	bl	41340c <__aeabi_d2iz>
  40e476:	4605      	mov	r5, r0
  40e478:	f004 fcc8 	bl	412e0c <__aeabi_i2d>
  40e47c:	4602      	mov	r2, r0
  40e47e:	460b      	mov	r3, r1
  40e480:	4650      	mov	r0, sl
  40e482:	4659      	mov	r1, fp
  40e484:	f004 fb74 	bl	412b70 <__aeabi_dsub>
  40e488:	3530      	adds	r5, #48	; 0x30
  40e48a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40e48c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40e490:	b2ed      	uxtb	r5, r5
  40e492:	7035      	strb	r5, [r6, #0]
  40e494:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40e498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40e49c:	f106 0b01 	add.w	fp, r6, #1
  40e4a0:	f004 ffaa 	bl	4133f8 <__aeabi_dcmpgt>
  40e4a4:	2800      	cmp	r0, #0
  40e4a6:	f040 82a9 	bne.w	40e9fc <_dtoa_r+0xdac>
  40e4aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40e4ae:	2000      	movs	r0, #0
  40e4b0:	490f      	ldr	r1, [pc, #60]	; (40e4f0 <_dtoa_r+0x8a0>)
  40e4b2:	f004 fb5d 	bl	412b70 <__aeabi_dsub>
  40e4b6:	4602      	mov	r2, r0
  40e4b8:	460b      	mov	r3, r1
  40e4ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40e4be:	f004 ff9b 	bl	4133f8 <__aeabi_dcmpgt>
  40e4c2:	2800      	cmp	r0, #0
  40e4c4:	f040 82a0 	bne.w	40ea08 <_dtoa_r+0xdb8>
  40e4c8:	f1b8 0f01 	cmp.w	r8, #1
  40e4cc:	f340 8180 	ble.w	40e7d0 <_dtoa_r+0xb80>
  40e4d0:	44b0      	add	r8, r6
  40e4d2:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  40e4d6:	46a2      	mov	sl, r4
  40e4d8:	46c1      	mov	r9, r8
  40e4da:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  40e4de:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  40e4e2:	e019      	b.n	40e518 <_dtoa_r+0x8c8>
  40e4e4:	fffffbee 	.word	0xfffffbee
  40e4e8:	00413858 	.word	0x00413858
  40e4ec:	00413920 	.word	0x00413920
  40e4f0:	3ff00000 	.word	0x3ff00000
  40e4f4:	401c0000 	.word	0x401c0000
  40e4f8:	3fe00000 	.word	0x3fe00000
  40e4fc:	2000      	movs	r0, #0
  40e4fe:	49a8      	ldr	r1, [pc, #672]	; (40e7a0 <_dtoa_r+0xb50>)
  40e500:	f004 fb36 	bl	412b70 <__aeabi_dsub>
  40e504:	4622      	mov	r2, r4
  40e506:	462b      	mov	r3, r5
  40e508:	f004 ff58 	bl	4133bc <__aeabi_dcmplt>
  40e50c:	2800      	cmp	r0, #0
  40e50e:	f040 8279 	bne.w	40ea04 <_dtoa_r+0xdb4>
  40e512:	45cb      	cmp	fp, r9
  40e514:	f000 8159 	beq.w	40e7ca <_dtoa_r+0xb7a>
  40e518:	4620      	mov	r0, r4
  40e51a:	4629      	mov	r1, r5
  40e51c:	2200      	movs	r2, #0
  40e51e:	4ba1      	ldr	r3, [pc, #644]	; (40e7a4 <_dtoa_r+0xb54>)
  40e520:	f004 fcda 	bl	412ed8 <__aeabi_dmul>
  40e524:	2200      	movs	r2, #0
  40e526:	4b9f      	ldr	r3, [pc, #636]	; (40e7a4 <_dtoa_r+0xb54>)
  40e528:	4604      	mov	r4, r0
  40e52a:	460d      	mov	r5, r1
  40e52c:	4630      	mov	r0, r6
  40e52e:	4639      	mov	r1, r7
  40e530:	f004 fcd2 	bl	412ed8 <__aeabi_dmul>
  40e534:	460f      	mov	r7, r1
  40e536:	4606      	mov	r6, r0
  40e538:	f004 ff68 	bl	41340c <__aeabi_d2iz>
  40e53c:	4680      	mov	r8, r0
  40e53e:	f004 fc65 	bl	412e0c <__aeabi_i2d>
  40e542:	4602      	mov	r2, r0
  40e544:	460b      	mov	r3, r1
  40e546:	4630      	mov	r0, r6
  40e548:	4639      	mov	r1, r7
  40e54a:	f004 fb11 	bl	412b70 <__aeabi_dsub>
  40e54e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40e552:	fa5f f888 	uxtb.w	r8, r8
  40e556:	4622      	mov	r2, r4
  40e558:	462b      	mov	r3, r5
  40e55a:	f80b 8b01 	strb.w	r8, [fp], #1
  40e55e:	4606      	mov	r6, r0
  40e560:	460f      	mov	r7, r1
  40e562:	f004 ff2b 	bl	4133bc <__aeabi_dcmplt>
  40e566:	4632      	mov	r2, r6
  40e568:	463b      	mov	r3, r7
  40e56a:	2800      	cmp	r0, #0
  40e56c:	d0c6      	beq.n	40e4fc <_dtoa_r+0x8ac>
  40e56e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40e570:	9607      	str	r6, [sp, #28]
  40e572:	4654      	mov	r4, sl
  40e574:	e539      	b.n	40dfea <_dtoa_r+0x39a>
  40e576:	2600      	movs	r6, #0
  40e578:	960b      	str	r6, [sp, #44]	; 0x2c
  40e57a:	9825      	ldr	r0, [sp, #148]	; 0x94
  40e57c:	2800      	cmp	r0, #0
  40e57e:	dd3c      	ble.n	40e5fa <_dtoa_r+0x9aa>
  40e580:	4606      	mov	r6, r0
  40e582:	900f      	str	r0, [sp, #60]	; 0x3c
  40e584:	4681      	mov	r9, r0
  40e586:	e6ec      	b.n	40e362 <_dtoa_r+0x712>
  40e588:	2601      	movs	r6, #1
  40e58a:	960b      	str	r6, [sp, #44]	; 0x2c
  40e58c:	e7f5      	b.n	40e57a <_dtoa_r+0x92a>
  40e58e:	f1b9 0f00 	cmp.w	r9, #0
  40e592:	f73f ac7c 	bgt.w	40de8e <_dtoa_r+0x23e>
  40e596:	f040 80c6 	bne.w	40e726 <_dtoa_r+0xad6>
  40e59a:	2200      	movs	r2, #0
  40e59c:	4b82      	ldr	r3, [pc, #520]	; (40e7a8 <_dtoa_r+0xb58>)
  40e59e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40e5a2:	f004 fc99 	bl	412ed8 <__aeabi_dmul>
  40e5a6:	4652      	mov	r2, sl
  40e5a8:	465b      	mov	r3, fp
  40e5aa:	f004 ff1b 	bl	4133e4 <__aeabi_dcmpge>
  40e5ae:	46c8      	mov	r8, r9
  40e5b0:	464e      	mov	r6, r9
  40e5b2:	2800      	cmp	r0, #0
  40e5b4:	d07c      	beq.n	40e6b0 <_dtoa_r+0xa60>
  40e5b6:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40e5b8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40e5bc:	43ed      	mvns	r5, r5
  40e5be:	9507      	str	r5, [sp, #28]
  40e5c0:	4641      	mov	r1, r8
  40e5c2:	4620      	mov	r0, r4
  40e5c4:	f001 fb42 	bl	40fc4c <_Bfree>
  40e5c8:	2e00      	cmp	r6, #0
  40e5ca:	f47f ae06 	bne.w	40e1da <_dtoa_r+0x58a>
  40e5ce:	e50c      	b.n	40dfea <_dtoa_r+0x39a>
  40e5d0:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e5d2:	4620      	mov	r0, r4
  40e5d4:	f001 fcd2 	bl	40ff7c <__pow5mult>
  40e5d8:	900a      	str	r0, [sp, #40]	; 0x28
  40e5da:	e56a      	b.n	40e0b2 <_dtoa_r+0x462>
  40e5dc:	9d16      	ldr	r5, [sp, #88]	; 0x58
  40e5de:	2d00      	cmp	r5, #0
  40e5e0:	f000 81b7 	beq.w	40e952 <_dtoa_r+0xd02>
  40e5e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40e5e8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40e5ea:	9d08      	ldr	r5, [sp, #32]
  40e5ec:	e527      	b.n	40e03e <_dtoa_r+0x3ee>
  40e5ee:	4601      	mov	r1, r0
  40e5f0:	4620      	mov	r0, r4
  40e5f2:	f001 fb2b 	bl	40fc4c <_Bfree>
  40e5f6:	2201      	movs	r2, #1
  40e5f8:	e67a      	b.n	40e2f0 <_dtoa_r+0x6a0>
  40e5fa:	2601      	movs	r6, #1
  40e5fc:	9625      	str	r6, [sp, #148]	; 0x94
  40e5fe:	960f      	str	r6, [sp, #60]	; 0x3c
  40e600:	46b1      	mov	r9, r6
  40e602:	2100      	movs	r1, #0
  40e604:	6461      	str	r1, [r4, #68]	; 0x44
  40e606:	e6bb      	b.n	40e380 <_dtoa_r+0x730>
  40e608:	980a      	ldr	r0, [sp, #40]	; 0x28
  40e60a:	4641      	mov	r1, r8
  40e60c:	f001 fd62 	bl	4100d4 <__mcmp>
  40e610:	2800      	cmp	r0, #0
  40e612:	f6bf ad8f 	bge.w	40e134 <_dtoa_r+0x4e4>
  40e616:	f8dd e01c 	ldr.w	lr, [sp, #28]
  40e61a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e61c:	f10e 3eff 	add.w	lr, lr, #4294967295
  40e620:	4620      	mov	r0, r4
  40e622:	220a      	movs	r2, #10
  40e624:	2300      	movs	r3, #0
  40e626:	f8cd e01c 	str.w	lr, [sp, #28]
  40e62a:	f001 fb19 	bl	40fc60 <__multadd>
  40e62e:	900a      	str	r0, [sp, #40]	; 0x28
  40e630:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e632:	2800      	cmp	r0, #0
  40e634:	f040 8207 	bne.w	40ea46 <_dtoa_r+0xdf6>
  40e638:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  40e63c:	e57a      	b.n	40e134 <_dtoa_r+0x4e4>
  40e63e:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40e642:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40e646:	6918      	ldr	r0, [r3, #16]
  40e648:	f001 fba2 	bl	40fd90 <__hi0bits>
  40e64c:	f1c0 0020 	rsb	r0, r0, #32
  40e650:	e547      	b.n	40e0e2 <_dtoa_r+0x492>
  40e652:	9809      	ldr	r0, [sp, #36]	; 0x24
  40e654:	f7ff bb2d 	b.w	40dcb2 <_dtoa_r+0x62>
  40e658:	f1ba 0f00 	cmp.w	sl, #0
  40e65c:	f47f ad3b 	bne.w	40e0d6 <_dtoa_r+0x486>
  40e660:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40e664:	2b00      	cmp	r3, #0
  40e666:	f040 817b 	bne.w	40e960 <_dtoa_r+0xd10>
  40e66a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40e66e:	0d3f      	lsrs	r7, r7, #20
  40e670:	053f      	lsls	r7, r7, #20
  40e672:	2f00      	cmp	r7, #0
  40e674:	f43f ad30 	beq.w	40e0d8 <_dtoa_r+0x488>
  40e678:	9a08      	ldr	r2, [sp, #32]
  40e67a:	9b06      	ldr	r3, [sp, #24]
  40e67c:	3201      	adds	r2, #1
  40e67e:	3301      	adds	r3, #1
  40e680:	9208      	str	r2, [sp, #32]
  40e682:	9306      	str	r3, [sp, #24]
  40e684:	2701      	movs	r7, #1
  40e686:	e527      	b.n	40e0d8 <_dtoa_r+0x488>
  40e688:	9924      	ldr	r1, [sp, #144]	; 0x90
  40e68a:	2902      	cmp	r1, #2
  40e68c:	f77f ad56 	ble.w	40e13c <_dtoa_r+0x4ec>
  40e690:	f1b9 0f00 	cmp.w	r9, #0
  40e694:	d18f      	bne.n	40e5b6 <_dtoa_r+0x966>
  40e696:	4641      	mov	r1, r8
  40e698:	464b      	mov	r3, r9
  40e69a:	2205      	movs	r2, #5
  40e69c:	4620      	mov	r0, r4
  40e69e:	f001 fadf 	bl	40fc60 <__multadd>
  40e6a2:	4680      	mov	r8, r0
  40e6a4:	4641      	mov	r1, r8
  40e6a6:	980a      	ldr	r0, [sp, #40]	; 0x28
  40e6a8:	f001 fd14 	bl	4100d4 <__mcmp>
  40e6ac:	2800      	cmp	r0, #0
  40e6ae:	dd82      	ble.n	40e5b6 <_dtoa_r+0x966>
  40e6b0:	9d07      	ldr	r5, [sp, #28]
  40e6b2:	3501      	adds	r5, #1
  40e6b4:	9507      	str	r5, [sp, #28]
  40e6b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e6b8:	2331      	movs	r3, #49	; 0x31
  40e6ba:	702b      	strb	r3, [r5, #0]
  40e6bc:	f105 0b01 	add.w	fp, r5, #1
  40e6c0:	e77e      	b.n	40e5c0 <_dtoa_r+0x970>
  40e6c2:	9807      	ldr	r0, [sp, #28]
  40e6c4:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e6c6:	2331      	movs	r3, #49	; 0x31
  40e6c8:	3001      	adds	r0, #1
  40e6ca:	9007      	str	r0, [sp, #28]
  40e6cc:	700b      	strb	r3, [r1, #0]
  40e6ce:	e576      	b.n	40e1be <_dtoa_r+0x56e>
  40e6d0:	46a3      	mov	fp, r4
  40e6d2:	9c03      	ldr	r4, [sp, #12]
  40e6d4:	e489      	b.n	40dfea <_dtoa_r+0x39a>
  40e6d6:	4640      	mov	r0, r8
  40e6d8:	f004 fb98 	bl	412e0c <__aeabi_i2d>
  40e6dc:	4602      	mov	r2, r0
  40e6de:	460b      	mov	r3, r1
  40e6e0:	4650      	mov	r0, sl
  40e6e2:	4659      	mov	r1, fp
  40e6e4:	f004 fbf8 	bl	412ed8 <__aeabi_dmul>
  40e6e8:	2200      	movs	r2, #0
  40e6ea:	4b30      	ldr	r3, [pc, #192]	; (40e7ac <_dtoa_r+0xb5c>)
  40e6ec:	f004 fa42 	bl	412b74 <__adddf3>
  40e6f0:	4606      	mov	r6, r0
  40e6f2:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40e6f6:	4650      	mov	r0, sl
  40e6f8:	4659      	mov	r1, fp
  40e6fa:	2200      	movs	r2, #0
  40e6fc:	4b2a      	ldr	r3, [pc, #168]	; (40e7a8 <_dtoa_r+0xb58>)
  40e6fe:	f004 fa37 	bl	412b70 <__aeabi_dsub>
  40e702:	4632      	mov	r2, r6
  40e704:	463b      	mov	r3, r7
  40e706:	4682      	mov	sl, r0
  40e708:	468b      	mov	fp, r1
  40e70a:	f004 fe75 	bl	4133f8 <__aeabi_dcmpgt>
  40e70e:	2800      	cmp	r0, #0
  40e710:	f040 80bc 	bne.w	40e88c <_dtoa_r+0xc3c>
  40e714:	4632      	mov	r2, r6
  40e716:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40e71a:	4650      	mov	r0, sl
  40e71c:	4659      	mov	r1, fp
  40e71e:	f004 fe4d 	bl	4133bc <__aeabi_dcmplt>
  40e722:	2800      	cmp	r0, #0
  40e724:	d054      	beq.n	40e7d0 <_dtoa_r+0xb80>
  40e726:	f04f 0800 	mov.w	r8, #0
  40e72a:	4646      	mov	r6, r8
  40e72c:	e743      	b.n	40e5b6 <_dtoa_r+0x966>
  40e72e:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e730:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e732:	4620      	mov	r0, r4
  40e734:	f001 fc22 	bl	40ff7c <__pow5mult>
  40e738:	900a      	str	r0, [sp, #40]	; 0x28
  40e73a:	e4ba      	b.n	40e0b2 <_dtoa_r+0x462>
  40e73c:	2601      	movs	r6, #1
  40e73e:	960b      	str	r6, [sp, #44]	; 0x2c
  40e740:	e602      	b.n	40e348 <_dtoa_r+0x6f8>
  40e742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40e744:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40e746:	970c      	str	r7, [sp, #48]	; 0x30
  40e748:	1b7b      	subs	r3, r7, r5
  40e74a:	441e      	add	r6, r3
  40e74c:	960d      	str	r6, [sp, #52]	; 0x34
  40e74e:	2700      	movs	r7, #0
  40e750:	e46f      	b.n	40e032 <_dtoa_r+0x3e2>
  40e752:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40e756:	f04f 0802 	mov.w	r8, #2
  40e75a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40e75e:	e638      	b.n	40e3d2 <_dtoa_r+0x782>
  40e760:	2a00      	cmp	r2, #0
  40e762:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40e766:	46d9      	mov	r9, fp
  40e768:	dd11      	ble.n	40e78e <_dtoa_r+0xb3e>
  40e76a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40e76c:	2201      	movs	r2, #1
  40e76e:	4620      	mov	r0, r4
  40e770:	f001 fc52 	bl	410018 <__lshift>
  40e774:	4641      	mov	r1, r8
  40e776:	900a      	str	r0, [sp, #40]	; 0x28
  40e778:	f001 fcac 	bl	4100d4 <__mcmp>
  40e77c:	2800      	cmp	r0, #0
  40e77e:	f340 815b 	ble.w	40ea38 <_dtoa_r+0xde8>
  40e782:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40e786:	f000 811a 	beq.w	40e9be <_dtoa_r+0xd6e>
  40e78a:	f109 0a31 	add.w	sl, r9, #49	; 0x31
  40e78e:	9b06      	ldr	r3, [sp, #24]
  40e790:	4635      	mov	r5, r6
  40e792:	f883 a000 	strb.w	sl, [r3]
  40e796:	f103 0b01 	add.w	fp, r3, #1
  40e79a:	463e      	mov	r6, r7
  40e79c:	e50f      	b.n	40e1be <_dtoa_r+0x56e>
  40e79e:	bf00      	nop
  40e7a0:	3ff00000 	.word	0x3ff00000
  40e7a4:	40240000 	.word	0x40240000
  40e7a8:	40140000 	.word	0x40140000
  40e7ac:	401c0000 	.word	0x401c0000
  40e7b0:	d103      	bne.n	40e7ba <_dtoa_r+0xb6a>
  40e7b2:	f01a 0f01 	tst.w	sl, #1
  40e7b6:	f47f acf2 	bne.w	40e19e <_dtoa_r+0x54e>
  40e7ba:	465b      	mov	r3, fp
  40e7bc:	469b      	mov	fp, r3
  40e7be:	3b01      	subs	r3, #1
  40e7c0:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  40e7c4:	2a30      	cmp	r2, #48	; 0x30
  40e7c6:	d0f9      	beq.n	40e7bc <_dtoa_r+0xb6c>
  40e7c8:	e4f9      	b.n	40e1be <_dtoa_r+0x56e>
  40e7ca:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  40e7ce:	4654      	mov	r4, sl
  40e7d0:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  40e7d4:	f7ff bb48 	b.w	40de68 <_dtoa_r+0x218>
  40e7d8:	9e07      	ldr	r6, [sp, #28]
  40e7da:	4275      	negs	r5, r6
  40e7dc:	2d00      	cmp	r5, #0
  40e7de:	f000 80c2 	beq.w	40e966 <_dtoa_r+0xd16>
  40e7e2:	4ba3      	ldr	r3, [pc, #652]	; (40ea70 <_dtoa_r+0xe20>)
  40e7e4:	f005 020f 	and.w	r2, r5, #15
  40e7e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40e7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  40e7f0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40e7f4:	f004 fb70 	bl	412ed8 <__aeabi_dmul>
  40e7f8:	112d      	asrs	r5, r5, #4
  40e7fa:	4682      	mov	sl, r0
  40e7fc:	468b      	mov	fp, r1
  40e7fe:	f000 812d 	beq.w	40ea5c <_dtoa_r+0xe0c>
  40e802:	4e9c      	ldr	r6, [pc, #624]	; (40ea74 <_dtoa_r+0xe24>)
  40e804:	f04f 0802 	mov.w	r8, #2
  40e808:	07ea      	lsls	r2, r5, #31
  40e80a:	d505      	bpl.n	40e818 <_dtoa_r+0xbc8>
  40e80c:	e9d6 2300 	ldrd	r2, r3, [r6]
  40e810:	f108 0801 	add.w	r8, r8, #1
  40e814:	f004 fb60 	bl	412ed8 <__aeabi_dmul>
  40e818:	106d      	asrs	r5, r5, #1
  40e81a:	f106 0608 	add.w	r6, r6, #8
  40e81e:	d1f3      	bne.n	40e808 <_dtoa_r+0xbb8>
  40e820:	4682      	mov	sl, r0
  40e822:	468b      	mov	fp, r1
  40e824:	e5f0      	b.n	40e408 <_dtoa_r+0x7b8>
  40e826:	9e07      	ldr	r6, [sp, #28]
  40e828:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e82a:	2230      	movs	r2, #48	; 0x30
  40e82c:	702a      	strb	r2, [r5, #0]
  40e82e:	3601      	adds	r6, #1
  40e830:	2231      	movs	r2, #49	; 0x31
  40e832:	9607      	str	r6, [sp, #28]
  40e834:	701a      	strb	r2, [r3, #0]
  40e836:	f7ff bbd8 	b.w	40dfea <_dtoa_r+0x39a>
  40e83a:	6871      	ldr	r1, [r6, #4]
  40e83c:	4620      	mov	r0, r4
  40e83e:	f001 f9df 	bl	40fc00 <_Balloc>
  40e842:	6933      	ldr	r3, [r6, #16]
  40e844:	1c9a      	adds	r2, r3, #2
  40e846:	4605      	mov	r5, r0
  40e848:	0092      	lsls	r2, r2, #2
  40e84a:	f106 010c 	add.w	r1, r6, #12
  40e84e:	300c      	adds	r0, #12
  40e850:	f7fb fdb4 	bl	40a3bc <memcpy>
  40e854:	4620      	mov	r0, r4
  40e856:	4629      	mov	r1, r5
  40e858:	2201      	movs	r2, #1
  40e85a:	f001 fbdd 	bl	410018 <__lshift>
  40e85e:	4607      	mov	r7, r0
  40e860:	e504      	b.n	40e26c <_dtoa_r+0x61c>
  40e862:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40e866:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40e86a:	f000 80a8 	beq.w	40e9be <_dtoa_r+0xd6e>
  40e86e:	9d06      	ldr	r5, [sp, #24]
  40e870:	f10a 0301 	add.w	r3, sl, #1
  40e874:	702b      	strb	r3, [r5, #0]
  40e876:	4635      	mov	r5, r6
  40e878:	9e06      	ldr	r6, [sp, #24]
  40e87a:	f106 0b01 	add.w	fp, r6, #1
  40e87e:	463e      	mov	r6, r7
  40e880:	e49d      	b.n	40e1be <_dtoa_r+0x56e>
  40e882:	4635      	mov	r5, r6
  40e884:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40e888:	463e      	mov	r6, r7
  40e88a:	e47c      	b.n	40e186 <_dtoa_r+0x536>
  40e88c:	f04f 0800 	mov.w	r8, #0
  40e890:	4646      	mov	r6, r8
  40e892:	e70d      	b.n	40e6b0 <_dtoa_r+0xa60>
  40e894:	4976      	ldr	r1, [pc, #472]	; (40ea70 <_dtoa_r+0xe20>)
  40e896:	f108 35ff 	add.w	r5, r8, #4294967295
  40e89a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  40e89e:	4632      	mov	r2, r6
  40e8a0:	463b      	mov	r3, r7
  40e8a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  40e8a6:	9510      	str	r5, [sp, #64]	; 0x40
  40e8a8:	f004 fb16 	bl	412ed8 <__aeabi_dmul>
  40e8ac:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  40e8b0:	4659      	mov	r1, fp
  40e8b2:	4650      	mov	r0, sl
  40e8b4:	f004 fdaa 	bl	41340c <__aeabi_d2iz>
  40e8b8:	4605      	mov	r5, r0
  40e8ba:	f004 faa7 	bl	412e0c <__aeabi_i2d>
  40e8be:	4602      	mov	r2, r0
  40e8c0:	460b      	mov	r3, r1
  40e8c2:	4650      	mov	r0, sl
  40e8c4:	4659      	mov	r1, fp
  40e8c6:	f004 f953 	bl	412b70 <__aeabi_dsub>
  40e8ca:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  40e8ce:	3530      	adds	r5, #48	; 0x30
  40e8d0:	f1b8 0f01 	cmp.w	r8, #1
  40e8d4:	4606      	mov	r6, r0
  40e8d6:	460f      	mov	r7, r1
  40e8d8:	f88e 5000 	strb.w	r5, [lr]
  40e8dc:	f10e 0b01 	add.w	fp, lr, #1
  40e8e0:	d01e      	beq.n	40e920 <_dtoa_r+0xcd0>
  40e8e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40e8e4:	1e6b      	subs	r3, r5, #1
  40e8e6:	eb03 0a08 	add.w	sl, r3, r8
  40e8ea:	2200      	movs	r2, #0
  40e8ec:	4b62      	ldr	r3, [pc, #392]	; (40ea78 <_dtoa_r+0xe28>)
  40e8ee:	f004 faf3 	bl	412ed8 <__aeabi_dmul>
  40e8f2:	460f      	mov	r7, r1
  40e8f4:	4606      	mov	r6, r0
  40e8f6:	f004 fd89 	bl	41340c <__aeabi_d2iz>
  40e8fa:	4680      	mov	r8, r0
  40e8fc:	f004 fa86 	bl	412e0c <__aeabi_i2d>
  40e900:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40e904:	4602      	mov	r2, r0
  40e906:	460b      	mov	r3, r1
  40e908:	4630      	mov	r0, r6
  40e90a:	4639      	mov	r1, r7
  40e90c:	f004 f930 	bl	412b70 <__aeabi_dsub>
  40e910:	f805 8f01 	strb.w	r8, [r5, #1]!
  40e914:	4555      	cmp	r5, sl
  40e916:	d1e8      	bne.n	40e8ea <_dtoa_r+0xc9a>
  40e918:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40e91a:	4606      	mov	r6, r0
  40e91c:	460f      	mov	r7, r1
  40e91e:	44ab      	add	fp, r5
  40e920:	2200      	movs	r2, #0
  40e922:	4b56      	ldr	r3, [pc, #344]	; (40ea7c <_dtoa_r+0xe2c>)
  40e924:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  40e928:	f004 f924 	bl	412b74 <__adddf3>
  40e92c:	4632      	mov	r2, r6
  40e92e:	463b      	mov	r3, r7
  40e930:	f004 fd44 	bl	4133bc <__aeabi_dcmplt>
  40e934:	2800      	cmp	r0, #0
  40e936:	d04d      	beq.n	40e9d4 <_dtoa_r+0xd84>
  40e938:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40e93a:	9607      	str	r6, [sp, #28]
  40e93c:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  40e940:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e942:	f7ff bb4b 	b.w	40dfdc <_dtoa_r+0x38c>
  40e946:	9e08      	ldr	r6, [sp, #32]
  40e948:	2300      	movs	r3, #0
  40e94a:	ebc9 0506 	rsb	r5, r9, r6
  40e94e:	f7ff bb76 	b.w	40e03e <_dtoa_r+0x3ee>
  40e952:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40e954:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40e956:	9d08      	ldr	r5, [sp, #32]
  40e958:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40e95c:	f7ff bb6f 	b.w	40e03e <_dtoa_r+0x3ee>
  40e960:	4657      	mov	r7, sl
  40e962:	f7ff bbb9 	b.w	40e0d8 <_dtoa_r+0x488>
  40e966:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  40e96a:	f04f 0802 	mov.w	r8, #2
  40e96e:	e54b      	b.n	40e408 <_dtoa_r+0x7b8>
  40e970:	f1b9 0f00 	cmp.w	r9, #0
  40e974:	f43f aeaf 	beq.w	40e6d6 <_dtoa_r+0xa86>
  40e978:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40e97a:	2e00      	cmp	r6, #0
  40e97c:	f77f af28 	ble.w	40e7d0 <_dtoa_r+0xb80>
  40e980:	2200      	movs	r2, #0
  40e982:	4b3d      	ldr	r3, [pc, #244]	; (40ea78 <_dtoa_r+0xe28>)
  40e984:	4650      	mov	r0, sl
  40e986:	4659      	mov	r1, fp
  40e988:	f004 faa6 	bl	412ed8 <__aeabi_dmul>
  40e98c:	4682      	mov	sl, r0
  40e98e:	f108 0001 	add.w	r0, r8, #1
  40e992:	468b      	mov	fp, r1
  40e994:	f004 fa3a 	bl	412e0c <__aeabi_i2d>
  40e998:	4602      	mov	r2, r0
  40e99a:	460b      	mov	r3, r1
  40e99c:	4650      	mov	r0, sl
  40e99e:	4659      	mov	r1, fp
  40e9a0:	f004 fa9a 	bl	412ed8 <__aeabi_dmul>
  40e9a4:	2200      	movs	r2, #0
  40e9a6:	4b36      	ldr	r3, [pc, #216]	; (40ea80 <_dtoa_r+0xe30>)
  40e9a8:	f004 f8e4 	bl	412b74 <__adddf3>
  40e9ac:	9d07      	ldr	r5, [sp, #28]
  40e9ae:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  40e9b2:	3d01      	subs	r5, #1
  40e9b4:	4606      	mov	r6, r0
  40e9b6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40e9ba:	9517      	str	r5, [sp, #92]	; 0x5c
  40e9bc:	e544      	b.n	40e448 <_dtoa_r+0x7f8>
  40e9be:	4635      	mov	r5, r6
  40e9c0:	9b06      	ldr	r3, [sp, #24]
  40e9c2:	9e06      	ldr	r6, [sp, #24]
  40e9c4:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e9c6:	2239      	movs	r2, #57	; 0x39
  40e9c8:	7032      	strb	r2, [r6, #0]
  40e9ca:	f103 0b01 	add.w	fp, r3, #1
  40e9ce:	463e      	mov	r6, r7
  40e9d0:	f7ff bbef 	b.w	40e1b2 <_dtoa_r+0x562>
  40e9d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  40e9d8:	2000      	movs	r0, #0
  40e9da:	4928      	ldr	r1, [pc, #160]	; (40ea7c <_dtoa_r+0xe2c>)
  40e9dc:	f004 f8c8 	bl	412b70 <__aeabi_dsub>
  40e9e0:	4632      	mov	r2, r6
  40e9e2:	463b      	mov	r3, r7
  40e9e4:	f004 fd08 	bl	4133f8 <__aeabi_dcmpgt>
  40e9e8:	2800      	cmp	r0, #0
  40e9ea:	f43f aef1 	beq.w	40e7d0 <_dtoa_r+0xb80>
  40e9ee:	465b      	mov	r3, fp
  40e9f0:	469b      	mov	fp, r3
  40e9f2:	3b01      	subs	r3, #1
  40e9f4:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  40e9f8:	2a30      	cmp	r2, #48	; 0x30
  40e9fa:	d0f9      	beq.n	40e9f0 <_dtoa_r+0xda0>
  40e9fc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40e9fe:	9507      	str	r5, [sp, #28]
  40ea00:	f7ff baf3 	b.w	40dfea <_dtoa_r+0x39a>
  40ea04:	4645      	mov	r5, r8
  40ea06:	4654      	mov	r4, sl
  40ea08:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40ea0a:	9607      	str	r6, [sp, #28]
  40ea0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ea0e:	f7ff bae5 	b.w	40dfdc <_dtoa_r+0x38c>
  40ea12:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40ea16:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40ea1a:	d0d0      	beq.n	40e9be <_dtoa_r+0xd6e>
  40ea1c:	9b03      	ldr	r3, [sp, #12]
  40ea1e:	4635      	mov	r5, r6
  40ea20:	2b00      	cmp	r3, #0
  40ea22:	9e06      	ldr	r6, [sp, #24]
  40ea24:	bfc8      	it	gt
  40ea26:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
  40ea2a:	f886 a000 	strb.w	sl, [r6]
  40ea2e:	f106 0b01 	add.w	fp, r6, #1
  40ea32:	463e      	mov	r6, r7
  40ea34:	f7ff bbc3 	b.w	40e1be <_dtoa_r+0x56e>
  40ea38:	f47f aea9 	bne.w	40e78e <_dtoa_r+0xb3e>
  40ea3c:	f01a 0f01 	tst.w	sl, #1
  40ea40:	f43f aea5 	beq.w	40e78e <_dtoa_r+0xb3e>
  40ea44:	e69d      	b.n	40e782 <_dtoa_r+0xb32>
  40ea46:	4631      	mov	r1, r6
  40ea48:	4620      	mov	r0, r4
  40ea4a:	220a      	movs	r2, #10
  40ea4c:	2300      	movs	r3, #0
  40ea4e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  40ea52:	f001 f905 	bl	40fc60 <__multadd>
  40ea56:	4606      	mov	r6, r0
  40ea58:	f7ff bb6c 	b.w	40e134 <_dtoa_r+0x4e4>
  40ea5c:	f04f 0802 	mov.w	r8, #2
  40ea60:	e4d2      	b.n	40e408 <_dtoa_r+0x7b8>
  40ea62:	f43f ab52 	beq.w	40e10a <_dtoa_r+0x4ba>
  40ea66:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  40ea6a:	f7ff bbe2 	b.w	40e232 <_dtoa_r+0x5e2>
  40ea6e:	bf00      	nop
  40ea70:	00413858 	.word	0x00413858
  40ea74:	00413920 	.word	0x00413920
  40ea78:	40240000 	.word	0x40240000
  40ea7c:	3fe00000 	.word	0x3fe00000
  40ea80:	401c0000 	.word	0x401c0000
  40ea84:	f3af 8000 	nop.w

0040ea88 <__sflush_r>:
  40ea88:	898b      	ldrh	r3, [r1, #12]
  40ea8a:	b29a      	uxth	r2, r3
  40ea8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ea90:	460d      	mov	r5, r1
  40ea92:	0711      	lsls	r1, r2, #28
  40ea94:	4680      	mov	r8, r0
  40ea96:	d43c      	bmi.n	40eb12 <__sflush_r+0x8a>
  40ea98:	686a      	ldr	r2, [r5, #4]
  40ea9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40ea9e:	2a00      	cmp	r2, #0
  40eaa0:	81ab      	strh	r3, [r5, #12]
  40eaa2:	dd59      	ble.n	40eb58 <__sflush_r+0xd0>
  40eaa4:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40eaa6:	2c00      	cmp	r4, #0
  40eaa8:	d04b      	beq.n	40eb42 <__sflush_r+0xba>
  40eaaa:	b29b      	uxth	r3, r3
  40eaac:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40eab0:	2100      	movs	r1, #0
  40eab2:	b292      	uxth	r2, r2
  40eab4:	f8d8 6000 	ldr.w	r6, [r8]
  40eab8:	f8c8 1000 	str.w	r1, [r8]
  40eabc:	2a00      	cmp	r2, #0
  40eabe:	d04f      	beq.n	40eb60 <__sflush_r+0xd8>
  40eac0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40eac2:	075f      	lsls	r7, r3, #29
  40eac4:	d505      	bpl.n	40ead2 <__sflush_r+0x4a>
  40eac6:	6869      	ldr	r1, [r5, #4]
  40eac8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40eaca:	1a52      	subs	r2, r2, r1
  40eacc:	b10b      	cbz	r3, 40ead2 <__sflush_r+0x4a>
  40eace:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40ead0:	1ad2      	subs	r2, r2, r3
  40ead2:	4640      	mov	r0, r8
  40ead4:	69e9      	ldr	r1, [r5, #28]
  40ead6:	2300      	movs	r3, #0
  40ead8:	47a0      	blx	r4
  40eada:	1c44      	adds	r4, r0, #1
  40eadc:	d04a      	beq.n	40eb74 <__sflush_r+0xec>
  40eade:	89aa      	ldrh	r2, [r5, #12]
  40eae0:	692b      	ldr	r3, [r5, #16]
  40eae2:	602b      	str	r3, [r5, #0]
  40eae4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40eae8:	b29b      	uxth	r3, r3
  40eaea:	2200      	movs	r2, #0
  40eaec:	606a      	str	r2, [r5, #4]
  40eaee:	04da      	lsls	r2, r3, #19
  40eaf0:	81ab      	strh	r3, [r5, #12]
  40eaf2:	d44c      	bmi.n	40eb8e <__sflush_r+0x106>
  40eaf4:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40eaf6:	f8c8 6000 	str.w	r6, [r8]
  40eafa:	b311      	cbz	r1, 40eb42 <__sflush_r+0xba>
  40eafc:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40eb00:	4299      	cmp	r1, r3
  40eb02:	d002      	beq.n	40eb0a <__sflush_r+0x82>
  40eb04:	4640      	mov	r0, r8
  40eb06:	f000 f9c7 	bl	40ee98 <_free_r>
  40eb0a:	2000      	movs	r0, #0
  40eb0c:	6328      	str	r0, [r5, #48]	; 0x30
  40eb0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40eb12:	692e      	ldr	r6, [r5, #16]
  40eb14:	b1ae      	cbz	r6, 40eb42 <__sflush_r+0xba>
  40eb16:	682c      	ldr	r4, [r5, #0]
  40eb18:	602e      	str	r6, [r5, #0]
  40eb1a:	0791      	lsls	r1, r2, #30
  40eb1c:	bf0c      	ite	eq
  40eb1e:	696b      	ldreq	r3, [r5, #20]
  40eb20:	2300      	movne	r3, #0
  40eb22:	1ba4      	subs	r4, r4, r6
  40eb24:	60ab      	str	r3, [r5, #8]
  40eb26:	e00a      	b.n	40eb3e <__sflush_r+0xb6>
  40eb28:	4632      	mov	r2, r6
  40eb2a:	4623      	mov	r3, r4
  40eb2c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40eb2e:	69e9      	ldr	r1, [r5, #28]
  40eb30:	4640      	mov	r0, r8
  40eb32:	47b8      	blx	r7
  40eb34:	2800      	cmp	r0, #0
  40eb36:	ebc0 0404 	rsb	r4, r0, r4
  40eb3a:	4406      	add	r6, r0
  40eb3c:	dd04      	ble.n	40eb48 <__sflush_r+0xc0>
  40eb3e:	2c00      	cmp	r4, #0
  40eb40:	dcf2      	bgt.n	40eb28 <__sflush_r+0xa0>
  40eb42:	2000      	movs	r0, #0
  40eb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40eb48:	89ab      	ldrh	r3, [r5, #12]
  40eb4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40eb4e:	81ab      	strh	r3, [r5, #12]
  40eb50:	f04f 30ff 	mov.w	r0, #4294967295
  40eb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40eb58:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40eb5a:	2a00      	cmp	r2, #0
  40eb5c:	dca2      	bgt.n	40eaa4 <__sflush_r+0x1c>
  40eb5e:	e7f0      	b.n	40eb42 <__sflush_r+0xba>
  40eb60:	2301      	movs	r3, #1
  40eb62:	4640      	mov	r0, r8
  40eb64:	69e9      	ldr	r1, [r5, #28]
  40eb66:	47a0      	blx	r4
  40eb68:	1c43      	adds	r3, r0, #1
  40eb6a:	4602      	mov	r2, r0
  40eb6c:	d01e      	beq.n	40ebac <__sflush_r+0x124>
  40eb6e:	89ab      	ldrh	r3, [r5, #12]
  40eb70:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40eb72:	e7a6      	b.n	40eac2 <__sflush_r+0x3a>
  40eb74:	f8d8 3000 	ldr.w	r3, [r8]
  40eb78:	b95b      	cbnz	r3, 40eb92 <__sflush_r+0x10a>
  40eb7a:	89a9      	ldrh	r1, [r5, #12]
  40eb7c:	606b      	str	r3, [r5, #4]
  40eb7e:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
  40eb82:	b29b      	uxth	r3, r3
  40eb84:	692a      	ldr	r2, [r5, #16]
  40eb86:	81ab      	strh	r3, [r5, #12]
  40eb88:	04db      	lsls	r3, r3, #19
  40eb8a:	602a      	str	r2, [r5, #0]
  40eb8c:	d5b2      	bpl.n	40eaf4 <__sflush_r+0x6c>
  40eb8e:	6528      	str	r0, [r5, #80]	; 0x50
  40eb90:	e7b0      	b.n	40eaf4 <__sflush_r+0x6c>
  40eb92:	2b1d      	cmp	r3, #29
  40eb94:	d001      	beq.n	40eb9a <__sflush_r+0x112>
  40eb96:	2b16      	cmp	r3, #22
  40eb98:	d119      	bne.n	40ebce <__sflush_r+0x146>
  40eb9a:	89aa      	ldrh	r2, [r5, #12]
  40eb9c:	692b      	ldr	r3, [r5, #16]
  40eb9e:	602b      	str	r3, [r5, #0]
  40eba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40eba4:	2300      	movs	r3, #0
  40eba6:	81aa      	strh	r2, [r5, #12]
  40eba8:	606b      	str	r3, [r5, #4]
  40ebaa:	e7a3      	b.n	40eaf4 <__sflush_r+0x6c>
  40ebac:	f8d8 3000 	ldr.w	r3, [r8]
  40ebb0:	2b00      	cmp	r3, #0
  40ebb2:	d0dc      	beq.n	40eb6e <__sflush_r+0xe6>
  40ebb4:	2b1d      	cmp	r3, #29
  40ebb6:	d007      	beq.n	40ebc8 <__sflush_r+0x140>
  40ebb8:	2b16      	cmp	r3, #22
  40ebba:	d005      	beq.n	40ebc8 <__sflush_r+0x140>
  40ebbc:	89ab      	ldrh	r3, [r5, #12]
  40ebbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ebc2:	81ab      	strh	r3, [r5, #12]
  40ebc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ebc8:	f8c8 6000 	str.w	r6, [r8]
  40ebcc:	e7b9      	b.n	40eb42 <__sflush_r+0xba>
  40ebce:	89ab      	ldrh	r3, [r5, #12]
  40ebd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ebd4:	81ab      	strh	r3, [r5, #12]
  40ebd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ebda:	bf00      	nop

0040ebdc <_fflush_r>:
  40ebdc:	b510      	push	{r4, lr}
  40ebde:	4604      	mov	r4, r0
  40ebe0:	b082      	sub	sp, #8
  40ebe2:	b108      	cbz	r0, 40ebe8 <_fflush_r+0xc>
  40ebe4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ebe6:	b153      	cbz	r3, 40ebfe <_fflush_r+0x22>
  40ebe8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40ebec:	b908      	cbnz	r0, 40ebf2 <_fflush_r+0x16>
  40ebee:	b002      	add	sp, #8
  40ebf0:	bd10      	pop	{r4, pc}
  40ebf2:	4620      	mov	r0, r4
  40ebf4:	b002      	add	sp, #8
  40ebf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40ebfa:	f7ff bf45 	b.w	40ea88 <__sflush_r>
  40ebfe:	9101      	str	r1, [sp, #4]
  40ec00:	f000 f808 	bl	40ec14 <__sinit>
  40ec04:	9901      	ldr	r1, [sp, #4]
  40ec06:	e7ef      	b.n	40ebe8 <_fflush_r+0xc>

0040ec08 <_cleanup_r>:
  40ec08:	4901      	ldr	r1, [pc, #4]	; (40ec10 <_cleanup_r+0x8>)
  40ec0a:	f000 bb9f 	b.w	40f34c <_fwalk>
  40ec0e:	bf00      	nop
  40ec10:	004123a9 	.word	0x004123a9

0040ec14 <__sinit>:
  40ec14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ec18:	6b84      	ldr	r4, [r0, #56]	; 0x38
  40ec1a:	b083      	sub	sp, #12
  40ec1c:	4607      	mov	r7, r0
  40ec1e:	2c00      	cmp	r4, #0
  40ec20:	d165      	bne.n	40ecee <__sinit+0xda>
  40ec22:	6845      	ldr	r5, [r0, #4]
  40ec24:	4833      	ldr	r0, [pc, #204]	; (40ecf4 <__sinit+0xe0>)
  40ec26:	63f8      	str	r0, [r7, #60]	; 0x3c
  40ec28:	2304      	movs	r3, #4
  40ec2a:	2103      	movs	r1, #3
  40ec2c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  40ec30:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  40ec34:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  40ec38:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  40ec3c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40ec40:	81ab      	strh	r3, [r5, #12]
  40ec42:	602c      	str	r4, [r5, #0]
  40ec44:	606c      	str	r4, [r5, #4]
  40ec46:	60ac      	str	r4, [r5, #8]
  40ec48:	666c      	str	r4, [r5, #100]	; 0x64
  40ec4a:	81ec      	strh	r4, [r5, #14]
  40ec4c:	612c      	str	r4, [r5, #16]
  40ec4e:	616c      	str	r4, [r5, #20]
  40ec50:	61ac      	str	r4, [r5, #24]
  40ec52:	4621      	mov	r1, r4
  40ec54:	2208      	movs	r2, #8
  40ec56:	f7fb fc4b 	bl	40a4f0 <memset>
  40ec5a:	68be      	ldr	r6, [r7, #8]
  40ec5c:	f8df b098 	ldr.w	fp, [pc, #152]	; 40ecf8 <__sinit+0xe4>
  40ec60:	f8df a098 	ldr.w	sl, [pc, #152]	; 40ecfc <__sinit+0xe8>
  40ec64:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40ed00 <__sinit+0xec>
  40ec68:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40ed04 <__sinit+0xf0>
  40ec6c:	61ed      	str	r5, [r5, #28]
  40ec6e:	2301      	movs	r3, #1
  40ec70:	2209      	movs	r2, #9
  40ec72:	f8c5 b020 	str.w	fp, [r5, #32]
  40ec76:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40ec7a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40ec7e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40ec82:	4621      	mov	r1, r4
  40ec84:	81f3      	strh	r3, [r6, #14]
  40ec86:	81b2      	strh	r2, [r6, #12]
  40ec88:	6034      	str	r4, [r6, #0]
  40ec8a:	6074      	str	r4, [r6, #4]
  40ec8c:	60b4      	str	r4, [r6, #8]
  40ec8e:	6674      	str	r4, [r6, #100]	; 0x64
  40ec90:	6134      	str	r4, [r6, #16]
  40ec92:	6174      	str	r4, [r6, #20]
  40ec94:	61b4      	str	r4, [r6, #24]
  40ec96:	2208      	movs	r2, #8
  40ec98:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40ec9c:	9301      	str	r3, [sp, #4]
  40ec9e:	f7fb fc27 	bl	40a4f0 <memset>
  40eca2:	68fd      	ldr	r5, [r7, #12]
  40eca4:	61f6      	str	r6, [r6, #28]
  40eca6:	2012      	movs	r0, #18
  40eca8:	2202      	movs	r2, #2
  40ecaa:	f8c6 b020 	str.w	fp, [r6, #32]
  40ecae:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40ecb2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40ecb6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40ecba:	4621      	mov	r1, r4
  40ecbc:	81a8      	strh	r0, [r5, #12]
  40ecbe:	81ea      	strh	r2, [r5, #14]
  40ecc0:	602c      	str	r4, [r5, #0]
  40ecc2:	606c      	str	r4, [r5, #4]
  40ecc4:	60ac      	str	r4, [r5, #8]
  40ecc6:	666c      	str	r4, [r5, #100]	; 0x64
  40ecc8:	612c      	str	r4, [r5, #16]
  40ecca:	616c      	str	r4, [r5, #20]
  40eccc:	61ac      	str	r4, [r5, #24]
  40ecce:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40ecd2:	2208      	movs	r2, #8
  40ecd4:	f7fb fc0c 	bl	40a4f0 <memset>
  40ecd8:	9b01      	ldr	r3, [sp, #4]
  40ecda:	61ed      	str	r5, [r5, #28]
  40ecdc:	f8c5 b020 	str.w	fp, [r5, #32]
  40ece0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40ece4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40ece8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40ecec:	63bb      	str	r3, [r7, #56]	; 0x38
  40ecee:	b003      	add	sp, #12
  40ecf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ecf4:	0040ec09 	.word	0x0040ec09
  40ecf8:	0040a739 	.word	0x0040a739
  40ecfc:	0040a761 	.word	0x0040a761
  40ed00:	0040a799 	.word	0x0040a799
  40ed04:	0040a7b9 	.word	0x0040a7b9

0040ed08 <__sfp_lock_acquire>:
  40ed08:	4770      	bx	lr
  40ed0a:	bf00      	nop

0040ed0c <__sfp_lock_release>:
  40ed0c:	4770      	bx	lr
  40ed0e:	bf00      	nop

0040ed10 <__libc_fini_array>:
  40ed10:	b538      	push	{r3, r4, r5, lr}
  40ed12:	4d09      	ldr	r5, [pc, #36]	; (40ed38 <__libc_fini_array+0x28>)
  40ed14:	4c09      	ldr	r4, [pc, #36]	; (40ed3c <__libc_fini_array+0x2c>)
  40ed16:	1b64      	subs	r4, r4, r5
  40ed18:	10a4      	asrs	r4, r4, #2
  40ed1a:	bf18      	it	ne
  40ed1c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  40ed20:	d005      	beq.n	40ed2e <__libc_fini_array+0x1e>
  40ed22:	3c01      	subs	r4, #1
  40ed24:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40ed28:	4798      	blx	r3
  40ed2a:	2c00      	cmp	r4, #0
  40ed2c:	d1f9      	bne.n	40ed22 <__libc_fini_array+0x12>
  40ed2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40ed32:	f004 becb 	b.w	413acc <_fini>
  40ed36:	bf00      	nop
  40ed38:	00413ad8 	.word	0x00413ad8
  40ed3c:	00413adc 	.word	0x00413adc

0040ed40 <_fputwc_r>:
  40ed40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ed44:	8993      	ldrh	r3, [r2, #12]
  40ed46:	460f      	mov	r7, r1
  40ed48:	0499      	lsls	r1, r3, #18
  40ed4a:	b082      	sub	sp, #8
  40ed4c:	4614      	mov	r4, r2
  40ed4e:	4680      	mov	r8, r0
  40ed50:	d406      	bmi.n	40ed60 <_fputwc_r+0x20>
  40ed52:	6e52      	ldr	r2, [r2, #100]	; 0x64
  40ed54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40ed58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40ed5c:	81a3      	strh	r3, [r4, #12]
  40ed5e:	6662      	str	r2, [r4, #100]	; 0x64
  40ed60:	f000 fb2c 	bl	40f3bc <__locale_mb_cur_max>
  40ed64:	2801      	cmp	r0, #1
  40ed66:	d03d      	beq.n	40ede4 <_fputwc_r+0xa4>
  40ed68:	463a      	mov	r2, r7
  40ed6a:	4640      	mov	r0, r8
  40ed6c:	a901      	add	r1, sp, #4
  40ed6e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40ed72:	f003 fa1f 	bl	4121b4 <_wcrtomb_r>
  40ed76:	1c42      	adds	r2, r0, #1
  40ed78:	4606      	mov	r6, r0
  40ed7a:	d02c      	beq.n	40edd6 <_fputwc_r+0x96>
  40ed7c:	2800      	cmp	r0, #0
  40ed7e:	d039      	beq.n	40edf4 <_fputwc_r+0xb4>
  40ed80:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40ed84:	2500      	movs	r5, #0
  40ed86:	e009      	b.n	40ed9c <_fputwc_r+0x5c>
  40ed88:	6823      	ldr	r3, [r4, #0]
  40ed8a:	7019      	strb	r1, [r3, #0]
  40ed8c:	6823      	ldr	r3, [r4, #0]
  40ed8e:	3301      	adds	r3, #1
  40ed90:	6023      	str	r3, [r4, #0]
  40ed92:	3501      	adds	r5, #1
  40ed94:	42b5      	cmp	r5, r6
  40ed96:	d22d      	bcs.n	40edf4 <_fputwc_r+0xb4>
  40ed98:	ab01      	add	r3, sp, #4
  40ed9a:	5ce9      	ldrb	r1, [r5, r3]
  40ed9c:	68a3      	ldr	r3, [r4, #8]
  40ed9e:	3b01      	subs	r3, #1
  40eda0:	2b00      	cmp	r3, #0
  40eda2:	60a3      	str	r3, [r4, #8]
  40eda4:	daf0      	bge.n	40ed88 <_fputwc_r+0x48>
  40eda6:	69a2      	ldr	r2, [r4, #24]
  40eda8:	4293      	cmp	r3, r2
  40edaa:	db05      	blt.n	40edb8 <_fputwc_r+0x78>
  40edac:	6823      	ldr	r3, [r4, #0]
  40edae:	7019      	strb	r1, [r3, #0]
  40edb0:	6823      	ldr	r3, [r4, #0]
  40edb2:	7819      	ldrb	r1, [r3, #0]
  40edb4:	290a      	cmp	r1, #10
  40edb6:	d1ea      	bne.n	40ed8e <_fputwc_r+0x4e>
  40edb8:	4640      	mov	r0, r8
  40edba:	4622      	mov	r2, r4
  40edbc:	f003 f9a6 	bl	41210c <__swbuf_r>
  40edc0:	f1b0 33ff 	subs.w	r3, r0, #4294967295
  40edc4:	4258      	negs	r0, r3
  40edc6:	4158      	adcs	r0, r3
  40edc8:	2800      	cmp	r0, #0
  40edca:	d0e2      	beq.n	40ed92 <_fputwc_r+0x52>
  40edcc:	f04f 30ff 	mov.w	r0, #4294967295
  40edd0:	b002      	add	sp, #8
  40edd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40edd6:	89a3      	ldrh	r3, [r4, #12]
  40edd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40eddc:	81a3      	strh	r3, [r4, #12]
  40edde:	b002      	add	sp, #8
  40ede0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ede4:	1e7b      	subs	r3, r7, #1
  40ede6:	2bfe      	cmp	r3, #254	; 0xfe
  40ede8:	d8be      	bhi.n	40ed68 <_fputwc_r+0x28>
  40edea:	b2f9      	uxtb	r1, r7
  40edec:	4606      	mov	r6, r0
  40edee:	f88d 1004 	strb.w	r1, [sp, #4]
  40edf2:	e7c7      	b.n	40ed84 <_fputwc_r+0x44>
  40edf4:	4638      	mov	r0, r7
  40edf6:	b002      	add	sp, #8
  40edf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040edfc <_malloc_trim_r>:
  40edfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40edfe:	4d23      	ldr	r5, [pc, #140]	; (40ee8c <_malloc_trim_r+0x90>)
  40ee00:	460f      	mov	r7, r1
  40ee02:	4604      	mov	r4, r0
  40ee04:	f000 fef8 	bl	40fbf8 <__malloc_lock>
  40ee08:	68ab      	ldr	r3, [r5, #8]
  40ee0a:	685e      	ldr	r6, [r3, #4]
  40ee0c:	f026 0603 	bic.w	r6, r6, #3
  40ee10:	1bf1      	subs	r1, r6, r7
  40ee12:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40ee16:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40ee1a:	f021 010f 	bic.w	r1, r1, #15
  40ee1e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  40ee22:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  40ee26:	db07      	blt.n	40ee38 <_malloc_trim_r+0x3c>
  40ee28:	4620      	mov	r0, r4
  40ee2a:	2100      	movs	r1, #0
  40ee2c:	f001 fd56 	bl	4108dc <_sbrk_r>
  40ee30:	68ab      	ldr	r3, [r5, #8]
  40ee32:	4433      	add	r3, r6
  40ee34:	4298      	cmp	r0, r3
  40ee36:	d004      	beq.n	40ee42 <_malloc_trim_r+0x46>
  40ee38:	4620      	mov	r0, r4
  40ee3a:	f000 fedf 	bl	40fbfc <__malloc_unlock>
  40ee3e:	2000      	movs	r0, #0
  40ee40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ee42:	4620      	mov	r0, r4
  40ee44:	4279      	negs	r1, r7
  40ee46:	f001 fd49 	bl	4108dc <_sbrk_r>
  40ee4a:	3001      	adds	r0, #1
  40ee4c:	d00d      	beq.n	40ee6a <_malloc_trim_r+0x6e>
  40ee4e:	4b10      	ldr	r3, [pc, #64]	; (40ee90 <_malloc_trim_r+0x94>)
  40ee50:	68aa      	ldr	r2, [r5, #8]
  40ee52:	6819      	ldr	r1, [r3, #0]
  40ee54:	1bf6      	subs	r6, r6, r7
  40ee56:	f046 0601 	orr.w	r6, r6, #1
  40ee5a:	4620      	mov	r0, r4
  40ee5c:	1bc9      	subs	r1, r1, r7
  40ee5e:	6056      	str	r6, [r2, #4]
  40ee60:	6019      	str	r1, [r3, #0]
  40ee62:	f000 fecb 	bl	40fbfc <__malloc_unlock>
  40ee66:	2001      	movs	r0, #1
  40ee68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ee6a:	4620      	mov	r0, r4
  40ee6c:	2100      	movs	r1, #0
  40ee6e:	f001 fd35 	bl	4108dc <_sbrk_r>
  40ee72:	68ab      	ldr	r3, [r5, #8]
  40ee74:	1ac2      	subs	r2, r0, r3
  40ee76:	2a0f      	cmp	r2, #15
  40ee78:	ddde      	ble.n	40ee38 <_malloc_trim_r+0x3c>
  40ee7a:	4d06      	ldr	r5, [pc, #24]	; (40ee94 <_malloc_trim_r+0x98>)
  40ee7c:	4904      	ldr	r1, [pc, #16]	; (40ee90 <_malloc_trim_r+0x94>)
  40ee7e:	682d      	ldr	r5, [r5, #0]
  40ee80:	f042 0201 	orr.w	r2, r2, #1
  40ee84:	1b40      	subs	r0, r0, r5
  40ee86:	605a      	str	r2, [r3, #4]
  40ee88:	6008      	str	r0, [r1, #0]
  40ee8a:	e7d5      	b.n	40ee38 <_malloc_trim_r+0x3c>
  40ee8c:	200006a4 	.word	0x200006a4
  40ee90:	20014f58 	.word	0x20014f58
  40ee94:	20000ab0 	.word	0x20000ab0

0040ee98 <_free_r>:
  40ee98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ee9c:	460d      	mov	r5, r1
  40ee9e:	4606      	mov	r6, r0
  40eea0:	2900      	cmp	r1, #0
  40eea2:	d055      	beq.n	40ef50 <_free_r+0xb8>
  40eea4:	f000 fea8 	bl	40fbf8 <__malloc_lock>
  40eea8:	f855 1c04 	ldr.w	r1, [r5, #-4]
  40eeac:	f8df c174 	ldr.w	ip, [pc, #372]	; 40f024 <_free_r+0x18c>
  40eeb0:	f021 0301 	bic.w	r3, r1, #1
  40eeb4:	f1a5 0408 	sub.w	r4, r5, #8
  40eeb8:	18e2      	adds	r2, r4, r3
  40eeba:	f8dc 0008 	ldr.w	r0, [ip, #8]
  40eebe:	6857      	ldr	r7, [r2, #4]
  40eec0:	4290      	cmp	r0, r2
  40eec2:	f027 0703 	bic.w	r7, r7, #3
  40eec6:	d069      	beq.n	40ef9c <_free_r+0x104>
  40eec8:	f011 0101 	ands.w	r1, r1, #1
  40eecc:	6057      	str	r7, [r2, #4]
  40eece:	d032      	beq.n	40ef36 <_free_r+0x9e>
  40eed0:	2100      	movs	r1, #0
  40eed2:	19d0      	adds	r0, r2, r7
  40eed4:	6840      	ldr	r0, [r0, #4]
  40eed6:	07c0      	lsls	r0, r0, #31
  40eed8:	d406      	bmi.n	40eee8 <_free_r+0x50>
  40eeda:	443b      	add	r3, r7
  40eedc:	6890      	ldr	r0, [r2, #8]
  40eede:	2900      	cmp	r1, #0
  40eee0:	d04e      	beq.n	40ef80 <_free_r+0xe8>
  40eee2:	68d2      	ldr	r2, [r2, #12]
  40eee4:	60c2      	str	r2, [r0, #12]
  40eee6:	6090      	str	r0, [r2, #8]
  40eee8:	f043 0201 	orr.w	r2, r3, #1
  40eeec:	6062      	str	r2, [r4, #4]
  40eeee:	50e3      	str	r3, [r4, r3]
  40eef0:	b9e1      	cbnz	r1, 40ef2c <_free_r+0x94>
  40eef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40eef6:	d32d      	bcc.n	40ef54 <_free_r+0xbc>
  40eef8:	0a5a      	lsrs	r2, r3, #9
  40eefa:	2a04      	cmp	r2, #4
  40eefc:	d86a      	bhi.n	40efd4 <_free_r+0x13c>
  40eefe:	0998      	lsrs	r0, r3, #6
  40ef00:	3038      	adds	r0, #56	; 0x38
  40ef02:	0041      	lsls	r1, r0, #1
  40ef04:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  40ef08:	4946      	ldr	r1, [pc, #280]	; (40f024 <_free_r+0x18c>)
  40ef0a:	f8dc 2008 	ldr.w	r2, [ip, #8]
  40ef0e:	4562      	cmp	r2, ip
  40ef10:	d066      	beq.n	40efe0 <_free_r+0x148>
  40ef12:	6851      	ldr	r1, [r2, #4]
  40ef14:	f021 0103 	bic.w	r1, r1, #3
  40ef18:	428b      	cmp	r3, r1
  40ef1a:	d202      	bcs.n	40ef22 <_free_r+0x8a>
  40ef1c:	6892      	ldr	r2, [r2, #8]
  40ef1e:	4594      	cmp	ip, r2
  40ef20:	d1f7      	bne.n	40ef12 <_free_r+0x7a>
  40ef22:	68d3      	ldr	r3, [r2, #12]
  40ef24:	60e3      	str	r3, [r4, #12]
  40ef26:	60a2      	str	r2, [r4, #8]
  40ef28:	609c      	str	r4, [r3, #8]
  40ef2a:	60d4      	str	r4, [r2, #12]
  40ef2c:	4630      	mov	r0, r6
  40ef2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40ef32:	f000 be63 	b.w	40fbfc <__malloc_unlock>
  40ef36:	f855 5c08 	ldr.w	r5, [r5, #-8]
  40ef3a:	1b64      	subs	r4, r4, r5
  40ef3c:	f10c 0808 	add.w	r8, ip, #8
  40ef40:	68a0      	ldr	r0, [r4, #8]
  40ef42:	4540      	cmp	r0, r8
  40ef44:	442b      	add	r3, r5
  40ef46:	d043      	beq.n	40efd0 <_free_r+0x138>
  40ef48:	68e5      	ldr	r5, [r4, #12]
  40ef4a:	60c5      	str	r5, [r0, #12]
  40ef4c:	60a8      	str	r0, [r5, #8]
  40ef4e:	e7c0      	b.n	40eed2 <_free_r+0x3a>
  40ef50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ef54:	08db      	lsrs	r3, r3, #3
  40ef56:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  40ef5a:	2501      	movs	r5, #1
  40ef5c:	f8dc 0004 	ldr.w	r0, [ip, #4]
  40ef60:	6891      	ldr	r1, [r2, #8]
  40ef62:	60a1      	str	r1, [r4, #8]
  40ef64:	109b      	asrs	r3, r3, #2
  40ef66:	fa05 f303 	lsl.w	r3, r5, r3
  40ef6a:	4318      	orrs	r0, r3
  40ef6c:	60e2      	str	r2, [r4, #12]
  40ef6e:	f8cc 0004 	str.w	r0, [ip, #4]
  40ef72:	6094      	str	r4, [r2, #8]
  40ef74:	4630      	mov	r0, r6
  40ef76:	60cc      	str	r4, [r1, #12]
  40ef78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40ef7c:	f000 be3e 	b.w	40fbfc <__malloc_unlock>
  40ef80:	4d29      	ldr	r5, [pc, #164]	; (40f028 <_free_r+0x190>)
  40ef82:	42a8      	cmp	r0, r5
  40ef84:	d1ad      	bne.n	40eee2 <_free_r+0x4a>
  40ef86:	f043 0201 	orr.w	r2, r3, #1
  40ef8a:	f8cc 4014 	str.w	r4, [ip, #20]
  40ef8e:	f8cc 4010 	str.w	r4, [ip, #16]
  40ef92:	60e0      	str	r0, [r4, #12]
  40ef94:	60a0      	str	r0, [r4, #8]
  40ef96:	6062      	str	r2, [r4, #4]
  40ef98:	50e3      	str	r3, [r4, r3]
  40ef9a:	e7c7      	b.n	40ef2c <_free_r+0x94>
  40ef9c:	441f      	add	r7, r3
  40ef9e:	07cb      	lsls	r3, r1, #31
  40efa0:	d407      	bmi.n	40efb2 <_free_r+0x11a>
  40efa2:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40efa6:	1ae4      	subs	r4, r4, r3
  40efa8:	441f      	add	r7, r3
  40efaa:	68a2      	ldr	r2, [r4, #8]
  40efac:	68e3      	ldr	r3, [r4, #12]
  40efae:	60d3      	str	r3, [r2, #12]
  40efb0:	609a      	str	r2, [r3, #8]
  40efb2:	4b1e      	ldr	r3, [pc, #120]	; (40f02c <_free_r+0x194>)
  40efb4:	681b      	ldr	r3, [r3, #0]
  40efb6:	f047 0201 	orr.w	r2, r7, #1
  40efba:	429f      	cmp	r7, r3
  40efbc:	6062      	str	r2, [r4, #4]
  40efbe:	f8cc 4008 	str.w	r4, [ip, #8]
  40efc2:	d3b3      	bcc.n	40ef2c <_free_r+0x94>
  40efc4:	4b1a      	ldr	r3, [pc, #104]	; (40f030 <_free_r+0x198>)
  40efc6:	4630      	mov	r0, r6
  40efc8:	6819      	ldr	r1, [r3, #0]
  40efca:	f7ff ff17 	bl	40edfc <_malloc_trim_r>
  40efce:	e7ad      	b.n	40ef2c <_free_r+0x94>
  40efd0:	2101      	movs	r1, #1
  40efd2:	e77e      	b.n	40eed2 <_free_r+0x3a>
  40efd4:	2a14      	cmp	r2, #20
  40efd6:	d80c      	bhi.n	40eff2 <_free_r+0x15a>
  40efd8:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  40efdc:	0041      	lsls	r1, r0, #1
  40efde:	e791      	b.n	40ef04 <_free_r+0x6c>
  40efe0:	684b      	ldr	r3, [r1, #4]
  40efe2:	1080      	asrs	r0, r0, #2
  40efe4:	2501      	movs	r5, #1
  40efe6:	fa05 f000 	lsl.w	r0, r5, r0
  40efea:	4303      	orrs	r3, r0
  40efec:	604b      	str	r3, [r1, #4]
  40efee:	4613      	mov	r3, r2
  40eff0:	e798      	b.n	40ef24 <_free_r+0x8c>
  40eff2:	2a54      	cmp	r2, #84	; 0x54
  40eff4:	d803      	bhi.n	40effe <_free_r+0x166>
  40eff6:	0b18      	lsrs	r0, r3, #12
  40eff8:	306e      	adds	r0, #110	; 0x6e
  40effa:	0041      	lsls	r1, r0, #1
  40effc:	e782      	b.n	40ef04 <_free_r+0x6c>
  40effe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40f002:	d803      	bhi.n	40f00c <_free_r+0x174>
  40f004:	0bd8      	lsrs	r0, r3, #15
  40f006:	3077      	adds	r0, #119	; 0x77
  40f008:	0041      	lsls	r1, r0, #1
  40f00a:	e77b      	b.n	40ef04 <_free_r+0x6c>
  40f00c:	f240 5154 	movw	r1, #1364	; 0x554
  40f010:	428a      	cmp	r2, r1
  40f012:	d803      	bhi.n	40f01c <_free_r+0x184>
  40f014:	0c98      	lsrs	r0, r3, #18
  40f016:	307c      	adds	r0, #124	; 0x7c
  40f018:	0041      	lsls	r1, r0, #1
  40f01a:	e773      	b.n	40ef04 <_free_r+0x6c>
  40f01c:	21fc      	movs	r1, #252	; 0xfc
  40f01e:	207e      	movs	r0, #126	; 0x7e
  40f020:	e770      	b.n	40ef04 <_free_r+0x6c>
  40f022:	bf00      	nop
  40f024:	200006a4 	.word	0x200006a4
  40f028:	200006ac 	.word	0x200006ac
  40f02c:	20000aac 	.word	0x20000aac
  40f030:	20014f54 	.word	0x20014f54

0040f034 <__sfvwrite_r>:
  40f034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f038:	6893      	ldr	r3, [r2, #8]
  40f03a:	b083      	sub	sp, #12
  40f03c:	4616      	mov	r6, r2
  40f03e:	4681      	mov	r9, r0
  40f040:	460c      	mov	r4, r1
  40f042:	b32b      	cbz	r3, 40f090 <__sfvwrite_r+0x5c>
  40f044:	898b      	ldrh	r3, [r1, #12]
  40f046:	0719      	lsls	r1, r3, #28
  40f048:	d526      	bpl.n	40f098 <__sfvwrite_r+0x64>
  40f04a:	6922      	ldr	r2, [r4, #16]
  40f04c:	b322      	cbz	r2, 40f098 <__sfvwrite_r+0x64>
  40f04e:	f003 0202 	and.w	r2, r3, #2
  40f052:	b292      	uxth	r2, r2
  40f054:	6835      	ldr	r5, [r6, #0]
  40f056:	2a00      	cmp	r2, #0
  40f058:	d02c      	beq.n	40f0b4 <__sfvwrite_r+0x80>
  40f05a:	f04f 0a00 	mov.w	sl, #0
  40f05e:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 40f348 <__sfvwrite_r+0x314>
  40f062:	46d0      	mov	r8, sl
  40f064:	45d8      	cmp	r8, fp
  40f066:	bf34      	ite	cc
  40f068:	4643      	movcc	r3, r8
  40f06a:	465b      	movcs	r3, fp
  40f06c:	4652      	mov	r2, sl
  40f06e:	4648      	mov	r0, r9
  40f070:	f1b8 0f00 	cmp.w	r8, #0
  40f074:	d04f      	beq.n	40f116 <__sfvwrite_r+0xe2>
  40f076:	69e1      	ldr	r1, [r4, #28]
  40f078:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40f07a:	47b8      	blx	r7
  40f07c:	2800      	cmp	r0, #0
  40f07e:	dd56      	ble.n	40f12e <__sfvwrite_r+0xfa>
  40f080:	68b3      	ldr	r3, [r6, #8]
  40f082:	1a1b      	subs	r3, r3, r0
  40f084:	4482      	add	sl, r0
  40f086:	ebc0 0808 	rsb	r8, r0, r8
  40f08a:	60b3      	str	r3, [r6, #8]
  40f08c:	2b00      	cmp	r3, #0
  40f08e:	d1e9      	bne.n	40f064 <__sfvwrite_r+0x30>
  40f090:	2000      	movs	r0, #0
  40f092:	b003      	add	sp, #12
  40f094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f098:	4648      	mov	r0, r9
  40f09a:	4621      	mov	r1, r4
  40f09c:	f7fe fcbc 	bl	40da18 <__swsetup_r>
  40f0a0:	2800      	cmp	r0, #0
  40f0a2:	f040 8148 	bne.w	40f336 <__sfvwrite_r+0x302>
  40f0a6:	89a3      	ldrh	r3, [r4, #12]
  40f0a8:	6835      	ldr	r5, [r6, #0]
  40f0aa:	f003 0202 	and.w	r2, r3, #2
  40f0ae:	b292      	uxth	r2, r2
  40f0b0:	2a00      	cmp	r2, #0
  40f0b2:	d1d2      	bne.n	40f05a <__sfvwrite_r+0x26>
  40f0b4:	f013 0a01 	ands.w	sl, r3, #1
  40f0b8:	d142      	bne.n	40f140 <__sfvwrite_r+0x10c>
  40f0ba:	46d0      	mov	r8, sl
  40f0bc:	f1b8 0f00 	cmp.w	r8, #0
  40f0c0:	d023      	beq.n	40f10a <__sfvwrite_r+0xd6>
  40f0c2:	059a      	lsls	r2, r3, #22
  40f0c4:	68a7      	ldr	r7, [r4, #8]
  40f0c6:	d576      	bpl.n	40f1b6 <__sfvwrite_r+0x182>
  40f0c8:	45b8      	cmp	r8, r7
  40f0ca:	f0c0 80a4 	bcc.w	40f216 <__sfvwrite_r+0x1e2>
  40f0ce:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40f0d2:	f040 80b2 	bne.w	40f23a <__sfvwrite_r+0x206>
  40f0d6:	6820      	ldr	r0, [r4, #0]
  40f0d8:	46bb      	mov	fp, r7
  40f0da:	4651      	mov	r1, sl
  40f0dc:	465a      	mov	r2, fp
  40f0de:	f000 fd2b 	bl	40fb38 <memmove>
  40f0e2:	68a2      	ldr	r2, [r4, #8]
  40f0e4:	6821      	ldr	r1, [r4, #0]
  40f0e6:	1bd2      	subs	r2, r2, r7
  40f0e8:	eb01 030b 	add.w	r3, r1, fp
  40f0ec:	60a2      	str	r2, [r4, #8]
  40f0ee:	6023      	str	r3, [r4, #0]
  40f0f0:	4642      	mov	r2, r8
  40f0f2:	68b3      	ldr	r3, [r6, #8]
  40f0f4:	1a9b      	subs	r3, r3, r2
  40f0f6:	4492      	add	sl, r2
  40f0f8:	ebc2 0808 	rsb	r8, r2, r8
  40f0fc:	60b3      	str	r3, [r6, #8]
  40f0fe:	2b00      	cmp	r3, #0
  40f100:	d0c6      	beq.n	40f090 <__sfvwrite_r+0x5c>
  40f102:	89a3      	ldrh	r3, [r4, #12]
  40f104:	f1b8 0f00 	cmp.w	r8, #0
  40f108:	d1db      	bne.n	40f0c2 <__sfvwrite_r+0x8e>
  40f10a:	f8d5 a000 	ldr.w	sl, [r5]
  40f10e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40f112:	3508      	adds	r5, #8
  40f114:	e7d2      	b.n	40f0bc <__sfvwrite_r+0x88>
  40f116:	f8d5 a000 	ldr.w	sl, [r5]
  40f11a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40f11e:	3508      	adds	r5, #8
  40f120:	e7a0      	b.n	40f064 <__sfvwrite_r+0x30>
  40f122:	4648      	mov	r0, r9
  40f124:	4621      	mov	r1, r4
  40f126:	f7ff fd59 	bl	40ebdc <_fflush_r>
  40f12a:	2800      	cmp	r0, #0
  40f12c:	d059      	beq.n	40f1e2 <__sfvwrite_r+0x1ae>
  40f12e:	89a3      	ldrh	r3, [r4, #12]
  40f130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f134:	f04f 30ff 	mov.w	r0, #4294967295
  40f138:	81a3      	strh	r3, [r4, #12]
  40f13a:	b003      	add	sp, #12
  40f13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f140:	4692      	mov	sl, r2
  40f142:	9201      	str	r2, [sp, #4]
  40f144:	4693      	mov	fp, r2
  40f146:	4690      	mov	r8, r2
  40f148:	f1b8 0f00 	cmp.w	r8, #0
  40f14c:	d02b      	beq.n	40f1a6 <__sfvwrite_r+0x172>
  40f14e:	9f01      	ldr	r7, [sp, #4]
  40f150:	2f00      	cmp	r7, #0
  40f152:	d064      	beq.n	40f21e <__sfvwrite_r+0x1ea>
  40f154:	6820      	ldr	r0, [r4, #0]
  40f156:	6921      	ldr	r1, [r4, #16]
  40f158:	f8d4 c008 	ldr.w	ip, [r4, #8]
  40f15c:	6962      	ldr	r2, [r4, #20]
  40f15e:	45c2      	cmp	sl, r8
  40f160:	bf34      	ite	cc
  40f162:	4653      	movcc	r3, sl
  40f164:	4643      	movcs	r3, r8
  40f166:	4288      	cmp	r0, r1
  40f168:	461f      	mov	r7, r3
  40f16a:	d903      	bls.n	40f174 <__sfvwrite_r+0x140>
  40f16c:	4494      	add	ip, r2
  40f16e:	4563      	cmp	r3, ip
  40f170:	f300 80ae 	bgt.w	40f2d0 <__sfvwrite_r+0x29c>
  40f174:	4293      	cmp	r3, r2
  40f176:	db36      	blt.n	40f1e6 <__sfvwrite_r+0x1b2>
  40f178:	4613      	mov	r3, r2
  40f17a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40f17c:	69e1      	ldr	r1, [r4, #28]
  40f17e:	4648      	mov	r0, r9
  40f180:	465a      	mov	r2, fp
  40f182:	47b8      	blx	r7
  40f184:	1e07      	subs	r7, r0, #0
  40f186:	ddd2      	ble.n	40f12e <__sfvwrite_r+0xfa>
  40f188:	ebba 0a07 	subs.w	sl, sl, r7
  40f18c:	d03a      	beq.n	40f204 <__sfvwrite_r+0x1d0>
  40f18e:	68b3      	ldr	r3, [r6, #8]
  40f190:	1bdb      	subs	r3, r3, r7
  40f192:	44bb      	add	fp, r7
  40f194:	ebc7 0808 	rsb	r8, r7, r8
  40f198:	60b3      	str	r3, [r6, #8]
  40f19a:	2b00      	cmp	r3, #0
  40f19c:	f43f af78 	beq.w	40f090 <__sfvwrite_r+0x5c>
  40f1a0:	f1b8 0f00 	cmp.w	r8, #0
  40f1a4:	d1d3      	bne.n	40f14e <__sfvwrite_r+0x11a>
  40f1a6:	2700      	movs	r7, #0
  40f1a8:	f8d5 b000 	ldr.w	fp, [r5]
  40f1ac:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40f1b0:	9701      	str	r7, [sp, #4]
  40f1b2:	3508      	adds	r5, #8
  40f1b4:	e7c8      	b.n	40f148 <__sfvwrite_r+0x114>
  40f1b6:	6820      	ldr	r0, [r4, #0]
  40f1b8:	6923      	ldr	r3, [r4, #16]
  40f1ba:	4298      	cmp	r0, r3
  40f1bc:	d802      	bhi.n	40f1c4 <__sfvwrite_r+0x190>
  40f1be:	6963      	ldr	r3, [r4, #20]
  40f1c0:	4598      	cmp	r8, r3
  40f1c2:	d272      	bcs.n	40f2aa <__sfvwrite_r+0x276>
  40f1c4:	45b8      	cmp	r8, r7
  40f1c6:	bf38      	it	cc
  40f1c8:	4647      	movcc	r7, r8
  40f1ca:	463a      	mov	r2, r7
  40f1cc:	4651      	mov	r1, sl
  40f1ce:	f000 fcb3 	bl	40fb38 <memmove>
  40f1d2:	68a3      	ldr	r3, [r4, #8]
  40f1d4:	6822      	ldr	r2, [r4, #0]
  40f1d6:	1bdb      	subs	r3, r3, r7
  40f1d8:	443a      	add	r2, r7
  40f1da:	60a3      	str	r3, [r4, #8]
  40f1dc:	6022      	str	r2, [r4, #0]
  40f1de:	2b00      	cmp	r3, #0
  40f1e0:	d09f      	beq.n	40f122 <__sfvwrite_r+0xee>
  40f1e2:	463a      	mov	r2, r7
  40f1e4:	e785      	b.n	40f0f2 <__sfvwrite_r+0xbe>
  40f1e6:	461a      	mov	r2, r3
  40f1e8:	4659      	mov	r1, fp
  40f1ea:	9300      	str	r3, [sp, #0]
  40f1ec:	f000 fca4 	bl	40fb38 <memmove>
  40f1f0:	9b00      	ldr	r3, [sp, #0]
  40f1f2:	68a1      	ldr	r1, [r4, #8]
  40f1f4:	6822      	ldr	r2, [r4, #0]
  40f1f6:	1ac9      	subs	r1, r1, r3
  40f1f8:	ebba 0a07 	subs.w	sl, sl, r7
  40f1fc:	4413      	add	r3, r2
  40f1fe:	60a1      	str	r1, [r4, #8]
  40f200:	6023      	str	r3, [r4, #0]
  40f202:	d1c4      	bne.n	40f18e <__sfvwrite_r+0x15a>
  40f204:	4648      	mov	r0, r9
  40f206:	4621      	mov	r1, r4
  40f208:	f7ff fce8 	bl	40ebdc <_fflush_r>
  40f20c:	2800      	cmp	r0, #0
  40f20e:	d18e      	bne.n	40f12e <__sfvwrite_r+0xfa>
  40f210:	f8cd a004 	str.w	sl, [sp, #4]
  40f214:	e7bb      	b.n	40f18e <__sfvwrite_r+0x15a>
  40f216:	6820      	ldr	r0, [r4, #0]
  40f218:	4647      	mov	r7, r8
  40f21a:	46c3      	mov	fp, r8
  40f21c:	e75d      	b.n	40f0da <__sfvwrite_r+0xa6>
  40f21e:	4658      	mov	r0, fp
  40f220:	210a      	movs	r1, #10
  40f222:	4642      	mov	r2, r8
  40f224:	f000 fc40 	bl	40faa8 <memchr>
  40f228:	2800      	cmp	r0, #0
  40f22a:	d07f      	beq.n	40f32c <__sfvwrite_r+0x2f8>
  40f22c:	f100 0a01 	add.w	sl, r0, #1
  40f230:	2701      	movs	r7, #1
  40f232:	ebcb 0a0a 	rsb	sl, fp, sl
  40f236:	9701      	str	r7, [sp, #4]
  40f238:	e78c      	b.n	40f154 <__sfvwrite_r+0x120>
  40f23a:	6822      	ldr	r2, [r4, #0]
  40f23c:	6921      	ldr	r1, [r4, #16]
  40f23e:	6967      	ldr	r7, [r4, #20]
  40f240:	ebc1 0c02 	rsb	ip, r1, r2
  40f244:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40f248:	f10c 0201 	add.w	r2, ip, #1
  40f24c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40f250:	4442      	add	r2, r8
  40f252:	107f      	asrs	r7, r7, #1
  40f254:	4297      	cmp	r7, r2
  40f256:	bf34      	ite	cc
  40f258:	4617      	movcc	r7, r2
  40f25a:	463a      	movcs	r2, r7
  40f25c:	055b      	lsls	r3, r3, #21
  40f25e:	d54f      	bpl.n	40f300 <__sfvwrite_r+0x2cc>
  40f260:	4611      	mov	r1, r2
  40f262:	4648      	mov	r0, r9
  40f264:	f8cd c000 	str.w	ip, [sp]
  40f268:	f000 f93e 	bl	40f4e8 <_malloc_r>
  40f26c:	f8dd c000 	ldr.w	ip, [sp]
  40f270:	4683      	mov	fp, r0
  40f272:	2800      	cmp	r0, #0
  40f274:	d062      	beq.n	40f33c <__sfvwrite_r+0x308>
  40f276:	4662      	mov	r2, ip
  40f278:	6921      	ldr	r1, [r4, #16]
  40f27a:	f8cd c000 	str.w	ip, [sp]
  40f27e:	f7fb f89d 	bl	40a3bc <memcpy>
  40f282:	89a2      	ldrh	r2, [r4, #12]
  40f284:	f8dd c000 	ldr.w	ip, [sp]
  40f288:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40f28c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40f290:	81a2      	strh	r2, [r4, #12]
  40f292:	eb0b 000c 	add.w	r0, fp, ip
  40f296:	ebcc 0207 	rsb	r2, ip, r7
  40f29a:	f8c4 b010 	str.w	fp, [r4, #16]
  40f29e:	6167      	str	r7, [r4, #20]
  40f2a0:	6020      	str	r0, [r4, #0]
  40f2a2:	60a2      	str	r2, [r4, #8]
  40f2a4:	4647      	mov	r7, r8
  40f2a6:	46c3      	mov	fp, r8
  40f2a8:	e717      	b.n	40f0da <__sfvwrite_r+0xa6>
  40f2aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40f2ae:	4590      	cmp	r8, r2
  40f2b0:	bf38      	it	cc
  40f2b2:	4642      	movcc	r2, r8
  40f2b4:	fb92 f2f3 	sdiv	r2, r2, r3
  40f2b8:	fb02 f303 	mul.w	r3, r2, r3
  40f2bc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40f2be:	69e1      	ldr	r1, [r4, #28]
  40f2c0:	4648      	mov	r0, r9
  40f2c2:	4652      	mov	r2, sl
  40f2c4:	47b8      	blx	r7
  40f2c6:	2800      	cmp	r0, #0
  40f2c8:	f77f af31 	ble.w	40f12e <__sfvwrite_r+0xfa>
  40f2cc:	4602      	mov	r2, r0
  40f2ce:	e710      	b.n	40f0f2 <__sfvwrite_r+0xbe>
  40f2d0:	4662      	mov	r2, ip
  40f2d2:	4659      	mov	r1, fp
  40f2d4:	f8cd c000 	str.w	ip, [sp]
  40f2d8:	f000 fc2e 	bl	40fb38 <memmove>
  40f2dc:	f8dd c000 	ldr.w	ip, [sp]
  40f2e0:	6823      	ldr	r3, [r4, #0]
  40f2e2:	4463      	add	r3, ip
  40f2e4:	6023      	str	r3, [r4, #0]
  40f2e6:	4648      	mov	r0, r9
  40f2e8:	4621      	mov	r1, r4
  40f2ea:	f8cd c000 	str.w	ip, [sp]
  40f2ee:	f7ff fc75 	bl	40ebdc <_fflush_r>
  40f2f2:	f8dd c000 	ldr.w	ip, [sp]
  40f2f6:	2800      	cmp	r0, #0
  40f2f8:	f47f af19 	bne.w	40f12e <__sfvwrite_r+0xfa>
  40f2fc:	4667      	mov	r7, ip
  40f2fe:	e743      	b.n	40f188 <__sfvwrite_r+0x154>
  40f300:	4648      	mov	r0, r9
  40f302:	f8cd c000 	str.w	ip, [sp]
  40f306:	f001 f8db 	bl	4104c0 <_realloc_r>
  40f30a:	f8dd c000 	ldr.w	ip, [sp]
  40f30e:	4683      	mov	fp, r0
  40f310:	2800      	cmp	r0, #0
  40f312:	d1be      	bne.n	40f292 <__sfvwrite_r+0x25e>
  40f314:	4648      	mov	r0, r9
  40f316:	6921      	ldr	r1, [r4, #16]
  40f318:	f7ff fdbe 	bl	40ee98 <_free_r>
  40f31c:	89a3      	ldrh	r3, [r4, #12]
  40f31e:	220c      	movs	r2, #12
  40f320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40f324:	b29b      	uxth	r3, r3
  40f326:	f8c9 2000 	str.w	r2, [r9]
  40f32a:	e701      	b.n	40f130 <__sfvwrite_r+0xfc>
  40f32c:	2701      	movs	r7, #1
  40f32e:	f108 0a01 	add.w	sl, r8, #1
  40f332:	9701      	str	r7, [sp, #4]
  40f334:	e70e      	b.n	40f154 <__sfvwrite_r+0x120>
  40f336:	f04f 30ff 	mov.w	r0, #4294967295
  40f33a:	e6aa      	b.n	40f092 <__sfvwrite_r+0x5e>
  40f33c:	230c      	movs	r3, #12
  40f33e:	f8c9 3000 	str.w	r3, [r9]
  40f342:	89a3      	ldrh	r3, [r4, #12]
  40f344:	e6f4      	b.n	40f130 <__sfvwrite_r+0xfc>
  40f346:	bf00      	nop
  40f348:	7ffffc00 	.word	0x7ffffc00

0040f34c <_fwalk>:
  40f34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f350:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40f354:	4688      	mov	r8, r1
  40f356:	d01a      	beq.n	40f38e <_fwalk+0x42>
  40f358:	2600      	movs	r6, #0
  40f35a:	687d      	ldr	r5, [r7, #4]
  40f35c:	68bc      	ldr	r4, [r7, #8]
  40f35e:	3d01      	subs	r5, #1
  40f360:	d40f      	bmi.n	40f382 <_fwalk+0x36>
  40f362:	89a3      	ldrh	r3, [r4, #12]
  40f364:	2b01      	cmp	r3, #1
  40f366:	f105 35ff 	add.w	r5, r5, #4294967295
  40f36a:	d906      	bls.n	40f37a <_fwalk+0x2e>
  40f36c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40f370:	3301      	adds	r3, #1
  40f372:	4620      	mov	r0, r4
  40f374:	d001      	beq.n	40f37a <_fwalk+0x2e>
  40f376:	47c0      	blx	r8
  40f378:	4306      	orrs	r6, r0
  40f37a:	1c6b      	adds	r3, r5, #1
  40f37c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40f380:	d1ef      	bne.n	40f362 <_fwalk+0x16>
  40f382:	683f      	ldr	r7, [r7, #0]
  40f384:	2f00      	cmp	r7, #0
  40f386:	d1e8      	bne.n	40f35a <_fwalk+0xe>
  40f388:	4630      	mov	r0, r6
  40f38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f38e:	463e      	mov	r6, r7
  40f390:	4630      	mov	r0, r6
  40f392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40f396:	bf00      	nop

0040f398 <iswspace>:
  40f398:	28ff      	cmp	r0, #255	; 0xff
  40f39a:	d807      	bhi.n	40f3ac <iswspace+0x14>
  40f39c:	4b04      	ldr	r3, [pc, #16]	; (40f3b0 <iswspace+0x18>)
  40f39e:	681b      	ldr	r3, [r3, #0]
  40f3a0:	4418      	add	r0, r3
  40f3a2:	7840      	ldrb	r0, [r0, #1]
  40f3a4:	f000 0008 	and.w	r0, r0, #8
  40f3a8:	b2c0      	uxtb	r0, r0
  40f3aa:	4770      	bx	lr
  40f3ac:	2000      	movs	r0, #0
  40f3ae:	4770      	bx	lr
  40f3b0:	20000644 	.word	0x20000644

0040f3b4 <__locale_charset>:
  40f3b4:	4800      	ldr	r0, [pc, #0]	; (40f3b8 <__locale_charset+0x4>)
  40f3b6:	4770      	bx	lr
  40f3b8:	20000680 	.word	0x20000680

0040f3bc <__locale_mb_cur_max>:
  40f3bc:	4b01      	ldr	r3, [pc, #4]	; (40f3c4 <__locale_mb_cur_max+0x8>)
  40f3be:	6818      	ldr	r0, [r3, #0]
  40f3c0:	4770      	bx	lr
  40f3c2:	bf00      	nop
  40f3c4:	200006a0 	.word	0x200006a0

0040f3c8 <_localeconv_r>:
  40f3c8:	4800      	ldr	r0, [pc, #0]	; (40f3cc <_localeconv_r+0x4>)
  40f3ca:	4770      	bx	lr
  40f3cc:	20000648 	.word	0x20000648

0040f3d0 <_lseek_r>:
  40f3d0:	b570      	push	{r4, r5, r6, lr}
  40f3d2:	4c08      	ldr	r4, [pc, #32]	; (40f3f4 <_lseek_r+0x24>)
  40f3d4:	4606      	mov	r6, r0
  40f3d6:	2500      	movs	r5, #0
  40f3d8:	4608      	mov	r0, r1
  40f3da:	4611      	mov	r1, r2
  40f3dc:	461a      	mov	r2, r3
  40f3de:	6025      	str	r5, [r4, #0]
  40f3e0:	f7fa fc0a 	bl	409bf8 <_lseek>
  40f3e4:	1c43      	adds	r3, r0, #1
  40f3e6:	d000      	beq.n	40f3ea <_lseek_r+0x1a>
  40f3e8:	bd70      	pop	{r4, r5, r6, pc}
  40f3ea:	6823      	ldr	r3, [r4, #0]
  40f3ec:	2b00      	cmp	r3, #0
  40f3ee:	d0fb      	beq.n	40f3e8 <_lseek_r+0x18>
  40f3f0:	6033      	str	r3, [r6, #0]
  40f3f2:	bd70      	pop	{r4, r5, r6, pc}
  40f3f4:	20016044 	.word	0x20016044

0040f3f8 <__smakebuf_r>:
  40f3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f3fa:	898b      	ldrh	r3, [r1, #12]
  40f3fc:	b29a      	uxth	r2, r3
  40f3fe:	0796      	lsls	r6, r2, #30
  40f400:	b091      	sub	sp, #68	; 0x44
  40f402:	460c      	mov	r4, r1
  40f404:	4605      	mov	r5, r0
  40f406:	d437      	bmi.n	40f478 <__smakebuf_r+0x80>
  40f408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f40c:	2900      	cmp	r1, #0
  40f40e:	db17      	blt.n	40f440 <__smakebuf_r+0x48>
  40f410:	aa01      	add	r2, sp, #4
  40f412:	f002 ffd1 	bl	4123b8 <_fstat_r>
  40f416:	2800      	cmp	r0, #0
  40f418:	db10      	blt.n	40f43c <__smakebuf_r+0x44>
  40f41a:	9b02      	ldr	r3, [sp, #8]
  40f41c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  40f420:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
  40f424:	424f      	negs	r7, r1
  40f426:	414f      	adcs	r7, r1
  40f428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  40f42c:	d02c      	beq.n	40f488 <__smakebuf_r+0x90>
  40f42e:	89a3      	ldrh	r3, [r4, #12]
  40f430:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40f434:	81a3      	strh	r3, [r4, #12]
  40f436:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40f43a:	e00b      	b.n	40f454 <__smakebuf_r+0x5c>
  40f43c:	89a3      	ldrh	r3, [r4, #12]
  40f43e:	b29a      	uxth	r2, r3
  40f440:	f012 0f80 	tst.w	r2, #128	; 0x80
  40f444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40f448:	81a3      	strh	r3, [r4, #12]
  40f44a:	bf14      	ite	ne
  40f44c:	2640      	movne	r6, #64	; 0x40
  40f44e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40f452:	2700      	movs	r7, #0
  40f454:	4628      	mov	r0, r5
  40f456:	4631      	mov	r1, r6
  40f458:	f000 f846 	bl	40f4e8 <_malloc_r>
  40f45c:	89a3      	ldrh	r3, [r4, #12]
  40f45e:	2800      	cmp	r0, #0
  40f460:	d029      	beq.n	40f4b6 <__smakebuf_r+0xbe>
  40f462:	4a1b      	ldr	r2, [pc, #108]	; (40f4d0 <__smakebuf_r+0xd8>)
  40f464:	63ea      	str	r2, [r5, #60]	; 0x3c
  40f466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40f46a:	81a3      	strh	r3, [r4, #12]
  40f46c:	6020      	str	r0, [r4, #0]
  40f46e:	6120      	str	r0, [r4, #16]
  40f470:	6166      	str	r6, [r4, #20]
  40f472:	b9a7      	cbnz	r7, 40f49e <__smakebuf_r+0xa6>
  40f474:	b011      	add	sp, #68	; 0x44
  40f476:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f478:	f101 0343 	add.w	r3, r1, #67	; 0x43
  40f47c:	2201      	movs	r2, #1
  40f47e:	600b      	str	r3, [r1, #0]
  40f480:	610b      	str	r3, [r1, #16]
  40f482:	614a      	str	r2, [r1, #20]
  40f484:	b011      	add	sp, #68	; 0x44
  40f486:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f488:	4a12      	ldr	r2, [pc, #72]	; (40f4d4 <__smakebuf_r+0xdc>)
  40f48a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40f48c:	4293      	cmp	r3, r2
  40f48e:	d1ce      	bne.n	40f42e <__smakebuf_r+0x36>
  40f490:	89a3      	ldrh	r3, [r4, #12]
  40f492:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40f496:	4333      	orrs	r3, r6
  40f498:	81a3      	strh	r3, [r4, #12]
  40f49a:	64e6      	str	r6, [r4, #76]	; 0x4c
  40f49c:	e7da      	b.n	40f454 <__smakebuf_r+0x5c>
  40f49e:	4628      	mov	r0, r5
  40f4a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40f4a4:	f003 fb4e 	bl	412b44 <_isatty_r>
  40f4a8:	2800      	cmp	r0, #0
  40f4aa:	d0e3      	beq.n	40f474 <__smakebuf_r+0x7c>
  40f4ac:	89a3      	ldrh	r3, [r4, #12]
  40f4ae:	f043 0301 	orr.w	r3, r3, #1
  40f4b2:	81a3      	strh	r3, [r4, #12]
  40f4b4:	e7de      	b.n	40f474 <__smakebuf_r+0x7c>
  40f4b6:	059a      	lsls	r2, r3, #22
  40f4b8:	d4dc      	bmi.n	40f474 <__smakebuf_r+0x7c>
  40f4ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40f4be:	f043 0302 	orr.w	r3, r3, #2
  40f4c2:	2101      	movs	r1, #1
  40f4c4:	81a3      	strh	r3, [r4, #12]
  40f4c6:	6022      	str	r2, [r4, #0]
  40f4c8:	6122      	str	r2, [r4, #16]
  40f4ca:	6161      	str	r1, [r4, #20]
  40f4cc:	e7d2      	b.n	40f474 <__smakebuf_r+0x7c>
  40f4ce:	bf00      	nop
  40f4d0:	0040ec09 	.word	0x0040ec09
  40f4d4:	0040a799 	.word	0x0040a799

0040f4d8 <malloc>:
  40f4d8:	4b02      	ldr	r3, [pc, #8]	; (40f4e4 <malloc+0xc>)
  40f4da:	4601      	mov	r1, r0
  40f4dc:	6818      	ldr	r0, [r3, #0]
  40f4de:	f000 b803 	b.w	40f4e8 <_malloc_r>
  40f4e2:	bf00      	nop
  40f4e4:	20000640 	.word	0x20000640

0040f4e8 <_malloc_r>:
  40f4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f4ec:	f101 050b 	add.w	r5, r1, #11
  40f4f0:	2d16      	cmp	r5, #22
  40f4f2:	b083      	sub	sp, #12
  40f4f4:	4606      	mov	r6, r0
  40f4f6:	d927      	bls.n	40f548 <_malloc_r+0x60>
  40f4f8:	f035 0507 	bics.w	r5, r5, #7
  40f4fc:	d427      	bmi.n	40f54e <_malloc_r+0x66>
  40f4fe:	42a9      	cmp	r1, r5
  40f500:	d825      	bhi.n	40f54e <_malloc_r+0x66>
  40f502:	4630      	mov	r0, r6
  40f504:	f000 fb78 	bl	40fbf8 <__malloc_lock>
  40f508:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40f50c:	d226      	bcs.n	40f55c <_malloc_r+0x74>
  40f50e:	4fc1      	ldr	r7, [pc, #772]	; (40f814 <_malloc_r+0x32c>)
  40f510:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  40f514:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  40f518:	68dc      	ldr	r4, [r3, #12]
  40f51a:	429c      	cmp	r4, r3
  40f51c:	f000 81d2 	beq.w	40f8c4 <_malloc_r+0x3dc>
  40f520:	6863      	ldr	r3, [r4, #4]
  40f522:	68e2      	ldr	r2, [r4, #12]
  40f524:	68a1      	ldr	r1, [r4, #8]
  40f526:	f023 0303 	bic.w	r3, r3, #3
  40f52a:	4423      	add	r3, r4
  40f52c:	4630      	mov	r0, r6
  40f52e:	685d      	ldr	r5, [r3, #4]
  40f530:	60ca      	str	r2, [r1, #12]
  40f532:	f045 0501 	orr.w	r5, r5, #1
  40f536:	6091      	str	r1, [r2, #8]
  40f538:	605d      	str	r5, [r3, #4]
  40f53a:	f000 fb5f 	bl	40fbfc <__malloc_unlock>
  40f53e:	3408      	adds	r4, #8
  40f540:	4620      	mov	r0, r4
  40f542:	b003      	add	sp, #12
  40f544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f548:	2510      	movs	r5, #16
  40f54a:	42a9      	cmp	r1, r5
  40f54c:	d9d9      	bls.n	40f502 <_malloc_r+0x1a>
  40f54e:	2400      	movs	r4, #0
  40f550:	230c      	movs	r3, #12
  40f552:	4620      	mov	r0, r4
  40f554:	6033      	str	r3, [r6, #0]
  40f556:	b003      	add	sp, #12
  40f558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f55c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  40f560:	f000 808a 	beq.w	40f678 <_malloc_r+0x190>
  40f564:	f1bc 0f04 	cmp.w	ip, #4
  40f568:	f200 8160 	bhi.w	40f82c <_malloc_r+0x344>
  40f56c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  40f570:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  40f574:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40f578:	4fa6      	ldr	r7, [pc, #664]	; (40f814 <_malloc_r+0x32c>)
  40f57a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  40f57e:	68cc      	ldr	r4, [r1, #12]
  40f580:	42a1      	cmp	r1, r4
  40f582:	d105      	bne.n	40f590 <_malloc_r+0xa8>
  40f584:	e00c      	b.n	40f5a0 <_malloc_r+0xb8>
  40f586:	2b00      	cmp	r3, #0
  40f588:	da7a      	bge.n	40f680 <_malloc_r+0x198>
  40f58a:	68e4      	ldr	r4, [r4, #12]
  40f58c:	42a1      	cmp	r1, r4
  40f58e:	d007      	beq.n	40f5a0 <_malloc_r+0xb8>
  40f590:	6862      	ldr	r2, [r4, #4]
  40f592:	f022 0203 	bic.w	r2, r2, #3
  40f596:	1b53      	subs	r3, r2, r5
  40f598:	2b0f      	cmp	r3, #15
  40f59a:	ddf4      	ble.n	40f586 <_malloc_r+0x9e>
  40f59c:	f10c 3cff 	add.w	ip, ip, #4294967295
  40f5a0:	f10c 0c01 	add.w	ip, ip, #1
  40f5a4:	4b9b      	ldr	r3, [pc, #620]	; (40f814 <_malloc_r+0x32c>)
  40f5a6:	693c      	ldr	r4, [r7, #16]
  40f5a8:	f103 0e08 	add.w	lr, r3, #8
  40f5ac:	4574      	cmp	r4, lr
  40f5ae:	f000 817e 	beq.w	40f8ae <_malloc_r+0x3c6>
  40f5b2:	6861      	ldr	r1, [r4, #4]
  40f5b4:	f021 0103 	bic.w	r1, r1, #3
  40f5b8:	1b4a      	subs	r2, r1, r5
  40f5ba:	2a0f      	cmp	r2, #15
  40f5bc:	f300 8164 	bgt.w	40f888 <_malloc_r+0x3a0>
  40f5c0:	2a00      	cmp	r2, #0
  40f5c2:	f8c3 e014 	str.w	lr, [r3, #20]
  40f5c6:	f8c3 e010 	str.w	lr, [r3, #16]
  40f5ca:	da6a      	bge.n	40f6a2 <_malloc_r+0x1ba>
  40f5cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  40f5d0:	f080 813a 	bcs.w	40f848 <_malloc_r+0x360>
  40f5d4:	08c9      	lsrs	r1, r1, #3
  40f5d6:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  40f5da:	ea4f 08a1 	mov.w	r8, r1, asr #2
  40f5de:	685a      	ldr	r2, [r3, #4]
  40f5e0:	6881      	ldr	r1, [r0, #8]
  40f5e2:	60a1      	str	r1, [r4, #8]
  40f5e4:	f04f 0901 	mov.w	r9, #1
  40f5e8:	fa09 f808 	lsl.w	r8, r9, r8
  40f5ec:	ea48 0202 	orr.w	r2, r8, r2
  40f5f0:	60e0      	str	r0, [r4, #12]
  40f5f2:	605a      	str	r2, [r3, #4]
  40f5f4:	6084      	str	r4, [r0, #8]
  40f5f6:	60cc      	str	r4, [r1, #12]
  40f5f8:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40f5fc:	2001      	movs	r0, #1
  40f5fe:	4098      	lsls	r0, r3
  40f600:	4290      	cmp	r0, r2
  40f602:	d85b      	bhi.n	40f6bc <_malloc_r+0x1d4>
  40f604:	4202      	tst	r2, r0
  40f606:	d106      	bne.n	40f616 <_malloc_r+0x12e>
  40f608:	f02c 0c03 	bic.w	ip, ip, #3
  40f60c:	0040      	lsls	r0, r0, #1
  40f60e:	4202      	tst	r2, r0
  40f610:	f10c 0c04 	add.w	ip, ip, #4
  40f614:	d0fa      	beq.n	40f60c <_malloc_r+0x124>
  40f616:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  40f61a:	4644      	mov	r4, r8
  40f61c:	46e1      	mov	r9, ip
  40f61e:	68e3      	ldr	r3, [r4, #12]
  40f620:	429c      	cmp	r4, r3
  40f622:	d107      	bne.n	40f634 <_malloc_r+0x14c>
  40f624:	e145      	b.n	40f8b2 <_malloc_r+0x3ca>
  40f626:	2a00      	cmp	r2, #0
  40f628:	f280 8156 	bge.w	40f8d8 <_malloc_r+0x3f0>
  40f62c:	68db      	ldr	r3, [r3, #12]
  40f62e:	429c      	cmp	r4, r3
  40f630:	f000 813f 	beq.w	40f8b2 <_malloc_r+0x3ca>
  40f634:	6859      	ldr	r1, [r3, #4]
  40f636:	f021 0103 	bic.w	r1, r1, #3
  40f63a:	1b4a      	subs	r2, r1, r5
  40f63c:	2a0f      	cmp	r2, #15
  40f63e:	ddf2      	ble.n	40f626 <_malloc_r+0x13e>
  40f640:	461c      	mov	r4, r3
  40f642:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40f646:	f854 8f08 	ldr.w	r8, [r4, #8]!
  40f64a:	1959      	adds	r1, r3, r5
  40f64c:	f045 0901 	orr.w	r9, r5, #1
  40f650:	f042 0501 	orr.w	r5, r2, #1
  40f654:	f8c3 9004 	str.w	r9, [r3, #4]
  40f658:	4630      	mov	r0, r6
  40f65a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40f65e:	f8cc 8008 	str.w	r8, [ip, #8]
  40f662:	6179      	str	r1, [r7, #20]
  40f664:	6139      	str	r1, [r7, #16]
  40f666:	f8c1 e00c 	str.w	lr, [r1, #12]
  40f66a:	f8c1 e008 	str.w	lr, [r1, #8]
  40f66e:	604d      	str	r5, [r1, #4]
  40f670:	508a      	str	r2, [r1, r2]
  40f672:	f000 fac3 	bl	40fbfc <__malloc_unlock>
  40f676:	e763      	b.n	40f540 <_malloc_r+0x58>
  40f678:	217e      	movs	r1, #126	; 0x7e
  40f67a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40f67e:	e77b      	b.n	40f578 <_malloc_r+0x90>
  40f680:	4422      	add	r2, r4
  40f682:	68e3      	ldr	r3, [r4, #12]
  40f684:	6850      	ldr	r0, [r2, #4]
  40f686:	68a1      	ldr	r1, [r4, #8]
  40f688:	f040 0501 	orr.w	r5, r0, #1
  40f68c:	60cb      	str	r3, [r1, #12]
  40f68e:	4630      	mov	r0, r6
  40f690:	6099      	str	r1, [r3, #8]
  40f692:	6055      	str	r5, [r2, #4]
  40f694:	f000 fab2 	bl	40fbfc <__malloc_unlock>
  40f698:	3408      	adds	r4, #8
  40f69a:	4620      	mov	r0, r4
  40f69c:	b003      	add	sp, #12
  40f69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f6a2:	4421      	add	r1, r4
  40f6a4:	4630      	mov	r0, r6
  40f6a6:	684b      	ldr	r3, [r1, #4]
  40f6a8:	f043 0301 	orr.w	r3, r3, #1
  40f6ac:	604b      	str	r3, [r1, #4]
  40f6ae:	f000 faa5 	bl	40fbfc <__malloc_unlock>
  40f6b2:	3408      	adds	r4, #8
  40f6b4:	4620      	mov	r0, r4
  40f6b6:	b003      	add	sp, #12
  40f6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f6bc:	68bc      	ldr	r4, [r7, #8]
  40f6be:	6863      	ldr	r3, [r4, #4]
  40f6c0:	f023 0903 	bic.w	r9, r3, #3
  40f6c4:	45a9      	cmp	r9, r5
  40f6c6:	d304      	bcc.n	40f6d2 <_malloc_r+0x1ea>
  40f6c8:	ebc5 0309 	rsb	r3, r5, r9
  40f6cc:	2b0f      	cmp	r3, #15
  40f6ce:	f300 8091 	bgt.w	40f7f4 <_malloc_r+0x30c>
  40f6d2:	4b51      	ldr	r3, [pc, #324]	; (40f818 <_malloc_r+0x330>)
  40f6d4:	4a51      	ldr	r2, [pc, #324]	; (40f81c <_malloc_r+0x334>)
  40f6d6:	6819      	ldr	r1, [r3, #0]
  40f6d8:	6813      	ldr	r3, [r2, #0]
  40f6da:	3301      	adds	r3, #1
  40f6dc:	eb05 0a01 	add.w	sl, r5, r1
  40f6e0:	eb04 0b09 	add.w	fp, r4, r9
  40f6e4:	f000 8161 	beq.w	40f9aa <_malloc_r+0x4c2>
  40f6e8:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  40f6ec:	f10a 0a0f 	add.w	sl, sl, #15
  40f6f0:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  40f6f4:	f02a 0a0f 	bic.w	sl, sl, #15
  40f6f8:	4630      	mov	r0, r6
  40f6fa:	4651      	mov	r1, sl
  40f6fc:	9201      	str	r2, [sp, #4]
  40f6fe:	f001 f8ed 	bl	4108dc <_sbrk_r>
  40f702:	f1b0 3fff 	cmp.w	r0, #4294967295
  40f706:	4680      	mov	r8, r0
  40f708:	9a01      	ldr	r2, [sp, #4]
  40f70a:	f000 8100 	beq.w	40f90e <_malloc_r+0x426>
  40f70e:	4583      	cmp	fp, r0
  40f710:	f200 80fa 	bhi.w	40f908 <_malloc_r+0x420>
  40f714:	f8df c110 	ldr.w	ip, [pc, #272]	; 40f828 <_malloc_r+0x340>
  40f718:	f8dc 3000 	ldr.w	r3, [ip]
  40f71c:	45c3      	cmp	fp, r8
  40f71e:	4453      	add	r3, sl
  40f720:	f8cc 3000 	str.w	r3, [ip]
  40f724:	f000 814a 	beq.w	40f9bc <_malloc_r+0x4d4>
  40f728:	6812      	ldr	r2, [r2, #0]
  40f72a:	493c      	ldr	r1, [pc, #240]	; (40f81c <_malloc_r+0x334>)
  40f72c:	3201      	adds	r2, #1
  40f72e:	bf1b      	ittet	ne
  40f730:	ebcb 0b08 	rsbne	fp, fp, r8
  40f734:	445b      	addne	r3, fp
  40f736:	f8c1 8000 	streq.w	r8, [r1]
  40f73a:	f8cc 3000 	strne.w	r3, [ip]
  40f73e:	f018 0307 	ands.w	r3, r8, #7
  40f742:	f000 8113 	beq.w	40f96c <_malloc_r+0x484>
  40f746:	f1c3 0208 	rsb	r2, r3, #8
  40f74a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  40f74e:	4490      	add	r8, r2
  40f750:	3308      	adds	r3, #8
  40f752:	44c2      	add	sl, r8
  40f754:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  40f758:	ebca 0a03 	rsb	sl, sl, r3
  40f75c:	4651      	mov	r1, sl
  40f75e:	4630      	mov	r0, r6
  40f760:	f8cd c004 	str.w	ip, [sp, #4]
  40f764:	f001 f8ba 	bl	4108dc <_sbrk_r>
  40f768:	1c43      	adds	r3, r0, #1
  40f76a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40f76e:	f000 8135 	beq.w	40f9dc <_malloc_r+0x4f4>
  40f772:	ebc8 0200 	rsb	r2, r8, r0
  40f776:	4452      	add	r2, sl
  40f778:	f042 0201 	orr.w	r2, r2, #1
  40f77c:	f8dc 3000 	ldr.w	r3, [ip]
  40f780:	f8c7 8008 	str.w	r8, [r7, #8]
  40f784:	4453      	add	r3, sl
  40f786:	42bc      	cmp	r4, r7
  40f788:	f8c8 2004 	str.w	r2, [r8, #4]
  40f78c:	f8cc 3000 	str.w	r3, [ip]
  40f790:	f8df a094 	ldr.w	sl, [pc, #148]	; 40f828 <_malloc_r+0x340>
  40f794:	d015      	beq.n	40f7c2 <_malloc_r+0x2da>
  40f796:	f1b9 0f0f 	cmp.w	r9, #15
  40f79a:	f240 80ea 	bls.w	40f972 <_malloc_r+0x48a>
  40f79e:	6861      	ldr	r1, [r4, #4]
  40f7a0:	f1a9 020c 	sub.w	r2, r9, #12
  40f7a4:	f022 0207 	bic.w	r2, r2, #7
  40f7a8:	f001 0e01 	and.w	lr, r1, #1
  40f7ac:	18a1      	adds	r1, r4, r2
  40f7ae:	2005      	movs	r0, #5
  40f7b0:	ea42 0e0e 	orr.w	lr, r2, lr
  40f7b4:	2a0f      	cmp	r2, #15
  40f7b6:	f8c4 e004 	str.w	lr, [r4, #4]
  40f7ba:	6048      	str	r0, [r1, #4]
  40f7bc:	6088      	str	r0, [r1, #8]
  40f7be:	f200 8111 	bhi.w	40f9e4 <_malloc_r+0x4fc>
  40f7c2:	4a17      	ldr	r2, [pc, #92]	; (40f820 <_malloc_r+0x338>)
  40f7c4:	68bc      	ldr	r4, [r7, #8]
  40f7c6:	6811      	ldr	r1, [r2, #0]
  40f7c8:	428b      	cmp	r3, r1
  40f7ca:	bf88      	it	hi
  40f7cc:	6013      	strhi	r3, [r2, #0]
  40f7ce:	4a15      	ldr	r2, [pc, #84]	; (40f824 <_malloc_r+0x33c>)
  40f7d0:	6811      	ldr	r1, [r2, #0]
  40f7d2:	428b      	cmp	r3, r1
  40f7d4:	bf88      	it	hi
  40f7d6:	6013      	strhi	r3, [r2, #0]
  40f7d8:	6862      	ldr	r2, [r4, #4]
  40f7da:	f022 0203 	bic.w	r2, r2, #3
  40f7de:	4295      	cmp	r5, r2
  40f7e0:	ebc5 0302 	rsb	r3, r5, r2
  40f7e4:	d801      	bhi.n	40f7ea <_malloc_r+0x302>
  40f7e6:	2b0f      	cmp	r3, #15
  40f7e8:	dc04      	bgt.n	40f7f4 <_malloc_r+0x30c>
  40f7ea:	4630      	mov	r0, r6
  40f7ec:	f000 fa06 	bl	40fbfc <__malloc_unlock>
  40f7f0:	2400      	movs	r4, #0
  40f7f2:	e6a5      	b.n	40f540 <_malloc_r+0x58>
  40f7f4:	1962      	adds	r2, r4, r5
  40f7f6:	f043 0301 	orr.w	r3, r3, #1
  40f7fa:	f045 0501 	orr.w	r5, r5, #1
  40f7fe:	6065      	str	r5, [r4, #4]
  40f800:	4630      	mov	r0, r6
  40f802:	60ba      	str	r2, [r7, #8]
  40f804:	6053      	str	r3, [r2, #4]
  40f806:	f000 f9f9 	bl	40fbfc <__malloc_unlock>
  40f80a:	3408      	adds	r4, #8
  40f80c:	4620      	mov	r0, r4
  40f80e:	b003      	add	sp, #12
  40f810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f814:	200006a4 	.word	0x200006a4
  40f818:	20014f54 	.word	0x20014f54
  40f81c:	20000ab0 	.word	0x20000ab0
  40f820:	20014f50 	.word	0x20014f50
  40f824:	20014f4c 	.word	0x20014f4c
  40f828:	20014f58 	.word	0x20014f58
  40f82c:	f1bc 0f14 	cmp.w	ip, #20
  40f830:	d961      	bls.n	40f8f6 <_malloc_r+0x40e>
  40f832:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  40f836:	f200 808f 	bhi.w	40f958 <_malloc_r+0x470>
  40f83a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  40f83e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40f842:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40f846:	e697      	b.n	40f578 <_malloc_r+0x90>
  40f848:	0a4b      	lsrs	r3, r1, #9
  40f84a:	2b04      	cmp	r3, #4
  40f84c:	d958      	bls.n	40f900 <_malloc_r+0x418>
  40f84e:	2b14      	cmp	r3, #20
  40f850:	f200 80ae 	bhi.w	40f9b0 <_malloc_r+0x4c8>
  40f854:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  40f858:	0050      	lsls	r0, r2, #1
  40f85a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  40f85e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 40fa1c <_malloc_r+0x534>
  40f862:	6883      	ldr	r3, [r0, #8]
  40f864:	4283      	cmp	r3, r0
  40f866:	f000 808a 	beq.w	40f97e <_malloc_r+0x496>
  40f86a:	685a      	ldr	r2, [r3, #4]
  40f86c:	f022 0203 	bic.w	r2, r2, #3
  40f870:	4291      	cmp	r1, r2
  40f872:	d202      	bcs.n	40f87a <_malloc_r+0x392>
  40f874:	689b      	ldr	r3, [r3, #8]
  40f876:	4298      	cmp	r0, r3
  40f878:	d1f7      	bne.n	40f86a <_malloc_r+0x382>
  40f87a:	68d9      	ldr	r1, [r3, #12]
  40f87c:	687a      	ldr	r2, [r7, #4]
  40f87e:	60e1      	str	r1, [r4, #12]
  40f880:	60a3      	str	r3, [r4, #8]
  40f882:	608c      	str	r4, [r1, #8]
  40f884:	60dc      	str	r4, [r3, #12]
  40f886:	e6b7      	b.n	40f5f8 <_malloc_r+0x110>
  40f888:	1961      	adds	r1, r4, r5
  40f88a:	f042 0701 	orr.w	r7, r2, #1
  40f88e:	f045 0501 	orr.w	r5, r5, #1
  40f892:	6065      	str	r5, [r4, #4]
  40f894:	4630      	mov	r0, r6
  40f896:	6159      	str	r1, [r3, #20]
  40f898:	6119      	str	r1, [r3, #16]
  40f89a:	f8c1 e00c 	str.w	lr, [r1, #12]
  40f89e:	f8c1 e008 	str.w	lr, [r1, #8]
  40f8a2:	604f      	str	r7, [r1, #4]
  40f8a4:	508a      	str	r2, [r1, r2]
  40f8a6:	3408      	adds	r4, #8
  40f8a8:	f000 f9a8 	bl	40fbfc <__malloc_unlock>
  40f8ac:	e648      	b.n	40f540 <_malloc_r+0x58>
  40f8ae:	685a      	ldr	r2, [r3, #4]
  40f8b0:	e6a2      	b.n	40f5f8 <_malloc_r+0x110>
  40f8b2:	f109 0901 	add.w	r9, r9, #1
  40f8b6:	f019 0f03 	tst.w	r9, #3
  40f8ba:	f104 0408 	add.w	r4, r4, #8
  40f8be:	f47f aeae 	bne.w	40f61e <_malloc_r+0x136>
  40f8c2:	e02d      	b.n	40f920 <_malloc_r+0x438>
  40f8c4:	f104 0308 	add.w	r3, r4, #8
  40f8c8:	6964      	ldr	r4, [r4, #20]
  40f8ca:	42a3      	cmp	r3, r4
  40f8cc:	bf08      	it	eq
  40f8ce:	f10c 0c02 	addeq.w	ip, ip, #2
  40f8d2:	f43f ae67 	beq.w	40f5a4 <_malloc_r+0xbc>
  40f8d6:	e623      	b.n	40f520 <_malloc_r+0x38>
  40f8d8:	4419      	add	r1, r3
  40f8da:	461c      	mov	r4, r3
  40f8dc:	6848      	ldr	r0, [r1, #4]
  40f8de:	68db      	ldr	r3, [r3, #12]
  40f8e0:	f854 2f08 	ldr.w	r2, [r4, #8]!
  40f8e4:	f040 0501 	orr.w	r5, r0, #1
  40f8e8:	604d      	str	r5, [r1, #4]
  40f8ea:	4630      	mov	r0, r6
  40f8ec:	60d3      	str	r3, [r2, #12]
  40f8ee:	609a      	str	r2, [r3, #8]
  40f8f0:	f000 f984 	bl	40fbfc <__malloc_unlock>
  40f8f4:	e624      	b.n	40f540 <_malloc_r+0x58>
  40f8f6:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40f8fa:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40f8fe:	e63b      	b.n	40f578 <_malloc_r+0x90>
  40f900:	098a      	lsrs	r2, r1, #6
  40f902:	3238      	adds	r2, #56	; 0x38
  40f904:	0050      	lsls	r0, r2, #1
  40f906:	e7a8      	b.n	40f85a <_malloc_r+0x372>
  40f908:	42bc      	cmp	r4, r7
  40f90a:	f43f af03 	beq.w	40f714 <_malloc_r+0x22c>
  40f90e:	68bc      	ldr	r4, [r7, #8]
  40f910:	6862      	ldr	r2, [r4, #4]
  40f912:	f022 0203 	bic.w	r2, r2, #3
  40f916:	e762      	b.n	40f7de <_malloc_r+0x2f6>
  40f918:	f8d8 8000 	ldr.w	r8, [r8]
  40f91c:	4598      	cmp	r8, r3
  40f91e:	d17b      	bne.n	40fa18 <_malloc_r+0x530>
  40f920:	f01c 0f03 	tst.w	ip, #3
  40f924:	f1a8 0308 	sub.w	r3, r8, #8
  40f928:	f10c 3cff 	add.w	ip, ip, #4294967295
  40f92c:	d1f4      	bne.n	40f918 <_malloc_r+0x430>
  40f92e:	687b      	ldr	r3, [r7, #4]
  40f930:	ea23 0300 	bic.w	r3, r3, r0
  40f934:	607b      	str	r3, [r7, #4]
  40f936:	0040      	lsls	r0, r0, #1
  40f938:	4298      	cmp	r0, r3
  40f93a:	f63f aebf 	bhi.w	40f6bc <_malloc_r+0x1d4>
  40f93e:	2800      	cmp	r0, #0
  40f940:	f43f aebc 	beq.w	40f6bc <_malloc_r+0x1d4>
  40f944:	4203      	tst	r3, r0
  40f946:	46cc      	mov	ip, r9
  40f948:	f47f ae65 	bne.w	40f616 <_malloc_r+0x12e>
  40f94c:	0040      	lsls	r0, r0, #1
  40f94e:	4203      	tst	r3, r0
  40f950:	f10c 0c04 	add.w	ip, ip, #4
  40f954:	d0fa      	beq.n	40f94c <_malloc_r+0x464>
  40f956:	e65e      	b.n	40f616 <_malloc_r+0x12e>
  40f958:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  40f95c:	d81a      	bhi.n	40f994 <_malloc_r+0x4ac>
  40f95e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  40f962:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  40f966:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40f96a:	e605      	b.n	40f578 <_malloc_r+0x90>
  40f96c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40f970:	e6ef      	b.n	40f752 <_malloc_r+0x26a>
  40f972:	2301      	movs	r3, #1
  40f974:	f8c8 3004 	str.w	r3, [r8, #4]
  40f978:	4644      	mov	r4, r8
  40f97a:	2200      	movs	r2, #0
  40f97c:	e72f      	b.n	40f7de <_malloc_r+0x2f6>
  40f97e:	1091      	asrs	r1, r2, #2
  40f980:	2001      	movs	r0, #1
  40f982:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40f986:	fa00 f101 	lsl.w	r1, r0, r1
  40f98a:	430a      	orrs	r2, r1
  40f98c:	f8c8 2004 	str.w	r2, [r8, #4]
  40f990:	4619      	mov	r1, r3
  40f992:	e774      	b.n	40f87e <_malloc_r+0x396>
  40f994:	f240 5354 	movw	r3, #1364	; 0x554
  40f998:	459c      	cmp	ip, r3
  40f99a:	d81b      	bhi.n	40f9d4 <_malloc_r+0x4ec>
  40f99c:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  40f9a0:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  40f9a4:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40f9a8:	e5e6      	b.n	40f578 <_malloc_r+0x90>
  40f9aa:	f10a 0a10 	add.w	sl, sl, #16
  40f9ae:	e6a3      	b.n	40f6f8 <_malloc_r+0x210>
  40f9b0:	2b54      	cmp	r3, #84	; 0x54
  40f9b2:	d81f      	bhi.n	40f9f4 <_malloc_r+0x50c>
  40f9b4:	0b0a      	lsrs	r2, r1, #12
  40f9b6:	326e      	adds	r2, #110	; 0x6e
  40f9b8:	0050      	lsls	r0, r2, #1
  40f9ba:	e74e      	b.n	40f85a <_malloc_r+0x372>
  40f9bc:	f3cb 010b 	ubfx	r1, fp, #0, #12
  40f9c0:	2900      	cmp	r1, #0
  40f9c2:	f47f aeb1 	bne.w	40f728 <_malloc_r+0x240>
  40f9c6:	eb0a 0109 	add.w	r1, sl, r9
  40f9ca:	68ba      	ldr	r2, [r7, #8]
  40f9cc:	f041 0101 	orr.w	r1, r1, #1
  40f9d0:	6051      	str	r1, [r2, #4]
  40f9d2:	e6f6      	b.n	40f7c2 <_malloc_r+0x2da>
  40f9d4:	21fc      	movs	r1, #252	; 0xfc
  40f9d6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40f9da:	e5cd      	b.n	40f578 <_malloc_r+0x90>
  40f9dc:	2201      	movs	r2, #1
  40f9de:	f04f 0a00 	mov.w	sl, #0
  40f9e2:	e6cb      	b.n	40f77c <_malloc_r+0x294>
  40f9e4:	f104 0108 	add.w	r1, r4, #8
  40f9e8:	4630      	mov	r0, r6
  40f9ea:	f7ff fa55 	bl	40ee98 <_free_r>
  40f9ee:	f8da 3000 	ldr.w	r3, [sl]
  40f9f2:	e6e6      	b.n	40f7c2 <_malloc_r+0x2da>
  40f9f4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40f9f8:	d803      	bhi.n	40fa02 <_malloc_r+0x51a>
  40f9fa:	0bca      	lsrs	r2, r1, #15
  40f9fc:	3277      	adds	r2, #119	; 0x77
  40f9fe:	0050      	lsls	r0, r2, #1
  40fa00:	e72b      	b.n	40f85a <_malloc_r+0x372>
  40fa02:	f240 5254 	movw	r2, #1364	; 0x554
  40fa06:	4293      	cmp	r3, r2
  40fa08:	d803      	bhi.n	40fa12 <_malloc_r+0x52a>
  40fa0a:	0c8a      	lsrs	r2, r1, #18
  40fa0c:	327c      	adds	r2, #124	; 0x7c
  40fa0e:	0050      	lsls	r0, r2, #1
  40fa10:	e723      	b.n	40f85a <_malloc_r+0x372>
  40fa12:	20fc      	movs	r0, #252	; 0xfc
  40fa14:	227e      	movs	r2, #126	; 0x7e
  40fa16:	e720      	b.n	40f85a <_malloc_r+0x372>
  40fa18:	687b      	ldr	r3, [r7, #4]
  40fa1a:	e78c      	b.n	40f936 <_malloc_r+0x44e>
  40fa1c:	200006a4 	.word	0x200006a4

0040fa20 <_mbrtowc_r>:
  40fa20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40fa24:	b083      	sub	sp, #12
  40fa26:	461f      	mov	r7, r3
  40fa28:	4614      	mov	r4, r2
  40fa2a:	4605      	mov	r5, r0
  40fa2c:	4688      	mov	r8, r1
  40fa2e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40fa30:	4b10      	ldr	r3, [pc, #64]	; (40fa74 <_mbrtowc_r+0x54>)
  40fa32:	b19a      	cbz	r2, 40fa5c <_mbrtowc_r+0x3c>
  40fa34:	f8d3 9000 	ldr.w	r9, [r3]
  40fa38:	f7ff fcbc 	bl	40f3b4 <__locale_charset>
  40fa3c:	4641      	mov	r1, r8
  40fa3e:	e88d 0041 	stmia.w	sp, {r0, r6}
  40fa42:	4622      	mov	r2, r4
  40fa44:	463b      	mov	r3, r7
  40fa46:	4628      	mov	r0, r5
  40fa48:	47c8      	blx	r9
  40fa4a:	1c43      	adds	r3, r0, #1
  40fa4c:	d103      	bne.n	40fa56 <_mbrtowc_r+0x36>
  40fa4e:	2200      	movs	r2, #0
  40fa50:	238a      	movs	r3, #138	; 0x8a
  40fa52:	6032      	str	r2, [r6, #0]
  40fa54:	602b      	str	r3, [r5, #0]
  40fa56:	b003      	add	sp, #12
  40fa58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40fa5c:	681f      	ldr	r7, [r3, #0]
  40fa5e:	f7ff fca9 	bl	40f3b4 <__locale_charset>
  40fa62:	4621      	mov	r1, r4
  40fa64:	e88d 0041 	stmia.w	sp, {r0, r6}
  40fa68:	4a03      	ldr	r2, [pc, #12]	; (40fa78 <_mbrtowc_r+0x58>)
  40fa6a:	4628      	mov	r0, r5
  40fa6c:	2301      	movs	r3, #1
  40fa6e:	47b8      	blx	r7
  40fa70:	e7eb      	b.n	40fa4a <_mbrtowc_r+0x2a>
  40fa72:	bf00      	nop
  40fa74:	20000ab4 	.word	0x20000ab4
  40fa78:	004136b8 	.word	0x004136b8

0040fa7c <__ascii_mbtowc>:
  40fa7c:	b082      	sub	sp, #8
  40fa7e:	b149      	cbz	r1, 40fa94 <__ascii_mbtowc+0x18>
  40fa80:	b15a      	cbz	r2, 40fa9a <__ascii_mbtowc+0x1e>
  40fa82:	b16b      	cbz	r3, 40faa0 <__ascii_mbtowc+0x24>
  40fa84:	7813      	ldrb	r3, [r2, #0]
  40fa86:	600b      	str	r3, [r1, #0]
  40fa88:	7810      	ldrb	r0, [r2, #0]
  40fa8a:	3000      	adds	r0, #0
  40fa8c:	bf18      	it	ne
  40fa8e:	2001      	movne	r0, #1
  40fa90:	b002      	add	sp, #8
  40fa92:	4770      	bx	lr
  40fa94:	a901      	add	r1, sp, #4
  40fa96:	2a00      	cmp	r2, #0
  40fa98:	d1f3      	bne.n	40fa82 <__ascii_mbtowc+0x6>
  40fa9a:	4610      	mov	r0, r2
  40fa9c:	b002      	add	sp, #8
  40fa9e:	4770      	bx	lr
  40faa0:	f06f 0001 	mvn.w	r0, #1
  40faa4:	e7f4      	b.n	40fa90 <__ascii_mbtowc+0x14>
  40faa6:	bf00      	nop

0040faa8 <memchr>:
  40faa8:	0783      	lsls	r3, r0, #30
  40faaa:	b470      	push	{r4, r5, r6}
  40faac:	b2c9      	uxtb	r1, r1
  40faae:	d03f      	beq.n	40fb30 <memchr+0x88>
  40fab0:	1e54      	subs	r4, r2, #1
  40fab2:	b32a      	cbz	r2, 40fb00 <memchr+0x58>
  40fab4:	7803      	ldrb	r3, [r0, #0]
  40fab6:	428b      	cmp	r3, r1
  40fab8:	d023      	beq.n	40fb02 <memchr+0x5a>
  40faba:	1c43      	adds	r3, r0, #1
  40fabc:	e004      	b.n	40fac8 <memchr+0x20>
  40fabe:	b1fc      	cbz	r4, 40fb00 <memchr+0x58>
  40fac0:	7804      	ldrb	r4, [r0, #0]
  40fac2:	428c      	cmp	r4, r1
  40fac4:	d01d      	beq.n	40fb02 <memchr+0x5a>
  40fac6:	4614      	mov	r4, r2
  40fac8:	f013 0f03 	tst.w	r3, #3
  40facc:	4618      	mov	r0, r3
  40face:	f104 32ff 	add.w	r2, r4, #4294967295
  40fad2:	f103 0301 	add.w	r3, r3, #1
  40fad6:	d1f2      	bne.n	40fabe <memchr+0x16>
  40fad8:	2c03      	cmp	r4, #3
  40fada:	d814      	bhi.n	40fb06 <memchr+0x5e>
  40fadc:	1e65      	subs	r5, r4, #1
  40fade:	b34c      	cbz	r4, 40fb34 <memchr+0x8c>
  40fae0:	7803      	ldrb	r3, [r0, #0]
  40fae2:	428b      	cmp	r3, r1
  40fae4:	d00d      	beq.n	40fb02 <memchr+0x5a>
  40fae6:	1c42      	adds	r2, r0, #1
  40fae8:	2300      	movs	r3, #0
  40faea:	e002      	b.n	40faf2 <memchr+0x4a>
  40faec:	7804      	ldrb	r4, [r0, #0]
  40faee:	428c      	cmp	r4, r1
  40faf0:	d007      	beq.n	40fb02 <memchr+0x5a>
  40faf2:	42ab      	cmp	r3, r5
  40faf4:	4610      	mov	r0, r2
  40faf6:	f103 0301 	add.w	r3, r3, #1
  40fafa:	f102 0201 	add.w	r2, r2, #1
  40fafe:	d1f5      	bne.n	40faec <memchr+0x44>
  40fb00:	2000      	movs	r0, #0
  40fb02:	bc70      	pop	{r4, r5, r6}
  40fb04:	4770      	bx	lr
  40fb06:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40fb0a:	4603      	mov	r3, r0
  40fb0c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40fb10:	4618      	mov	r0, r3
  40fb12:	3304      	adds	r3, #4
  40fb14:	6802      	ldr	r2, [r0, #0]
  40fb16:	4072      	eors	r2, r6
  40fb18:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  40fb1c:	ea25 0202 	bic.w	r2, r5, r2
  40fb20:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40fb24:	d1da      	bne.n	40fadc <memchr+0x34>
  40fb26:	3c04      	subs	r4, #4
  40fb28:	2c03      	cmp	r4, #3
  40fb2a:	4618      	mov	r0, r3
  40fb2c:	d8f0      	bhi.n	40fb10 <memchr+0x68>
  40fb2e:	e7d5      	b.n	40fadc <memchr+0x34>
  40fb30:	4614      	mov	r4, r2
  40fb32:	e7d1      	b.n	40fad8 <memchr+0x30>
  40fb34:	4620      	mov	r0, r4
  40fb36:	e7e4      	b.n	40fb02 <memchr+0x5a>

0040fb38 <memmove>:
  40fb38:	4288      	cmp	r0, r1
  40fb3a:	b4f0      	push	{r4, r5, r6, r7}
  40fb3c:	d910      	bls.n	40fb60 <memmove+0x28>
  40fb3e:	188c      	adds	r4, r1, r2
  40fb40:	42a0      	cmp	r0, r4
  40fb42:	d20d      	bcs.n	40fb60 <memmove+0x28>
  40fb44:	1885      	adds	r5, r0, r2
  40fb46:	1e53      	subs	r3, r2, #1
  40fb48:	b142      	cbz	r2, 40fb5c <memmove+0x24>
  40fb4a:	4621      	mov	r1, r4
  40fb4c:	462a      	mov	r2, r5
  40fb4e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  40fb52:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40fb56:	3b01      	subs	r3, #1
  40fb58:	1c5c      	adds	r4, r3, #1
  40fb5a:	d1f8      	bne.n	40fb4e <memmove+0x16>
  40fb5c:	bcf0      	pop	{r4, r5, r6, r7}
  40fb5e:	4770      	bx	lr
  40fb60:	2a0f      	cmp	r2, #15
  40fb62:	d93f      	bls.n	40fbe4 <memmove+0xac>
  40fb64:	ea40 0301 	orr.w	r3, r0, r1
  40fb68:	079b      	lsls	r3, r3, #30
  40fb6a:	d13f      	bne.n	40fbec <memmove+0xb4>
  40fb6c:	f1a2 0710 	sub.w	r7, r2, #16
  40fb70:	093f      	lsrs	r7, r7, #4
  40fb72:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  40fb76:	3610      	adds	r6, #16
  40fb78:	460c      	mov	r4, r1
  40fb7a:	4603      	mov	r3, r0
  40fb7c:	6825      	ldr	r5, [r4, #0]
  40fb7e:	601d      	str	r5, [r3, #0]
  40fb80:	6865      	ldr	r5, [r4, #4]
  40fb82:	605d      	str	r5, [r3, #4]
  40fb84:	68a5      	ldr	r5, [r4, #8]
  40fb86:	609d      	str	r5, [r3, #8]
  40fb88:	68e5      	ldr	r5, [r4, #12]
  40fb8a:	60dd      	str	r5, [r3, #12]
  40fb8c:	3310      	adds	r3, #16
  40fb8e:	42b3      	cmp	r3, r6
  40fb90:	f104 0410 	add.w	r4, r4, #16
  40fb94:	d1f2      	bne.n	40fb7c <memmove+0x44>
  40fb96:	1c7b      	adds	r3, r7, #1
  40fb98:	f002 0c0f 	and.w	ip, r2, #15
  40fb9c:	011b      	lsls	r3, r3, #4
  40fb9e:	f1bc 0f03 	cmp.w	ip, #3
  40fba2:	4419      	add	r1, r3
  40fba4:	4403      	add	r3, r0
  40fba6:	d923      	bls.n	40fbf0 <memmove+0xb8>
  40fba8:	460e      	mov	r6, r1
  40fbaa:	461d      	mov	r5, r3
  40fbac:	4664      	mov	r4, ip
  40fbae:	3c04      	subs	r4, #4
  40fbb0:	f856 7b04 	ldr.w	r7, [r6], #4
  40fbb4:	f845 7b04 	str.w	r7, [r5], #4
  40fbb8:	2c03      	cmp	r4, #3
  40fbba:	d8f8      	bhi.n	40fbae <memmove+0x76>
  40fbbc:	f1ac 0404 	sub.w	r4, ip, #4
  40fbc0:	f024 0403 	bic.w	r4, r4, #3
  40fbc4:	3404      	adds	r4, #4
  40fbc6:	f002 0203 	and.w	r2, r2, #3
  40fbca:	4423      	add	r3, r4
  40fbcc:	4421      	add	r1, r4
  40fbce:	2a00      	cmp	r2, #0
  40fbd0:	d0c4      	beq.n	40fb5c <memmove+0x24>
  40fbd2:	441a      	add	r2, r3
  40fbd4:	f811 4b01 	ldrb.w	r4, [r1], #1
  40fbd8:	f803 4b01 	strb.w	r4, [r3], #1
  40fbdc:	4293      	cmp	r3, r2
  40fbde:	d1f9      	bne.n	40fbd4 <memmove+0x9c>
  40fbe0:	bcf0      	pop	{r4, r5, r6, r7}
  40fbe2:	4770      	bx	lr
  40fbe4:	4603      	mov	r3, r0
  40fbe6:	2a00      	cmp	r2, #0
  40fbe8:	d1f3      	bne.n	40fbd2 <memmove+0x9a>
  40fbea:	e7b7      	b.n	40fb5c <memmove+0x24>
  40fbec:	4603      	mov	r3, r0
  40fbee:	e7f0      	b.n	40fbd2 <memmove+0x9a>
  40fbf0:	4662      	mov	r2, ip
  40fbf2:	2a00      	cmp	r2, #0
  40fbf4:	d1ed      	bne.n	40fbd2 <memmove+0x9a>
  40fbf6:	e7b1      	b.n	40fb5c <memmove+0x24>

0040fbf8 <__malloc_lock>:
  40fbf8:	4770      	bx	lr
  40fbfa:	bf00      	nop

0040fbfc <__malloc_unlock>:
  40fbfc:	4770      	bx	lr
  40fbfe:	bf00      	nop

0040fc00 <_Balloc>:
  40fc00:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40fc02:	b570      	push	{r4, r5, r6, lr}
  40fc04:	4605      	mov	r5, r0
  40fc06:	460c      	mov	r4, r1
  40fc08:	b14a      	cbz	r2, 40fc1e <_Balloc+0x1e>
  40fc0a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  40fc0e:	b180      	cbz	r0, 40fc32 <_Balloc+0x32>
  40fc10:	6801      	ldr	r1, [r0, #0]
  40fc12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  40fc16:	2200      	movs	r2, #0
  40fc18:	6102      	str	r2, [r0, #16]
  40fc1a:	60c2      	str	r2, [r0, #12]
  40fc1c:	bd70      	pop	{r4, r5, r6, pc}
  40fc1e:	2221      	movs	r2, #33	; 0x21
  40fc20:	2104      	movs	r1, #4
  40fc22:	f002 fb51 	bl	4122c8 <_calloc_r>
  40fc26:	64e8      	str	r0, [r5, #76]	; 0x4c
  40fc28:	4602      	mov	r2, r0
  40fc2a:	2800      	cmp	r0, #0
  40fc2c:	d1ed      	bne.n	40fc0a <_Balloc+0xa>
  40fc2e:	2000      	movs	r0, #0
  40fc30:	bd70      	pop	{r4, r5, r6, pc}
  40fc32:	2101      	movs	r1, #1
  40fc34:	fa01 f604 	lsl.w	r6, r1, r4
  40fc38:	1d72      	adds	r2, r6, #5
  40fc3a:	4628      	mov	r0, r5
  40fc3c:	0092      	lsls	r2, r2, #2
  40fc3e:	f002 fb43 	bl	4122c8 <_calloc_r>
  40fc42:	2800      	cmp	r0, #0
  40fc44:	d0f3      	beq.n	40fc2e <_Balloc+0x2e>
  40fc46:	6044      	str	r4, [r0, #4]
  40fc48:	6086      	str	r6, [r0, #8]
  40fc4a:	e7e4      	b.n	40fc16 <_Balloc+0x16>

0040fc4c <_Bfree>:
  40fc4c:	b131      	cbz	r1, 40fc5c <_Bfree+0x10>
  40fc4e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40fc50:	684a      	ldr	r2, [r1, #4]
  40fc52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40fc56:	6008      	str	r0, [r1, #0]
  40fc58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40fc5c:	4770      	bx	lr
  40fc5e:	bf00      	nop

0040fc60 <__multadd>:
  40fc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40fc64:	f8d1 8010 	ldr.w	r8, [r1, #16]
  40fc68:	b082      	sub	sp, #8
  40fc6a:	4689      	mov	r9, r1
  40fc6c:	4682      	mov	sl, r0
  40fc6e:	f101 0514 	add.w	r5, r1, #20
  40fc72:	2400      	movs	r4, #0
  40fc74:	682f      	ldr	r7, [r5, #0]
  40fc76:	b2be      	uxth	r6, r7
  40fc78:	0c3f      	lsrs	r7, r7, #16
  40fc7a:	fb02 3606 	mla	r6, r2, r6, r3
  40fc7e:	fb02 f307 	mul.w	r3, r2, r7
  40fc82:	eb03 4316 	add.w	r3, r3, r6, lsr #16
  40fc86:	3401      	adds	r4, #1
  40fc88:	b2b6      	uxth	r6, r6
  40fc8a:	eb06 4603 	add.w	r6, r6, r3, lsl #16
  40fc8e:	45a0      	cmp	r8, r4
  40fc90:	f845 6b04 	str.w	r6, [r5], #4
  40fc94:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40fc98:	dcec      	bgt.n	40fc74 <__multadd+0x14>
  40fc9a:	b153      	cbz	r3, 40fcb2 <__multadd+0x52>
  40fc9c:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40fca0:	4590      	cmp	r8, r2
  40fca2:	da0a      	bge.n	40fcba <__multadd+0x5a>
  40fca4:	eb09 0188 	add.w	r1, r9, r8, lsl #2
  40fca8:	f108 0201 	add.w	r2, r8, #1
  40fcac:	614b      	str	r3, [r1, #20]
  40fcae:	f8c9 2010 	str.w	r2, [r9, #16]
  40fcb2:	4648      	mov	r0, r9
  40fcb4:	b002      	add	sp, #8
  40fcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40fcba:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40fcbe:	9301      	str	r3, [sp, #4]
  40fcc0:	3101      	adds	r1, #1
  40fcc2:	4650      	mov	r0, sl
  40fcc4:	f7ff ff9c 	bl	40fc00 <_Balloc>
  40fcc8:	f8d9 2010 	ldr.w	r2, [r9, #16]
  40fccc:	3202      	adds	r2, #2
  40fcce:	f109 010c 	add.w	r1, r9, #12
  40fcd2:	4604      	mov	r4, r0
  40fcd4:	0092      	lsls	r2, r2, #2
  40fcd6:	300c      	adds	r0, #12
  40fcd8:	f7fa fb70 	bl	40a3bc <memcpy>
  40fcdc:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
  40fce0:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40fce4:	9b01      	ldr	r3, [sp, #4]
  40fce6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40fcea:	f8c9 0000 	str.w	r0, [r9]
  40fcee:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
  40fcf2:	46a1      	mov	r9, r4
  40fcf4:	e7d6      	b.n	40fca4 <__multadd+0x44>
  40fcf6:	bf00      	nop

0040fcf8 <__s2b>:
  40fcf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40fcfc:	4699      	mov	r9, r3
  40fcfe:	4b23      	ldr	r3, [pc, #140]	; (40fd8c <__s2b+0x94>)
  40fd00:	9e08      	ldr	r6, [sp, #32]
  40fd02:	f109 0408 	add.w	r4, r9, #8
  40fd06:	fb83 5304 	smull	r5, r3, r3, r4
  40fd0a:	17e4      	asrs	r4, r4, #31
  40fd0c:	ebc4 0363 	rsb	r3, r4, r3, asr #1
  40fd10:	2b01      	cmp	r3, #1
  40fd12:	4607      	mov	r7, r0
  40fd14:	460c      	mov	r4, r1
  40fd16:	4690      	mov	r8, r2
  40fd18:	dd35      	ble.n	40fd86 <__s2b+0x8e>
  40fd1a:	2501      	movs	r5, #1
  40fd1c:	2100      	movs	r1, #0
  40fd1e:	006d      	lsls	r5, r5, #1
  40fd20:	42ab      	cmp	r3, r5
  40fd22:	f101 0101 	add.w	r1, r1, #1
  40fd26:	dcfa      	bgt.n	40fd1e <__s2b+0x26>
  40fd28:	4638      	mov	r0, r7
  40fd2a:	f7ff ff69 	bl	40fc00 <_Balloc>
  40fd2e:	2301      	movs	r3, #1
  40fd30:	f1b8 0f09 	cmp.w	r8, #9
  40fd34:	6146      	str	r6, [r0, #20]
  40fd36:	6103      	str	r3, [r0, #16]
  40fd38:	dd21      	ble.n	40fd7e <__s2b+0x86>
  40fd3a:	f104 0609 	add.w	r6, r4, #9
  40fd3e:	4635      	mov	r5, r6
  40fd40:	4444      	add	r4, r8
  40fd42:	f815 3b01 	ldrb.w	r3, [r5], #1
  40fd46:	4601      	mov	r1, r0
  40fd48:	3b30      	subs	r3, #48	; 0x30
  40fd4a:	4638      	mov	r0, r7
  40fd4c:	220a      	movs	r2, #10
  40fd4e:	f7ff ff87 	bl	40fc60 <__multadd>
  40fd52:	42a5      	cmp	r5, r4
  40fd54:	d1f5      	bne.n	40fd42 <__s2b+0x4a>
  40fd56:	eb06 0408 	add.w	r4, r6, r8
  40fd5a:	3c08      	subs	r4, #8
  40fd5c:	45c1      	cmp	r9, r8
  40fd5e:	dd0c      	ble.n	40fd7a <__s2b+0x82>
  40fd60:	ebc8 0809 	rsb	r8, r8, r9
  40fd64:	44a0      	add	r8, r4
  40fd66:	f814 3b01 	ldrb.w	r3, [r4], #1
  40fd6a:	4601      	mov	r1, r0
  40fd6c:	3b30      	subs	r3, #48	; 0x30
  40fd6e:	4638      	mov	r0, r7
  40fd70:	220a      	movs	r2, #10
  40fd72:	f7ff ff75 	bl	40fc60 <__multadd>
  40fd76:	4544      	cmp	r4, r8
  40fd78:	d1f5      	bne.n	40fd66 <__s2b+0x6e>
  40fd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40fd7e:	340a      	adds	r4, #10
  40fd80:	f04f 0809 	mov.w	r8, #9
  40fd84:	e7ea      	b.n	40fd5c <__s2b+0x64>
  40fd86:	2100      	movs	r1, #0
  40fd88:	e7ce      	b.n	40fd28 <__s2b+0x30>
  40fd8a:	bf00      	nop
  40fd8c:	38e38e39 	.word	0x38e38e39

0040fd90 <__hi0bits>:
  40fd90:	0c03      	lsrs	r3, r0, #16
  40fd92:	041b      	lsls	r3, r3, #16
  40fd94:	b9b3      	cbnz	r3, 40fdc4 <__hi0bits+0x34>
  40fd96:	0400      	lsls	r0, r0, #16
  40fd98:	2310      	movs	r3, #16
  40fd9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40fd9e:	bf04      	itt	eq
  40fda0:	0200      	lsleq	r0, r0, #8
  40fda2:	3308      	addeq	r3, #8
  40fda4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40fda8:	bf04      	itt	eq
  40fdaa:	0100      	lsleq	r0, r0, #4
  40fdac:	3304      	addeq	r3, #4
  40fdae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40fdb2:	bf04      	itt	eq
  40fdb4:	0080      	lsleq	r0, r0, #2
  40fdb6:	3302      	addeq	r3, #2
  40fdb8:	2800      	cmp	r0, #0
  40fdba:	db07      	blt.n	40fdcc <__hi0bits+0x3c>
  40fdbc:	0042      	lsls	r2, r0, #1
  40fdbe:	d403      	bmi.n	40fdc8 <__hi0bits+0x38>
  40fdc0:	2020      	movs	r0, #32
  40fdc2:	4770      	bx	lr
  40fdc4:	2300      	movs	r3, #0
  40fdc6:	e7e8      	b.n	40fd9a <__hi0bits+0xa>
  40fdc8:	1c58      	adds	r0, r3, #1
  40fdca:	4770      	bx	lr
  40fdcc:	4618      	mov	r0, r3
  40fdce:	4770      	bx	lr

0040fdd0 <__lo0bits>:
  40fdd0:	6803      	ldr	r3, [r0, #0]
  40fdd2:	f013 0207 	ands.w	r2, r3, #7
  40fdd6:	d007      	beq.n	40fde8 <__lo0bits+0x18>
  40fdd8:	07d9      	lsls	r1, r3, #31
  40fdda:	d420      	bmi.n	40fe1e <__lo0bits+0x4e>
  40fddc:	079a      	lsls	r2, r3, #30
  40fdde:	d420      	bmi.n	40fe22 <__lo0bits+0x52>
  40fde0:	089b      	lsrs	r3, r3, #2
  40fde2:	6003      	str	r3, [r0, #0]
  40fde4:	2002      	movs	r0, #2
  40fde6:	4770      	bx	lr
  40fde8:	b299      	uxth	r1, r3
  40fdea:	b909      	cbnz	r1, 40fdf0 <__lo0bits+0x20>
  40fdec:	0c1b      	lsrs	r3, r3, #16
  40fdee:	2210      	movs	r2, #16
  40fdf0:	f013 0fff 	tst.w	r3, #255	; 0xff
  40fdf4:	bf04      	itt	eq
  40fdf6:	0a1b      	lsreq	r3, r3, #8
  40fdf8:	3208      	addeq	r2, #8
  40fdfa:	0719      	lsls	r1, r3, #28
  40fdfc:	bf04      	itt	eq
  40fdfe:	091b      	lsreq	r3, r3, #4
  40fe00:	3204      	addeq	r2, #4
  40fe02:	0799      	lsls	r1, r3, #30
  40fe04:	bf04      	itt	eq
  40fe06:	089b      	lsreq	r3, r3, #2
  40fe08:	3202      	addeq	r2, #2
  40fe0a:	07d9      	lsls	r1, r3, #31
  40fe0c:	d404      	bmi.n	40fe18 <__lo0bits+0x48>
  40fe0e:	085b      	lsrs	r3, r3, #1
  40fe10:	d101      	bne.n	40fe16 <__lo0bits+0x46>
  40fe12:	2020      	movs	r0, #32
  40fe14:	4770      	bx	lr
  40fe16:	3201      	adds	r2, #1
  40fe18:	6003      	str	r3, [r0, #0]
  40fe1a:	4610      	mov	r0, r2
  40fe1c:	4770      	bx	lr
  40fe1e:	2000      	movs	r0, #0
  40fe20:	4770      	bx	lr
  40fe22:	085b      	lsrs	r3, r3, #1
  40fe24:	6003      	str	r3, [r0, #0]
  40fe26:	2001      	movs	r0, #1
  40fe28:	4770      	bx	lr
  40fe2a:	bf00      	nop

0040fe2c <__i2b>:
  40fe2c:	b510      	push	{r4, lr}
  40fe2e:	460c      	mov	r4, r1
  40fe30:	2101      	movs	r1, #1
  40fe32:	f7ff fee5 	bl	40fc00 <_Balloc>
  40fe36:	2201      	movs	r2, #1
  40fe38:	6144      	str	r4, [r0, #20]
  40fe3a:	6102      	str	r2, [r0, #16]
  40fe3c:	bd10      	pop	{r4, pc}
  40fe3e:	bf00      	nop

0040fe40 <__multiply>:
  40fe40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fe44:	690d      	ldr	r5, [r1, #16]
  40fe46:	f8d2 9010 	ldr.w	r9, [r2, #16]
  40fe4a:	454d      	cmp	r5, r9
  40fe4c:	b085      	sub	sp, #20
  40fe4e:	460c      	mov	r4, r1
  40fe50:	4692      	mov	sl, r2
  40fe52:	da04      	bge.n	40fe5e <__multiply+0x1e>
  40fe54:	462a      	mov	r2, r5
  40fe56:	4654      	mov	r4, sl
  40fe58:	464d      	mov	r5, r9
  40fe5a:	468a      	mov	sl, r1
  40fe5c:	4691      	mov	r9, r2
  40fe5e:	68a3      	ldr	r3, [r4, #8]
  40fe60:	6861      	ldr	r1, [r4, #4]
  40fe62:	eb05 0709 	add.w	r7, r5, r9
  40fe66:	429f      	cmp	r7, r3
  40fe68:	bfc8      	it	gt
  40fe6a:	3101      	addgt	r1, #1
  40fe6c:	f7ff fec8 	bl	40fc00 <_Balloc>
  40fe70:	f100 0614 	add.w	r6, r0, #20
  40fe74:	eb06 0887 	add.w	r8, r6, r7, lsl #2
  40fe78:	4546      	cmp	r6, r8
  40fe7a:	9001      	str	r0, [sp, #4]
  40fe7c:	d205      	bcs.n	40fe8a <__multiply+0x4a>
  40fe7e:	4633      	mov	r3, r6
  40fe80:	2000      	movs	r0, #0
  40fe82:	f843 0b04 	str.w	r0, [r3], #4
  40fe86:	4598      	cmp	r8, r3
  40fe88:	d8fb      	bhi.n	40fe82 <__multiply+0x42>
  40fe8a:	f10a 0c14 	add.w	ip, sl, #20
  40fe8e:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
  40fe92:	3414      	adds	r4, #20
  40fe94:	45cc      	cmp	ip, r9
  40fe96:	9400      	str	r4, [sp, #0]
  40fe98:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  40fe9c:	d25b      	bcs.n	40ff56 <__multiply+0x116>
  40fe9e:	f8cd 8008 	str.w	r8, [sp, #8]
  40fea2:	9703      	str	r7, [sp, #12]
  40fea4:	46c8      	mov	r8, r9
  40fea6:	f85c 3b04 	ldr.w	r3, [ip], #4
  40feaa:	b29c      	uxth	r4, r3
  40feac:	b324      	cbz	r4, 40fef8 <__multiply+0xb8>
  40feae:	9a00      	ldr	r2, [sp, #0]
  40feb0:	4633      	mov	r3, r6
  40feb2:	f04f 0900 	mov.w	r9, #0
  40feb6:	e000      	b.n	40feba <__multiply+0x7a>
  40feb8:	460b      	mov	r3, r1
  40feba:	f852 7b04 	ldr.w	r7, [r2], #4
  40febe:	6819      	ldr	r1, [r3, #0]
  40fec0:	fa1f fb87 	uxth.w	fp, r7
  40fec4:	fa1f fa81 	uxth.w	sl, r1
  40fec8:	0c38      	lsrs	r0, r7, #16
  40feca:	0c09      	lsrs	r1, r1, #16
  40fecc:	fb04 a70b 	mla	r7, r4, fp, sl
  40fed0:	44b9      	add	r9, r7
  40fed2:	fb04 1000 	mla	r0, r4, r0, r1
  40fed6:	eb00 4019 	add.w	r0, r0, r9, lsr #16
  40feda:	4619      	mov	r1, r3
  40fedc:	fa1f f989 	uxth.w	r9, r9
  40fee0:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
  40fee4:	4295      	cmp	r5, r2
  40fee6:	ea4f 4910 	mov.w	r9, r0, lsr #16
  40feea:	f841 7b04 	str.w	r7, [r1], #4
  40feee:	d8e3      	bhi.n	40feb8 <__multiply+0x78>
  40fef0:	f8c3 9004 	str.w	r9, [r3, #4]
  40fef4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
  40fef8:	ea5f 4913 	movs.w	r9, r3, lsr #16
  40fefc:	d024      	beq.n	40ff48 <__multiply+0x108>
  40fefe:	f8d6 a000 	ldr.w	sl, [r6]
  40ff02:	9b00      	ldr	r3, [sp, #0]
  40ff04:	4650      	mov	r0, sl
  40ff06:	4631      	mov	r1, r6
  40ff08:	f04f 0b00 	mov.w	fp, #0
  40ff0c:	e000      	b.n	40ff10 <__multiply+0xd0>
  40ff0e:	4611      	mov	r1, r2
  40ff10:	881a      	ldrh	r2, [r3, #0]
  40ff12:	0c00      	lsrs	r0, r0, #16
  40ff14:	fb09 0002 	mla	r0, r9, r2, r0
  40ff18:	4483      	add	fp, r0
  40ff1a:	fa1f fa8a 	uxth.w	sl, sl
  40ff1e:	460a      	mov	r2, r1
  40ff20:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
  40ff24:	f842 0b04 	str.w	r0, [r2], #4
  40ff28:	f853 7b04 	ldr.w	r7, [r3], #4
  40ff2c:	6848      	ldr	r0, [r1, #4]
  40ff2e:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40ff32:	b284      	uxth	r4, r0
  40ff34:	fb09 4a0a 	mla	sl, r9, sl, r4
  40ff38:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
  40ff3c:	429d      	cmp	r5, r3
  40ff3e:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
  40ff42:	d8e4      	bhi.n	40ff0e <__multiply+0xce>
  40ff44:	f8c1 a004 	str.w	sl, [r1, #4]
  40ff48:	45e0      	cmp	r8, ip
  40ff4a:	f106 0604 	add.w	r6, r6, #4
  40ff4e:	d8aa      	bhi.n	40fea6 <__multiply+0x66>
  40ff50:	f8dd 8008 	ldr.w	r8, [sp, #8]
  40ff54:	9f03      	ldr	r7, [sp, #12]
  40ff56:	2f00      	cmp	r7, #0
  40ff58:	dd0a      	ble.n	40ff70 <__multiply+0x130>
  40ff5a:	f858 3c04 	ldr.w	r3, [r8, #-4]
  40ff5e:	f1a8 0804 	sub.w	r8, r8, #4
  40ff62:	b11b      	cbz	r3, 40ff6c <__multiply+0x12c>
  40ff64:	e004      	b.n	40ff70 <__multiply+0x130>
  40ff66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  40ff6a:	b90b      	cbnz	r3, 40ff70 <__multiply+0x130>
  40ff6c:	3f01      	subs	r7, #1
  40ff6e:	d1fa      	bne.n	40ff66 <__multiply+0x126>
  40ff70:	9b01      	ldr	r3, [sp, #4]
  40ff72:	4618      	mov	r0, r3
  40ff74:	611f      	str	r7, [r3, #16]
  40ff76:	b005      	add	sp, #20
  40ff78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040ff7c <__pow5mult>:
  40ff7c:	f012 0303 	ands.w	r3, r2, #3
  40ff80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ff84:	4614      	mov	r4, r2
  40ff86:	4607      	mov	r7, r0
  40ff88:	460e      	mov	r6, r1
  40ff8a:	d12c      	bne.n	40ffe6 <__pow5mult+0x6a>
  40ff8c:	10a4      	asrs	r4, r4, #2
  40ff8e:	d01c      	beq.n	40ffca <__pow5mult+0x4e>
  40ff90:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40ff92:	2d00      	cmp	r5, #0
  40ff94:	d030      	beq.n	40fff8 <__pow5mult+0x7c>
  40ff96:	f04f 0800 	mov.w	r8, #0
  40ff9a:	e004      	b.n	40ffa6 <__pow5mult+0x2a>
  40ff9c:	1064      	asrs	r4, r4, #1
  40ff9e:	d014      	beq.n	40ffca <__pow5mult+0x4e>
  40ffa0:	6828      	ldr	r0, [r5, #0]
  40ffa2:	b1a8      	cbz	r0, 40ffd0 <__pow5mult+0x54>
  40ffa4:	4605      	mov	r5, r0
  40ffa6:	07e3      	lsls	r3, r4, #31
  40ffa8:	d5f8      	bpl.n	40ff9c <__pow5mult+0x20>
  40ffaa:	4638      	mov	r0, r7
  40ffac:	4631      	mov	r1, r6
  40ffae:	462a      	mov	r2, r5
  40ffb0:	f7ff ff46 	bl	40fe40 <__multiply>
  40ffb4:	b1ae      	cbz	r6, 40ffe2 <__pow5mult+0x66>
  40ffb6:	6872      	ldr	r2, [r6, #4]
  40ffb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40ffba:	1064      	asrs	r4, r4, #1
  40ffbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40ffc0:	6031      	str	r1, [r6, #0]
  40ffc2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40ffc6:	4606      	mov	r6, r0
  40ffc8:	d1ea      	bne.n	40ffa0 <__pow5mult+0x24>
  40ffca:	4630      	mov	r0, r6
  40ffcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ffd0:	4638      	mov	r0, r7
  40ffd2:	4629      	mov	r1, r5
  40ffd4:	462a      	mov	r2, r5
  40ffd6:	f7ff ff33 	bl	40fe40 <__multiply>
  40ffda:	6028      	str	r0, [r5, #0]
  40ffdc:	f8c0 8000 	str.w	r8, [r0]
  40ffe0:	e7e0      	b.n	40ffa4 <__pow5mult+0x28>
  40ffe2:	4606      	mov	r6, r0
  40ffe4:	e7da      	b.n	40ff9c <__pow5mult+0x20>
  40ffe6:	1e5d      	subs	r5, r3, #1
  40ffe8:	4a0a      	ldr	r2, [pc, #40]	; (410014 <__pow5mult+0x98>)
  40ffea:	2300      	movs	r3, #0
  40ffec:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
  40fff0:	f7ff fe36 	bl	40fc60 <__multadd>
  40fff4:	4606      	mov	r6, r0
  40fff6:	e7c9      	b.n	40ff8c <__pow5mult+0x10>
  40fff8:	2101      	movs	r1, #1
  40fffa:	4638      	mov	r0, r7
  40fffc:	f7ff fe00 	bl	40fc00 <_Balloc>
  410000:	f240 2171 	movw	r1, #625	; 0x271
  410004:	2201      	movs	r2, #1
  410006:	2300      	movs	r3, #0
  410008:	6141      	str	r1, [r0, #20]
  41000a:	6102      	str	r2, [r0, #16]
  41000c:	4605      	mov	r5, r0
  41000e:	64b8      	str	r0, [r7, #72]	; 0x48
  410010:	6003      	str	r3, [r0, #0]
  410012:	e7c0      	b.n	40ff96 <__pow5mult+0x1a>
  410014:	00413948 	.word	0x00413948

00410018 <__lshift>:
  410018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41001c:	4693      	mov	fp, r2
  41001e:	690a      	ldr	r2, [r1, #16]
  410020:	688b      	ldr	r3, [r1, #8]
  410022:	ea4f 1a6b 	mov.w	sl, fp, asr #5
  410026:	eb0a 0902 	add.w	r9, sl, r2
  41002a:	f109 0601 	add.w	r6, r9, #1
  41002e:	429e      	cmp	r6, r3
  410030:	460f      	mov	r7, r1
  410032:	4680      	mov	r8, r0
  410034:	6849      	ldr	r1, [r1, #4]
  410036:	dd04      	ble.n	410042 <__lshift+0x2a>
  410038:	005b      	lsls	r3, r3, #1
  41003a:	429e      	cmp	r6, r3
  41003c:	f101 0101 	add.w	r1, r1, #1
  410040:	dcfa      	bgt.n	410038 <__lshift+0x20>
  410042:	4640      	mov	r0, r8
  410044:	f7ff fddc 	bl	40fc00 <_Balloc>
  410048:	f1ba 0f00 	cmp.w	sl, #0
  41004c:	f100 0414 	add.w	r4, r0, #20
  410050:	dd09      	ble.n	410066 <__lshift+0x4e>
  410052:	2300      	movs	r3, #0
  410054:	461a      	mov	r2, r3
  410056:	4625      	mov	r5, r4
  410058:	3301      	adds	r3, #1
  41005a:	4553      	cmp	r3, sl
  41005c:	f845 2b04 	str.w	r2, [r5], #4
  410060:	d1fa      	bne.n	410058 <__lshift+0x40>
  410062:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  410066:	693a      	ldr	r2, [r7, #16]
  410068:	f107 0314 	add.w	r3, r7, #20
  41006c:	f01b 0b1f 	ands.w	fp, fp, #31
  410070:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
  410074:	d021      	beq.n	4100ba <__lshift+0xa2>
  410076:	f1cb 0a20 	rsb	sl, fp, #32
  41007a:	2200      	movs	r2, #0
  41007c:	e000      	b.n	410080 <__lshift+0x68>
  41007e:	462c      	mov	r4, r5
  410080:	6819      	ldr	r1, [r3, #0]
  410082:	4625      	mov	r5, r4
  410084:	fa01 f10b 	lsl.w	r1, r1, fp
  410088:	430a      	orrs	r2, r1
  41008a:	f845 2b04 	str.w	r2, [r5], #4
  41008e:	f853 2b04 	ldr.w	r2, [r3], #4
  410092:	4563      	cmp	r3, ip
  410094:	fa22 f20a 	lsr.w	r2, r2, sl
  410098:	d3f1      	bcc.n	41007e <__lshift+0x66>
  41009a:	6062      	str	r2, [r4, #4]
  41009c:	b10a      	cbz	r2, 4100a2 <__lshift+0x8a>
  41009e:	f109 0602 	add.w	r6, r9, #2
  4100a2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  4100a6:	687a      	ldr	r2, [r7, #4]
  4100a8:	3e01      	subs	r6, #1
  4100aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4100ae:	6106      	str	r6, [r0, #16]
  4100b0:	6039      	str	r1, [r7, #0]
  4100b2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4100b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4100ba:	f853 2b04 	ldr.w	r2, [r3], #4
  4100be:	f844 2b04 	str.w	r2, [r4], #4
  4100c2:	459c      	cmp	ip, r3
  4100c4:	d9ed      	bls.n	4100a2 <__lshift+0x8a>
  4100c6:	f853 2b04 	ldr.w	r2, [r3], #4
  4100ca:	f844 2b04 	str.w	r2, [r4], #4
  4100ce:	459c      	cmp	ip, r3
  4100d0:	d8f3      	bhi.n	4100ba <__lshift+0xa2>
  4100d2:	e7e6      	b.n	4100a2 <__lshift+0x8a>

004100d4 <__mcmp>:
  4100d4:	6902      	ldr	r2, [r0, #16]
  4100d6:	690b      	ldr	r3, [r1, #16]
  4100d8:	1ad2      	subs	r2, r2, r3
  4100da:	b410      	push	{r4}
  4100dc:	d115      	bne.n	41010a <__mcmp+0x36>
  4100de:	009b      	lsls	r3, r3, #2
  4100e0:	3014      	adds	r0, #20
  4100e2:	3114      	adds	r1, #20
  4100e4:	4419      	add	r1, r3
  4100e6:	4403      	add	r3, r0
  4100e8:	e001      	b.n	4100ee <__mcmp+0x1a>
  4100ea:	4298      	cmp	r0, r3
  4100ec:	d211      	bcs.n	410112 <__mcmp+0x3e>
  4100ee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4100f2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4100f6:	42a2      	cmp	r2, r4
  4100f8:	d0f7      	beq.n	4100ea <__mcmp+0x16>
  4100fa:	4294      	cmp	r4, r2
  4100fc:	bf94      	ite	ls
  4100fe:	2001      	movls	r0, #1
  410100:	f04f 30ff 	movhi.w	r0, #4294967295
  410104:	f85d 4b04 	ldr.w	r4, [sp], #4
  410108:	4770      	bx	lr
  41010a:	4610      	mov	r0, r2
  41010c:	f85d 4b04 	ldr.w	r4, [sp], #4
  410110:	4770      	bx	lr
  410112:	2000      	movs	r0, #0
  410114:	f85d 4b04 	ldr.w	r4, [sp], #4
  410118:	4770      	bx	lr
  41011a:	bf00      	nop

0041011c <__mdiff>:
  41011c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  410120:	460d      	mov	r5, r1
  410122:	4604      	mov	r4, r0
  410124:	4611      	mov	r1, r2
  410126:	4628      	mov	r0, r5
  410128:	4616      	mov	r6, r2
  41012a:	f7ff ffd3 	bl	4100d4 <__mcmp>
  41012e:	1e07      	subs	r7, r0, #0
  410130:	d055      	beq.n	4101de <__mdiff+0xc2>
  410132:	db4e      	blt.n	4101d2 <__mdiff+0xb6>
  410134:	f04f 0800 	mov.w	r8, #0
  410138:	6869      	ldr	r1, [r5, #4]
  41013a:	4620      	mov	r0, r4
  41013c:	f7ff fd60 	bl	40fc00 <_Balloc>
  410140:	692f      	ldr	r7, [r5, #16]
  410142:	6932      	ldr	r2, [r6, #16]
  410144:	f8c0 800c 	str.w	r8, [r0, #12]
  410148:	3514      	adds	r5, #20
  41014a:	3614      	adds	r6, #20
  41014c:	f100 0314 	add.w	r3, r0, #20
  410150:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
  410154:	eb06 0882 	add.w	r8, r6, r2, lsl #2
  410158:	2100      	movs	r1, #0
  41015a:	f856 2b04 	ldr.w	r2, [r6], #4
  41015e:	f855 4b04 	ldr.w	r4, [r5], #4
  410162:	fa1f f982 	uxth.w	r9, r2
  410166:	fa11 fa84 	uxtah	sl, r1, r4
  41016a:	0c11      	lsrs	r1, r2, #16
  41016c:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
  410170:	ebc9 020a 	rsb	r2, r9, sl
  410174:	eb01 4122 	add.w	r1, r1, r2, asr #16
  410178:	b292      	uxth	r2, r2
  41017a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  41017e:	45b0      	cmp	r8, r6
  410180:	f843 2b04 	str.w	r2, [r3], #4
  410184:	ea4f 4121 	mov.w	r1, r1, asr #16
  410188:	462c      	mov	r4, r5
  41018a:	d8e6      	bhi.n	41015a <__mdiff+0x3e>
  41018c:	45ac      	cmp	ip, r5
  41018e:	4698      	mov	r8, r3
  410190:	d915      	bls.n	4101be <__mdiff+0xa2>
  410192:	f854 6b04 	ldr.w	r6, [r4], #4
  410196:	fa11 f186 	uxtah	r1, r1, r6
  41019a:	0c36      	lsrs	r6, r6, #16
  41019c:	eb06 4621 	add.w	r6, r6, r1, asr #16
  4101a0:	b289      	uxth	r1, r1
  4101a2:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
  4101a6:	45a4      	cmp	ip, r4
  4101a8:	f843 2b04 	str.w	r2, [r3], #4
  4101ac:	ea4f 4126 	mov.w	r1, r6, asr #16
  4101b0:	d8ef      	bhi.n	410192 <__mdiff+0x76>
  4101b2:	43eb      	mvns	r3, r5
  4101b4:	4463      	add	r3, ip
  4101b6:	f023 0303 	bic.w	r3, r3, #3
  4101ba:	3304      	adds	r3, #4
  4101bc:	4443      	add	r3, r8
  4101be:	3b04      	subs	r3, #4
  4101c0:	b922      	cbnz	r2, 4101cc <__mdiff+0xb0>
  4101c2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4101c6:	3f01      	subs	r7, #1
  4101c8:	2a00      	cmp	r2, #0
  4101ca:	d0fa      	beq.n	4101c2 <__mdiff+0xa6>
  4101cc:	6107      	str	r7, [r0, #16]
  4101ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4101d2:	462b      	mov	r3, r5
  4101d4:	f04f 0801 	mov.w	r8, #1
  4101d8:	4635      	mov	r5, r6
  4101da:	461e      	mov	r6, r3
  4101dc:	e7ac      	b.n	410138 <__mdiff+0x1c>
  4101de:	4620      	mov	r0, r4
  4101e0:	4639      	mov	r1, r7
  4101e2:	f7ff fd0d 	bl	40fc00 <_Balloc>
  4101e6:	2301      	movs	r3, #1
  4101e8:	6147      	str	r7, [r0, #20]
  4101ea:	6103      	str	r3, [r0, #16]
  4101ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004101f0 <__ulp>:
  4101f0:	4b0e      	ldr	r3, [pc, #56]	; (41022c <__ulp+0x3c>)
  4101f2:	400b      	ands	r3, r1
  4101f4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  4101f8:	2b00      	cmp	r3, #0
  4101fa:	dd02      	ble.n	410202 <__ulp+0x12>
  4101fc:	4619      	mov	r1, r3
  4101fe:	2000      	movs	r0, #0
  410200:	4770      	bx	lr
  410202:	425b      	negs	r3, r3
  410204:	151b      	asrs	r3, r3, #20
  410206:	2b13      	cmp	r3, #19
  410208:	dd0a      	ble.n	410220 <__ulp+0x30>
  41020a:	2b32      	cmp	r3, #50	; 0x32
  41020c:	bfdd      	ittte	le
  41020e:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  410212:	2201      	movle	r2, #1
  410214:	fa02 f303 	lslle.w	r3, r2, r3
  410218:	2301      	movgt	r3, #1
  41021a:	2100      	movs	r1, #0
  41021c:	4618      	mov	r0, r3
  41021e:	4770      	bx	lr
  410220:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  410224:	fa42 f103 	asr.w	r1, r2, r3
  410228:	2000      	movs	r0, #0
  41022a:	4770      	bx	lr
  41022c:	7ff00000 	.word	0x7ff00000

00410230 <__b2d>:
  410230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  410232:	6904      	ldr	r4, [r0, #16]
  410234:	f100 0614 	add.w	r6, r0, #20
  410238:	eb06 0484 	add.w	r4, r6, r4, lsl #2
  41023c:	460f      	mov	r7, r1
  41023e:	f854 5c04 	ldr.w	r5, [r4, #-4]
  410242:	4628      	mov	r0, r5
  410244:	f7ff fda4 	bl	40fd90 <__hi0bits>
  410248:	f1c0 0320 	rsb	r3, r0, #32
  41024c:	280a      	cmp	r0, #10
  41024e:	603b      	str	r3, [r7, #0]
  410250:	f1a4 0104 	sub.w	r1, r4, #4
  410254:	dc19      	bgt.n	41028a <__b2d+0x5a>
  410256:	428e      	cmp	r6, r1
  410258:	f1c0 070b 	rsb	r7, r0, #11
  41025c:	bf38      	it	cc
  41025e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
  410262:	fa25 fc07 	lsr.w	ip, r5, r7
  410266:	f100 0015 	add.w	r0, r0, #21
  41026a:	bf38      	it	cc
  41026c:	fa21 f707 	lsrcc.w	r7, r1, r7
  410270:	fa05 f500 	lsl.w	r5, r5, r0
  410274:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  410278:	bf28      	it	cs
  41027a:	2700      	movcs	r7, #0
  41027c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  410280:	ea47 0205 	orr.w	r2, r7, r5
  410284:	4610      	mov	r0, r2
  410286:	4619      	mov	r1, r3
  410288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41028a:	428e      	cmp	r6, r1
  41028c:	bf36      	itet	cc
  41028e:	f1a4 0108 	subcc.w	r1, r4, #8
  410292:	2400      	movcs	r4, #0
  410294:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
  410298:	f1b0 070b 	subs.w	r7, r0, #11
  41029c:	d019      	beq.n	4102d2 <__b2d+0xa2>
  41029e:	42b1      	cmp	r1, r6
  4102a0:	bf88      	it	hi
  4102a2:	f851 1c04 	ldrhi.w	r1, [r1, #-4]
  4102a6:	fa05 f507 	lsl.w	r5, r5, r7
  4102aa:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  4102ae:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
  4102b2:	fa24 fc00 	lsr.w	ip, r4, r0
  4102b6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  4102ba:	bf8c      	ite	hi
  4102bc:	fa21 f000 	lsrhi.w	r0, r1, r0
  4102c0:	2000      	movls	r0, #0
  4102c2:	40bc      	lsls	r4, r7
  4102c4:	ea45 030c 	orr.w	r3, r5, ip
  4102c8:	ea40 0204 	orr.w	r2, r0, r4
  4102cc:	4610      	mov	r0, r2
  4102ce:	4619      	mov	r1, r3
  4102d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4102d2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
  4102d6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  4102da:	4622      	mov	r2, r4
  4102dc:	4610      	mov	r0, r2
  4102de:	4619      	mov	r1, r3
  4102e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4102e2:	bf00      	nop

004102e4 <__d2b>:
  4102e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4102e8:	b083      	sub	sp, #12
  4102ea:	2101      	movs	r1, #1
  4102ec:	461d      	mov	r5, r3
  4102ee:	f3c3 560a 	ubfx	r6, r3, #20, #11
  4102f2:	4614      	mov	r4, r2
  4102f4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4102f6:	f7ff fc83 	bl	40fc00 <_Balloc>
  4102fa:	f3c5 0313 	ubfx	r3, r5, #0, #20
  4102fe:	4680      	mov	r8, r0
  410300:	b10e      	cbz	r6, 410306 <__d2b+0x22>
  410302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  410306:	9301      	str	r3, [sp, #4]
  410308:	b324      	cbz	r4, 410354 <__d2b+0x70>
  41030a:	a802      	add	r0, sp, #8
  41030c:	f840 4d08 	str.w	r4, [r0, #-8]!
  410310:	4668      	mov	r0, sp
  410312:	f7ff fd5d 	bl	40fdd0 <__lo0bits>
  410316:	2800      	cmp	r0, #0
  410318:	d135      	bne.n	410386 <__d2b+0xa2>
  41031a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  41031e:	f8c8 2014 	str.w	r2, [r8, #20]
  410322:	2b00      	cmp	r3, #0
  410324:	bf0c      	ite	eq
  410326:	2401      	moveq	r4, #1
  410328:	2402      	movne	r4, #2
  41032a:	f8c8 3018 	str.w	r3, [r8, #24]
  41032e:	f8c8 4010 	str.w	r4, [r8, #16]
  410332:	b9de      	cbnz	r6, 41036c <__d2b+0x88>
  410334:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  410338:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  41033c:	6038      	str	r0, [r7, #0]
  41033e:	6918      	ldr	r0, [r3, #16]
  410340:	f7ff fd26 	bl	40fd90 <__hi0bits>
  410344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  410346:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  41034a:	6018      	str	r0, [r3, #0]
  41034c:	4640      	mov	r0, r8
  41034e:	b003      	add	sp, #12
  410350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  410354:	a801      	add	r0, sp, #4
  410356:	f7ff fd3b 	bl	40fdd0 <__lo0bits>
  41035a:	2401      	movs	r4, #1
  41035c:	9b01      	ldr	r3, [sp, #4]
  41035e:	f8c8 3014 	str.w	r3, [r8, #20]
  410362:	3020      	adds	r0, #32
  410364:	f8c8 4010 	str.w	r4, [r8, #16]
  410368:	2e00      	cmp	r6, #0
  41036a:	d0e3      	beq.n	410334 <__d2b+0x50>
  41036c:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
  410370:	eb09 0300 	add.w	r3, r9, r0
  410374:	603b      	str	r3, [r7, #0]
  410376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  410378:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  41037c:	6018      	str	r0, [r3, #0]
  41037e:	4640      	mov	r0, r8
  410380:	b003      	add	sp, #12
  410382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  410386:	e89d 000c 	ldmia.w	sp, {r2, r3}
  41038a:	f1c0 0120 	rsb	r1, r0, #32
  41038e:	fa03 f101 	lsl.w	r1, r3, r1
  410392:	430a      	orrs	r2, r1
  410394:	40c3      	lsrs	r3, r0
  410396:	9301      	str	r3, [sp, #4]
  410398:	f8c8 2014 	str.w	r2, [r8, #20]
  41039c:	e7c1      	b.n	410322 <__d2b+0x3e>
  41039e:	bf00      	nop

004103a0 <__ratio>:
  4103a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4103a2:	b083      	sub	sp, #12
  4103a4:	460e      	mov	r6, r1
  4103a6:	4669      	mov	r1, sp
  4103a8:	4607      	mov	r7, r0
  4103aa:	f7ff ff41 	bl	410230 <__b2d>
  4103ae:	4604      	mov	r4, r0
  4103b0:	460d      	mov	r5, r1
  4103b2:	4630      	mov	r0, r6
  4103b4:	a901      	add	r1, sp, #4
  4103b6:	f7ff ff3b 	bl	410230 <__b2d>
  4103ba:	4602      	mov	r2, r0
  4103bc:	460b      	mov	r3, r1
  4103be:	e89d 0003 	ldmia.w	sp, {r0, r1}
  4103c2:	693f      	ldr	r7, [r7, #16]
  4103c4:	6936      	ldr	r6, [r6, #16]
  4103c6:	1a41      	subs	r1, r0, r1
  4103c8:	ebc6 0e07 	rsb	lr, r6, r7
  4103cc:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
  4103d0:	f1be 0f00 	cmp.w	lr, #0
  4103d4:	dd08      	ble.n	4103e8 <__ratio+0x48>
  4103d6:	eb05 510e 	add.w	r1, r5, lr, lsl #20
  4103da:	460d      	mov	r5, r1
  4103dc:	4620      	mov	r0, r4
  4103de:	4629      	mov	r1, r5
  4103e0:	f002 fea4 	bl	41312c <__aeabi_ddiv>
  4103e4:	b003      	add	sp, #12
  4103e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4103e8:	eba3 570e 	sub.w	r7, r3, lr, lsl #20
  4103ec:	463b      	mov	r3, r7
  4103ee:	e7f5      	b.n	4103dc <__ratio+0x3c>

004103f0 <__copybits>:
  4103f0:	b470      	push	{r4, r5, r6}
  4103f2:	6915      	ldr	r5, [r2, #16]
  4103f4:	f102 0314 	add.w	r3, r2, #20
  4103f8:	3901      	subs	r1, #1
  4103fa:	114e      	asrs	r6, r1, #5
  4103fc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
  410400:	3601      	adds	r6, #1
  410402:	42ab      	cmp	r3, r5
  410404:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  410408:	d20c      	bcs.n	410424 <__copybits+0x34>
  41040a:	4601      	mov	r1, r0
  41040c:	f853 4b04 	ldr.w	r4, [r3], #4
  410410:	f841 4b04 	str.w	r4, [r1], #4
  410414:	429d      	cmp	r5, r3
  410416:	d8f9      	bhi.n	41040c <__copybits+0x1c>
  410418:	1aab      	subs	r3, r5, r2
  41041a:	3b15      	subs	r3, #21
  41041c:	f023 0303 	bic.w	r3, r3, #3
  410420:	3304      	adds	r3, #4
  410422:	4418      	add	r0, r3
  410424:	4286      	cmp	r6, r0
  410426:	d904      	bls.n	410432 <__copybits+0x42>
  410428:	2300      	movs	r3, #0
  41042a:	f840 3b04 	str.w	r3, [r0], #4
  41042e:	4286      	cmp	r6, r0
  410430:	d8fb      	bhi.n	41042a <__copybits+0x3a>
  410432:	bc70      	pop	{r4, r5, r6}
  410434:	4770      	bx	lr
  410436:	bf00      	nop

00410438 <__any_on>:
  410438:	6903      	ldr	r3, [r0, #16]
  41043a:	114a      	asrs	r2, r1, #5
  41043c:	4293      	cmp	r3, r2
  41043e:	b410      	push	{r4}
  410440:	f100 0414 	add.w	r4, r0, #20
  410444:	da10      	bge.n	410468 <__any_on+0x30>
  410446:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  41044a:	429c      	cmp	r4, r3
  41044c:	d221      	bcs.n	410492 <__any_on+0x5a>
  41044e:	f853 0c04 	ldr.w	r0, [r3, #-4]
  410452:	3b04      	subs	r3, #4
  410454:	b118      	cbz	r0, 41045e <__any_on+0x26>
  410456:	e015      	b.n	410484 <__any_on+0x4c>
  410458:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  41045c:	b992      	cbnz	r2, 410484 <__any_on+0x4c>
  41045e:	429c      	cmp	r4, r3
  410460:	d3fa      	bcc.n	410458 <__any_on+0x20>
  410462:	f85d 4b04 	ldr.w	r4, [sp], #4
  410466:	4770      	bx	lr
  410468:	dd10      	ble.n	41048c <__any_on+0x54>
  41046a:	f011 011f 	ands.w	r1, r1, #31
  41046e:	d00d      	beq.n	41048c <__any_on+0x54>
  410470:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  410474:	fa20 f301 	lsr.w	r3, r0, r1
  410478:	fa03 f101 	lsl.w	r1, r3, r1
  41047c:	4281      	cmp	r1, r0
  41047e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  410482:	d0e2      	beq.n	41044a <__any_on+0x12>
  410484:	2001      	movs	r0, #1
  410486:	f85d 4b04 	ldr.w	r4, [sp], #4
  41048a:	4770      	bx	lr
  41048c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  410490:	e7db      	b.n	41044a <__any_on+0x12>
  410492:	2000      	movs	r0, #0
  410494:	e7e5      	b.n	410462 <__any_on+0x2a>
  410496:	bf00      	nop

00410498 <_read_r>:
  410498:	b570      	push	{r4, r5, r6, lr}
  41049a:	4c08      	ldr	r4, [pc, #32]	; (4104bc <_read_r+0x24>)
  41049c:	4606      	mov	r6, r0
  41049e:	2500      	movs	r5, #0
  4104a0:	4608      	mov	r0, r1
  4104a2:	4611      	mov	r1, r2
  4104a4:	461a      	mov	r2, r3
  4104a6:	6025      	str	r5, [r4, #0]
  4104a8:	f7f4 fc7a 	bl	404da0 <_read>
  4104ac:	1c43      	adds	r3, r0, #1
  4104ae:	d000      	beq.n	4104b2 <_read_r+0x1a>
  4104b0:	bd70      	pop	{r4, r5, r6, pc}
  4104b2:	6823      	ldr	r3, [r4, #0]
  4104b4:	2b00      	cmp	r3, #0
  4104b6:	d0fb      	beq.n	4104b0 <_read_r+0x18>
  4104b8:	6033      	str	r3, [r6, #0]
  4104ba:	bd70      	pop	{r4, r5, r6, pc}
  4104bc:	20016044 	.word	0x20016044

004104c0 <_realloc_r>:
  4104c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4104c4:	460c      	mov	r4, r1
  4104c6:	b083      	sub	sp, #12
  4104c8:	4690      	mov	r8, r2
  4104ca:	4681      	mov	r9, r0
  4104cc:	2900      	cmp	r1, #0
  4104ce:	f000 80e2 	beq.w	410696 <_realloc_r+0x1d6>
  4104d2:	f7ff fb91 	bl	40fbf8 <__malloc_lock>
  4104d6:	f108 060b 	add.w	r6, r8, #11
  4104da:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4104de:	2e16      	cmp	r6, #22
  4104e0:	f023 0503 	bic.w	r5, r3, #3
  4104e4:	f1a4 0708 	sub.w	r7, r4, #8
  4104e8:	d84b      	bhi.n	410582 <_realloc_r+0xc2>
  4104ea:	2110      	movs	r1, #16
  4104ec:	460e      	mov	r6, r1
  4104ee:	45b0      	cmp	r8, r6
  4104f0:	d84c      	bhi.n	41058c <_realloc_r+0xcc>
  4104f2:	428d      	cmp	r5, r1
  4104f4:	da78      	bge.n	4105e8 <_realloc_r+0x128>
  4104f6:	f8df b390 	ldr.w	fp, [pc, #912]	; 410888 <_realloc_r+0x3c8>
  4104fa:	f8db e008 	ldr.w	lr, [fp, #8]
  4104fe:	1978      	adds	r0, r7, r5
  410500:	4586      	cmp	lr, r0
  410502:	f000 80ce 	beq.w	4106a2 <_realloc_r+0x1e2>
  410506:	6842      	ldr	r2, [r0, #4]
  410508:	f022 0c01 	bic.w	ip, r2, #1
  41050c:	4484      	add	ip, r0
  41050e:	f8dc c004 	ldr.w	ip, [ip, #4]
  410512:	f01c 0f01 	tst.w	ip, #1
  410516:	d07a      	beq.n	41060e <_realloc_r+0x14e>
  410518:	2200      	movs	r2, #0
  41051a:	4610      	mov	r0, r2
  41051c:	07db      	lsls	r3, r3, #31
  41051e:	f100 8092 	bmi.w	410646 <_realloc_r+0x186>
  410522:	f854 3c08 	ldr.w	r3, [r4, #-8]
  410526:	ebc3 0a07 	rsb	sl, r3, r7
  41052a:	f8da 3004 	ldr.w	r3, [sl, #4]
  41052e:	f023 0303 	bic.w	r3, r3, #3
  410532:	442b      	add	r3, r5
  410534:	b388      	cbz	r0, 41059a <_realloc_r+0xda>
  410536:	4570      	cmp	r0, lr
  410538:	f000 80ed 	beq.w	410716 <_realloc_r+0x256>
  41053c:	eb02 0e03 	add.w	lr, r2, r3
  410540:	458e      	cmp	lr, r1
  410542:	db2a      	blt.n	41059a <_realloc_r+0xda>
  410544:	68c3      	ldr	r3, [r0, #12]
  410546:	6882      	ldr	r2, [r0, #8]
  410548:	4657      	mov	r7, sl
  41054a:	60d3      	str	r3, [r2, #12]
  41054c:	609a      	str	r2, [r3, #8]
  41054e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  410552:	f8da 300c 	ldr.w	r3, [sl, #12]
  410556:	60cb      	str	r3, [r1, #12]
  410558:	1f2a      	subs	r2, r5, #4
  41055a:	2a24      	cmp	r2, #36	; 0x24
  41055c:	6099      	str	r1, [r3, #8]
  41055e:	f200 8126 	bhi.w	4107ae <_realloc_r+0x2ee>
  410562:	2a13      	cmp	r2, #19
  410564:	f240 80b3 	bls.w	4106ce <_realloc_r+0x20e>
  410568:	6823      	ldr	r3, [r4, #0]
  41056a:	f8ca 3008 	str.w	r3, [sl, #8]
  41056e:	6863      	ldr	r3, [r4, #4]
  410570:	f8ca 300c 	str.w	r3, [sl, #12]
  410574:	2a1b      	cmp	r2, #27
  410576:	f200 8130 	bhi.w	4107da <_realloc_r+0x31a>
  41057a:	3408      	adds	r4, #8
  41057c:	f10a 0310 	add.w	r3, sl, #16
  410580:	e0a6      	b.n	4106d0 <_realloc_r+0x210>
  410582:	f026 0607 	bic.w	r6, r6, #7
  410586:	2e00      	cmp	r6, #0
  410588:	4631      	mov	r1, r6
  41058a:	dab0      	bge.n	4104ee <_realloc_r+0x2e>
  41058c:	230c      	movs	r3, #12
  41058e:	2000      	movs	r0, #0
  410590:	f8c9 3000 	str.w	r3, [r9]
  410594:	b003      	add	sp, #12
  410596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41059a:	428b      	cmp	r3, r1
  41059c:	db53      	blt.n	410646 <_realloc_r+0x186>
  41059e:	4657      	mov	r7, sl
  4105a0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4105a4:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4105a8:	1f2a      	subs	r2, r5, #4
  4105aa:	2a24      	cmp	r2, #36	; 0x24
  4105ac:	60c1      	str	r1, [r0, #12]
  4105ae:	6088      	str	r0, [r1, #8]
  4105b0:	f200 8109 	bhi.w	4107c6 <_realloc_r+0x306>
  4105b4:	2a13      	cmp	r2, #19
  4105b6:	f240 8104 	bls.w	4107c2 <_realloc_r+0x302>
  4105ba:	6821      	ldr	r1, [r4, #0]
  4105bc:	f8ca 1008 	str.w	r1, [sl, #8]
  4105c0:	6861      	ldr	r1, [r4, #4]
  4105c2:	f8ca 100c 	str.w	r1, [sl, #12]
  4105c6:	2a1b      	cmp	r2, #27
  4105c8:	f200 811c 	bhi.w	410804 <_realloc_r+0x344>
  4105cc:	3408      	adds	r4, #8
  4105ce:	f10a 0210 	add.w	r2, sl, #16
  4105d2:	6821      	ldr	r1, [r4, #0]
  4105d4:	6011      	str	r1, [r2, #0]
  4105d6:	6861      	ldr	r1, [r4, #4]
  4105d8:	6051      	str	r1, [r2, #4]
  4105da:	68a1      	ldr	r1, [r4, #8]
  4105dc:	6091      	str	r1, [r2, #8]
  4105de:	461d      	mov	r5, r3
  4105e0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4105e4:	463c      	mov	r4, r7
  4105e6:	4657      	mov	r7, sl
  4105e8:	1baa      	subs	r2, r5, r6
  4105ea:	2a0f      	cmp	r2, #15
  4105ec:	f003 0301 	and.w	r3, r3, #1
  4105f0:	d819      	bhi.n	410626 <_realloc_r+0x166>
  4105f2:	432b      	orrs	r3, r5
  4105f4:	443d      	add	r5, r7
  4105f6:	607b      	str	r3, [r7, #4]
  4105f8:	686b      	ldr	r3, [r5, #4]
  4105fa:	f043 0301 	orr.w	r3, r3, #1
  4105fe:	606b      	str	r3, [r5, #4]
  410600:	4648      	mov	r0, r9
  410602:	f7ff fafb 	bl	40fbfc <__malloc_unlock>
  410606:	4620      	mov	r0, r4
  410608:	b003      	add	sp, #12
  41060a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41060e:	f022 0203 	bic.w	r2, r2, #3
  410612:	eb02 0c05 	add.w	ip, r2, r5
  410616:	458c      	cmp	ip, r1
  410618:	db80      	blt.n	41051c <_realloc_r+0x5c>
  41061a:	68c2      	ldr	r2, [r0, #12]
  41061c:	6881      	ldr	r1, [r0, #8]
  41061e:	4665      	mov	r5, ip
  410620:	60ca      	str	r2, [r1, #12]
  410622:	6091      	str	r1, [r2, #8]
  410624:	e7e0      	b.n	4105e8 <_realloc_r+0x128>
  410626:	19b9      	adds	r1, r7, r6
  410628:	f042 0001 	orr.w	r0, r2, #1
  41062c:	431e      	orrs	r6, r3
  41062e:	440a      	add	r2, r1
  410630:	607e      	str	r6, [r7, #4]
  410632:	6048      	str	r0, [r1, #4]
  410634:	6853      	ldr	r3, [r2, #4]
  410636:	f043 0301 	orr.w	r3, r3, #1
  41063a:	3108      	adds	r1, #8
  41063c:	6053      	str	r3, [r2, #4]
  41063e:	4648      	mov	r0, r9
  410640:	f7fe fc2a 	bl	40ee98 <_free_r>
  410644:	e7dc      	b.n	410600 <_realloc_r+0x140>
  410646:	4641      	mov	r1, r8
  410648:	4648      	mov	r0, r9
  41064a:	f7fe ff4d 	bl	40f4e8 <_malloc_r>
  41064e:	4680      	mov	r8, r0
  410650:	b1d0      	cbz	r0, 410688 <_realloc_r+0x1c8>
  410652:	f854 3c04 	ldr.w	r3, [r4, #-4]
  410656:	f023 0201 	bic.w	r2, r3, #1
  41065a:	443a      	add	r2, r7
  41065c:	f1a0 0108 	sub.w	r1, r0, #8
  410660:	4291      	cmp	r1, r2
  410662:	f000 809e 	beq.w	4107a2 <_realloc_r+0x2e2>
  410666:	1f2a      	subs	r2, r5, #4
  410668:	2a24      	cmp	r2, #36	; 0x24
  41066a:	d850      	bhi.n	41070e <_realloc_r+0x24e>
  41066c:	2a13      	cmp	r2, #19
  41066e:	d823      	bhi.n	4106b8 <_realloc_r+0x1f8>
  410670:	4603      	mov	r3, r0
  410672:	4622      	mov	r2, r4
  410674:	6811      	ldr	r1, [r2, #0]
  410676:	6019      	str	r1, [r3, #0]
  410678:	6851      	ldr	r1, [r2, #4]
  41067a:	6059      	str	r1, [r3, #4]
  41067c:	6892      	ldr	r2, [r2, #8]
  41067e:	609a      	str	r2, [r3, #8]
  410680:	4621      	mov	r1, r4
  410682:	4648      	mov	r0, r9
  410684:	f7fe fc08 	bl	40ee98 <_free_r>
  410688:	4648      	mov	r0, r9
  41068a:	f7ff fab7 	bl	40fbfc <__malloc_unlock>
  41068e:	4640      	mov	r0, r8
  410690:	b003      	add	sp, #12
  410692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410696:	4611      	mov	r1, r2
  410698:	b003      	add	sp, #12
  41069a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41069e:	f7fe bf23 	b.w	40f4e8 <_malloc_r>
  4106a2:	f8de 2004 	ldr.w	r2, [lr, #4]
  4106a6:	f022 0203 	bic.w	r2, r2, #3
  4106aa:	1950      	adds	r0, r2, r5
  4106ac:	f106 0c10 	add.w	ip, r6, #16
  4106b0:	4560      	cmp	r0, ip
  4106b2:	da19      	bge.n	4106e8 <_realloc_r+0x228>
  4106b4:	4670      	mov	r0, lr
  4106b6:	e731      	b.n	41051c <_realloc_r+0x5c>
  4106b8:	6823      	ldr	r3, [r4, #0]
  4106ba:	6003      	str	r3, [r0, #0]
  4106bc:	6863      	ldr	r3, [r4, #4]
  4106be:	6043      	str	r3, [r0, #4]
  4106c0:	2a1b      	cmp	r2, #27
  4106c2:	d863      	bhi.n	41078c <_realloc_r+0x2cc>
  4106c4:	f100 0308 	add.w	r3, r0, #8
  4106c8:	f104 0208 	add.w	r2, r4, #8
  4106cc:	e7d2      	b.n	410674 <_realloc_r+0x1b4>
  4106ce:	463b      	mov	r3, r7
  4106d0:	6822      	ldr	r2, [r4, #0]
  4106d2:	601a      	str	r2, [r3, #0]
  4106d4:	6862      	ldr	r2, [r4, #4]
  4106d6:	605a      	str	r2, [r3, #4]
  4106d8:	68a2      	ldr	r2, [r4, #8]
  4106da:	609a      	str	r2, [r3, #8]
  4106dc:	463c      	mov	r4, r7
  4106de:	4675      	mov	r5, lr
  4106e0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4106e4:	4657      	mov	r7, sl
  4106e6:	e77f      	b.n	4105e8 <_realloc_r+0x128>
  4106e8:	4437      	add	r7, r6
  4106ea:	1b83      	subs	r3, r0, r6
  4106ec:	f043 0301 	orr.w	r3, r3, #1
  4106f0:	f8cb 7008 	str.w	r7, [fp, #8]
  4106f4:	607b      	str	r3, [r7, #4]
  4106f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4106fa:	f003 0301 	and.w	r3, r3, #1
  4106fe:	431e      	orrs	r6, r3
  410700:	4648      	mov	r0, r9
  410702:	f844 6c04 	str.w	r6, [r4, #-4]
  410706:	f7ff fa79 	bl	40fbfc <__malloc_unlock>
  41070a:	4620      	mov	r0, r4
  41070c:	e77c      	b.n	410608 <_realloc_r+0x148>
  41070e:	4621      	mov	r1, r4
  410710:	f7ff fa12 	bl	40fb38 <memmove>
  410714:	e7b4      	b.n	410680 <_realloc_r+0x1c0>
  410716:	eb02 0c03 	add.w	ip, r2, r3
  41071a:	f106 0210 	add.w	r2, r6, #16
  41071e:	4594      	cmp	ip, r2
  410720:	f6ff af3b 	blt.w	41059a <_realloc_r+0xda>
  410724:	4657      	mov	r7, sl
  410726:	f8da 300c 	ldr.w	r3, [sl, #12]
  41072a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  41072e:	1f2a      	subs	r2, r5, #4
  410730:	2a24      	cmp	r2, #36	; 0x24
  410732:	60cb      	str	r3, [r1, #12]
  410734:	6099      	str	r1, [r3, #8]
  410736:	f200 8087 	bhi.w	410848 <_realloc_r+0x388>
  41073a:	2a13      	cmp	r2, #19
  41073c:	d978      	bls.n	410830 <_realloc_r+0x370>
  41073e:	6823      	ldr	r3, [r4, #0]
  410740:	f8ca 3008 	str.w	r3, [sl, #8]
  410744:	6863      	ldr	r3, [r4, #4]
  410746:	f8ca 300c 	str.w	r3, [sl, #12]
  41074a:	2a1b      	cmp	r2, #27
  41074c:	f200 8085 	bhi.w	41085a <_realloc_r+0x39a>
  410750:	3408      	adds	r4, #8
  410752:	f10a 0310 	add.w	r3, sl, #16
  410756:	6822      	ldr	r2, [r4, #0]
  410758:	601a      	str	r2, [r3, #0]
  41075a:	6862      	ldr	r2, [r4, #4]
  41075c:	605a      	str	r2, [r3, #4]
  41075e:	68a2      	ldr	r2, [r4, #8]
  410760:	609a      	str	r2, [r3, #8]
  410762:	eb0a 0306 	add.w	r3, sl, r6
  410766:	ebc6 020c 	rsb	r2, r6, ip
  41076a:	f042 0201 	orr.w	r2, r2, #1
  41076e:	f8cb 3008 	str.w	r3, [fp, #8]
  410772:	605a      	str	r2, [r3, #4]
  410774:	f8da 3004 	ldr.w	r3, [sl, #4]
  410778:	f003 0301 	and.w	r3, r3, #1
  41077c:	431e      	orrs	r6, r3
  41077e:	4648      	mov	r0, r9
  410780:	f8ca 6004 	str.w	r6, [sl, #4]
  410784:	f7ff fa3a 	bl	40fbfc <__malloc_unlock>
  410788:	4638      	mov	r0, r7
  41078a:	e73d      	b.n	410608 <_realloc_r+0x148>
  41078c:	68a3      	ldr	r3, [r4, #8]
  41078e:	6083      	str	r3, [r0, #8]
  410790:	68e3      	ldr	r3, [r4, #12]
  410792:	60c3      	str	r3, [r0, #12]
  410794:	2a24      	cmp	r2, #36	; 0x24
  410796:	d02c      	beq.n	4107f2 <_realloc_r+0x332>
  410798:	f100 0310 	add.w	r3, r0, #16
  41079c:	f104 0210 	add.w	r2, r4, #16
  4107a0:	e768      	b.n	410674 <_realloc_r+0x1b4>
  4107a2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4107a6:	f022 0203 	bic.w	r2, r2, #3
  4107aa:	4415      	add	r5, r2
  4107ac:	e71c      	b.n	4105e8 <_realloc_r+0x128>
  4107ae:	4621      	mov	r1, r4
  4107b0:	4638      	mov	r0, r7
  4107b2:	4675      	mov	r5, lr
  4107b4:	463c      	mov	r4, r7
  4107b6:	f7ff f9bf 	bl	40fb38 <memmove>
  4107ba:	4657      	mov	r7, sl
  4107bc:	f8da 3004 	ldr.w	r3, [sl, #4]
  4107c0:	e712      	b.n	4105e8 <_realloc_r+0x128>
  4107c2:	463a      	mov	r2, r7
  4107c4:	e705      	b.n	4105d2 <_realloc_r+0x112>
  4107c6:	4621      	mov	r1, r4
  4107c8:	4638      	mov	r0, r7
  4107ca:	461d      	mov	r5, r3
  4107cc:	463c      	mov	r4, r7
  4107ce:	f7ff f9b3 	bl	40fb38 <memmove>
  4107d2:	4657      	mov	r7, sl
  4107d4:	f8da 3004 	ldr.w	r3, [sl, #4]
  4107d8:	e706      	b.n	4105e8 <_realloc_r+0x128>
  4107da:	68a3      	ldr	r3, [r4, #8]
  4107dc:	f8ca 3010 	str.w	r3, [sl, #16]
  4107e0:	68e3      	ldr	r3, [r4, #12]
  4107e2:	f8ca 3014 	str.w	r3, [sl, #20]
  4107e6:	2a24      	cmp	r2, #36	; 0x24
  4107e8:	d018      	beq.n	41081c <_realloc_r+0x35c>
  4107ea:	3410      	adds	r4, #16
  4107ec:	f10a 0318 	add.w	r3, sl, #24
  4107f0:	e76e      	b.n	4106d0 <_realloc_r+0x210>
  4107f2:	6923      	ldr	r3, [r4, #16]
  4107f4:	6103      	str	r3, [r0, #16]
  4107f6:	6963      	ldr	r3, [r4, #20]
  4107f8:	6143      	str	r3, [r0, #20]
  4107fa:	f104 0218 	add.w	r2, r4, #24
  4107fe:	f100 0318 	add.w	r3, r0, #24
  410802:	e737      	b.n	410674 <_realloc_r+0x1b4>
  410804:	68a1      	ldr	r1, [r4, #8]
  410806:	f8ca 1010 	str.w	r1, [sl, #16]
  41080a:	68e1      	ldr	r1, [r4, #12]
  41080c:	f8ca 1014 	str.w	r1, [sl, #20]
  410810:	2a24      	cmp	r2, #36	; 0x24
  410812:	d00f      	beq.n	410834 <_realloc_r+0x374>
  410814:	3410      	adds	r4, #16
  410816:	f10a 0218 	add.w	r2, sl, #24
  41081a:	e6da      	b.n	4105d2 <_realloc_r+0x112>
  41081c:	6923      	ldr	r3, [r4, #16]
  41081e:	f8ca 3018 	str.w	r3, [sl, #24]
  410822:	6963      	ldr	r3, [r4, #20]
  410824:	f8ca 301c 	str.w	r3, [sl, #28]
  410828:	3418      	adds	r4, #24
  41082a:	f10a 0320 	add.w	r3, sl, #32
  41082e:	e74f      	b.n	4106d0 <_realloc_r+0x210>
  410830:	463b      	mov	r3, r7
  410832:	e790      	b.n	410756 <_realloc_r+0x296>
  410834:	6922      	ldr	r2, [r4, #16]
  410836:	f8ca 2018 	str.w	r2, [sl, #24]
  41083a:	6962      	ldr	r2, [r4, #20]
  41083c:	f8ca 201c 	str.w	r2, [sl, #28]
  410840:	3418      	adds	r4, #24
  410842:	f10a 0220 	add.w	r2, sl, #32
  410846:	e6c4      	b.n	4105d2 <_realloc_r+0x112>
  410848:	4621      	mov	r1, r4
  41084a:	4638      	mov	r0, r7
  41084c:	f8cd c004 	str.w	ip, [sp, #4]
  410850:	f7ff f972 	bl	40fb38 <memmove>
  410854:	f8dd c004 	ldr.w	ip, [sp, #4]
  410858:	e783      	b.n	410762 <_realloc_r+0x2a2>
  41085a:	68a3      	ldr	r3, [r4, #8]
  41085c:	f8ca 3010 	str.w	r3, [sl, #16]
  410860:	68e3      	ldr	r3, [r4, #12]
  410862:	f8ca 3014 	str.w	r3, [sl, #20]
  410866:	2a24      	cmp	r2, #36	; 0x24
  410868:	d003      	beq.n	410872 <_realloc_r+0x3b2>
  41086a:	3410      	adds	r4, #16
  41086c:	f10a 0318 	add.w	r3, sl, #24
  410870:	e771      	b.n	410756 <_realloc_r+0x296>
  410872:	6923      	ldr	r3, [r4, #16]
  410874:	f8ca 3018 	str.w	r3, [sl, #24]
  410878:	6963      	ldr	r3, [r4, #20]
  41087a:	f8ca 301c 	str.w	r3, [sl, #28]
  41087e:	3418      	adds	r4, #24
  410880:	f10a 0320 	add.w	r3, sl, #32
  410884:	e767      	b.n	410756 <_realloc_r+0x296>
  410886:	bf00      	nop
  410888:	200006a4 	.word	0x200006a4

0041088c <__fpclassifyd>:
  41088c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  410890:	b410      	push	{r4}
  410892:	d008      	beq.n	4108a6 <__fpclassifyd+0x1a>
  410894:	4a0f      	ldr	r2, [pc, #60]	; (4108d4 <__fpclassifyd+0x48>)
  410896:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  41089a:	4294      	cmp	r4, r2
  41089c:	d80a      	bhi.n	4108b4 <__fpclassifyd+0x28>
  41089e:	2004      	movs	r0, #4
  4108a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4108a4:	4770      	bx	lr
  4108a6:	2800      	cmp	r0, #0
  4108a8:	bf0c      	ite	eq
  4108aa:	2002      	moveq	r0, #2
  4108ac:	2003      	movne	r0, #3
  4108ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  4108b2:	4770      	bx	lr
  4108b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  4108b8:	d201      	bcs.n	4108be <__fpclassifyd+0x32>
  4108ba:	2003      	movs	r0, #3
  4108bc:	e7f7      	b.n	4108ae <__fpclassifyd+0x22>
  4108be:	4a06      	ldr	r2, [pc, #24]	; (4108d8 <__fpclassifyd+0x4c>)
  4108c0:	4293      	cmp	r3, r2
  4108c2:	d001      	beq.n	4108c8 <__fpclassifyd+0x3c>
  4108c4:	2000      	movs	r0, #0
  4108c6:	e7f2      	b.n	4108ae <__fpclassifyd+0x22>
  4108c8:	f1d0 0001 	rsbs	r0, r0, #1
  4108cc:	bf38      	it	cc
  4108ce:	2000      	movcc	r0, #0
  4108d0:	e7ed      	b.n	4108ae <__fpclassifyd+0x22>
  4108d2:	bf00      	nop
  4108d4:	7fdfffff 	.word	0x7fdfffff
  4108d8:	7ff00000 	.word	0x7ff00000

004108dc <_sbrk_r>:
  4108dc:	b538      	push	{r3, r4, r5, lr}
  4108de:	4c07      	ldr	r4, [pc, #28]	; (4108fc <_sbrk_r+0x20>)
  4108e0:	2300      	movs	r3, #0
  4108e2:	4605      	mov	r5, r0
  4108e4:	4608      	mov	r0, r1
  4108e6:	6023      	str	r3, [r4, #0]
  4108e8:	f7f9 f932 	bl	409b50 <_sbrk>
  4108ec:	1c43      	adds	r3, r0, #1
  4108ee:	d000      	beq.n	4108f2 <_sbrk_r+0x16>
  4108f0:	bd38      	pop	{r3, r4, r5, pc}
  4108f2:	6823      	ldr	r3, [r4, #0]
  4108f4:	2b00      	cmp	r3, #0
  4108f6:	d0fb      	beq.n	4108f0 <_sbrk_r+0x14>
  4108f8:	602b      	str	r3, [r5, #0]
  4108fa:	bd38      	pop	{r3, r4, r5, pc}
  4108fc:	20016044 	.word	0x20016044

00410900 <__sccl>:
  410900:	b470      	push	{r4, r5, r6}
  410902:	780c      	ldrb	r4, [r1, #0]
  410904:	2c5e      	cmp	r4, #94	; 0x5e
  410906:	d02e      	beq.n	410966 <__sccl+0x66>
  410908:	2200      	movs	r2, #0
  41090a:	1c4d      	adds	r5, r1, #1
  41090c:	4616      	mov	r6, r2
  41090e:	2300      	movs	r3, #0
  410910:	54c2      	strb	r2, [r0, r3]
  410912:	3301      	adds	r3, #1
  410914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  410918:	d1fa      	bne.n	410910 <__sccl+0x10>
  41091a:	b184      	cbz	r4, 41093e <__sccl+0x3e>
  41091c:	f086 0201 	eor.w	r2, r6, #1
  410920:	5502      	strb	r2, [r0, r4]
  410922:	1c6e      	adds	r6, r5, #1
  410924:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  410928:	2b2d      	cmp	r3, #45	; 0x2d
  41092a:	d00e      	beq.n	41094a <__sccl+0x4a>
  41092c:	2b5d      	cmp	r3, #93	; 0x5d
  41092e:	d009      	beq.n	410944 <__sccl+0x44>
  410930:	b113      	cbz	r3, 410938 <__sccl+0x38>
  410932:	461c      	mov	r4, r3
  410934:	4635      	mov	r5, r6
  410936:	e7f3      	b.n	410920 <__sccl+0x20>
  410938:	4628      	mov	r0, r5
  41093a:	bc70      	pop	{r4, r5, r6}
  41093c:	4770      	bx	lr
  41093e:	1e68      	subs	r0, r5, #1
  410940:	bc70      	pop	{r4, r5, r6}
  410942:	4770      	bx	lr
  410944:	4630      	mov	r0, r6
  410946:	bc70      	pop	{r4, r5, r6}
  410948:	4770      	bx	lr
  41094a:	7869      	ldrb	r1, [r5, #1]
  41094c:	295d      	cmp	r1, #93	; 0x5d
  41094e:	d0f0      	beq.n	410932 <__sccl+0x32>
  410950:	428c      	cmp	r4, r1
  410952:	dcee      	bgt.n	410932 <__sccl+0x32>
  410954:	3502      	adds	r5, #2
  410956:	1903      	adds	r3, r0, r4
  410958:	3401      	adds	r4, #1
  41095a:	42a1      	cmp	r1, r4
  41095c:	f803 2f01 	strb.w	r2, [r3, #1]!
  410960:	dcfa      	bgt.n	410958 <__sccl+0x58>
  410962:	3602      	adds	r6, #2
  410964:	e7de      	b.n	410924 <__sccl+0x24>
  410966:	2201      	movs	r2, #1
  410968:	784c      	ldrb	r4, [r1, #1]
  41096a:	4616      	mov	r6, r2
  41096c:	1c8d      	adds	r5, r1, #2
  41096e:	e7ce      	b.n	41090e <__sccl+0xe>

00410970 <nanf>:
  410970:	4800      	ldr	r0, [pc, #0]	; (410974 <nanf+0x4>)
  410972:	4770      	bx	lr
  410974:	7fc00000 	.word	0x7fc00000

00410978 <sulp>:
  410978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41097c:	460d      	mov	r5, r1
  41097e:	4690      	mov	r8, r2
  410980:	f7ff fc36 	bl	4101f0 <__ulp>
  410984:	4606      	mov	r6, r0
  410986:	460f      	mov	r7, r1
  410988:	f1b8 0f00 	cmp.w	r8, #0
  41098c:	d00f      	beq.n	4109ae <sulp+0x36>
  41098e:	f3c5 530a 	ubfx	r3, r5, #20, #11
  410992:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  410996:	2b00      	cmp	r3, #0
  410998:	dd09      	ble.n	4109ae <sulp+0x36>
  41099a:	051c      	lsls	r4, r3, #20
  41099c:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
  4109a0:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
  4109a4:	2200      	movs	r2, #0
  4109a6:	f002 fa97 	bl	412ed8 <__aeabi_dmul>
  4109aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4109ae:	4630      	mov	r0, r6
  4109b0:	4639      	mov	r1, r7
  4109b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4109b6:	bf00      	nop

004109b8 <_strtod_r>:
  4109b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4109bc:	b09f      	sub	sp, #124	; 0x7c
  4109be:	460d      	mov	r5, r1
  4109c0:	9119      	str	r1, [sp, #100]	; 0x64
  4109c2:	4683      	mov	fp, r0
  4109c4:	9205      	str	r2, [sp, #20]
  4109c6:	2000      	movs	r0, #0
  4109c8:	460a      	mov	r2, r1
  4109ca:	2100      	movs	r1, #0
  4109cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4109d0:	2300      	movs	r3, #0
  4109d2:	931a      	str	r3, [sp, #104]	; 0x68
  4109d4:	4616      	mov	r6, r2
  4109d6:	f812 4b01 	ldrb.w	r4, [r2], #1
  4109da:	2c2d      	cmp	r4, #45	; 0x2d
  4109dc:	f200 8158 	bhi.w	410c90 <_strtod_r+0x2d8>
  4109e0:	e8df f014 	tbh	[pc, r4, lsl #1]
  4109e4:	01560039 	.word	0x01560039
  4109e8:	01560156 	.word	0x01560156
  4109ec:	01560156 	.word	0x01560156
  4109f0:	01560156 	.word	0x01560156
  4109f4:	007d0156 	.word	0x007d0156
  4109f8:	007d007d 	.word	0x007d007d
  4109fc:	007d007d 	.word	0x007d007d
  410a00:	01560156 	.word	0x01560156
  410a04:	01560156 	.word	0x01560156
  410a08:	01560156 	.word	0x01560156
  410a0c:	01560156 	.word	0x01560156
  410a10:	01560156 	.word	0x01560156
  410a14:	01560156 	.word	0x01560156
  410a18:	01560156 	.word	0x01560156
  410a1c:	01560156 	.word	0x01560156
  410a20:	01560156 	.word	0x01560156
  410a24:	0156007d 	.word	0x0156007d
  410a28:	01560156 	.word	0x01560156
  410a2c:	01560156 	.word	0x01560156
  410a30:	01560156 	.word	0x01560156
  410a34:	01560156 	.word	0x01560156
  410a38:	004d0156 	.word	0x004d0156
  410a3c:	007f0156 	.word	0x007f0156
  410a40:	2300      	movs	r3, #0
  410a42:	2101      	movs	r1, #1
  410a44:	469a      	mov	sl, r3
  410a46:	910b      	str	r1, [sp, #44]	; 0x2c
  410a48:	2800      	cmp	r0, #0
  410a4a:	f040 8151 	bne.w	410cf0 <_strtod_r+0x338>
  410a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410a50:	2a00      	cmp	r2, #0
  410a52:	f040 814d 	bne.w	410cf0 <_strtod_r+0x338>
  410a56:	2000      	movs	r0, #0
  410a58:	f04f 0800 	mov.w	r8, #0
  410a5c:	f04f 0900 	mov.w	r9, #0
  410a60:	9519      	str	r5, [sp, #100]	; 0x64
  410a62:	9007      	str	r0, [sp, #28]
  410a64:	9805      	ldr	r0, [sp, #20]
  410a66:	b108      	cbz	r0, 410a6c <_strtod_r+0xb4>
  410a68:	9b19      	ldr	r3, [sp, #100]	; 0x64
  410a6a:	6003      	str	r3, [r0, #0]
  410a6c:	9907      	ldr	r1, [sp, #28]
  410a6e:	2900      	cmp	r1, #0
  410a70:	f040 809e 	bne.w	410bb0 <_strtod_r+0x1f8>
  410a74:	4640      	mov	r0, r8
  410a76:	4649      	mov	r1, r9
  410a78:	b01f      	add	sp, #124	; 0x7c
  410a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410a7e:	2300      	movs	r3, #0
  410a80:	9307      	str	r3, [sp, #28]
  410a82:	1c73      	adds	r3, r6, #1
  410a84:	9319      	str	r3, [sp, #100]	; 0x64
  410a86:	7874      	ldrb	r4, [r6, #1]
  410a88:	2c00      	cmp	r4, #0
  410a8a:	d0e4      	beq.n	410a56 <_strtod_r+0x9e>
  410a8c:	2c30      	cmp	r4, #48	; 0x30
  410a8e:	461e      	mov	r6, r3
  410a90:	f000 8103 	beq.w	410c9a <_strtod_r+0x2e2>
  410a94:	2300      	movs	r3, #0
  410a96:	9606      	str	r6, [sp, #24]
  410a98:	930a      	str	r3, [sp, #40]	; 0x28
  410a9a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  410a9e:	2700      	movs	r7, #0
  410aa0:	2b09      	cmp	r3, #9
  410aa2:	46b9      	mov	r9, r7
  410aa4:	463e      	mov	r6, r7
  410aa6:	d81f      	bhi.n	410ae8 <_strtod_r+0x130>
  410aa8:	9806      	ldr	r0, [sp, #24]
  410aaa:	1c43      	adds	r3, r0, #1
  410aac:	e00f      	b.n	410ace <_strtod_r+0x116>
  410aae:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  410ab2:	eb04 0949 	add.w	r9, r4, r9, lsl #1
  410ab6:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
  410aba:	9319      	str	r3, [sp, #100]	; 0x64
  410abc:	4698      	mov	r8, r3
  410abe:	f813 4b01 	ldrb.w	r4, [r3], #1
  410ac2:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  410ac6:	2a09      	cmp	r2, #9
  410ac8:	f106 0601 	add.w	r6, r6, #1
  410acc:	d80e      	bhi.n	410aec <_strtod_r+0x134>
  410ace:	2e08      	cmp	r6, #8
  410ad0:	dded      	ble.n	410aae <_strtod_r+0xf6>
  410ad2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  410ad6:	eb04 0747 	add.w	r7, r4, r7, lsl #1
  410ada:	3f30      	subs	r7, #48	; 0x30
  410adc:	e7ed      	b.n	410aba <_strtod_r+0x102>
  410ade:	9219      	str	r2, [sp, #100]	; 0x64
  410ae0:	e778      	b.n	4109d4 <_strtod_r+0x1c>
  410ae2:	2201      	movs	r2, #1
  410ae4:	9207      	str	r2, [sp, #28]
  410ae6:	e7cc      	b.n	410a82 <_strtod_r+0xca>
  410ae8:	f8dd 8018 	ldr.w	r8, [sp, #24]
  410aec:	4658      	mov	r0, fp
  410aee:	f7fe fc6b 	bl	40f3c8 <_localeconv_r>
  410af2:	f8d0 a000 	ldr.w	sl, [r0]
  410af6:	4658      	mov	r0, fp
  410af8:	f7fe fc66 	bl	40f3c8 <_localeconv_r>
  410afc:	6800      	ldr	r0, [r0, #0]
  410afe:	f7f9 fe5f 	bl	40a7c0 <strlen>
  410b02:	4651      	mov	r1, sl
  410b04:	4602      	mov	r2, r0
  410b06:	4640      	mov	r0, r8
  410b08:	f7f9 fe8a 	bl	40a820 <strncmp>
  410b0c:	4680      	mov	r8, r0
  410b0e:	2800      	cmp	r0, #0
  410b10:	f000 8146 	beq.w	410da0 <_strtod_r+0x3e8>
  410b14:	2000      	movs	r0, #0
  410b16:	4603      	mov	r3, r0
  410b18:	900b      	str	r0, [sp, #44]	; 0x2c
  410b1a:	46b2      	mov	sl, r6
  410b1c:	f024 0220 	bic.w	r2, r4, #32
  410b20:	2a45      	cmp	r2, #69	; 0x45
  410b22:	f000 80e1 	beq.w	410ce8 <_strtod_r+0x330>
  410b26:	2100      	movs	r1, #0
  410b28:	f1ba 0f00 	cmp.w	sl, #0
  410b2c:	d054      	beq.n	410bd8 <_strtod_r+0x220>
  410b2e:	1acb      	subs	r3, r1, r3
  410b30:	4648      	mov	r0, r9
  410b32:	9308      	str	r3, [sp, #32]
  410b34:	f002 f95a 	bl	412dec <__aeabi_ui2d>
  410b38:	f1ba 0f10 	cmp.w	sl, #16
  410b3c:	bfb4      	ite	lt
  410b3e:	46d0      	movlt	r8, sl
  410b40:	f04f 0810 	movge.w	r8, #16
  410b44:	2e00      	cmp	r6, #0
  410b46:	bf08      	it	eq
  410b48:	4656      	moveq	r6, sl
  410b4a:	f1b8 0f09 	cmp.w	r8, #9
  410b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  410b52:	dd13      	ble.n	410b7c <_strtod_r+0x1c4>
  410b54:	4ba0      	ldr	r3, [pc, #640]	; (410dd8 <_strtod_r+0x420>)
  410b56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  410b5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  410b5e:	f002 f9bb 	bl	412ed8 <__aeabi_dmul>
  410b62:	4604      	mov	r4, r0
  410b64:	4638      	mov	r0, r7
  410b66:	460d      	mov	r5, r1
  410b68:	f002 f940 	bl	412dec <__aeabi_ui2d>
  410b6c:	4602      	mov	r2, r0
  410b6e:	460b      	mov	r3, r1
  410b70:	4620      	mov	r0, r4
  410b72:	4629      	mov	r1, r5
  410b74:	f001 fffe 	bl	412b74 <__adddf3>
  410b78:	e9cd 0102 	strd	r0, r1, [sp, #8]
  410b7c:	f1ba 0f0f 	cmp.w	sl, #15
  410b80:	f300 812c 	bgt.w	410ddc <_strtod_r+0x424>
  410b84:	9908      	ldr	r1, [sp, #32]
  410b86:	2900      	cmp	r1, #0
  410b88:	f000 80ab 	beq.w	410ce2 <_strtod_r+0x32a>
  410b8c:	f340 8580 	ble.w	411690 <_strtod_r+0xcd8>
  410b90:	9a08      	ldr	r2, [sp, #32]
  410b92:	2a16      	cmp	r2, #22
  410b94:	f300 84ef 	bgt.w	411576 <_strtod_r+0xbbe>
  410b98:	4b8f      	ldr	r3, [pc, #572]	; (410dd8 <_strtod_r+0x420>)
  410b9a:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
  410b9e:	e9da 0100 	ldrd	r0, r1, [sl]
  410ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  410ba6:	f002 f997 	bl	412ed8 <__aeabi_dmul>
  410baa:	4680      	mov	r8, r0
  410bac:	4689      	mov	r9, r1
  410bae:	e759      	b.n	410a64 <_strtod_r+0xac>
  410bb0:	4640      	mov	r0, r8
  410bb2:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
  410bb6:	b01f      	add	sp, #124	; 0x7c
  410bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410bbc:	4633      	mov	r3, r6
  410bbe:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  410bc2:	2a08      	cmp	r2, #8
  410bc4:	f240 833c 	bls.w	411240 <_strtod_r+0x888>
  410bc8:	f024 0220 	bic.w	r2, r4, #32
  410bcc:	2a45      	cmp	r2, #69	; 0x45
  410bce:	4618      	mov	r0, r3
  410bd0:	f43f af36 	beq.w	410a40 <_strtod_r+0x88>
  410bd4:	2101      	movs	r1, #1
  410bd6:	910b      	str	r1, [sp, #44]	; 0x2c
  410bd8:	2800      	cmp	r0, #0
  410bda:	d171      	bne.n	410cc0 <_strtod_r+0x308>
  410bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410bde:	2b00      	cmp	r3, #0
  410be0:	d16e      	bne.n	410cc0 <_strtod_r+0x308>
  410be2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  410be4:	2800      	cmp	r0, #0
  410be6:	f47f af36 	bne.w	410a56 <_strtod_r+0x9e>
  410bea:	3c49      	subs	r4, #73	; 0x49
  410bec:	2c25      	cmp	r4, #37	; 0x25
  410bee:	f63f af32 	bhi.w	410a56 <_strtod_r+0x9e>
  410bf2:	a101      	add	r1, pc, #4	; (adr r1, 410bf8 <_strtod_r+0x240>)
  410bf4:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
  410bf8:	004112bb 	.word	0x004112bb
  410bfc:	00410a57 	.word	0x00410a57
  410c00:	00410a57 	.word	0x00410a57
  410c04:	00410a57 	.word	0x00410a57
  410c08:	00410a57 	.word	0x00410a57
  410c0c:	00411283 	.word	0x00411283
  410c10:	00410a57 	.word	0x00410a57
  410c14:	00410a57 	.word	0x00410a57
  410c18:	00410a57 	.word	0x00410a57
  410c1c:	00410a57 	.word	0x00410a57
  410c20:	00410a57 	.word	0x00410a57
  410c24:	00410a57 	.word	0x00410a57
  410c28:	00410a57 	.word	0x00410a57
  410c2c:	00410a57 	.word	0x00410a57
  410c30:	00410a57 	.word	0x00410a57
  410c34:	00410a57 	.word	0x00410a57
  410c38:	00410a57 	.word	0x00410a57
  410c3c:	00410a57 	.word	0x00410a57
  410c40:	00410a57 	.word	0x00410a57
  410c44:	00410a57 	.word	0x00410a57
  410c48:	00410a57 	.word	0x00410a57
  410c4c:	00410a57 	.word	0x00410a57
  410c50:	00410a57 	.word	0x00410a57
  410c54:	00410a57 	.word	0x00410a57
  410c58:	00410a57 	.word	0x00410a57
  410c5c:	00410a57 	.word	0x00410a57
  410c60:	00410a57 	.word	0x00410a57
  410c64:	00410a57 	.word	0x00410a57
  410c68:	00410a57 	.word	0x00410a57
  410c6c:	00410a57 	.word	0x00410a57
  410c70:	00410a57 	.word	0x00410a57
  410c74:	00410a57 	.word	0x00410a57
  410c78:	004112bb 	.word	0x004112bb
  410c7c:	00410a57 	.word	0x00410a57
  410c80:	00410a57 	.word	0x00410a57
  410c84:	00410a57 	.word	0x00410a57
  410c88:	00410a57 	.word	0x00410a57
  410c8c:	00411283 	.word	0x00411283
  410c90:	2000      	movs	r0, #0
  410c92:	2c30      	cmp	r4, #48	; 0x30
  410c94:	9007      	str	r0, [sp, #28]
  410c96:	f47f aefd 	bne.w	410a94 <_strtod_r+0xdc>
  410c9a:	7873      	ldrb	r3, [r6, #1]
  410c9c:	2b58      	cmp	r3, #88	; 0x58
  410c9e:	f000 8336 	beq.w	41130e <_strtod_r+0x956>
  410ca2:	2b78      	cmp	r3, #120	; 0x78
  410ca4:	f000 8333 	beq.w	41130e <_strtod_r+0x956>
  410ca8:	3601      	adds	r6, #1
  410caa:	9619      	str	r6, [sp, #100]	; 0x64
  410cac:	4633      	mov	r3, r6
  410cae:	f816 4b01 	ldrb.w	r4, [r6], #1
  410cb2:	2c30      	cmp	r4, #48	; 0x30
  410cb4:	d0f9      	beq.n	410caa <_strtod_r+0x2f2>
  410cb6:	b11c      	cbz	r4, 410cc0 <_strtod_r+0x308>
  410cb8:	9306      	str	r3, [sp, #24]
  410cba:	2301      	movs	r3, #1
  410cbc:	930a      	str	r3, [sp, #40]	; 0x28
  410cbe:	e6ec      	b.n	410a9a <_strtod_r+0xe2>
  410cc0:	f04f 0800 	mov.w	r8, #0
  410cc4:	f04f 0900 	mov.w	r9, #0
  410cc8:	e6cc      	b.n	410a64 <_strtod_r+0xac>
  410cca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  410cce:	f04f 30ff 	mov.w	r0, #4294967295
  410cd2:	9303      	str	r3, [sp, #12]
  410cd4:	9002      	str	r0, [sp, #8]
  410cd6:	0722      	lsls	r2, r4, #28
  410cd8:	bf42      	ittt	mi
  410cda:	9903      	ldrmi	r1, [sp, #12]
  410cdc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
  410ce0:	9103      	strmi	r1, [sp, #12]
  410ce2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  410ce6:	e6bd      	b.n	410a64 <_strtod_r+0xac>
  410ce8:	f1ba 0f00 	cmp.w	sl, #0
  410cec:	f43f aeac 	beq.w	410a48 <_strtod_r+0x90>
  410cf0:	9d19      	ldr	r5, [sp, #100]	; 0x64
  410cf2:	1c6a      	adds	r2, r5, #1
  410cf4:	9219      	str	r2, [sp, #100]	; 0x64
  410cf6:	786c      	ldrb	r4, [r5, #1]
  410cf8:	2c2b      	cmp	r4, #43	; 0x2b
  410cfa:	f000 824b 	beq.w	411194 <_strtod_r+0x7dc>
  410cfe:	2c2d      	cmp	r4, #45	; 0x2d
  410d00:	f040 8245 	bne.w	41118e <_strtod_r+0x7d6>
  410d04:	2101      	movs	r1, #1
  410d06:	9108      	str	r1, [sp, #32]
  410d08:	1caa      	adds	r2, r5, #2
  410d0a:	9219      	str	r2, [sp, #100]	; 0x64
  410d0c:	78ac      	ldrb	r4, [r5, #2]
  410d0e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  410d12:	2a09      	cmp	r2, #9
  410d14:	f200 81e5 	bhi.w	4110e2 <_strtod_r+0x72a>
  410d18:	2c30      	cmp	r4, #48	; 0x30
  410d1a:	d106      	bne.n	410d2a <_strtod_r+0x372>
  410d1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  410d1e:	3201      	adds	r2, #1
  410d20:	9219      	str	r2, [sp, #100]	; 0x64
  410d22:	f812 4b01 	ldrb.w	r4, [r2], #1
  410d26:	2c30      	cmp	r4, #48	; 0x30
  410d28:	d0fa      	beq.n	410d20 <_strtod_r+0x368>
  410d2a:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  410d2e:	2a08      	cmp	r2, #8
  410d30:	f63f aef9 	bhi.w	410b26 <_strtod_r+0x16e>
  410d34:	9a19      	ldr	r2, [sp, #100]	; 0x64
  410d36:	920e      	str	r2, [sp, #56]	; 0x38
  410d38:	f102 0801 	add.w	r8, r2, #1
  410d3c:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  410d40:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
  410d44:	7854      	ldrb	r4, [r2, #1]
  410d46:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  410d4a:	2a09      	cmp	r2, #9
  410d4c:	d812      	bhi.n	410d74 <_strtod_r+0x3bc>
  410d4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  410d50:	f102 0c02 	add.w	ip, r2, #2
  410d54:	4662      	mov	r2, ip
  410d56:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  410d5a:	9219      	str	r2, [sp, #100]	; 0x64
  410d5c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
  410d60:	4690      	mov	r8, r2
  410d62:	f812 4b01 	ldrb.w	r4, [r2], #1
  410d66:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  410d6a:	f1bc 0f09 	cmp.w	ip, #9
  410d6e:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
  410d72:	d9f0      	bls.n	410d56 <_strtod_r+0x39e>
  410d74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  410d76:	ebc2 0808 	rsb	r8, r2, r8
  410d7a:	f1b8 0f08 	cmp.w	r8, #8
  410d7e:	f300 83f2 	bgt.w	411566 <_strtod_r+0xbae>
  410d82:	f644 621f 	movw	r2, #19999	; 0x4e1f
  410d86:	4291      	cmp	r1, r2
  410d88:	bfa8      	it	ge
  410d8a:	4611      	movge	r1, r2
  410d8c:	9a08      	ldr	r2, [sp, #32]
  410d8e:	2a00      	cmp	r2, #0
  410d90:	f43f aeca 	beq.w	410b28 <_strtod_r+0x170>
  410d94:	4249      	negs	r1, r1
  410d96:	f1ba 0f00 	cmp.w	sl, #0
  410d9a:	f47f aec8 	bne.w	410b2e <_strtod_r+0x176>
  410d9e:	e71b      	b.n	410bd8 <_strtod_r+0x220>
  410da0:	4658      	mov	r0, fp
  410da2:	9c19      	ldr	r4, [sp, #100]	; 0x64
  410da4:	f7fe fb10 	bl	40f3c8 <_localeconv_r>
  410da8:	6800      	ldr	r0, [r0, #0]
  410daa:	f7f9 fd09 	bl	40a7c0 <strlen>
  410dae:	1823      	adds	r3, r4, r0
  410db0:	9319      	str	r3, [sp, #100]	; 0x64
  410db2:	5c24      	ldrb	r4, [r4, r0]
  410db4:	2e00      	cmp	r6, #0
  410db6:	f040 81c3 	bne.w	411140 <_strtod_r+0x788>
  410dba:	2c30      	cmp	r4, #48	; 0x30
  410dbc:	f47f aefe 	bne.w	410bbc <_strtod_r+0x204>
  410dc0:	461a      	mov	r2, r3
  410dc2:	4633      	mov	r3, r6
  410dc4:	e000      	b.n	410dc8 <_strtod_r+0x410>
  410dc6:	460a      	mov	r2, r1
  410dc8:	1c51      	adds	r1, r2, #1
  410dca:	9119      	str	r1, [sp, #100]	; 0x64
  410dcc:	7854      	ldrb	r4, [r2, #1]
  410dce:	2c30      	cmp	r4, #48	; 0x30
  410dd0:	f103 0301 	add.w	r3, r3, #1
  410dd4:	d0f7      	beq.n	410dc6 <_strtod_r+0x40e>
  410dd6:	e6f2      	b.n	410bbe <_strtod_r+0x206>
  410dd8:	00413858 	.word	0x00413858
  410ddc:	9908      	ldr	r1, [sp, #32]
  410dde:	ebc8 080a 	rsb	r8, r8, sl
  410de2:	4488      	add	r8, r1
  410de4:	f1b8 0f00 	cmp.w	r8, #0
  410de8:	f340 8369 	ble.w	4114be <_strtod_r+0xb06>
  410dec:	f018 030f 	ands.w	r3, r8, #15
  410df0:	d00a      	beq.n	410e08 <_strtod_r+0x450>
  410df2:	49a7      	ldr	r1, [pc, #668]	; (411090 <_strtod_r+0x6d8>)
  410df4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  410df8:	e9d1 0100 	ldrd	r0, r1, [r1]
  410dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  410e00:	f002 f86a 	bl	412ed8 <__aeabi_dmul>
  410e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
  410e08:	f038 040f 	bics.w	r4, r8, #15
  410e0c:	f040 81c8 	bne.w	4111a0 <_strtod_r+0x7e8>
  410e10:	2200      	movs	r2, #0
  410e12:	920a      	str	r2, [sp, #40]	; 0x28
  410e14:	f8cd 9000 	str.w	r9, [sp]
  410e18:	9906      	ldr	r1, [sp, #24]
  410e1a:	4632      	mov	r2, r6
  410e1c:	4653      	mov	r3, sl
  410e1e:	4658      	mov	r0, fp
  410e20:	f7fe ff6a 	bl	40fcf8 <__s2b>
  410e24:	900b      	str	r0, [sp, #44]	; 0x2c
  410e26:	2800      	cmp	r0, #0
  410e28:	f000 82d5 	beq.w	4113d6 <_strtod_r+0xa1e>
  410e2c:	9908      	ldr	r1, [sp, #32]
  410e2e:	2200      	movs	r2, #0
  410e30:	2900      	cmp	r1, #0
  410e32:	f1c1 0300 	rsb	r3, r1, #0
  410e36:	bfa8      	it	ge
  410e38:	4613      	movge	r3, r2
  410e3a:	930e      	str	r3, [sp, #56]	; 0x38
  410e3c:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  410e40:	9206      	str	r2, [sp, #24]
  410e42:	930f      	str	r3, [sp, #60]	; 0x3c
  410e44:	4617      	mov	r7, r2
  410e46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  410e48:	4658      	mov	r0, fp
  410e4a:	6851      	ldr	r1, [r2, #4]
  410e4c:	f7fe fed8 	bl	40fc00 <_Balloc>
  410e50:	4606      	mov	r6, r0
  410e52:	2800      	cmp	r0, #0
  410e54:	f000 82cd 	beq.w	4113f2 <_strtod_r+0xa3a>
  410e58:	980b      	ldr	r0, [sp, #44]	; 0x2c
  410e5a:	6903      	ldr	r3, [r0, #16]
  410e5c:	1c9a      	adds	r2, r3, #2
  410e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  410e60:	0092      	lsls	r2, r2, #2
  410e62:	f103 010c 	add.w	r1, r3, #12
  410e66:	f106 000c 	add.w	r0, r6, #12
  410e6a:	f7f9 faa7 	bl	40a3bc <memcpy>
  410e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  410e72:	e9cd 0108 	strd	r0, r1, [sp, #32]
  410e76:	a81b      	add	r0, sp, #108	; 0x6c
  410e78:	a91c      	add	r1, sp, #112	; 0x70
  410e7a:	e88d 0003 	stmia.w	sp, {r0, r1}
  410e7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  410e82:	4658      	mov	r0, fp
  410e84:	f7ff fa2e 	bl	4102e4 <__d2b>
  410e88:	901a      	str	r0, [sp, #104]	; 0x68
  410e8a:	2800      	cmp	r0, #0
  410e8c:	f000 8412 	beq.w	4116b4 <_strtod_r+0xcfc>
  410e90:	4658      	mov	r0, fp
  410e92:	2101      	movs	r1, #1
  410e94:	f7fe ffca 	bl	40fe2c <__i2b>
  410e98:	4607      	mov	r7, r0
  410e9a:	2800      	cmp	r0, #0
  410e9c:	f000 82a9 	beq.w	4113f2 <_strtod_r+0xa3a>
  410ea0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  410ea2:	2b00      	cmp	r3, #0
  410ea4:	f2c0 8110 	blt.w	4110c8 <_strtod_r+0x710>
  410ea8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  410eac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  410eae:	4499      	add	r9, r3
  410eb0:	980a      	ldr	r0, [sp, #40]	; 0x28
  410eb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  410eb4:	1a1b      	subs	r3, r3, r0
  410eb6:	4413      	add	r3, r2
  410eb8:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
  410ebc:	428b      	cmp	r3, r1
  410ebe:	f1c2 0a36 	rsb	sl, r2, #54	; 0x36
  410ec2:	f280 80da 	bge.w	41107a <_strtod_r+0x6c2>
  410ec6:	1aca      	subs	r2, r1, r3
  410ec8:	2a1f      	cmp	r2, #31
  410eca:	ebc2 0a0a 	rsb	sl, r2, sl
  410ece:	f300 8100 	bgt.w	4110d2 <_strtod_r+0x71a>
  410ed2:	f04f 0801 	mov.w	r8, #1
  410ed6:	2300      	movs	r3, #0
  410ed8:	fa08 f802 	lsl.w	r8, r8, r2
  410edc:	930c      	str	r3, [sp, #48]	; 0x30
  410ede:	980a      	ldr	r0, [sp, #40]	; 0x28
  410ee0:	4455      	add	r5, sl
  410ee2:	44ca      	add	sl, r9
  410ee4:	45ca      	cmp	sl, r9
  410ee6:	bfb4      	ite	lt
  410ee8:	4653      	movlt	r3, sl
  410eea:	464b      	movge	r3, r9
  410eec:	4405      	add	r5, r0
  410eee:	42ab      	cmp	r3, r5
  410ef0:	bfa8      	it	ge
  410ef2:	462b      	movge	r3, r5
  410ef4:	2b00      	cmp	r3, #0
  410ef6:	dd04      	ble.n	410f02 <_strtod_r+0x54a>
  410ef8:	ebc3 0a0a 	rsb	sl, r3, sl
  410efc:	1aed      	subs	r5, r5, r3
  410efe:	ebc3 0909 	rsb	r9, r3, r9
  410f02:	990e      	ldr	r1, [sp, #56]	; 0x38
  410f04:	b1b1      	cbz	r1, 410f34 <_strtod_r+0x57c>
  410f06:	4639      	mov	r1, r7
  410f08:	4658      	mov	r0, fp
  410f0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  410f0c:	f7ff f836 	bl	40ff7c <__pow5mult>
  410f10:	4607      	mov	r7, r0
  410f12:	2800      	cmp	r0, #0
  410f14:	f000 826d 	beq.w	4113f2 <_strtod_r+0xa3a>
  410f18:	4658      	mov	r0, fp
  410f1a:	4639      	mov	r1, r7
  410f1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  410f1e:	f7fe ff8f 	bl	40fe40 <__multiply>
  410f22:	4604      	mov	r4, r0
  410f24:	2800      	cmp	r0, #0
  410f26:	f000 8264 	beq.w	4113f2 <_strtod_r+0xa3a>
  410f2a:	4658      	mov	r0, fp
  410f2c:	991a      	ldr	r1, [sp, #104]	; 0x68
  410f2e:	f7fe fe8d 	bl	40fc4c <_Bfree>
  410f32:	941a      	str	r4, [sp, #104]	; 0x68
  410f34:	f1ba 0f00 	cmp.w	sl, #0
  410f38:	dd08      	ble.n	410f4c <_strtod_r+0x594>
  410f3a:	4652      	mov	r2, sl
  410f3c:	4658      	mov	r0, fp
  410f3e:	991a      	ldr	r1, [sp, #104]	; 0x68
  410f40:	f7ff f86a 	bl	410018 <__lshift>
  410f44:	901a      	str	r0, [sp, #104]	; 0x68
  410f46:	2800      	cmp	r0, #0
  410f48:	f000 83b4 	beq.w	4116b4 <_strtod_r+0xcfc>
  410f4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410f4e:	b142      	cbz	r2, 410f62 <_strtod_r+0x5aa>
  410f50:	4631      	mov	r1, r6
  410f52:	4658      	mov	r0, fp
  410f54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410f56:	f7ff f811 	bl	40ff7c <__pow5mult>
  410f5a:	4606      	mov	r6, r0
  410f5c:	2800      	cmp	r0, #0
  410f5e:	f000 8248 	beq.w	4113f2 <_strtod_r+0xa3a>
  410f62:	2d00      	cmp	r5, #0
  410f64:	dd08      	ble.n	410f78 <_strtod_r+0x5c0>
  410f66:	4631      	mov	r1, r6
  410f68:	462a      	mov	r2, r5
  410f6a:	4658      	mov	r0, fp
  410f6c:	f7ff f854 	bl	410018 <__lshift>
  410f70:	4606      	mov	r6, r0
  410f72:	2800      	cmp	r0, #0
  410f74:	f000 823d 	beq.w	4113f2 <_strtod_r+0xa3a>
  410f78:	f1b9 0f00 	cmp.w	r9, #0
  410f7c:	dd08      	ble.n	410f90 <_strtod_r+0x5d8>
  410f7e:	4639      	mov	r1, r7
  410f80:	464a      	mov	r2, r9
  410f82:	4658      	mov	r0, fp
  410f84:	f7ff f848 	bl	410018 <__lshift>
  410f88:	4607      	mov	r7, r0
  410f8a:	2800      	cmp	r0, #0
  410f8c:	f000 8231 	beq.w	4113f2 <_strtod_r+0xa3a>
  410f90:	4658      	mov	r0, fp
  410f92:	991a      	ldr	r1, [sp, #104]	; 0x68
  410f94:	4632      	mov	r2, r6
  410f96:	f7ff f8c1 	bl	41011c <__mdiff>
  410f9a:	9006      	str	r0, [sp, #24]
  410f9c:	2800      	cmp	r0, #0
  410f9e:	f000 8228 	beq.w	4113f2 <_strtod_r+0xa3a>
  410fa2:	9906      	ldr	r1, [sp, #24]
  410fa4:	2300      	movs	r3, #0
  410fa6:	f8d1 a00c 	ldr.w	sl, [r1, #12]
  410faa:	60cb      	str	r3, [r1, #12]
  410fac:	4639      	mov	r1, r7
  410fae:	f7ff f891 	bl	4100d4 <__mcmp>
  410fb2:	2800      	cmp	r0, #0
  410fb4:	f2c0 83cb 	blt.w	41174e <_strtod_r+0xd96>
  410fb8:	f000 8388 	beq.w	4116cc <_strtod_r+0xd14>
  410fbc:	9806      	ldr	r0, [sp, #24]
  410fbe:	4639      	mov	r1, r7
  410fc0:	f7ff f9ee 	bl	4103a0 <__ratio>
  410fc4:	2200      	movs	r2, #0
  410fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  410fca:	4604      	mov	r4, r0
  410fcc:	460d      	mov	r5, r1
  410fce:	f002 f9ff 	bl	4133d0 <__aeabi_dcmple>
  410fd2:	2800      	cmp	r0, #0
  410fd4:	d064      	beq.n	4110a0 <_strtod_r+0x6e8>
  410fd6:	f1ba 0f00 	cmp.w	sl, #0
  410fda:	f000 808e 	beq.w	4110fa <_strtod_r+0x742>
  410fde:	4d2d      	ldr	r5, [pc, #180]	; (411094 <_strtod_r+0x6dc>)
  410fe0:	f8dd 900c 	ldr.w	r9, [sp, #12]
  410fe4:	2400      	movs	r4, #0
  410fe6:	4622      	mov	r2, r4
  410fe8:	462b      	mov	r3, r5
  410fea:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  410fee:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 41109c <_strtod_r+0x6e4>
  410ff2:	4b29      	ldr	r3, [pc, #164]	; (411098 <_strtod_r+0x6e0>)
  410ff4:	ea09 0808 	and.w	r8, r9, r8
  410ff8:	4598      	cmp	r8, r3
  410ffa:	f000 81bf 	beq.w	41137c <_strtod_r+0x9c4>
  410ffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411000:	b182      	cbz	r2, 411024 <_strtod_r+0x66c>
  411002:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
  411006:	d80d      	bhi.n	411024 <_strtod_r+0x66c>
  411008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  41100c:	a31e      	add	r3, pc, #120	; (adr r3, 411088 <_strtod_r+0x6d0>)
  41100e:	e9d3 2300 	ldrd	r2, r3, [r3]
  411012:	f002 f9dd 	bl	4133d0 <__aeabi_dcmple>
  411016:	2800      	cmp	r0, #0
  411018:	f040 811b 	bne.w	411252 <_strtod_r+0x89a>
  41101c:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
  411020:	ebc8 0503 	rsb	r5, r8, r3
  411024:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  411028:	f7ff f8e2 	bl	4101f0 <__ulp>
  41102c:	4602      	mov	r2, r0
  41102e:	460b      	mov	r3, r1
  411030:	4620      	mov	r0, r4
  411032:	4629      	mov	r1, r5
  411034:	f001 ff50 	bl	412ed8 <__aeabi_dmul>
  411038:	4602      	mov	r2, r0
  41103a:	460b      	mov	r3, r1
  41103c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  411040:	f001 fd98 	bl	412b74 <__adddf3>
  411044:	e9cd 0102 	strd	r0, r1, [sp, #8]
  411048:	9c03      	ldr	r4, [sp, #12]
  41104a:	990a      	ldr	r1, [sp, #40]	; 0x28
  41104c:	b921      	cbnz	r1, 411058 <_strtod_r+0x6a0>
  41104e:	4b13      	ldr	r3, [pc, #76]	; (41109c <_strtod_r+0x6e4>)
  411050:	4023      	ands	r3, r4
  411052:	4598      	cmp	r8, r3
  411054:	f000 81ed 	beq.w	411432 <_strtod_r+0xa7a>
  411058:	4658      	mov	r0, fp
  41105a:	991a      	ldr	r1, [sp, #104]	; 0x68
  41105c:	f7fe fdf6 	bl	40fc4c <_Bfree>
  411060:	4658      	mov	r0, fp
  411062:	4631      	mov	r1, r6
  411064:	f7fe fdf2 	bl	40fc4c <_Bfree>
  411068:	4658      	mov	r0, fp
  41106a:	4639      	mov	r1, r7
  41106c:	f7fe fdee 	bl	40fc4c <_Bfree>
  411070:	4658      	mov	r0, fp
  411072:	9906      	ldr	r1, [sp, #24]
  411074:	f7fe fdea 	bl	40fc4c <_Bfree>
  411078:	e6e5      	b.n	410e46 <_strtod_r+0x48e>
  41107a:	2300      	movs	r3, #0
  41107c:	930c      	str	r3, [sp, #48]	; 0x30
  41107e:	f04f 0801 	mov.w	r8, #1
  411082:	e72c      	b.n	410ede <_strtod_r+0x526>
  411084:	f3af 8000 	nop.w
  411088:	ffc00000 	.word	0xffc00000
  41108c:	41dfffff 	.word	0x41dfffff
  411090:	00413858 	.word	0x00413858
  411094:	3ff00000 	.word	0x3ff00000
  411098:	7fe00000 	.word	0x7fe00000
  41109c:	7ff00000 	.word	0x7ff00000
  4110a0:	4620      	mov	r0, r4
  4110a2:	4629      	mov	r1, r5
  4110a4:	2200      	movs	r2, #0
  4110a6:	4ba8      	ldr	r3, [pc, #672]	; (411348 <_strtod_r+0x990>)
  4110a8:	f001 ff16 	bl	412ed8 <__aeabi_dmul>
  4110ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4110b0:	f1ba 0f00 	cmp.w	sl, #0
  4110b4:	d11c      	bne.n	4110f0 <_strtod_r+0x738>
  4110b6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4110ba:	9010      	str	r0, [sp, #64]	; 0x40
  4110bc:	9111      	str	r1, [sp, #68]	; 0x44
  4110be:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  4110c2:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4110c6:	e792      	b.n	410fee <_strtod_r+0x636>
  4110c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4110ca:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  4110ce:	1acd      	subs	r5, r1, r3
  4110d0:	e6ee      	b.n	410eb0 <_strtod_r+0x4f8>
  4110d2:	4c9e      	ldr	r4, [pc, #632]	; (41134c <_strtod_r+0x994>)
  4110d4:	f04f 0801 	mov.w	r8, #1
  4110d8:	1ae4      	subs	r4, r4, r3
  4110da:	fa08 f404 	lsl.w	r4, r8, r4
  4110de:	940c      	str	r4, [sp, #48]	; 0x30
  4110e0:	e6fd      	b.n	410ede <_strtod_r+0x526>
  4110e2:	9519      	str	r5, [sp, #100]	; 0x64
  4110e4:	2100      	movs	r1, #0
  4110e6:	f1ba 0f00 	cmp.w	sl, #0
  4110ea:	f47f ad20 	bne.w	410b2e <_strtod_r+0x176>
  4110ee:	e573      	b.n	410bd8 <_strtod_r+0x220>
  4110f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4110f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  4110f8:	e7e1      	b.n	4110be <_strtod_r+0x706>
  4110fa:	9b02      	ldr	r3, [sp, #8]
  4110fc:	2b00      	cmp	r3, #0
  4110fe:	f040 8092 	bne.w	411226 <_strtod_r+0x86e>
  411102:	9803      	ldr	r0, [sp, #12]
  411104:	f3c0 0313 	ubfx	r3, r0, #0, #20
  411108:	4681      	mov	r9, r0
  41110a:	2b00      	cmp	r3, #0
  41110c:	f040 8091 	bne.w	411232 <_strtod_r+0x87a>
  411110:	4620      	mov	r0, r4
  411112:	4629      	mov	r1, r5
  411114:	2200      	movs	r2, #0
  411116:	4b8e      	ldr	r3, [pc, #568]	; (411350 <_strtod_r+0x998>)
  411118:	f002 f950 	bl	4133bc <__aeabi_dcmplt>
  41111c:	2800      	cmp	r0, #0
  41111e:	f040 8356 	bne.w	4117ce <_strtod_r+0xe16>
  411122:	4620      	mov	r0, r4
  411124:	4629      	mov	r1, r5
  411126:	2200      	movs	r2, #0
  411128:	4b87      	ldr	r3, [pc, #540]	; (411348 <_strtod_r+0x990>)
  41112a:	f001 fed5 	bl	412ed8 <__aeabi_dmul>
  41112e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  411132:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  411136:	9016      	str	r0, [sp, #88]	; 0x58
  411138:	9117      	str	r1, [sp, #92]	; 0x5c
  41113a:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  41113e:	e756      	b.n	410fee <_strtod_r+0x636>
  411140:	4640      	mov	r0, r8
  411142:	4643      	mov	r3, r8
  411144:	46b2      	mov	sl, r6
  411146:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  41114a:	2a09      	cmp	r2, #9
  41114c:	d825      	bhi.n	41119a <_strtod_r+0x7e2>
  41114e:	9c19      	ldr	r4, [sp, #100]	; 0x64
  411150:	3001      	adds	r0, #1
  411152:	2a00      	cmp	r2, #0
  411154:	f000 81af 	beq.w	4114b6 <_strtod_r+0xafe>
  411158:	2801      	cmp	r0, #1
  41115a:	4403      	add	r3, r0
  41115c:	f000 81a0 	beq.w	4114a0 <_strtod_r+0xae8>
  411160:	4450      	add	r0, sl
  411162:	3801      	subs	r0, #1
  411164:	e006      	b.n	411174 <_strtod_r+0x7bc>
  411166:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  41116a:	ea4f 0949 	mov.w	r9, r9, lsl #1
  41116e:	4582      	cmp	sl, r0
  411170:	f000 8197 	beq.w	4114a2 <_strtod_r+0xaea>
  411174:	f10a 0a01 	add.w	sl, sl, #1
  411178:	f10a 31ff 	add.w	r1, sl, #4294967295
  41117c:	2908      	cmp	r1, #8
  41117e:	ddf2      	ble.n	411166 <_strtod_r+0x7ae>
  411180:	f1ba 0f10 	cmp.w	sl, #16
  411184:	bfdc      	itt	le
  411186:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  41118a:	007f      	lslle	r7, r7, #1
  41118c:	e7ef      	b.n	41116e <_strtod_r+0x7b6>
  41118e:	2200      	movs	r2, #0
  411190:	9208      	str	r2, [sp, #32]
  411192:	e5bc      	b.n	410d0e <_strtod_r+0x356>
  411194:	2100      	movs	r1, #0
  411196:	9108      	str	r1, [sp, #32]
  411198:	e5b6      	b.n	410d08 <_strtod_r+0x350>
  41119a:	2201      	movs	r2, #1
  41119c:	920b      	str	r2, [sp, #44]	; 0x2c
  41119e:	e4bd      	b.n	410b1c <_strtod_r+0x164>
  4111a0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  4111a4:	f300 8117 	bgt.w	4113d6 <_strtod_r+0xa1e>
  4111a8:	1124      	asrs	r4, r4, #4
  4111aa:	2c01      	cmp	r4, #1
  4111ac:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 411378 <_strtod_r+0x9c0>
  4111b0:	f340 832a 	ble.w	411808 <_strtod_r+0xe50>
  4111b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4111b8:	4645      	mov	r5, r8
  4111ba:	2700      	movs	r7, #0
  4111bc:	f014 0f01 	tst.w	r4, #1
  4111c0:	f107 0701 	add.w	r7, r7, #1
  4111c4:	ea4f 0464 	mov.w	r4, r4, asr #1
  4111c8:	d003      	beq.n	4111d2 <_strtod_r+0x81a>
  4111ca:	e9d5 2300 	ldrd	r2, r3, [r5]
  4111ce:	f001 fe83 	bl	412ed8 <__aeabi_dmul>
  4111d2:	2c01      	cmp	r4, #1
  4111d4:	f105 0508 	add.w	r5, r5, #8
  4111d8:	dcf0      	bgt.n	4111bc <_strtod_r+0x804>
  4111da:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4111de:	9b03      	ldr	r3, [sp, #12]
  4111e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  4111e4:	9303      	str	r3, [sp, #12]
  4111e6:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
  4111ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4111ee:	e9d7 0100 	ldrd	r0, r1, [r7]
  4111f2:	f001 fe71 	bl	412ed8 <__aeabi_dmul>
  4111f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4111fa:	9803      	ldr	r0, [sp, #12]
  4111fc:	4a55      	ldr	r2, [pc, #340]	; (411354 <_strtod_r+0x99c>)
  4111fe:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  411202:	0d1b      	lsrs	r3, r3, #20
  411204:	051b      	lsls	r3, r3, #20
  411206:	4293      	cmp	r3, r2
  411208:	f200 80e5 	bhi.w	4113d6 <_strtod_r+0xa1e>
  41120c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  411210:	4293      	cmp	r3, r2
  411212:	f240 82d5 	bls.w	4117c0 <_strtod_r+0xe08>
  411216:	4950      	ldr	r1, [pc, #320]	; (411358 <_strtod_r+0x9a0>)
  411218:	9103      	str	r1, [sp, #12]
  41121a:	2200      	movs	r2, #0
  41121c:	f04f 33ff 	mov.w	r3, #4294967295
  411220:	920a      	str	r2, [sp, #40]	; 0x28
  411222:	9302      	str	r3, [sp, #8]
  411224:	e5f6      	b.n	410e14 <_strtod_r+0x45c>
  411226:	9902      	ldr	r1, [sp, #8]
  411228:	f8dd 900c 	ldr.w	r9, [sp, #12]
  41122c:	2901      	cmp	r1, #1
  41122e:	f000 81c9 	beq.w	4115c4 <_strtod_r+0xc0c>
  411232:	4947      	ldr	r1, [pc, #284]	; (411350 <_strtod_r+0x998>)
  411234:	4d49      	ldr	r5, [pc, #292]	; (41135c <_strtod_r+0x9a4>)
  411236:	2000      	movs	r0, #0
  411238:	2400      	movs	r4, #0
  41123a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  41123e:	e6d6      	b.n	410fee <_strtod_r+0x636>
  411240:	9919      	ldr	r1, [sp, #100]	; 0x64
  411242:	9106      	str	r1, [sp, #24]
  411244:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  411248:	f04f 0a00 	mov.w	sl, #0
  41124c:	460c      	mov	r4, r1
  41124e:	2001      	movs	r0, #1
  411250:	e77f      	b.n	411152 <_strtod_r+0x79a>
  411252:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  411256:	f002 f901 	bl	41345c <__aeabi_d2uiz>
  41125a:	2800      	cmp	r0, #0
  41125c:	f000 81ad 	beq.w	4115ba <_strtod_r+0xc02>
  411260:	f001 fdc4 	bl	412dec <__aeabi_ui2d>
  411264:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  411268:	f1ba 0f00 	cmp.w	sl, #0
  41126c:	f040 81a0 	bne.w	4115b0 <_strtod_r+0xbf8>
  411270:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  411272:	990c      	ldr	r1, [sp, #48]	; 0x30
  411274:	9114      	str	r1, [sp, #80]	; 0x50
  411276:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  41127a:	9215      	str	r2, [sp, #84]	; 0x54
  41127c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  411280:	e6cc      	b.n	41101c <_strtod_r+0x664>
  411282:	4837      	ldr	r0, [pc, #220]	; (411360 <_strtod_r+0x9a8>)
  411284:	9919      	ldr	r1, [sp, #100]	; 0x64
  411286:	e009      	b.n	41129c <_strtod_r+0x8e4>
  411288:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  41128c:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  411290:	2c19      	cmp	r4, #25
  411292:	bf98      	it	ls
  411294:	3320      	addls	r3, #32
  411296:	4293      	cmp	r3, r2
  411298:	f47f abdd 	bne.w	410a56 <_strtod_r+0x9e>
  41129c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4112a0:	2a00      	cmp	r2, #0
  4112a2:	d1f1      	bne.n	411288 <_strtod_r+0x8d0>
  4112a4:	1c4b      	adds	r3, r1, #1
  4112a6:	9319      	str	r3, [sp, #100]	; 0x64
  4112a8:	784b      	ldrb	r3, [r1, #1]
  4112aa:	2b28      	cmp	r3, #40	; 0x28
  4112ac:	f000 82e2 	beq.w	411874 <_strtod_r+0xebc>
  4112b0:	4a2c      	ldr	r2, [pc, #176]	; (411364 <_strtod_r+0x9ac>)
  4112b2:	9203      	str	r2, [sp, #12]
  4112b4:	2300      	movs	r3, #0
  4112b6:	9302      	str	r3, [sp, #8]
  4112b8:	e513      	b.n	410ce2 <_strtod_r+0x32a>
  4112ba:	482b      	ldr	r0, [pc, #172]	; (411368 <_strtod_r+0x9b0>)
  4112bc:	9919      	ldr	r1, [sp, #100]	; 0x64
  4112be:	e009      	b.n	4112d4 <_strtod_r+0x91c>
  4112c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4112c4:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  4112c8:	2c19      	cmp	r4, #25
  4112ca:	bf98      	it	ls
  4112cc:	3320      	addls	r3, #32
  4112ce:	4293      	cmp	r3, r2
  4112d0:	f47f abc1 	bne.w	410a56 <_strtod_r+0x9e>
  4112d4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4112d8:	2a00      	cmp	r2, #0
  4112da:	d1f1      	bne.n	4112c0 <_strtod_r+0x908>
  4112dc:	9119      	str	r1, [sp, #100]	; 0x64
  4112de:	4c23      	ldr	r4, [pc, #140]	; (41136c <_strtod_r+0x9b4>)
  4112e0:	4608      	mov	r0, r1
  4112e2:	e009      	b.n	4112f8 <_strtod_r+0x940>
  4112e4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4112e8:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
  4112ec:	2d19      	cmp	r5, #25
  4112ee:	bf98      	it	ls
  4112f0:	3320      	addls	r3, #32
  4112f2:	4293      	cmp	r3, r2
  4112f4:	f040 8285 	bne.w	411802 <_strtod_r+0xe4a>
  4112f8:	f814 2f01 	ldrb.w	r2, [r4, #1]!
  4112fc:	2a00      	cmp	r2, #0
  4112fe:	d1f1      	bne.n	4112e4 <_strtod_r+0x92c>
  411300:	3001      	adds	r0, #1
  411302:	9019      	str	r0, [sp, #100]	; 0x64
  411304:	4a1a      	ldr	r2, [pc, #104]	; (411370 <_strtod_r+0x9b8>)
  411306:	9203      	str	r2, [sp, #12]
  411308:	2300      	movs	r3, #0
  41130a:	9302      	str	r3, [sp, #8]
  41130c:	e4e9      	b.n	410ce2 <_strtod_r+0x32a>
  41130e:	9907      	ldr	r1, [sp, #28]
  411310:	9101      	str	r1, [sp, #4]
  411312:	ab1a      	add	r3, sp, #104	; 0x68
  411314:	9300      	str	r3, [sp, #0]
  411316:	4658      	mov	r0, fp
  411318:	a919      	add	r1, sp, #100	; 0x64
  41131a:	4a16      	ldr	r2, [pc, #88]	; (411374 <_strtod_r+0x9bc>)
  41131c:	ab1b      	add	r3, sp, #108	; 0x6c
  41131e:	f001 f8af 	bl	412480 <__gethex>
  411322:	f010 0507 	ands.w	r5, r0, #7
  411326:	4604      	mov	r4, r0
  411328:	f43f acca 	beq.w	410cc0 <_strtod_r+0x308>
  41132c:	2d06      	cmp	r5, #6
  41132e:	f040 8157 	bne.w	4115e0 <_strtod_r+0xc28>
  411332:	3601      	adds	r6, #1
  411334:	2200      	movs	r2, #0
  411336:	9619      	str	r6, [sp, #100]	; 0x64
  411338:	f04f 0800 	mov.w	r8, #0
  41133c:	f04f 0900 	mov.w	r9, #0
  411340:	9207      	str	r2, [sp, #28]
  411342:	f7ff bb8f 	b.w	410a64 <_strtod_r+0xac>
  411346:	bf00      	nop
  411348:	3fe00000 	.word	0x3fe00000
  41134c:	fffffbe3 	.word	0xfffffbe3
  411350:	3ff00000 	.word	0x3ff00000
  411354:	7ca00000 	.word	0x7ca00000
  411358:	7fefffff 	.word	0x7fefffff
  41135c:	bff00000 	.word	0xbff00000
  411360:	00413973 	.word	0x00413973
  411364:	fff80000 	.word	0xfff80000
  411368:	00413967 	.word	0x00413967
  41136c:	0041396b 	.word	0x0041396b
  411370:	7ff00000 	.word	0x7ff00000
  411374:	00413954 	.word	0x00413954
  411378:	00413920 	.word	0x00413920
  41137c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  411380:	f8cd 900c 	str.w	r9, [sp, #12]
  411384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  411388:	f7fe ff32 	bl	4101f0 <__ulp>
  41138c:	4602      	mov	r2, r0
  41138e:	460b      	mov	r3, r1
  411390:	4620      	mov	r0, r4
  411392:	4629      	mov	r1, r5
  411394:	f001 fda0 	bl	412ed8 <__aeabi_dmul>
  411398:	4602      	mov	r2, r0
  41139a:	460b      	mov	r3, r1
  41139c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4113a0:	f001 fbe8 	bl	412b74 <__adddf3>
  4113a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4113a8:	9903      	ldr	r1, [sp, #12]
  4113aa:	4aad      	ldr	r2, [pc, #692]	; (411660 <_strtod_r+0xca8>)
  4113ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4113b0:	0d1b      	lsrs	r3, r3, #20
  4113b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4113b6:	051b      	lsls	r3, r3, #20
  4113b8:	4293      	cmp	r3, r2
  4113ba:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4113be:	f240 80d5 	bls.w	41156c <_strtod_r+0xbb4>
  4113c2:	4ba8      	ldr	r3, [pc, #672]	; (411664 <_strtod_r+0xcac>)
  4113c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4113c6:	4299      	cmp	r1, r3
  4113c8:	d010      	beq.n	4113ec <_strtod_r+0xa34>
  4113ca:	4ba6      	ldr	r3, [pc, #664]	; (411664 <_strtod_r+0xcac>)
  4113cc:	9303      	str	r3, [sp, #12]
  4113ce:	f04f 30ff 	mov.w	r0, #4294967295
  4113d2:	9002      	str	r0, [sp, #8]
  4113d4:	e640      	b.n	411058 <_strtod_r+0x6a0>
  4113d6:	4aa4      	ldr	r2, [pc, #656]	; (411668 <_strtod_r+0xcb0>)
  4113d8:	9203      	str	r2, [sp, #12]
  4113da:	2000      	movs	r0, #0
  4113dc:	2322      	movs	r3, #34	; 0x22
  4113de:	9002      	str	r0, [sp, #8]
  4113e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4113e4:	f8cb 3000 	str.w	r3, [fp]
  4113e8:	f7ff bb3c 	b.w	410a64 <_strtod_r+0xac>
  4113ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4113ee:	3201      	adds	r2, #1
  4113f0:	d1eb      	bne.n	4113ca <_strtod_r+0xa12>
  4113f2:	46b2      	mov	sl, r6
  4113f4:	991a      	ldr	r1, [sp, #104]	; 0x68
  4113f6:	4a9c      	ldr	r2, [pc, #624]	; (411668 <_strtod_r+0xcb0>)
  4113f8:	9203      	str	r2, [sp, #12]
  4113fa:	2000      	movs	r0, #0
  4113fc:	9002      	str	r0, [sp, #8]
  4113fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  411402:	2322      	movs	r3, #34	; 0x22
  411404:	f8cb 3000 	str.w	r3, [fp]
  411408:	4658      	mov	r0, fp
  41140a:	f7fe fc1f 	bl	40fc4c <_Bfree>
  41140e:	4658      	mov	r0, fp
  411410:	4651      	mov	r1, sl
  411412:	f7fe fc1b 	bl	40fc4c <_Bfree>
  411416:	4658      	mov	r0, fp
  411418:	4639      	mov	r1, r7
  41141a:	f7fe fc17 	bl	40fc4c <_Bfree>
  41141e:	4658      	mov	r0, fp
  411420:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411422:	f7fe fc13 	bl	40fc4c <_Bfree>
  411426:	4658      	mov	r0, fp
  411428:	9906      	ldr	r1, [sp, #24]
  41142a:	f7fe fc0f 	bl	40fc4c <_Bfree>
  41142e:	f7ff bb19 	b.w	410a64 <_strtod_r+0xac>
  411432:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  411436:	f001 ffe9 	bl	41340c <__aeabi_d2iz>
  41143a:	f001 fce7 	bl	412e0c <__aeabi_i2d>
  41143e:	4602      	mov	r2, r0
  411440:	460b      	mov	r3, r1
  411442:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  411446:	f001 fb93 	bl	412b70 <__aeabi_dsub>
  41144a:	4680      	mov	r8, r0
  41144c:	4689      	mov	r9, r1
  41144e:	f1ba 0f00 	cmp.w	sl, #0
  411452:	d111      	bne.n	411478 <_strtod_r+0xac0>
  411454:	9a02      	ldr	r2, [sp, #8]
  411456:	b97a      	cbnz	r2, 411478 <_strtod_r+0xac0>
  411458:	f3c4 0413 	ubfx	r4, r4, #0, #20
  41145c:	b964      	cbnz	r4, 411478 <_strtod_r+0xac0>
  41145e:	a37a      	add	r3, pc, #488	; (adr r3, 411648 <_strtod_r+0xc90>)
  411460:	e9d3 2300 	ldrd	r2, r3, [r3]
  411464:	f001 ffaa 	bl	4133bc <__aeabi_dcmplt>
  411468:	2800      	cmp	r0, #0
  41146a:	f43f adf5 	beq.w	411058 <_strtod_r+0x6a0>
  41146e:	46b2      	mov	sl, r6
  411470:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  411474:	991a      	ldr	r1, [sp, #104]	; 0x68
  411476:	e7c7      	b.n	411408 <_strtod_r+0xa50>
  411478:	4640      	mov	r0, r8
  41147a:	4649      	mov	r1, r9
  41147c:	a374      	add	r3, pc, #464	; (adr r3, 411650 <_strtod_r+0xc98>)
  41147e:	e9d3 2300 	ldrd	r2, r3, [r3]
  411482:	f001 ff9b 	bl	4133bc <__aeabi_dcmplt>
  411486:	2800      	cmp	r0, #0
  411488:	d1f1      	bne.n	41146e <_strtod_r+0xab6>
  41148a:	4640      	mov	r0, r8
  41148c:	4649      	mov	r1, r9
  41148e:	a372      	add	r3, pc, #456	; (adr r3, 411658 <_strtod_r+0xca0>)
  411490:	e9d3 2300 	ldrd	r2, r3, [r3]
  411494:	f001 ffb0 	bl	4133f8 <__aeabi_dcmpgt>
  411498:	2800      	cmp	r0, #0
  41149a:	f43f addd 	beq.w	411058 <_strtod_r+0x6a0>
  41149e:	e7e6      	b.n	41146e <_strtod_r+0xab6>
  4114a0:	4650      	mov	r0, sl
  4114a2:	2808      	cmp	r0, #8
  4114a4:	f100 0a01 	add.w	sl, r0, #1
  4114a8:	f300 8107 	bgt.w	4116ba <_strtod_r+0xd02>
  4114ac:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  4114b0:	eb02 0949 	add.w	r9, r2, r9, lsl #1
  4114b4:	2000      	movs	r0, #0
  4114b6:	1c62      	adds	r2, r4, #1
  4114b8:	9219      	str	r2, [sp, #100]	; 0x64
  4114ba:	7864      	ldrb	r4, [r4, #1]
  4114bc:	e643      	b.n	411146 <_strtod_r+0x78e>
  4114be:	f43f aca7 	beq.w	410e10 <_strtod_r+0x458>
  4114c2:	f1c8 0400 	rsb	r4, r8, #0
  4114c6:	f014 030f 	ands.w	r3, r4, #15
  4114ca:	d00a      	beq.n	4114e2 <_strtod_r+0xb2a>
  4114cc:	4a67      	ldr	r2, [pc, #412]	; (41166c <_strtod_r+0xcb4>)
  4114ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4114d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4114d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4114da:	f001 fe27 	bl	41312c <__aeabi_ddiv>
  4114de:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4114e2:	1124      	asrs	r4, r4, #4
  4114e4:	f43f ac94 	beq.w	410e10 <_strtod_r+0x458>
  4114e8:	2c1f      	cmp	r4, #31
  4114ea:	dc33      	bgt.n	411554 <_strtod_r+0xb9c>
  4114ec:	f014 0f10 	tst.w	r4, #16
  4114f0:	bf14      	ite	ne
  4114f2:	216a      	movne	r1, #106	; 0x6a
  4114f4:	2100      	moveq	r1, #0
  4114f6:	2c00      	cmp	r4, #0
  4114f8:	910a      	str	r1, [sp, #40]	; 0x28
  4114fa:	dd0e      	ble.n	41151a <_strtod_r+0xb62>
  4114fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  411500:	4d5b      	ldr	r5, [pc, #364]	; (411670 <_strtod_r+0xcb8>)
  411502:	07e3      	lsls	r3, r4, #31
  411504:	d503      	bpl.n	41150e <_strtod_r+0xb56>
  411506:	e9d5 2300 	ldrd	r2, r3, [r5]
  41150a:	f001 fce5 	bl	412ed8 <__aeabi_dmul>
  41150e:	1064      	asrs	r4, r4, #1
  411510:	f105 0508 	add.w	r5, r5, #8
  411514:	d1f5      	bne.n	411502 <_strtod_r+0xb4a>
  411516:	e9cd 0102 	strd	r0, r1, [sp, #8]
  41151a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  41151c:	b18a      	cbz	r2, 411542 <_strtod_r+0xb8a>
  41151e:	9803      	ldr	r0, [sp, #12]
  411520:	f3c0 530a 	ubfx	r3, r0, #20, #11
  411524:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  411528:	2b00      	cmp	r3, #0
  41152a:	dd0a      	ble.n	411542 <_strtod_r+0xb8a>
  41152c:	2b1f      	cmp	r3, #31
  41152e:	f340 81bd 	ble.w	4118ac <_strtod_r+0xef4>
  411532:	2100      	movs	r1, #0
  411534:	2b34      	cmp	r3, #52	; 0x34
  411536:	9102      	str	r1, [sp, #8]
  411538:	f340 81c0 	ble.w	4118bc <_strtod_r+0xf04>
  41153c:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
  411540:	9203      	str	r2, [sp, #12]
  411542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  411546:	2200      	movs	r2, #0
  411548:	2300      	movs	r3, #0
  41154a:	f001 ff2d 	bl	4133a8 <__aeabi_dcmpeq>
  41154e:	2800      	cmp	r0, #0
  411550:	f43f ac60 	beq.w	410e14 <_strtod_r+0x45c>
  411554:	2322      	movs	r3, #34	; 0x22
  411556:	f8cb 3000 	str.w	r3, [fp]
  41155a:	f04f 0800 	mov.w	r8, #0
  41155e:	f04f 0900 	mov.w	r9, #0
  411562:	f7ff ba7f 	b.w	410a64 <_strtod_r+0xac>
  411566:	f644 611f 	movw	r1, #19999	; 0x4e1f
  41156a:	e40f      	b.n	410d8c <_strtod_r+0x3d4>
  41156c:	9903      	ldr	r1, [sp, #12]
  41156e:	f101 7454 	add.w	r4, r1, #55574528	; 0x3500000
  411572:	9403      	str	r4, [sp, #12]
  411574:	e569      	b.n	41104a <_strtod_r+0x692>
  411576:	9808      	ldr	r0, [sp, #32]
  411578:	f1ca 0325 	rsb	r3, sl, #37	; 0x25
  41157c:	4298      	cmp	r0, r3
  41157e:	f73f ac2d 	bgt.w	410ddc <_strtod_r+0x424>
  411582:	4c3a      	ldr	r4, [pc, #232]	; (41166c <_strtod_r+0xcb4>)
  411584:	f1ca 050f 	rsb	r5, sl, #15
  411588:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  41158c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  411590:	e9d1 0100 	ldrd	r0, r1, [r1]
  411594:	f001 fca0 	bl	412ed8 <__aeabi_dmul>
  411598:	9a08      	ldr	r2, [sp, #32]
  41159a:	1b55      	subs	r5, r2, r5
  41159c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  4115a0:	e9d4 2300 	ldrd	r2, r3, [r4]
  4115a4:	f001 fc98 	bl	412ed8 <__aeabi_dmul>
  4115a8:	4680      	mov	r8, r0
  4115aa:	4689      	mov	r9, r1
  4115ac:	f7ff ba5a 	b.w	410a64 <_strtod_r+0xac>
  4115b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4115b4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  4115b8:	e660      	b.n	41127c <_strtod_r+0x8c4>
  4115ba:	492e      	ldr	r1, [pc, #184]	; (411674 <_strtod_r+0xcbc>)
  4115bc:	2000      	movs	r0, #0
  4115be:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4115c2:	e651      	b.n	411268 <_strtod_r+0x8b0>
  4115c4:	464a      	mov	r2, r9
  4115c6:	2a00      	cmp	r2, #0
  4115c8:	f47f ae33 	bne.w	411232 <_strtod_r+0x87a>
  4115cc:	46b2      	mov	sl, r6
  4115ce:	2322      	movs	r3, #34	; 0x22
  4115d0:	f8cb 3000 	str.w	r3, [fp]
  4115d4:	991a      	ldr	r1, [sp, #104]	; 0x68
  4115d6:	f04f 0800 	mov.w	r8, #0
  4115da:	f04f 0900 	mov.w	r9, #0
  4115de:	e713      	b.n	411408 <_strtod_r+0xa50>
  4115e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4115e2:	b13a      	cbz	r2, 4115f4 <_strtod_r+0xc3c>
  4115e4:	a81c      	add	r0, sp, #112	; 0x70
  4115e6:	2135      	movs	r1, #53	; 0x35
  4115e8:	f7fe ff02 	bl	4103f0 <__copybits>
  4115ec:	4658      	mov	r0, fp
  4115ee:	991a      	ldr	r1, [sp, #104]	; 0x68
  4115f0:	f7fe fb2c 	bl	40fc4c <_Bfree>
  4115f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4115f6:	2d06      	cmp	r5, #6
  4115f8:	f63f ab6d 	bhi.w	410cd6 <_strtod_r+0x31e>
  4115fc:	a001      	add	r0, pc, #4	; (adr r0, 411604 <_strtod_r+0xc4c>)
  4115fe:	f850 f025 	ldr.w	pc, [r0, r5, lsl #2]
  411602:	bf00      	nop
  411604:	00411639 	.word	0x00411639
  411608:	00411679 	.word	0x00411679
  41160c:	0041162d 	.word	0x0041162d
  411610:	00411621 	.word	0x00411621
  411614:	00410ccb 	.word	0x00410ccb
  411618:	00411679 	.word	0x00411679
  41161c:	00411639 	.word	0x00411639
  411620:	4911      	ldr	r1, [pc, #68]	; (411668 <_strtod_r+0xcb0>)
  411622:	9103      	str	r1, [sp, #12]
  411624:	2200      	movs	r2, #0
  411626:	9202      	str	r2, [sp, #8]
  411628:	f7ff bb55 	b.w	410cd6 <_strtod_r+0x31e>
  41162c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  41162e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  411630:	9202      	str	r2, [sp, #8]
  411632:	9303      	str	r3, [sp, #12]
  411634:	f7ff bb4f 	b.w	410cd6 <_strtod_r+0x31e>
  411638:	2100      	movs	r1, #0
  41163a:	9103      	str	r1, [sp, #12]
  41163c:	9102      	str	r1, [sp, #8]
  41163e:	f7ff bb4a 	b.w	410cd6 <_strtod_r+0x31e>
  411642:	bf00      	nop
  411644:	f3af 8000 	nop.w
  411648:	94a03595 	.word	0x94a03595
  41164c:	3fcfffff 	.word	0x3fcfffff
  411650:	94a03595 	.word	0x94a03595
  411654:	3fdfffff 	.word	0x3fdfffff
  411658:	35afe535 	.word	0x35afe535
  41165c:	3fe00000 	.word	0x3fe00000
  411660:	7c9fffff 	.word	0x7c9fffff
  411664:	7fefffff 	.word	0x7fefffff
  411668:	7ff00000 	.word	0x7ff00000
  41166c:	00413858 	.word	0x00413858
  411670:	00413990 	.word	0x00413990
  411674:	3ff00000 	.word	0x3ff00000
  411678:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  41167a:	981c      	ldr	r0, [sp, #112]	; 0x70
  41167c:	9002      	str	r0, [sp, #8]
  41167e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  411682:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  411686:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  41168a:	9203      	str	r2, [sp, #12]
  41168c:	f7ff bb23 	b.w	410cd6 <_strtod_r+0x31e>
  411690:	9b08      	ldr	r3, [sp, #32]
  411692:	3316      	adds	r3, #22
  411694:	f6ff aba2 	blt.w	410ddc <_strtod_r+0x424>
  411698:	4b8e      	ldr	r3, [pc, #568]	; (4118d4 <_strtod_r+0xf1c>)
  41169a:	9808      	ldr	r0, [sp, #32]
  41169c:	eba3 0ac0 	sub.w	sl, r3, r0, lsl #3
  4116a0:	e9da 2300 	ldrd	r2, r3, [sl]
  4116a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4116a8:	f001 fd40 	bl	41312c <__aeabi_ddiv>
  4116ac:	4680      	mov	r8, r0
  4116ae:	4689      	mov	r9, r1
  4116b0:	f7ff b9d8 	b.w	410a64 <_strtod_r+0xac>
  4116b4:	46b2      	mov	sl, r6
  4116b6:	4601      	mov	r1, r0
  4116b8:	e69d      	b.n	4113f6 <_strtod_r+0xa3e>
  4116ba:	f1ba 0f10 	cmp.w	sl, #16
  4116be:	bfdc      	itt	le
  4116c0:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  4116c4:	eb02 0747 	addle.w	r7, r2, r7, lsl #1
  4116c8:	2000      	movs	r0, #0
  4116ca:	e6f4      	b.n	4114b6 <_strtod_r+0xafe>
  4116cc:	4655      	mov	r5, sl
  4116ce:	46c4      	mov	ip, r8
  4116d0:	46b2      	mov	sl, r6
  4116d2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4116d6:	2d00      	cmp	r5, #0
  4116d8:	f000 8082 	beq.w	4117e0 <_strtod_r+0xe28>
  4116dc:	9a03      	ldr	r2, [sp, #12]
  4116de:	4b7e      	ldr	r3, [pc, #504]	; (4118d8 <_strtod_r+0xf20>)
  4116e0:	f3c2 0113 	ubfx	r1, r2, #0, #20
  4116e4:	4299      	cmp	r1, r3
  4116e6:	f000 80a3 	beq.w	411830 <_strtod_r+0xe78>
  4116ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4116ec:	2b00      	cmp	r3, #0
  4116ee:	f000 8083 	beq.w	4117f8 <_strtod_r+0xe40>
  4116f2:	9803      	ldr	r0, [sp, #12]
  4116f4:	4203      	tst	r3, r0
  4116f6:	d00f      	beq.n	411718 <_strtod_r+0xd60>
  4116f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4116fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4116fe:	2d00      	cmp	r5, #0
  411700:	f000 8084 	beq.w	41180c <_strtod_r+0xe54>
  411704:	f7ff f938 	bl	410978 <sulp>
  411708:	4602      	mov	r2, r0
  41170a:	460b      	mov	r3, r1
  41170c:	4640      	mov	r0, r8
  41170e:	4649      	mov	r1, r9
  411710:	f001 fa30 	bl	412b74 <__adddf3>
  411714:	4680      	mov	r8, r0
  411716:	4689      	mov	r9, r1
  411718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41171a:	b1b3      	cbz	r3, 41174a <_strtod_r+0xd92>
  41171c:	486f      	ldr	r0, [pc, #444]	; (4118dc <_strtod_r+0xf24>)
  41171e:	9013      	str	r0, [sp, #76]	; 0x4c
  411720:	2100      	movs	r1, #0
  411722:	9112      	str	r1, [sp, #72]	; 0x48
  411724:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  411728:	4640      	mov	r0, r8
  41172a:	4649      	mov	r1, r9
  41172c:	f001 fbd4 	bl	412ed8 <__aeabi_dmul>
  411730:	4680      	mov	r8, r0
  411732:	4689      	mov	r9, r1
  411734:	e9cd 8902 	strd	r8, r9, [sp, #8]
  411738:	9a03      	ldr	r2, [sp, #12]
  41173a:	b932      	cbnz	r2, 41174a <_strtod_r+0xd92>
  41173c:	9b02      	ldr	r3, [sp, #8]
  41173e:	b923      	cbnz	r3, 41174a <_strtod_r+0xd92>
  411740:	2322      	movs	r3, #34	; 0x22
  411742:	991a      	ldr	r1, [sp, #104]	; 0x68
  411744:	f8cb 3000 	str.w	r3, [fp]
  411748:	e65e      	b.n	411408 <_strtod_r+0xa50>
  41174a:	991a      	ldr	r1, [sp, #104]	; 0x68
  41174c:	e65c      	b.n	411408 <_strtod_r+0xa50>
  41174e:	4655      	mov	r5, sl
  411750:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  411754:	46b2      	mov	sl, r6
  411756:	2d00      	cmp	r5, #0
  411758:	d1de      	bne.n	411718 <_strtod_r+0xd60>
  41175a:	9a02      	ldr	r2, [sp, #8]
  41175c:	2a00      	cmp	r2, #0
  41175e:	d1db      	bne.n	411718 <_strtod_r+0xd60>
  411760:	9803      	ldr	r0, [sp, #12]
  411762:	f3c0 0313 	ubfx	r3, r0, #0, #20
  411766:	4604      	mov	r4, r0
  411768:	2b00      	cmp	r3, #0
  41176a:	d1d5      	bne.n	411718 <_strtod_r+0xd60>
  41176c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  411770:	0d1b      	lsrs	r3, r3, #20
  411772:	051b      	lsls	r3, r3, #20
  411774:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  411778:	d9ce      	bls.n	411718 <_strtod_r+0xd60>
  41177a:	9906      	ldr	r1, [sp, #24]
  41177c:	694b      	ldr	r3, [r1, #20]
  41177e:	b913      	cbnz	r3, 411786 <_strtod_r+0xdce>
  411780:	690b      	ldr	r3, [r1, #16]
  411782:	2b01      	cmp	r3, #1
  411784:	ddc8      	ble.n	411718 <_strtod_r+0xd60>
  411786:	9906      	ldr	r1, [sp, #24]
  411788:	2201      	movs	r2, #1
  41178a:	4658      	mov	r0, fp
  41178c:	f7fe fc44 	bl	410018 <__lshift>
  411790:	4639      	mov	r1, r7
  411792:	9006      	str	r0, [sp, #24]
  411794:	f7fe fc9e 	bl	4100d4 <__mcmp>
  411798:	2800      	cmp	r0, #0
  41179a:	ddbd      	ble.n	411718 <_strtod_r+0xd60>
  41179c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41179e:	2b00      	cmp	r3, #0
  4117a0:	d17a      	bne.n	411898 <_strtod_r+0xee0>
  4117a2:	4b4f      	ldr	r3, [pc, #316]	; (4118e0 <_strtod_r+0xf28>)
  4117a4:	4023      	ands	r3, r4
  4117a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  4117aa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  4117ae:	ea6f 5003 	mvn.w	r0, r3, lsl #20
  4117b2:	f04f 31ff 	mov.w	r1, #4294967295
  4117b6:	9003      	str	r0, [sp, #12]
  4117b8:	9102      	str	r1, [sp, #8]
  4117ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4117be:	e7ab      	b.n	411718 <_strtod_r+0xd60>
  4117c0:	f100 7154 	add.w	r1, r0, #55574528	; 0x3500000
  4117c4:	2000      	movs	r0, #0
  4117c6:	9103      	str	r1, [sp, #12]
  4117c8:	900a      	str	r0, [sp, #40]	; 0x28
  4117ca:	f7ff bb23 	b.w	410e14 <_strtod_r+0x45c>
  4117ce:	4b45      	ldr	r3, [pc, #276]	; (4118e4 <_strtod_r+0xf2c>)
  4117d0:	4945      	ldr	r1, [pc, #276]	; (4118e8 <_strtod_r+0xf30>)
  4117d2:	2200      	movs	r2, #0
  4117d4:	2000      	movs	r0, #0
  4117d6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  4117da:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4117de:	e4ac      	b.n	41113a <_strtod_r+0x782>
  4117e0:	9903      	ldr	r1, [sp, #12]
  4117e2:	f3c1 0313 	ubfx	r3, r1, #0, #20
  4117e6:	460c      	mov	r4, r1
  4117e8:	2b00      	cmp	r3, #0
  4117ea:	f47f af7e 	bne.w	4116ea <_strtod_r+0xd32>
  4117ee:	9a02      	ldr	r2, [sp, #8]
  4117f0:	2a00      	cmp	r2, #0
  4117f2:	f47f af7a 	bne.w	4116ea <_strtod_r+0xd32>
  4117f6:	e7d1      	b.n	41179c <_strtod_r+0xde4>
  4117f8:	9902      	ldr	r1, [sp, #8]
  4117fa:	ea1c 0f01 	tst.w	ip, r1
  4117fe:	d08b      	beq.n	411718 <_strtod_r+0xd60>
  411800:	e77a      	b.n	4116f8 <_strtod_r+0xd40>
  411802:	3101      	adds	r1, #1
  411804:	9119      	str	r1, [sp, #100]	; 0x64
  411806:	e57d      	b.n	411304 <_strtod_r+0x94c>
  411808:	2700      	movs	r7, #0
  41180a:	e4e8      	b.n	4111de <_strtod_r+0x826>
  41180c:	f7ff f8b4 	bl	410978 <sulp>
  411810:	4602      	mov	r2, r0
  411812:	460b      	mov	r3, r1
  411814:	4640      	mov	r0, r8
  411816:	4649      	mov	r1, r9
  411818:	f001 f9aa 	bl	412b70 <__aeabi_dsub>
  41181c:	2200      	movs	r2, #0
  41181e:	2300      	movs	r3, #0
  411820:	4680      	mov	r8, r0
  411822:	4689      	mov	r9, r1
  411824:	f001 fdc0 	bl	4133a8 <__aeabi_dcmpeq>
  411828:	2800      	cmp	r0, #0
  41182a:	f47f aed0 	bne.w	4115ce <_strtod_r+0xc16>
  41182e:	e773      	b.n	411718 <_strtod_r+0xd60>
  411830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411832:	9902      	ldr	r1, [sp, #8]
  411834:	b1db      	cbz	r3, 41186e <_strtod_r+0xeb6>
  411836:	4b2a      	ldr	r3, [pc, #168]	; (4118e0 <_strtod_r+0xf28>)
  411838:	4013      	ands	r3, r2
  41183a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  41183e:	d816      	bhi.n	41186e <_strtod_r+0xeb6>
  411840:	0d1b      	lsrs	r3, r3, #20
  411842:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  411846:	f04f 30ff 	mov.w	r0, #4294967295
  41184a:	fa00 f303 	lsl.w	r3, r0, r3
  41184e:	4299      	cmp	r1, r3
  411850:	f47f af4b 	bne.w	4116ea <_strtod_r+0xd32>
  411854:	4b25      	ldr	r3, [pc, #148]	; (4118ec <_strtod_r+0xf34>)
  411856:	429a      	cmp	r2, r3
  411858:	d038      	beq.n	4118cc <_strtod_r+0xf14>
  41185a:	4b21      	ldr	r3, [pc, #132]	; (4118e0 <_strtod_r+0xf28>)
  41185c:	4013      	ands	r3, r2
  41185e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  411862:	2000      	movs	r0, #0
  411864:	9303      	str	r3, [sp, #12]
  411866:	9002      	str	r0, [sp, #8]
  411868:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  41186c:	e754      	b.n	411718 <_strtod_r+0xd60>
  41186e:	f04f 33ff 	mov.w	r3, #4294967295
  411872:	e7ec      	b.n	41184e <_strtod_r+0xe96>
  411874:	a819      	add	r0, sp, #100	; 0x64
  411876:	491e      	ldr	r1, [pc, #120]	; (4118f0 <_strtod_r+0xf38>)
  411878:	aa1c      	add	r2, sp, #112	; 0x70
  41187a:	f001 f899 	bl	4129b0 <__hexnan>
  41187e:	2805      	cmp	r0, #5
  411880:	f47f ad16 	bne.w	4112b0 <_strtod_r+0x8f8>
  411884:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  411886:	991c      	ldr	r1, [sp, #112]	; 0x70
  411888:	9102      	str	r1, [sp, #8]
  41188a:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  41188e:	f443 00e0 	orr.w	r0, r3, #7340032	; 0x700000
  411892:	9003      	str	r0, [sp, #12]
  411894:	f7ff ba25 	b.w	410ce2 <_strtod_r+0x32a>
  411898:	4b11      	ldr	r3, [pc, #68]	; (4118e0 <_strtod_r+0xf28>)
  41189a:	4023      	ands	r3, r4
  41189c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  4118a0:	d881      	bhi.n	4117a6 <_strtod_r+0xdee>
  4118a2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  4118a6:	f63f af39 	bhi.w	41171c <_strtod_r+0xd64>
  4118aa:	e690      	b.n	4115ce <_strtod_r+0xc16>
  4118ac:	9802      	ldr	r0, [sp, #8]
  4118ae:	f04f 32ff 	mov.w	r2, #4294967295
  4118b2:	fa02 f303 	lsl.w	r3, r2, r3
  4118b6:	4003      	ands	r3, r0
  4118b8:	9302      	str	r3, [sp, #8]
  4118ba:	e642      	b.n	411542 <_strtod_r+0xb8a>
  4118bc:	3b20      	subs	r3, #32
  4118be:	f04f 31ff 	mov.w	r1, #4294967295
  4118c2:	fa01 f303 	lsl.w	r3, r1, r3
  4118c6:	4003      	ands	r3, r0
  4118c8:	9303      	str	r3, [sp, #12]
  4118ca:	e63a      	b.n	411542 <_strtod_r+0xb8a>
  4118cc:	3101      	adds	r1, #1
  4118ce:	d1c4      	bne.n	41185a <_strtod_r+0xea2>
  4118d0:	e590      	b.n	4113f4 <_strtod_r+0xa3c>
  4118d2:	bf00      	nop
  4118d4:	00413858 	.word	0x00413858
  4118d8:	000fffff 	.word	0x000fffff
  4118dc:	39500000 	.word	0x39500000
  4118e0:	7ff00000 	.word	0x7ff00000
  4118e4:	bfe00000 	.word	0xbfe00000
  4118e8:	3fe00000 	.word	0x3fe00000
  4118ec:	7fefffff 	.word	0x7fefffff
  4118f0:	00413978 	.word	0x00413978
  4118f4:	f3af 8000 	nop.w

004118f8 <_strtol_r>:
  4118f8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4118fc:	4c42      	ldr	r4, [pc, #264]	; (411a08 <_strtol_r+0x110>)
  4118fe:	b082      	sub	sp, #8
  411900:	f8d4 c000 	ldr.w	ip, [r4]
  411904:	9001      	str	r0, [sp, #4]
  411906:	460e      	mov	r6, r1
  411908:	e000      	b.n	41190c <_strtol_r+0x14>
  41190a:	4626      	mov	r6, r4
  41190c:	4634      	mov	r4, r6
  41190e:	f814 5b01 	ldrb.w	r5, [r4], #1
  411912:	eb0c 0005 	add.w	r0, ip, r5
  411916:	7840      	ldrb	r0, [r0, #1]
  411918:	f000 0008 	and.w	r0, r0, #8
  41191c:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  411920:	2800      	cmp	r0, #0
  411922:	d1f2      	bne.n	41190a <_strtol_r+0x12>
  411924:	2d2d      	cmp	r5, #45	; 0x2d
  411926:	d05b      	beq.n	4119e0 <_strtol_r+0xe8>
  411928:	2d2b      	cmp	r5, #43	; 0x2b
  41192a:	bf04      	itt	eq
  41192c:	7875      	ldrbeq	r5, [r6, #1]
  41192e:	1cb4      	addeq	r4, r6, #2
  411930:	f033 0010 	bics.w	r0, r3, #16
  411934:	d03c      	beq.n	4119b0 <_strtol_r+0xb8>
  411936:	4699      	mov	r9, r3
  411938:	f1ba 0f00 	cmp.w	sl, #0
  41193c:	bf0c      	ite	eq
  41193e:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
  411942:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
  411946:	fbbb f8f9 	udiv	r8, fp, r9
  41194a:	2700      	movs	r7, #0
  41194c:	fb09 bb18 	mls	fp, r9, r8, fp
  411950:	4638      	mov	r0, r7
  411952:	e00c      	b.n	41196e <_strtol_r+0x76>
  411954:	3d30      	subs	r5, #48	; 0x30
  411956:	42ab      	cmp	r3, r5
  411958:	dd19      	ble.n	41198e <_strtol_r+0x96>
  41195a:	1c7e      	adds	r6, r7, #1
  41195c:	d005      	beq.n	41196a <_strtol_r+0x72>
  41195e:	4540      	cmp	r0, r8
  411960:	d823      	bhi.n	4119aa <_strtol_r+0xb2>
  411962:	d020      	beq.n	4119a6 <_strtol_r+0xae>
  411964:	fb09 5000 	mla	r0, r9, r0, r5
  411968:	2701      	movs	r7, #1
  41196a:	f814 5b01 	ldrb.w	r5, [r4], #1
  41196e:	eb0c 0605 	add.w	r6, ip, r5
  411972:	7876      	ldrb	r6, [r6, #1]
  411974:	f016 0f04 	tst.w	r6, #4
  411978:	d1ec      	bne.n	411954 <_strtol_r+0x5c>
  41197a:	f016 0603 	ands.w	r6, r6, #3
  41197e:	d006      	beq.n	41198e <_strtol_r+0x96>
  411980:	2e01      	cmp	r6, #1
  411982:	bf14      	ite	ne
  411984:	2657      	movne	r6, #87	; 0x57
  411986:	2637      	moveq	r6, #55	; 0x37
  411988:	1bad      	subs	r5, r5, r6
  41198a:	42ab      	cmp	r3, r5
  41198c:	dce5      	bgt.n	41195a <_strtol_r+0x62>
  41198e:	1c7b      	adds	r3, r7, #1
  411990:	d015      	beq.n	4119be <_strtol_r+0xc6>
  411992:	f1ba 0f00 	cmp.w	sl, #0
  411996:	d121      	bne.n	4119dc <_strtol_r+0xe4>
  411998:	b10a      	cbz	r2, 41199e <_strtol_r+0xa6>
  41199a:	b9ef      	cbnz	r7, 4119d8 <_strtol_r+0xe0>
  41199c:	6011      	str	r1, [r2, #0]
  41199e:	b002      	add	sp, #8
  4119a0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4119a4:	4770      	bx	lr
  4119a6:	455d      	cmp	r5, fp
  4119a8:	dddc      	ble.n	411964 <_strtol_r+0x6c>
  4119aa:	f04f 37ff 	mov.w	r7, #4294967295
  4119ae:	e7dc      	b.n	41196a <_strtol_r+0x72>
  4119b0:	2d30      	cmp	r5, #48	; 0x30
  4119b2:	d01a      	beq.n	4119ea <_strtol_r+0xf2>
  4119b4:	2b00      	cmp	r3, #0
  4119b6:	d1be      	bne.n	411936 <_strtol_r+0x3e>
  4119b8:	230a      	movs	r3, #10
  4119ba:	4699      	mov	r9, r3
  4119bc:	e7bc      	b.n	411938 <_strtol_r+0x40>
  4119be:	9901      	ldr	r1, [sp, #4]
  4119c0:	f1ba 0f00 	cmp.w	sl, #0
  4119c4:	f04f 0322 	mov.w	r3, #34	; 0x22
  4119c8:	bf0c      	ite	eq
  4119ca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4119ce:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  4119d2:	600b      	str	r3, [r1, #0]
  4119d4:	2a00      	cmp	r2, #0
  4119d6:	d0e2      	beq.n	41199e <_strtol_r+0xa6>
  4119d8:	1e61      	subs	r1, r4, #1
  4119da:	e7df      	b.n	41199c <_strtol_r+0xa4>
  4119dc:	4240      	negs	r0, r0
  4119de:	e7db      	b.n	411998 <_strtol_r+0xa0>
  4119e0:	1cb4      	adds	r4, r6, #2
  4119e2:	7875      	ldrb	r5, [r6, #1]
  4119e4:	f04f 0a01 	mov.w	sl, #1
  4119e8:	e7a2      	b.n	411930 <_strtol_r+0x38>
  4119ea:	7820      	ldrb	r0, [r4, #0]
  4119ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  4119f0:	2858      	cmp	r0, #88	; 0x58
  4119f2:	d003      	beq.n	4119fc <_strtol_r+0x104>
  4119f4:	2b00      	cmp	r3, #0
  4119f6:	d19e      	bne.n	411936 <_strtol_r+0x3e>
  4119f8:	2308      	movs	r3, #8
  4119fa:	e79c      	b.n	411936 <_strtol_r+0x3e>
  4119fc:	2310      	movs	r3, #16
  4119fe:	7865      	ldrb	r5, [r4, #1]
  411a00:	4699      	mov	r9, r3
  411a02:	3402      	adds	r4, #2
  411a04:	e798      	b.n	411938 <_strtol_r+0x40>
  411a06:	bf00      	nop
  411a08:	20000644 	.word	0x20000644

00411a0c <_strtoll_r>:
  411a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411a10:	4c64      	ldr	r4, [pc, #400]	; (411ba4 <_strtoll_r+0x198>)
  411a12:	b087      	sub	sp, #28
  411a14:	4694      	mov	ip, r2
  411a16:	9104      	str	r1, [sp, #16]
  411a18:	f8d4 8000 	ldr.w	r8, [r4]
  411a1c:	9005      	str	r0, [sp, #20]
  411a1e:	4699      	mov	r9, r3
  411a20:	460a      	mov	r2, r1
  411a22:	e000      	b.n	411a26 <_strtoll_r+0x1a>
  411a24:	4632      	mov	r2, r6
  411a26:	4616      	mov	r6, r2
  411a28:	f816 7b01 	ldrb.w	r7, [r6], #1
  411a2c:	eb08 0307 	add.w	r3, r8, r7
  411a30:	785b      	ldrb	r3, [r3, #1]
  411a32:	f003 0308 	and.w	r3, r3, #8
  411a36:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  411a3a:	2b00      	cmp	r3, #0
  411a3c:	d1f2      	bne.n	411a24 <_strtoll_r+0x18>
  411a3e:	2f2d      	cmp	r7, #45	; 0x2d
  411a40:	f000 808d 	beq.w	411b5e <_strtoll_r+0x152>
  411a44:	2f2b      	cmp	r7, #43	; 0x2b
  411a46:	bf08      	it	eq
  411a48:	7857      	ldrbeq	r7, [r2, #1]
  411a4a:	9102      	str	r1, [sp, #8]
  411a4c:	bf08      	it	eq
  411a4e:	1c96      	addeq	r6, r2, #2
  411a50:	f039 0110 	bics.w	r1, r9, #16
  411a54:	d05e      	beq.n	411b14 <_strtoll_r+0x108>
  411a56:	46ca      	mov	sl, r9
  411a58:	ea4f 7be9 	mov.w	fp, r9, asr #31
  411a5c:	9c02      	ldr	r4, [sp, #8]
  411a5e:	2c00      	cmp	r4, #0
  411a60:	d066      	beq.n	411b30 <_strtoll_r+0x124>
  411a62:	2400      	movs	r4, #0
  411a64:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  411a68:	4620      	mov	r0, r4
  411a6a:	4629      	mov	r1, r5
  411a6c:	4652      	mov	r2, sl
  411a6e:	465b      	mov	r3, fp
  411a70:	f8cd c004 	str.w	ip, [sp, #4]
  411a74:	f7f8 f990 	bl	409d98 <__aeabi_uldivmod>
  411a78:	4620      	mov	r0, r4
  411a7a:	9203      	str	r2, [sp, #12]
  411a7c:	465b      	mov	r3, fp
  411a7e:	4652      	mov	r2, sl
  411a80:	4629      	mov	r1, r5
  411a82:	f7f8 f989 	bl	409d98 <__aeabi_uldivmod>
  411a86:	2400      	movs	r4, #0
  411a88:	2200      	movs	r2, #0
  411a8a:	2300      	movs	r3, #0
  411a8c:	f8dd c004 	ldr.w	ip, [sp, #4]
  411a90:	e019      	b.n	411ac6 <_strtoll_r+0xba>
  411a92:	3f30      	subs	r7, #48	; 0x30
  411a94:	45b9      	cmp	r9, r7
  411a96:	dd26      	ble.n	411ae6 <_strtoll_r+0xda>
  411a98:	1c65      	adds	r5, r4, #1
  411a9a:	d012      	beq.n	411ac2 <_strtoll_r+0xb6>
  411a9c:	4299      	cmp	r1, r3
  411a9e:	bf08      	it	eq
  411aa0:	4290      	cmpeq	r0, r2
  411aa2:	d334      	bcc.n	411b0e <_strtoll_r+0x102>
  411aa4:	428b      	cmp	r3, r1
  411aa6:	bf08      	it	eq
  411aa8:	4282      	cmpeq	r2, r0
  411aaa:	d02d      	beq.n	411b08 <_strtoll_r+0xfc>
  411aac:	fb02 f40b 	mul.w	r4, r2, fp
  411ab0:	fb0a 4403 	mla	r4, sl, r3, r4
  411ab4:	fba2 230a 	umull	r2, r3, r2, sl
  411ab8:	4423      	add	r3, r4
  411aba:	19d2      	adds	r2, r2, r7
  411abc:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
  411ac0:	2401      	movs	r4, #1
  411ac2:	f816 7b01 	ldrb.w	r7, [r6], #1
  411ac6:	eb08 0507 	add.w	r5, r8, r7
  411aca:	786d      	ldrb	r5, [r5, #1]
  411acc:	f015 0f04 	tst.w	r5, #4
  411ad0:	d1df      	bne.n	411a92 <_strtoll_r+0x86>
  411ad2:	f015 0503 	ands.w	r5, r5, #3
  411ad6:	d006      	beq.n	411ae6 <_strtoll_r+0xda>
  411ad8:	2d01      	cmp	r5, #1
  411ada:	bf14      	ite	ne
  411adc:	2557      	movne	r5, #87	; 0x57
  411ade:	2537      	moveq	r5, #55	; 0x37
  411ae0:	1b7f      	subs	r7, r7, r5
  411ae2:	45b9      	cmp	r9, r7
  411ae4:	dcd8      	bgt.n	411a98 <_strtoll_r+0x8c>
  411ae6:	1c61      	adds	r1, r4, #1
  411ae8:	d027      	beq.n	411b3a <_strtoll_r+0x12e>
  411aea:	9902      	ldr	r1, [sp, #8]
  411aec:	2900      	cmp	r1, #0
  411aee:	d132      	bne.n	411b56 <_strtoll_r+0x14a>
  411af0:	4610      	mov	r0, r2
  411af2:	4619      	mov	r1, r3
  411af4:	f1bc 0f00 	cmp.w	ip, #0
  411af8:	d003      	beq.n	411b02 <_strtoll_r+0xf6>
  411afa:	bb54      	cbnz	r4, 411b52 <_strtoll_r+0x146>
  411afc:	9e04      	ldr	r6, [sp, #16]
  411afe:	f8cc 6000 	str.w	r6, [ip]
  411b02:	b007      	add	sp, #28
  411b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411b08:	9c03      	ldr	r4, [sp, #12]
  411b0a:	42a7      	cmp	r7, r4
  411b0c:	ddce      	ble.n	411aac <_strtoll_r+0xa0>
  411b0e:	f04f 34ff 	mov.w	r4, #4294967295
  411b12:	e7d6      	b.n	411ac2 <_strtoll_r+0xb6>
  411b14:	2f30      	cmp	r7, #48	; 0x30
  411b16:	d027      	beq.n	411b68 <_strtoll_r+0x15c>
  411b18:	f1b9 0f00 	cmp.w	r9, #0
  411b1c:	d19b      	bne.n	411a56 <_strtoll_r+0x4a>
  411b1e:	9c02      	ldr	r4, [sp, #8]
  411b20:	f04f 0a0a 	mov.w	sl, #10
  411b24:	f04f 0b00 	mov.w	fp, #0
  411b28:	f04f 090a 	mov.w	r9, #10
  411b2c:	2c00      	cmp	r4, #0
  411b2e:	d198      	bne.n	411a62 <_strtoll_r+0x56>
  411b30:	f04f 34ff 	mov.w	r4, #4294967295
  411b34:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  411b38:	e796      	b.n	411a68 <_strtoll_r+0x5c>
  411b3a:	9c02      	ldr	r4, [sp, #8]
  411b3c:	bb24      	cbnz	r4, 411b88 <_strtoll_r+0x17c>
  411b3e:	f04f 30ff 	mov.w	r0, #4294967295
  411b42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  411b46:	9c05      	ldr	r4, [sp, #20]
  411b48:	2322      	movs	r3, #34	; 0x22
  411b4a:	6023      	str	r3, [r4, #0]
  411b4c:	f1bc 0f00 	cmp.w	ip, #0
  411b50:	d0d7      	beq.n	411b02 <_strtoll_r+0xf6>
  411b52:	3e01      	subs	r6, #1
  411b54:	e7d3      	b.n	411afe <_strtoll_r+0xf2>
  411b56:	4252      	negs	r2, r2
  411b58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  411b5c:	e7c8      	b.n	411af0 <_strtoll_r+0xe4>
  411b5e:	2401      	movs	r4, #1
  411b60:	1c96      	adds	r6, r2, #2
  411b62:	7857      	ldrb	r7, [r2, #1]
  411b64:	9402      	str	r4, [sp, #8]
  411b66:	e773      	b.n	411a50 <_strtoll_r+0x44>
  411b68:	7833      	ldrb	r3, [r6, #0]
  411b6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  411b6e:	2b58      	cmp	r3, #88	; 0x58
  411b70:	d00e      	beq.n	411b90 <_strtoll_r+0x184>
  411b72:	f1b9 0f00 	cmp.w	r9, #0
  411b76:	f47f af6e 	bne.w	411a56 <_strtoll_r+0x4a>
  411b7a:	f04f 0a08 	mov.w	sl, #8
  411b7e:	f04f 0b00 	mov.w	fp, #0
  411b82:	f04f 0908 	mov.w	r9, #8
  411b86:	e769      	b.n	411a5c <_strtoll_r+0x50>
  411b88:	2000      	movs	r0, #0
  411b8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  411b8e:	e7da      	b.n	411b46 <_strtoll_r+0x13a>
  411b90:	7877      	ldrb	r7, [r6, #1]
  411b92:	f04f 0a10 	mov.w	sl, #16
  411b96:	f04f 0b00 	mov.w	fp, #0
  411b9a:	3602      	adds	r6, #2
  411b9c:	f04f 0910 	mov.w	r9, #16
  411ba0:	e75c      	b.n	411a5c <_strtoll_r+0x50>
  411ba2:	bf00      	nop
  411ba4:	20000644 	.word	0x20000644

00411ba8 <_strtoul_r>:
  411ba8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  411bac:	4c44      	ldr	r4, [pc, #272]	; (411cc0 <_strtoul_r+0x118>)
  411bae:	b082      	sub	sp, #8
  411bb0:	f8d4 c000 	ldr.w	ip, [r4]
  411bb4:	9001      	str	r0, [sp, #4]
  411bb6:	460e      	mov	r6, r1
  411bb8:	e000      	b.n	411bbc <_strtoul_r+0x14>
  411bba:	4626      	mov	r6, r4
  411bbc:	4634      	mov	r4, r6
  411bbe:	f814 5b01 	ldrb.w	r5, [r4], #1
  411bc2:	eb0c 0005 	add.w	r0, ip, r5
  411bc6:	7840      	ldrb	r0, [r0, #1]
  411bc8:	f000 0008 	and.w	r0, r0, #8
  411bcc:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  411bd0:	2800      	cmp	r0, #0
  411bd2:	d1f2      	bne.n	411bba <_strtoul_r+0x12>
  411bd4:	2d2d      	cmp	r5, #45	; 0x2d
  411bd6:	d057      	beq.n	411c88 <_strtoul_r+0xe0>
  411bd8:	2d2b      	cmp	r5, #43	; 0x2b
  411bda:	bf08      	it	eq
  411bdc:	7875      	ldrbeq	r5, [r6, #1]
  411bde:	46ba      	mov	sl, r7
  411be0:	bf08      	it	eq
  411be2:	1cb4      	addeq	r4, r6, #2
  411be4:	f033 0010 	bics.w	r0, r3, #16
  411be8:	d039      	beq.n	411c5e <_strtoul_r+0xb6>
  411bea:	f04f 38ff 	mov.w	r8, #4294967295
  411bee:	fbb8 f8f3 	udiv	r8, r8, r3
  411bf2:	fb03 fb08 	mul.w	fp, r3, r8
  411bf6:	ea6f 0b0b 	mvn.w	fp, fp
  411bfa:	4699      	mov	r9, r3
  411bfc:	2700      	movs	r7, #0
  411bfe:	4638      	mov	r0, r7
  411c00:	e00c      	b.n	411c1c <_strtoul_r+0x74>
  411c02:	3d30      	subs	r5, #48	; 0x30
  411c04:	42ab      	cmp	r3, r5
  411c06:	dd19      	ble.n	411c3c <_strtoul_r+0x94>
  411c08:	2f00      	cmp	r7, #0
  411c0a:	db25      	blt.n	411c58 <_strtoul_r+0xb0>
  411c0c:	4540      	cmp	r0, r8
  411c0e:	d823      	bhi.n	411c58 <_strtoul_r+0xb0>
  411c10:	d020      	beq.n	411c54 <_strtoul_r+0xac>
  411c12:	fb09 5000 	mla	r0, r9, r0, r5
  411c16:	2701      	movs	r7, #1
  411c18:	f814 5b01 	ldrb.w	r5, [r4], #1
  411c1c:	eb0c 0605 	add.w	r6, ip, r5
  411c20:	7876      	ldrb	r6, [r6, #1]
  411c22:	f016 0f04 	tst.w	r6, #4
  411c26:	d1ec      	bne.n	411c02 <_strtoul_r+0x5a>
  411c28:	f016 0603 	ands.w	r6, r6, #3
  411c2c:	d006      	beq.n	411c3c <_strtoul_r+0x94>
  411c2e:	2e01      	cmp	r6, #1
  411c30:	bf14      	ite	ne
  411c32:	2657      	movne	r6, #87	; 0x57
  411c34:	2637      	moveq	r6, #55	; 0x37
  411c36:	1bad      	subs	r5, r5, r6
  411c38:	42ab      	cmp	r3, r5
  411c3a:	dce5      	bgt.n	411c08 <_strtoul_r+0x60>
  411c3c:	2f00      	cmp	r7, #0
  411c3e:	db1d      	blt.n	411c7c <_strtoul_r+0xd4>
  411c40:	f1ba 0f00 	cmp.w	sl, #0
  411c44:	d118      	bne.n	411c78 <_strtoul_r+0xd0>
  411c46:	b10a      	cbz	r2, 411c4c <_strtoul_r+0xa4>
  411c48:	b9a7      	cbnz	r7, 411c74 <_strtoul_r+0xcc>
  411c4a:	6011      	str	r1, [r2, #0]
  411c4c:	b002      	add	sp, #8
  411c4e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  411c52:	4770      	bx	lr
  411c54:	455d      	cmp	r5, fp
  411c56:	dddc      	ble.n	411c12 <_strtoul_r+0x6a>
  411c58:	f04f 37ff 	mov.w	r7, #4294967295
  411c5c:	e7dc      	b.n	411c18 <_strtoul_r+0x70>
  411c5e:	2d30      	cmp	r5, #48	; 0x30
  411c60:	d017      	beq.n	411c92 <_strtoul_r+0xea>
  411c62:	2b00      	cmp	r3, #0
  411c64:	d1c1      	bne.n	411bea <_strtoul_r+0x42>
  411c66:	230a      	movs	r3, #10
  411c68:	4699      	mov	r9, r3
  411c6a:	f04f 0b05 	mov.w	fp, #5
  411c6e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 411cc4 <_strtoul_r+0x11c>
  411c72:	e7c3      	b.n	411bfc <_strtoul_r+0x54>
  411c74:	1e61      	subs	r1, r4, #1
  411c76:	e7e8      	b.n	411c4a <_strtoul_r+0xa2>
  411c78:	4240      	negs	r0, r0
  411c7a:	e7e4      	b.n	411c46 <_strtoul_r+0x9e>
  411c7c:	9801      	ldr	r0, [sp, #4]
  411c7e:	2322      	movs	r3, #34	; 0x22
  411c80:	6003      	str	r3, [r0, #0]
  411c82:	f04f 30ff 	mov.w	r0, #4294967295
  411c86:	e7de      	b.n	411c46 <_strtoul_r+0x9e>
  411c88:	1cb4      	adds	r4, r6, #2
  411c8a:	7875      	ldrb	r5, [r6, #1]
  411c8c:	f04f 0a01 	mov.w	sl, #1
  411c90:	e7a8      	b.n	411be4 <_strtoul_r+0x3c>
  411c92:	7820      	ldrb	r0, [r4, #0]
  411c94:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  411c98:	2858      	cmp	r0, #88	; 0x58
  411c9a:	d008      	beq.n	411cae <_strtoul_r+0x106>
  411c9c:	2b00      	cmp	r3, #0
  411c9e:	d1a4      	bne.n	411bea <_strtoul_r+0x42>
  411ca0:	2308      	movs	r3, #8
  411ca2:	4699      	mov	r9, r3
  411ca4:	f04f 0b07 	mov.w	fp, #7
  411ca8:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
  411cac:	e7a6      	b.n	411bfc <_strtoul_r+0x54>
  411cae:	2310      	movs	r3, #16
  411cb0:	7865      	ldrb	r5, [r4, #1]
  411cb2:	4699      	mov	r9, r3
  411cb4:	f04f 0b0f 	mov.w	fp, #15
  411cb8:	3402      	adds	r4, #2
  411cba:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  411cbe:	e79d      	b.n	411bfc <_strtoul_r+0x54>
  411cc0:	20000644 	.word	0x20000644
  411cc4:	19999999 	.word	0x19999999

00411cc8 <_strtoull_r>:
  411cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411ccc:	4c60      	ldr	r4, [pc, #384]	; (411e50 <_strtoull_r+0x188>)
  411cce:	b085      	sub	sp, #20
  411cd0:	f8d4 8000 	ldr.w	r8, [r4]
  411cd4:	9200      	str	r2, [sp, #0]
  411cd6:	9101      	str	r1, [sp, #4]
  411cd8:	9003      	str	r0, [sp, #12]
  411cda:	4699      	mov	r9, r3
  411cdc:	460a      	mov	r2, r1
  411cde:	e000      	b.n	411ce2 <_strtoull_r+0x1a>
  411ce0:	4632      	mov	r2, r6
  411ce2:	4616      	mov	r6, r2
  411ce4:	f816 7b01 	ldrb.w	r7, [r6], #1
  411ce8:	eb08 0307 	add.w	r3, r8, r7
  411cec:	785b      	ldrb	r3, [r3, #1]
  411cee:	f003 0308 	and.w	r3, r3, #8
  411cf2:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  411cf6:	2b00      	cmp	r3, #0
  411cf8:	d1f2      	bne.n	411ce0 <_strtoull_r+0x18>
  411cfa:	2f2d      	cmp	r7, #45	; 0x2d
  411cfc:	d07d      	beq.n	411dfa <_strtoull_r+0x132>
  411cfe:	2f2b      	cmp	r7, #43	; 0x2b
  411d00:	bf08      	it	eq
  411d02:	7857      	ldrbeq	r7, [r2, #1]
  411d04:	9102      	str	r1, [sp, #8]
  411d06:	bf08      	it	eq
  411d08:	1c96      	addeq	r6, r2, #2
  411d0a:	f039 0210 	bics.w	r2, r9, #16
  411d0e:	d055      	beq.n	411dbc <_strtoull_r+0xf4>
  411d10:	ea4f 7be9 	mov.w	fp, r9, asr #31
  411d14:	464a      	mov	r2, r9
  411d16:	465b      	mov	r3, fp
  411d18:	f04f 30ff 	mov.w	r0, #4294967295
  411d1c:	f04f 31ff 	mov.w	r1, #4294967295
  411d20:	f7f8 f83a 	bl	409d98 <__aeabi_uldivmod>
  411d24:	464a      	mov	r2, r9
  411d26:	4604      	mov	r4, r0
  411d28:	460d      	mov	r5, r1
  411d2a:	465b      	mov	r3, fp
  411d2c:	f04f 30ff 	mov.w	r0, #4294967295
  411d30:	f04f 31ff 	mov.w	r1, #4294967295
  411d34:	f7f8 f830 	bl	409d98 <__aeabi_uldivmod>
  411d38:	46ca      	mov	sl, r9
  411d3a:	4694      	mov	ip, r2
  411d3c:	2300      	movs	r3, #0
  411d3e:	2000      	movs	r0, #0
  411d40:	2100      	movs	r1, #0
  411d42:	e019      	b.n	411d78 <_strtoull_r+0xb0>
  411d44:	3f30      	subs	r7, #48	; 0x30
  411d46:	45b9      	cmp	r9, r7
  411d48:	dd26      	ble.n	411d98 <_strtoull_r+0xd0>
  411d4a:	2b00      	cmp	r3, #0
  411d4c:	db33      	blt.n	411db6 <_strtoull_r+0xee>
  411d4e:	428d      	cmp	r5, r1
  411d50:	bf08      	it	eq
  411d52:	4284      	cmpeq	r4, r0
  411d54:	d32f      	bcc.n	411db6 <_strtoull_r+0xee>
  411d56:	42a9      	cmp	r1, r5
  411d58:	bf08      	it	eq
  411d5a:	42a0      	cmpeq	r0, r4
  411d5c:	d029      	beq.n	411db2 <_strtoull_r+0xea>
  411d5e:	fb00 f30b 	mul.w	r3, r0, fp
  411d62:	fb0a 3301 	mla	r3, sl, r1, r3
  411d66:	fba0 010a 	umull	r0, r1, r0, sl
  411d6a:	4419      	add	r1, r3
  411d6c:	19c0      	adds	r0, r0, r7
  411d6e:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
  411d72:	2301      	movs	r3, #1
  411d74:	f816 7b01 	ldrb.w	r7, [r6], #1
  411d78:	eb08 0207 	add.w	r2, r8, r7
  411d7c:	7852      	ldrb	r2, [r2, #1]
  411d7e:	f012 0f04 	tst.w	r2, #4
  411d82:	d1df      	bne.n	411d44 <_strtoull_r+0x7c>
  411d84:	f012 0203 	ands.w	r2, r2, #3
  411d88:	d006      	beq.n	411d98 <_strtoull_r+0xd0>
  411d8a:	2a01      	cmp	r2, #1
  411d8c:	bf14      	ite	ne
  411d8e:	2257      	movne	r2, #87	; 0x57
  411d90:	2237      	moveq	r2, #55	; 0x37
  411d92:	1abf      	subs	r7, r7, r2
  411d94:	45b9      	cmp	r9, r7
  411d96:	dcd8      	bgt.n	411d4a <_strtoull_r+0x82>
  411d98:	2b00      	cmp	r3, #0
  411d9a:	db26      	blt.n	411dea <_strtoull_r+0x122>
  411d9c:	9a02      	ldr	r2, [sp, #8]
  411d9e:	bb02      	cbnz	r2, 411de2 <_strtoull_r+0x11a>
  411da0:	9a00      	ldr	r2, [sp, #0]
  411da2:	b11a      	cbz	r2, 411dac <_strtoull_r+0xe4>
  411da4:	b9db      	cbnz	r3, 411dde <_strtoull_r+0x116>
  411da6:	9e01      	ldr	r6, [sp, #4]
  411da8:	9b00      	ldr	r3, [sp, #0]
  411daa:	601e      	str	r6, [r3, #0]
  411dac:	b005      	add	sp, #20
  411dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411db2:	4567      	cmp	r7, ip
  411db4:	ddd3      	ble.n	411d5e <_strtoull_r+0x96>
  411db6:	f04f 33ff 	mov.w	r3, #4294967295
  411dba:	e7db      	b.n	411d74 <_strtoull_r+0xac>
  411dbc:	2f30      	cmp	r7, #48	; 0x30
  411dbe:	d021      	beq.n	411e04 <_strtoull_r+0x13c>
  411dc0:	f1b9 0f00 	cmp.w	r9, #0
  411dc4:	d1a4      	bne.n	411d10 <_strtoull_r+0x48>
  411dc6:	f04f 0c05 	mov.w	ip, #5
  411dca:	f04f 3499 	mov.w	r4, #2576980377	; 0x99999999
  411dce:	4d21      	ldr	r5, [pc, #132]	; (411e54 <_strtoull_r+0x18c>)
  411dd0:	f04f 0a0a 	mov.w	sl, #10
  411dd4:	f04f 0b00 	mov.w	fp, #0
  411dd8:	f04f 090a 	mov.w	r9, #10
  411ddc:	e7ae      	b.n	411d3c <_strtoull_r+0x74>
  411dde:	3e01      	subs	r6, #1
  411de0:	e7e2      	b.n	411da8 <_strtoull_r+0xe0>
  411de2:	4240      	negs	r0, r0
  411de4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  411de8:	e7da      	b.n	411da0 <_strtoull_r+0xd8>
  411dea:	9903      	ldr	r1, [sp, #12]
  411dec:	2222      	movs	r2, #34	; 0x22
  411dee:	600a      	str	r2, [r1, #0]
  411df0:	f04f 30ff 	mov.w	r0, #4294967295
  411df4:	f04f 31ff 	mov.w	r1, #4294967295
  411df8:	e7d2      	b.n	411da0 <_strtoull_r+0xd8>
  411dfa:	2101      	movs	r1, #1
  411dfc:	1c96      	adds	r6, r2, #2
  411dfe:	7857      	ldrb	r7, [r2, #1]
  411e00:	9102      	str	r1, [sp, #8]
  411e02:	e782      	b.n	411d0a <_strtoull_r+0x42>
  411e04:	7833      	ldrb	r3, [r6, #0]
  411e06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  411e0a:	2b58      	cmp	r3, #88	; 0x58
  411e0c:	d010      	beq.n	411e30 <_strtoull_r+0x168>
  411e0e:	f1b9 0f00 	cmp.w	r9, #0
  411e12:	f47f af7d 	bne.w	411d10 <_strtoull_r+0x48>
  411e16:	f04f 0c07 	mov.w	ip, #7
  411e1a:	f04f 34ff 	mov.w	r4, #4294967295
  411e1e:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
  411e22:	f04f 0a08 	mov.w	sl, #8
  411e26:	f04f 0b00 	mov.w	fp, #0
  411e2a:	f04f 0908 	mov.w	r9, #8
  411e2e:	e785      	b.n	411d3c <_strtoull_r+0x74>
  411e30:	7877      	ldrb	r7, [r6, #1]
  411e32:	f04f 0c0f 	mov.w	ip, #15
  411e36:	3602      	adds	r6, #2
  411e38:	f04f 34ff 	mov.w	r4, #4294967295
  411e3c:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
  411e40:	f04f 0a10 	mov.w	sl, #16
  411e44:	f04f 0b00 	mov.w	fp, #0
  411e48:	f04f 0910 	mov.w	r9, #16
  411e4c:	e776      	b.n	411d3c <_strtoull_r+0x74>
  411e4e:	bf00      	nop
  411e50:	20000644 	.word	0x20000644
  411e54:	19999999 	.word	0x19999999

00411e58 <__ssprint_r>:
  411e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411e5c:	6894      	ldr	r4, [r2, #8]
  411e5e:	6816      	ldr	r6, [r2, #0]
  411e60:	b083      	sub	sp, #12
  411e62:	4692      	mov	sl, r2
  411e64:	4680      	mov	r8, r0
  411e66:	460d      	mov	r5, r1
  411e68:	2c00      	cmp	r4, #0
  411e6a:	d06f      	beq.n	411f4c <__ssprint_r+0xf4>
  411e6c:	f04f 0b00 	mov.w	fp, #0
  411e70:	6808      	ldr	r0, [r1, #0]
  411e72:	688b      	ldr	r3, [r1, #8]
  411e74:	465c      	mov	r4, fp
  411e76:	2c00      	cmp	r4, #0
  411e78:	d043      	beq.n	411f02 <__ssprint_r+0xaa>
  411e7a:	429c      	cmp	r4, r3
  411e7c:	461f      	mov	r7, r3
  411e7e:	d345      	bcc.n	411f0c <__ssprint_r+0xb4>
  411e80:	89ab      	ldrh	r3, [r5, #12]
  411e82:	f413 6f90 	tst.w	r3, #1152	; 0x480
  411e86:	d044      	beq.n	411f12 <__ssprint_r+0xba>
  411e88:	696f      	ldr	r7, [r5, #20]
  411e8a:	6929      	ldr	r1, [r5, #16]
  411e8c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  411e90:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  411e94:	ebc1 0900 	rsb	r9, r1, r0
  411e98:	1c62      	adds	r2, r4, #1
  411e9a:	107f      	asrs	r7, r7, #1
  411e9c:	444a      	add	r2, r9
  411e9e:	4297      	cmp	r7, r2
  411ea0:	bf34      	ite	cc
  411ea2:	4617      	movcc	r7, r2
  411ea4:	463a      	movcs	r2, r7
  411ea6:	055b      	lsls	r3, r3, #21
  411ea8:	d535      	bpl.n	411f16 <__ssprint_r+0xbe>
  411eaa:	4611      	mov	r1, r2
  411eac:	4640      	mov	r0, r8
  411eae:	f7fd fb1b 	bl	40f4e8 <_malloc_r>
  411eb2:	2800      	cmp	r0, #0
  411eb4:	d039      	beq.n	411f2a <__ssprint_r+0xd2>
  411eb6:	6929      	ldr	r1, [r5, #16]
  411eb8:	9001      	str	r0, [sp, #4]
  411eba:	464a      	mov	r2, r9
  411ebc:	f7f8 fa7e 	bl	40a3bc <memcpy>
  411ec0:	89aa      	ldrh	r2, [r5, #12]
  411ec2:	9b01      	ldr	r3, [sp, #4]
  411ec4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  411ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  411ecc:	81aa      	strh	r2, [r5, #12]
  411ece:	ebc9 0207 	rsb	r2, r9, r7
  411ed2:	eb03 0009 	add.w	r0, r3, r9
  411ed6:	616f      	str	r7, [r5, #20]
  411ed8:	612b      	str	r3, [r5, #16]
  411eda:	6028      	str	r0, [r5, #0]
  411edc:	60aa      	str	r2, [r5, #8]
  411ede:	4627      	mov	r7, r4
  411ee0:	46a1      	mov	r9, r4
  411ee2:	464a      	mov	r2, r9
  411ee4:	4659      	mov	r1, fp
  411ee6:	f7fd fe27 	bl	40fb38 <memmove>
  411eea:	f8da 2008 	ldr.w	r2, [sl, #8]
  411eee:	68ab      	ldr	r3, [r5, #8]
  411ef0:	6828      	ldr	r0, [r5, #0]
  411ef2:	1bdb      	subs	r3, r3, r7
  411ef4:	4448      	add	r0, r9
  411ef6:	1b14      	subs	r4, r2, r4
  411ef8:	60ab      	str	r3, [r5, #8]
  411efa:	6028      	str	r0, [r5, #0]
  411efc:	f8ca 4008 	str.w	r4, [sl, #8]
  411f00:	b324      	cbz	r4, 411f4c <__ssprint_r+0xf4>
  411f02:	f8d6 b000 	ldr.w	fp, [r6]
  411f06:	6874      	ldr	r4, [r6, #4]
  411f08:	3608      	adds	r6, #8
  411f0a:	e7b4      	b.n	411e76 <__ssprint_r+0x1e>
  411f0c:	4627      	mov	r7, r4
  411f0e:	46a1      	mov	r9, r4
  411f10:	e7e7      	b.n	411ee2 <__ssprint_r+0x8a>
  411f12:	46b9      	mov	r9, r7
  411f14:	e7e5      	b.n	411ee2 <__ssprint_r+0x8a>
  411f16:	4640      	mov	r0, r8
  411f18:	f7fe fad2 	bl	4104c0 <_realloc_r>
  411f1c:	4603      	mov	r3, r0
  411f1e:	2800      	cmp	r0, #0
  411f20:	d1d5      	bne.n	411ece <__ssprint_r+0x76>
  411f22:	4640      	mov	r0, r8
  411f24:	6929      	ldr	r1, [r5, #16]
  411f26:	f7fc ffb7 	bl	40ee98 <_free_r>
  411f2a:	89aa      	ldrh	r2, [r5, #12]
  411f2c:	230c      	movs	r3, #12
  411f2e:	f8c8 3000 	str.w	r3, [r8]
  411f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  411f36:	2300      	movs	r3, #0
  411f38:	f04f 30ff 	mov.w	r0, #4294967295
  411f3c:	81aa      	strh	r2, [r5, #12]
  411f3e:	f8ca 3008 	str.w	r3, [sl, #8]
  411f42:	f8ca 3004 	str.w	r3, [sl, #4]
  411f46:	b003      	add	sp, #12
  411f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411f4c:	4620      	mov	r0, r4
  411f4e:	f8ca 4004 	str.w	r4, [sl, #4]
  411f52:	b003      	add	sp, #12
  411f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00411f58 <_sungetc_r>:
  411f58:	b538      	push	{r3, r4, r5, lr}
  411f5a:	1c4b      	adds	r3, r1, #1
  411f5c:	4614      	mov	r4, r2
  411f5e:	d019      	beq.n	411f94 <_sungetc_r+0x3c>
  411f60:	8992      	ldrh	r2, [r2, #12]
  411f62:	6b23      	ldr	r3, [r4, #48]	; 0x30
  411f64:	f022 0220 	bic.w	r2, r2, #32
  411f68:	b2cd      	uxtb	r5, r1
  411f6a:	81a2      	strh	r2, [r4, #12]
  411f6c:	b1ab      	cbz	r3, 411f9a <_sungetc_r+0x42>
  411f6e:	6862      	ldr	r2, [r4, #4]
  411f70:	6b63      	ldr	r3, [r4, #52]	; 0x34
  411f72:	429a      	cmp	r2, r3
  411f74:	da09      	bge.n	411f8a <_sungetc_r+0x32>
  411f76:	6823      	ldr	r3, [r4, #0]
  411f78:	1e5a      	subs	r2, r3, #1
  411f7a:	6022      	str	r2, [r4, #0]
  411f7c:	f803 5c01 	strb.w	r5, [r3, #-1]
  411f80:	6863      	ldr	r3, [r4, #4]
  411f82:	3301      	adds	r3, #1
  411f84:	4628      	mov	r0, r5
  411f86:	6063      	str	r3, [r4, #4]
  411f88:	bd38      	pop	{r3, r4, r5, pc}
  411f8a:	4621      	mov	r1, r4
  411f8c:	f000 f882 	bl	412094 <__submore>
  411f90:	2800      	cmp	r0, #0
  411f92:	d0f0      	beq.n	411f76 <_sungetc_r+0x1e>
  411f94:	f04f 30ff 	mov.w	r0, #4294967295
  411f98:	bd38      	pop	{r3, r4, r5, pc}
  411f9a:	6923      	ldr	r3, [r4, #16]
  411f9c:	6822      	ldr	r2, [r4, #0]
  411f9e:	b12b      	cbz	r3, 411fac <_sungetc_r+0x54>
  411fa0:	4293      	cmp	r3, r2
  411fa2:	d203      	bcs.n	411fac <_sungetc_r+0x54>
  411fa4:	f812 0c01 	ldrb.w	r0, [r2, #-1]
  411fa8:	42a8      	cmp	r0, r5
  411faa:	d00f      	beq.n	411fcc <_sungetc_r+0x74>
  411fac:	4623      	mov	r3, r4
  411fae:	6861      	ldr	r1, [r4, #4]
  411fb0:	63a2      	str	r2, [r4, #56]	; 0x38
  411fb2:	f104 0040 	add.w	r0, r4, #64	; 0x40
  411fb6:	2203      	movs	r2, #3
  411fb8:	6320      	str	r0, [r4, #48]	; 0x30
  411fba:	6362      	str	r2, [r4, #52]	; 0x34
  411fbc:	63e1      	str	r1, [r4, #60]	; 0x3c
  411fbe:	f803 5f42 	strb.w	r5, [r3, #66]!
  411fc2:	2201      	movs	r2, #1
  411fc4:	6023      	str	r3, [r4, #0]
  411fc6:	4628      	mov	r0, r5
  411fc8:	6062      	str	r2, [r4, #4]
  411fca:	bd38      	pop	{r3, r4, r5, pc}
  411fcc:	6863      	ldr	r3, [r4, #4]
  411fce:	3a01      	subs	r2, #1
  411fd0:	3301      	adds	r3, #1
  411fd2:	e884 000c 	stmia.w	r4, {r2, r3}
  411fd6:	bd38      	pop	{r3, r4, r5, pc}

00411fd8 <__ssrefill_r>:
  411fd8:	b510      	push	{r4, lr}
  411fda:	460c      	mov	r4, r1
  411fdc:	6b09      	ldr	r1, [r1, #48]	; 0x30
  411fde:	b169      	cbz	r1, 411ffc <__ssrefill_r+0x24>
  411fe0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  411fe4:	4299      	cmp	r1, r3
  411fe6:	d001      	beq.n	411fec <__ssrefill_r+0x14>
  411fe8:	f7fc ff56 	bl	40ee98 <_free_r>
  411fec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  411fee:	6063      	str	r3, [r4, #4]
  411ff0:	2000      	movs	r0, #0
  411ff2:	6320      	str	r0, [r4, #48]	; 0x30
  411ff4:	b113      	cbz	r3, 411ffc <__ssrefill_r+0x24>
  411ff6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  411ff8:	6023      	str	r3, [r4, #0]
  411ffa:	bd10      	pop	{r4, pc}
  411ffc:	89a2      	ldrh	r2, [r4, #12]
  411ffe:	6923      	ldr	r3, [r4, #16]
  412000:	6023      	str	r3, [r4, #0]
  412002:	f042 0220 	orr.w	r2, r2, #32
  412006:	2300      	movs	r3, #0
  412008:	81a2      	strh	r2, [r4, #12]
  41200a:	6063      	str	r3, [r4, #4]
  41200c:	f04f 30ff 	mov.w	r0, #4294967295
  412010:	bd10      	pop	{r4, pc}
  412012:	bf00      	nop

00412014 <_sfread_r>:
  412014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412018:	b083      	sub	sp, #12
  41201a:	fb02 f903 	mul.w	r9, r2, r3
  41201e:	9201      	str	r2, [sp, #4]
  412020:	469a      	mov	sl, r3
  412022:	4607      	mov	r7, r0
  412024:	460e      	mov	r6, r1
  412026:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  412028:	f1b9 0f00 	cmp.w	r9, #0
  41202c:	d026      	beq.n	41207c <_sfread_r+0x68>
  41202e:	464d      	mov	r5, r9
  412030:	f04f 0800 	mov.w	r8, #0
  412034:	e00e      	b.n	412054 <_sfread_r+0x40>
  412036:	f7f8 f9c1 	bl	40a3bc <memcpy>
  41203a:	6822      	ldr	r2, [r4, #0]
  41203c:	f8c4 8004 	str.w	r8, [r4, #4]
  412040:	445a      	add	r2, fp
  412042:	6022      	str	r2, [r4, #0]
  412044:	4638      	mov	r0, r7
  412046:	4621      	mov	r1, r4
  412048:	445e      	add	r6, fp
  41204a:	ebcb 0505 	rsb	r5, fp, r5
  41204e:	f7ff ffc3 	bl	411fd8 <__ssrefill_r>
  412052:	b9b8      	cbnz	r0, 412084 <_sfread_r+0x70>
  412054:	f8d4 b004 	ldr.w	fp, [r4, #4]
  412058:	6821      	ldr	r1, [r4, #0]
  41205a:	455d      	cmp	r5, fp
  41205c:	4630      	mov	r0, r6
  41205e:	465a      	mov	r2, fp
  412060:	d8e9      	bhi.n	412036 <_sfread_r+0x22>
  412062:	462a      	mov	r2, r5
  412064:	f7f8 f9aa 	bl	40a3bc <memcpy>
  412068:	6862      	ldr	r2, [r4, #4]
  41206a:	6823      	ldr	r3, [r4, #0]
  41206c:	1b52      	subs	r2, r2, r5
  41206e:	442b      	add	r3, r5
  412070:	4650      	mov	r0, sl
  412072:	6062      	str	r2, [r4, #4]
  412074:	6023      	str	r3, [r4, #0]
  412076:	b003      	add	sp, #12
  412078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41207c:	4648      	mov	r0, r9
  41207e:	b003      	add	sp, #12
  412080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412084:	9b01      	ldr	r3, [sp, #4]
  412086:	ebc5 0909 	rsb	r9, r5, r9
  41208a:	fbb9 f0f3 	udiv	r0, r9, r3
  41208e:	b003      	add	sp, #12
  412090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00412094 <__submore>:
  412094:	f101 0340 	add.w	r3, r1, #64	; 0x40
  412098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41209c:	460c      	mov	r4, r1
  41209e:	6b09      	ldr	r1, [r1, #48]	; 0x30
  4120a0:	4299      	cmp	r1, r3
  4120a2:	d014      	beq.n	4120ce <__submore+0x3a>
  4120a4:	6b66      	ldr	r6, [r4, #52]	; 0x34
  4120a6:	0077      	lsls	r7, r6, #1
  4120a8:	463a      	mov	r2, r7
  4120aa:	f7fe fa09 	bl	4104c0 <_realloc_r>
  4120ae:	4605      	mov	r5, r0
  4120b0:	b340      	cbz	r0, 412104 <__submore+0x70>
  4120b2:	eb00 0806 	add.w	r8, r0, r6
  4120b6:	4632      	mov	r2, r6
  4120b8:	4640      	mov	r0, r8
  4120ba:	4629      	mov	r1, r5
  4120bc:	f7f8 f97e 	bl	40a3bc <memcpy>
  4120c0:	f8c4 8000 	str.w	r8, [r4]
  4120c4:	6325      	str	r5, [r4, #48]	; 0x30
  4120c6:	6367      	str	r7, [r4, #52]	; 0x34
  4120c8:	2000      	movs	r0, #0
  4120ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4120ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4120d2:	f7fd fa09 	bl	40f4e8 <_malloc_r>
  4120d6:	b1a8      	cbz	r0, 412104 <__submore+0x70>
  4120d8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  4120dc:	6320      	str	r0, [r4, #48]	; 0x30
  4120de:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4120e2:	6362      	str	r2, [r4, #52]	; 0x34
  4120e4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  4120e8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  4120ec:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  4120f0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  4120f4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  4120f8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  4120fc:	6020      	str	r0, [r4, #0]
  4120fe:	2000      	movs	r0, #0
  412100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412104:	f04f 30ff 	mov.w	r0, #4294967295
  412108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041210c <__swbuf_r>:
  41210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41210e:	460d      	mov	r5, r1
  412110:	4614      	mov	r4, r2
  412112:	4607      	mov	r7, r0
  412114:	b110      	cbz	r0, 41211c <__swbuf_r+0x10>
  412116:	6b83      	ldr	r3, [r0, #56]	; 0x38
  412118:	2b00      	cmp	r3, #0
  41211a:	d048      	beq.n	4121ae <__swbuf_r+0xa2>
  41211c:	89a2      	ldrh	r2, [r4, #12]
  41211e:	69a3      	ldr	r3, [r4, #24]
  412120:	60a3      	str	r3, [r4, #8]
  412122:	b293      	uxth	r3, r2
  412124:	0718      	lsls	r0, r3, #28
  412126:	d538      	bpl.n	41219a <__swbuf_r+0x8e>
  412128:	6926      	ldr	r6, [r4, #16]
  41212a:	2e00      	cmp	r6, #0
  41212c:	d035      	beq.n	41219a <__swbuf_r+0x8e>
  41212e:	0499      	lsls	r1, r3, #18
  412130:	b2ed      	uxtb	r5, r5
  412132:	d515      	bpl.n	412160 <__swbuf_r+0x54>
  412134:	6823      	ldr	r3, [r4, #0]
  412136:	6962      	ldr	r2, [r4, #20]
  412138:	1b9e      	subs	r6, r3, r6
  41213a:	4296      	cmp	r6, r2
  41213c:	da1c      	bge.n	412178 <__swbuf_r+0x6c>
  41213e:	3601      	adds	r6, #1
  412140:	68a2      	ldr	r2, [r4, #8]
  412142:	1c59      	adds	r1, r3, #1
  412144:	3a01      	subs	r2, #1
  412146:	60a2      	str	r2, [r4, #8]
  412148:	6021      	str	r1, [r4, #0]
  41214a:	701d      	strb	r5, [r3, #0]
  41214c:	6963      	ldr	r3, [r4, #20]
  41214e:	42b3      	cmp	r3, r6
  412150:	d01a      	beq.n	412188 <__swbuf_r+0x7c>
  412152:	89a3      	ldrh	r3, [r4, #12]
  412154:	07db      	lsls	r3, r3, #31
  412156:	d501      	bpl.n	41215c <__swbuf_r+0x50>
  412158:	2d0a      	cmp	r5, #10
  41215a:	d015      	beq.n	412188 <__swbuf_r+0x7c>
  41215c:	4628      	mov	r0, r5
  41215e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412160:	6e63      	ldr	r3, [r4, #100]	; 0x64
  412162:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  412166:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  41216a:	6663      	str	r3, [r4, #100]	; 0x64
  41216c:	6823      	ldr	r3, [r4, #0]
  41216e:	81a2      	strh	r2, [r4, #12]
  412170:	6962      	ldr	r2, [r4, #20]
  412172:	1b9e      	subs	r6, r3, r6
  412174:	4296      	cmp	r6, r2
  412176:	dbe2      	blt.n	41213e <__swbuf_r+0x32>
  412178:	4638      	mov	r0, r7
  41217a:	4621      	mov	r1, r4
  41217c:	f7fc fd2e 	bl	40ebdc <_fflush_r>
  412180:	b940      	cbnz	r0, 412194 <__swbuf_r+0x88>
  412182:	6823      	ldr	r3, [r4, #0]
  412184:	2601      	movs	r6, #1
  412186:	e7db      	b.n	412140 <__swbuf_r+0x34>
  412188:	4638      	mov	r0, r7
  41218a:	4621      	mov	r1, r4
  41218c:	f7fc fd26 	bl	40ebdc <_fflush_r>
  412190:	2800      	cmp	r0, #0
  412192:	d0e3      	beq.n	41215c <__swbuf_r+0x50>
  412194:	f04f 30ff 	mov.w	r0, #4294967295
  412198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41219a:	4638      	mov	r0, r7
  41219c:	4621      	mov	r1, r4
  41219e:	f7fb fc3b 	bl	40da18 <__swsetup_r>
  4121a2:	2800      	cmp	r0, #0
  4121a4:	d1f6      	bne.n	412194 <__swbuf_r+0x88>
  4121a6:	89a2      	ldrh	r2, [r4, #12]
  4121a8:	6926      	ldr	r6, [r4, #16]
  4121aa:	b293      	uxth	r3, r2
  4121ac:	e7bf      	b.n	41212e <__swbuf_r+0x22>
  4121ae:	f7fc fd31 	bl	40ec14 <__sinit>
  4121b2:	e7b3      	b.n	41211c <__swbuf_r+0x10>

004121b4 <_wcrtomb_r>:
  4121b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4121b8:	461e      	mov	r6, r3
  4121ba:	b086      	sub	sp, #24
  4121bc:	460c      	mov	r4, r1
  4121be:	4605      	mov	r5, r0
  4121c0:	4617      	mov	r7, r2
  4121c2:	4b0f      	ldr	r3, [pc, #60]	; (412200 <_wcrtomb_r+0x4c>)
  4121c4:	b191      	cbz	r1, 4121ec <_wcrtomb_r+0x38>
  4121c6:	f8d3 8000 	ldr.w	r8, [r3]
  4121ca:	f7fd f8f3 	bl	40f3b4 <__locale_charset>
  4121ce:	9600      	str	r6, [sp, #0]
  4121d0:	4603      	mov	r3, r0
  4121d2:	4621      	mov	r1, r4
  4121d4:	463a      	mov	r2, r7
  4121d6:	4628      	mov	r0, r5
  4121d8:	47c0      	blx	r8
  4121da:	1c43      	adds	r3, r0, #1
  4121dc:	d103      	bne.n	4121e6 <_wcrtomb_r+0x32>
  4121de:	2200      	movs	r2, #0
  4121e0:	238a      	movs	r3, #138	; 0x8a
  4121e2:	6032      	str	r2, [r6, #0]
  4121e4:	602b      	str	r3, [r5, #0]
  4121e6:	b006      	add	sp, #24
  4121e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4121ec:	681f      	ldr	r7, [r3, #0]
  4121ee:	f7fd f8e1 	bl	40f3b4 <__locale_charset>
  4121f2:	9600      	str	r6, [sp, #0]
  4121f4:	4603      	mov	r3, r0
  4121f6:	4622      	mov	r2, r4
  4121f8:	4628      	mov	r0, r5
  4121fa:	a903      	add	r1, sp, #12
  4121fc:	47b8      	blx	r7
  4121fe:	e7ec      	b.n	4121da <_wcrtomb_r+0x26>
  412200:	20000ab8 	.word	0x20000ab8

00412204 <__ascii_wctomb>:
  412204:	b121      	cbz	r1, 412210 <__ascii_wctomb+0xc>
  412206:	2aff      	cmp	r2, #255	; 0xff
  412208:	d804      	bhi.n	412214 <__ascii_wctomb+0x10>
  41220a:	700a      	strb	r2, [r1, #0]
  41220c:	2001      	movs	r0, #1
  41220e:	4770      	bx	lr
  412210:	4608      	mov	r0, r1
  412212:	4770      	bx	lr
  412214:	238a      	movs	r3, #138	; 0x8a
  412216:	6003      	str	r3, [r0, #0]
  412218:	f04f 30ff 	mov.w	r0, #4294967295
  41221c:	4770      	bx	lr
  41221e:	bf00      	nop

00412220 <__register_exitproc>:
  412220:	b5f0      	push	{r4, r5, r6, r7, lr}
  412222:	4c27      	ldr	r4, [pc, #156]	; (4122c0 <__register_exitproc+0xa0>)
  412224:	6826      	ldr	r6, [r4, #0]
  412226:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  41222a:	b085      	sub	sp, #20
  41222c:	4607      	mov	r7, r0
  41222e:	2c00      	cmp	r4, #0
  412230:	d041      	beq.n	4122b6 <__register_exitproc+0x96>
  412232:	6865      	ldr	r5, [r4, #4]
  412234:	2d1f      	cmp	r5, #31
  412236:	dd1e      	ble.n	412276 <__register_exitproc+0x56>
  412238:	4822      	ldr	r0, [pc, #136]	; (4122c4 <__register_exitproc+0xa4>)
  41223a:	b918      	cbnz	r0, 412244 <__register_exitproc+0x24>
  41223c:	f04f 30ff 	mov.w	r0, #4294967295
  412240:	b005      	add	sp, #20
  412242:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412244:	f44f 70c8 	mov.w	r0, #400	; 0x190
  412248:	9103      	str	r1, [sp, #12]
  41224a:	9202      	str	r2, [sp, #8]
  41224c:	9301      	str	r3, [sp, #4]
  41224e:	f7fd f943 	bl	40f4d8 <malloc>
  412252:	9903      	ldr	r1, [sp, #12]
  412254:	9a02      	ldr	r2, [sp, #8]
  412256:	9b01      	ldr	r3, [sp, #4]
  412258:	4604      	mov	r4, r0
  41225a:	2800      	cmp	r0, #0
  41225c:	d0ee      	beq.n	41223c <__register_exitproc+0x1c>
  41225e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  412262:	6025      	str	r5, [r4, #0]
  412264:	2000      	movs	r0, #0
  412266:	6060      	str	r0, [r4, #4]
  412268:	4605      	mov	r5, r0
  41226a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  41226e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  412272:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  412276:	b93f      	cbnz	r7, 412288 <__register_exitproc+0x68>
  412278:	1cab      	adds	r3, r5, #2
  41227a:	2000      	movs	r0, #0
  41227c:	3501      	adds	r5, #1
  41227e:	6065      	str	r5, [r4, #4]
  412280:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  412284:	b005      	add	sp, #20
  412286:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412288:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  41228c:	f04f 0c01 	mov.w	ip, #1
  412290:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  412294:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  412298:	fa0c f205 	lsl.w	r2, ip, r5
  41229c:	4316      	orrs	r6, r2
  41229e:	2f02      	cmp	r7, #2
  4122a0:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  4122a4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  4122a8:	d1e6      	bne.n	412278 <__register_exitproc+0x58>
  4122aa:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4122ae:	431a      	orrs	r2, r3
  4122b0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4122b4:	e7e0      	b.n	412278 <__register_exitproc+0x58>
  4122b6:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  4122ba:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  4122be:	e7b8      	b.n	412232 <__register_exitproc+0x12>
  4122c0:	00413684 	.word	0x00413684
  4122c4:	0040f4d9 	.word	0x0040f4d9

004122c8 <_calloc_r>:
  4122c8:	b510      	push	{r4, lr}
  4122ca:	fb02 f101 	mul.w	r1, r2, r1
  4122ce:	f7fd f90b 	bl	40f4e8 <_malloc_r>
  4122d2:	4604      	mov	r4, r0
  4122d4:	b168      	cbz	r0, 4122f2 <_calloc_r+0x2a>
  4122d6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4122da:	f022 0203 	bic.w	r2, r2, #3
  4122de:	3a04      	subs	r2, #4
  4122e0:	2a24      	cmp	r2, #36	; 0x24
  4122e2:	d818      	bhi.n	412316 <_calloc_r+0x4e>
  4122e4:	2a13      	cmp	r2, #19
  4122e6:	d806      	bhi.n	4122f6 <_calloc_r+0x2e>
  4122e8:	4603      	mov	r3, r0
  4122ea:	2200      	movs	r2, #0
  4122ec:	601a      	str	r2, [r3, #0]
  4122ee:	605a      	str	r2, [r3, #4]
  4122f0:	609a      	str	r2, [r3, #8]
  4122f2:	4620      	mov	r0, r4
  4122f4:	bd10      	pop	{r4, pc}
  4122f6:	2300      	movs	r3, #0
  4122f8:	2a1b      	cmp	r2, #27
  4122fa:	6003      	str	r3, [r0, #0]
  4122fc:	6043      	str	r3, [r0, #4]
  4122fe:	d90f      	bls.n	412320 <_calloc_r+0x58>
  412300:	2a24      	cmp	r2, #36	; 0x24
  412302:	6083      	str	r3, [r0, #8]
  412304:	60c3      	str	r3, [r0, #12]
  412306:	bf05      	ittet	eq
  412308:	6103      	streq	r3, [r0, #16]
  41230a:	6143      	streq	r3, [r0, #20]
  41230c:	f100 0310 	addne.w	r3, r0, #16
  412310:	f100 0318 	addeq.w	r3, r0, #24
  412314:	e7e9      	b.n	4122ea <_calloc_r+0x22>
  412316:	2100      	movs	r1, #0
  412318:	f7f8 f8ea 	bl	40a4f0 <memset>
  41231c:	4620      	mov	r0, r4
  41231e:	bd10      	pop	{r4, pc}
  412320:	f100 0308 	add.w	r3, r0, #8
  412324:	e7e1      	b.n	4122ea <_calloc_r+0x22>
  412326:	bf00      	nop

00412328 <_fclose_r>:
  412328:	b570      	push	{r4, r5, r6, lr}
  41232a:	460c      	mov	r4, r1
  41232c:	4605      	mov	r5, r0
  41232e:	b131      	cbz	r1, 41233e <_fclose_r+0x16>
  412330:	b110      	cbz	r0, 412338 <_fclose_r+0x10>
  412332:	6b83      	ldr	r3, [r0, #56]	; 0x38
  412334:	2b00      	cmp	r3, #0
  412336:	d02f      	beq.n	412398 <_fclose_r+0x70>
  412338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41233c:	b90b      	cbnz	r3, 412342 <_fclose_r+0x1a>
  41233e:	2000      	movs	r0, #0
  412340:	bd70      	pop	{r4, r5, r6, pc}
  412342:	4628      	mov	r0, r5
  412344:	4621      	mov	r1, r4
  412346:	f7fc fc49 	bl	40ebdc <_fflush_r>
  41234a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  41234c:	4606      	mov	r6, r0
  41234e:	b133      	cbz	r3, 41235e <_fclose_r+0x36>
  412350:	4628      	mov	r0, r5
  412352:	69e1      	ldr	r1, [r4, #28]
  412354:	4798      	blx	r3
  412356:	2800      	cmp	r0, #0
  412358:	bfb8      	it	lt
  41235a:	f04f 36ff 	movlt.w	r6, #4294967295
  41235e:	89a3      	ldrh	r3, [r4, #12]
  412360:	061b      	lsls	r3, r3, #24
  412362:	d41c      	bmi.n	41239e <_fclose_r+0x76>
  412364:	6b21      	ldr	r1, [r4, #48]	; 0x30
  412366:	b141      	cbz	r1, 41237a <_fclose_r+0x52>
  412368:	f104 0340 	add.w	r3, r4, #64	; 0x40
  41236c:	4299      	cmp	r1, r3
  41236e:	d002      	beq.n	412376 <_fclose_r+0x4e>
  412370:	4628      	mov	r0, r5
  412372:	f7fc fd91 	bl	40ee98 <_free_r>
  412376:	2300      	movs	r3, #0
  412378:	6323      	str	r3, [r4, #48]	; 0x30
  41237a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  41237c:	b121      	cbz	r1, 412388 <_fclose_r+0x60>
  41237e:	4628      	mov	r0, r5
  412380:	f7fc fd8a 	bl	40ee98 <_free_r>
  412384:	2300      	movs	r3, #0
  412386:	6463      	str	r3, [r4, #68]	; 0x44
  412388:	f7fc fcbe 	bl	40ed08 <__sfp_lock_acquire>
  41238c:	2300      	movs	r3, #0
  41238e:	81a3      	strh	r3, [r4, #12]
  412390:	f7fc fcbc 	bl	40ed0c <__sfp_lock_release>
  412394:	4630      	mov	r0, r6
  412396:	bd70      	pop	{r4, r5, r6, pc}
  412398:	f7fc fc3c 	bl	40ec14 <__sinit>
  41239c:	e7cc      	b.n	412338 <_fclose_r+0x10>
  41239e:	4628      	mov	r0, r5
  4123a0:	6921      	ldr	r1, [r4, #16]
  4123a2:	f7fc fd79 	bl	40ee98 <_free_r>
  4123a6:	e7dd      	b.n	412364 <_fclose_r+0x3c>

004123a8 <fclose>:
  4123a8:	4b02      	ldr	r3, [pc, #8]	; (4123b4 <fclose+0xc>)
  4123aa:	4601      	mov	r1, r0
  4123ac:	6818      	ldr	r0, [r3, #0]
  4123ae:	f7ff bfbb 	b.w	412328 <_fclose_r>
  4123b2:	bf00      	nop
  4123b4:	20000640 	.word	0x20000640

004123b8 <_fstat_r>:
  4123b8:	b538      	push	{r3, r4, r5, lr}
  4123ba:	4c08      	ldr	r4, [pc, #32]	; (4123dc <_fstat_r+0x24>)
  4123bc:	2300      	movs	r3, #0
  4123be:	4605      	mov	r5, r0
  4123c0:	4608      	mov	r0, r1
  4123c2:	4611      	mov	r1, r2
  4123c4:	6023      	str	r3, [r4, #0]
  4123c6:	f7f7 fbfb 	bl	409bc0 <_fstat>
  4123ca:	1c43      	adds	r3, r0, #1
  4123cc:	d000      	beq.n	4123d0 <_fstat_r+0x18>
  4123ce:	bd38      	pop	{r3, r4, r5, pc}
  4123d0:	6823      	ldr	r3, [r4, #0]
  4123d2:	2b00      	cmp	r3, #0
  4123d4:	d0fb      	beq.n	4123ce <_fstat_r+0x16>
  4123d6:	602b      	str	r3, [r5, #0]
  4123d8:	bd38      	pop	{r3, r4, r5, pc}
  4123da:	bf00      	nop
  4123dc:	20016044 	.word	0x20016044

004123e0 <rshift>:
  4123e0:	6902      	ldr	r2, [r0, #16]
  4123e2:	114b      	asrs	r3, r1, #5
  4123e4:	4293      	cmp	r3, r2
  4123e6:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  4123ea:	f100 0814 	add.w	r8, r0, #20
  4123ee:	da28      	bge.n	412442 <rshift+0x62>
  4123f0:	f011 0c1f 	ands.w	ip, r1, #31
  4123f4:	eb08 0282 	add.w	r2, r8, r2, lsl #2
  4123f8:	eb08 0783 	add.w	r7, r8, r3, lsl #2
  4123fc:	d028      	beq.n	412450 <rshift+0x70>
  4123fe:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
  412402:	1d3b      	adds	r3, r7, #4
  412404:	429a      	cmp	r2, r3
  412406:	fa24 f40c 	lsr.w	r4, r4, ip
  41240a:	f1cc 0120 	rsb	r1, ip, #32
  41240e:	d935      	bls.n	41247c <rshift+0x9c>
  412410:	4645      	mov	r5, r8
  412412:	681e      	ldr	r6, [r3, #0]
  412414:	408e      	lsls	r6, r1
  412416:	4334      	orrs	r4, r6
  412418:	f845 4b04 	str.w	r4, [r5], #4
  41241c:	f853 4b04 	ldr.w	r4, [r3], #4
  412420:	4293      	cmp	r3, r2
  412422:	fa24 f40c 	lsr.w	r4, r4, ip
  412426:	d3f4      	bcc.n	412412 <rshift+0x32>
  412428:	1bd3      	subs	r3, r2, r7
  41242a:	3b05      	subs	r3, #5
  41242c:	f023 0303 	bic.w	r3, r3, #3
  412430:	3304      	adds	r3, #4
  412432:	4443      	add	r3, r8
  412434:	601c      	str	r4, [r3, #0]
  412436:	b104      	cbz	r4, 41243a <rshift+0x5a>
  412438:	3304      	adds	r3, #4
  41243a:	ebc8 0303 	rsb	r3, r8, r3
  41243e:	109b      	asrs	r3, r3, #2
  412440:	e016      	b.n	412470 <rshift+0x90>
  412442:	2300      	movs	r3, #0
  412444:	6103      	str	r3, [r0, #16]
  412446:	2300      	movs	r3, #0
  412448:	6143      	str	r3, [r0, #20]
  41244a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  41244e:	4770      	bx	lr
  412450:	42ba      	cmp	r2, r7
  412452:	d9f6      	bls.n	412442 <rshift+0x62>
  412454:	4641      	mov	r1, r8
  412456:	463b      	mov	r3, r7
  412458:	f853 4b04 	ldr.w	r4, [r3], #4
  41245c:	f841 4b04 	str.w	r4, [r1], #4
  412460:	429a      	cmp	r2, r3
  412462:	d8f9      	bhi.n	412458 <rshift+0x78>
  412464:	43fb      	mvns	r3, r7
  412466:	4413      	add	r3, r2
  412468:	f023 0303 	bic.w	r3, r3, #3
  41246c:	3304      	adds	r3, #4
  41246e:	109b      	asrs	r3, r3, #2
  412470:	6103      	str	r3, [r0, #16]
  412472:	2b00      	cmp	r3, #0
  412474:	d0e7      	beq.n	412446 <rshift+0x66>
  412476:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  41247a:	4770      	bx	lr
  41247c:	4643      	mov	r3, r8
  41247e:	e7d9      	b.n	412434 <rshift+0x54>

00412480 <__gethex>:
  412480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412484:	b08b      	sub	sp, #44	; 0x2c
  412486:	4688      	mov	r8, r1
  412488:	9206      	str	r2, [sp, #24]
  41248a:	9309      	str	r3, [sp, #36]	; 0x24
  41248c:	9007      	str	r0, [sp, #28]
  41248e:	f7fc ff9b 	bl	40f3c8 <_localeconv_r>
  412492:	6800      	ldr	r0, [r0, #0]
  412494:	9002      	str	r0, [sp, #8]
  412496:	f7f8 f993 	bl	40a7c0 <strlen>
  41249a:	f8d8 3000 	ldr.w	r3, [r8]
  41249e:	9902      	ldr	r1, [sp, #8]
  4124a0:	789a      	ldrb	r2, [r3, #2]
  4124a2:	9003      	str	r0, [sp, #12]
  4124a4:	4401      	add	r1, r0
  4124a6:	2a30      	cmp	r2, #48	; 0x30
  4124a8:	f811 ac01 	ldrb.w	sl, [r1, #-1]
  4124ac:	f103 0502 	add.w	r5, r3, #2
  4124b0:	f040 81a6 	bne.w	412800 <__gethex+0x380>
  4124b4:	3303      	adds	r3, #3
  4124b6:	2700      	movs	r7, #0
  4124b8:	461d      	mov	r5, r3
  4124ba:	f813 2b01 	ldrb.w	r2, [r3], #1
  4124be:	2a30      	cmp	r2, #48	; 0x30
  4124c0:	f107 0701 	add.w	r7, r7, #1
  4124c4:	d0f8      	beq.n	4124b8 <__gethex+0x38>
  4124c6:	4eb1      	ldr	r6, [pc, #708]	; (41278c <__gethex+0x30c>)
  4124c8:	5cb4      	ldrb	r4, [r6, r2]
  4124ca:	2c00      	cmp	r4, #0
  4124cc:	f000 80f4 	beq.w	4126b8 <__gethex+0x238>
  4124d0:	782b      	ldrb	r3, [r5, #0]
  4124d2:	f04f 0900 	mov.w	r9, #0
  4124d6:	5cf3      	ldrb	r3, [r6, r3]
  4124d8:	46cb      	mov	fp, r9
  4124da:	2b00      	cmp	r3, #0
  4124dc:	f000 8198 	beq.w	412810 <__gethex+0x390>
  4124e0:	1c6b      	adds	r3, r5, #1
  4124e2:	461c      	mov	r4, r3
  4124e4:	3301      	adds	r3, #1
  4124e6:	7822      	ldrb	r2, [r4, #0]
  4124e8:	5cb2      	ldrb	r2, [r6, r2]
  4124ea:	2a00      	cmp	r2, #0
  4124ec:	d1f9      	bne.n	4124e2 <__gethex+0x62>
  4124ee:	4620      	mov	r0, r4
  4124f0:	9902      	ldr	r1, [sp, #8]
  4124f2:	9a03      	ldr	r2, [sp, #12]
  4124f4:	f7f8 f994 	bl	40a820 <strncmp>
  4124f8:	b1e0      	cbz	r0, 412534 <__gethex+0xb4>
  4124fa:	7823      	ldrb	r3, [r4, #0]
  4124fc:	f1bb 0f00 	cmp.w	fp, #0
  412500:	f000 816c 	beq.w	4127dc <__gethex+0x35c>
  412504:	ebc4 0b0b 	rsb	fp, r4, fp
  412508:	ea4f 028b 	mov.w	r2, fp, lsl #2
  41250c:	9204      	str	r2, [sp, #16]
  41250e:	2b50      	cmp	r3, #80	; 0x50
  412510:	f000 809d 	beq.w	41264e <__gethex+0x1ce>
  412514:	2b70      	cmp	r3, #112	; 0x70
  412516:	f000 809a 	beq.w	41264e <__gethex+0x1ce>
  41251a:	4623      	mov	r3, r4
  41251c:	f8c8 3000 	str.w	r3, [r8]
  412520:	f1b9 0f00 	cmp.w	r9, #0
  412524:	d00c      	beq.n	412540 <__gethex+0xc0>
  412526:	2f00      	cmp	r7, #0
  412528:	bf0c      	ite	eq
  41252a:	2006      	moveq	r0, #6
  41252c:	2000      	movne	r0, #0
  41252e:	b00b      	add	sp, #44	; 0x2c
  412530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412534:	f1bb 0f00 	cmp.w	fp, #0
  412538:	f000 818c 	beq.w	412854 <__gethex+0x3d4>
  41253c:	7823      	ldrb	r3, [r4, #0]
  41253e:	e7e1      	b.n	412504 <__gethex+0x84>
  412540:	1b63      	subs	r3, r4, r5
  412542:	3b01      	subs	r3, #1
  412544:	2b07      	cmp	r3, #7
  412546:	4649      	mov	r1, r9
  412548:	dd04      	ble.n	412554 <__gethex+0xd4>
  41254a:	105b      	asrs	r3, r3, #1
  41254c:	2b07      	cmp	r3, #7
  41254e:	f101 0101 	add.w	r1, r1, #1
  412552:	dcfa      	bgt.n	41254a <__gethex+0xca>
  412554:	9807      	ldr	r0, [sp, #28]
  412556:	f7fd fb53 	bl	40fc00 <_Balloc>
  41255a:	42a5      	cmp	r5, r4
  41255c:	f100 0314 	add.w	r3, r0, #20
  412560:	9005      	str	r0, [sp, #20]
  412562:	9308      	str	r3, [sp, #32]
  412564:	f080 81cd 	bcs.w	412902 <__gethex+0x482>
  412568:	469b      	mov	fp, r3
  41256a:	9b03      	ldr	r3, [sp, #12]
  41256c:	f04f 0900 	mov.w	r9, #0
  412570:	464f      	mov	r7, r9
  412572:	f1c3 0c01 	rsb	ip, r3, #1
  412576:	e00e      	b.n	412596 <__gethex+0x116>
  412578:	2f20      	cmp	r7, #32
  41257a:	d05f      	beq.n	41263c <__gethex+0x1bc>
  41257c:	463a      	mov	r2, r7
  41257e:	3704      	adds	r7, #4
  412580:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  412584:	5cf3      	ldrb	r3, [r6, r3]
  412586:	f003 030f 	and.w	r3, r3, #15
  41258a:	4093      	lsls	r3, r2
  41258c:	4545      	cmp	r5, r8
  41258e:	ea49 0903 	orr.w	r9, r9, r3
  412592:	d21a      	bcs.n	4125ca <__gethex+0x14a>
  412594:	4644      	mov	r4, r8
  412596:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  41259a:	4553      	cmp	r3, sl
  41259c:	f104 38ff 	add.w	r8, r4, #4294967295
  4125a0:	d1ea      	bne.n	412578 <__gethex+0xf8>
  4125a2:	eb08 030c 	add.w	r3, r8, ip
  4125a6:	429d      	cmp	r5, r3
  4125a8:	d8e6      	bhi.n	412578 <__gethex+0xf8>
  4125aa:	4618      	mov	r0, r3
  4125ac:	9902      	ldr	r1, [sp, #8]
  4125ae:	9a03      	ldr	r2, [sp, #12]
  4125b0:	9301      	str	r3, [sp, #4]
  4125b2:	f8cd c000 	str.w	ip, [sp]
  4125b6:	f7f8 f933 	bl	40a820 <strncmp>
  4125ba:	9b01      	ldr	r3, [sp, #4]
  4125bc:	f8dd c000 	ldr.w	ip, [sp]
  4125c0:	2800      	cmp	r0, #0
  4125c2:	d1d9      	bne.n	412578 <__gethex+0xf8>
  4125c4:	4698      	mov	r8, r3
  4125c6:	4545      	cmp	r5, r8
  4125c8:	d3e4      	bcc.n	412594 <__gethex+0x114>
  4125ca:	f84b 9b04 	str.w	r9, [fp], #4
  4125ce:	9b08      	ldr	r3, [sp, #32]
  4125d0:	9905      	ldr	r1, [sp, #20]
  4125d2:	ebc3 0b0b 	rsb	fp, r3, fp
  4125d6:	ea4f 03ab 	mov.w	r3, fp, asr #2
  4125da:	4648      	mov	r0, r9
  4125dc:	610b      	str	r3, [r1, #16]
  4125de:	015d      	lsls	r5, r3, #5
  4125e0:	f7fd fbd6 	bl	40fd90 <__hi0bits>
  4125e4:	9a06      	ldr	r2, [sp, #24]
  4125e6:	6814      	ldr	r4, [r2, #0]
  4125e8:	1a28      	subs	r0, r5, r0
  4125ea:	42a0      	cmp	r0, r4
  4125ec:	f300 80d0 	bgt.w	412790 <__gethex+0x310>
  4125f0:	f2c0 80f7 	blt.w	4127e2 <__gethex+0x362>
  4125f4:	2600      	movs	r6, #0
  4125f6:	9806      	ldr	r0, [sp, #24]
  4125f8:	9904      	ldr	r1, [sp, #16]
  4125fa:	6883      	ldr	r3, [r0, #8]
  4125fc:	4299      	cmp	r1, r3
  4125fe:	f300 8092 	bgt.w	412726 <__gethex+0x2a6>
  412602:	9806      	ldr	r0, [sp, #24]
  412604:	9904      	ldr	r1, [sp, #16]
  412606:	6843      	ldr	r3, [r0, #4]
  412608:	4299      	cmp	r1, r3
  41260a:	f280 80a2 	bge.w	412752 <__gethex+0x2d2>
  41260e:	1a5d      	subs	r5, r3, r1
  412610:	42ac      	cmp	r4, r5
  412612:	f300 80ff 	bgt.w	412814 <__gethex+0x394>
  412616:	68c2      	ldr	r2, [r0, #12]
  412618:	2a02      	cmp	r2, #2
  41261a:	f000 8188 	beq.w	41292e <__gethex+0x4ae>
  41261e:	2a03      	cmp	r2, #3
  412620:	f000 8156 	beq.w	4128d0 <__gethex+0x450>
  412624:	2a01      	cmp	r2, #1
  412626:	f000 8173 	beq.w	412910 <__gethex+0x490>
  41262a:	9807      	ldr	r0, [sp, #28]
  41262c:	9905      	ldr	r1, [sp, #20]
  41262e:	f7fd fb0d 	bl	40fc4c <_Bfree>
  412632:	9a14      	ldr	r2, [sp, #80]	; 0x50
  412634:	2300      	movs	r3, #0
  412636:	6013      	str	r3, [r2, #0]
  412638:	2050      	movs	r0, #80	; 0x50
  41263a:	e778      	b.n	41252e <__gethex+0xae>
  41263c:	f8cb 9000 	str.w	r9, [fp]
  412640:	f04f 0900 	mov.w	r9, #0
  412644:	f10b 0b04 	add.w	fp, fp, #4
  412648:	464a      	mov	r2, r9
  41264a:	2704      	movs	r7, #4
  41264c:	e798      	b.n	412580 <__gethex+0x100>
  41264e:	7863      	ldrb	r3, [r4, #1]
  412650:	2b2b      	cmp	r3, #43	; 0x2b
  412652:	f000 8097 	beq.w	412784 <__gethex+0x304>
  412656:	2b2d      	cmp	r3, #45	; 0x2d
  412658:	d070      	beq.n	41273c <__gethex+0x2bc>
  41265a:	1c60      	adds	r0, r4, #1
  41265c:	f04f 0b00 	mov.w	fp, #0
  412660:	5cf2      	ldrb	r2, [r6, r3]
  412662:	494a      	ldr	r1, [pc, #296]	; (41278c <__gethex+0x30c>)
  412664:	1e53      	subs	r3, r2, #1
  412666:	2b18      	cmp	r3, #24
  412668:	f63f af57 	bhi.w	41251a <__gethex+0x9a>
  41266c:	7843      	ldrb	r3, [r0, #1]
  41266e:	5cc9      	ldrb	r1, [r1, r3]
  412670:	f101 3cff 	add.w	ip, r1, #4294967295
  412674:	f1bc 0f18 	cmp.w	ip, #24
  412678:	f1a2 0210 	sub.w	r2, r2, #16
  41267c:	f100 0301 	add.w	r3, r0, #1
  412680:	d812      	bhi.n	4126a8 <__gethex+0x228>
  412682:	3002      	adds	r0, #2
  412684:	f890 c000 	ldrb.w	ip, [r0]
  412688:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  41268c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  412690:	f816 100c 	ldrb.w	r1, [r6, ip]
  412694:	f101 3cff 	add.w	ip, r1, #4294967295
  412698:	f1bc 0f18 	cmp.w	ip, #24
  41269c:	4603      	mov	r3, r0
  41269e:	f1a2 0210 	sub.w	r2, r2, #16
  4126a2:	f100 0001 	add.w	r0, r0, #1
  4126a6:	d9ed      	bls.n	412684 <__gethex+0x204>
  4126a8:	f1bb 0f00 	cmp.w	fp, #0
  4126ac:	d000      	beq.n	4126b0 <__gethex+0x230>
  4126ae:	4252      	negs	r2, r2
  4126b0:	9804      	ldr	r0, [sp, #16]
  4126b2:	4410      	add	r0, r2
  4126b4:	9004      	str	r0, [sp, #16]
  4126b6:	e731      	b.n	41251c <__gethex+0x9c>
  4126b8:	4628      	mov	r0, r5
  4126ba:	9902      	ldr	r1, [sp, #8]
  4126bc:	9a03      	ldr	r2, [sp, #12]
  4126be:	f7f8 f8af 	bl	40a820 <strncmp>
  4126c2:	2800      	cmp	r0, #0
  4126c4:	d13f      	bne.n	412746 <__gethex+0x2c6>
  4126c6:	9803      	ldr	r0, [sp, #12]
  4126c8:	5c2b      	ldrb	r3, [r5, r0]
  4126ca:	5cf2      	ldrb	r2, [r6, r3]
  4126cc:	4604      	mov	r4, r0
  4126ce:	442c      	add	r4, r5
  4126d0:	2a00      	cmp	r2, #0
  4126d2:	f000 8097 	beq.w	412804 <__gethex+0x384>
  4126d6:	2b30      	cmp	r3, #48	; 0x30
  4126d8:	f040 8142 	bne.w	412960 <__gethex+0x4e0>
  4126dc:	1c62      	adds	r2, r4, #1
  4126de:	4615      	mov	r5, r2
  4126e0:	3201      	adds	r2, #1
  4126e2:	782b      	ldrb	r3, [r5, #0]
  4126e4:	2b30      	cmp	r3, #48	; 0x30
  4126e6:	d0fa      	beq.n	4126de <__gethex+0x25e>
  4126e8:	5cf3      	ldrb	r3, [r6, r3]
  4126ea:	f1d3 0901 	rsbs	r9, r3, #1
  4126ee:	46a3      	mov	fp, r4
  4126f0:	bf38      	it	cc
  4126f2:	f04f 0900 	movcc.w	r9, #0
  4126f6:	2701      	movs	r7, #1
  4126f8:	e6ef      	b.n	4124da <__gethex+0x5a>
  4126fa:	4447      	add	r7, r8
  4126fc:	f857 0c04 	ldr.w	r0, [r7, #-4]
  412700:	f7fd fb46 	bl	40fd90 <__hi0bits>
  412704:	f1c4 0320 	rsb	r3, r4, #32
  412708:	4298      	cmp	r0, r3
  41270a:	f280 80dd 	bge.w	4128c8 <__gethex+0x448>
  41270e:	9805      	ldr	r0, [sp, #20]
  412710:	2101      	movs	r1, #1
  412712:	f7ff fe65 	bl	4123e0 <rshift>
  412716:	9806      	ldr	r0, [sp, #24]
  412718:	9904      	ldr	r1, [sp, #16]
  41271a:	6883      	ldr	r3, [r0, #8]
  41271c:	3101      	adds	r1, #1
  41271e:	4299      	cmp	r1, r3
  412720:	9104      	str	r1, [sp, #16]
  412722:	f340 80d1 	ble.w	4128c8 <__gethex+0x448>
  412726:	9807      	ldr	r0, [sp, #28]
  412728:	9905      	ldr	r1, [sp, #20]
  41272a:	f7fd fa8f 	bl	40fc4c <_Bfree>
  41272e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  412730:	2300      	movs	r3, #0
  412732:	20a3      	movs	r0, #163	; 0xa3
  412734:	6013      	str	r3, [r2, #0]
  412736:	b00b      	add	sp, #44	; 0x2c
  412738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41273c:	f04f 0b01 	mov.w	fp, #1
  412740:	78a3      	ldrb	r3, [r4, #2]
  412742:	1ca0      	adds	r0, r4, #2
  412744:	e78c      	b.n	412660 <__gethex+0x1e0>
  412746:	9404      	str	r4, [sp, #16]
  412748:	782b      	ldrb	r3, [r5, #0]
  41274a:	462c      	mov	r4, r5
  41274c:	f04f 0901 	mov.w	r9, #1
  412750:	e6dd      	b.n	41250e <__gethex+0x8e>
  412752:	2501      	movs	r5, #1
  412754:	b166      	cbz	r6, 412770 <__gethex+0x2f0>
  412756:	9806      	ldr	r0, [sp, #24]
  412758:	68c3      	ldr	r3, [r0, #12]
  41275a:	2b02      	cmp	r3, #2
  41275c:	f000 808b 	beq.w	412876 <__gethex+0x3f6>
  412760:	2b03      	cmp	r3, #3
  412762:	f000 808c 	beq.w	41287e <__gethex+0x3fe>
  412766:	2b01      	cmp	r3, #1
  412768:	f000 80c2 	beq.w	4128f0 <__gethex+0x470>
  41276c:	f045 0510 	orr.w	r5, r5, #16
  412770:	9814      	ldr	r0, [sp, #80]	; 0x50
  412772:	9b05      	ldr	r3, [sp, #20]
  412774:	6003      	str	r3, [r0, #0]
  412776:	9909      	ldr	r1, [sp, #36]	; 0x24
  412778:	9b04      	ldr	r3, [sp, #16]
  41277a:	600b      	str	r3, [r1, #0]
  41277c:	4628      	mov	r0, r5
  41277e:	b00b      	add	sp, #44	; 0x2c
  412780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412784:	f04f 0b00 	mov.w	fp, #0
  412788:	e7da      	b.n	412740 <__gethex+0x2c0>
  41278a:	bf00      	nop
  41278c:	004139b8 	.word	0x004139b8
  412790:	1b05      	subs	r5, r0, r4
  412792:	4629      	mov	r1, r5
  412794:	9805      	ldr	r0, [sp, #20]
  412796:	f7fd fe4f 	bl	410438 <__any_on>
  41279a:	2800      	cmp	r0, #0
  41279c:	d036      	beq.n	41280c <__gethex+0x38c>
  41279e:	1e6b      	subs	r3, r5, #1
  4127a0:	115a      	asrs	r2, r3, #5
  4127a2:	9808      	ldr	r0, [sp, #32]
  4127a4:	f003 011f 	and.w	r1, r3, #31
  4127a8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4127ac:	2601      	movs	r6, #1
  4127ae:	fa06 f101 	lsl.w	r1, r6, r1
  4127b2:	4211      	tst	r1, r2
  4127b4:	d00a      	beq.n	4127cc <__gethex+0x34c>
  4127b6:	42b3      	cmp	r3, r6
  4127b8:	f340 80a8 	ble.w	41290c <__gethex+0x48c>
  4127bc:	9805      	ldr	r0, [sp, #20]
  4127be:	1ea9      	subs	r1, r5, #2
  4127c0:	f7fd fe3a 	bl	410438 <__any_on>
  4127c4:	2800      	cmp	r0, #0
  4127c6:	f000 80a1 	beq.w	41290c <__gethex+0x48c>
  4127ca:	2603      	movs	r6, #3
  4127cc:	9b04      	ldr	r3, [sp, #16]
  4127ce:	9805      	ldr	r0, [sp, #20]
  4127d0:	442b      	add	r3, r5
  4127d2:	4629      	mov	r1, r5
  4127d4:	9304      	str	r3, [sp, #16]
  4127d6:	f7ff fe03 	bl	4123e0 <rshift>
  4127da:	e70c      	b.n	4125f6 <__gethex+0x176>
  4127dc:	f8cd b010 	str.w	fp, [sp, #16]
  4127e0:	e695      	b.n	41250e <__gethex+0x8e>
  4127e2:	1a25      	subs	r5, r4, r0
  4127e4:	9905      	ldr	r1, [sp, #20]
  4127e6:	9807      	ldr	r0, [sp, #28]
  4127e8:	462a      	mov	r2, r5
  4127ea:	f7fd fc15 	bl	410018 <__lshift>
  4127ee:	9b04      	ldr	r3, [sp, #16]
  4127f0:	9005      	str	r0, [sp, #20]
  4127f2:	1b5b      	subs	r3, r3, r5
  4127f4:	9304      	str	r3, [sp, #16]
  4127f6:	f100 0314 	add.w	r3, r0, #20
  4127fa:	9308      	str	r3, [sp, #32]
  4127fc:	2600      	movs	r6, #0
  4127fe:	e6fa      	b.n	4125f6 <__gethex+0x176>
  412800:	2700      	movs	r7, #0
  412802:	e660      	b.n	4124c6 <__gethex+0x46>
  412804:	9204      	str	r2, [sp, #16]
  412806:	f04f 0901 	mov.w	r9, #1
  41280a:	e680      	b.n	41250e <__gethex+0x8e>
  41280c:	4606      	mov	r6, r0
  41280e:	e7dd      	b.n	4127cc <__gethex+0x34c>
  412810:	462c      	mov	r4, r5
  412812:	e66c      	b.n	4124ee <__gethex+0x6e>
  412814:	1e6f      	subs	r7, r5, #1
  412816:	2e00      	cmp	r6, #0
  412818:	d158      	bne.n	4128cc <__gethex+0x44c>
  41281a:	2f00      	cmp	r7, #0
  41281c:	dd04      	ble.n	412828 <__gethex+0x3a8>
  41281e:	9805      	ldr	r0, [sp, #20]
  412820:	4639      	mov	r1, r7
  412822:	f7fd fe09 	bl	410438 <__any_on>
  412826:	4606      	mov	r6, r0
  412828:	9808      	ldr	r0, [sp, #32]
  41282a:	117b      	asrs	r3, r7, #5
  41282c:	2201      	movs	r2, #1
  41282e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  412832:	9805      	ldr	r0, [sp, #20]
  412834:	f007 071f 	and.w	r7, r7, #31
  412838:	40ba      	lsls	r2, r7
  41283a:	421a      	tst	r2, r3
  41283c:	4629      	mov	r1, r5
  41283e:	bf18      	it	ne
  412840:	f046 0602 	orrne.w	r6, r6, #2
  412844:	f7ff fdcc 	bl	4123e0 <rshift>
  412848:	9b06      	ldr	r3, [sp, #24]
  41284a:	685b      	ldr	r3, [r3, #4]
  41284c:	9304      	str	r3, [sp, #16]
  41284e:	1b64      	subs	r4, r4, r5
  412850:	2502      	movs	r5, #2
  412852:	e77f      	b.n	412754 <__gethex+0x2d4>
  412854:	9903      	ldr	r1, [sp, #12]
  412856:	5c63      	ldrb	r3, [r4, r1]
  412858:	5cf2      	ldrb	r2, [r6, r3]
  41285a:	468b      	mov	fp, r1
  41285c:	44a3      	add	fp, r4
  41285e:	2a00      	cmp	r2, #0
  412860:	f000 8081 	beq.w	412966 <__gethex+0x4e6>
  412864:	f10b 0201 	add.w	r2, fp, #1
  412868:	4614      	mov	r4, r2
  41286a:	3201      	adds	r2, #1
  41286c:	7823      	ldrb	r3, [r4, #0]
  41286e:	5cf1      	ldrb	r1, [r6, r3]
  412870:	2900      	cmp	r1, #0
  412872:	d1f9      	bne.n	412868 <__gethex+0x3e8>
  412874:	e646      	b.n	412504 <__gethex+0x84>
  412876:	9a15      	ldr	r2, [sp, #84]	; 0x54
  412878:	f1c2 0201 	rsb	r2, r2, #1
  41287c:	9215      	str	r2, [sp, #84]	; 0x54
  41287e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  412880:	2b00      	cmp	r3, #0
  412882:	f43f af73 	beq.w	41276c <__gethex+0x2ec>
  412886:	9b05      	ldr	r3, [sp, #20]
  412888:	9f08      	ldr	r7, [sp, #32]
  41288a:	691e      	ldr	r6, [r3, #16]
  41288c:	9b08      	ldr	r3, [sp, #32]
  41288e:	ea4f 0886 	mov.w	r8, r6, lsl #2
  412892:	4447      	add	r7, r8
  412894:	2000      	movs	r0, #0
  412896:	e003      	b.n	4128a0 <__gethex+0x420>
  412898:	429f      	cmp	r7, r3
  41289a:	f843 0c04 	str.w	r0, [r3, #-4]
  41289e:	d94a      	bls.n	412936 <__gethex+0x4b6>
  4128a0:	4619      	mov	r1, r3
  4128a2:	f853 2b04 	ldr.w	r2, [r3], #4
  4128a6:	f1b2 3fff 	cmp.w	r2, #4294967295
  4128aa:	d0f5      	beq.n	412898 <__gethex+0x418>
  4128ac:	3201      	adds	r2, #1
  4128ae:	9f08      	ldr	r7, [sp, #32]
  4128b0:	600a      	str	r2, [r1, #0]
  4128b2:	2d02      	cmp	r5, #2
  4128b4:	d04d      	beq.n	412952 <__gethex+0x4d2>
  4128b6:	9a05      	ldr	r2, [sp, #20]
  4128b8:	6913      	ldr	r3, [r2, #16]
  4128ba:	429e      	cmp	r6, r3
  4128bc:	f6ff af27 	blt.w	41270e <__gethex+0x28e>
  4128c0:	f014 041f 	ands.w	r4, r4, #31
  4128c4:	f47f af19 	bne.w	4126fa <__gethex+0x27a>
  4128c8:	2521      	movs	r5, #33	; 0x21
  4128ca:	e751      	b.n	412770 <__gethex+0x2f0>
  4128cc:	2601      	movs	r6, #1
  4128ce:	e7ab      	b.n	412828 <__gethex+0x3a8>
  4128d0:	9915      	ldr	r1, [sp, #84]	; 0x54
  4128d2:	2900      	cmp	r1, #0
  4128d4:	f43f aea9 	beq.w	41262a <__gethex+0x1aa>
  4128d8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4128da:	9914      	ldr	r1, [sp, #80]	; 0x50
  4128dc:	6003      	str	r3, [r0, #0]
  4128de:	9b05      	ldr	r3, [sp, #20]
  4128e0:	2201      	movs	r2, #1
  4128e2:	611a      	str	r2, [r3, #16]
  4128e4:	9b08      	ldr	r3, [sp, #32]
  4128e6:	601a      	str	r2, [r3, #0]
  4128e8:	9b05      	ldr	r3, [sp, #20]
  4128ea:	600b      	str	r3, [r1, #0]
  4128ec:	2062      	movs	r0, #98	; 0x62
  4128ee:	e61e      	b.n	41252e <__gethex+0xae>
  4128f0:	07b2      	lsls	r2, r6, #30
  4128f2:	f57f af3b 	bpl.w	41276c <__gethex+0x2ec>
  4128f6:	9908      	ldr	r1, [sp, #32]
  4128f8:	680b      	ldr	r3, [r1, #0]
  4128fa:	4333      	orrs	r3, r6
  4128fc:	07db      	lsls	r3, r3, #31
  4128fe:	d4c2      	bmi.n	412886 <__gethex+0x406>
  412900:	e734      	b.n	41276c <__gethex+0x2ec>
  412902:	f8dd b020 	ldr.w	fp, [sp, #32]
  412906:	f04f 0900 	mov.w	r9, #0
  41290a:	e65e      	b.n	4125ca <__gethex+0x14a>
  41290c:	2602      	movs	r6, #2
  41290e:	e75d      	b.n	4127cc <__gethex+0x34c>
  412910:	42a5      	cmp	r5, r4
  412912:	f47f ae8a 	bne.w	41262a <__gethex+0x1aa>
  412916:	2c01      	cmp	r4, #1
  412918:	ddde      	ble.n	4128d8 <__gethex+0x458>
  41291a:	1e61      	subs	r1, r4, #1
  41291c:	9805      	ldr	r0, [sp, #20]
  41291e:	f7fd fd8b 	bl	410438 <__any_on>
  412922:	2800      	cmp	r0, #0
  412924:	f43f ae81 	beq.w	41262a <__gethex+0x1aa>
  412928:	9a06      	ldr	r2, [sp, #24]
  41292a:	6853      	ldr	r3, [r2, #4]
  41292c:	e7d4      	b.n	4128d8 <__gethex+0x458>
  41292e:	9815      	ldr	r0, [sp, #84]	; 0x54
  412930:	2800      	cmp	r0, #0
  412932:	d0d1      	beq.n	4128d8 <__gethex+0x458>
  412934:	e679      	b.n	41262a <__gethex+0x1aa>
  412936:	9805      	ldr	r0, [sp, #20]
  412938:	6883      	ldr	r3, [r0, #8]
  41293a:	429e      	cmp	r6, r3
  41293c:	da15      	bge.n	41296a <__gethex+0x4ea>
  41293e:	9f08      	ldr	r7, [sp, #32]
  412940:	4633      	mov	r3, r6
  412942:	9805      	ldr	r0, [sp, #20]
  412944:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  412948:	2101      	movs	r1, #1
  41294a:	3301      	adds	r3, #1
  41294c:	6103      	str	r3, [r0, #16]
  41294e:	6151      	str	r1, [r2, #20]
  412950:	e7af      	b.n	4128b2 <__gethex+0x432>
  412952:	9906      	ldr	r1, [sp, #24]
  412954:	680b      	ldr	r3, [r1, #0]
  412956:	3b01      	subs	r3, #1
  412958:	42a3      	cmp	r3, r4
  41295a:	d01c      	beq.n	412996 <__gethex+0x516>
  41295c:	2522      	movs	r5, #34	; 0x22
  41295e:	e707      	b.n	412770 <__gethex+0x2f0>
  412960:	4613      	mov	r3, r2
  412962:	4625      	mov	r5, r4
  412964:	e6c1      	b.n	4126ea <__gethex+0x26a>
  412966:	465c      	mov	r4, fp
  412968:	e5cc      	b.n	412504 <__gethex+0x84>
  41296a:	6841      	ldr	r1, [r0, #4]
  41296c:	9807      	ldr	r0, [sp, #28]
  41296e:	3101      	adds	r1, #1
  412970:	f7fd f946 	bl	40fc00 <_Balloc>
  412974:	9905      	ldr	r1, [sp, #20]
  412976:	690b      	ldr	r3, [r1, #16]
  412978:	1c9a      	adds	r2, r3, #2
  41297a:	4607      	mov	r7, r0
  41297c:	0092      	lsls	r2, r2, #2
  41297e:	310c      	adds	r1, #12
  412980:	300c      	adds	r0, #12
  412982:	f7f7 fd1b 	bl	40a3bc <memcpy>
  412986:	9807      	ldr	r0, [sp, #28]
  412988:	9905      	ldr	r1, [sp, #20]
  41298a:	f7fd f95f 	bl	40fc4c <_Bfree>
  41298e:	9705      	str	r7, [sp, #20]
  412990:	693b      	ldr	r3, [r7, #16]
  412992:	3714      	adds	r7, #20
  412994:	e7d5      	b.n	412942 <__gethex+0x4c2>
  412996:	1163      	asrs	r3, r4, #5
  412998:	2201      	movs	r2, #1
  41299a:	f004 041f 	and.w	r4, r4, #31
  41299e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
  4129a2:	40a2      	lsls	r2, r4
  4129a4:	421a      	tst	r2, r3
  4129a6:	bf14      	ite	ne
  4129a8:	2521      	movne	r5, #33	; 0x21
  4129aa:	2522      	moveq	r5, #34	; 0x22
  4129ac:	e6e0      	b.n	412770 <__gethex+0x2f0>
  4129ae:	bf00      	nop

004129b0 <__hexnan>:
  4129b0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4129b4:	680b      	ldr	r3, [r1, #0]
  4129b6:	f8df 8188 	ldr.w	r8, [pc, #392]	; 412b40 <__hexnan+0x190>
  4129ba:	b084      	sub	sp, #16
  4129bc:	4691      	mov	r9, r2
  4129be:	115a      	asrs	r2, r3, #5
  4129c0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  4129c4:	f013 031f 	ands.w	r3, r3, #31
  4129c8:	9200      	str	r2, [sp, #0]
  4129ca:	9001      	str	r0, [sp, #4]
  4129cc:	bf1c      	itt	ne
  4129ce:	3204      	addne	r2, #4
  4129d0:	9200      	strne	r2, [sp, #0]
  4129d2:	9a01      	ldr	r2, [sp, #4]
  4129d4:	9800      	ldr	r0, [sp, #0]
  4129d6:	9303      	str	r3, [sp, #12]
  4129d8:	6811      	ldr	r1, [r2, #0]
  4129da:	2300      	movs	r3, #0
  4129dc:	f840 3c04 	str.w	r3, [r0, #-4]
  4129e0:	469a      	mov	sl, r3
  4129e2:	461d      	mov	r5, r3
  4129e4:	461e      	mov	r6, r3
  4129e6:	784b      	ldrb	r3, [r1, #1]
  4129e8:	1f07      	subs	r7, r0, #4
  4129ea:	46bc      	mov	ip, r7
  4129ec:	4638      	mov	r0, r7
  4129ee:	9702      	str	r7, [sp, #8]
  4129f0:	b33b      	cbz	r3, 412a42 <__hexnan+0x92>
  4129f2:	f818 2003 	ldrb.w	r2, [r8, r3]
  4129f6:	2a00      	cmp	r2, #0
  4129f8:	d148      	bne.n	412a8c <__hexnan+0xdc>
  4129fa:	2b20      	cmp	r3, #32
  4129fc:	d866      	bhi.n	412acc <__hexnan+0x11c>
  4129fe:	42ae      	cmp	r6, r5
  412a00:	dd1b      	ble.n	412a3a <__hexnan+0x8a>
  412a02:	4560      	cmp	r0, ip
  412a04:	d215      	bcs.n	412a32 <__hexnan+0x82>
  412a06:	f1ba 0f07 	cmp.w	sl, #7
  412a0a:	dc12      	bgt.n	412a32 <__hexnan+0x82>
  412a0c:	f1ca 0a08 	rsb	sl, sl, #8
  412a10:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
  412a14:	6802      	ldr	r2, [r0, #0]
  412a16:	f1ca 0b20 	rsb	fp, sl, #32
  412a1a:	4603      	mov	r3, r0
  412a1c:	685c      	ldr	r4, [r3, #4]
  412a1e:	fa04 f70b 	lsl.w	r7, r4, fp
  412a22:	4317      	orrs	r7, r2
  412a24:	fa24 f20a 	lsr.w	r2, r4, sl
  412a28:	601f      	str	r7, [r3, #0]
  412a2a:	f843 2f04 	str.w	r2, [r3, #4]!
  412a2e:	459c      	cmp	ip, r3
  412a30:	d8f4      	bhi.n	412a1c <__hexnan+0x6c>
  412a32:	4548      	cmp	r0, r9
  412a34:	d841      	bhi.n	412aba <__hexnan+0x10a>
  412a36:	f04f 0a08 	mov.w	sl, #8
  412a3a:	3101      	adds	r1, #1
  412a3c:	784b      	ldrb	r3, [r1, #1]
  412a3e:	2b00      	cmp	r3, #0
  412a40:	d1d7      	bne.n	4129f2 <__hexnan+0x42>
  412a42:	9f02      	ldr	r7, [sp, #8]
  412a44:	2e00      	cmp	r6, #0
  412a46:	d044      	beq.n	412ad2 <__hexnan+0x122>
  412a48:	4560      	cmp	r0, ip
  412a4a:	d202      	bcs.n	412a52 <__hexnan+0xa2>
  412a4c:	f1ba 0f07 	cmp.w	sl, #7
  412a50:	dd62      	ble.n	412b18 <__hexnan+0x168>
  412a52:	4581      	cmp	r9, r0
  412a54:	d242      	bcs.n	412adc <__hexnan+0x12c>
  412a56:	464b      	mov	r3, r9
  412a58:	f850 2b04 	ldr.w	r2, [r0], #4
  412a5c:	f843 2b04 	str.w	r2, [r3], #4
  412a60:	4287      	cmp	r7, r0
  412a62:	d2f9      	bcs.n	412a58 <__hexnan+0xa8>
  412a64:	2200      	movs	r2, #0
  412a66:	f843 2b04 	str.w	r2, [r3], #4
  412a6a:	429f      	cmp	r7, r3
  412a6c:	d2fb      	bcs.n	412a66 <__hexnan+0xb6>
  412a6e:	9800      	ldr	r0, [sp, #0]
  412a70:	f850 3c04 	ldr.w	r3, [r0, #-4]
  412a74:	b92b      	cbnz	r3, 412a82 <__hexnan+0xd2>
  412a76:	45b9      	cmp	r9, r7
  412a78:	d041      	beq.n	412afe <__hexnan+0x14e>
  412a7a:	f857 3d04 	ldr.w	r3, [r7, #-4]!
  412a7e:	2b00      	cmp	r3, #0
  412a80:	d0f9      	beq.n	412a76 <__hexnan+0xc6>
  412a82:	2005      	movs	r0, #5
  412a84:	b004      	add	sp, #16
  412a86:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  412a8a:	4770      	bx	lr
  412a8c:	f10a 0a01 	add.w	sl, sl, #1
  412a90:	f1ba 0f08 	cmp.w	sl, #8
  412a94:	f106 0601 	add.w	r6, r6, #1
  412a98:	dc06      	bgt.n	412aa8 <__hexnan+0xf8>
  412a9a:	6803      	ldr	r3, [r0, #0]
  412a9c:	011b      	lsls	r3, r3, #4
  412a9e:	f002 020f 	and.w	r2, r2, #15
  412aa2:	431a      	orrs	r2, r3
  412aa4:	6002      	str	r2, [r0, #0]
  412aa6:	e7c8      	b.n	412a3a <__hexnan+0x8a>
  412aa8:	4548      	cmp	r0, r9
  412aaa:	d9c6      	bls.n	412a3a <__hexnan+0x8a>
  412aac:	2300      	movs	r3, #0
  412aae:	f840 3c04 	str.w	r3, [r0, #-4]
  412ab2:	f04f 0a01 	mov.w	sl, #1
  412ab6:	3804      	subs	r0, #4
  412ab8:	e7f1      	b.n	412a9e <__hexnan+0xee>
  412aba:	2300      	movs	r3, #0
  412abc:	f1a0 0c04 	sub.w	ip, r0, #4
  412ac0:	f840 3c04 	str.w	r3, [r0, #-4]
  412ac4:	4635      	mov	r5, r6
  412ac6:	4660      	mov	r0, ip
  412ac8:	469a      	mov	sl, r3
  412aca:	e7b6      	b.n	412a3a <__hexnan+0x8a>
  412acc:	2b29      	cmp	r3, #41	; 0x29
  412ace:	9f02      	ldr	r7, [sp, #8]
  412ad0:	d01c      	beq.n	412b0c <__hexnan+0x15c>
  412ad2:	2004      	movs	r0, #4
  412ad4:	b004      	add	sp, #16
  412ad6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  412ada:	4770      	bx	lr
  412adc:	9a03      	ldr	r2, [sp, #12]
  412ade:	2a00      	cmp	r2, #0
  412ae0:	d0c5      	beq.n	412a6e <__hexnan+0xbe>
  412ae2:	9b03      	ldr	r3, [sp, #12]
  412ae4:	9800      	ldr	r0, [sp, #0]
  412ae6:	f1c3 0220 	rsb	r2, r3, #32
  412aea:	f04f 31ff 	mov.w	r1, #4294967295
  412aee:	f850 3c04 	ldr.w	r3, [r0, #-4]
  412af2:	fa21 f202 	lsr.w	r2, r1, r2
  412af6:	4013      	ands	r3, r2
  412af8:	f840 3c04 	str.w	r3, [r0, #-4]
  412afc:	e7ba      	b.n	412a74 <__hexnan+0xc4>
  412afe:	2301      	movs	r3, #1
  412b00:	2005      	movs	r0, #5
  412b02:	603b      	str	r3, [r7, #0]
  412b04:	b004      	add	sp, #16
  412b06:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  412b0a:	4770      	bx	lr
  412b0c:	9a01      	ldr	r2, [sp, #4]
  412b0e:	3102      	adds	r1, #2
  412b10:	6011      	str	r1, [r2, #0]
  412b12:	2e00      	cmp	r6, #0
  412b14:	d198      	bne.n	412a48 <__hexnan+0x98>
  412b16:	e7dc      	b.n	412ad2 <__hexnan+0x122>
  412b18:	f1ca 0508 	rsb	r5, sl, #8
  412b1c:	00ad      	lsls	r5, r5, #2
  412b1e:	6802      	ldr	r2, [r0, #0]
  412b20:	f1c5 0620 	rsb	r6, r5, #32
  412b24:	4603      	mov	r3, r0
  412b26:	6859      	ldr	r1, [r3, #4]
  412b28:	fa01 f406 	lsl.w	r4, r1, r6
  412b2c:	4314      	orrs	r4, r2
  412b2e:	fa21 f205 	lsr.w	r2, r1, r5
  412b32:	601c      	str	r4, [r3, #0]
  412b34:	f843 2f04 	str.w	r2, [r3, #4]!
  412b38:	4563      	cmp	r3, ip
  412b3a:	d3f4      	bcc.n	412b26 <__hexnan+0x176>
  412b3c:	e789      	b.n	412a52 <__hexnan+0xa2>
  412b3e:	bf00      	nop
  412b40:	004139b8 	.word	0x004139b8

00412b44 <_isatty_r>:
  412b44:	b538      	push	{r3, r4, r5, lr}
  412b46:	4c07      	ldr	r4, [pc, #28]	; (412b64 <_isatty_r+0x20>)
  412b48:	2300      	movs	r3, #0
  412b4a:	4605      	mov	r5, r0
  412b4c:	4608      	mov	r0, r1
  412b4e:	6023      	str	r3, [r4, #0]
  412b50:	f7f7 f846 	bl	409be0 <_isatty>
  412b54:	1c43      	adds	r3, r0, #1
  412b56:	d000      	beq.n	412b5a <_isatty_r+0x16>
  412b58:	bd38      	pop	{r3, r4, r5, pc}
  412b5a:	6823      	ldr	r3, [r4, #0]
  412b5c:	2b00      	cmp	r3, #0
  412b5e:	d0fb      	beq.n	412b58 <_isatty_r+0x14>
  412b60:	602b      	str	r3, [r5, #0]
  412b62:	bd38      	pop	{r3, r4, r5, pc}
  412b64:	20016044 	.word	0x20016044

00412b68 <__aeabi_drsub>:
  412b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  412b6c:	e002      	b.n	412b74 <__adddf3>
  412b6e:	bf00      	nop

00412b70 <__aeabi_dsub>:
  412b70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00412b74 <__adddf3>:
  412b74:	b530      	push	{r4, r5, lr}
  412b76:	ea4f 0441 	mov.w	r4, r1, lsl #1
  412b7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  412b7e:	ea94 0f05 	teq	r4, r5
  412b82:	bf08      	it	eq
  412b84:	ea90 0f02 	teqeq	r0, r2
  412b88:	bf1f      	itttt	ne
  412b8a:	ea54 0c00 	orrsne.w	ip, r4, r0
  412b8e:	ea55 0c02 	orrsne.w	ip, r5, r2
  412b92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  412b96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  412b9a:	f000 80e2 	beq.w	412d62 <__adddf3+0x1ee>
  412b9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  412ba2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  412ba6:	bfb8      	it	lt
  412ba8:	426d      	neglt	r5, r5
  412baa:	dd0c      	ble.n	412bc6 <__adddf3+0x52>
  412bac:	442c      	add	r4, r5
  412bae:	ea80 0202 	eor.w	r2, r0, r2
  412bb2:	ea81 0303 	eor.w	r3, r1, r3
  412bb6:	ea82 0000 	eor.w	r0, r2, r0
  412bba:	ea83 0101 	eor.w	r1, r3, r1
  412bbe:	ea80 0202 	eor.w	r2, r0, r2
  412bc2:	ea81 0303 	eor.w	r3, r1, r3
  412bc6:	2d36      	cmp	r5, #54	; 0x36
  412bc8:	bf88      	it	hi
  412bca:	bd30      	pophi	{r4, r5, pc}
  412bcc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  412bd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  412bd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  412bd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  412bdc:	d002      	beq.n	412be4 <__adddf3+0x70>
  412bde:	4240      	negs	r0, r0
  412be0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  412be4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  412be8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  412bec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  412bf0:	d002      	beq.n	412bf8 <__adddf3+0x84>
  412bf2:	4252      	negs	r2, r2
  412bf4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  412bf8:	ea94 0f05 	teq	r4, r5
  412bfc:	f000 80a7 	beq.w	412d4e <__adddf3+0x1da>
  412c00:	f1a4 0401 	sub.w	r4, r4, #1
  412c04:	f1d5 0e20 	rsbs	lr, r5, #32
  412c08:	db0d      	blt.n	412c26 <__adddf3+0xb2>
  412c0a:	fa02 fc0e 	lsl.w	ip, r2, lr
  412c0e:	fa22 f205 	lsr.w	r2, r2, r5
  412c12:	1880      	adds	r0, r0, r2
  412c14:	f141 0100 	adc.w	r1, r1, #0
  412c18:	fa03 f20e 	lsl.w	r2, r3, lr
  412c1c:	1880      	adds	r0, r0, r2
  412c1e:	fa43 f305 	asr.w	r3, r3, r5
  412c22:	4159      	adcs	r1, r3
  412c24:	e00e      	b.n	412c44 <__adddf3+0xd0>
  412c26:	f1a5 0520 	sub.w	r5, r5, #32
  412c2a:	f10e 0e20 	add.w	lr, lr, #32
  412c2e:	2a01      	cmp	r2, #1
  412c30:	fa03 fc0e 	lsl.w	ip, r3, lr
  412c34:	bf28      	it	cs
  412c36:	f04c 0c02 	orrcs.w	ip, ip, #2
  412c3a:	fa43 f305 	asr.w	r3, r3, r5
  412c3e:	18c0      	adds	r0, r0, r3
  412c40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  412c44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  412c48:	d507      	bpl.n	412c5a <__adddf3+0xe6>
  412c4a:	f04f 0e00 	mov.w	lr, #0
  412c4e:	f1dc 0c00 	rsbs	ip, ip, #0
  412c52:	eb7e 0000 	sbcs.w	r0, lr, r0
  412c56:	eb6e 0101 	sbc.w	r1, lr, r1
  412c5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  412c5e:	d31b      	bcc.n	412c98 <__adddf3+0x124>
  412c60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  412c64:	d30c      	bcc.n	412c80 <__adddf3+0x10c>
  412c66:	0849      	lsrs	r1, r1, #1
  412c68:	ea5f 0030 	movs.w	r0, r0, rrx
  412c6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  412c70:	f104 0401 	add.w	r4, r4, #1
  412c74:	ea4f 5244 	mov.w	r2, r4, lsl #21
  412c78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  412c7c:	f080 809a 	bcs.w	412db4 <__adddf3+0x240>
  412c80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  412c84:	bf08      	it	eq
  412c86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  412c8a:	f150 0000 	adcs.w	r0, r0, #0
  412c8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  412c92:	ea41 0105 	orr.w	r1, r1, r5
  412c96:	bd30      	pop	{r4, r5, pc}
  412c98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  412c9c:	4140      	adcs	r0, r0
  412c9e:	eb41 0101 	adc.w	r1, r1, r1
  412ca2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  412ca6:	f1a4 0401 	sub.w	r4, r4, #1
  412caa:	d1e9      	bne.n	412c80 <__adddf3+0x10c>
  412cac:	f091 0f00 	teq	r1, #0
  412cb0:	bf04      	itt	eq
  412cb2:	4601      	moveq	r1, r0
  412cb4:	2000      	moveq	r0, #0
  412cb6:	fab1 f381 	clz	r3, r1
  412cba:	bf08      	it	eq
  412cbc:	3320      	addeq	r3, #32
  412cbe:	f1a3 030b 	sub.w	r3, r3, #11
  412cc2:	f1b3 0220 	subs.w	r2, r3, #32
  412cc6:	da0c      	bge.n	412ce2 <__adddf3+0x16e>
  412cc8:	320c      	adds	r2, #12
  412cca:	dd08      	ble.n	412cde <__adddf3+0x16a>
  412ccc:	f102 0c14 	add.w	ip, r2, #20
  412cd0:	f1c2 020c 	rsb	r2, r2, #12
  412cd4:	fa01 f00c 	lsl.w	r0, r1, ip
  412cd8:	fa21 f102 	lsr.w	r1, r1, r2
  412cdc:	e00c      	b.n	412cf8 <__adddf3+0x184>
  412cde:	f102 0214 	add.w	r2, r2, #20
  412ce2:	bfd8      	it	le
  412ce4:	f1c2 0c20 	rsble	ip, r2, #32
  412ce8:	fa01 f102 	lsl.w	r1, r1, r2
  412cec:	fa20 fc0c 	lsr.w	ip, r0, ip
  412cf0:	bfdc      	itt	le
  412cf2:	ea41 010c 	orrle.w	r1, r1, ip
  412cf6:	4090      	lslle	r0, r2
  412cf8:	1ae4      	subs	r4, r4, r3
  412cfa:	bfa2      	ittt	ge
  412cfc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  412d00:	4329      	orrge	r1, r5
  412d02:	bd30      	popge	{r4, r5, pc}
  412d04:	ea6f 0404 	mvn.w	r4, r4
  412d08:	3c1f      	subs	r4, #31
  412d0a:	da1c      	bge.n	412d46 <__adddf3+0x1d2>
  412d0c:	340c      	adds	r4, #12
  412d0e:	dc0e      	bgt.n	412d2e <__adddf3+0x1ba>
  412d10:	f104 0414 	add.w	r4, r4, #20
  412d14:	f1c4 0220 	rsb	r2, r4, #32
  412d18:	fa20 f004 	lsr.w	r0, r0, r4
  412d1c:	fa01 f302 	lsl.w	r3, r1, r2
  412d20:	ea40 0003 	orr.w	r0, r0, r3
  412d24:	fa21 f304 	lsr.w	r3, r1, r4
  412d28:	ea45 0103 	orr.w	r1, r5, r3
  412d2c:	bd30      	pop	{r4, r5, pc}
  412d2e:	f1c4 040c 	rsb	r4, r4, #12
  412d32:	f1c4 0220 	rsb	r2, r4, #32
  412d36:	fa20 f002 	lsr.w	r0, r0, r2
  412d3a:	fa01 f304 	lsl.w	r3, r1, r4
  412d3e:	ea40 0003 	orr.w	r0, r0, r3
  412d42:	4629      	mov	r1, r5
  412d44:	bd30      	pop	{r4, r5, pc}
  412d46:	fa21 f004 	lsr.w	r0, r1, r4
  412d4a:	4629      	mov	r1, r5
  412d4c:	bd30      	pop	{r4, r5, pc}
  412d4e:	f094 0f00 	teq	r4, #0
  412d52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  412d56:	bf06      	itte	eq
  412d58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  412d5c:	3401      	addeq	r4, #1
  412d5e:	3d01      	subne	r5, #1
  412d60:	e74e      	b.n	412c00 <__adddf3+0x8c>
  412d62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  412d66:	bf18      	it	ne
  412d68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  412d6c:	d029      	beq.n	412dc2 <__adddf3+0x24e>
  412d6e:	ea94 0f05 	teq	r4, r5
  412d72:	bf08      	it	eq
  412d74:	ea90 0f02 	teqeq	r0, r2
  412d78:	d005      	beq.n	412d86 <__adddf3+0x212>
  412d7a:	ea54 0c00 	orrs.w	ip, r4, r0
  412d7e:	bf04      	itt	eq
  412d80:	4619      	moveq	r1, r3
  412d82:	4610      	moveq	r0, r2
  412d84:	bd30      	pop	{r4, r5, pc}
  412d86:	ea91 0f03 	teq	r1, r3
  412d8a:	bf1e      	ittt	ne
  412d8c:	2100      	movne	r1, #0
  412d8e:	2000      	movne	r0, #0
  412d90:	bd30      	popne	{r4, r5, pc}
  412d92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  412d96:	d105      	bne.n	412da4 <__adddf3+0x230>
  412d98:	0040      	lsls	r0, r0, #1
  412d9a:	4149      	adcs	r1, r1
  412d9c:	bf28      	it	cs
  412d9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  412da2:	bd30      	pop	{r4, r5, pc}
  412da4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  412da8:	bf3c      	itt	cc
  412daa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  412dae:	bd30      	popcc	{r4, r5, pc}
  412db0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  412db4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  412db8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  412dbc:	f04f 0000 	mov.w	r0, #0
  412dc0:	bd30      	pop	{r4, r5, pc}
  412dc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  412dc6:	bf1a      	itte	ne
  412dc8:	4619      	movne	r1, r3
  412dca:	4610      	movne	r0, r2
  412dcc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  412dd0:	bf1c      	itt	ne
  412dd2:	460b      	movne	r3, r1
  412dd4:	4602      	movne	r2, r0
  412dd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  412dda:	bf06      	itte	eq
  412ddc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  412de0:	ea91 0f03 	teqeq	r1, r3
  412de4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  412de8:	bd30      	pop	{r4, r5, pc}
  412dea:	bf00      	nop

00412dec <__aeabi_ui2d>:
  412dec:	f090 0f00 	teq	r0, #0
  412df0:	bf04      	itt	eq
  412df2:	2100      	moveq	r1, #0
  412df4:	4770      	bxeq	lr
  412df6:	b530      	push	{r4, r5, lr}
  412df8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  412dfc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  412e00:	f04f 0500 	mov.w	r5, #0
  412e04:	f04f 0100 	mov.w	r1, #0
  412e08:	e750      	b.n	412cac <__adddf3+0x138>
  412e0a:	bf00      	nop

00412e0c <__aeabi_i2d>:
  412e0c:	f090 0f00 	teq	r0, #0
  412e10:	bf04      	itt	eq
  412e12:	2100      	moveq	r1, #0
  412e14:	4770      	bxeq	lr
  412e16:	b530      	push	{r4, r5, lr}
  412e18:	f44f 6480 	mov.w	r4, #1024	; 0x400
  412e1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  412e20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  412e24:	bf48      	it	mi
  412e26:	4240      	negmi	r0, r0
  412e28:	f04f 0100 	mov.w	r1, #0
  412e2c:	e73e      	b.n	412cac <__adddf3+0x138>
  412e2e:	bf00      	nop

00412e30 <__aeabi_f2d>:
  412e30:	0042      	lsls	r2, r0, #1
  412e32:	ea4f 01e2 	mov.w	r1, r2, asr #3
  412e36:	ea4f 0131 	mov.w	r1, r1, rrx
  412e3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  412e3e:	bf1f      	itttt	ne
  412e40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  412e44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  412e48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  412e4c:	4770      	bxne	lr
  412e4e:	f092 0f00 	teq	r2, #0
  412e52:	bf14      	ite	ne
  412e54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  412e58:	4770      	bxeq	lr
  412e5a:	b530      	push	{r4, r5, lr}
  412e5c:	f44f 7460 	mov.w	r4, #896	; 0x380
  412e60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  412e64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  412e68:	e720      	b.n	412cac <__adddf3+0x138>
  412e6a:	bf00      	nop

00412e6c <__aeabi_ul2d>:
  412e6c:	ea50 0201 	orrs.w	r2, r0, r1
  412e70:	bf08      	it	eq
  412e72:	4770      	bxeq	lr
  412e74:	b530      	push	{r4, r5, lr}
  412e76:	f04f 0500 	mov.w	r5, #0
  412e7a:	e00a      	b.n	412e92 <__aeabi_l2d+0x16>

00412e7c <__aeabi_l2d>:
  412e7c:	ea50 0201 	orrs.w	r2, r0, r1
  412e80:	bf08      	it	eq
  412e82:	4770      	bxeq	lr
  412e84:	b530      	push	{r4, r5, lr}
  412e86:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  412e8a:	d502      	bpl.n	412e92 <__aeabi_l2d+0x16>
  412e8c:	4240      	negs	r0, r0
  412e8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  412e92:	f44f 6480 	mov.w	r4, #1024	; 0x400
  412e96:	f104 0432 	add.w	r4, r4, #50	; 0x32
  412e9a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  412e9e:	f43f aedc 	beq.w	412c5a <__adddf3+0xe6>
  412ea2:	f04f 0203 	mov.w	r2, #3
  412ea6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  412eaa:	bf18      	it	ne
  412eac:	3203      	addne	r2, #3
  412eae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  412eb2:	bf18      	it	ne
  412eb4:	3203      	addne	r2, #3
  412eb6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  412eba:	f1c2 0320 	rsb	r3, r2, #32
  412ebe:	fa00 fc03 	lsl.w	ip, r0, r3
  412ec2:	fa20 f002 	lsr.w	r0, r0, r2
  412ec6:	fa01 fe03 	lsl.w	lr, r1, r3
  412eca:	ea40 000e 	orr.w	r0, r0, lr
  412ece:	fa21 f102 	lsr.w	r1, r1, r2
  412ed2:	4414      	add	r4, r2
  412ed4:	e6c1      	b.n	412c5a <__adddf3+0xe6>
  412ed6:	bf00      	nop

00412ed8 <__aeabi_dmul>:
  412ed8:	b570      	push	{r4, r5, r6, lr}
  412eda:	f04f 0cff 	mov.w	ip, #255	; 0xff
  412ede:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  412ee2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  412ee6:	bf1d      	ittte	ne
  412ee8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  412eec:	ea94 0f0c 	teqne	r4, ip
  412ef0:	ea95 0f0c 	teqne	r5, ip
  412ef4:	f000 f8de 	bleq	4130b4 <__aeabi_dmul+0x1dc>
  412ef8:	442c      	add	r4, r5
  412efa:	ea81 0603 	eor.w	r6, r1, r3
  412efe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  412f02:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  412f06:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  412f0a:	bf18      	it	ne
  412f0c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  412f10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  412f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  412f18:	d038      	beq.n	412f8c <__aeabi_dmul+0xb4>
  412f1a:	fba0 ce02 	umull	ip, lr, r0, r2
  412f1e:	f04f 0500 	mov.w	r5, #0
  412f22:	fbe1 e502 	umlal	lr, r5, r1, r2
  412f26:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  412f2a:	fbe0 e503 	umlal	lr, r5, r0, r3
  412f2e:	f04f 0600 	mov.w	r6, #0
  412f32:	fbe1 5603 	umlal	r5, r6, r1, r3
  412f36:	f09c 0f00 	teq	ip, #0
  412f3a:	bf18      	it	ne
  412f3c:	f04e 0e01 	orrne.w	lr, lr, #1
  412f40:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  412f44:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  412f48:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  412f4c:	d204      	bcs.n	412f58 <__aeabi_dmul+0x80>
  412f4e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  412f52:	416d      	adcs	r5, r5
  412f54:	eb46 0606 	adc.w	r6, r6, r6
  412f58:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  412f5c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  412f60:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  412f64:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  412f68:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  412f6c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  412f70:	bf88      	it	hi
  412f72:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  412f76:	d81e      	bhi.n	412fb6 <__aeabi_dmul+0xde>
  412f78:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  412f7c:	bf08      	it	eq
  412f7e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  412f82:	f150 0000 	adcs.w	r0, r0, #0
  412f86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  412f8a:	bd70      	pop	{r4, r5, r6, pc}
  412f8c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  412f90:	ea46 0101 	orr.w	r1, r6, r1
  412f94:	ea40 0002 	orr.w	r0, r0, r2
  412f98:	ea81 0103 	eor.w	r1, r1, r3
  412f9c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  412fa0:	bfc2      	ittt	gt
  412fa2:	ebd4 050c 	rsbsgt	r5, r4, ip
  412fa6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  412faa:	bd70      	popgt	{r4, r5, r6, pc}
  412fac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  412fb0:	f04f 0e00 	mov.w	lr, #0
  412fb4:	3c01      	subs	r4, #1
  412fb6:	f300 80ab 	bgt.w	413110 <__aeabi_dmul+0x238>
  412fba:	f114 0f36 	cmn.w	r4, #54	; 0x36
  412fbe:	bfde      	ittt	le
  412fc0:	2000      	movle	r0, #0
  412fc2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  412fc6:	bd70      	pople	{r4, r5, r6, pc}
  412fc8:	f1c4 0400 	rsb	r4, r4, #0
  412fcc:	3c20      	subs	r4, #32
  412fce:	da35      	bge.n	41303c <__aeabi_dmul+0x164>
  412fd0:	340c      	adds	r4, #12
  412fd2:	dc1b      	bgt.n	41300c <__aeabi_dmul+0x134>
  412fd4:	f104 0414 	add.w	r4, r4, #20
  412fd8:	f1c4 0520 	rsb	r5, r4, #32
  412fdc:	fa00 f305 	lsl.w	r3, r0, r5
  412fe0:	fa20 f004 	lsr.w	r0, r0, r4
  412fe4:	fa01 f205 	lsl.w	r2, r1, r5
  412fe8:	ea40 0002 	orr.w	r0, r0, r2
  412fec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  412ff0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  412ff4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  412ff8:	fa21 f604 	lsr.w	r6, r1, r4
  412ffc:	eb42 0106 	adc.w	r1, r2, r6
  413000:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  413004:	bf08      	it	eq
  413006:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41300a:	bd70      	pop	{r4, r5, r6, pc}
  41300c:	f1c4 040c 	rsb	r4, r4, #12
  413010:	f1c4 0520 	rsb	r5, r4, #32
  413014:	fa00 f304 	lsl.w	r3, r0, r4
  413018:	fa20 f005 	lsr.w	r0, r0, r5
  41301c:	fa01 f204 	lsl.w	r2, r1, r4
  413020:	ea40 0002 	orr.w	r0, r0, r2
  413024:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  413028:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  41302c:	f141 0100 	adc.w	r1, r1, #0
  413030:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  413034:	bf08      	it	eq
  413036:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41303a:	bd70      	pop	{r4, r5, r6, pc}
  41303c:	f1c4 0520 	rsb	r5, r4, #32
  413040:	fa00 f205 	lsl.w	r2, r0, r5
  413044:	ea4e 0e02 	orr.w	lr, lr, r2
  413048:	fa20 f304 	lsr.w	r3, r0, r4
  41304c:	fa01 f205 	lsl.w	r2, r1, r5
  413050:	ea43 0302 	orr.w	r3, r3, r2
  413054:	fa21 f004 	lsr.w	r0, r1, r4
  413058:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41305c:	fa21 f204 	lsr.w	r2, r1, r4
  413060:	ea20 0002 	bic.w	r0, r0, r2
  413064:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  413068:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41306c:	bf08      	it	eq
  41306e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  413072:	bd70      	pop	{r4, r5, r6, pc}
  413074:	f094 0f00 	teq	r4, #0
  413078:	d10f      	bne.n	41309a <__aeabi_dmul+0x1c2>
  41307a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  41307e:	0040      	lsls	r0, r0, #1
  413080:	eb41 0101 	adc.w	r1, r1, r1
  413084:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  413088:	bf08      	it	eq
  41308a:	3c01      	subeq	r4, #1
  41308c:	d0f7      	beq.n	41307e <__aeabi_dmul+0x1a6>
  41308e:	ea41 0106 	orr.w	r1, r1, r6
  413092:	f095 0f00 	teq	r5, #0
  413096:	bf18      	it	ne
  413098:	4770      	bxne	lr
  41309a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  41309e:	0052      	lsls	r2, r2, #1
  4130a0:	eb43 0303 	adc.w	r3, r3, r3
  4130a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4130a8:	bf08      	it	eq
  4130aa:	3d01      	subeq	r5, #1
  4130ac:	d0f7      	beq.n	41309e <__aeabi_dmul+0x1c6>
  4130ae:	ea43 0306 	orr.w	r3, r3, r6
  4130b2:	4770      	bx	lr
  4130b4:	ea94 0f0c 	teq	r4, ip
  4130b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4130bc:	bf18      	it	ne
  4130be:	ea95 0f0c 	teqne	r5, ip
  4130c2:	d00c      	beq.n	4130de <__aeabi_dmul+0x206>
  4130c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4130c8:	bf18      	it	ne
  4130ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4130ce:	d1d1      	bne.n	413074 <__aeabi_dmul+0x19c>
  4130d0:	ea81 0103 	eor.w	r1, r1, r3
  4130d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4130d8:	f04f 0000 	mov.w	r0, #0
  4130dc:	bd70      	pop	{r4, r5, r6, pc}
  4130de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4130e2:	bf06      	itte	eq
  4130e4:	4610      	moveq	r0, r2
  4130e6:	4619      	moveq	r1, r3
  4130e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4130ec:	d019      	beq.n	413122 <__aeabi_dmul+0x24a>
  4130ee:	ea94 0f0c 	teq	r4, ip
  4130f2:	d102      	bne.n	4130fa <__aeabi_dmul+0x222>
  4130f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4130f8:	d113      	bne.n	413122 <__aeabi_dmul+0x24a>
  4130fa:	ea95 0f0c 	teq	r5, ip
  4130fe:	d105      	bne.n	41310c <__aeabi_dmul+0x234>
  413100:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  413104:	bf1c      	itt	ne
  413106:	4610      	movne	r0, r2
  413108:	4619      	movne	r1, r3
  41310a:	d10a      	bne.n	413122 <__aeabi_dmul+0x24a>
  41310c:	ea81 0103 	eor.w	r1, r1, r3
  413110:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  413114:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  413118:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  41311c:	f04f 0000 	mov.w	r0, #0
  413120:	bd70      	pop	{r4, r5, r6, pc}
  413122:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  413126:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  41312a:	bd70      	pop	{r4, r5, r6, pc}

0041312c <__aeabi_ddiv>:
  41312c:	b570      	push	{r4, r5, r6, lr}
  41312e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  413132:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  413136:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  41313a:	bf1d      	ittte	ne
  41313c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  413140:	ea94 0f0c 	teqne	r4, ip
  413144:	ea95 0f0c 	teqne	r5, ip
  413148:	f000 f8a7 	bleq	41329a <__aeabi_ddiv+0x16e>
  41314c:	eba4 0405 	sub.w	r4, r4, r5
  413150:	ea81 0e03 	eor.w	lr, r1, r3
  413154:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  413158:	ea4f 3101 	mov.w	r1, r1, lsl #12
  41315c:	f000 8088 	beq.w	413270 <__aeabi_ddiv+0x144>
  413160:	ea4f 3303 	mov.w	r3, r3, lsl #12
  413164:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  413168:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  41316c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  413170:	ea4f 2202 	mov.w	r2, r2, lsl #8
  413174:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  413178:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  41317c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  413180:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  413184:	429d      	cmp	r5, r3
  413186:	bf08      	it	eq
  413188:	4296      	cmpeq	r6, r2
  41318a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  41318e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  413192:	d202      	bcs.n	41319a <__aeabi_ddiv+0x6e>
  413194:	085b      	lsrs	r3, r3, #1
  413196:	ea4f 0232 	mov.w	r2, r2, rrx
  41319a:	1ab6      	subs	r6, r6, r2
  41319c:	eb65 0503 	sbc.w	r5, r5, r3
  4131a0:	085b      	lsrs	r3, r3, #1
  4131a2:	ea4f 0232 	mov.w	r2, r2, rrx
  4131a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4131aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4131ae:	ebb6 0e02 	subs.w	lr, r6, r2
  4131b2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4131b6:	bf22      	ittt	cs
  4131b8:	1ab6      	subcs	r6, r6, r2
  4131ba:	4675      	movcs	r5, lr
  4131bc:	ea40 000c 	orrcs.w	r0, r0, ip
  4131c0:	085b      	lsrs	r3, r3, #1
  4131c2:	ea4f 0232 	mov.w	r2, r2, rrx
  4131c6:	ebb6 0e02 	subs.w	lr, r6, r2
  4131ca:	eb75 0e03 	sbcs.w	lr, r5, r3
  4131ce:	bf22      	ittt	cs
  4131d0:	1ab6      	subcs	r6, r6, r2
  4131d2:	4675      	movcs	r5, lr
  4131d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4131d8:	085b      	lsrs	r3, r3, #1
  4131da:	ea4f 0232 	mov.w	r2, r2, rrx
  4131de:	ebb6 0e02 	subs.w	lr, r6, r2
  4131e2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4131e6:	bf22      	ittt	cs
  4131e8:	1ab6      	subcs	r6, r6, r2
  4131ea:	4675      	movcs	r5, lr
  4131ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4131f0:	085b      	lsrs	r3, r3, #1
  4131f2:	ea4f 0232 	mov.w	r2, r2, rrx
  4131f6:	ebb6 0e02 	subs.w	lr, r6, r2
  4131fa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4131fe:	bf22      	ittt	cs
  413200:	1ab6      	subcs	r6, r6, r2
  413202:	4675      	movcs	r5, lr
  413204:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  413208:	ea55 0e06 	orrs.w	lr, r5, r6
  41320c:	d018      	beq.n	413240 <__aeabi_ddiv+0x114>
  41320e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  413212:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  413216:	ea4f 1606 	mov.w	r6, r6, lsl #4
  41321a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  41321e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  413222:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  413226:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  41322a:	d1c0      	bne.n	4131ae <__aeabi_ddiv+0x82>
  41322c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  413230:	d10b      	bne.n	41324a <__aeabi_ddiv+0x11e>
  413232:	ea41 0100 	orr.w	r1, r1, r0
  413236:	f04f 0000 	mov.w	r0, #0
  41323a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  41323e:	e7b6      	b.n	4131ae <__aeabi_ddiv+0x82>
  413240:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  413244:	bf04      	itt	eq
  413246:	4301      	orreq	r1, r0
  413248:	2000      	moveq	r0, #0
  41324a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  41324e:	bf88      	it	hi
  413250:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  413254:	f63f aeaf 	bhi.w	412fb6 <__aeabi_dmul+0xde>
  413258:	ebb5 0c03 	subs.w	ip, r5, r3
  41325c:	bf04      	itt	eq
  41325e:	ebb6 0c02 	subseq.w	ip, r6, r2
  413262:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  413266:	f150 0000 	adcs.w	r0, r0, #0
  41326a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41326e:	bd70      	pop	{r4, r5, r6, pc}
  413270:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  413274:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  413278:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  41327c:	bfc2      	ittt	gt
  41327e:	ebd4 050c 	rsbsgt	r5, r4, ip
  413282:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  413286:	bd70      	popgt	{r4, r5, r6, pc}
  413288:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41328c:	f04f 0e00 	mov.w	lr, #0
  413290:	3c01      	subs	r4, #1
  413292:	e690      	b.n	412fb6 <__aeabi_dmul+0xde>
  413294:	ea45 0e06 	orr.w	lr, r5, r6
  413298:	e68d      	b.n	412fb6 <__aeabi_dmul+0xde>
  41329a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  41329e:	ea94 0f0c 	teq	r4, ip
  4132a2:	bf08      	it	eq
  4132a4:	ea95 0f0c 	teqeq	r5, ip
  4132a8:	f43f af3b 	beq.w	413122 <__aeabi_dmul+0x24a>
  4132ac:	ea94 0f0c 	teq	r4, ip
  4132b0:	d10a      	bne.n	4132c8 <__aeabi_ddiv+0x19c>
  4132b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4132b6:	f47f af34 	bne.w	413122 <__aeabi_dmul+0x24a>
  4132ba:	ea95 0f0c 	teq	r5, ip
  4132be:	f47f af25 	bne.w	41310c <__aeabi_dmul+0x234>
  4132c2:	4610      	mov	r0, r2
  4132c4:	4619      	mov	r1, r3
  4132c6:	e72c      	b.n	413122 <__aeabi_dmul+0x24a>
  4132c8:	ea95 0f0c 	teq	r5, ip
  4132cc:	d106      	bne.n	4132dc <__aeabi_ddiv+0x1b0>
  4132ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4132d2:	f43f aefd 	beq.w	4130d0 <__aeabi_dmul+0x1f8>
  4132d6:	4610      	mov	r0, r2
  4132d8:	4619      	mov	r1, r3
  4132da:	e722      	b.n	413122 <__aeabi_dmul+0x24a>
  4132dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4132e0:	bf18      	it	ne
  4132e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4132e6:	f47f aec5 	bne.w	413074 <__aeabi_dmul+0x19c>
  4132ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4132ee:	f47f af0d 	bne.w	41310c <__aeabi_dmul+0x234>
  4132f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4132f6:	f47f aeeb 	bne.w	4130d0 <__aeabi_dmul+0x1f8>
  4132fa:	e712      	b.n	413122 <__aeabi_dmul+0x24a>

004132fc <__gedf2>:
  4132fc:	f04f 3cff 	mov.w	ip, #4294967295
  413300:	e006      	b.n	413310 <__cmpdf2+0x4>
  413302:	bf00      	nop

00413304 <__ledf2>:
  413304:	f04f 0c01 	mov.w	ip, #1
  413308:	e002      	b.n	413310 <__cmpdf2+0x4>
  41330a:	bf00      	nop

0041330c <__cmpdf2>:
  41330c:	f04f 0c01 	mov.w	ip, #1
  413310:	f84d cd04 	str.w	ip, [sp, #-4]!
  413314:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  413318:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  41331c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  413320:	bf18      	it	ne
  413322:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  413326:	d01b      	beq.n	413360 <__cmpdf2+0x54>
  413328:	b001      	add	sp, #4
  41332a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  41332e:	bf0c      	ite	eq
  413330:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  413334:	ea91 0f03 	teqne	r1, r3
  413338:	bf02      	ittt	eq
  41333a:	ea90 0f02 	teqeq	r0, r2
  41333e:	2000      	moveq	r0, #0
  413340:	4770      	bxeq	lr
  413342:	f110 0f00 	cmn.w	r0, #0
  413346:	ea91 0f03 	teq	r1, r3
  41334a:	bf58      	it	pl
  41334c:	4299      	cmppl	r1, r3
  41334e:	bf08      	it	eq
  413350:	4290      	cmpeq	r0, r2
  413352:	bf2c      	ite	cs
  413354:	17d8      	asrcs	r0, r3, #31
  413356:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  41335a:	f040 0001 	orr.w	r0, r0, #1
  41335e:	4770      	bx	lr
  413360:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  413364:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  413368:	d102      	bne.n	413370 <__cmpdf2+0x64>
  41336a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  41336e:	d107      	bne.n	413380 <__cmpdf2+0x74>
  413370:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  413374:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  413378:	d1d6      	bne.n	413328 <__cmpdf2+0x1c>
  41337a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  41337e:	d0d3      	beq.n	413328 <__cmpdf2+0x1c>
  413380:	f85d 0b04 	ldr.w	r0, [sp], #4
  413384:	4770      	bx	lr
  413386:	bf00      	nop

00413388 <__aeabi_cdrcmple>:
  413388:	4684      	mov	ip, r0
  41338a:	4610      	mov	r0, r2
  41338c:	4662      	mov	r2, ip
  41338e:	468c      	mov	ip, r1
  413390:	4619      	mov	r1, r3
  413392:	4663      	mov	r3, ip
  413394:	e000      	b.n	413398 <__aeabi_cdcmpeq>
  413396:	bf00      	nop

00413398 <__aeabi_cdcmpeq>:
  413398:	b501      	push	{r0, lr}
  41339a:	f7ff ffb7 	bl	41330c <__cmpdf2>
  41339e:	2800      	cmp	r0, #0
  4133a0:	bf48      	it	mi
  4133a2:	f110 0f00 	cmnmi.w	r0, #0
  4133a6:	bd01      	pop	{r0, pc}

004133a8 <__aeabi_dcmpeq>:
  4133a8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4133ac:	f7ff fff4 	bl	413398 <__aeabi_cdcmpeq>
  4133b0:	bf0c      	ite	eq
  4133b2:	2001      	moveq	r0, #1
  4133b4:	2000      	movne	r0, #0
  4133b6:	f85d fb08 	ldr.w	pc, [sp], #8
  4133ba:	bf00      	nop

004133bc <__aeabi_dcmplt>:
  4133bc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4133c0:	f7ff ffea 	bl	413398 <__aeabi_cdcmpeq>
  4133c4:	bf34      	ite	cc
  4133c6:	2001      	movcc	r0, #1
  4133c8:	2000      	movcs	r0, #0
  4133ca:	f85d fb08 	ldr.w	pc, [sp], #8
  4133ce:	bf00      	nop

004133d0 <__aeabi_dcmple>:
  4133d0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4133d4:	f7ff ffe0 	bl	413398 <__aeabi_cdcmpeq>
  4133d8:	bf94      	ite	ls
  4133da:	2001      	movls	r0, #1
  4133dc:	2000      	movhi	r0, #0
  4133de:	f85d fb08 	ldr.w	pc, [sp], #8
  4133e2:	bf00      	nop

004133e4 <__aeabi_dcmpge>:
  4133e4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4133e8:	f7ff ffce 	bl	413388 <__aeabi_cdrcmple>
  4133ec:	bf94      	ite	ls
  4133ee:	2001      	movls	r0, #1
  4133f0:	2000      	movhi	r0, #0
  4133f2:	f85d fb08 	ldr.w	pc, [sp], #8
  4133f6:	bf00      	nop

004133f8 <__aeabi_dcmpgt>:
  4133f8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4133fc:	f7ff ffc4 	bl	413388 <__aeabi_cdrcmple>
  413400:	bf34      	ite	cc
  413402:	2001      	movcc	r0, #1
  413404:	2000      	movcs	r0, #0
  413406:	f85d fb08 	ldr.w	pc, [sp], #8
  41340a:	bf00      	nop

0041340c <__aeabi_d2iz>:
  41340c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  413410:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  413414:	d215      	bcs.n	413442 <__aeabi_d2iz+0x36>
  413416:	d511      	bpl.n	41343c <__aeabi_d2iz+0x30>
  413418:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  41341c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  413420:	d912      	bls.n	413448 <__aeabi_d2iz+0x3c>
  413422:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  413426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  41342a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  41342e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  413432:	fa23 f002 	lsr.w	r0, r3, r2
  413436:	bf18      	it	ne
  413438:	4240      	negne	r0, r0
  41343a:	4770      	bx	lr
  41343c:	f04f 0000 	mov.w	r0, #0
  413440:	4770      	bx	lr
  413442:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  413446:	d105      	bne.n	413454 <__aeabi_d2iz+0x48>
  413448:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  41344c:	bf08      	it	eq
  41344e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  413452:	4770      	bx	lr
  413454:	f04f 0000 	mov.w	r0, #0
  413458:	4770      	bx	lr
  41345a:	bf00      	nop

0041345c <__aeabi_d2uiz>:
  41345c:	004a      	lsls	r2, r1, #1
  41345e:	d211      	bcs.n	413484 <__aeabi_d2uiz+0x28>
  413460:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  413464:	d211      	bcs.n	41348a <__aeabi_d2uiz+0x2e>
  413466:	d50d      	bpl.n	413484 <__aeabi_d2uiz+0x28>
  413468:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  41346c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  413470:	d40e      	bmi.n	413490 <__aeabi_d2uiz+0x34>
  413472:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  413476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  41347a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  41347e:	fa23 f002 	lsr.w	r0, r3, r2
  413482:	4770      	bx	lr
  413484:	f04f 0000 	mov.w	r0, #0
  413488:	4770      	bx	lr
  41348a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  41348e:	d102      	bne.n	413496 <__aeabi_d2uiz+0x3a>
  413490:	f04f 30ff 	mov.w	r0, #4294967295
  413494:	4770      	bx	lr
  413496:	f04f 0000 	mov.w	r0, #0
  41349a:	4770      	bx	lr

0041349c <__aeabi_d2f>:
  41349c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4134a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4134a4:	bf24      	itt	cs
  4134a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4134aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4134ae:	d90d      	bls.n	4134cc <__aeabi_d2f+0x30>
  4134b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4134b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4134b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4134bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4134c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4134c4:	bf08      	it	eq
  4134c6:	f020 0001 	biceq.w	r0, r0, #1
  4134ca:	4770      	bx	lr
  4134cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4134d0:	d121      	bne.n	413516 <__aeabi_d2f+0x7a>
  4134d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4134d6:	bfbc      	itt	lt
  4134d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4134dc:	4770      	bxlt	lr
  4134de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4134e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4134e6:	f1c2 0218 	rsb	r2, r2, #24
  4134ea:	f1c2 0c20 	rsb	ip, r2, #32
  4134ee:	fa10 f30c 	lsls.w	r3, r0, ip
  4134f2:	fa20 f002 	lsr.w	r0, r0, r2
  4134f6:	bf18      	it	ne
  4134f8:	f040 0001 	orrne.w	r0, r0, #1
  4134fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  413500:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  413504:	fa03 fc0c 	lsl.w	ip, r3, ip
  413508:	ea40 000c 	orr.w	r0, r0, ip
  41350c:	fa23 f302 	lsr.w	r3, r3, r2
  413510:	ea4f 0343 	mov.w	r3, r3, lsl #1
  413514:	e7cc      	b.n	4134b0 <__aeabi_d2f+0x14>
  413516:	ea7f 5362 	mvns.w	r3, r2, asr #21
  41351a:	d107      	bne.n	41352c <__aeabi_d2f+0x90>
  41351c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  413520:	bf1e      	ittt	ne
  413522:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  413526:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  41352a:	4770      	bxne	lr
  41352c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  413530:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  413534:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  413538:	4770      	bx	lr
  41353a:	bf00      	nop

0041353c <all_twi_definitions>:
  41353c:	8000 4001 8100 4001 0013 0000 0013 0000     ...@...@........
  41354c:	c000 4001 c100 4001 0014 0000 0014 0000     ...@...@........
  41355c:	c200 0001 0000 0000 0800 0000 0000 0000     ................
  41356c:	6573 5474 6d69 0065 7750 4272 6472 734d     setTime.PwrBrdMs
  41357c:	3a67 7325 0000 0000 6425 252d 2d64 6425     g:%s....%d-%d-%d
  41358c:	252d 2d64 6425 253a 3a64 6425 0a0d 0000     -%d-%d:%d:%d....
  41359c:	7473 7261 4174 7070 696c 6163 6974 6e6f     startApplication
  4135ac:	0d21 000a 6f50 6577 4272 746e 7420 6d69     !...PowerBnt tim
  4135bc:	7265 0000 4843 4752 0000 0000 6146 6c69     er..CHRG....Fail
  4135cc:	6465 7420 206f 7263 6165 6574 4320 5248     ed to create CHR
  4135dc:	2047 6174 6b73 6320 646f 2065 6425 0a0d     G task code %d..
  4135ec:	0000 0000 4d43 0044 6146 6c69 6465 7420     ....CMD.Failed t
  4135fc:	206f 7263 6165 6574 4320 444d 7420 7361     o create CMD tas
  41360c:	206b 6f63 6564 2520 0d64 000a 4144 0054     k code %d...DAT.
  41361c:	6f50 6577 0d72 000a 654c 2064 6954 656d     Power...Led Time
  41362c:	0072 0000 4449 454c 0000 0000 0a0d 0000     r...IDLE........
  41363c:	7325 0909 6325 2509 0975 7525 2509 0d75     %s..%c.%u.%u.%u.
  41364c:	000a 0000 6d54 2072 7653 0063 474d 0052     ....Tmr Svc.MGR.
  41365c:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  41366c:	4d20 5247 7420 7361 206b 6f63 6564 2520      MGR task code %
  41367c:	0d64 000a 0043 0000                         d...C...

00413684 <_global_impure_ptr>:
  413684:	0218 2000                                   ... 

00413688 <zeroes.6763>:
  413688:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  413698:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  4136a8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  4136b8:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  4136c8:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  4136d8:	0030 0000                                   0...

004136dc <blanks.6762>:
  4136dc:	2020 2020 2020 2020 2020 2020 2020 2020                     

004136ec <basefix.6714>:
  4136ec:	000a 0001 0002 0003 0004 0005 0006 0007     ................
  4136fc:	0008 0009 000a 000b 000c 000d 000e 000f     ................
  41370c:	0010 0000 2565 646c 0000 0000               ....e%ld....

00413718 <zeroes.6721>:
  413718:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00413728 <blanks.6720>:
  413728:	2020 2020 2020 2020 2020 2020 2020 2020                     

00413738 <_ctype_>:
  413738:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  413748:	2020 2020 2020 2020 2020 2020 2020 2020                     
  413758:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  413768:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  413778:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  413788:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  413798:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4137a8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4137b8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  41383c:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  41384c:	4f50 4953 0058 0000 002e 0000               POSIX.......

00413858 <__mprec_tens>:
  413858:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  413868:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  413878:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  413888:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  413898:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  4138a8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  4138b8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  4138c8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4138d8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  4138e8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  4138f8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  413908:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  413918:	9db4 79d9 7843 44ea                         ...yCx.D

00413920 <__mprec_bigtens>:
  413920:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  413930:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  413940:	bf3c 7f73 4fdd 7515                         <.s..O.u

00413948 <p05.5269>:
  413948:	0005 0000 0019 0000 007d 0000               ........}...

00413954 <fpi.5238>:
  413954:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
  413964:	0000 0000 666e 0000 6e69 7469 0079 0000     ....nf..inity...
  413974:	6e61 0000                                   an..

00413978 <fpinan.5274>:
  413978:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

00413990 <tinytens>:
  413990:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
  4139a0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
  4139b0:	6f43 64ac 0628 1168                         Co.d(.h.

004139b8 <__hexdig>:
	...
  4139e8:	1110 1312 1514 1716 1918 0000 0000 0000     ................
  4139f8:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  413a18:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...

00413ab8 <_init>:
  413ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413aba:	bf00      	nop
  413abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  413abe:	bc08      	pop	{r3}
  413ac0:	469e      	mov	lr, r3
  413ac2:	4770      	bx	lr

00413ac4 <__init_array_start>:
  413ac4:	0040dadd 	.word	0x0040dadd

00413ac8 <__frame_dummy_init_array_entry>:
  413ac8:	004000f1                                ..@.

00413acc <_fini>:
  413acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413ace:	bf00      	nop
  413ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  413ad2:	bc08      	pop	{r3}
  413ad4:	469e      	mov	lr, r3
  413ad6:	4770      	bx	lr

00413ad8 <__fini_array_start>:
  413ad8:	004000cd 	.word	0x004000cd
